// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package fsxstub

import (
	"github.com/aws/aws-sdk-go/service/fsx"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateFileSystemAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateFileSystemAliasesFuture) Get(ctx workflow.Context) (*fsx.AssociateFileSystemAliasesOutput, error) {
	var output fsx.AssociateFileSystemAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelDataRepositoryTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupFuture) Get(ctx workflow.Context) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDataRepositoryTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDataRepositoryTaskFuture) Get(ctx workflow.Context) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFileSystemFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFileSystemFromBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFileSystemFromBackupFuture) Get(ctx workflow.Context) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupFuture) Get(ctx workflow.Context) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFileSystemFuture) Get(ctx workflow.Context) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupsFuture) Get(ctx workflow.Context) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDataRepositoryTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDataRepositoryTasksFuture) Get(ctx workflow.Context) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFileSystemAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFileSystemAliasesFuture) Get(ctx workflow.Context) (*fsx.DescribeFileSystemAliasesOutput, error) {
	var output fsx.DescribeFileSystemAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFileSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFileSystemsFuture) Get(ctx workflow.Context) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateFileSystemAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateFileSystemAliasesFuture) Get(ctx workflow.Context) (*fsx.DisassociateFileSystemAliasesOutput, error) {
	var output fsx.DisassociateFileSystemAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFileSystemFuture) Get(ctx workflow.Context) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFileSystemAliases(ctx workflow.Context, input *fsx.AssociateFileSystemAliasesInput) (*fsx.AssociateFileSystemAliasesOutput, error) {
	var output fsx.AssociateFileSystemAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-AssociateFileSystemAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFileSystemAliasesAsync(ctx workflow.Context, input *fsx.AssociateFileSystemAliasesInput) *AssociateFileSystemAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-AssociateFileSystemAliases", input)
	return &AssociateFileSystemAliasesFuture{Future: future}
}

func (a *stub) CancelDataRepositoryTask(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) (*fsx.CancelDataRepositoryTaskOutput, error) {
	var output fsx.CancelDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-CancelDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CancelDataRepositoryTaskInput) *CancelDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-CancelDataRepositoryTask", input)
	return &CancelDataRepositoryTaskFuture{Future: future}
}

func (a *stub) CreateBackup(ctx workflow.Context, input *fsx.CreateBackupInput) (*fsx.CreateBackupOutput, error) {
	var output fsx.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupAsync(ctx workflow.Context, input *fsx.CreateBackupInput) *CreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-CreateBackup", input)
	return &CreateBackupFuture{Future: future}
}

func (a *stub) CreateDataRepositoryTask(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) (*fsx.CreateDataRepositoryTaskOutput, error) {
	var output fsx.CreateDataRepositoryTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-CreateDataRepositoryTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataRepositoryTaskAsync(ctx workflow.Context, input *fsx.CreateDataRepositoryTaskInput) *CreateDataRepositoryTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-CreateDataRepositoryTask", input)
	return &CreateDataRepositoryTaskFuture{Future: future}
}

func (a *stub) CreateFileSystem(ctx workflow.Context, input *fsx.CreateFileSystemInput) (*fsx.CreateFileSystemOutput, error) {
	var output fsx.CreateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFileSystemAsync(ctx workflow.Context, input *fsx.CreateFileSystemInput) *CreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-CreateFileSystem", input)
	return &CreateFileSystemFuture{Future: future}
}

func (a *stub) CreateFileSystemFromBackup(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) (*fsx.CreateFileSystemFromBackupOutput, error) {
	var output fsx.CreateFileSystemFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-CreateFileSystemFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFileSystemFromBackupAsync(ctx workflow.Context, input *fsx.CreateFileSystemFromBackupInput) *CreateFileSystemFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-CreateFileSystemFromBackup", input)
	return &CreateFileSystemFromBackupFuture{Future: future}
}

func (a *stub) DeleteBackup(ctx workflow.Context, input *fsx.DeleteBackupInput) (*fsx.DeleteBackupOutput, error) {
	var output fsx.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupAsync(ctx workflow.Context, input *fsx.DeleteBackupInput) *DeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DeleteBackup", input)
	return &DeleteBackupFuture{Future: future}
}

func (a *stub) DeleteFileSystem(ctx workflow.Context, input *fsx.DeleteFileSystemInput) (*fsx.DeleteFileSystemOutput, error) {
	var output fsx.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileSystemAsync(ctx workflow.Context, input *fsx.DeleteFileSystemInput) *DeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DeleteFileSystem", input)
	return &DeleteFileSystemFuture{Future: future}
}

func (a *stub) DescribeBackups(ctx workflow.Context, input *fsx.DescribeBackupsInput) (*fsx.DescribeBackupsOutput, error) {
	var output fsx.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupsAsync(ctx workflow.Context, input *fsx.DescribeBackupsInput) *DescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeBackups", input)
	return &DescribeBackupsFuture{Future: future}
}

func (a *stub) DescribeDataRepositoryTasks(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) (*fsx.DescribeDataRepositoryTasksOutput, error) {
	var output fsx.DescribeDataRepositoryTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeDataRepositoryTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDataRepositoryTasksAsync(ctx workflow.Context, input *fsx.DescribeDataRepositoryTasksInput) *DescribeDataRepositoryTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeDataRepositoryTasks", input)
	return &DescribeDataRepositoryTasksFuture{Future: future}
}

func (a *stub) DescribeFileSystemAliases(ctx workflow.Context, input *fsx.DescribeFileSystemAliasesInput) (*fsx.DescribeFileSystemAliasesOutput, error) {
	var output fsx.DescribeFileSystemAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeFileSystemAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFileSystemAliasesAsync(ctx workflow.Context, input *fsx.DescribeFileSystemAliasesInput) *DescribeFileSystemAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeFileSystemAliases", input)
	return &DescribeFileSystemAliasesFuture{Future: future}
}

func (a *stub) DescribeFileSystems(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) (*fsx.DescribeFileSystemsOutput, error) {
	var output fsx.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFileSystemsAsync(ctx workflow.Context, input *fsx.DescribeFileSystemsInput) *DescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DescribeFileSystems", input)
	return &DescribeFileSystemsFuture{Future: future}
}

func (a *stub) DisassociateFileSystemAliases(ctx workflow.Context, input *fsx.DisassociateFileSystemAliasesInput) (*fsx.DisassociateFileSystemAliasesOutput, error) {
	var output fsx.DisassociateFileSystemAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-DisassociateFileSystemAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateFileSystemAliasesAsync(ctx workflow.Context, input *fsx.DisassociateFileSystemAliasesInput) *DisassociateFileSystemAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-DisassociateFileSystemAliases", input)
	return &DisassociateFileSystemAliasesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *fsx.ListTagsForResourceInput) (*fsx.ListTagsForResourceOutput, error) {
	var output fsx.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *fsx.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *fsx.TagResourceInput) (*fsx.TagResourceOutput, error) {
	var output fsx.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *fsx.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *fsx.UntagResourceInput) (*fsx.UntagResourceOutput, error) {
	var output fsx.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *fsx.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateFileSystem(ctx workflow.Context, input *fsx.UpdateFileSystemInput) (*fsx.UpdateFileSystemOutput, error) {
	var output fsx.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws-fsx-UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFileSystemAsync(ctx workflow.Context, input *fsx.UpdateFileSystemInput) *UpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fsx-UpdateFileSystem", input)
	return &UpdateFileSystemFuture{Future: future}
}
