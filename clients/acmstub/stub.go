// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package acmstub

import (
	"github.com/aws/aws-sdk-go/service/acm"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ACMAddTagsToCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMAddTagsToCertificateFuture) Get(ctx workflow.Context) (*acm.AddTagsToCertificateOutput, error) {
	var output acm.AddTagsToCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMDeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMDeleteCertificateFuture) Get(ctx workflow.Context) (*acm.DeleteCertificateOutput, error) {
	var output acm.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMDescribeCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMDescribeCertificateFuture) Get(ctx workflow.Context) (*acm.DescribeCertificateOutput, error) {
	var output acm.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMExportCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMExportCertificateFuture) Get(ctx workflow.Context) (*acm.ExportCertificateOutput, error) {
	var output acm.ExportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMGetCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMGetCertificateFuture) Get(ctx workflow.Context) (*acm.GetCertificateOutput, error) {
	var output acm.GetCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMImportCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMImportCertificateFuture) Get(ctx workflow.Context) (*acm.ImportCertificateOutput, error) {
	var output acm.ImportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMListCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMListCertificatesFuture) Get(ctx workflow.Context) (*acm.ListCertificatesOutput, error) {
	var output acm.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMListTagsForCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMListTagsForCertificateFuture) Get(ctx workflow.Context) (*acm.ListTagsForCertificateOutput, error) {
	var output acm.ListTagsForCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMRemoveTagsFromCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMRemoveTagsFromCertificateFuture) Get(ctx workflow.Context) (*acm.RemoveTagsFromCertificateOutput, error) {
	var output acm.RemoveTagsFromCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMRenewCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMRenewCertificateFuture) Get(ctx workflow.Context) (*acm.RenewCertificateOutput, error) {
	var output acm.RenewCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMRequestCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMRequestCertificateFuture) Get(ctx workflow.Context) (*acm.RequestCertificateOutput, error) {
	var output acm.RequestCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMResendValidationEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMResendValidationEmailFuture) Get(ctx workflow.Context) (*acm.ResendValidationEmailOutput, error) {
	var output acm.ResendValidationEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ACMUpdateCertificateOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ACMUpdateCertificateOptionsFuture) Get(ctx workflow.Context) (*acm.UpdateCertificateOptionsOutput, error) {
	var output acm.UpdateCertificateOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToCertificate(ctx workflow.Context, input *acm.AddTagsToCertificateInput) (*acm.AddTagsToCertificateOutput, error) {
	var output acm.AddTagsToCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-AddTagsToCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToCertificateAsync(ctx workflow.Context, input *acm.AddTagsToCertificateInput) *ACMAddTagsToCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-AddTagsToCertificate", input)
	return &ACMAddTagsToCertificateFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *acm.DeleteCertificateInput) (*acm.DeleteCertificateOutput, error) {
	var output acm.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *acm.DeleteCertificateInput) *ACMDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-DeleteCertificate", input)
	return &ACMDeleteCertificateFuture{Future: future}
}

func (a *stub) DescribeCertificate(ctx workflow.Context, input *acm.DescribeCertificateInput) (*acm.DescribeCertificateOutput, error) {
	var output acm.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) *ACMDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-DescribeCertificate", input)
	return &ACMDescribeCertificateFuture{Future: future}
}

func (a *stub) ExportCertificate(ctx workflow.Context, input *acm.ExportCertificateInput) (*acm.ExportCertificateOutput, error) {
	var output acm.ExportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-ExportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportCertificateAsync(ctx workflow.Context, input *acm.ExportCertificateInput) *ACMExportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-ExportCertificate", input)
	return &ACMExportCertificateFuture{Future: future}
}

func (a *stub) GetCertificate(ctx workflow.Context, input *acm.GetCertificateInput) (*acm.GetCertificateOutput, error) {
	var output acm.GetCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-GetCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificateAsync(ctx workflow.Context, input *acm.GetCertificateInput) *ACMGetCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-GetCertificate", input)
	return &ACMGetCertificateFuture{Future: future}
}

func (a *stub) ImportCertificate(ctx workflow.Context, input *acm.ImportCertificateInput) (*acm.ImportCertificateOutput, error) {
	var output acm.ImportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-ImportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportCertificateAsync(ctx workflow.Context, input *acm.ImportCertificateInput) *ACMImportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-ImportCertificate", input)
	return &ACMImportCertificateFuture{Future: future}
}

func (a *stub) ListCertificates(ctx workflow.Context, input *acm.ListCertificatesInput) (*acm.ListCertificatesOutput, error) {
	var output acm.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificatesAsync(ctx workflow.Context, input *acm.ListCertificatesInput) *ACMListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-ListCertificates", input)
	return &ACMListCertificatesFuture{Future: future}
}

func (a *stub) ListTagsForCertificate(ctx workflow.Context, input *acm.ListTagsForCertificateInput) (*acm.ListTagsForCertificateOutput, error) {
	var output acm.ListTagsForCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-ListTagsForCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForCertificateAsync(ctx workflow.Context, input *acm.ListTagsForCertificateInput) *ACMListTagsForCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-ListTagsForCertificate", input)
	return &ACMListTagsForCertificateFuture{Future: future}
}

func (a *stub) RemoveTagsFromCertificate(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) (*acm.RemoveTagsFromCertificateOutput, error) {
	var output acm.RemoveTagsFromCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-RemoveTagsFromCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromCertificateAsync(ctx workflow.Context, input *acm.RemoveTagsFromCertificateInput) *ACMRemoveTagsFromCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-RemoveTagsFromCertificate", input)
	return &ACMRemoveTagsFromCertificateFuture{Future: future}
}

func (a *stub) RenewCertificate(ctx workflow.Context, input *acm.RenewCertificateInput) (*acm.RenewCertificateOutput, error) {
	var output acm.RenewCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-RenewCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenewCertificateAsync(ctx workflow.Context, input *acm.RenewCertificateInput) *ACMRenewCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-RenewCertificate", input)
	return &ACMRenewCertificateFuture{Future: future}
}

func (a *stub) RequestCertificate(ctx workflow.Context, input *acm.RequestCertificateInput) (*acm.RequestCertificateOutput, error) {
	var output acm.RequestCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-RequestCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestCertificateAsync(ctx workflow.Context, input *acm.RequestCertificateInput) *ACMRequestCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-RequestCertificate", input)
	return &ACMRequestCertificateFuture{Future: future}
}

func (a *stub) ResendValidationEmail(ctx workflow.Context, input *acm.ResendValidationEmailInput) (*acm.ResendValidationEmailOutput, error) {
	var output acm.ResendValidationEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-ResendValidationEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResendValidationEmailAsync(ctx workflow.Context, input *acm.ResendValidationEmailInput) *ACMResendValidationEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-ResendValidationEmail", input)
	return &ACMResendValidationEmailFuture{Future: future}
}

func (a *stub) UpdateCertificateOptions(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) (*acm.UpdateCertificateOptionsOutput, error) {
	var output acm.UpdateCertificateOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-acm-UpdateCertificateOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCertificateOptionsAsync(ctx workflow.Context, input *acm.UpdateCertificateOptionsInput) *ACMUpdateCertificateOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-UpdateCertificateOptions", input)
	return &ACMUpdateCertificateOptionsFuture{Future: future}
}

func (a *stub) WaitUntilCertificateValidated(ctx workflow.Context, input *acm.DescribeCertificateInput) error {
	return workflow.ExecuteActivity(ctx, "aws-acm-WaitUntilCertificateValidated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCertificateValidatedAsync(ctx workflow.Context, input *acm.DescribeCertificateInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acm-WaitUntilCertificateValidated", input)
	return clients.NewVoidFuture(future)
}
