// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package imagebuilderstub

import (
	"github.com/aws/aws-sdk-go/service/imagebuilder"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ImagebuilderCancelImageCreationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCancelImageCreationFuture) Get(ctx workflow.Context) (*imagebuilder.CancelImageCreationOutput, error) {
	var output imagebuilder.CancelImageCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateComponentFuture) Get(ctx workflow.Context) (*imagebuilder.CreateComponentOutput, error) {
	var output imagebuilder.CreateComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.CreateDistributionConfigurationOutput, error) {
	var output imagebuilder.CreateDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateImageFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImageOutput, error) {
	var output imagebuilder.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImagePipelineOutput, error) {
	var output imagebuilder.CreateImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImageRecipeOutput, error) {
	var output imagebuilder.CreateImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderCreateInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderCreateInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.CreateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.CreateInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteComponentFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteComponentOutput, error) {
	var output imagebuilder.DeleteComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteDistributionConfigurationOutput, error) {
	var output imagebuilder.DeleteDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteImageFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImageOutput, error) {
	var output imagebuilder.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImagePipelineOutput, error) {
	var output imagebuilder.DeleteImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImageRecipeOutput, error) {
	var output imagebuilder.DeleteImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderDeleteInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderDeleteInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error) {
	var output imagebuilder.DeleteInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetComponentFuture) Get(ctx workflow.Context) (*imagebuilder.GetComponentOutput, error) {
	var output imagebuilder.GetComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetComponentPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetComponentPolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetComponentPolicyOutput, error) {
	var output imagebuilder.GetComponentPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.GetDistributionConfigurationOutput, error) {
	var output imagebuilder.GetDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetImageFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageOutput, error) {
	var output imagebuilder.GetImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.GetImagePipelineOutput, error) {
	var output imagebuilder.GetImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetImagePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetImagePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetImagePolicyOutput, error) {
	var output imagebuilder.GetImagePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageRecipeOutput, error) {
	var output imagebuilder.GetImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetImageRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetImageRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageRecipePolicyOutput, error) {
	var output imagebuilder.GetImageRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderGetInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderGetInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.GetInfrastructureConfigurationOutput, error) {
	var output imagebuilder.GetInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderImportComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderImportComponentFuture) Get(ctx workflow.Context) (*imagebuilder.ImportComponentOutput, error) {
	var output imagebuilder.ImportComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListComponentBuildVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListComponentBuildVersionsFuture) Get(ctx workflow.Context) (*imagebuilder.ListComponentBuildVersionsOutput, error) {
	var output imagebuilder.ListComponentBuildVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListComponentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListComponentsFuture) Get(ctx workflow.Context) (*imagebuilder.ListComponentsOutput, error) {
	var output imagebuilder.ListComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListDistributionConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListDistributionConfigurationsFuture) Get(ctx workflow.Context) (*imagebuilder.ListDistributionConfigurationsOutput, error) {
	var output imagebuilder.ListDistributionConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListImageBuildVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListImageBuildVersionsFuture) Get(ctx workflow.Context) (*imagebuilder.ListImageBuildVersionsOutput, error) {
	var output imagebuilder.ListImageBuildVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListImagePipelineImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListImagePipelineImagesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagePipelineImagesOutput, error) {
	var output imagebuilder.ListImagePipelineImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListImagePipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListImagePipelinesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagePipelinesOutput, error) {
	var output imagebuilder.ListImagePipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListImageRecipesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListImageRecipesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImageRecipesOutput, error) {
	var output imagebuilder.ListImageRecipesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListImagesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagesOutput, error) {
	var output imagebuilder.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListInfrastructureConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListInfrastructureConfigurationsFuture) Get(ctx workflow.Context) (*imagebuilder.ListInfrastructureConfigurationsOutput, error) {
	var output imagebuilder.ListInfrastructureConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderListTagsForResourceFuture) Get(ctx workflow.Context) (*imagebuilder.ListTagsForResourceOutput, error) {
	var output imagebuilder.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderPutComponentPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderPutComponentPolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutComponentPolicyOutput, error) {
	var output imagebuilder.PutComponentPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderPutImagePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderPutImagePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutImagePolicyOutput, error) {
	var output imagebuilder.PutImagePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderPutImageRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderPutImageRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutImageRecipePolicyOutput, error) {
	var output imagebuilder.PutImageRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderStartImagePipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderStartImagePipelineExecutionFuture) Get(ctx workflow.Context) (*imagebuilder.StartImagePipelineExecutionOutput, error) {
	var output imagebuilder.StartImagePipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderTagResourceFuture) Get(ctx workflow.Context) (*imagebuilder.TagResourceOutput, error) {
	var output imagebuilder.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderUntagResourceFuture) Get(ctx workflow.Context) (*imagebuilder.UntagResourceOutput, error) {
	var output imagebuilder.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderUpdateDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderUpdateDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateDistributionConfigurationOutput, error) {
	var output imagebuilder.UpdateDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderUpdateImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderUpdateImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateImagePipelineOutput, error) {
	var output imagebuilder.UpdateImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImagebuilderUpdateInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImagebuilderUpdateInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.UpdateInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelImageCreation(ctx workflow.Context, input *imagebuilder.CancelImageCreationInput) (*imagebuilder.CancelImageCreationOutput, error) {
	var output imagebuilder.CancelImageCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CancelImageCreation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelImageCreationAsync(ctx workflow.Context, input *imagebuilder.CancelImageCreationInput) *ImagebuilderCancelImageCreationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CancelImageCreation", input)
	return &ImagebuilderCancelImageCreationFuture{Future: future}
}

func (a *stub) CreateComponent(ctx workflow.Context, input *imagebuilder.CreateComponentInput) (*imagebuilder.CreateComponentOutput, error) {
	var output imagebuilder.CreateComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateComponentAsync(ctx workflow.Context, input *imagebuilder.CreateComponentInput) *ImagebuilderCreateComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateComponent", input)
	return &ImagebuilderCreateComponentFuture{Future: future}
}

func (a *stub) CreateDistributionConfiguration(ctx workflow.Context, input *imagebuilder.CreateDistributionConfigurationInput) (*imagebuilder.CreateDistributionConfigurationOutput, error) {
	var output imagebuilder.CreateDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.CreateDistributionConfigurationInput) *ImagebuilderCreateDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateDistributionConfiguration", input)
	return &ImagebuilderCreateDistributionConfigurationFuture{Future: future}
}

func (a *stub) CreateImage(ctx workflow.Context, input *imagebuilder.CreateImageInput) (*imagebuilder.CreateImageOutput, error) {
	var output imagebuilder.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageAsync(ctx workflow.Context, input *imagebuilder.CreateImageInput) *ImagebuilderCreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImage", input)
	return &ImagebuilderCreateImageFuture{Future: future}
}

func (a *stub) CreateImagePipeline(ctx workflow.Context, input *imagebuilder.CreateImagePipelineInput) (*imagebuilder.CreateImagePipelineOutput, error) {
	var output imagebuilder.CreateImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImagePipelineAsync(ctx workflow.Context, input *imagebuilder.CreateImagePipelineInput) *ImagebuilderCreateImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImagePipeline", input)
	return &ImagebuilderCreateImagePipelineFuture{Future: future}
}

func (a *stub) CreateImageRecipe(ctx workflow.Context, input *imagebuilder.CreateImageRecipeInput) (*imagebuilder.CreateImageRecipeOutput, error) {
	var output imagebuilder.CreateImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageRecipeAsync(ctx workflow.Context, input *imagebuilder.CreateImageRecipeInput) *ImagebuilderCreateImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImageRecipe", input)
	return &ImagebuilderCreateImageRecipeFuture{Future: future}
}

func (a *stub) CreateInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.CreateInfrastructureConfigurationInput) (*imagebuilder.CreateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.CreateInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.CreateInfrastructureConfigurationInput) *ImagebuilderCreateInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateInfrastructureConfiguration", input)
	return &ImagebuilderCreateInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) DeleteComponent(ctx workflow.Context, input *imagebuilder.DeleteComponentInput) (*imagebuilder.DeleteComponentOutput, error) {
	var output imagebuilder.DeleteComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteComponentAsync(ctx workflow.Context, input *imagebuilder.DeleteComponentInput) *ImagebuilderDeleteComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteComponent", input)
	return &ImagebuilderDeleteComponentFuture{Future: future}
}

func (a *stub) DeleteDistributionConfiguration(ctx workflow.Context, input *imagebuilder.DeleteDistributionConfigurationInput) (*imagebuilder.DeleteDistributionConfigurationOutput, error) {
	var output imagebuilder.DeleteDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.DeleteDistributionConfigurationInput) *ImagebuilderDeleteDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteDistributionConfiguration", input)
	return &ImagebuilderDeleteDistributionConfigurationFuture{Future: future}
}

func (a *stub) DeleteImage(ctx workflow.Context, input *imagebuilder.DeleteImageInput) (*imagebuilder.DeleteImageOutput, error) {
	var output imagebuilder.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageAsync(ctx workflow.Context, input *imagebuilder.DeleteImageInput) *ImagebuilderDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImage", input)
	return &ImagebuilderDeleteImageFuture{Future: future}
}

func (a *stub) DeleteImagePipeline(ctx workflow.Context, input *imagebuilder.DeleteImagePipelineInput) (*imagebuilder.DeleteImagePipelineOutput, error) {
	var output imagebuilder.DeleteImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImagePipelineAsync(ctx workflow.Context, input *imagebuilder.DeleteImagePipelineInput) *ImagebuilderDeleteImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImagePipeline", input)
	return &ImagebuilderDeleteImagePipelineFuture{Future: future}
}

func (a *stub) DeleteImageRecipe(ctx workflow.Context, input *imagebuilder.DeleteImageRecipeInput) (*imagebuilder.DeleteImageRecipeOutput, error) {
	var output imagebuilder.DeleteImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageRecipeAsync(ctx workflow.Context, input *imagebuilder.DeleteImageRecipeInput) *ImagebuilderDeleteImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImageRecipe", input)
	return &ImagebuilderDeleteImageRecipeFuture{Future: future}
}

func (a *stub) DeleteInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.DeleteInfrastructureConfigurationInput) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error) {
	var output imagebuilder.DeleteInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.DeleteInfrastructureConfigurationInput) *ImagebuilderDeleteInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteInfrastructureConfiguration", input)
	return &ImagebuilderDeleteInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) GetComponent(ctx workflow.Context, input *imagebuilder.GetComponentInput) (*imagebuilder.GetComponentOutput, error) {
	var output imagebuilder.GetComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComponentAsync(ctx workflow.Context, input *imagebuilder.GetComponentInput) *ImagebuilderGetComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponent", input)
	return &ImagebuilderGetComponentFuture{Future: future}
}

func (a *stub) GetComponentPolicy(ctx workflow.Context, input *imagebuilder.GetComponentPolicyInput) (*imagebuilder.GetComponentPolicyOutput, error) {
	var output imagebuilder.GetComponentPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponentPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComponentPolicyAsync(ctx workflow.Context, input *imagebuilder.GetComponentPolicyInput) *ImagebuilderGetComponentPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponentPolicy", input)
	return &ImagebuilderGetComponentPolicyFuture{Future: future}
}

func (a *stub) GetDistributionConfiguration(ctx workflow.Context, input *imagebuilder.GetDistributionConfigurationInput) (*imagebuilder.GetDistributionConfigurationOutput, error) {
	var output imagebuilder.GetDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.GetDistributionConfigurationInput) *ImagebuilderGetDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetDistributionConfiguration", input)
	return &ImagebuilderGetDistributionConfigurationFuture{Future: future}
}

func (a *stub) GetImage(ctx workflow.Context, input *imagebuilder.GetImageInput) (*imagebuilder.GetImageOutput, error) {
	var output imagebuilder.GetImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageAsync(ctx workflow.Context, input *imagebuilder.GetImageInput) *ImagebuilderGetImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImage", input)
	return &ImagebuilderGetImageFuture{Future: future}
}

func (a *stub) GetImagePipeline(ctx workflow.Context, input *imagebuilder.GetImagePipelineInput) (*imagebuilder.GetImagePipelineOutput, error) {
	var output imagebuilder.GetImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImagePipelineAsync(ctx workflow.Context, input *imagebuilder.GetImagePipelineInput) *ImagebuilderGetImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePipeline", input)
	return &ImagebuilderGetImagePipelineFuture{Future: future}
}

func (a *stub) GetImagePolicy(ctx workflow.Context, input *imagebuilder.GetImagePolicyInput) (*imagebuilder.GetImagePolicyOutput, error) {
	var output imagebuilder.GetImagePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImagePolicyAsync(ctx workflow.Context, input *imagebuilder.GetImagePolicyInput) *ImagebuilderGetImagePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePolicy", input)
	return &ImagebuilderGetImagePolicyFuture{Future: future}
}

func (a *stub) GetImageRecipe(ctx workflow.Context, input *imagebuilder.GetImageRecipeInput) (*imagebuilder.GetImageRecipeOutput, error) {
	var output imagebuilder.GetImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageRecipeAsync(ctx workflow.Context, input *imagebuilder.GetImageRecipeInput) *ImagebuilderGetImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipe", input)
	return &ImagebuilderGetImageRecipeFuture{Future: future}
}

func (a *stub) GetImageRecipePolicy(ctx workflow.Context, input *imagebuilder.GetImageRecipePolicyInput) (*imagebuilder.GetImageRecipePolicyOutput, error) {
	var output imagebuilder.GetImageRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.GetImageRecipePolicyInput) *ImagebuilderGetImageRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipePolicy", input)
	return &ImagebuilderGetImageRecipePolicyFuture{Future: future}
}

func (a *stub) GetInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.GetInfrastructureConfigurationInput) (*imagebuilder.GetInfrastructureConfigurationOutput, error) {
	var output imagebuilder.GetInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.GetInfrastructureConfigurationInput) *ImagebuilderGetInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetInfrastructureConfiguration", input)
	return &ImagebuilderGetInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) ImportComponent(ctx workflow.Context, input *imagebuilder.ImportComponentInput) (*imagebuilder.ImportComponentOutput, error) {
	var output imagebuilder.ImportComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ImportComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportComponentAsync(ctx workflow.Context, input *imagebuilder.ImportComponentInput) *ImagebuilderImportComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ImportComponent", input)
	return &ImagebuilderImportComponentFuture{Future: future}
}

func (a *stub) ListComponentBuildVersions(ctx workflow.Context, input *imagebuilder.ListComponentBuildVersionsInput) (*imagebuilder.ListComponentBuildVersionsOutput, error) {
	var output imagebuilder.ListComponentBuildVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponentBuildVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComponentBuildVersionsAsync(ctx workflow.Context, input *imagebuilder.ListComponentBuildVersionsInput) *ImagebuilderListComponentBuildVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponentBuildVersions", input)
	return &ImagebuilderListComponentBuildVersionsFuture{Future: future}
}

func (a *stub) ListComponents(ctx workflow.Context, input *imagebuilder.ListComponentsInput) (*imagebuilder.ListComponentsOutput, error) {
	var output imagebuilder.ListComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComponentsAsync(ctx workflow.Context, input *imagebuilder.ListComponentsInput) *ImagebuilderListComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponents", input)
	return &ImagebuilderListComponentsFuture{Future: future}
}

func (a *stub) ListDistributionConfigurations(ctx workflow.Context, input *imagebuilder.ListDistributionConfigurationsInput) (*imagebuilder.ListDistributionConfigurationsOutput, error) {
	var output imagebuilder.ListDistributionConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListDistributionConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionConfigurationsAsync(ctx workflow.Context, input *imagebuilder.ListDistributionConfigurationsInput) *ImagebuilderListDistributionConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListDistributionConfigurations", input)
	return &ImagebuilderListDistributionConfigurationsFuture{Future: future}
}

func (a *stub) ListImageBuildVersions(ctx workflow.Context, input *imagebuilder.ListImageBuildVersionsInput) (*imagebuilder.ListImageBuildVersionsOutput, error) {
	var output imagebuilder.ListImageBuildVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageBuildVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageBuildVersionsAsync(ctx workflow.Context, input *imagebuilder.ListImageBuildVersionsInput) *ImagebuilderListImageBuildVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageBuildVersions", input)
	return &ImagebuilderListImageBuildVersionsFuture{Future: future}
}

func (a *stub) ListImagePipelineImages(ctx workflow.Context, input *imagebuilder.ListImagePipelineImagesInput) (*imagebuilder.ListImagePipelineImagesOutput, error) {
	var output imagebuilder.ListImagePipelineImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelineImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagePipelineImagesAsync(ctx workflow.Context, input *imagebuilder.ListImagePipelineImagesInput) *ImagebuilderListImagePipelineImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelineImages", input)
	return &ImagebuilderListImagePipelineImagesFuture{Future: future}
}

func (a *stub) ListImagePipelines(ctx workflow.Context, input *imagebuilder.ListImagePipelinesInput) (*imagebuilder.ListImagePipelinesOutput, error) {
	var output imagebuilder.ListImagePipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagePipelinesAsync(ctx workflow.Context, input *imagebuilder.ListImagePipelinesInput) *ImagebuilderListImagePipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelines", input)
	return &ImagebuilderListImagePipelinesFuture{Future: future}
}

func (a *stub) ListImageRecipes(ctx workflow.Context, input *imagebuilder.ListImageRecipesInput) (*imagebuilder.ListImageRecipesOutput, error) {
	var output imagebuilder.ListImageRecipesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageRecipes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageRecipesAsync(ctx workflow.Context, input *imagebuilder.ListImageRecipesInput) *ImagebuilderListImageRecipesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageRecipes", input)
	return &ImagebuilderListImageRecipesFuture{Future: future}
}

func (a *stub) ListImages(ctx workflow.Context, input *imagebuilder.ListImagesInput) (*imagebuilder.ListImagesOutput, error) {
	var output imagebuilder.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagesAsync(ctx workflow.Context, input *imagebuilder.ListImagesInput) *ImagebuilderListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImages", input)
	return &ImagebuilderListImagesFuture{Future: future}
}

func (a *stub) ListInfrastructureConfigurations(ctx workflow.Context, input *imagebuilder.ListInfrastructureConfigurationsInput) (*imagebuilder.ListInfrastructureConfigurationsOutput, error) {
	var output imagebuilder.ListInfrastructureConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListInfrastructureConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInfrastructureConfigurationsAsync(ctx workflow.Context, input *imagebuilder.ListInfrastructureConfigurationsInput) *ImagebuilderListInfrastructureConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListInfrastructureConfigurations", input)
	return &ImagebuilderListInfrastructureConfigurationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *imagebuilder.ListTagsForResourceInput) (*imagebuilder.ListTagsForResourceOutput, error) {
	var output imagebuilder.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *imagebuilder.ListTagsForResourceInput) *ImagebuilderListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListTagsForResource", input)
	return &ImagebuilderListTagsForResourceFuture{Future: future}
}

func (a *stub) PutComponentPolicy(ctx workflow.Context, input *imagebuilder.PutComponentPolicyInput) (*imagebuilder.PutComponentPolicyOutput, error) {
	var output imagebuilder.PutComponentPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutComponentPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutComponentPolicyAsync(ctx workflow.Context, input *imagebuilder.PutComponentPolicyInput) *ImagebuilderPutComponentPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutComponentPolicy", input)
	return &ImagebuilderPutComponentPolicyFuture{Future: future}
}

func (a *stub) PutImagePolicy(ctx workflow.Context, input *imagebuilder.PutImagePolicyInput) (*imagebuilder.PutImagePolicyOutput, error) {
	var output imagebuilder.PutImagePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImagePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImagePolicyAsync(ctx workflow.Context, input *imagebuilder.PutImagePolicyInput) *ImagebuilderPutImagePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImagePolicy", input)
	return &ImagebuilderPutImagePolicyFuture{Future: future}
}

func (a *stub) PutImageRecipePolicy(ctx workflow.Context, input *imagebuilder.PutImageRecipePolicyInput) (*imagebuilder.PutImageRecipePolicyOutput, error) {
	var output imagebuilder.PutImageRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImageRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.PutImageRecipePolicyInput) *ImagebuilderPutImageRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImageRecipePolicy", input)
	return &ImagebuilderPutImageRecipePolicyFuture{Future: future}
}

func (a *stub) StartImagePipelineExecution(ctx workflow.Context, input *imagebuilder.StartImagePipelineExecutionInput) (*imagebuilder.StartImagePipelineExecutionOutput, error) {
	var output imagebuilder.StartImagePipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-StartImagePipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImagePipelineExecutionAsync(ctx workflow.Context, input *imagebuilder.StartImagePipelineExecutionInput) *ImagebuilderStartImagePipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-StartImagePipelineExecution", input)
	return &ImagebuilderStartImagePipelineExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *imagebuilder.TagResourceInput) (*imagebuilder.TagResourceOutput, error) {
	var output imagebuilder.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *imagebuilder.TagResourceInput) *ImagebuilderTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-TagResource", input)
	return &ImagebuilderTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *imagebuilder.UntagResourceInput) (*imagebuilder.UntagResourceOutput, error) {
	var output imagebuilder.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *imagebuilder.UntagResourceInput) *ImagebuilderUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UntagResource", input)
	return &ImagebuilderUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDistributionConfiguration(ctx workflow.Context, input *imagebuilder.UpdateDistributionConfigurationInput) (*imagebuilder.UpdateDistributionConfigurationOutput, error) {
	var output imagebuilder.UpdateDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.UpdateDistributionConfigurationInput) *ImagebuilderUpdateDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateDistributionConfiguration", input)
	return &ImagebuilderUpdateDistributionConfigurationFuture{Future: future}
}

func (a *stub) UpdateImagePipeline(ctx workflow.Context, input *imagebuilder.UpdateImagePipelineInput) (*imagebuilder.UpdateImagePipelineOutput, error) {
	var output imagebuilder.UpdateImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateImagePipelineAsync(ctx workflow.Context, input *imagebuilder.UpdateImagePipelineInput) *ImagebuilderUpdateImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateImagePipeline", input)
	return &ImagebuilderUpdateImagePipelineFuture{Future: future}
}

func (a *stub) UpdateInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.UpdateInfrastructureConfigurationInput) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.UpdateInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.UpdateInfrastructureConfigurationInput) *ImagebuilderUpdateInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateInfrastructureConfiguration", input)
	return &ImagebuilderUpdateInfrastructureConfigurationFuture{Future: future}
}
