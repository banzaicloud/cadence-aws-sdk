// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package imagebuilderstub

import (
	"github.com/aws/aws-sdk-go/service/imagebuilder"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelImageCreationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelImageCreationFuture) Get(ctx workflow.Context) (*imagebuilder.CancelImageCreationOutput, error) {
	var output imagebuilder.CancelImageCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateComponentFuture) Get(ctx workflow.Context) (*imagebuilder.CreateComponentOutput, error) {
	var output imagebuilder.CreateComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContainerRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContainerRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.CreateContainerRecipeOutput, error) {
	var output imagebuilder.CreateContainerRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.CreateDistributionConfigurationOutput, error) {
	var output imagebuilder.CreateDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImageOutput, error) {
	var output imagebuilder.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImagePipelineOutput, error) {
	var output imagebuilder.CreateImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.CreateImageRecipeOutput, error) {
	var output imagebuilder.CreateImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.CreateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.CreateInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteComponentFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteComponentOutput, error) {
	var output imagebuilder.DeleteComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContainerRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContainerRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteContainerRecipeOutput, error) {
	var output imagebuilder.DeleteContainerRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteDistributionConfigurationOutput, error) {
	var output imagebuilder.DeleteDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImageOutput, error) {
	var output imagebuilder.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImagePipelineOutput, error) {
	var output imagebuilder.DeleteImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteImageRecipeOutput, error) {
	var output imagebuilder.DeleteImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error) {
	var output imagebuilder.DeleteInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComponentFuture) Get(ctx workflow.Context) (*imagebuilder.GetComponentOutput, error) {
	var output imagebuilder.GetComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComponentPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComponentPolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetComponentPolicyOutput, error) {
	var output imagebuilder.GetComponentPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.GetContainerRecipeOutput, error) {
	var output imagebuilder.GetContainerRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetContainerRecipePolicyOutput, error) {
	var output imagebuilder.GetContainerRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.GetDistributionConfigurationOutput, error) {
	var output imagebuilder.GetDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetImageFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageOutput, error) {
	var output imagebuilder.GetImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.GetImagePipelineOutput, error) {
	var output imagebuilder.GetImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetImagePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetImagePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetImagePolicyOutput, error) {
	var output imagebuilder.GetImagePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetImageRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetImageRecipeFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageRecipeOutput, error) {
	var output imagebuilder.GetImageRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetImageRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetImageRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.GetImageRecipePolicyOutput, error) {
	var output imagebuilder.GetImageRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.GetInfrastructureConfigurationOutput, error) {
	var output imagebuilder.GetInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportComponentFuture) Get(ctx workflow.Context) (*imagebuilder.ImportComponentOutput, error) {
	var output imagebuilder.ImportComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListComponentBuildVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListComponentBuildVersionsFuture) Get(ctx workflow.Context) (*imagebuilder.ListComponentBuildVersionsOutput, error) {
	var output imagebuilder.ListComponentBuildVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListComponentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListComponentsFuture) Get(ctx workflow.Context) (*imagebuilder.ListComponentsOutput, error) {
	var output imagebuilder.ListComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListContainerRecipesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListContainerRecipesFuture) Get(ctx workflow.Context) (*imagebuilder.ListContainerRecipesOutput, error) {
	var output imagebuilder.ListContainerRecipesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionConfigurationsFuture) Get(ctx workflow.Context) (*imagebuilder.ListDistributionConfigurationsOutput, error) {
	var output imagebuilder.ListDistributionConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImageBuildVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImageBuildVersionsFuture) Get(ctx workflow.Context) (*imagebuilder.ListImageBuildVersionsOutput, error) {
	var output imagebuilder.ListImageBuildVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImagePipelineImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImagePipelineImagesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagePipelineImagesOutput, error) {
	var output imagebuilder.ListImagePipelineImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImagePipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImagePipelinesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagePipelinesOutput, error) {
	var output imagebuilder.ListImagePipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImageRecipesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImageRecipesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImageRecipesOutput, error) {
	var output imagebuilder.ListImageRecipesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImagesFuture) Get(ctx workflow.Context) (*imagebuilder.ListImagesOutput, error) {
	var output imagebuilder.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInfrastructureConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInfrastructureConfigurationsFuture) Get(ctx workflow.Context) (*imagebuilder.ListInfrastructureConfigurationsOutput, error) {
	var output imagebuilder.ListInfrastructureConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*imagebuilder.ListTagsForResourceOutput, error) {
	var output imagebuilder.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutComponentPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutComponentPolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutComponentPolicyOutput, error) {
	var output imagebuilder.PutComponentPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutContainerRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutContainerRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutContainerRecipePolicyOutput, error) {
	var output imagebuilder.PutContainerRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImagePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImagePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutImagePolicyOutput, error) {
	var output imagebuilder.PutImagePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImageRecipePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImageRecipePolicyFuture) Get(ctx workflow.Context) (*imagebuilder.PutImageRecipePolicyOutput, error) {
	var output imagebuilder.PutImageRecipePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartImagePipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartImagePipelineExecutionFuture) Get(ctx workflow.Context) (*imagebuilder.StartImagePipelineExecutionOutput, error) {
	var output imagebuilder.StartImagePipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*imagebuilder.TagResourceOutput, error) {
	var output imagebuilder.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*imagebuilder.UntagResourceOutput, error) {
	var output imagebuilder.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDistributionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDistributionConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateDistributionConfigurationOutput, error) {
	var output imagebuilder.UpdateDistributionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateImagePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateImagePipelineFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateImagePipelineOutput, error) {
	var output imagebuilder.UpdateImagePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInfrastructureConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInfrastructureConfigurationFuture) Get(ctx workflow.Context) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.UpdateInfrastructureConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelImageCreation(ctx workflow.Context, input *imagebuilder.CancelImageCreationInput) (*imagebuilder.CancelImageCreationOutput, error) {
	var output imagebuilder.CancelImageCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CancelImageCreation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelImageCreationAsync(ctx workflow.Context, input *imagebuilder.CancelImageCreationInput) *CancelImageCreationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CancelImageCreation", input)
	return &CancelImageCreationFuture{Future: future}
}

func (a *stub) CreateComponent(ctx workflow.Context, input *imagebuilder.CreateComponentInput) (*imagebuilder.CreateComponentOutput, error) {
	var output imagebuilder.CreateComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateComponentAsync(ctx workflow.Context, input *imagebuilder.CreateComponentInput) *CreateComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateComponent", input)
	return &CreateComponentFuture{Future: future}
}

func (a *stub) CreateContainerRecipe(ctx workflow.Context, input *imagebuilder.CreateContainerRecipeInput) (*imagebuilder.CreateContainerRecipeOutput, error) {
	var output imagebuilder.CreateContainerRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateContainerRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainerRecipeAsync(ctx workflow.Context, input *imagebuilder.CreateContainerRecipeInput) *CreateContainerRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateContainerRecipe", input)
	return &CreateContainerRecipeFuture{Future: future}
}

func (a *stub) CreateDistributionConfiguration(ctx workflow.Context, input *imagebuilder.CreateDistributionConfigurationInput) (*imagebuilder.CreateDistributionConfigurationOutput, error) {
	var output imagebuilder.CreateDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.CreateDistributionConfigurationInput) *CreateDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateDistributionConfiguration", input)
	return &CreateDistributionConfigurationFuture{Future: future}
}

func (a *stub) CreateImage(ctx workflow.Context, input *imagebuilder.CreateImageInput) (*imagebuilder.CreateImageOutput, error) {
	var output imagebuilder.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageAsync(ctx workflow.Context, input *imagebuilder.CreateImageInput) *CreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImage", input)
	return &CreateImageFuture{Future: future}
}

func (a *stub) CreateImagePipeline(ctx workflow.Context, input *imagebuilder.CreateImagePipelineInput) (*imagebuilder.CreateImagePipelineOutput, error) {
	var output imagebuilder.CreateImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImagePipelineAsync(ctx workflow.Context, input *imagebuilder.CreateImagePipelineInput) *CreateImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImagePipeline", input)
	return &CreateImagePipelineFuture{Future: future}
}

func (a *stub) CreateImageRecipe(ctx workflow.Context, input *imagebuilder.CreateImageRecipeInput) (*imagebuilder.CreateImageRecipeOutput, error) {
	var output imagebuilder.CreateImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageRecipeAsync(ctx workflow.Context, input *imagebuilder.CreateImageRecipeInput) *CreateImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateImageRecipe", input)
	return &CreateImageRecipeFuture{Future: future}
}

func (a *stub) CreateInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.CreateInfrastructureConfigurationInput) (*imagebuilder.CreateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.CreateInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.CreateInfrastructureConfigurationInput) *CreateInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-CreateInfrastructureConfiguration", input)
	return &CreateInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) DeleteComponent(ctx workflow.Context, input *imagebuilder.DeleteComponentInput) (*imagebuilder.DeleteComponentOutput, error) {
	var output imagebuilder.DeleteComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteComponentAsync(ctx workflow.Context, input *imagebuilder.DeleteComponentInput) *DeleteComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteComponent", input)
	return &DeleteComponentFuture{Future: future}
}

func (a *stub) DeleteContainerRecipe(ctx workflow.Context, input *imagebuilder.DeleteContainerRecipeInput) (*imagebuilder.DeleteContainerRecipeOutput, error) {
	var output imagebuilder.DeleteContainerRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteContainerRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContainerRecipeAsync(ctx workflow.Context, input *imagebuilder.DeleteContainerRecipeInput) *DeleteContainerRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteContainerRecipe", input)
	return &DeleteContainerRecipeFuture{Future: future}
}

func (a *stub) DeleteDistributionConfiguration(ctx workflow.Context, input *imagebuilder.DeleteDistributionConfigurationInput) (*imagebuilder.DeleteDistributionConfigurationOutput, error) {
	var output imagebuilder.DeleteDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.DeleteDistributionConfigurationInput) *DeleteDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteDistributionConfiguration", input)
	return &DeleteDistributionConfigurationFuture{Future: future}
}

func (a *stub) DeleteImage(ctx workflow.Context, input *imagebuilder.DeleteImageInput) (*imagebuilder.DeleteImageOutput, error) {
	var output imagebuilder.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageAsync(ctx workflow.Context, input *imagebuilder.DeleteImageInput) *DeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImage", input)
	return &DeleteImageFuture{Future: future}
}

func (a *stub) DeleteImagePipeline(ctx workflow.Context, input *imagebuilder.DeleteImagePipelineInput) (*imagebuilder.DeleteImagePipelineOutput, error) {
	var output imagebuilder.DeleteImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImagePipelineAsync(ctx workflow.Context, input *imagebuilder.DeleteImagePipelineInput) *DeleteImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImagePipeline", input)
	return &DeleteImagePipelineFuture{Future: future}
}

func (a *stub) DeleteImageRecipe(ctx workflow.Context, input *imagebuilder.DeleteImageRecipeInput) (*imagebuilder.DeleteImageRecipeOutput, error) {
	var output imagebuilder.DeleteImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageRecipeAsync(ctx workflow.Context, input *imagebuilder.DeleteImageRecipeInput) *DeleteImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteImageRecipe", input)
	return &DeleteImageRecipeFuture{Future: future}
}

func (a *stub) DeleteInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.DeleteInfrastructureConfigurationInput) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error) {
	var output imagebuilder.DeleteInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.DeleteInfrastructureConfigurationInput) *DeleteInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-DeleteInfrastructureConfiguration", input)
	return &DeleteInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) GetComponent(ctx workflow.Context, input *imagebuilder.GetComponentInput) (*imagebuilder.GetComponentOutput, error) {
	var output imagebuilder.GetComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComponentAsync(ctx workflow.Context, input *imagebuilder.GetComponentInput) *GetComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponent", input)
	return &GetComponentFuture{Future: future}
}

func (a *stub) GetComponentPolicy(ctx workflow.Context, input *imagebuilder.GetComponentPolicyInput) (*imagebuilder.GetComponentPolicyOutput, error) {
	var output imagebuilder.GetComponentPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponentPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComponentPolicyAsync(ctx workflow.Context, input *imagebuilder.GetComponentPolicyInput) *GetComponentPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetComponentPolicy", input)
	return &GetComponentPolicyFuture{Future: future}
}

func (a *stub) GetContainerRecipe(ctx workflow.Context, input *imagebuilder.GetContainerRecipeInput) (*imagebuilder.GetContainerRecipeOutput, error) {
	var output imagebuilder.GetContainerRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetContainerRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerRecipeAsync(ctx workflow.Context, input *imagebuilder.GetContainerRecipeInput) *GetContainerRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetContainerRecipe", input)
	return &GetContainerRecipeFuture{Future: future}
}

func (a *stub) GetContainerRecipePolicy(ctx workflow.Context, input *imagebuilder.GetContainerRecipePolicyInput) (*imagebuilder.GetContainerRecipePolicyOutput, error) {
	var output imagebuilder.GetContainerRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetContainerRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.GetContainerRecipePolicyInput) *GetContainerRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetContainerRecipePolicy", input)
	return &GetContainerRecipePolicyFuture{Future: future}
}

func (a *stub) GetDistributionConfiguration(ctx workflow.Context, input *imagebuilder.GetDistributionConfigurationInput) (*imagebuilder.GetDistributionConfigurationOutput, error) {
	var output imagebuilder.GetDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.GetDistributionConfigurationInput) *GetDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetDistributionConfiguration", input)
	return &GetDistributionConfigurationFuture{Future: future}
}

func (a *stub) GetImage(ctx workflow.Context, input *imagebuilder.GetImageInput) (*imagebuilder.GetImageOutput, error) {
	var output imagebuilder.GetImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageAsync(ctx workflow.Context, input *imagebuilder.GetImageInput) *GetImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImage", input)
	return &GetImageFuture{Future: future}
}

func (a *stub) GetImagePipeline(ctx workflow.Context, input *imagebuilder.GetImagePipelineInput) (*imagebuilder.GetImagePipelineOutput, error) {
	var output imagebuilder.GetImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImagePipelineAsync(ctx workflow.Context, input *imagebuilder.GetImagePipelineInput) *GetImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePipeline", input)
	return &GetImagePipelineFuture{Future: future}
}

func (a *stub) GetImagePolicy(ctx workflow.Context, input *imagebuilder.GetImagePolicyInput) (*imagebuilder.GetImagePolicyOutput, error) {
	var output imagebuilder.GetImagePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImagePolicyAsync(ctx workflow.Context, input *imagebuilder.GetImagePolicyInput) *GetImagePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImagePolicy", input)
	return &GetImagePolicyFuture{Future: future}
}

func (a *stub) GetImageRecipe(ctx workflow.Context, input *imagebuilder.GetImageRecipeInput) (*imagebuilder.GetImageRecipeOutput, error) {
	var output imagebuilder.GetImageRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageRecipeAsync(ctx workflow.Context, input *imagebuilder.GetImageRecipeInput) *GetImageRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipe", input)
	return &GetImageRecipeFuture{Future: future}
}

func (a *stub) GetImageRecipePolicy(ctx workflow.Context, input *imagebuilder.GetImageRecipePolicyInput) (*imagebuilder.GetImageRecipePolicyOutput, error) {
	var output imagebuilder.GetImageRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImageRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.GetImageRecipePolicyInput) *GetImageRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetImageRecipePolicy", input)
	return &GetImageRecipePolicyFuture{Future: future}
}

func (a *stub) GetInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.GetInfrastructureConfigurationInput) (*imagebuilder.GetInfrastructureConfigurationOutput, error) {
	var output imagebuilder.GetInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.GetInfrastructureConfigurationInput) *GetInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-GetInfrastructureConfiguration", input)
	return &GetInfrastructureConfigurationFuture{Future: future}
}

func (a *stub) ImportComponent(ctx workflow.Context, input *imagebuilder.ImportComponentInput) (*imagebuilder.ImportComponentOutput, error) {
	var output imagebuilder.ImportComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ImportComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportComponentAsync(ctx workflow.Context, input *imagebuilder.ImportComponentInput) *ImportComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ImportComponent", input)
	return &ImportComponentFuture{Future: future}
}

func (a *stub) ListComponentBuildVersions(ctx workflow.Context, input *imagebuilder.ListComponentBuildVersionsInput) (*imagebuilder.ListComponentBuildVersionsOutput, error) {
	var output imagebuilder.ListComponentBuildVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponentBuildVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComponentBuildVersionsAsync(ctx workflow.Context, input *imagebuilder.ListComponentBuildVersionsInput) *ListComponentBuildVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponentBuildVersions", input)
	return &ListComponentBuildVersionsFuture{Future: future}
}

func (a *stub) ListComponents(ctx workflow.Context, input *imagebuilder.ListComponentsInput) (*imagebuilder.ListComponentsOutput, error) {
	var output imagebuilder.ListComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComponentsAsync(ctx workflow.Context, input *imagebuilder.ListComponentsInput) *ListComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListComponents", input)
	return &ListComponentsFuture{Future: future}
}

func (a *stub) ListContainerRecipes(ctx workflow.Context, input *imagebuilder.ListContainerRecipesInput) (*imagebuilder.ListContainerRecipesOutput, error) {
	var output imagebuilder.ListContainerRecipesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListContainerRecipes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContainerRecipesAsync(ctx workflow.Context, input *imagebuilder.ListContainerRecipesInput) *ListContainerRecipesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListContainerRecipes", input)
	return &ListContainerRecipesFuture{Future: future}
}

func (a *stub) ListDistributionConfigurations(ctx workflow.Context, input *imagebuilder.ListDistributionConfigurationsInput) (*imagebuilder.ListDistributionConfigurationsOutput, error) {
	var output imagebuilder.ListDistributionConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListDistributionConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionConfigurationsAsync(ctx workflow.Context, input *imagebuilder.ListDistributionConfigurationsInput) *ListDistributionConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListDistributionConfigurations", input)
	return &ListDistributionConfigurationsFuture{Future: future}
}

func (a *stub) ListImageBuildVersions(ctx workflow.Context, input *imagebuilder.ListImageBuildVersionsInput) (*imagebuilder.ListImageBuildVersionsOutput, error) {
	var output imagebuilder.ListImageBuildVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageBuildVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageBuildVersionsAsync(ctx workflow.Context, input *imagebuilder.ListImageBuildVersionsInput) *ListImageBuildVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageBuildVersions", input)
	return &ListImageBuildVersionsFuture{Future: future}
}

func (a *stub) ListImagePipelineImages(ctx workflow.Context, input *imagebuilder.ListImagePipelineImagesInput) (*imagebuilder.ListImagePipelineImagesOutput, error) {
	var output imagebuilder.ListImagePipelineImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelineImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagePipelineImagesAsync(ctx workflow.Context, input *imagebuilder.ListImagePipelineImagesInput) *ListImagePipelineImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelineImages", input)
	return &ListImagePipelineImagesFuture{Future: future}
}

func (a *stub) ListImagePipelines(ctx workflow.Context, input *imagebuilder.ListImagePipelinesInput) (*imagebuilder.ListImagePipelinesOutput, error) {
	var output imagebuilder.ListImagePipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagePipelinesAsync(ctx workflow.Context, input *imagebuilder.ListImagePipelinesInput) *ListImagePipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImagePipelines", input)
	return &ListImagePipelinesFuture{Future: future}
}

func (a *stub) ListImageRecipes(ctx workflow.Context, input *imagebuilder.ListImageRecipesInput) (*imagebuilder.ListImageRecipesOutput, error) {
	var output imagebuilder.ListImageRecipesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageRecipes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageRecipesAsync(ctx workflow.Context, input *imagebuilder.ListImageRecipesInput) *ListImageRecipesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImageRecipes", input)
	return &ListImageRecipesFuture{Future: future}
}

func (a *stub) ListImages(ctx workflow.Context, input *imagebuilder.ListImagesInput) (*imagebuilder.ListImagesOutput, error) {
	var output imagebuilder.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagesAsync(ctx workflow.Context, input *imagebuilder.ListImagesInput) *ListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListImages", input)
	return &ListImagesFuture{Future: future}
}

func (a *stub) ListInfrastructureConfigurations(ctx workflow.Context, input *imagebuilder.ListInfrastructureConfigurationsInput) (*imagebuilder.ListInfrastructureConfigurationsOutput, error) {
	var output imagebuilder.ListInfrastructureConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListInfrastructureConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInfrastructureConfigurationsAsync(ctx workflow.Context, input *imagebuilder.ListInfrastructureConfigurationsInput) *ListInfrastructureConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListInfrastructureConfigurations", input)
	return &ListInfrastructureConfigurationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *imagebuilder.ListTagsForResourceInput) (*imagebuilder.ListTagsForResourceOutput, error) {
	var output imagebuilder.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *imagebuilder.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutComponentPolicy(ctx workflow.Context, input *imagebuilder.PutComponentPolicyInput) (*imagebuilder.PutComponentPolicyOutput, error) {
	var output imagebuilder.PutComponentPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutComponentPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutComponentPolicyAsync(ctx workflow.Context, input *imagebuilder.PutComponentPolicyInput) *PutComponentPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutComponentPolicy", input)
	return &PutComponentPolicyFuture{Future: future}
}

func (a *stub) PutContainerRecipePolicy(ctx workflow.Context, input *imagebuilder.PutContainerRecipePolicyInput) (*imagebuilder.PutContainerRecipePolicyOutput, error) {
	var output imagebuilder.PutContainerRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutContainerRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutContainerRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.PutContainerRecipePolicyInput) *PutContainerRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutContainerRecipePolicy", input)
	return &PutContainerRecipePolicyFuture{Future: future}
}

func (a *stub) PutImagePolicy(ctx workflow.Context, input *imagebuilder.PutImagePolicyInput) (*imagebuilder.PutImagePolicyOutput, error) {
	var output imagebuilder.PutImagePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImagePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImagePolicyAsync(ctx workflow.Context, input *imagebuilder.PutImagePolicyInput) *PutImagePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImagePolicy", input)
	return &PutImagePolicyFuture{Future: future}
}

func (a *stub) PutImageRecipePolicy(ctx workflow.Context, input *imagebuilder.PutImageRecipePolicyInput) (*imagebuilder.PutImageRecipePolicyOutput, error) {
	var output imagebuilder.PutImageRecipePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImageRecipePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageRecipePolicyAsync(ctx workflow.Context, input *imagebuilder.PutImageRecipePolicyInput) *PutImageRecipePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-PutImageRecipePolicy", input)
	return &PutImageRecipePolicyFuture{Future: future}
}

func (a *stub) StartImagePipelineExecution(ctx workflow.Context, input *imagebuilder.StartImagePipelineExecutionInput) (*imagebuilder.StartImagePipelineExecutionOutput, error) {
	var output imagebuilder.StartImagePipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-StartImagePipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImagePipelineExecutionAsync(ctx workflow.Context, input *imagebuilder.StartImagePipelineExecutionInput) *StartImagePipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-StartImagePipelineExecution", input)
	return &StartImagePipelineExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *imagebuilder.TagResourceInput) (*imagebuilder.TagResourceOutput, error) {
	var output imagebuilder.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *imagebuilder.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *imagebuilder.UntagResourceInput) (*imagebuilder.UntagResourceOutput, error) {
	var output imagebuilder.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *imagebuilder.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDistributionConfiguration(ctx workflow.Context, input *imagebuilder.UpdateDistributionConfigurationInput) (*imagebuilder.UpdateDistributionConfigurationOutput, error) {
	var output imagebuilder.UpdateDistributionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateDistributionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionConfigurationAsync(ctx workflow.Context, input *imagebuilder.UpdateDistributionConfigurationInput) *UpdateDistributionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateDistributionConfiguration", input)
	return &UpdateDistributionConfigurationFuture{Future: future}
}

func (a *stub) UpdateImagePipeline(ctx workflow.Context, input *imagebuilder.UpdateImagePipelineInput) (*imagebuilder.UpdateImagePipelineOutput, error) {
	var output imagebuilder.UpdateImagePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateImagePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateImagePipelineAsync(ctx workflow.Context, input *imagebuilder.UpdateImagePipelineInput) *UpdateImagePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateImagePipeline", input)
	return &UpdateImagePipelineFuture{Future: future}
}

func (a *stub) UpdateInfrastructureConfiguration(ctx workflow.Context, input *imagebuilder.UpdateInfrastructureConfigurationInput) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error) {
	var output imagebuilder.UpdateInfrastructureConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateInfrastructureConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInfrastructureConfigurationAsync(ctx workflow.Context, input *imagebuilder.UpdateInfrastructureConfigurationInput) *UpdateInfrastructureConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-imagebuilder-UpdateInfrastructureConfiguration", input)
	return &UpdateInfrastructureConfigurationFuture{Future: future}
}
