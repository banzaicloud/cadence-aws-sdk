// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package outpostsstub

import (
	"github.com/aws/aws-sdk-go/service/outposts"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateOutpostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOutpostFuture) Get(ctx workflow.Context) (*outposts.CreateOutpostOutput, error) {
	var output outposts.CreateOutpostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOutpostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOutpostFuture) Get(ctx workflow.Context) (*outposts.DeleteOutpostOutput, error) {
	var output outposts.DeleteOutpostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSiteFuture) Get(ctx workflow.Context) (*outposts.DeleteSiteOutput, error) {
	var output outposts.DeleteSiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOutpostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOutpostFuture) Get(ctx workflow.Context) (*outposts.GetOutpostOutput, error) {
	var output outposts.GetOutpostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOutpostInstanceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOutpostInstanceTypesFuture) Get(ctx workflow.Context) (*outposts.GetOutpostInstanceTypesOutput, error) {
	var output outposts.GetOutpostInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOutpostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOutpostsFuture) Get(ctx workflow.Context) (*outposts.ListOutpostsOutput, error) {
	var output outposts.ListOutpostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSitesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSitesFuture) Get(ctx workflow.Context) (*outposts.ListSitesOutput, error) {
	var output outposts.ListSitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*outposts.ListTagsForResourceOutput, error) {
	var output outposts.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*outposts.TagResourceOutput, error) {
	var output outposts.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*outposts.UntagResourceOutput, error) {
	var output outposts.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOutpost(ctx workflow.Context, input *outposts.CreateOutpostInput) (*outposts.CreateOutpostOutput, error) {
	var output outposts.CreateOutpostOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-CreateOutpost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOutpostAsync(ctx workflow.Context, input *outposts.CreateOutpostInput) *CreateOutpostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-CreateOutpost", input)
	return &CreateOutpostFuture{Future: future}
}

func (a *stub) DeleteOutpost(ctx workflow.Context, input *outposts.DeleteOutpostInput) (*outposts.DeleteOutpostOutput, error) {
	var output outposts.DeleteOutpostOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-DeleteOutpost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOutpostAsync(ctx workflow.Context, input *outposts.DeleteOutpostInput) *DeleteOutpostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-DeleteOutpost", input)
	return &DeleteOutpostFuture{Future: future}
}

func (a *stub) DeleteSite(ctx workflow.Context, input *outposts.DeleteSiteInput) (*outposts.DeleteSiteOutput, error) {
	var output outposts.DeleteSiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-DeleteSite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSiteAsync(ctx workflow.Context, input *outposts.DeleteSiteInput) *DeleteSiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-DeleteSite", input)
	return &DeleteSiteFuture{Future: future}
}

func (a *stub) GetOutpost(ctx workflow.Context, input *outposts.GetOutpostInput) (*outposts.GetOutpostOutput, error) {
	var output outposts.GetOutpostOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-GetOutpost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOutpostAsync(ctx workflow.Context, input *outposts.GetOutpostInput) *GetOutpostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-GetOutpost", input)
	return &GetOutpostFuture{Future: future}
}

func (a *stub) GetOutpostInstanceTypes(ctx workflow.Context, input *outposts.GetOutpostInstanceTypesInput) (*outposts.GetOutpostInstanceTypesOutput, error) {
	var output outposts.GetOutpostInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-GetOutpostInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOutpostInstanceTypesAsync(ctx workflow.Context, input *outposts.GetOutpostInstanceTypesInput) *GetOutpostInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-GetOutpostInstanceTypes", input)
	return &GetOutpostInstanceTypesFuture{Future: future}
}

func (a *stub) ListOutposts(ctx workflow.Context, input *outposts.ListOutpostsInput) (*outposts.ListOutpostsOutput, error) {
	var output outposts.ListOutpostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-ListOutposts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOutpostsAsync(ctx workflow.Context, input *outposts.ListOutpostsInput) *ListOutpostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-ListOutposts", input)
	return &ListOutpostsFuture{Future: future}
}

func (a *stub) ListSites(ctx workflow.Context, input *outposts.ListSitesInput) (*outposts.ListSitesOutput, error) {
	var output outposts.ListSitesOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-ListSites", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSitesAsync(ctx workflow.Context, input *outposts.ListSitesInput) *ListSitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-ListSites", input)
	return &ListSitesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *outposts.ListTagsForResourceInput) (*outposts.ListTagsForResourceOutput, error) {
	var output outposts.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *outposts.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *outposts.TagResourceInput) (*outposts.TagResourceOutput, error) {
	var output outposts.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *outposts.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *outposts.UntagResourceInput) (*outposts.UntagResourceOutput, error) {
	var output outposts.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-outposts-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *outposts.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-outposts-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}
