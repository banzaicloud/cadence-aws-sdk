// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package route53domainsstub

import (
	"github.com/aws/aws-sdk-go/service/route53domains"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptDomainTransferFromAnotherAwsAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelDomainTransferToAnotherAwsAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelDomainTransferToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckDomainAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckDomainAvailabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckDomainTransferabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckDomainTransferabilityFuture) Get(ctx workflow.Context) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsForDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableDomainAutoRenewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableDomainTransferLockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableDomainAutoRenewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableDomainAutoRenewFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableDomainTransferLockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableDomainTransferLockFuture) Get(ctx workflow.Context) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContactReachabilityStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContactReachabilityStatusFuture) Get(ctx workflow.Context) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainDetailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainDetailFuture) Get(ctx workflow.Context) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainSuggestionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainSuggestionsFuture) Get(ctx workflow.Context) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOperationDetailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOperationDetailFuture) Get(ctx workflow.Context) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOperationsFuture) Get(ctx workflow.Context) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterDomainFuture) Get(ctx workflow.Context) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectDomainTransferFromAnotherAwsAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectDomainTransferFromAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RenewDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RenewDomainFuture) Get(ctx workflow.Context) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResendContactReachabilityEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResendContactReachabilityEmailFuture) Get(ctx workflow.Context) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetrieveDomainAuthCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetrieveDomainAuthCodeFuture) Get(ctx workflow.Context) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TransferDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TransferDomainFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TransferDomainToAnotherAwsAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TransferDomainToAnotherAwsAccountFuture) Get(ctx workflow.Context) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainContactFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainContactPrivacyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainContactPrivacyFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainNameserversFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainNameserversFuture) Get(ctx workflow.Context) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTagsForDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTagsForDomainFuture) Get(ctx workflow.Context) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ViewBillingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ViewBillingFuture) Get(ctx workflow.Context) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-AcceptDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput) *AcceptDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-AcceptDomainTransferFromAnotherAwsAccount", input)
	return &AcceptDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *stub) CancelDomainTransferToAnotherAwsAccount(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	var output route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-CancelDomainTransferToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelDomainTransferToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.CancelDomainTransferToAnotherAwsAccountInput) *CancelDomainTransferToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-CancelDomainTransferToAnotherAwsAccount", input)
	return &CancelDomainTransferToAnotherAwsAccountFuture{Future: future}
}

func (a *stub) CheckDomainAvailability(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) (*route53domains.CheckDomainAvailabilityOutput, error) {
	var output route53domains.CheckDomainAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-CheckDomainAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckDomainAvailabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainAvailabilityInput) *CheckDomainAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-CheckDomainAvailability", input)
	return &CheckDomainAvailabilityFuture{Future: future}
}

func (a *stub) CheckDomainTransferability(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) (*route53domains.CheckDomainTransferabilityOutput, error) {
	var output route53domains.CheckDomainTransferabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-CheckDomainTransferability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckDomainTransferabilityAsync(ctx workflow.Context, input *route53domains.CheckDomainTransferabilityInput) *CheckDomainTransferabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-CheckDomainTransferability", input)
	return &CheckDomainTransferabilityFuture{Future: future}
}

func (a *stub) DeleteTagsForDomain(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) (*route53domains.DeleteTagsForDomainOutput, error) {
	var output route53domains.DeleteTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-DeleteTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsForDomainAsync(ctx workflow.Context, input *route53domains.DeleteTagsForDomainInput) *DeleteTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-DeleteTagsForDomain", input)
	return &DeleteTagsForDomainFuture{Future: future}
}

func (a *stub) DisableDomainAutoRenew(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) (*route53domains.DisableDomainAutoRenewOutput, error) {
	var output route53domains.DisableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-DisableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.DisableDomainAutoRenewInput) *DisableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-DisableDomainAutoRenew", input)
	return &DisableDomainAutoRenewFuture{Future: future}
}

func (a *stub) DisableDomainTransferLock(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) (*route53domains.DisableDomainTransferLockOutput, error) {
	var output route53domains.DisableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-DisableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.DisableDomainTransferLockInput) *DisableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-DisableDomainTransferLock", input)
	return &DisableDomainTransferLockFuture{Future: future}
}

func (a *stub) EnableDomainAutoRenew(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) (*route53domains.EnableDomainAutoRenewOutput, error) {
	var output route53domains.EnableDomainAutoRenewOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-EnableDomainAutoRenew", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableDomainAutoRenewAsync(ctx workflow.Context, input *route53domains.EnableDomainAutoRenewInput) *EnableDomainAutoRenewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-EnableDomainAutoRenew", input)
	return &EnableDomainAutoRenewFuture{Future: future}
}

func (a *stub) EnableDomainTransferLock(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) (*route53domains.EnableDomainTransferLockOutput, error) {
	var output route53domains.EnableDomainTransferLockOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-EnableDomainTransferLock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableDomainTransferLockAsync(ctx workflow.Context, input *route53domains.EnableDomainTransferLockInput) *EnableDomainTransferLockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-EnableDomainTransferLock", input)
	return &EnableDomainTransferLockFuture{Future: future}
}

func (a *stub) GetContactReachabilityStatus(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) (*route53domains.GetContactReachabilityStatusOutput, error) {
	var output route53domains.GetContactReachabilityStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-GetContactReachabilityStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactReachabilityStatusAsync(ctx workflow.Context, input *route53domains.GetContactReachabilityStatusInput) *GetContactReachabilityStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-GetContactReachabilityStatus", input)
	return &GetContactReachabilityStatusFuture{Future: future}
}

func (a *stub) GetDomainDetail(ctx workflow.Context, input *route53domains.GetDomainDetailInput) (*route53domains.GetDomainDetailOutput, error) {
	var output route53domains.GetDomainDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-GetDomainDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainDetailAsync(ctx workflow.Context, input *route53domains.GetDomainDetailInput) *GetDomainDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-GetDomainDetail", input)
	return &GetDomainDetailFuture{Future: future}
}

func (a *stub) GetDomainSuggestions(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) (*route53domains.GetDomainSuggestionsOutput, error) {
	var output route53domains.GetDomainSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-GetDomainSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainSuggestionsAsync(ctx workflow.Context, input *route53domains.GetDomainSuggestionsInput) *GetDomainSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-GetDomainSuggestions", input)
	return &GetDomainSuggestionsFuture{Future: future}
}

func (a *stub) GetOperationDetail(ctx workflow.Context, input *route53domains.GetOperationDetailInput) (*route53domains.GetOperationDetailOutput, error) {
	var output route53domains.GetOperationDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-GetOperationDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationDetailAsync(ctx workflow.Context, input *route53domains.GetOperationDetailInput) *GetOperationDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-GetOperationDetail", input)
	return &GetOperationDetailFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *route53domains.ListDomainsInput) (*route53domains.ListDomainsOutput, error) {
	var output route53domains.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *route53domains.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListOperations(ctx workflow.Context, input *route53domains.ListOperationsInput) (*route53domains.ListOperationsOutput, error) {
	var output route53domains.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOperationsAsync(ctx workflow.Context, input *route53domains.ListOperationsInput) *ListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-ListOperations", input)
	return &ListOperationsFuture{Future: future}
}

func (a *stub) ListTagsForDomain(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) (*route53domains.ListTagsForDomainOutput, error) {
	var output route53domains.ListTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-ListTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForDomainAsync(ctx workflow.Context, input *route53domains.ListTagsForDomainInput) *ListTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-ListTagsForDomain", input)
	return &ListTagsForDomainFuture{Future: future}
}

func (a *stub) RegisterDomain(ctx workflow.Context, input *route53domains.RegisterDomainInput) (*route53domains.RegisterDomainOutput, error) {
	var output route53domains.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDomainAsync(ctx workflow.Context, input *route53domains.RegisterDomainInput) *RegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-RegisterDomain", input)
	return &RegisterDomainFuture{Future: future}
}

func (a *stub) RejectDomainTransferFromAnotherAwsAccount(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	var output route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-RejectDomainTransferFromAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectDomainTransferFromAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.RejectDomainTransferFromAnotherAwsAccountInput) *RejectDomainTransferFromAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-RejectDomainTransferFromAnotherAwsAccount", input)
	return &RejectDomainTransferFromAnotherAwsAccountFuture{Future: future}
}

func (a *stub) RenewDomain(ctx workflow.Context, input *route53domains.RenewDomainInput) (*route53domains.RenewDomainOutput, error) {
	var output route53domains.RenewDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-RenewDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenewDomainAsync(ctx workflow.Context, input *route53domains.RenewDomainInput) *RenewDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-RenewDomain", input)
	return &RenewDomainFuture{Future: future}
}

func (a *stub) ResendContactReachabilityEmail(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	var output route53domains.ResendContactReachabilityEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-ResendContactReachabilityEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResendContactReachabilityEmailAsync(ctx workflow.Context, input *route53domains.ResendContactReachabilityEmailInput) *ResendContactReachabilityEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-ResendContactReachabilityEmail", input)
	return &ResendContactReachabilityEmailFuture{Future: future}
}

func (a *stub) RetrieveDomainAuthCode(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	var output route53domains.RetrieveDomainAuthCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-RetrieveDomainAuthCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveDomainAuthCodeAsync(ctx workflow.Context, input *route53domains.RetrieveDomainAuthCodeInput) *RetrieveDomainAuthCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-RetrieveDomainAuthCode", input)
	return &RetrieveDomainAuthCodeFuture{Future: future}
}

func (a *stub) TransferDomain(ctx workflow.Context, input *route53domains.TransferDomainInput) (*route53domains.TransferDomainOutput, error) {
	var output route53domains.TransferDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-TransferDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransferDomainAsync(ctx workflow.Context, input *route53domains.TransferDomainInput) *TransferDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-TransferDomain", input)
	return &TransferDomainFuture{Future: future}
}

func (a *stub) TransferDomainToAnotherAwsAccount(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	var output route53domains.TransferDomainToAnotherAwsAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-TransferDomainToAnotherAwsAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransferDomainToAnotherAwsAccountAsync(ctx workflow.Context, input *route53domains.TransferDomainToAnotherAwsAccountInput) *TransferDomainToAnotherAwsAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-TransferDomainToAnotherAwsAccount", input)
	return &TransferDomainToAnotherAwsAccountFuture{Future: future}
}

func (a *stub) UpdateDomainContact(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) (*route53domains.UpdateDomainContactOutput, error) {
	var output route53domains.UpdateDomainContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainContactAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactInput) *UpdateDomainContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainContact", input)
	return &UpdateDomainContactFuture{Future: future}
}

func (a *stub) UpdateDomainContactPrivacy(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	var output route53domains.UpdateDomainContactPrivacyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainContactPrivacy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainContactPrivacyAsync(ctx workflow.Context, input *route53domains.UpdateDomainContactPrivacyInput) *UpdateDomainContactPrivacyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainContactPrivacy", input)
	return &UpdateDomainContactPrivacyFuture{Future: future}
}

func (a *stub) UpdateDomainNameservers(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) (*route53domains.UpdateDomainNameserversOutput, error) {
	var output route53domains.UpdateDomainNameserversOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainNameservers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainNameserversAsync(ctx workflow.Context, input *route53domains.UpdateDomainNameserversInput) *UpdateDomainNameserversFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateDomainNameservers", input)
	return &UpdateDomainNameserversFuture{Future: future}
}

func (a *stub) UpdateTagsForDomain(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) (*route53domains.UpdateTagsForDomainOutput, error) {
	var output route53domains.UpdateTagsForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateTagsForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTagsForDomainAsync(ctx workflow.Context, input *route53domains.UpdateTagsForDomainInput) *UpdateTagsForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-UpdateTagsForDomain", input)
	return &UpdateTagsForDomainFuture{Future: future}
}

func (a *stub) ViewBilling(ctx workflow.Context, input *route53domains.ViewBillingInput) (*route53domains.ViewBillingOutput, error) {
	var output route53domains.ViewBillingOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53domains-ViewBilling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ViewBillingAsync(ctx workflow.Context, input *route53domains.ViewBillingInput) *ViewBillingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53domains-ViewBilling", input)
	return &ViewBillingFuture{Future: future}
}
