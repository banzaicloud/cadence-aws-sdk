// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotsitewisestub

import (
	"github.com/aws/aws-sdk-go/service/iotsitewise"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type IoTSiteWiseAssociateAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseAssociateAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.AssociateAssetsOutput, error) {
	var output iotsitewise.AssociateAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseBatchAssociateProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseBatchAssociateProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchAssociateProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseBatchDisassociateProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseBatchDisassociateProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchDisassociateProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseBatchPutAssetPropertyValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseBatchPutAssetPropertyValueFuture) Get(ctx workflow.Context) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	var output iotsitewise.BatchPutAssetPropertyValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAccessPolicyOutput, error) {
	var output iotsitewise.CreateAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateAssetFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAssetOutput, error) {
	var output iotsitewise.CreateAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAssetModelOutput, error) {
	var output iotsitewise.CreateAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.CreateDashboardOutput, error) {
	var output iotsitewise.CreateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.CreateGatewayOutput, error) {
	var output iotsitewise.CreateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreatePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreatePortalFuture) Get(ctx workflow.Context) (*iotsitewise.CreatePortalOutput, error) {
	var output iotsitewise.CreatePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreatePresignedPortalUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreatePresignedPortalUrlFuture) Get(ctx workflow.Context) (*iotsitewise.CreatePresignedPortalUrlOutput, error) {
	var output iotsitewise.CreatePresignedPortalUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseCreateProjectFuture) Get(ctx workflow.Context) (*iotsitewise.CreateProjectOutput, error) {
	var output iotsitewise.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	var output iotsitewise.DeleteAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteAssetFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAssetOutput, error) {
	var output iotsitewise.DeleteAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAssetModelOutput, error) {
	var output iotsitewise.DeleteAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteDashboardOutput, error) {
	var output iotsitewise.DeleteDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteGatewayOutput, error) {
	var output iotsitewise.DeleteGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeletePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeletePortalFuture) Get(ctx workflow.Context) (*iotsitewise.DeletePortalOutput, error) {
	var output iotsitewise.DeletePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDeleteProjectFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteProjectOutput, error) {
	var output iotsitewise.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	var output iotsitewise.DescribeAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeAssetFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetOutput, error) {
	var output iotsitewise.DescribeAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetModelOutput, error) {
	var output iotsitewise.DescribeAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeAssetPropertyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeAssetPropertyFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	var output iotsitewise.DescribeAssetPropertyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeDashboardOutput, error) {
	var output iotsitewise.DescribeDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeGatewayOutput, error) {
	var output iotsitewise.DescribeGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeGatewayCapabilityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeGatewayCapabilityConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.DescribeGatewayCapabilityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	var output iotsitewise.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribePortalFuture) Get(ctx workflow.Context) (*iotsitewise.DescribePortalOutput, error) {
	var output iotsitewise.DescribePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDescribeProjectFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeProjectOutput, error) {
	var output iotsitewise.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseDisassociateAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseDisassociateAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.DisassociateAssetsOutput, error) {
	var output iotsitewise.DisassociateAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseGetAssetPropertyAggregatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseGetAssetPropertyAggregatesFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	var output iotsitewise.GetAssetPropertyAggregatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseGetAssetPropertyValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseGetAssetPropertyValueFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	var output iotsitewise.GetAssetPropertyValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseGetAssetPropertyValueHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseGetAssetPropertyValueHistoryFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	var output iotsitewise.GetAssetPropertyValueHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListAccessPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListAccessPoliciesFuture) Get(ctx workflow.Context) (*iotsitewise.ListAccessPoliciesOutput, error) {
	var output iotsitewise.ListAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListAssetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListAssetModelsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssetModelsOutput, error) {
	var output iotsitewise.ListAssetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssetsOutput, error) {
	var output iotsitewise.ListAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListAssociatedAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListAssociatedAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	var output iotsitewise.ListAssociatedAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListDashboardsFuture) Get(ctx workflow.Context) (*iotsitewise.ListDashboardsOutput, error) {
	var output iotsitewise.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListGatewaysFuture) Get(ctx workflow.Context) (*iotsitewise.ListGatewaysOutput, error) {
	var output iotsitewise.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListPortalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListPortalsFuture) Get(ctx workflow.Context) (*iotsitewise.ListPortalsOutput, error) {
	var output iotsitewise.ListPortalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListProjectAssetsOutput, error) {
	var output iotsitewise.ListProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListProjectsFuture) Get(ctx workflow.Context) (*iotsitewise.ListProjectsOutput, error) {
	var output iotsitewise.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseListTagsForResourceFuture) Get(ctx workflow.Context) (*iotsitewise.ListTagsForResourceOutput, error) {
	var output iotsitewise.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWisePutLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWisePutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotsitewise.PutLoggingOptionsOutput, error) {
	var output iotsitewise.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseTagResourceFuture) Get(ctx workflow.Context) (*iotsitewise.TagResourceOutput, error) {
	var output iotsitewise.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUntagResourceFuture) Get(ctx workflow.Context) (*iotsitewise.UntagResourceOutput, error) {
	var output iotsitewise.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	var output iotsitewise.UpdateAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateAssetFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetOutput, error) {
	var output iotsitewise.UpdateAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetModelOutput, error) {
	var output iotsitewise.UpdateAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateAssetPropertyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateAssetPropertyFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	var output iotsitewise.UpdateAssetPropertyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateDashboardOutput, error) {
	var output iotsitewise.UpdateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateGatewayOutput, error) {
	var output iotsitewise.UpdateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateGatewayCapabilityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateGatewayCapabilityConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.UpdateGatewayCapabilityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdatePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdatePortalFuture) Get(ctx workflow.Context) (*iotsitewise.UpdatePortalOutput, error) {
	var output iotsitewise.UpdatePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSiteWiseUpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSiteWiseUpdateProjectFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateProjectOutput, error) {
	var output iotsitewise.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssets(ctx workflow.Context, input *iotsitewise.AssociateAssetsInput) (*iotsitewise.AssociateAssetsOutput, error) {
	var output iotsitewise.AssociateAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-AssociateAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssetsAsync(ctx workflow.Context, input *iotsitewise.AssociateAssetsInput) *IoTSiteWiseAssociateAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-AssociateAssets", input)
	return &IoTSiteWiseAssociateAssetsFuture{Future: future}
}

func (a *stub) BatchAssociateProjectAssets(ctx workflow.Context, input *iotsitewise.BatchAssociateProjectAssetsInput) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchAssociateProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchAssociateProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.BatchAssociateProjectAssetsInput) *IoTSiteWiseBatchAssociateProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchAssociateProjectAssets", input)
	return &IoTSiteWiseBatchAssociateProjectAssetsFuture{Future: future}
}

func (a *stub) BatchDisassociateProjectAssets(ctx workflow.Context, input *iotsitewise.BatchDisassociateProjectAssetsInput) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchDisassociateProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchDisassociateProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.BatchDisassociateProjectAssetsInput) *IoTSiteWiseBatchDisassociateProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchDisassociateProjectAssets", input)
	return &IoTSiteWiseBatchDisassociateProjectAssetsFuture{Future: future}
}

func (a *stub) BatchPutAssetPropertyValue(ctx workflow.Context, input *iotsitewise.BatchPutAssetPropertyValueInput) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	var output iotsitewise.BatchPutAssetPropertyValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchPutAssetPropertyValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutAssetPropertyValueAsync(ctx workflow.Context, input *iotsitewise.BatchPutAssetPropertyValueInput) *IoTSiteWiseBatchPutAssetPropertyValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchPutAssetPropertyValue", input)
	return &IoTSiteWiseBatchPutAssetPropertyValueFuture{Future: future}
}

func (a *stub) CreateAccessPolicy(ctx workflow.Context, input *iotsitewise.CreateAccessPolicyInput) (*iotsitewise.CreateAccessPolicyOutput, error) {
	var output iotsitewise.CreateAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.CreateAccessPolicyInput) *IoTSiteWiseCreateAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAccessPolicy", input)
	return &IoTSiteWiseCreateAccessPolicyFuture{Future: future}
}

func (a *stub) CreateAsset(ctx workflow.Context, input *iotsitewise.CreateAssetInput) (*iotsitewise.CreateAssetOutput, error) {
	var output iotsitewise.CreateAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssetAsync(ctx workflow.Context, input *iotsitewise.CreateAssetInput) *IoTSiteWiseCreateAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAsset", input)
	return &IoTSiteWiseCreateAssetFuture{Future: future}
}

func (a *stub) CreateAssetModel(ctx workflow.Context, input *iotsitewise.CreateAssetModelInput) (*iotsitewise.CreateAssetModelOutput, error) {
	var output iotsitewise.CreateAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssetModelAsync(ctx workflow.Context, input *iotsitewise.CreateAssetModelInput) *IoTSiteWiseCreateAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAssetModel", input)
	return &IoTSiteWiseCreateAssetModelFuture{Future: future}
}

func (a *stub) CreateDashboard(ctx workflow.Context, input *iotsitewise.CreateDashboardInput) (*iotsitewise.CreateDashboardOutput, error) {
	var output iotsitewise.CreateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDashboardAsync(ctx workflow.Context, input *iotsitewise.CreateDashboardInput) *IoTSiteWiseCreateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateDashboard", input)
	return &IoTSiteWiseCreateDashboardFuture{Future: future}
}

func (a *stub) CreateGateway(ctx workflow.Context, input *iotsitewise.CreateGatewayInput) (*iotsitewise.CreateGatewayOutput, error) {
	var output iotsitewise.CreateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayAsync(ctx workflow.Context, input *iotsitewise.CreateGatewayInput) *IoTSiteWiseCreateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateGateway", input)
	return &IoTSiteWiseCreateGatewayFuture{Future: future}
}

func (a *stub) CreatePortal(ctx workflow.Context, input *iotsitewise.CreatePortalInput) (*iotsitewise.CreatePortalOutput, error) {
	var output iotsitewise.CreatePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortalAsync(ctx workflow.Context, input *iotsitewise.CreatePortalInput) *IoTSiteWiseCreatePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePortal", input)
	return &IoTSiteWiseCreatePortalFuture{Future: future}
}

func (a *stub) CreatePresignedPortalUrl(ctx workflow.Context, input *iotsitewise.CreatePresignedPortalUrlInput) (*iotsitewise.CreatePresignedPortalUrlOutput, error) {
	var output iotsitewise.CreatePresignedPortalUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePresignedPortalUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresignedPortalUrlAsync(ctx workflow.Context, input *iotsitewise.CreatePresignedPortalUrlInput) *IoTSiteWiseCreatePresignedPortalUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePresignedPortalUrl", input)
	return &IoTSiteWiseCreatePresignedPortalUrlFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *iotsitewise.CreateProjectInput) (*iotsitewise.CreateProjectOutput, error) {
	var output iotsitewise.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *iotsitewise.CreateProjectInput) *IoTSiteWiseCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateProject", input)
	return &IoTSiteWiseCreateProjectFuture{Future: future}
}

func (a *stub) DeleteAccessPolicy(ctx workflow.Context, input *iotsitewise.DeleteAccessPolicyInput) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	var output iotsitewise.DeleteAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.DeleteAccessPolicyInput) *IoTSiteWiseDeleteAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAccessPolicy", input)
	return &IoTSiteWiseDeleteAccessPolicyFuture{Future: future}
}

func (a *stub) DeleteAsset(ctx workflow.Context, input *iotsitewise.DeleteAssetInput) (*iotsitewise.DeleteAssetOutput, error) {
	var output iotsitewise.DeleteAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssetAsync(ctx workflow.Context, input *iotsitewise.DeleteAssetInput) *IoTSiteWiseDeleteAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAsset", input)
	return &IoTSiteWiseDeleteAssetFuture{Future: future}
}

func (a *stub) DeleteAssetModel(ctx workflow.Context, input *iotsitewise.DeleteAssetModelInput) (*iotsitewise.DeleteAssetModelOutput, error) {
	var output iotsitewise.DeleteAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssetModelAsync(ctx workflow.Context, input *iotsitewise.DeleteAssetModelInput) *IoTSiteWiseDeleteAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAssetModel", input)
	return &IoTSiteWiseDeleteAssetModelFuture{Future: future}
}

func (a *stub) DeleteDashboard(ctx workflow.Context, input *iotsitewise.DeleteDashboardInput) (*iotsitewise.DeleteDashboardOutput, error) {
	var output iotsitewise.DeleteDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDashboardAsync(ctx workflow.Context, input *iotsitewise.DeleteDashboardInput) *IoTSiteWiseDeleteDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteDashboard", input)
	return &IoTSiteWiseDeleteDashboardFuture{Future: future}
}

func (a *stub) DeleteGateway(ctx workflow.Context, input *iotsitewise.DeleteGatewayInput) (*iotsitewise.DeleteGatewayOutput, error) {
	var output iotsitewise.DeleteGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayAsync(ctx workflow.Context, input *iotsitewise.DeleteGatewayInput) *IoTSiteWiseDeleteGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteGateway", input)
	return &IoTSiteWiseDeleteGatewayFuture{Future: future}
}

func (a *stub) DeletePortal(ctx workflow.Context, input *iotsitewise.DeletePortalInput) (*iotsitewise.DeletePortalOutput, error) {
	var output iotsitewise.DeletePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeletePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortalAsync(ctx workflow.Context, input *iotsitewise.DeletePortalInput) *IoTSiteWiseDeletePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeletePortal", input)
	return &IoTSiteWiseDeletePortalFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *iotsitewise.DeleteProjectInput) (*iotsitewise.DeleteProjectOutput, error) {
	var output iotsitewise.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *iotsitewise.DeleteProjectInput) *IoTSiteWiseDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteProject", input)
	return &IoTSiteWiseDeleteProjectFuture{Future: future}
}

func (a *stub) DescribeAccessPolicy(ctx workflow.Context, input *iotsitewise.DescribeAccessPolicyInput) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	var output iotsitewise.DescribeAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.DescribeAccessPolicyInput) *IoTSiteWiseDescribeAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAccessPolicy", input)
	return &IoTSiteWiseDescribeAccessPolicyFuture{Future: future}
}

func (a *stub) DescribeAsset(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) (*iotsitewise.DescribeAssetOutput, error) {
	var output iotsitewise.DescribeAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *IoTSiteWiseDescribeAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAsset", input)
	return &IoTSiteWiseDescribeAssetFuture{Future: future}
}

func (a *stub) DescribeAssetModel(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) (*iotsitewise.DescribeAssetModelOutput, error) {
	var output iotsitewise.DescribeAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetModelAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *IoTSiteWiseDescribeAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetModel", input)
	return &IoTSiteWiseDescribeAssetModelFuture{Future: future}
}

func (a *stub) DescribeAssetProperty(ctx workflow.Context, input *iotsitewise.DescribeAssetPropertyInput) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	var output iotsitewise.DescribeAssetPropertyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetProperty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetPropertyAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetPropertyInput) *IoTSiteWiseDescribeAssetPropertyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetProperty", input)
	return &IoTSiteWiseDescribeAssetPropertyFuture{Future: future}
}

func (a *stub) DescribeDashboard(ctx workflow.Context, input *iotsitewise.DescribeDashboardInput) (*iotsitewise.DescribeDashboardOutput, error) {
	var output iotsitewise.DescribeDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDashboardAsync(ctx workflow.Context, input *iotsitewise.DescribeDashboardInput) *IoTSiteWiseDescribeDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDashboard", input)
	return &IoTSiteWiseDescribeDashboardFuture{Future: future}
}

func (a *stub) DescribeGateway(ctx workflow.Context, input *iotsitewise.DescribeGatewayInput) (*iotsitewise.DescribeGatewayOutput, error) {
	var output iotsitewise.DescribeGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayAsync(ctx workflow.Context, input *iotsitewise.DescribeGatewayInput) *IoTSiteWiseDescribeGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGateway", input)
	return &IoTSiteWiseDescribeGatewayFuture{Future: future}
}

func (a *stub) DescribeGatewayCapabilityConfiguration(ctx workflow.Context, input *iotsitewise.DescribeGatewayCapabilityConfigurationInput) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.DescribeGatewayCapabilityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGatewayCapabilityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayCapabilityConfigurationAsync(ctx workflow.Context, input *iotsitewise.DescribeGatewayCapabilityConfigurationInput) *IoTSiteWiseDescribeGatewayCapabilityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGatewayCapabilityConfiguration", input)
	return &IoTSiteWiseDescribeGatewayCapabilityConfigurationFuture{Future: future}
}

func (a *stub) DescribeLoggingOptions(ctx workflow.Context, input *iotsitewise.DescribeLoggingOptionsInput) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	var output iotsitewise.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotsitewise.DescribeLoggingOptionsInput) *IoTSiteWiseDescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeLoggingOptions", input)
	return &IoTSiteWiseDescribeLoggingOptionsFuture{Future: future}
}

func (a *stub) DescribePortal(ctx workflow.Context, input *iotsitewise.DescribePortalInput) (*iotsitewise.DescribePortalOutput, error) {
	var output iotsitewise.DescribePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortalAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *IoTSiteWiseDescribePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribePortal", input)
	return &IoTSiteWiseDescribePortalFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *iotsitewise.DescribeProjectInput) (*iotsitewise.DescribeProjectOutput, error) {
	var output iotsitewise.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *iotsitewise.DescribeProjectInput) *IoTSiteWiseDescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeProject", input)
	return &IoTSiteWiseDescribeProjectFuture{Future: future}
}

func (a *stub) DisassociateAssets(ctx workflow.Context, input *iotsitewise.DisassociateAssetsInput) (*iotsitewise.DisassociateAssetsOutput, error) {
	var output iotsitewise.DisassociateAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DisassociateAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAssetsAsync(ctx workflow.Context, input *iotsitewise.DisassociateAssetsInput) *IoTSiteWiseDisassociateAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DisassociateAssets", input)
	return &IoTSiteWiseDisassociateAssetsFuture{Future: future}
}

func (a *stub) GetAssetPropertyAggregates(ctx workflow.Context, input *iotsitewise.GetAssetPropertyAggregatesInput) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	var output iotsitewise.GetAssetPropertyAggregatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyAggregates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyAggregatesAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyAggregatesInput) *IoTSiteWiseGetAssetPropertyAggregatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyAggregates", input)
	return &IoTSiteWiseGetAssetPropertyAggregatesFuture{Future: future}
}

func (a *stub) GetAssetPropertyValue(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueInput) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	var output iotsitewise.GetAssetPropertyValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyValueAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueInput) *IoTSiteWiseGetAssetPropertyValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValue", input)
	return &IoTSiteWiseGetAssetPropertyValueFuture{Future: future}
}

func (a *stub) GetAssetPropertyValueHistory(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueHistoryInput) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	var output iotsitewise.GetAssetPropertyValueHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValueHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyValueHistoryAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueHistoryInput) *IoTSiteWiseGetAssetPropertyValueHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValueHistory", input)
	return &IoTSiteWiseGetAssetPropertyValueHistoryFuture{Future: future}
}

func (a *stub) ListAccessPolicies(ctx workflow.Context, input *iotsitewise.ListAccessPoliciesInput) (*iotsitewise.ListAccessPoliciesOutput, error) {
	var output iotsitewise.ListAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessPoliciesAsync(ctx workflow.Context, input *iotsitewise.ListAccessPoliciesInput) *IoTSiteWiseListAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAccessPolicies", input)
	return &IoTSiteWiseListAccessPoliciesFuture{Future: future}
}

func (a *stub) ListAssetModels(ctx workflow.Context, input *iotsitewise.ListAssetModelsInput) (*iotsitewise.ListAssetModelsOutput, error) {
	var output iotsitewise.ListAssetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetModelsAsync(ctx workflow.Context, input *iotsitewise.ListAssetModelsInput) *IoTSiteWiseListAssetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetModels", input)
	return &IoTSiteWiseListAssetModelsFuture{Future: future}
}

func (a *stub) ListAssets(ctx workflow.Context, input *iotsitewise.ListAssetsInput) (*iotsitewise.ListAssetsOutput, error) {
	var output iotsitewise.ListAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetsAsync(ctx workflow.Context, input *iotsitewise.ListAssetsInput) *IoTSiteWiseListAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssets", input)
	return &IoTSiteWiseListAssetsFuture{Future: future}
}

func (a *stub) ListAssociatedAssets(ctx workflow.Context, input *iotsitewise.ListAssociatedAssetsInput) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	var output iotsitewise.ListAssociatedAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssociatedAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedAssetsAsync(ctx workflow.Context, input *iotsitewise.ListAssociatedAssetsInput) *IoTSiteWiseListAssociatedAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssociatedAssets", input)
	return &IoTSiteWiseListAssociatedAssetsFuture{Future: future}
}

func (a *stub) ListDashboards(ctx workflow.Context, input *iotsitewise.ListDashboardsInput) (*iotsitewise.ListDashboardsOutput, error) {
	var output iotsitewise.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDashboardsAsync(ctx workflow.Context, input *iotsitewise.ListDashboardsInput) *IoTSiteWiseListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListDashboards", input)
	return &IoTSiteWiseListDashboardsFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *iotsitewise.ListGatewaysInput) (*iotsitewise.ListGatewaysOutput, error) {
	var output iotsitewise.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *iotsitewise.ListGatewaysInput) *IoTSiteWiseListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListGateways", input)
	return &IoTSiteWiseListGatewaysFuture{Future: future}
}

func (a *stub) ListPortals(ctx workflow.Context, input *iotsitewise.ListPortalsInput) (*iotsitewise.ListPortalsOutput, error) {
	var output iotsitewise.ListPortalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListPortals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortalsAsync(ctx workflow.Context, input *iotsitewise.ListPortalsInput) *IoTSiteWiseListPortalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListPortals", input)
	return &IoTSiteWiseListPortalsFuture{Future: future}
}

func (a *stub) ListProjectAssets(ctx workflow.Context, input *iotsitewise.ListProjectAssetsInput) (*iotsitewise.ListProjectAssetsOutput, error) {
	var output iotsitewise.ListProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.ListProjectAssetsInput) *IoTSiteWiseListProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjectAssets", input)
	return &IoTSiteWiseListProjectAssetsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *iotsitewise.ListProjectsInput) (*iotsitewise.ListProjectsOutput, error) {
	var output iotsitewise.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *iotsitewise.ListProjectsInput) *IoTSiteWiseListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjects", input)
	return &IoTSiteWiseListProjectsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotsitewise.ListTagsForResourceInput) (*iotsitewise.ListTagsForResourceOutput, error) {
	var output iotsitewise.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotsitewise.ListTagsForResourceInput) *IoTSiteWiseListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListTagsForResource", input)
	return &IoTSiteWiseListTagsForResourceFuture{Future: future}
}

func (a *stub) PutLoggingOptions(ctx workflow.Context, input *iotsitewise.PutLoggingOptionsInput) (*iotsitewise.PutLoggingOptionsOutput, error) {
	var output iotsitewise.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotsitewise.PutLoggingOptionsInput) *IoTSiteWisePutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutLoggingOptions", input)
	return &IoTSiteWisePutLoggingOptionsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotsitewise.TagResourceInput) (*iotsitewise.TagResourceOutput, error) {
	var output iotsitewise.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotsitewise.TagResourceInput) *IoTSiteWiseTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-TagResource", input)
	return &IoTSiteWiseTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotsitewise.UntagResourceInput) (*iotsitewise.UntagResourceOutput, error) {
	var output iotsitewise.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotsitewise.UntagResourceInput) *IoTSiteWiseUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UntagResource", input)
	return &IoTSiteWiseUntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccessPolicy(ctx workflow.Context, input *iotsitewise.UpdateAccessPolicyInput) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	var output iotsitewise.UpdateAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.UpdateAccessPolicyInput) *IoTSiteWiseUpdateAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAccessPolicy", input)
	return &IoTSiteWiseUpdateAccessPolicyFuture{Future: future}
}

func (a *stub) UpdateAsset(ctx workflow.Context, input *iotsitewise.UpdateAssetInput) (*iotsitewise.UpdateAssetOutput, error) {
	var output iotsitewise.UpdateAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetInput) *IoTSiteWiseUpdateAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAsset", input)
	return &IoTSiteWiseUpdateAssetFuture{Future: future}
}

func (a *stub) UpdateAssetModel(ctx workflow.Context, input *iotsitewise.UpdateAssetModelInput) (*iotsitewise.UpdateAssetModelOutput, error) {
	var output iotsitewise.UpdateAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetModelAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetModelInput) *IoTSiteWiseUpdateAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetModel", input)
	return &IoTSiteWiseUpdateAssetModelFuture{Future: future}
}

func (a *stub) UpdateAssetProperty(ctx workflow.Context, input *iotsitewise.UpdateAssetPropertyInput) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	var output iotsitewise.UpdateAssetPropertyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetProperty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetPropertyAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetPropertyInput) *IoTSiteWiseUpdateAssetPropertyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetProperty", input)
	return &IoTSiteWiseUpdateAssetPropertyFuture{Future: future}
}

func (a *stub) UpdateDashboard(ctx workflow.Context, input *iotsitewise.UpdateDashboardInput) (*iotsitewise.UpdateDashboardOutput, error) {
	var output iotsitewise.UpdateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDashboardAsync(ctx workflow.Context, input *iotsitewise.UpdateDashboardInput) *IoTSiteWiseUpdateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateDashboard", input)
	return &IoTSiteWiseUpdateDashboardFuture{Future: future}
}

func (a *stub) UpdateGateway(ctx workflow.Context, input *iotsitewise.UpdateGatewayInput) (*iotsitewise.UpdateGatewayOutput, error) {
	var output iotsitewise.UpdateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayAsync(ctx workflow.Context, input *iotsitewise.UpdateGatewayInput) *IoTSiteWiseUpdateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGateway", input)
	return &IoTSiteWiseUpdateGatewayFuture{Future: future}
}

func (a *stub) UpdateGatewayCapabilityConfiguration(ctx workflow.Context, input *iotsitewise.UpdateGatewayCapabilityConfigurationInput) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.UpdateGatewayCapabilityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGatewayCapabilityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayCapabilityConfigurationAsync(ctx workflow.Context, input *iotsitewise.UpdateGatewayCapabilityConfigurationInput) *IoTSiteWiseUpdateGatewayCapabilityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGatewayCapabilityConfiguration", input)
	return &IoTSiteWiseUpdateGatewayCapabilityConfigurationFuture{Future: future}
}

func (a *stub) UpdatePortal(ctx workflow.Context, input *iotsitewise.UpdatePortalInput) (*iotsitewise.UpdatePortalOutput, error) {
	var output iotsitewise.UpdatePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdatePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePortalAsync(ctx workflow.Context, input *iotsitewise.UpdatePortalInput) *IoTSiteWiseUpdatePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdatePortal", input)
	return &IoTSiteWiseUpdatePortalFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *iotsitewise.UpdateProjectInput) (*iotsitewise.UpdateProjectOutput, error) {
	var output iotsitewise.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *iotsitewise.UpdateProjectInput) *IoTSiteWiseUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateProject", input)
	return &IoTSiteWiseUpdateProjectFuture{Future: future}
}

func (a *stub) WaitUntilAssetActive(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetActiveAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetModelActive(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetModelActiveAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetModelNotExists(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetModelNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelNotExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetNotExists(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetNotExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPortalActive(ctx workflow.Context, input *iotsitewise.DescribePortalInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPortalActiveAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPortalNotExists(ctx workflow.Context, input *iotsitewise.DescribePortalInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPortalNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalNotExists", input)
	return clients.NewVoidFuture(future)
}
