// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotsitewisestub

import (
	"github.com/aws/aws-sdk-go/service/iotsitewise"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.AssociateAssetsOutput, error) {
	var output iotsitewise.AssociateAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchAssociateProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchAssociateProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchAssociateProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisassociateProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisassociateProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchDisassociateProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchPutAssetPropertyValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchPutAssetPropertyValueFuture) Get(ctx workflow.Context) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	var output iotsitewise.BatchPutAssetPropertyValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAccessPolicyOutput, error) {
	var output iotsitewise.CreateAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssetFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAssetOutput, error) {
	var output iotsitewise.CreateAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.CreateAssetModelOutput, error) {
	var output iotsitewise.CreateAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.CreateDashboardOutput, error) {
	var output iotsitewise.CreateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.CreateGatewayOutput, error) {
	var output iotsitewise.CreateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePortalFuture) Get(ctx workflow.Context) (*iotsitewise.CreatePortalOutput, error) {
	var output iotsitewise.CreatePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*iotsitewise.CreateProjectOutput, error) {
	var output iotsitewise.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	var output iotsitewise.DeleteAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssetFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAssetOutput, error) {
	var output iotsitewise.DeleteAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteAssetModelOutput, error) {
	var output iotsitewise.DeleteAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteDashboardOutput, error) {
	var output iotsitewise.DeleteDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteGatewayOutput, error) {
	var output iotsitewise.DeleteGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePortalFuture) Get(ctx workflow.Context) (*iotsitewise.DeletePortalOutput, error) {
	var output iotsitewise.DeletePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*iotsitewise.DeleteProjectOutput, error) {
	var output iotsitewise.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	var output iotsitewise.DescribeAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssetFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetOutput, error) {
	var output iotsitewise.DescribeAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetModelOutput, error) {
	var output iotsitewise.DescribeAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssetPropertyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssetPropertyFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	var output iotsitewise.DescribeAssetPropertyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeDashboardOutput, error) {
	var output iotsitewise.DescribeDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDefaultEncryptionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDefaultEncryptionConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeDefaultEncryptionConfigurationOutput, error) {
	var output iotsitewise.DescribeDefaultEncryptionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeGatewayOutput, error) {
	var output iotsitewise.DescribeGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGatewayCapabilityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGatewayCapabilityConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.DescribeGatewayCapabilityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	var output iotsitewise.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePortalFuture) Get(ctx workflow.Context) (*iotsitewise.DescribePortalOutput, error) {
	var output iotsitewise.DescribePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProjectFuture) Get(ctx workflow.Context) (*iotsitewise.DescribeProjectOutput, error) {
	var output iotsitewise.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.DisassociateAssetsOutput, error) {
	var output iotsitewise.DisassociateAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssetPropertyAggregatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssetPropertyAggregatesFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	var output iotsitewise.GetAssetPropertyAggregatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssetPropertyValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssetPropertyValueFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	var output iotsitewise.GetAssetPropertyValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssetPropertyValueHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssetPropertyValueHistoryFuture) Get(ctx workflow.Context) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	var output iotsitewise.GetAssetPropertyValueHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccessPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccessPoliciesFuture) Get(ctx workflow.Context) (*iotsitewise.ListAccessPoliciesOutput, error) {
	var output iotsitewise.ListAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssetModelsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssetModelsOutput, error) {
	var output iotsitewise.ListAssetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssetRelationshipsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssetRelationshipsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssetRelationshipsOutput, error) {
	var output iotsitewise.ListAssetRelationshipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssetsOutput, error) {
	var output iotsitewise.ListAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	var output iotsitewise.ListAssociatedAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDashboardsFuture) Get(ctx workflow.Context) (*iotsitewise.ListDashboardsOutput, error) {
	var output iotsitewise.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGatewaysFuture) Get(ctx workflow.Context) (*iotsitewise.ListGatewaysOutput, error) {
	var output iotsitewise.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPortalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPortalsFuture) Get(ctx workflow.Context) (*iotsitewise.ListPortalsOutput, error) {
	var output iotsitewise.ListPortalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectAssetsFuture) Get(ctx workflow.Context) (*iotsitewise.ListProjectAssetsOutput, error) {
	var output iotsitewise.ListProjectAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectsFuture) Get(ctx workflow.Context) (*iotsitewise.ListProjectsOutput, error) {
	var output iotsitewise.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iotsitewise.ListTagsForResourceOutput, error) {
	var output iotsitewise.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDefaultEncryptionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDefaultEncryptionConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.PutDefaultEncryptionConfigurationOutput, error) {
	var output iotsitewise.PutDefaultEncryptionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotsitewise.PutLoggingOptionsOutput, error) {
	var output iotsitewise.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iotsitewise.TagResourceOutput, error) {
	var output iotsitewise.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iotsitewise.UntagResourceOutput, error) {
	var output iotsitewise.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccessPolicyFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	var output iotsitewise.UpdateAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssetFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetOutput, error) {
	var output iotsitewise.UpdateAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssetModelFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetModelOutput, error) {
	var output iotsitewise.UpdateAssetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssetPropertyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssetPropertyFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	var output iotsitewise.UpdateAssetPropertyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDashboardFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateDashboardOutput, error) {
	var output iotsitewise.UpdateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateGatewayOutput, error) {
	var output iotsitewise.UpdateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayCapabilityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayCapabilityConfigurationFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.UpdateGatewayCapabilityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePortalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePortalFuture) Get(ctx workflow.Context) (*iotsitewise.UpdatePortalOutput, error) {
	var output iotsitewise.UpdatePortalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProjectFuture) Get(ctx workflow.Context) (*iotsitewise.UpdateProjectOutput, error) {
	var output iotsitewise.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssets(ctx workflow.Context, input *iotsitewise.AssociateAssetsInput) (*iotsitewise.AssociateAssetsOutput, error) {
	var output iotsitewise.AssociateAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-AssociateAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssetsAsync(ctx workflow.Context, input *iotsitewise.AssociateAssetsInput) *AssociateAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-AssociateAssets", input)
	return &AssociateAssetsFuture{Future: future}
}

func (a *stub) BatchAssociateProjectAssets(ctx workflow.Context, input *iotsitewise.BatchAssociateProjectAssetsInput) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchAssociateProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchAssociateProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.BatchAssociateProjectAssetsInput) *BatchAssociateProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchAssociateProjectAssets", input)
	return &BatchAssociateProjectAssetsFuture{Future: future}
}

func (a *stub) BatchDisassociateProjectAssets(ctx workflow.Context, input *iotsitewise.BatchDisassociateProjectAssetsInput) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	var output iotsitewise.BatchDisassociateProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchDisassociateProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.BatchDisassociateProjectAssetsInput) *BatchDisassociateProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchDisassociateProjectAssets", input)
	return &BatchDisassociateProjectAssetsFuture{Future: future}
}

func (a *stub) BatchPutAssetPropertyValue(ctx workflow.Context, input *iotsitewise.BatchPutAssetPropertyValueInput) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	var output iotsitewise.BatchPutAssetPropertyValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchPutAssetPropertyValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutAssetPropertyValueAsync(ctx workflow.Context, input *iotsitewise.BatchPutAssetPropertyValueInput) *BatchPutAssetPropertyValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-BatchPutAssetPropertyValue", input)
	return &BatchPutAssetPropertyValueFuture{Future: future}
}

func (a *stub) CreateAccessPolicy(ctx workflow.Context, input *iotsitewise.CreateAccessPolicyInput) (*iotsitewise.CreateAccessPolicyOutput, error) {
	var output iotsitewise.CreateAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.CreateAccessPolicyInput) *CreateAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAccessPolicy", input)
	return &CreateAccessPolicyFuture{Future: future}
}

func (a *stub) CreateAsset(ctx workflow.Context, input *iotsitewise.CreateAssetInput) (*iotsitewise.CreateAssetOutput, error) {
	var output iotsitewise.CreateAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssetAsync(ctx workflow.Context, input *iotsitewise.CreateAssetInput) *CreateAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAsset", input)
	return &CreateAssetFuture{Future: future}
}

func (a *stub) CreateAssetModel(ctx workflow.Context, input *iotsitewise.CreateAssetModelInput) (*iotsitewise.CreateAssetModelOutput, error) {
	var output iotsitewise.CreateAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssetModelAsync(ctx workflow.Context, input *iotsitewise.CreateAssetModelInput) *CreateAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateAssetModel", input)
	return &CreateAssetModelFuture{Future: future}
}

func (a *stub) CreateDashboard(ctx workflow.Context, input *iotsitewise.CreateDashboardInput) (*iotsitewise.CreateDashboardOutput, error) {
	var output iotsitewise.CreateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDashboardAsync(ctx workflow.Context, input *iotsitewise.CreateDashboardInput) *CreateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateDashboard", input)
	return &CreateDashboardFuture{Future: future}
}

func (a *stub) CreateGateway(ctx workflow.Context, input *iotsitewise.CreateGatewayInput) (*iotsitewise.CreateGatewayOutput, error) {
	var output iotsitewise.CreateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayAsync(ctx workflow.Context, input *iotsitewise.CreateGatewayInput) *CreateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateGateway", input)
	return &CreateGatewayFuture{Future: future}
}

func (a *stub) CreatePortal(ctx workflow.Context, input *iotsitewise.CreatePortalInput) (*iotsitewise.CreatePortalOutput, error) {
	var output iotsitewise.CreatePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortalAsync(ctx workflow.Context, input *iotsitewise.CreatePortalInput) *CreatePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreatePortal", input)
	return &CreatePortalFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *iotsitewise.CreateProjectInput) (*iotsitewise.CreateProjectOutput, error) {
	var output iotsitewise.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *iotsitewise.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) DeleteAccessPolicy(ctx workflow.Context, input *iotsitewise.DeleteAccessPolicyInput) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	var output iotsitewise.DeleteAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.DeleteAccessPolicyInput) *DeleteAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAccessPolicy", input)
	return &DeleteAccessPolicyFuture{Future: future}
}

func (a *stub) DeleteAsset(ctx workflow.Context, input *iotsitewise.DeleteAssetInput) (*iotsitewise.DeleteAssetOutput, error) {
	var output iotsitewise.DeleteAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssetAsync(ctx workflow.Context, input *iotsitewise.DeleteAssetInput) *DeleteAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAsset", input)
	return &DeleteAssetFuture{Future: future}
}

func (a *stub) DeleteAssetModel(ctx workflow.Context, input *iotsitewise.DeleteAssetModelInput) (*iotsitewise.DeleteAssetModelOutput, error) {
	var output iotsitewise.DeleteAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssetModelAsync(ctx workflow.Context, input *iotsitewise.DeleteAssetModelInput) *DeleteAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteAssetModel", input)
	return &DeleteAssetModelFuture{Future: future}
}

func (a *stub) DeleteDashboard(ctx workflow.Context, input *iotsitewise.DeleteDashboardInput) (*iotsitewise.DeleteDashboardOutput, error) {
	var output iotsitewise.DeleteDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDashboardAsync(ctx workflow.Context, input *iotsitewise.DeleteDashboardInput) *DeleteDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteDashboard", input)
	return &DeleteDashboardFuture{Future: future}
}

func (a *stub) DeleteGateway(ctx workflow.Context, input *iotsitewise.DeleteGatewayInput) (*iotsitewise.DeleteGatewayOutput, error) {
	var output iotsitewise.DeleteGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayAsync(ctx workflow.Context, input *iotsitewise.DeleteGatewayInput) *DeleteGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteGateway", input)
	return &DeleteGatewayFuture{Future: future}
}

func (a *stub) DeletePortal(ctx workflow.Context, input *iotsitewise.DeletePortalInput) (*iotsitewise.DeletePortalOutput, error) {
	var output iotsitewise.DeletePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeletePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortalAsync(ctx workflow.Context, input *iotsitewise.DeletePortalInput) *DeletePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeletePortal", input)
	return &DeletePortalFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *iotsitewise.DeleteProjectInput) (*iotsitewise.DeleteProjectOutput, error) {
	var output iotsitewise.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *iotsitewise.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DescribeAccessPolicy(ctx workflow.Context, input *iotsitewise.DescribeAccessPolicyInput) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	var output iotsitewise.DescribeAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.DescribeAccessPolicyInput) *DescribeAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAccessPolicy", input)
	return &DescribeAccessPolicyFuture{Future: future}
}

func (a *stub) DescribeAsset(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) (*iotsitewise.DescribeAssetOutput, error) {
	var output iotsitewise.DescribeAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *DescribeAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAsset", input)
	return &DescribeAssetFuture{Future: future}
}

func (a *stub) DescribeAssetModel(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) (*iotsitewise.DescribeAssetModelOutput, error) {
	var output iotsitewise.DescribeAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetModelAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *DescribeAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetModel", input)
	return &DescribeAssetModelFuture{Future: future}
}

func (a *stub) DescribeAssetProperty(ctx workflow.Context, input *iotsitewise.DescribeAssetPropertyInput) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	var output iotsitewise.DescribeAssetPropertyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetProperty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetPropertyAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetPropertyInput) *DescribeAssetPropertyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeAssetProperty", input)
	return &DescribeAssetPropertyFuture{Future: future}
}

func (a *stub) DescribeDashboard(ctx workflow.Context, input *iotsitewise.DescribeDashboardInput) (*iotsitewise.DescribeDashboardOutput, error) {
	var output iotsitewise.DescribeDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDashboardAsync(ctx workflow.Context, input *iotsitewise.DescribeDashboardInput) *DescribeDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDashboard", input)
	return &DescribeDashboardFuture{Future: future}
}

func (a *stub) DescribeDefaultEncryptionConfiguration(ctx workflow.Context, input *iotsitewise.DescribeDefaultEncryptionConfigurationInput) (*iotsitewise.DescribeDefaultEncryptionConfigurationOutput, error) {
	var output iotsitewise.DescribeDefaultEncryptionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDefaultEncryptionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDefaultEncryptionConfigurationAsync(ctx workflow.Context, input *iotsitewise.DescribeDefaultEncryptionConfigurationInput) *DescribeDefaultEncryptionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeDefaultEncryptionConfiguration", input)
	return &DescribeDefaultEncryptionConfigurationFuture{Future: future}
}

func (a *stub) DescribeGateway(ctx workflow.Context, input *iotsitewise.DescribeGatewayInput) (*iotsitewise.DescribeGatewayOutput, error) {
	var output iotsitewise.DescribeGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayAsync(ctx workflow.Context, input *iotsitewise.DescribeGatewayInput) *DescribeGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGateway", input)
	return &DescribeGatewayFuture{Future: future}
}

func (a *stub) DescribeGatewayCapabilityConfiguration(ctx workflow.Context, input *iotsitewise.DescribeGatewayCapabilityConfigurationInput) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.DescribeGatewayCapabilityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGatewayCapabilityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayCapabilityConfigurationAsync(ctx workflow.Context, input *iotsitewise.DescribeGatewayCapabilityConfigurationInput) *DescribeGatewayCapabilityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeGatewayCapabilityConfiguration", input)
	return &DescribeGatewayCapabilityConfigurationFuture{Future: future}
}

func (a *stub) DescribeLoggingOptions(ctx workflow.Context, input *iotsitewise.DescribeLoggingOptionsInput) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	var output iotsitewise.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotsitewise.DescribeLoggingOptionsInput) *DescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeLoggingOptions", input)
	return &DescribeLoggingOptionsFuture{Future: future}
}

func (a *stub) DescribePortal(ctx workflow.Context, input *iotsitewise.DescribePortalInput) (*iotsitewise.DescribePortalOutput, error) {
	var output iotsitewise.DescribePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortalAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *DescribePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribePortal", input)
	return &DescribePortalFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *iotsitewise.DescribeProjectInput) (*iotsitewise.DescribeProjectOutput, error) {
	var output iotsitewise.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *iotsitewise.DescribeProjectInput) *DescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DescribeProject", input)
	return &DescribeProjectFuture{Future: future}
}

func (a *stub) DisassociateAssets(ctx workflow.Context, input *iotsitewise.DisassociateAssetsInput) (*iotsitewise.DisassociateAssetsOutput, error) {
	var output iotsitewise.DisassociateAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DisassociateAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAssetsAsync(ctx workflow.Context, input *iotsitewise.DisassociateAssetsInput) *DisassociateAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-DisassociateAssets", input)
	return &DisassociateAssetsFuture{Future: future}
}

func (a *stub) GetAssetPropertyAggregates(ctx workflow.Context, input *iotsitewise.GetAssetPropertyAggregatesInput) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	var output iotsitewise.GetAssetPropertyAggregatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyAggregates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyAggregatesAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyAggregatesInput) *GetAssetPropertyAggregatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyAggregates", input)
	return &GetAssetPropertyAggregatesFuture{Future: future}
}

func (a *stub) GetAssetPropertyValue(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueInput) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	var output iotsitewise.GetAssetPropertyValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyValueAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueInput) *GetAssetPropertyValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValue", input)
	return &GetAssetPropertyValueFuture{Future: future}
}

func (a *stub) GetAssetPropertyValueHistory(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueHistoryInput) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	var output iotsitewise.GetAssetPropertyValueHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValueHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssetPropertyValueHistoryAsync(ctx workflow.Context, input *iotsitewise.GetAssetPropertyValueHistoryInput) *GetAssetPropertyValueHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-GetAssetPropertyValueHistory", input)
	return &GetAssetPropertyValueHistoryFuture{Future: future}
}

func (a *stub) ListAccessPolicies(ctx workflow.Context, input *iotsitewise.ListAccessPoliciesInput) (*iotsitewise.ListAccessPoliciesOutput, error) {
	var output iotsitewise.ListAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessPoliciesAsync(ctx workflow.Context, input *iotsitewise.ListAccessPoliciesInput) *ListAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAccessPolicies", input)
	return &ListAccessPoliciesFuture{Future: future}
}

func (a *stub) ListAssetModels(ctx workflow.Context, input *iotsitewise.ListAssetModelsInput) (*iotsitewise.ListAssetModelsOutput, error) {
	var output iotsitewise.ListAssetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetModelsAsync(ctx workflow.Context, input *iotsitewise.ListAssetModelsInput) *ListAssetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetModels", input)
	return &ListAssetModelsFuture{Future: future}
}

func (a *stub) ListAssetRelationships(ctx workflow.Context, input *iotsitewise.ListAssetRelationshipsInput) (*iotsitewise.ListAssetRelationshipsOutput, error) {
	var output iotsitewise.ListAssetRelationshipsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetRelationships", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetRelationshipsAsync(ctx workflow.Context, input *iotsitewise.ListAssetRelationshipsInput) *ListAssetRelationshipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssetRelationships", input)
	return &ListAssetRelationshipsFuture{Future: future}
}

func (a *stub) ListAssets(ctx workflow.Context, input *iotsitewise.ListAssetsInput) (*iotsitewise.ListAssetsOutput, error) {
	var output iotsitewise.ListAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetsAsync(ctx workflow.Context, input *iotsitewise.ListAssetsInput) *ListAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssets", input)
	return &ListAssetsFuture{Future: future}
}

func (a *stub) ListAssociatedAssets(ctx workflow.Context, input *iotsitewise.ListAssociatedAssetsInput) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	var output iotsitewise.ListAssociatedAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssociatedAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedAssetsAsync(ctx workflow.Context, input *iotsitewise.ListAssociatedAssetsInput) *ListAssociatedAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListAssociatedAssets", input)
	return &ListAssociatedAssetsFuture{Future: future}
}

func (a *stub) ListDashboards(ctx workflow.Context, input *iotsitewise.ListDashboardsInput) (*iotsitewise.ListDashboardsOutput, error) {
	var output iotsitewise.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDashboardsAsync(ctx workflow.Context, input *iotsitewise.ListDashboardsInput) *ListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListDashboards", input)
	return &ListDashboardsFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *iotsitewise.ListGatewaysInput) (*iotsitewise.ListGatewaysOutput, error) {
	var output iotsitewise.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *iotsitewise.ListGatewaysInput) *ListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListGateways", input)
	return &ListGatewaysFuture{Future: future}
}

func (a *stub) ListPortals(ctx workflow.Context, input *iotsitewise.ListPortalsInput) (*iotsitewise.ListPortalsOutput, error) {
	var output iotsitewise.ListPortalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListPortals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortalsAsync(ctx workflow.Context, input *iotsitewise.ListPortalsInput) *ListPortalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListPortals", input)
	return &ListPortalsFuture{Future: future}
}

func (a *stub) ListProjectAssets(ctx workflow.Context, input *iotsitewise.ListProjectAssetsInput) (*iotsitewise.ListProjectAssetsOutput, error) {
	var output iotsitewise.ListProjectAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjectAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectAssetsAsync(ctx workflow.Context, input *iotsitewise.ListProjectAssetsInput) *ListProjectAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjectAssets", input)
	return &ListProjectAssetsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *iotsitewise.ListProjectsInput) (*iotsitewise.ListProjectsOutput, error) {
	var output iotsitewise.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *iotsitewise.ListProjectsInput) *ListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListProjects", input)
	return &ListProjectsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotsitewise.ListTagsForResourceInput) (*iotsitewise.ListTagsForResourceOutput, error) {
	var output iotsitewise.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotsitewise.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutDefaultEncryptionConfiguration(ctx workflow.Context, input *iotsitewise.PutDefaultEncryptionConfigurationInput) (*iotsitewise.PutDefaultEncryptionConfigurationOutput, error) {
	var output iotsitewise.PutDefaultEncryptionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutDefaultEncryptionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDefaultEncryptionConfigurationAsync(ctx workflow.Context, input *iotsitewise.PutDefaultEncryptionConfigurationInput) *PutDefaultEncryptionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutDefaultEncryptionConfiguration", input)
	return &PutDefaultEncryptionConfigurationFuture{Future: future}
}

func (a *stub) PutLoggingOptions(ctx workflow.Context, input *iotsitewise.PutLoggingOptionsInput) (*iotsitewise.PutLoggingOptionsOutput, error) {
	var output iotsitewise.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotsitewise.PutLoggingOptionsInput) *PutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-PutLoggingOptions", input)
	return &PutLoggingOptionsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotsitewise.TagResourceInput) (*iotsitewise.TagResourceOutput, error) {
	var output iotsitewise.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotsitewise.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotsitewise.UntagResourceInput) (*iotsitewise.UntagResourceOutput, error) {
	var output iotsitewise.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotsitewise.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccessPolicy(ctx workflow.Context, input *iotsitewise.UpdateAccessPolicyInput) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	var output iotsitewise.UpdateAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccessPolicyAsync(ctx workflow.Context, input *iotsitewise.UpdateAccessPolicyInput) *UpdateAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAccessPolicy", input)
	return &UpdateAccessPolicyFuture{Future: future}
}

func (a *stub) UpdateAsset(ctx workflow.Context, input *iotsitewise.UpdateAssetInput) (*iotsitewise.UpdateAssetOutput, error) {
	var output iotsitewise.UpdateAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetInput) *UpdateAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAsset", input)
	return &UpdateAssetFuture{Future: future}
}

func (a *stub) UpdateAssetModel(ctx workflow.Context, input *iotsitewise.UpdateAssetModelInput) (*iotsitewise.UpdateAssetModelOutput, error) {
	var output iotsitewise.UpdateAssetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetModelAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetModelInput) *UpdateAssetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetModel", input)
	return &UpdateAssetModelFuture{Future: future}
}

func (a *stub) UpdateAssetProperty(ctx workflow.Context, input *iotsitewise.UpdateAssetPropertyInput) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	var output iotsitewise.UpdateAssetPropertyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetProperty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssetPropertyAsync(ctx workflow.Context, input *iotsitewise.UpdateAssetPropertyInput) *UpdateAssetPropertyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateAssetProperty", input)
	return &UpdateAssetPropertyFuture{Future: future}
}

func (a *stub) UpdateDashboard(ctx workflow.Context, input *iotsitewise.UpdateDashboardInput) (*iotsitewise.UpdateDashboardOutput, error) {
	var output iotsitewise.UpdateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDashboardAsync(ctx workflow.Context, input *iotsitewise.UpdateDashboardInput) *UpdateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateDashboard", input)
	return &UpdateDashboardFuture{Future: future}
}

func (a *stub) UpdateGateway(ctx workflow.Context, input *iotsitewise.UpdateGatewayInput) (*iotsitewise.UpdateGatewayOutput, error) {
	var output iotsitewise.UpdateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayAsync(ctx workflow.Context, input *iotsitewise.UpdateGatewayInput) *UpdateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGateway", input)
	return &UpdateGatewayFuture{Future: future}
}

func (a *stub) UpdateGatewayCapabilityConfiguration(ctx workflow.Context, input *iotsitewise.UpdateGatewayCapabilityConfigurationInput) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	var output iotsitewise.UpdateGatewayCapabilityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGatewayCapabilityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayCapabilityConfigurationAsync(ctx workflow.Context, input *iotsitewise.UpdateGatewayCapabilityConfigurationInput) *UpdateGatewayCapabilityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateGatewayCapabilityConfiguration", input)
	return &UpdateGatewayCapabilityConfigurationFuture{Future: future}
}

func (a *stub) UpdatePortal(ctx workflow.Context, input *iotsitewise.UpdatePortalInput) (*iotsitewise.UpdatePortalOutput, error) {
	var output iotsitewise.UpdatePortalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdatePortal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePortalAsync(ctx workflow.Context, input *iotsitewise.UpdatePortalInput) *UpdatePortalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdatePortal", input)
	return &UpdatePortalFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *iotsitewise.UpdateProjectInput) (*iotsitewise.UpdateProjectOutput, error) {
	var output iotsitewise.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *iotsitewise.UpdateProjectInput) *UpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-UpdateProject", input)
	return &UpdateProjectFuture{Future: future}
}

func (a *stub) WaitUntilAssetActive(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetActiveAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetModelActive(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetModelActiveAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetModelNotExists(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetModelNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetModelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetModelNotExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAssetNotExists(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAssetNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribeAssetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilAssetNotExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPortalActive(ctx workflow.Context, input *iotsitewise.DescribePortalInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPortalActiveAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPortalNotExists(ctx workflow.Context, input *iotsitewise.DescribePortalInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPortalNotExistsAsync(ctx workflow.Context, input *iotsitewise.DescribePortalInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotsitewise-WaitUntilPortalNotExists", input)
	return clients.NewVoidFuture(future)
}
