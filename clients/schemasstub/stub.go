// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package schemasstub

import (
	"github.com/aws/aws-sdk-go/service/schemas"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type SchemasCreateDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasCreateDiscovererFuture) Get(ctx workflow.Context) (*schemas.CreateDiscovererOutput, error) {
	var output schemas.CreateDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasCreateRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasCreateRegistryFuture) Get(ctx workflow.Context) (*schemas.CreateRegistryOutput, error) {
	var output schemas.CreateRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasCreateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasCreateSchemaFuture) Get(ctx workflow.Context) (*schemas.CreateSchemaOutput, error) {
	var output schemas.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDeleteDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDeleteDiscovererFuture) Get(ctx workflow.Context) (*schemas.DeleteDiscovererOutput, error) {
	var output schemas.DeleteDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDeleteRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDeleteRegistryFuture) Get(ctx workflow.Context) (*schemas.DeleteRegistryOutput, error) {
	var output schemas.DeleteRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*schemas.DeleteResourcePolicyOutput, error) {
	var output schemas.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDeleteSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDeleteSchemaFuture) Get(ctx workflow.Context) (*schemas.DeleteSchemaOutput, error) {
	var output schemas.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDeleteSchemaVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDeleteSchemaVersionFuture) Get(ctx workflow.Context) (*schemas.DeleteSchemaVersionOutput, error) {
	var output schemas.DeleteSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDescribeCodeBindingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDescribeCodeBindingFuture) Get(ctx workflow.Context) (*schemas.DescribeCodeBindingOutput, error) {
	var output schemas.DescribeCodeBindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDescribeDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDescribeDiscovererFuture) Get(ctx workflow.Context) (*schemas.DescribeDiscovererOutput, error) {
	var output schemas.DescribeDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDescribeRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDescribeRegistryFuture) Get(ctx workflow.Context) (*schemas.DescribeRegistryOutput, error) {
	var output schemas.DescribeRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasDescribeSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasDescribeSchemaFuture) Get(ctx workflow.Context) (*schemas.DescribeSchemaOutput, error) {
	var output schemas.DescribeSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasExportSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasExportSchemaFuture) Get(ctx workflow.Context) (*schemas.ExportSchemaOutput, error) {
	var output schemas.ExportSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasGetCodeBindingSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasGetCodeBindingSourceFuture) Get(ctx workflow.Context) (*schemas.GetCodeBindingSourceOutput, error) {
	var output schemas.GetCodeBindingSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasGetDiscoveredSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasGetDiscoveredSchemaFuture) Get(ctx workflow.Context) (*schemas.GetDiscoveredSchemaOutput, error) {
	var output schemas.GetDiscoveredSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasGetResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasGetResourcePolicyFuture) Get(ctx workflow.Context) (*schemas.GetResourcePolicyOutput, error) {
	var output schemas.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasListDiscoverersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasListDiscoverersFuture) Get(ctx workflow.Context) (*schemas.ListDiscoverersOutput, error) {
	var output schemas.ListDiscoverersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasListRegistriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasListRegistriesFuture) Get(ctx workflow.Context) (*schemas.ListRegistriesOutput, error) {
	var output schemas.ListRegistriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasListSchemaVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasListSchemaVersionsFuture) Get(ctx workflow.Context) (*schemas.ListSchemaVersionsOutput, error) {
	var output schemas.ListSchemaVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasListSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasListSchemasFuture) Get(ctx workflow.Context) (*schemas.ListSchemasOutput, error) {
	var output schemas.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasListTagsForResourceFuture) Get(ctx workflow.Context) (*schemas.ListTagsForResourceOutput, error) {
	var output schemas.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasPutCodeBindingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasPutCodeBindingFuture) Get(ctx workflow.Context) (*schemas.PutCodeBindingOutput, error) {
	var output schemas.PutCodeBindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasPutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasPutResourcePolicyFuture) Get(ctx workflow.Context) (*schemas.PutResourcePolicyOutput, error) {
	var output schemas.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasSearchSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasSearchSchemasFuture) Get(ctx workflow.Context) (*schemas.SearchSchemasOutput, error) {
	var output schemas.SearchSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasStartDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasStartDiscovererFuture) Get(ctx workflow.Context) (*schemas.StartDiscovererOutput, error) {
	var output schemas.StartDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasStopDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasStopDiscovererFuture) Get(ctx workflow.Context) (*schemas.StopDiscovererOutput, error) {
	var output schemas.StopDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasTagResourceFuture) Get(ctx workflow.Context) (*schemas.TagResourceOutput, error) {
	var output schemas.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasUntagResourceFuture) Get(ctx workflow.Context) (*schemas.UntagResourceOutput, error) {
	var output schemas.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasUpdateDiscovererFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasUpdateDiscovererFuture) Get(ctx workflow.Context) (*schemas.UpdateDiscovererOutput, error) {
	var output schemas.UpdateDiscovererOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasUpdateRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasUpdateRegistryFuture) Get(ctx workflow.Context) (*schemas.UpdateRegistryOutput, error) {
	var output schemas.UpdateRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SchemasUpdateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SchemasUpdateSchemaFuture) Get(ctx workflow.Context) (*schemas.UpdateSchemaOutput, error) {
	var output schemas.UpdateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiscoverer(ctx workflow.Context, input *schemas.CreateDiscovererInput) (*schemas.CreateDiscovererOutput, error) {
	var output schemas.CreateDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-CreateDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiscovererAsync(ctx workflow.Context, input *schemas.CreateDiscovererInput) *SchemasCreateDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-CreateDiscoverer", input)
	return &SchemasCreateDiscovererFuture{Future: future}
}

func (a *stub) CreateRegistry(ctx workflow.Context, input *schemas.CreateRegistryInput) (*schemas.CreateRegistryOutput, error) {
	var output schemas.CreateRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-CreateRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegistryAsync(ctx workflow.Context, input *schemas.CreateRegistryInput) *SchemasCreateRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-CreateRegistry", input)
	return &SchemasCreateRegistryFuture{Future: future}
}

func (a *stub) CreateSchema(ctx workflow.Context, input *schemas.CreateSchemaInput) (*schemas.CreateSchemaOutput, error) {
	var output schemas.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSchemaAsync(ctx workflow.Context, input *schemas.CreateSchemaInput) *SchemasCreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-CreateSchema", input)
	return &SchemasCreateSchemaFuture{Future: future}
}

func (a *stub) DeleteDiscoverer(ctx workflow.Context, input *schemas.DeleteDiscovererInput) (*schemas.DeleteDiscovererOutput, error) {
	var output schemas.DeleteDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDiscovererAsync(ctx workflow.Context, input *schemas.DeleteDiscovererInput) *SchemasDeleteDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteDiscoverer", input)
	return &SchemasDeleteDiscovererFuture{Future: future}
}

func (a *stub) DeleteRegistry(ctx workflow.Context, input *schemas.DeleteRegistryInput) (*schemas.DeleteRegistryOutput, error) {
	var output schemas.DeleteRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegistryAsync(ctx workflow.Context, input *schemas.DeleteRegistryInput) *SchemasDeleteRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteRegistry", input)
	return &SchemasDeleteRegistryFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *schemas.DeleteResourcePolicyInput) (*schemas.DeleteResourcePolicyOutput, error) {
	var output schemas.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *schemas.DeleteResourcePolicyInput) *SchemasDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteResourcePolicy", input)
	return &SchemasDeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteSchema(ctx workflow.Context, input *schemas.DeleteSchemaInput) (*schemas.DeleteSchemaOutput, error) {
	var output schemas.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaAsync(ctx workflow.Context, input *schemas.DeleteSchemaInput) *SchemasDeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteSchema", input)
	return &SchemasDeleteSchemaFuture{Future: future}
}

func (a *stub) DeleteSchemaVersion(ctx workflow.Context, input *schemas.DeleteSchemaVersionInput) (*schemas.DeleteSchemaVersionOutput, error) {
	var output schemas.DeleteSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaVersionAsync(ctx workflow.Context, input *schemas.DeleteSchemaVersionInput) *SchemasDeleteSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DeleteSchemaVersion", input)
	return &SchemasDeleteSchemaVersionFuture{Future: future}
}

func (a *stub) DescribeCodeBinding(ctx workflow.Context, input *schemas.DescribeCodeBindingInput) (*schemas.DescribeCodeBindingOutput, error) {
	var output schemas.DescribeCodeBindingOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeCodeBinding", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeBindingAsync(ctx workflow.Context, input *schemas.DescribeCodeBindingInput) *SchemasDescribeCodeBindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeCodeBinding", input)
	return &SchemasDescribeCodeBindingFuture{Future: future}
}

func (a *stub) DescribeDiscoverer(ctx workflow.Context, input *schemas.DescribeDiscovererInput) (*schemas.DescribeDiscovererOutput, error) {
	var output schemas.DescribeDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDiscovererAsync(ctx workflow.Context, input *schemas.DescribeDiscovererInput) *SchemasDescribeDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeDiscoverer", input)
	return &SchemasDescribeDiscovererFuture{Future: future}
}

func (a *stub) DescribeRegistry(ctx workflow.Context, input *schemas.DescribeRegistryInput) (*schemas.DescribeRegistryOutput, error) {
	var output schemas.DescribeRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegistryAsync(ctx workflow.Context, input *schemas.DescribeRegistryInput) *SchemasDescribeRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeRegistry", input)
	return &SchemasDescribeRegistryFuture{Future: future}
}

func (a *stub) DescribeSchema(ctx workflow.Context, input *schemas.DescribeSchemaInput) (*schemas.DescribeSchemaOutput, error) {
	var output schemas.DescribeSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSchemaAsync(ctx workflow.Context, input *schemas.DescribeSchemaInput) *SchemasDescribeSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-DescribeSchema", input)
	return &SchemasDescribeSchemaFuture{Future: future}
}

func (a *stub) ExportSchema(ctx workflow.Context, input *schemas.ExportSchemaInput) (*schemas.ExportSchemaOutput, error) {
	var output schemas.ExportSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ExportSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportSchemaAsync(ctx workflow.Context, input *schemas.ExportSchemaInput) *SchemasExportSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ExportSchema", input)
	return &SchemasExportSchemaFuture{Future: future}
}

func (a *stub) GetCodeBindingSource(ctx workflow.Context, input *schemas.GetCodeBindingSourceInput) (*schemas.GetCodeBindingSourceOutput, error) {
	var output schemas.GetCodeBindingSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-GetCodeBindingSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCodeBindingSourceAsync(ctx workflow.Context, input *schemas.GetCodeBindingSourceInput) *SchemasGetCodeBindingSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-GetCodeBindingSource", input)
	return &SchemasGetCodeBindingSourceFuture{Future: future}
}

func (a *stub) GetDiscoveredSchema(ctx workflow.Context, input *schemas.GetDiscoveredSchemaInput) (*schemas.GetDiscoveredSchemaOutput, error) {
	var output schemas.GetDiscoveredSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-GetDiscoveredSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiscoveredSchemaAsync(ctx workflow.Context, input *schemas.GetDiscoveredSchemaInput) *SchemasGetDiscoveredSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-GetDiscoveredSchema", input)
	return &SchemasGetDiscoveredSchemaFuture{Future: future}
}

func (a *stub) GetResourcePolicy(ctx workflow.Context, input *schemas.GetResourcePolicyInput) (*schemas.GetResourcePolicyOutput, error) {
	var output schemas.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePolicyAsync(ctx workflow.Context, input *schemas.GetResourcePolicyInput) *SchemasGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-GetResourcePolicy", input)
	return &SchemasGetResourcePolicyFuture{Future: future}
}

func (a *stub) ListDiscoverers(ctx workflow.Context, input *schemas.ListDiscoverersInput) (*schemas.ListDiscoverersOutput, error) {
	var output schemas.ListDiscoverersOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ListDiscoverers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDiscoverersAsync(ctx workflow.Context, input *schemas.ListDiscoverersInput) *SchemasListDiscoverersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ListDiscoverers", input)
	return &SchemasListDiscoverersFuture{Future: future}
}

func (a *stub) ListRegistries(ctx workflow.Context, input *schemas.ListRegistriesInput) (*schemas.ListRegistriesOutput, error) {
	var output schemas.ListRegistriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ListRegistries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegistriesAsync(ctx workflow.Context, input *schemas.ListRegistriesInput) *SchemasListRegistriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ListRegistries", input)
	return &SchemasListRegistriesFuture{Future: future}
}

func (a *stub) ListSchemaVersions(ctx workflow.Context, input *schemas.ListSchemaVersionsInput) (*schemas.ListSchemaVersionsOutput, error) {
	var output schemas.ListSchemaVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ListSchemaVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemaVersionsAsync(ctx workflow.Context, input *schemas.ListSchemaVersionsInput) *SchemasListSchemaVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ListSchemaVersions", input)
	return &SchemasListSchemaVersionsFuture{Future: future}
}

func (a *stub) ListSchemas(ctx workflow.Context, input *schemas.ListSchemasInput) (*schemas.ListSchemasOutput, error) {
	var output schemas.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemasAsync(ctx workflow.Context, input *schemas.ListSchemasInput) *SchemasListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ListSchemas", input)
	return &SchemasListSchemasFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *schemas.ListTagsForResourceInput) (*schemas.ListTagsForResourceOutput, error) {
	var output schemas.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *schemas.ListTagsForResourceInput) *SchemasListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-ListTagsForResource", input)
	return &SchemasListTagsForResourceFuture{Future: future}
}

func (a *stub) PutCodeBinding(ctx workflow.Context, input *schemas.PutCodeBindingInput) (*schemas.PutCodeBindingOutput, error) {
	var output schemas.PutCodeBindingOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-PutCodeBinding", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutCodeBindingAsync(ctx workflow.Context, input *schemas.PutCodeBindingInput) *SchemasPutCodeBindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-PutCodeBinding", input)
	return &SchemasPutCodeBindingFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *schemas.PutResourcePolicyInput) (*schemas.PutResourcePolicyOutput, error) {
	var output schemas.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *schemas.PutResourcePolicyInput) *SchemasPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-PutResourcePolicy", input)
	return &SchemasPutResourcePolicyFuture{Future: future}
}

func (a *stub) SearchSchemas(ctx workflow.Context, input *schemas.SearchSchemasInput) (*schemas.SearchSchemasOutput, error) {
	var output schemas.SearchSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-SearchSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchSchemasAsync(ctx workflow.Context, input *schemas.SearchSchemasInput) *SchemasSearchSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-SearchSchemas", input)
	return &SchemasSearchSchemasFuture{Future: future}
}

func (a *stub) StartDiscoverer(ctx workflow.Context, input *schemas.StartDiscovererInput) (*schemas.StartDiscovererOutput, error) {
	var output schemas.StartDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-StartDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDiscovererAsync(ctx workflow.Context, input *schemas.StartDiscovererInput) *SchemasStartDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-StartDiscoverer", input)
	return &SchemasStartDiscovererFuture{Future: future}
}

func (a *stub) StopDiscoverer(ctx workflow.Context, input *schemas.StopDiscovererInput) (*schemas.StopDiscovererOutput, error) {
	var output schemas.StopDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-StopDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDiscovererAsync(ctx workflow.Context, input *schemas.StopDiscovererInput) *SchemasStopDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-StopDiscoverer", input)
	return &SchemasStopDiscovererFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *schemas.TagResourceInput) (*schemas.TagResourceOutput, error) {
	var output schemas.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *schemas.TagResourceInput) *SchemasTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-TagResource", input)
	return &SchemasTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *schemas.UntagResourceInput) (*schemas.UntagResourceOutput, error) {
	var output schemas.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *schemas.UntagResourceInput) *SchemasUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-UntagResource", input)
	return &SchemasUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDiscoverer(ctx workflow.Context, input *schemas.UpdateDiscovererInput) (*schemas.UpdateDiscovererOutput, error) {
	var output schemas.UpdateDiscovererOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateDiscoverer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDiscovererAsync(ctx workflow.Context, input *schemas.UpdateDiscovererInput) *SchemasUpdateDiscovererFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateDiscoverer", input)
	return &SchemasUpdateDiscovererFuture{Future: future}
}

func (a *stub) UpdateRegistry(ctx workflow.Context, input *schemas.UpdateRegistryInput) (*schemas.UpdateRegistryOutput, error) {
	var output schemas.UpdateRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegistryAsync(ctx workflow.Context, input *schemas.UpdateRegistryInput) *SchemasUpdateRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateRegistry", input)
	return &SchemasUpdateRegistryFuture{Future: future}
}

func (a *stub) UpdateSchema(ctx workflow.Context, input *schemas.UpdateSchemaInput) (*schemas.UpdateSchemaOutput, error) {
	var output schemas.UpdateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSchemaAsync(ctx workflow.Context, input *schemas.UpdateSchemaInput) *SchemasUpdateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-UpdateSchema", input)
	return &SchemasUpdateSchemaFuture{Future: future}
}

func (a *stub) WaitUntilCodeBindingExists(ctx workflow.Context, input *schemas.DescribeCodeBindingInput) error {
	return workflow.ExecuteActivity(ctx, "aws-schemas-WaitUntilCodeBindingExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCodeBindingExistsAsync(ctx workflow.Context, input *schemas.DescribeCodeBindingInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-schemas-WaitUntilCodeBindingExists", input)
	return clients.NewVoidFuture(future)
}
