// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotwirelessstub

import (
	"github.com/aws/aws-sdk-go/service/iotwireless"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateAwsAccountWithPartnerAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateAwsAccountWithPartnerAccountFuture) Get(ctx workflow.Context) (*iotwireless.AssociateAwsAccountWithPartnerAccountOutput, error) {
	var output iotwireless.AssociateAwsAccountWithPartnerAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateWirelessDeviceWithThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateWirelessDeviceWithThingFuture) Get(ctx workflow.Context) (*iotwireless.AssociateWirelessDeviceWithThingOutput, error) {
	var output iotwireless.AssociateWirelessDeviceWithThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateWirelessGatewayWithCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateWirelessGatewayWithCertificateFuture) Get(ctx workflow.Context) (*iotwireless.AssociateWirelessGatewayWithCertificateOutput, error) {
	var output iotwireless.AssociateWirelessGatewayWithCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateWirelessGatewayWithThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateWirelessGatewayWithThingFuture) Get(ctx workflow.Context) (*iotwireless.AssociateWirelessGatewayWithThingOutput, error) {
	var output iotwireless.AssociateWirelessGatewayWithThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDestinationFuture) Get(ctx workflow.Context) (*iotwireless.CreateDestinationOutput, error) {
	var output iotwireless.CreateDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeviceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeviceProfileFuture) Get(ctx workflow.Context) (*iotwireless.CreateDeviceProfileOutput, error) {
	var output iotwireless.CreateDeviceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceProfileFuture) Get(ctx workflow.Context) (*iotwireless.CreateServiceProfileOutput, error) {
	var output iotwireless.CreateServiceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.CreateWirelessDeviceOutput, error) {
	var output iotwireless.CreateWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWirelessGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWirelessGatewayFuture) Get(ctx workflow.Context) (*iotwireless.CreateWirelessGatewayOutput, error) {
	var output iotwireless.CreateWirelessGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWirelessGatewayTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWirelessGatewayTaskFuture) Get(ctx workflow.Context) (*iotwireless.CreateWirelessGatewayTaskOutput, error) {
	var output iotwireless.CreateWirelessGatewayTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWirelessGatewayTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWirelessGatewayTaskDefinitionFuture) Get(ctx workflow.Context) (*iotwireless.CreateWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.CreateWirelessGatewayTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDestinationFuture) Get(ctx workflow.Context) (*iotwireless.DeleteDestinationOutput, error) {
	var output iotwireless.DeleteDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeviceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeviceProfileFuture) Get(ctx workflow.Context) (*iotwireless.DeleteDeviceProfileOutput, error) {
	var output iotwireless.DeleteDeviceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceProfileFuture) Get(ctx workflow.Context) (*iotwireless.DeleteServiceProfileOutput, error) {
	var output iotwireless.DeleteServiceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.DeleteWirelessDeviceOutput, error) {
	var output iotwireless.DeleteWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWirelessGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWirelessGatewayFuture) Get(ctx workflow.Context) (*iotwireless.DeleteWirelessGatewayOutput, error) {
	var output iotwireless.DeleteWirelessGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWirelessGatewayTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWirelessGatewayTaskFuture) Get(ctx workflow.Context) (*iotwireless.DeleteWirelessGatewayTaskOutput, error) {
	var output iotwireless.DeleteWirelessGatewayTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWirelessGatewayTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWirelessGatewayTaskDefinitionFuture) Get(ctx workflow.Context) (*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.DeleteWirelessGatewayTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateAwsAccountFromPartnerAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateAwsAccountFromPartnerAccountFuture) Get(ctx workflow.Context) (*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput, error) {
	var output iotwireless.DisassociateAwsAccountFromPartnerAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateWirelessDeviceFromThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateWirelessDeviceFromThingFuture) Get(ctx workflow.Context) (*iotwireless.DisassociateWirelessDeviceFromThingOutput, error) {
	var output iotwireless.DisassociateWirelessDeviceFromThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateWirelessGatewayFromCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateWirelessGatewayFromCertificateFuture) Get(ctx workflow.Context) (*iotwireless.DisassociateWirelessGatewayFromCertificateOutput, error) {
	var output iotwireless.DisassociateWirelessGatewayFromCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateWirelessGatewayFromThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateWirelessGatewayFromThingFuture) Get(ctx workflow.Context) (*iotwireless.DisassociateWirelessGatewayFromThingOutput, error) {
	var output iotwireless.DisassociateWirelessGatewayFromThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDestinationFuture) Get(ctx workflow.Context) (*iotwireless.GetDestinationOutput, error) {
	var output iotwireless.GetDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceProfileFuture) Get(ctx workflow.Context) (*iotwireless.GetDeviceProfileOutput, error) {
	var output iotwireless.GetDeviceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPartnerAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPartnerAccountFuture) Get(ctx workflow.Context) (*iotwireless.GetPartnerAccountOutput, error) {
	var output iotwireless.GetPartnerAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceEndpointFuture) Get(ctx workflow.Context) (*iotwireless.GetServiceEndpointOutput, error) {
	var output iotwireless.GetServiceEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceProfileFuture) Get(ctx workflow.Context) (*iotwireless.GetServiceProfileOutput, error) {
	var output iotwireless.GetServiceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessDeviceOutput, error) {
	var output iotwireless.GetWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessDeviceStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessDeviceStatisticsFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessDeviceStatisticsOutput, error) {
	var output iotwireless.GetWirelessDeviceStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayOutput, error) {
	var output iotwireless.GetWirelessGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayCertificateFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayCertificateOutput, error) {
	var output iotwireless.GetWirelessGatewayCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayFirmwareInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayFirmwareInformationFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayFirmwareInformationOutput, error) {
	var output iotwireless.GetWirelessGatewayFirmwareInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayStatisticsFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayStatisticsOutput, error) {
	var output iotwireless.GetWirelessGatewayStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayTaskFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayTaskOutput, error) {
	var output iotwireless.GetWirelessGatewayTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWirelessGatewayTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWirelessGatewayTaskDefinitionFuture) Get(ctx workflow.Context) (*iotwireless.GetWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.GetWirelessGatewayTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDestinationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDestinationsFuture) Get(ctx workflow.Context) (*iotwireless.ListDestinationsOutput, error) {
	var output iotwireless.ListDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceProfilesFuture) Get(ctx workflow.Context) (*iotwireless.ListDeviceProfilesOutput, error) {
	var output iotwireless.ListDeviceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPartnerAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPartnerAccountsFuture) Get(ctx workflow.Context) (*iotwireless.ListPartnerAccountsOutput, error) {
	var output iotwireless.ListPartnerAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServiceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServiceProfilesFuture) Get(ctx workflow.Context) (*iotwireless.ListServiceProfilesOutput, error) {
	var output iotwireless.ListServiceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iotwireless.ListTagsForResourceOutput, error) {
	var output iotwireless.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWirelessDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWirelessDevicesFuture) Get(ctx workflow.Context) (*iotwireless.ListWirelessDevicesOutput, error) {
	var output iotwireless.ListWirelessDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWirelessGatewayTaskDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWirelessGatewayTaskDefinitionsFuture) Get(ctx workflow.Context) (*iotwireless.ListWirelessGatewayTaskDefinitionsOutput, error) {
	var output iotwireless.ListWirelessGatewayTaskDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWirelessGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWirelessGatewaysFuture) Get(ctx workflow.Context) (*iotwireless.ListWirelessGatewaysOutput, error) {
	var output iotwireless.ListWirelessGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendDataToWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendDataToWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.SendDataToWirelessDeviceOutput, error) {
	var output iotwireless.SendDataToWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iotwireless.TagResourceOutput, error) {
	var output iotwireless.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.TestWirelessDeviceOutput, error) {
	var output iotwireless.TestWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iotwireless.UntagResourceOutput, error) {
	var output iotwireless.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDestinationFuture) Get(ctx workflow.Context) (*iotwireless.UpdateDestinationOutput, error) {
	var output iotwireless.UpdateDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePartnerAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePartnerAccountFuture) Get(ctx workflow.Context) (*iotwireless.UpdatePartnerAccountOutput, error) {
	var output iotwireless.UpdatePartnerAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWirelessDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWirelessDeviceFuture) Get(ctx workflow.Context) (*iotwireless.UpdateWirelessDeviceOutput, error) {
	var output iotwireless.UpdateWirelessDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWirelessGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWirelessGatewayFuture) Get(ctx workflow.Context) (*iotwireless.UpdateWirelessGatewayOutput, error) {
	var output iotwireless.UpdateWirelessGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAwsAccountWithPartnerAccount(ctx workflow.Context, input *iotwireless.AssociateAwsAccountWithPartnerAccountInput) (*iotwireless.AssociateAwsAccountWithPartnerAccountOutput, error) {
	var output iotwireless.AssociateAwsAccountWithPartnerAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateAwsAccountWithPartnerAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAwsAccountWithPartnerAccountAsync(ctx workflow.Context, input *iotwireless.AssociateAwsAccountWithPartnerAccountInput) *AssociateAwsAccountWithPartnerAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateAwsAccountWithPartnerAccount", input)
	return &AssociateAwsAccountWithPartnerAccountFuture{Future: future}
}

func (a *stub) AssociateWirelessDeviceWithThing(ctx workflow.Context, input *iotwireless.AssociateWirelessDeviceWithThingInput) (*iotwireless.AssociateWirelessDeviceWithThingOutput, error) {
	var output iotwireless.AssociateWirelessDeviceWithThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessDeviceWithThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWirelessDeviceWithThingAsync(ctx workflow.Context, input *iotwireless.AssociateWirelessDeviceWithThingInput) *AssociateWirelessDeviceWithThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessDeviceWithThing", input)
	return &AssociateWirelessDeviceWithThingFuture{Future: future}
}

func (a *stub) AssociateWirelessGatewayWithCertificate(ctx workflow.Context, input *iotwireless.AssociateWirelessGatewayWithCertificateInput) (*iotwireless.AssociateWirelessGatewayWithCertificateOutput, error) {
	var output iotwireless.AssociateWirelessGatewayWithCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessGatewayWithCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWirelessGatewayWithCertificateAsync(ctx workflow.Context, input *iotwireless.AssociateWirelessGatewayWithCertificateInput) *AssociateWirelessGatewayWithCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessGatewayWithCertificate", input)
	return &AssociateWirelessGatewayWithCertificateFuture{Future: future}
}

func (a *stub) AssociateWirelessGatewayWithThing(ctx workflow.Context, input *iotwireless.AssociateWirelessGatewayWithThingInput) (*iotwireless.AssociateWirelessGatewayWithThingOutput, error) {
	var output iotwireless.AssociateWirelessGatewayWithThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessGatewayWithThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWirelessGatewayWithThingAsync(ctx workflow.Context, input *iotwireless.AssociateWirelessGatewayWithThingInput) *AssociateWirelessGatewayWithThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-AssociateWirelessGatewayWithThing", input)
	return &AssociateWirelessGatewayWithThingFuture{Future: future}
}

func (a *stub) CreateDestination(ctx workflow.Context, input *iotwireless.CreateDestinationInput) (*iotwireless.CreateDestinationOutput, error) {
	var output iotwireless.CreateDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDestinationAsync(ctx workflow.Context, input *iotwireless.CreateDestinationInput) *CreateDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateDestination", input)
	return &CreateDestinationFuture{Future: future}
}

func (a *stub) CreateDeviceProfile(ctx workflow.Context, input *iotwireless.CreateDeviceProfileInput) (*iotwireless.CreateDeviceProfileOutput, error) {
	var output iotwireless.CreateDeviceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateDeviceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceProfileAsync(ctx workflow.Context, input *iotwireless.CreateDeviceProfileInput) *CreateDeviceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateDeviceProfile", input)
	return &CreateDeviceProfileFuture{Future: future}
}

func (a *stub) CreateServiceProfile(ctx workflow.Context, input *iotwireless.CreateServiceProfileInput) (*iotwireless.CreateServiceProfileOutput, error) {
	var output iotwireless.CreateServiceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateServiceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceProfileAsync(ctx workflow.Context, input *iotwireless.CreateServiceProfileInput) *CreateServiceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateServiceProfile", input)
	return &CreateServiceProfileFuture{Future: future}
}

func (a *stub) CreateWirelessDevice(ctx workflow.Context, input *iotwireless.CreateWirelessDeviceInput) (*iotwireless.CreateWirelessDeviceOutput, error) {
	var output iotwireless.CreateWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.CreateWirelessDeviceInput) *CreateWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessDevice", input)
	return &CreateWirelessDeviceFuture{Future: future}
}

func (a *stub) CreateWirelessGateway(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayInput) (*iotwireless.CreateWirelessGatewayOutput, error) {
	var output iotwireless.CreateWirelessGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWirelessGatewayAsync(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayInput) *CreateWirelessGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGateway", input)
	return &CreateWirelessGatewayFuture{Future: future}
}

func (a *stub) CreateWirelessGatewayTask(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayTaskInput) (*iotwireless.CreateWirelessGatewayTaskOutput, error) {
	var output iotwireless.CreateWirelessGatewayTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGatewayTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWirelessGatewayTaskAsync(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayTaskInput) *CreateWirelessGatewayTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGatewayTask", input)
	return &CreateWirelessGatewayTaskFuture{Future: future}
}

func (a *stub) CreateWirelessGatewayTaskDefinition(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayTaskDefinitionInput) (*iotwireless.CreateWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.CreateWirelessGatewayTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGatewayTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWirelessGatewayTaskDefinitionAsync(ctx workflow.Context, input *iotwireless.CreateWirelessGatewayTaskDefinitionInput) *CreateWirelessGatewayTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-CreateWirelessGatewayTaskDefinition", input)
	return &CreateWirelessGatewayTaskDefinitionFuture{Future: future}
}

func (a *stub) DeleteDestination(ctx workflow.Context, input *iotwireless.DeleteDestinationInput) (*iotwireless.DeleteDestinationOutput, error) {
	var output iotwireless.DeleteDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDestinationAsync(ctx workflow.Context, input *iotwireless.DeleteDestinationInput) *DeleteDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteDestination", input)
	return &DeleteDestinationFuture{Future: future}
}

func (a *stub) DeleteDeviceProfile(ctx workflow.Context, input *iotwireless.DeleteDeviceProfileInput) (*iotwireless.DeleteDeviceProfileOutput, error) {
	var output iotwireless.DeleteDeviceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteDeviceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceProfileAsync(ctx workflow.Context, input *iotwireless.DeleteDeviceProfileInput) *DeleteDeviceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteDeviceProfile", input)
	return &DeleteDeviceProfileFuture{Future: future}
}

func (a *stub) DeleteServiceProfile(ctx workflow.Context, input *iotwireless.DeleteServiceProfileInput) (*iotwireless.DeleteServiceProfileOutput, error) {
	var output iotwireless.DeleteServiceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteServiceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceProfileAsync(ctx workflow.Context, input *iotwireless.DeleteServiceProfileInput) *DeleteServiceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteServiceProfile", input)
	return &DeleteServiceProfileFuture{Future: future}
}

func (a *stub) DeleteWirelessDevice(ctx workflow.Context, input *iotwireless.DeleteWirelessDeviceInput) (*iotwireless.DeleteWirelessDeviceOutput, error) {
	var output iotwireless.DeleteWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.DeleteWirelessDeviceInput) *DeleteWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessDevice", input)
	return &DeleteWirelessDeviceFuture{Future: future}
}

func (a *stub) DeleteWirelessGateway(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayInput) (*iotwireless.DeleteWirelessGatewayOutput, error) {
	var output iotwireless.DeleteWirelessGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWirelessGatewayAsync(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayInput) *DeleteWirelessGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGateway", input)
	return &DeleteWirelessGatewayFuture{Future: future}
}

func (a *stub) DeleteWirelessGatewayTask(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayTaskInput) (*iotwireless.DeleteWirelessGatewayTaskOutput, error) {
	var output iotwireless.DeleteWirelessGatewayTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGatewayTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWirelessGatewayTaskAsync(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayTaskInput) *DeleteWirelessGatewayTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGatewayTask", input)
	return &DeleteWirelessGatewayTaskFuture{Future: future}
}

func (a *stub) DeleteWirelessGatewayTaskDefinition(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayTaskDefinitionInput) (*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.DeleteWirelessGatewayTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGatewayTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWirelessGatewayTaskDefinitionAsync(ctx workflow.Context, input *iotwireless.DeleteWirelessGatewayTaskDefinitionInput) *DeleteWirelessGatewayTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DeleteWirelessGatewayTaskDefinition", input)
	return &DeleteWirelessGatewayTaskDefinitionFuture{Future: future}
}

func (a *stub) DisassociateAwsAccountFromPartnerAccount(ctx workflow.Context, input *iotwireless.DisassociateAwsAccountFromPartnerAccountInput) (*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput, error) {
	var output iotwireless.DisassociateAwsAccountFromPartnerAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateAwsAccountFromPartnerAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAwsAccountFromPartnerAccountAsync(ctx workflow.Context, input *iotwireless.DisassociateAwsAccountFromPartnerAccountInput) *DisassociateAwsAccountFromPartnerAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateAwsAccountFromPartnerAccount", input)
	return &DisassociateAwsAccountFromPartnerAccountFuture{Future: future}
}

func (a *stub) DisassociateWirelessDeviceFromThing(ctx workflow.Context, input *iotwireless.DisassociateWirelessDeviceFromThingInput) (*iotwireless.DisassociateWirelessDeviceFromThingOutput, error) {
	var output iotwireless.DisassociateWirelessDeviceFromThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessDeviceFromThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWirelessDeviceFromThingAsync(ctx workflow.Context, input *iotwireless.DisassociateWirelessDeviceFromThingInput) *DisassociateWirelessDeviceFromThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessDeviceFromThing", input)
	return &DisassociateWirelessDeviceFromThingFuture{Future: future}
}

func (a *stub) DisassociateWirelessGatewayFromCertificate(ctx workflow.Context, input *iotwireless.DisassociateWirelessGatewayFromCertificateInput) (*iotwireless.DisassociateWirelessGatewayFromCertificateOutput, error) {
	var output iotwireless.DisassociateWirelessGatewayFromCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessGatewayFromCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWirelessGatewayFromCertificateAsync(ctx workflow.Context, input *iotwireless.DisassociateWirelessGatewayFromCertificateInput) *DisassociateWirelessGatewayFromCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessGatewayFromCertificate", input)
	return &DisassociateWirelessGatewayFromCertificateFuture{Future: future}
}

func (a *stub) DisassociateWirelessGatewayFromThing(ctx workflow.Context, input *iotwireless.DisassociateWirelessGatewayFromThingInput) (*iotwireless.DisassociateWirelessGatewayFromThingOutput, error) {
	var output iotwireless.DisassociateWirelessGatewayFromThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessGatewayFromThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWirelessGatewayFromThingAsync(ctx workflow.Context, input *iotwireless.DisassociateWirelessGatewayFromThingInput) *DisassociateWirelessGatewayFromThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-DisassociateWirelessGatewayFromThing", input)
	return &DisassociateWirelessGatewayFromThingFuture{Future: future}
}

func (a *stub) GetDestination(ctx workflow.Context, input *iotwireless.GetDestinationInput) (*iotwireless.GetDestinationOutput, error) {
	var output iotwireless.GetDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDestinationAsync(ctx workflow.Context, input *iotwireless.GetDestinationInput) *GetDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetDestination", input)
	return &GetDestinationFuture{Future: future}
}

func (a *stub) GetDeviceProfile(ctx workflow.Context, input *iotwireless.GetDeviceProfileInput) (*iotwireless.GetDeviceProfileOutput, error) {
	var output iotwireless.GetDeviceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetDeviceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceProfileAsync(ctx workflow.Context, input *iotwireless.GetDeviceProfileInput) *GetDeviceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetDeviceProfile", input)
	return &GetDeviceProfileFuture{Future: future}
}

func (a *stub) GetPartnerAccount(ctx workflow.Context, input *iotwireless.GetPartnerAccountInput) (*iotwireless.GetPartnerAccountOutput, error) {
	var output iotwireless.GetPartnerAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetPartnerAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPartnerAccountAsync(ctx workflow.Context, input *iotwireless.GetPartnerAccountInput) *GetPartnerAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetPartnerAccount", input)
	return &GetPartnerAccountFuture{Future: future}
}

func (a *stub) GetServiceEndpoint(ctx workflow.Context, input *iotwireless.GetServiceEndpointInput) (*iotwireless.GetServiceEndpointOutput, error) {
	var output iotwireless.GetServiceEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetServiceEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceEndpointAsync(ctx workflow.Context, input *iotwireless.GetServiceEndpointInput) *GetServiceEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetServiceEndpoint", input)
	return &GetServiceEndpointFuture{Future: future}
}

func (a *stub) GetServiceProfile(ctx workflow.Context, input *iotwireless.GetServiceProfileInput) (*iotwireless.GetServiceProfileOutput, error) {
	var output iotwireless.GetServiceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetServiceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceProfileAsync(ctx workflow.Context, input *iotwireless.GetServiceProfileInput) *GetServiceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetServiceProfile", input)
	return &GetServiceProfileFuture{Future: future}
}

func (a *stub) GetWirelessDevice(ctx workflow.Context, input *iotwireless.GetWirelessDeviceInput) (*iotwireless.GetWirelessDeviceOutput, error) {
	var output iotwireless.GetWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.GetWirelessDeviceInput) *GetWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessDevice", input)
	return &GetWirelessDeviceFuture{Future: future}
}

func (a *stub) GetWirelessDeviceStatistics(ctx workflow.Context, input *iotwireless.GetWirelessDeviceStatisticsInput) (*iotwireless.GetWirelessDeviceStatisticsOutput, error) {
	var output iotwireless.GetWirelessDeviceStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessDeviceStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessDeviceStatisticsAsync(ctx workflow.Context, input *iotwireless.GetWirelessDeviceStatisticsInput) *GetWirelessDeviceStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessDeviceStatistics", input)
	return &GetWirelessDeviceStatisticsFuture{Future: future}
}

func (a *stub) GetWirelessGateway(ctx workflow.Context, input *iotwireless.GetWirelessGatewayInput) (*iotwireless.GetWirelessGatewayOutput, error) {
	var output iotwireless.GetWirelessGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayInput) *GetWirelessGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGateway", input)
	return &GetWirelessGatewayFuture{Future: future}
}

func (a *stub) GetWirelessGatewayCertificate(ctx workflow.Context, input *iotwireless.GetWirelessGatewayCertificateInput) (*iotwireless.GetWirelessGatewayCertificateOutput, error) {
	var output iotwireless.GetWirelessGatewayCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayCertificateAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayCertificateInput) *GetWirelessGatewayCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayCertificate", input)
	return &GetWirelessGatewayCertificateFuture{Future: future}
}

func (a *stub) GetWirelessGatewayFirmwareInformation(ctx workflow.Context, input *iotwireless.GetWirelessGatewayFirmwareInformationInput) (*iotwireless.GetWirelessGatewayFirmwareInformationOutput, error) {
	var output iotwireless.GetWirelessGatewayFirmwareInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayFirmwareInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayFirmwareInformationAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayFirmwareInformationInput) *GetWirelessGatewayFirmwareInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayFirmwareInformation", input)
	return &GetWirelessGatewayFirmwareInformationFuture{Future: future}
}

func (a *stub) GetWirelessGatewayStatistics(ctx workflow.Context, input *iotwireless.GetWirelessGatewayStatisticsInput) (*iotwireless.GetWirelessGatewayStatisticsOutput, error) {
	var output iotwireless.GetWirelessGatewayStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayStatisticsAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayStatisticsInput) *GetWirelessGatewayStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayStatistics", input)
	return &GetWirelessGatewayStatisticsFuture{Future: future}
}

func (a *stub) GetWirelessGatewayTask(ctx workflow.Context, input *iotwireless.GetWirelessGatewayTaskInput) (*iotwireless.GetWirelessGatewayTaskOutput, error) {
	var output iotwireless.GetWirelessGatewayTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayTaskAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayTaskInput) *GetWirelessGatewayTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayTask", input)
	return &GetWirelessGatewayTaskFuture{Future: future}
}

func (a *stub) GetWirelessGatewayTaskDefinition(ctx workflow.Context, input *iotwireless.GetWirelessGatewayTaskDefinitionInput) (*iotwireless.GetWirelessGatewayTaskDefinitionOutput, error) {
	var output iotwireless.GetWirelessGatewayTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWirelessGatewayTaskDefinitionAsync(ctx workflow.Context, input *iotwireless.GetWirelessGatewayTaskDefinitionInput) *GetWirelessGatewayTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-GetWirelessGatewayTaskDefinition", input)
	return &GetWirelessGatewayTaskDefinitionFuture{Future: future}
}

func (a *stub) ListDestinations(ctx workflow.Context, input *iotwireless.ListDestinationsInput) (*iotwireless.ListDestinationsOutput, error) {
	var output iotwireless.ListDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDestinationsAsync(ctx workflow.Context, input *iotwireless.ListDestinationsInput) *ListDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListDestinations", input)
	return &ListDestinationsFuture{Future: future}
}

func (a *stub) ListDeviceProfiles(ctx workflow.Context, input *iotwireless.ListDeviceProfilesInput) (*iotwireless.ListDeviceProfilesOutput, error) {
	var output iotwireless.ListDeviceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListDeviceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceProfilesAsync(ctx workflow.Context, input *iotwireless.ListDeviceProfilesInput) *ListDeviceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListDeviceProfiles", input)
	return &ListDeviceProfilesFuture{Future: future}
}

func (a *stub) ListPartnerAccounts(ctx workflow.Context, input *iotwireless.ListPartnerAccountsInput) (*iotwireless.ListPartnerAccountsOutput, error) {
	var output iotwireless.ListPartnerAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListPartnerAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPartnerAccountsAsync(ctx workflow.Context, input *iotwireless.ListPartnerAccountsInput) *ListPartnerAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListPartnerAccounts", input)
	return &ListPartnerAccountsFuture{Future: future}
}

func (a *stub) ListServiceProfiles(ctx workflow.Context, input *iotwireless.ListServiceProfilesInput) (*iotwireless.ListServiceProfilesOutput, error) {
	var output iotwireless.ListServiceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListServiceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceProfilesAsync(ctx workflow.Context, input *iotwireless.ListServiceProfilesInput) *ListServiceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListServiceProfiles", input)
	return &ListServiceProfilesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotwireless.ListTagsForResourceInput) (*iotwireless.ListTagsForResourceOutput, error) {
	var output iotwireless.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotwireless.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWirelessDevices(ctx workflow.Context, input *iotwireless.ListWirelessDevicesInput) (*iotwireless.ListWirelessDevicesOutput, error) {
	var output iotwireless.ListWirelessDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWirelessDevicesAsync(ctx workflow.Context, input *iotwireless.ListWirelessDevicesInput) *ListWirelessDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessDevices", input)
	return &ListWirelessDevicesFuture{Future: future}
}

func (a *stub) ListWirelessGatewayTaskDefinitions(ctx workflow.Context, input *iotwireless.ListWirelessGatewayTaskDefinitionsInput) (*iotwireless.ListWirelessGatewayTaskDefinitionsOutput, error) {
	var output iotwireless.ListWirelessGatewayTaskDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessGatewayTaskDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWirelessGatewayTaskDefinitionsAsync(ctx workflow.Context, input *iotwireless.ListWirelessGatewayTaskDefinitionsInput) *ListWirelessGatewayTaskDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessGatewayTaskDefinitions", input)
	return &ListWirelessGatewayTaskDefinitionsFuture{Future: future}
}

func (a *stub) ListWirelessGateways(ctx workflow.Context, input *iotwireless.ListWirelessGatewaysInput) (*iotwireless.ListWirelessGatewaysOutput, error) {
	var output iotwireless.ListWirelessGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWirelessGatewaysAsync(ctx workflow.Context, input *iotwireless.ListWirelessGatewaysInput) *ListWirelessGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-ListWirelessGateways", input)
	return &ListWirelessGatewaysFuture{Future: future}
}

func (a *stub) SendDataToWirelessDevice(ctx workflow.Context, input *iotwireless.SendDataToWirelessDeviceInput) (*iotwireless.SendDataToWirelessDeviceOutput, error) {
	var output iotwireless.SendDataToWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-SendDataToWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendDataToWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.SendDataToWirelessDeviceInput) *SendDataToWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-SendDataToWirelessDevice", input)
	return &SendDataToWirelessDeviceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotwireless.TagResourceInput) (*iotwireless.TagResourceOutput, error) {
	var output iotwireless.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotwireless.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TestWirelessDevice(ctx workflow.Context, input *iotwireless.TestWirelessDeviceInput) (*iotwireless.TestWirelessDeviceOutput, error) {
	var output iotwireless.TestWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-TestWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.TestWirelessDeviceInput) *TestWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-TestWirelessDevice", input)
	return &TestWirelessDeviceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotwireless.UntagResourceInput) (*iotwireless.UntagResourceOutput, error) {
	var output iotwireless.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotwireless.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDestination(ctx workflow.Context, input *iotwireless.UpdateDestinationInput) (*iotwireless.UpdateDestinationOutput, error) {
	var output iotwireless.UpdateDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDestinationAsync(ctx workflow.Context, input *iotwireless.UpdateDestinationInput) *UpdateDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateDestination", input)
	return &UpdateDestinationFuture{Future: future}
}

func (a *stub) UpdatePartnerAccount(ctx workflow.Context, input *iotwireless.UpdatePartnerAccountInput) (*iotwireless.UpdatePartnerAccountOutput, error) {
	var output iotwireless.UpdatePartnerAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdatePartnerAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePartnerAccountAsync(ctx workflow.Context, input *iotwireless.UpdatePartnerAccountInput) *UpdatePartnerAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdatePartnerAccount", input)
	return &UpdatePartnerAccountFuture{Future: future}
}

func (a *stub) UpdateWirelessDevice(ctx workflow.Context, input *iotwireless.UpdateWirelessDeviceInput) (*iotwireless.UpdateWirelessDeviceOutput, error) {
	var output iotwireless.UpdateWirelessDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateWirelessDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWirelessDeviceAsync(ctx workflow.Context, input *iotwireless.UpdateWirelessDeviceInput) *UpdateWirelessDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateWirelessDevice", input)
	return &UpdateWirelessDeviceFuture{Future: future}
}

func (a *stub) UpdateWirelessGateway(ctx workflow.Context, input *iotwireless.UpdateWirelessGatewayInput) (*iotwireless.UpdateWirelessGatewayOutput, error) {
	var output iotwireless.UpdateWirelessGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateWirelessGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWirelessGatewayAsync(ctx workflow.Context, input *iotwireless.UpdateWirelessGatewayInput) *UpdateWirelessGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotwireless-UpdateWirelessGateway", input)
	return &UpdateWirelessGatewayFuture{Future: future}
}
