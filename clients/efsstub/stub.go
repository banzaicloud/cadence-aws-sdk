// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package efsstub

import (
	"github.com/aws/aws-sdk-go/service/efs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccessPointFuture) Get(ctx workflow.Context) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFileSystemFuture) Get(ctx workflow.Context) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMountTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMountTargetFuture) Get(ctx workflow.Context) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessPointFuture) Get(ctx workflow.Context) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFileSystemFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMountTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMountTargetFuture) Get(ctx workflow.Context) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccessPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccessPointsFuture) Get(ctx workflow.Context) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFileSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFileSystemsFuture) Get(ctx workflow.Context) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMountTargetSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMountTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMountTargetsFuture) Get(ctx workflow.Context) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyMountTargetSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyMountTargetSecurityGroupsFuture) Get(ctx workflow.Context) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBackupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBackupPolicyFuture) Get(ctx workflow.Context) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutFileSystemPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutFileSystemPolicyFuture) Get(ctx workflow.Context) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLifecycleConfigurationFuture) Get(ctx workflow.Context) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFileSystemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFileSystemFuture) Get(ctx workflow.Context) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPoint(ctx workflow.Context, input *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error) {
	var output efs.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPointAsync(ctx workflow.Context, input *efs.CreateAccessPointInput) *CreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-CreateAccessPoint", input)
	return &CreateAccessPointFuture{Future: future}
}

func (a *stub) CreateFileSystem(ctx workflow.Context, input *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	var output efs.FileSystemDescription
	err := workflow.ExecuteActivity(ctx, "aws-efs-CreateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFileSystemAsync(ctx workflow.Context, input *efs.CreateFileSystemInput) *CreateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-CreateFileSystem", input)
	return &CreateFileSystemFuture{Future: future}
}

func (a *stub) CreateMountTarget(ctx workflow.Context, input *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	var output efs.MountTargetDescription
	err := workflow.ExecuteActivity(ctx, "aws-efs-CreateMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMountTargetAsync(ctx workflow.Context, input *efs.CreateMountTargetInput) *CreateMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-CreateMountTarget", input)
	return &CreateMountTargetFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *efs.CreateTagsInput) (*efs.CreateTagsOutput, error) {
	var output efs.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *efs.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) DeleteAccessPoint(ctx workflow.Context, input *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error) {
	var output efs.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessPointAsync(ctx workflow.Context, input *efs.DeleteAccessPointInput) *DeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DeleteAccessPoint", input)
	return &DeleteAccessPointFuture{Future: future}
}

func (a *stub) DeleteFileSystem(ctx workflow.Context, input *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	var output efs.DeleteFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DeleteFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileSystemAsync(ctx workflow.Context, input *efs.DeleteFileSystemInput) *DeleteFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DeleteFileSystem", input)
	return &DeleteFileSystemFuture{Future: future}
}

func (a *stub) DeleteFileSystemPolicy(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error) {
	var output efs.DeleteFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DeleteFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileSystemPolicyAsync(ctx workflow.Context, input *efs.DeleteFileSystemPolicyInput) *DeleteFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DeleteFileSystemPolicy", input)
	return &DeleteFileSystemPolicyFuture{Future: future}
}

func (a *stub) DeleteMountTarget(ctx workflow.Context, input *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	var output efs.DeleteMountTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DeleteMountTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMountTargetAsync(ctx workflow.Context, input *efs.DeleteMountTargetInput) *DeleteMountTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DeleteMountTarget", input)
	return &DeleteMountTargetFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error) {
	var output efs.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *efs.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DescribeAccessPoints(ctx workflow.Context, input *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error) {
	var output efs.DescribeAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccessPointsAsync(ctx workflow.Context, input *efs.DescribeAccessPointsInput) *DescribeAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeAccessPoints", input)
	return &DescribeAccessPointsFuture{Future: future}
}

func (a *stub) DescribeBackupPolicy(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error) {
	var output efs.DescribeBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupPolicyAsync(ctx workflow.Context, input *efs.DescribeBackupPolicyInput) *DescribeBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeBackupPolicy", input)
	return &DescribeBackupPolicyFuture{Future: future}
}

func (a *stub) DescribeFileSystemPolicy(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error) {
	var output efs.DescribeFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFileSystemPolicyAsync(ctx workflow.Context, input *efs.DescribeFileSystemPolicyInput) *DescribeFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeFileSystemPolicy", input)
	return &DescribeFileSystemPolicyFuture{Future: future}
}

func (a *stub) DescribeFileSystems(ctx workflow.Context, input *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	var output efs.DescribeFileSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeFileSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFileSystemsAsync(ctx workflow.Context, input *efs.DescribeFileSystemsInput) *DescribeFileSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeFileSystems", input)
	return &DescribeFileSystemsFuture{Future: future}
}

func (a *stub) DescribeLifecycleConfiguration(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error) {
	var output efs.DescribeLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLifecycleConfigurationAsync(ctx workflow.Context, input *efs.DescribeLifecycleConfigurationInput) *DescribeLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeLifecycleConfiguration", input)
	return &DescribeLifecycleConfigurationFuture{Future: future}
}

func (a *stub) DescribeMountTargetSecurityGroups(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	var output efs.DescribeMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.DescribeMountTargetSecurityGroupsInput) *DescribeMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeMountTargetSecurityGroups", input)
	return &DescribeMountTargetSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeMountTargets(ctx workflow.Context, input *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	var output efs.DescribeMountTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeMountTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMountTargetsAsync(ctx workflow.Context, input *efs.DescribeMountTargetsInput) *DescribeMountTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeMountTargets", input)
	return &DescribeMountTargetsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error) {
	var output efs.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *efs.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error) {
	var output efs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *efs.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyMountTargetSecurityGroups(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	var output efs.ModifyMountTargetSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-ModifyMountTargetSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyMountTargetSecurityGroupsAsync(ctx workflow.Context, input *efs.ModifyMountTargetSecurityGroupsInput) *ModifyMountTargetSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-ModifyMountTargetSecurityGroups", input)
	return &ModifyMountTargetSecurityGroupsFuture{Future: future}
}

func (a *stub) PutBackupPolicy(ctx workflow.Context, input *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error) {
	var output efs.PutBackupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-PutBackupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBackupPolicyAsync(ctx workflow.Context, input *efs.PutBackupPolicyInput) *PutBackupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-PutBackupPolicy", input)
	return &PutBackupPolicyFuture{Future: future}
}

func (a *stub) PutFileSystemPolicy(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error) {
	var output efs.PutFileSystemPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-PutFileSystemPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutFileSystemPolicyAsync(ctx workflow.Context, input *efs.PutFileSystemPolicyInput) *PutFileSystemPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-PutFileSystemPolicy", input)
	return &PutFileSystemPolicyFuture{Future: future}
}

func (a *stub) PutLifecycleConfiguration(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error) {
	var output efs.PutLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-PutLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecycleConfigurationAsync(ctx workflow.Context, input *efs.PutLifecycleConfigurationInput) *PutLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-PutLifecycleConfiguration", input)
	return &PutLifecycleConfigurationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *efs.TagResourceInput) (*efs.TagResourceOutput, error) {
	var output efs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *efs.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *efs.UntagResourceInput) (*efs.UntagResourceOutput, error) {
	var output efs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *efs.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateFileSystem(ctx workflow.Context, input *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error) {
	var output efs.UpdateFileSystemOutput
	err := workflow.ExecuteActivity(ctx, "aws-efs-UpdateFileSystem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFileSystemAsync(ctx workflow.Context, input *efs.UpdateFileSystemInput) *UpdateFileSystemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-efs-UpdateFileSystem", input)
	return &UpdateFileSystemFuture{Future: future}
}
