// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package applicationinsightsstub

import (
	"github.com/aws/aws-sdk-go/service/applicationinsights"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*applicationinsights.CreateApplicationOutput, error) {
	var output applicationinsights.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateComponentFuture) Get(ctx workflow.Context) (*applicationinsights.CreateComponentOutput, error) {
	var output applicationinsights.CreateComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLogPatternFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLogPatternFuture) Get(ctx workflow.Context) (*applicationinsights.CreateLogPatternOutput, error) {
	var output applicationinsights.CreateLogPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*applicationinsights.DeleteApplicationOutput, error) {
	var output applicationinsights.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteComponentFuture) Get(ctx workflow.Context) (*applicationinsights.DeleteComponentOutput, error) {
	var output applicationinsights.DeleteComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLogPatternFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLogPatternFuture) Get(ctx workflow.Context) (*applicationinsights.DeleteLogPatternOutput, error) {
	var output applicationinsights.DeleteLogPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeApplicationFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeApplicationOutput, error) {
	var output applicationinsights.DescribeApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeComponentFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeComponentOutput, error) {
	var output applicationinsights.DescribeComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeComponentConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeComponentConfigurationFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeComponentConfigurationOutput, error) {
	var output applicationinsights.DescribeComponentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeComponentConfigurationRecommendationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeComponentConfigurationRecommendationFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {
	var output applicationinsights.DescribeComponentConfigurationRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLogPatternFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLogPatternFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeLogPatternOutput, error) {
	var output applicationinsights.DescribeLogPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeObservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeObservationFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeObservationOutput, error) {
	var output applicationinsights.DescribeObservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProblemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProblemFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeProblemOutput, error) {
	var output applicationinsights.DescribeProblemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProblemObservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProblemObservationsFuture) Get(ctx workflow.Context) (*applicationinsights.DescribeProblemObservationsOutput, error) {
	var output applicationinsights.DescribeProblemObservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*applicationinsights.ListApplicationsOutput, error) {
	var output applicationinsights.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListComponentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListComponentsFuture) Get(ctx workflow.Context) (*applicationinsights.ListComponentsOutput, error) {
	var output applicationinsights.ListComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConfigurationHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConfigurationHistoryFuture) Get(ctx workflow.Context) (*applicationinsights.ListConfigurationHistoryOutput, error) {
	var output applicationinsights.ListConfigurationHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLogPatternSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLogPatternSetsFuture) Get(ctx workflow.Context) (*applicationinsights.ListLogPatternSetsOutput, error) {
	var output applicationinsights.ListLogPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLogPatternsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLogPatternsFuture) Get(ctx workflow.Context) (*applicationinsights.ListLogPatternsOutput, error) {
	var output applicationinsights.ListLogPatternsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProblemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProblemsFuture) Get(ctx workflow.Context) (*applicationinsights.ListProblemsOutput, error) {
	var output applicationinsights.ListProblemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*applicationinsights.ListTagsForResourceOutput, error) {
	var output applicationinsights.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*applicationinsights.TagResourceOutput, error) {
	var output applicationinsights.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*applicationinsights.UntagResourceOutput, error) {
	var output applicationinsights.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*applicationinsights.UpdateApplicationOutput, error) {
	var output applicationinsights.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateComponentFuture) Get(ctx workflow.Context) (*applicationinsights.UpdateComponentOutput, error) {
	var output applicationinsights.UpdateComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateComponentConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateComponentConfigurationFuture) Get(ctx workflow.Context) (*applicationinsights.UpdateComponentConfigurationOutput, error) {
	var output applicationinsights.UpdateComponentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLogPatternFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLogPatternFuture) Get(ctx workflow.Context) (*applicationinsights.UpdateLogPatternOutput, error) {
	var output applicationinsights.UpdateLogPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplication(ctx workflow.Context, input *applicationinsights.CreateApplicationInput) (*applicationinsights.CreateApplicationOutput, error) {
	var output applicationinsights.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *applicationinsights.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateComponent(ctx workflow.Context, input *applicationinsights.CreateComponentInput) (*applicationinsights.CreateComponentOutput, error) {
	var output applicationinsights.CreateComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateComponentAsync(ctx workflow.Context, input *applicationinsights.CreateComponentInput) *CreateComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateComponent", input)
	return &CreateComponentFuture{Future: future}
}

func (a *stub) CreateLogPattern(ctx workflow.Context, input *applicationinsights.CreateLogPatternInput) (*applicationinsights.CreateLogPatternOutput, error) {
	var output applicationinsights.CreateLogPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateLogPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLogPatternAsync(ctx workflow.Context, input *applicationinsights.CreateLogPatternInput) *CreateLogPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-CreateLogPattern", input)
	return &CreateLogPatternFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *applicationinsights.DeleteApplicationInput) (*applicationinsights.DeleteApplicationOutput, error) {
	var output applicationinsights.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *applicationinsights.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteComponent(ctx workflow.Context, input *applicationinsights.DeleteComponentInput) (*applicationinsights.DeleteComponentOutput, error) {
	var output applicationinsights.DeleteComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteComponentAsync(ctx workflow.Context, input *applicationinsights.DeleteComponentInput) *DeleteComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteComponent", input)
	return &DeleteComponentFuture{Future: future}
}

func (a *stub) DeleteLogPattern(ctx workflow.Context, input *applicationinsights.DeleteLogPatternInput) (*applicationinsights.DeleteLogPatternOutput, error) {
	var output applicationinsights.DeleteLogPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteLogPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLogPatternAsync(ctx workflow.Context, input *applicationinsights.DeleteLogPatternInput) *DeleteLogPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DeleteLogPattern", input)
	return &DeleteLogPatternFuture{Future: future}
}

func (a *stub) DescribeApplication(ctx workflow.Context, input *applicationinsights.DescribeApplicationInput) (*applicationinsights.DescribeApplicationOutput, error) {
	var output applicationinsights.DescribeApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationAsync(ctx workflow.Context, input *applicationinsights.DescribeApplicationInput) *DescribeApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeApplication", input)
	return &DescribeApplicationFuture{Future: future}
}

func (a *stub) DescribeComponent(ctx workflow.Context, input *applicationinsights.DescribeComponentInput) (*applicationinsights.DescribeComponentOutput, error) {
	var output applicationinsights.DescribeComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComponentAsync(ctx workflow.Context, input *applicationinsights.DescribeComponentInput) *DescribeComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponent", input)
	return &DescribeComponentFuture{Future: future}
}

func (a *stub) DescribeComponentConfiguration(ctx workflow.Context, input *applicationinsights.DescribeComponentConfigurationInput) (*applicationinsights.DescribeComponentConfigurationOutput, error) {
	var output applicationinsights.DescribeComponentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComponentConfigurationAsync(ctx workflow.Context, input *applicationinsights.DescribeComponentConfigurationInput) *DescribeComponentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponentConfiguration", input)
	return &DescribeComponentConfigurationFuture{Future: future}
}

func (a *stub) DescribeComponentConfigurationRecommendation(ctx workflow.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {
	var output applicationinsights.DescribeComponentConfigurationRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponentConfigurationRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComponentConfigurationRecommendationAsync(ctx workflow.Context, input *applicationinsights.DescribeComponentConfigurationRecommendationInput) *DescribeComponentConfigurationRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeComponentConfigurationRecommendation", input)
	return &DescribeComponentConfigurationRecommendationFuture{Future: future}
}

func (a *stub) DescribeLogPattern(ctx workflow.Context, input *applicationinsights.DescribeLogPatternInput) (*applicationinsights.DescribeLogPatternOutput, error) {
	var output applicationinsights.DescribeLogPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeLogPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLogPatternAsync(ctx workflow.Context, input *applicationinsights.DescribeLogPatternInput) *DescribeLogPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeLogPattern", input)
	return &DescribeLogPatternFuture{Future: future}
}

func (a *stub) DescribeObservation(ctx workflow.Context, input *applicationinsights.DescribeObservationInput) (*applicationinsights.DescribeObservationOutput, error) {
	var output applicationinsights.DescribeObservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeObservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeObservationAsync(ctx workflow.Context, input *applicationinsights.DescribeObservationInput) *DescribeObservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeObservation", input)
	return &DescribeObservationFuture{Future: future}
}

func (a *stub) DescribeProblem(ctx workflow.Context, input *applicationinsights.DescribeProblemInput) (*applicationinsights.DescribeProblemOutput, error) {
	var output applicationinsights.DescribeProblemOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeProblem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProblemAsync(ctx workflow.Context, input *applicationinsights.DescribeProblemInput) *DescribeProblemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeProblem", input)
	return &DescribeProblemFuture{Future: future}
}

func (a *stub) DescribeProblemObservations(ctx workflow.Context, input *applicationinsights.DescribeProblemObservationsInput) (*applicationinsights.DescribeProblemObservationsOutput, error) {
	var output applicationinsights.DescribeProblemObservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeProblemObservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProblemObservationsAsync(ctx workflow.Context, input *applicationinsights.DescribeProblemObservationsInput) *DescribeProblemObservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-DescribeProblemObservations", input)
	return &DescribeProblemObservationsFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *applicationinsights.ListApplicationsInput) (*applicationinsights.ListApplicationsOutput, error) {
	var output applicationinsights.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *applicationinsights.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) ListComponents(ctx workflow.Context, input *applicationinsights.ListComponentsInput) (*applicationinsights.ListComponentsOutput, error) {
	var output applicationinsights.ListComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComponentsAsync(ctx workflow.Context, input *applicationinsights.ListComponentsInput) *ListComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListComponents", input)
	return &ListComponentsFuture{Future: future}
}

func (a *stub) ListConfigurationHistory(ctx workflow.Context, input *applicationinsights.ListConfigurationHistoryInput) (*applicationinsights.ListConfigurationHistoryOutput, error) {
	var output applicationinsights.ListConfigurationHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListConfigurationHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConfigurationHistoryAsync(ctx workflow.Context, input *applicationinsights.ListConfigurationHistoryInput) *ListConfigurationHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListConfigurationHistory", input)
	return &ListConfigurationHistoryFuture{Future: future}
}

func (a *stub) ListLogPatternSets(ctx workflow.Context, input *applicationinsights.ListLogPatternSetsInput) (*applicationinsights.ListLogPatternSetsOutput, error) {
	var output applicationinsights.ListLogPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListLogPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLogPatternSetsAsync(ctx workflow.Context, input *applicationinsights.ListLogPatternSetsInput) *ListLogPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListLogPatternSets", input)
	return &ListLogPatternSetsFuture{Future: future}
}

func (a *stub) ListLogPatterns(ctx workflow.Context, input *applicationinsights.ListLogPatternsInput) (*applicationinsights.ListLogPatternsOutput, error) {
	var output applicationinsights.ListLogPatternsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListLogPatterns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLogPatternsAsync(ctx workflow.Context, input *applicationinsights.ListLogPatternsInput) *ListLogPatternsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListLogPatterns", input)
	return &ListLogPatternsFuture{Future: future}
}

func (a *stub) ListProblems(ctx workflow.Context, input *applicationinsights.ListProblemsInput) (*applicationinsights.ListProblemsOutput, error) {
	var output applicationinsights.ListProblemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListProblems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProblemsAsync(ctx workflow.Context, input *applicationinsights.ListProblemsInput) *ListProblemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListProblems", input)
	return &ListProblemsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *applicationinsights.ListTagsForResourceInput) (*applicationinsights.ListTagsForResourceOutput, error) {
	var output applicationinsights.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *applicationinsights.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *applicationinsights.TagResourceInput) (*applicationinsights.TagResourceOutput, error) {
	var output applicationinsights.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *applicationinsights.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *applicationinsights.UntagResourceInput) (*applicationinsights.UntagResourceOutput, error) {
	var output applicationinsights.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *applicationinsights.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *applicationinsights.UpdateApplicationInput) (*applicationinsights.UpdateApplicationOutput, error) {
	var output applicationinsights.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *applicationinsights.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateComponent(ctx workflow.Context, input *applicationinsights.UpdateComponentInput) (*applicationinsights.UpdateComponentOutput, error) {
	var output applicationinsights.UpdateComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateComponentAsync(ctx workflow.Context, input *applicationinsights.UpdateComponentInput) *UpdateComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateComponent", input)
	return &UpdateComponentFuture{Future: future}
}

func (a *stub) UpdateComponentConfiguration(ctx workflow.Context, input *applicationinsights.UpdateComponentConfigurationInput) (*applicationinsights.UpdateComponentConfigurationOutput, error) {
	var output applicationinsights.UpdateComponentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateComponentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateComponentConfigurationAsync(ctx workflow.Context, input *applicationinsights.UpdateComponentConfigurationInput) *UpdateComponentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateComponentConfiguration", input)
	return &UpdateComponentConfigurationFuture{Future: future}
}

func (a *stub) UpdateLogPattern(ctx workflow.Context, input *applicationinsights.UpdateLogPatternInput) (*applicationinsights.UpdateLogPatternOutput, error) {
	var output applicationinsights.UpdateLogPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateLogPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLogPatternAsync(ctx workflow.Context, input *applicationinsights.UpdateLogPatternInput) *UpdateLogPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationinsights-UpdateLogPattern", input)
	return &UpdateLogPatternFuture{Future: future}
}
