// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotfleethubstub

import (
	"github.com/aws/aws-sdk-go/service/iotfleethub"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*iotfleethub.CreateApplicationOutput, error) {
	var output iotfleethub.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*iotfleethub.DeleteApplicationOutput, error) {
	var output iotfleethub.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeApplicationFuture) Get(ctx workflow.Context) (*iotfleethub.DescribeApplicationOutput, error) {
	var output iotfleethub.DescribeApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*iotfleethub.ListApplicationsOutput, error) {
	var output iotfleethub.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iotfleethub.ListTagsForResourceOutput, error) {
	var output iotfleethub.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iotfleethub.TagResourceOutput, error) {
	var output iotfleethub.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iotfleethub.UntagResourceOutput, error) {
	var output iotfleethub.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*iotfleethub.UpdateApplicationOutput, error) {
	var output iotfleethub.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplication(ctx workflow.Context, input *iotfleethub.CreateApplicationInput) (*iotfleethub.CreateApplicationOutput, error) {
	var output iotfleethub.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *iotfleethub.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *iotfleethub.DeleteApplicationInput) (*iotfleethub.DeleteApplicationOutput, error) {
	var output iotfleethub.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *iotfleethub.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DescribeApplication(ctx workflow.Context, input *iotfleethub.DescribeApplicationInput) (*iotfleethub.DescribeApplicationOutput, error) {
	var output iotfleethub.DescribeApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-DescribeApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationAsync(ctx workflow.Context, input *iotfleethub.DescribeApplicationInput) *DescribeApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-DescribeApplication", input)
	return &DescribeApplicationFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *iotfleethub.ListApplicationsInput) (*iotfleethub.ListApplicationsOutput, error) {
	var output iotfleethub.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *iotfleethub.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotfleethub.ListTagsForResourceInput) (*iotfleethub.ListTagsForResourceOutput, error) {
	var output iotfleethub.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotfleethub.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotfleethub.TagResourceInput) (*iotfleethub.TagResourceOutput, error) {
	var output iotfleethub.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotfleethub.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotfleethub.UntagResourceInput) (*iotfleethub.UntagResourceOutput, error) {
	var output iotfleethub.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotfleethub.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *iotfleethub.UpdateApplicationInput) (*iotfleethub.UpdateApplicationOutput, error) {
	var output iotfleethub.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotfleethub-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *iotfleethub.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotfleethub-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}
