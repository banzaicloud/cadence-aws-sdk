// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cognitoidentityproviderstub

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddCustomAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddCustomAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminAddUserToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminAddUserToGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminConfirmSignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminCreateUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminDeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminDeleteUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminDeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminDisableProviderForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminDisableProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminDisableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminDisableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminEnableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminEnableUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminForgetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminGetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminGetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminGetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminGetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminInitiateAuthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminInitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminLinkProviderForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminLinkProviderForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminListGroupsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminListGroupsForUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminListUserAuthEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminListUserAuthEventsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminRemoveUserFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminRemoveUserFromGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminResetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminResetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminRespondToAuthChallengeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminRespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminSetUserMFAPreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminSetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminSetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminSetUserPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminSetUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminSetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminUpdateAuthEventFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminUpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminUpdateDeviceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminUpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminUpdateUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminUpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdminUserGlobalSignOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdminUserGlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSoftwareTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChangePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ChangePasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmForgotPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmSignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmSignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRiskConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForgetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ForgetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForgotPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ForgotPasswordFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCSVHeaderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCSVHeaderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityProviderByIdentifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityProviderByIdentifierFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSigningCertificateFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUICustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserAttributeVerificationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserAttributeVerificationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserPoolMfaConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GlobalSignOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GlobalSignOutFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InitiateAuthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InitiateAuthFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevicesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIdentityProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIdentityProvidersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceServersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserImportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserImportJobsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserPoolClientsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserPoolClientsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserPoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserPoolsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersInGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersInGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResendConfirmationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResendConfirmationCodeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RespondToAuthChallengeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RespondToAuthChallengeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetRiskConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetRiskConfigurationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetUICustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetUICustomizationFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetUserMFAPreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetUserMFAPreferenceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetUserPoolMfaConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetUserPoolMfaConfigFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetUserSettingsFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SignUpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SignUpFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopUserImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopUserImportJobFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAuthEventFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAuthEventFeedbackFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeviceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeviceStatusFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIdentityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIdentityProviderFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceServerFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserAttributesFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserPoolFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserPoolClientFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserPoolClientFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserPoolDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserPoolDomainFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifySoftwareTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifySoftwareTokenFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyUserAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyUserAttributeFuture) Get(ctx workflow.Context) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddCustomAttributes(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	var output cognitoidentityprovider.AddCustomAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AddCustomAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddCustomAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AddCustomAttributesInput) *AddCustomAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AddCustomAttributes", input)
	return &AddCustomAttributesFuture{Future: future}
}

func (a *stub) AdminAddUserToGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	var output cognitoidentityprovider.AdminAddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminAddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminAddUserToGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminAddUserToGroupInput) *AdminAddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminAddUserToGroup", input)
	return &AdminAddUserToGroupFuture{Future: future}
}

func (a *stub) AdminConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.AdminConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminConfirmSignUpInput) *AdminConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminConfirmSignUp", input)
	return &AdminConfirmSignUpFuture{Future: future}
}

func (a *stub) AdminCreateUser(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	var output cognitoidentityprovider.AdminCreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminCreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminCreateUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminCreateUserInput) *AdminCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminCreateUser", input)
	return &AdminCreateUserFuture{Future: future}
}

func (a *stub) AdminDeleteUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminDeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserInput) *AdminDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDeleteUser", input)
	return &AdminDeleteUserFuture{Future: future}
}

func (a *stub) AdminDeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminDeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminDeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDeleteUserAttributesInput) *AdminDeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDeleteUserAttributes", input)
	return &AdminDeleteUserAttributesFuture{Future: future}
}

func (a *stub) AdminDisableProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDisableProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminDisableProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableProviderForUserInput) *AdminDisableProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDisableProviderForUser", input)
	return &AdminDisableProviderForUserFuture{Future: future}
}

func (a *stub) AdminDisableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	var output cognitoidentityprovider.AdminDisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminDisableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminDisableUserInput) *AdminDisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminDisableUser", input)
	return &AdminDisableUserFuture{Future: future}
}

func (a *stub) AdminEnableUser(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	var output cognitoidentityprovider.AdminEnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminEnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminEnableUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminEnableUserInput) *AdminEnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminEnableUser", input)
	return &AdminEnableUserFuture{Future: future}
}

func (a *stub) AdminForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminForgetDeviceInput) *AdminForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminForgetDevice", input)
	return &AdminForgetDeviceFuture{Future: future}
}

func (a *stub) AdminGetDevice(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	var output cognitoidentityprovider.AdminGetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminGetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminGetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetDeviceInput) *AdminGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminGetDevice", input)
	return &AdminGetDeviceFuture{Future: future}
}

func (a *stub) AdminGetUser(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	var output cognitoidentityprovider.AdminGetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminGetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminGetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminGetUserInput) *AdminGetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminGetUser", input)
	return &AdminGetUserFuture{Future: future}
}

func (a *stub) AdminInitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	var output cognitoidentityprovider.AdminInitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminInitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminInitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminInitiateAuthInput) *AdminInitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminInitiateAuth", input)
	return &AdminInitiateAuthFuture{Future: future}
}

func (a *stub) AdminLinkProviderForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	var output cognitoidentityprovider.AdminLinkProviderForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminLinkProviderForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminLinkProviderForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminLinkProviderForUserInput) *AdminLinkProviderForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminLinkProviderForUser", input)
	return &AdminLinkProviderForUserFuture{Future: future}
}

func (a *stub) AdminListDevices(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	var output cognitoidentityprovider.AdminListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListDevicesInput) *AdminListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListDevices", input)
	return &AdminListDevicesFuture{Future: future}
}

func (a *stub) AdminListGroupsForUser(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	var output cognitoidentityprovider.AdminListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminListGroupsForUserAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListGroupsForUserInput) *AdminListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListGroupsForUser", input)
	return &AdminListGroupsForUserFuture{Future: future}
}

func (a *stub) AdminListUserAuthEvents(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	var output cognitoidentityprovider.AdminListUserAuthEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListUserAuthEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminListUserAuthEventsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminListUserAuthEventsInput) *AdminListUserAuthEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminListUserAuthEvents", input)
	return &AdminListUserAuthEventsFuture{Future: future}
}

func (a *stub) AdminRemoveUserFromGroup(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	var output cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminRemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminRemoveUserFromGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRemoveUserFromGroupInput) *AdminRemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminRemoveUserFromGroup", input)
	return &AdminRemoveUserFromGroupFuture{Future: future}
}

func (a *stub) AdminResetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminResetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminResetUserPasswordInput) *AdminResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminResetUserPassword", input)
	return &AdminResetUserPasswordFuture{Future: future}
}

func (a *stub) AdminRespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminRespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminRespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminRespondToAuthChallengeInput) *AdminRespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminRespondToAuthChallenge", input)
	return &AdminRespondToAuthChallengeFuture{Future: future}
}

func (a *stub) AdminSetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminSetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *AdminSetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserMFAPreference", input)
	return &AdminSetUserMFAPreferenceFuture{Future: future}
}

func (a *stub) AdminSetUserPassword(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	var output cognitoidentityprovider.AdminSetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminSetUserPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserPasswordInput) *AdminSetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserPassword", input)
	return &AdminSetUserPasswordFuture{Future: future}
}

func (a *stub) AdminSetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	var output cognitoidentityprovider.AdminSetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminSetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminSetUserSettingsInput) *AdminSetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminSetUserSettings", input)
	return &AdminSetUserSettingsFuture{Future: future}
}

func (a *stub) AdminUpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminUpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *AdminUpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateAuthEventFeedback", input)
	return &AdminUpdateAuthEventFeedbackFuture{Future: future}
}

func (a *stub) AdminUpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminUpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateDeviceStatusInput) *AdminUpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateDeviceStatus", input)
	return &AdminUpdateDeviceStatusFuture{Future: future}
}

func (a *stub) AdminUpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.AdminUpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminUpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUpdateUserAttributesInput) *AdminUpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUpdateUserAttributes", input)
	return &AdminUpdateUserAttributesFuture{Future: future}
}

func (a *stub) AdminUserGlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	var output cognitoidentityprovider.AdminUserGlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUserGlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdminUserGlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.AdminUserGlobalSignOutInput) *AdminUserGlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AdminUserGlobalSignOut", input)
	return &AdminUserGlobalSignOutFuture{Future: future}
}

func (a *stub) AssociateSoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	var output cognitoidentityprovider.AssociateSoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AssociateSoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.AssociateSoftwareTokenInput) *AssociateSoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-AssociateSoftwareToken", input)
	return &AssociateSoftwareTokenFuture{Future: future}
}

func (a *stub) ChangePassword(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	var output cognitoidentityprovider.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangePasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ChangePasswordInput) *ChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ChangePassword", input)
	return &ChangePasswordFuture{Future: future}
}

func (a *stub) ConfirmDevice(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	var output cognitoidentityprovider.ConfirmDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmDeviceInput) *ConfirmDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmDevice", input)
	return &ConfirmDeviceFuture{Future: future}
}

func (a *stub) ConfirmForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ConfirmForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmForgotPasswordInput) *ConfirmForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmForgotPassword", input)
	return &ConfirmForgotPasswordFuture{Future: future}
}

func (a *stub) ConfirmSignUp(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	var output cognitoidentityprovider.ConfirmSignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmSignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmSignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.ConfirmSignUpInput) *ConfirmSignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ConfirmSignUp", input)
	return &ConfirmSignUpFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error) {
	var output cognitoidentityprovider.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.CreateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateIdentityProviderInput) *CreateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateIdentityProvider", input)
	return &CreateIdentityProviderFuture{Future: future}
}

func (a *stub) CreateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	var output cognitoidentityprovider.CreateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateResourceServerInput) *CreateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateResourceServer", input)
	return &CreateResourceServerFuture{Future: future}
}

func (a *stub) CreateUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	var output cognitoidentityprovider.CreateUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserImportJobInput) *CreateUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserImportJob", input)
	return &CreateUserImportJobFuture{Future: future}
}

func (a *stub) CreateUserPool(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolInput) *CreateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPool", input)
	return &CreateUserPoolFuture{Future: future}
}

func (a *stub) CreateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolClientInput) *CreateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPoolClient", input)
	return &CreateUserPoolClientFuture{Future: future}
}

func (a *stub) CreateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.CreateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.CreateUserPoolDomainInput) *CreateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-CreateUserPoolDomain", input)
	return &CreateUserPoolDomainFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	var output cognitoidentityprovider.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DeleteIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteIdentityProviderInput) *DeleteIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteIdentityProvider", input)
	return &DeleteIdentityProviderFuture{Future: future}
}

func (a *stub) DeleteResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	var output cognitoidentityprovider.DeleteResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteResourceServerInput) *DeleteResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteResourceServer", input)
	return &DeleteResourceServerFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error) {
	var output cognitoidentityprovider.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DeleteUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	var output cognitoidentityprovider.DeleteUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserAttributesInput) *DeleteUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserAttributes", input)
	return &DeleteUserAttributesFuture{Future: future}
}

func (a *stub) DeleteUserPool(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolInput) *DeleteUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPool", input)
	return &DeleteUserPoolFuture{Future: future}
}

func (a *stub) DeleteUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolClientInput) *DeleteUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPoolClient", input)
	return &DeleteUserPoolClientFuture{Future: future}
}

func (a *stub) DeleteUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DeleteUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DeleteUserPoolDomainInput) *DeleteUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DeleteUserPoolDomain", input)
	return &DeleteUserPoolDomainFuture{Future: future}
}

func (a *stub) DescribeIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	var output cognitoidentityprovider.DescribeIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeIdentityProviderInput) *DescribeIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeIdentityProvider", input)
	return &DescribeIdentityProviderFuture{Future: future}
}

func (a *stub) DescribeResourceServer(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	var output cognitoidentityprovider.DescribeResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeResourceServerInput) *DescribeResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeResourceServer", input)
	return &DescribeResourceServerFuture{Future: future}
}

func (a *stub) DescribeRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.DescribeRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeRiskConfigurationInput) *DescribeRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeRiskConfiguration", input)
	return &DescribeRiskConfigurationFuture{Future: future}
}

func (a *stub) DescribeUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	var output cognitoidentityprovider.DescribeUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserImportJobInput) *DescribeUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserImportJob", input)
	return &DescribeUserImportJobFuture{Future: future}
}

func (a *stub) DescribeUserPool(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolInput) *DescribeUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPool", input)
	return &DescribeUserPoolFuture{Future: future}
}

func (a *stub) DescribeUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolClientInput) *DescribeUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPoolClient", input)
	return &DescribeUserPoolClientFuture{Future: future}
}

func (a *stub) DescribeUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.DescribeUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.DescribeUserPoolDomainInput) *DescribeUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-DescribeUserPoolDomain", input)
	return &DescribeUserPoolDomainFuture{Future: future}
}

func (a *stub) ForgetDevice(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	var output cognitoidentityprovider.ForgetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ForgetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ForgetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgetDeviceInput) *ForgetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ForgetDevice", input)
	return &ForgetDeviceFuture{Future: future}
}

func (a *stub) ForgotPassword(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	var output cognitoidentityprovider.ForgotPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ForgotPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ForgotPasswordAsync(ctx workflow.Context, input *cognitoidentityprovider.ForgotPasswordInput) *ForgotPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ForgotPassword", input)
	return &ForgotPasswordFuture{Future: future}
}

func (a *stub) GetCSVHeader(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	var output cognitoidentityprovider.GetCSVHeaderOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetCSVHeader", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCSVHeaderAsync(ctx workflow.Context, input *cognitoidentityprovider.GetCSVHeaderInput) *GetCSVHeaderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetCSVHeader", input)
	return &GetCSVHeaderFuture{Future: future}
}

func (a *stub) GetDevice(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error) {
	var output cognitoidentityprovider.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceAsync(ctx workflow.Context, input *cognitoidentityprovider.GetDeviceInput) *GetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetDevice", input)
	return &GetDeviceFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error) {
	var output cognitoidentityprovider.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.GetGroupInput) *GetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetGroup", input)
	return &GetGroupFuture{Future: future}
}

func (a *stub) GetIdentityProviderByIdentifier(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	var output cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetIdentityProviderByIdentifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityProviderByIdentifierAsync(ctx workflow.Context, input *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *GetIdentityProviderByIdentifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetIdentityProviderByIdentifier", input)
	return &GetIdentityProviderByIdentifierFuture{Future: future}
}

func (a *stub) GetSigningCertificate(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	var output cognitoidentityprovider.GetSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSigningCertificateAsync(ctx workflow.Context, input *cognitoidentityprovider.GetSigningCertificateInput) *GetSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetSigningCertificate", input)
	return &GetSigningCertificateFuture{Future: future}
}

func (a *stub) GetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	var output cognitoidentityprovider.GetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUICustomizationInput) *GetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUICustomization", input)
	return &GetUICustomizationFuture{Future: future}
}

func (a *stub) GetUser(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error) {
	var output cognitoidentityprovider.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserInput) *GetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUser", input)
	return &GetUserFuture{Future: future}
}

func (a *stub) GetUserAttributeVerificationCode(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	var output cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUserAttributeVerificationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserAttributeVerificationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *GetUserAttributeVerificationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUserAttributeVerificationCode", input)
	return &GetUserAttributeVerificationCodeFuture{Future: future}
}

func (a *stub) GetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.GetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.GetUserPoolMfaConfigInput) *GetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GetUserPoolMfaConfig", input)
	return &GetUserPoolMfaConfigFuture{Future: future}
}

func (a *stub) GlobalSignOut(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	var output cognitoidentityprovider.GlobalSignOutOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GlobalSignOut", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GlobalSignOutAsync(ctx workflow.Context, input *cognitoidentityprovider.GlobalSignOutInput) *GlobalSignOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-GlobalSignOut", input)
	return &GlobalSignOutFuture{Future: future}
}

func (a *stub) InitiateAuth(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var output cognitoidentityprovider.InitiateAuthOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-InitiateAuth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitiateAuthAsync(ctx workflow.Context, input *cognitoidentityprovider.InitiateAuthInput) *InitiateAuthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-InitiateAuth", input)
	return &InitiateAuthFuture{Future: future}
}

func (a *stub) ListDevices(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error) {
	var output cognitoidentityprovider.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicesAsync(ctx workflow.Context, input *cognitoidentityprovider.ListDevicesInput) *ListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListDevices", input)
	return &ListDevicesFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error) {
	var output cognitoidentityprovider.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListGroupsInput) *ListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListGroups", input)
	return &ListGroupsFuture{Future: future}
}

func (a *stub) ListIdentityProviders(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	var output cognitoidentityprovider.ListIdentityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListIdentityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentityProvidersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListIdentityProvidersInput) *ListIdentityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListIdentityProviders", input)
	return &ListIdentityProvidersFuture{Future: future}
}

func (a *stub) ListResourceServers(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	var output cognitoidentityprovider.ListResourceServersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListResourceServers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceServersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListResourceServersInput) *ListResourceServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListResourceServers", input)
	return &ListResourceServersFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	var output cognitoidentityprovider.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUserImportJobs(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	var output cognitoidentityprovider.ListUserImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserImportJobsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserImportJobsInput) *ListUserImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserImportJobs", input)
	return &ListUserImportJobsFuture{Future: future}
}

func (a *stub) ListUserPoolClients(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolClientsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserPoolClients", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserPoolClientsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolClientsInput) *ListUserPoolClientsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserPoolClients", input)
	return &ListUserPoolClientsFuture{Future: future}
}

func (a *stub) ListUserPools(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	var output cognitoidentityprovider.ListUserPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserPools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserPoolsAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUserPoolsInput) *ListUserPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUserPools", input)
	return &ListUserPoolsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	var output cognitoidentityprovider.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) ListUsersInGroup(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	var output cognitoidentityprovider.ListUsersInGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUsersInGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersInGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.ListUsersInGroupInput) *ListUsersInGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ListUsersInGroup", input)
	return &ListUsersInGroupFuture{Future: future}
}

func (a *stub) ResendConfirmationCode(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	var output cognitoidentityprovider.ResendConfirmationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ResendConfirmationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResendConfirmationCodeAsync(ctx workflow.Context, input *cognitoidentityprovider.ResendConfirmationCodeInput) *ResendConfirmationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-ResendConfirmationCode", input)
	return &ResendConfirmationCodeFuture{Future: future}
}

func (a *stub) RespondToAuthChallenge(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	var output cognitoidentityprovider.RespondToAuthChallengeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-RespondToAuthChallenge", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RespondToAuthChallengeAsync(ctx workflow.Context, input *cognitoidentityprovider.RespondToAuthChallengeInput) *RespondToAuthChallengeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-RespondToAuthChallenge", input)
	return &RespondToAuthChallengeFuture{Future: future}
}

func (a *stub) SetRiskConfiguration(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	var output cognitoidentityprovider.SetRiskConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetRiskConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetRiskConfigurationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetRiskConfigurationInput) *SetRiskConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetRiskConfiguration", input)
	return &SetRiskConfigurationFuture{Future: future}
}

func (a *stub) SetUICustomization(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	var output cognitoidentityprovider.SetUICustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUICustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetUICustomizationAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUICustomizationInput) *SetUICustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUICustomization", input)
	return &SetUICustomizationFuture{Future: future}
}

func (a *stub) SetUserMFAPreference(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	var output cognitoidentityprovider.SetUserMFAPreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserMFAPreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetUserMFAPreferenceAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserMFAPreferenceInput) *SetUserMFAPreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserMFAPreference", input)
	return &SetUserMFAPreferenceFuture{Future: future}
}

func (a *stub) SetUserPoolMfaConfig(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	var output cognitoidentityprovider.SetUserPoolMfaConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserPoolMfaConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetUserPoolMfaConfigAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserPoolMfaConfigInput) *SetUserPoolMfaConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserPoolMfaConfig", input)
	return &SetUserPoolMfaConfigFuture{Future: future}
}

func (a *stub) SetUserSettings(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	var output cognitoidentityprovider.SetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetUserSettingsAsync(ctx workflow.Context, input *cognitoidentityprovider.SetUserSettingsInput) *SetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SetUserSettings", input)
	return &SetUserSettingsFuture{Future: future}
}

func (a *stub) SignUp(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error) {
	var output cognitoidentityprovider.SignUpOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SignUp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignUpAsync(ctx workflow.Context, input *cognitoidentityprovider.SignUpInput) *SignUpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-SignUp", input)
	return &SignUpFuture{Future: future}
}

func (a *stub) StartUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	var output cognitoidentityprovider.StartUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-StartUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StartUserImportJobInput) *StartUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-StartUserImportJob", input)
	return &StartUserImportJobFuture{Future: future}
}

func (a *stub) StopUserImportJob(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	var output cognitoidentityprovider.StopUserImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-StopUserImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopUserImportJobAsync(ctx workflow.Context, input *cognitoidentityprovider.StopUserImportJobInput) *StopUserImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-StopUserImportJob", input)
	return &StopUserImportJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error) {
	var output cognitoidentityprovider.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error) {
	var output cognitoidentityprovider.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentityprovider.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAuthEventFeedback(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	var output cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateAuthEventFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuthEventFeedbackAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateAuthEventFeedbackInput) *UpdateAuthEventFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateAuthEventFeedback", input)
	return &UpdateAuthEventFeedbackFuture{Future: future}
}

func (a *stub) UpdateDeviceStatus(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	var output cognitoidentityprovider.UpdateDeviceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateDeviceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceStatusAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateDeviceStatusInput) *UpdateDeviceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateDeviceStatus", input)
	return &UpdateDeviceStatusFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	var output cognitoidentityprovider.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateGroupInput) *UpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateGroup", input)
	return &UpdateGroupFuture{Future: future}
}

func (a *stub) UpdateIdentityProvider(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	var output cognitoidentityprovider.UpdateIdentityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateIdentityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIdentityProviderAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateIdentityProviderInput) *UpdateIdentityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateIdentityProvider", input)
	return &UpdateIdentityProviderFuture{Future: future}
}

func (a *stub) UpdateResourceServer(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	var output cognitoidentityprovider.UpdateResourceServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateResourceServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceServerAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateResourceServerInput) *UpdateResourceServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateResourceServer", input)
	return &UpdateResourceServerFuture{Future: future}
}

func (a *stub) UpdateUserAttributes(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	var output cognitoidentityprovider.UpdateUserAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAttributesAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserAttributesInput) *UpdateUserAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserAttributes", input)
	return &UpdateUserAttributesFuture{Future: future}
}

func (a *stub) UpdateUserPool(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserPoolAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolInput) *UpdateUserPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPool", input)
	return &UpdateUserPoolFuture{Future: future}
}

func (a *stub) UpdateUserPoolClient(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolClientOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPoolClient", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserPoolClientAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolClientInput) *UpdateUserPoolClientFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPoolClient", input)
	return &UpdateUserPoolClientFuture{Future: future}
}

func (a *stub) UpdateUserPoolDomain(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	var output cognitoidentityprovider.UpdateUserPoolDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPoolDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserPoolDomainAsync(ctx workflow.Context, input *cognitoidentityprovider.UpdateUserPoolDomainInput) *UpdateUserPoolDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-UpdateUserPoolDomain", input)
	return &UpdateUserPoolDomainFuture{Future: future}
}

func (a *stub) VerifySoftwareToken(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	var output cognitoidentityprovider.VerifySoftwareTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-VerifySoftwareToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifySoftwareTokenAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifySoftwareTokenInput) *VerifySoftwareTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-VerifySoftwareToken", input)
	return &VerifySoftwareTokenFuture{Future: future}
}

func (a *stub) VerifyUserAttribute(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	var output cognitoidentityprovider.VerifyUserAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-VerifyUserAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyUserAttributeAsync(ctx workflow.Context, input *cognitoidentityprovider.VerifyUserAttributeInput) *VerifyUserAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentityprovider-VerifyUserAttribute", input)
	return &VerifyUserAttributeFuture{Future: future}
}
