// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mediaconvertstub

import (
	"github.com/aws/aws-sdk-go/service/mediaconvert"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateCertificateFuture) Get(ctx workflow.Context) (*mediaconvert.AssociateCertificateOutput, error) {
	var output mediaconvert.AssociateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelJobFuture) Get(ctx workflow.Context) (*mediaconvert.CancelJobOutput, error) {
	var output mediaconvert.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateJobFuture) Get(ctx workflow.Context) (*mediaconvert.CreateJobOutput, error) {
	var output mediaconvert.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateJobTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.CreateJobTemplateOutput, error) {
	var output mediaconvert.CreateJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePresetFuture) Get(ctx workflow.Context) (*mediaconvert.CreatePresetOutput, error) {
	var output mediaconvert.CreatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateQueueFuture) Get(ctx workflow.Context) (*mediaconvert.CreateQueueOutput, error) {
	var output mediaconvert.CreateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteJobTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.DeleteJobTemplateOutput, error) {
	var output mediaconvert.DeleteJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePresetFuture) Get(ctx workflow.Context) (*mediaconvert.DeletePresetOutput, error) {
	var output mediaconvert.DeletePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteQueueFuture) Get(ctx workflow.Context) (*mediaconvert.DeleteQueueOutput, error) {
	var output mediaconvert.DeleteQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointsFuture) Get(ctx workflow.Context) (*mediaconvert.DescribeEndpointsOutput, error) {
	var output mediaconvert.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateCertificateFuture) Get(ctx workflow.Context) (*mediaconvert.DisassociateCertificateOutput, error) {
	var output mediaconvert.DisassociateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobFuture) Get(ctx workflow.Context) (*mediaconvert.GetJobOutput, error) {
	var output mediaconvert.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.GetJobTemplateOutput, error) {
	var output mediaconvert.GetJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPresetFuture) Get(ctx workflow.Context) (*mediaconvert.GetPresetOutput, error) {
	var output mediaconvert.GetPresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueueFuture) Get(ctx workflow.Context) (*mediaconvert.GetQueueOutput, error) {
	var output mediaconvert.GetQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobTemplatesFuture) Get(ctx workflow.Context) (*mediaconvert.ListJobTemplatesOutput, error) {
	var output mediaconvert.ListJobTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobsFuture) Get(ctx workflow.Context) (*mediaconvert.ListJobsOutput, error) {
	var output mediaconvert.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPresetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPresetsFuture) Get(ctx workflow.Context) (*mediaconvert.ListPresetsOutput, error) {
	var output mediaconvert.ListPresetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListQueuesFuture) Get(ctx workflow.Context) (*mediaconvert.ListQueuesOutput, error) {
	var output mediaconvert.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*mediaconvert.ListTagsForResourceOutput, error) {
	var output mediaconvert.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*mediaconvert.TagResourceOutput, error) {
	var output mediaconvert.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*mediaconvert.UntagResourceOutput, error) {
	var output mediaconvert.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobTemplateFuture) Get(ctx workflow.Context) (*mediaconvert.UpdateJobTemplateOutput, error) {
	var output mediaconvert.UpdateJobTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePresetFuture) Get(ctx workflow.Context) (*mediaconvert.UpdatePresetOutput, error) {
	var output mediaconvert.UpdatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateQueueFuture) Get(ctx workflow.Context) (*mediaconvert.UpdateQueueOutput, error) {
	var output mediaconvert.UpdateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateCertificate(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) (*mediaconvert.AssociateCertificateOutput, error) {
	var output mediaconvert.AssociateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-AssociateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateCertificateAsync(ctx workflow.Context, input *mediaconvert.AssociateCertificateInput) *AssociateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-AssociateCertificate", input)
	return &AssociateCertificateFuture{Future: future}
}

func (a *stub) CancelJob(ctx workflow.Context, input *mediaconvert.CancelJobInput) (*mediaconvert.CancelJobOutput, error) {
	var output mediaconvert.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobAsync(ctx workflow.Context, input *mediaconvert.CancelJobInput) *CancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CancelJob", input)
	return &CancelJobFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *mediaconvert.CreateJobInput) (*mediaconvert.CreateJobOutput, error) {
	var output mediaconvert.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *mediaconvert.CreateJobInput) *CreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateJob", input)
	return &CreateJobFuture{Future: future}
}

func (a *stub) CreateJobTemplate(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) (*mediaconvert.CreateJobTemplateOutput, error) {
	var output mediaconvert.CreateJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.CreateJobTemplateInput) *CreateJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateJobTemplate", input)
	return &CreateJobTemplateFuture{Future: future}
}

func (a *stub) CreatePreset(ctx workflow.Context, input *mediaconvert.CreatePresetInput) (*mediaconvert.CreatePresetOutput, error) {
	var output mediaconvert.CreatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresetAsync(ctx workflow.Context, input *mediaconvert.CreatePresetInput) *CreatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreatePreset", input)
	return &CreatePresetFuture{Future: future}
}

func (a *stub) CreateQueue(ctx workflow.Context, input *mediaconvert.CreateQueueInput) (*mediaconvert.CreateQueueOutput, error) {
	var output mediaconvert.CreateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateQueueAsync(ctx workflow.Context, input *mediaconvert.CreateQueueInput) *CreateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-CreateQueue", input)
	return &CreateQueueFuture{Future: future}
}

func (a *stub) DeleteJobTemplate(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) (*mediaconvert.DeleteJobTemplateOutput, error) {
	var output mediaconvert.DeleteJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeleteJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobTemplateAsync(ctx workflow.Context, input *mediaconvert.DeleteJobTemplateInput) *DeleteJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeleteJobTemplate", input)
	return &DeleteJobTemplateFuture{Future: future}
}

func (a *stub) DeletePreset(ctx workflow.Context, input *mediaconvert.DeletePresetInput) (*mediaconvert.DeletePresetOutput, error) {
	var output mediaconvert.DeletePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeletePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePresetAsync(ctx workflow.Context, input *mediaconvert.DeletePresetInput) *DeletePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeletePreset", input)
	return &DeletePresetFuture{Future: future}
}

func (a *stub) DeleteQueue(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) (*mediaconvert.DeleteQueueOutput, error) {
	var output mediaconvert.DeleteQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeleteQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteQueueAsync(ctx workflow.Context, input *mediaconvert.DeleteQueueInput) *DeleteQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DeleteQueue", input)
	return &DeleteQueueFuture{Future: future}
}

func (a *stub) DescribeEndpoints(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) (*mediaconvert.DescribeEndpointsOutput, error) {
	var output mediaconvert.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointsAsync(ctx workflow.Context, input *mediaconvert.DescribeEndpointsInput) *DescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DescribeEndpoints", input)
	return &DescribeEndpointsFuture{Future: future}
}

func (a *stub) DisassociateCertificate(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) (*mediaconvert.DisassociateCertificateOutput, error) {
	var output mediaconvert.DisassociateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DisassociateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateCertificateAsync(ctx workflow.Context, input *mediaconvert.DisassociateCertificateInput) *DisassociateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-DisassociateCertificate", input)
	return &DisassociateCertificateFuture{Future: future}
}

func (a *stub) GetJob(ctx workflow.Context, input *mediaconvert.GetJobInput) (*mediaconvert.GetJobOutput, error) {
	var output mediaconvert.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobAsync(ctx workflow.Context, input *mediaconvert.GetJobInput) *GetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetJob", input)
	return &GetJobFuture{Future: future}
}

func (a *stub) GetJobTemplate(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) (*mediaconvert.GetJobTemplateOutput, error) {
	var output mediaconvert.GetJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobTemplateAsync(ctx workflow.Context, input *mediaconvert.GetJobTemplateInput) *GetJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetJobTemplate", input)
	return &GetJobTemplateFuture{Future: future}
}

func (a *stub) GetPreset(ctx workflow.Context, input *mediaconvert.GetPresetInput) (*mediaconvert.GetPresetOutput, error) {
	var output mediaconvert.GetPresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetPreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPresetAsync(ctx workflow.Context, input *mediaconvert.GetPresetInput) *GetPresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetPreset", input)
	return &GetPresetFuture{Future: future}
}

func (a *stub) GetQueue(ctx workflow.Context, input *mediaconvert.GetQueueInput) (*mediaconvert.GetQueueOutput, error) {
	var output mediaconvert.GetQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueueAsync(ctx workflow.Context, input *mediaconvert.GetQueueInput) *GetQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-GetQueue", input)
	return &GetQueueFuture{Future: future}
}

func (a *stub) ListJobTemplates(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) (*mediaconvert.ListJobTemplatesOutput, error) {
	var output mediaconvert.ListJobTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListJobTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobTemplatesAsync(ctx workflow.Context, input *mediaconvert.ListJobTemplatesInput) *ListJobTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListJobTemplates", input)
	return &ListJobTemplatesFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *mediaconvert.ListJobsInput) (*mediaconvert.ListJobsOutput, error) {
	var output mediaconvert.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *mediaconvert.ListJobsInput) *ListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListJobs", input)
	return &ListJobsFuture{Future: future}
}

func (a *stub) ListPresets(ctx workflow.Context, input *mediaconvert.ListPresetsInput) (*mediaconvert.ListPresetsOutput, error) {
	var output mediaconvert.ListPresetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListPresets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPresetsAsync(ctx workflow.Context, input *mediaconvert.ListPresetsInput) *ListPresetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListPresets", input)
	return &ListPresetsFuture{Future: future}
}

func (a *stub) ListQueues(ctx workflow.Context, input *mediaconvert.ListQueuesInput) (*mediaconvert.ListQueuesOutput, error) {
	var output mediaconvert.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueuesAsync(ctx workflow.Context, input *mediaconvert.ListQueuesInput) *ListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListQueues", input)
	return &ListQueuesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) (*mediaconvert.ListTagsForResourceOutput, error) {
	var output mediaconvert.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mediaconvert.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mediaconvert.TagResourceInput) (*mediaconvert.TagResourceOutput, error) {
	var output mediaconvert.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mediaconvert.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mediaconvert.UntagResourceInput) (*mediaconvert.UntagResourceOutput, error) {
	var output mediaconvert.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mediaconvert.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateJobTemplate(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) (*mediaconvert.UpdateJobTemplateOutput, error) {
	var output mediaconvert.UpdateJobTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdateJobTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobTemplateAsync(ctx workflow.Context, input *mediaconvert.UpdateJobTemplateInput) *UpdateJobTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdateJobTemplate", input)
	return &UpdateJobTemplateFuture{Future: future}
}

func (a *stub) UpdatePreset(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) (*mediaconvert.UpdatePresetOutput, error) {
	var output mediaconvert.UpdatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePresetAsync(ctx workflow.Context, input *mediaconvert.UpdatePresetInput) *UpdatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdatePreset", input)
	return &UpdatePresetFuture{Future: future}
}

func (a *stub) UpdateQueue(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) (*mediaconvert.UpdateQueueOutput, error) {
	var output mediaconvert.UpdateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateQueueAsync(ctx workflow.Context, input *mediaconvert.UpdateQueueInput) *UpdateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconvert-UpdateQueue", input)
	return &UpdateQueueFuture{Future: future}
}
