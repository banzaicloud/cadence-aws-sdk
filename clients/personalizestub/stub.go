// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package personalizestub

import (
	"github.com/aws/aws-sdk-go/service/personalize"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateBatchInferenceJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBatchInferenceJobFuture) Get(ctx workflow.Context) (*personalize.CreateBatchInferenceJobOutput, error) {
	var output personalize.CreateBatchInferenceJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCampaignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCampaignFuture) Get(ctx workflow.Context) (*personalize.CreateCampaignOutput, error) {
	var output personalize.CreateCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetOutput, error) {
	var output personalize.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetGroupOutput, error) {
	var output personalize.CreateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetImportJobFuture) Get(ctx workflow.Context) (*personalize.CreateDatasetImportJobOutput, error) {
	var output personalize.CreateDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventTrackerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventTrackerFuture) Get(ctx workflow.Context) (*personalize.CreateEventTrackerOutput, error) {
	var output personalize.CreateEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFilterFuture) Get(ctx workflow.Context) (*personalize.CreateFilterOutput, error) {
	var output personalize.CreateFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSchemaFuture) Get(ctx workflow.Context) (*personalize.CreateSchemaOutput, error) {
	var output personalize.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSolutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSolutionFuture) Get(ctx workflow.Context) (*personalize.CreateSolutionOutput, error) {
	var output personalize.CreateSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSolutionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSolutionVersionFuture) Get(ctx workflow.Context) (*personalize.CreateSolutionVersionOutput, error) {
	var output personalize.CreateSolutionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCampaignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCampaignFuture) Get(ctx workflow.Context) (*personalize.DeleteCampaignOutput, error) {
	var output personalize.DeleteCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetFuture) Get(ctx workflow.Context) (*personalize.DeleteDatasetOutput, error) {
	var output personalize.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.DeleteDatasetGroupOutput, error) {
	var output personalize.DeleteDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventTrackerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventTrackerFuture) Get(ctx workflow.Context) (*personalize.DeleteEventTrackerOutput, error) {
	var output personalize.DeleteEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFilterFuture) Get(ctx workflow.Context) (*personalize.DeleteFilterOutput, error) {
	var output personalize.DeleteFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSchemaFuture) Get(ctx workflow.Context) (*personalize.DeleteSchemaOutput, error) {
	var output personalize.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSolutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSolutionFuture) Get(ctx workflow.Context) (*personalize.DeleteSolutionOutput, error) {
	var output personalize.DeleteSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAlgorithmFuture) Get(ctx workflow.Context) (*personalize.DescribeAlgorithmOutput, error) {
	var output personalize.DescribeAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBatchInferenceJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBatchInferenceJobFuture) Get(ctx workflow.Context) (*personalize.DescribeBatchInferenceJobOutput, error) {
	var output personalize.DescribeBatchInferenceJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCampaignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCampaignFuture) Get(ctx workflow.Context) (*personalize.DescribeCampaignOutput, error) {
	var output personalize.DescribeCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetOutput, error) {
	var output personalize.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetGroupFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetGroupOutput, error) {
	var output personalize.DescribeDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetImportJobFuture) Get(ctx workflow.Context) (*personalize.DescribeDatasetImportJobOutput, error) {
	var output personalize.DescribeDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventTrackerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventTrackerFuture) Get(ctx workflow.Context) (*personalize.DescribeEventTrackerOutput, error) {
	var output personalize.DescribeEventTrackerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFeatureTransformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFeatureTransformationFuture) Get(ctx workflow.Context) (*personalize.DescribeFeatureTransformationOutput, error) {
	var output personalize.DescribeFeatureTransformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFilterFuture) Get(ctx workflow.Context) (*personalize.DescribeFilterOutput, error) {
	var output personalize.DescribeFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRecipeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRecipeFuture) Get(ctx workflow.Context) (*personalize.DescribeRecipeOutput, error) {
	var output personalize.DescribeRecipeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSchemaFuture) Get(ctx workflow.Context) (*personalize.DescribeSchemaOutput, error) {
	var output personalize.DescribeSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSolutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSolutionFuture) Get(ctx workflow.Context) (*personalize.DescribeSolutionOutput, error) {
	var output personalize.DescribeSolutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSolutionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSolutionVersionFuture) Get(ctx workflow.Context) (*personalize.DescribeSolutionVersionOutput, error) {
	var output personalize.DescribeSolutionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSolutionMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSolutionMetricsFuture) Get(ctx workflow.Context) (*personalize.GetSolutionMetricsOutput, error) {
	var output personalize.GetSolutionMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBatchInferenceJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBatchInferenceJobsFuture) Get(ctx workflow.Context) (*personalize.ListBatchInferenceJobsOutput, error) {
	var output personalize.ListBatchInferenceJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCampaignsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCampaignsFuture) Get(ctx workflow.Context) (*personalize.ListCampaignsOutput, error) {
	var output personalize.ListCampaignsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetGroupsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetGroupsOutput, error) {
	var output personalize.ListDatasetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetImportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetImportJobsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetImportJobsOutput, error) {
	var output personalize.ListDatasetImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetsFuture) Get(ctx workflow.Context) (*personalize.ListDatasetsOutput, error) {
	var output personalize.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventTrackersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventTrackersFuture) Get(ctx workflow.Context) (*personalize.ListEventTrackersOutput, error) {
	var output personalize.ListEventTrackersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFiltersFuture) Get(ctx workflow.Context) (*personalize.ListFiltersOutput, error) {
	var output personalize.ListFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRecipesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRecipesFuture) Get(ctx workflow.Context) (*personalize.ListRecipesOutput, error) {
	var output personalize.ListRecipesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSchemasFuture) Get(ctx workflow.Context) (*personalize.ListSchemasOutput, error) {
	var output personalize.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSolutionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSolutionVersionsFuture) Get(ctx workflow.Context) (*personalize.ListSolutionVersionsOutput, error) {
	var output personalize.ListSolutionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSolutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSolutionsFuture) Get(ctx workflow.Context) (*personalize.ListSolutionsOutput, error) {
	var output personalize.ListSolutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCampaignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCampaignFuture) Get(ctx workflow.Context) (*personalize.UpdateCampaignOutput, error) {
	var output personalize.UpdateCampaignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBatchInferenceJob(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) (*personalize.CreateBatchInferenceJobOutput, error) {
	var output personalize.CreateBatchInferenceJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateBatchInferenceJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBatchInferenceJobAsync(ctx workflow.Context, input *personalize.CreateBatchInferenceJobInput) *CreateBatchInferenceJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateBatchInferenceJob", input)
	return &CreateBatchInferenceJobFuture{Future: future}
}

func (a *stub) CreateCampaign(ctx workflow.Context, input *personalize.CreateCampaignInput) (*personalize.CreateCampaignOutput, error) {
	var output personalize.CreateCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCampaignAsync(ctx workflow.Context, input *personalize.CreateCampaignInput) *CreateCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateCampaign", input)
	return &CreateCampaignFuture{Future: future}
}

func (a *stub) CreateDataset(ctx workflow.Context, input *personalize.CreateDatasetInput) (*personalize.CreateDatasetOutput, error) {
	var output personalize.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetAsync(ctx workflow.Context, input *personalize.CreateDatasetInput) *CreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDataset", input)
	return &CreateDatasetFuture{Future: future}
}

func (a *stub) CreateDatasetGroup(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) (*personalize.CreateDatasetGroupOutput, error) {
	var output personalize.CreateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetGroupAsync(ctx workflow.Context, input *personalize.CreateDatasetGroupInput) *CreateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDatasetGroup", input)
	return &CreateDatasetGroupFuture{Future: future}
}

func (a *stub) CreateDatasetImportJob(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) (*personalize.CreateDatasetImportJobOutput, error) {
	var output personalize.CreateDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetImportJobAsync(ctx workflow.Context, input *personalize.CreateDatasetImportJobInput) *CreateDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateDatasetImportJob", input)
	return &CreateDatasetImportJobFuture{Future: future}
}

func (a *stub) CreateEventTracker(ctx workflow.Context, input *personalize.CreateEventTrackerInput) (*personalize.CreateEventTrackerOutput, error) {
	var output personalize.CreateEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventTrackerAsync(ctx workflow.Context, input *personalize.CreateEventTrackerInput) *CreateEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateEventTracker", input)
	return &CreateEventTrackerFuture{Future: future}
}

func (a *stub) CreateFilter(ctx workflow.Context, input *personalize.CreateFilterInput) (*personalize.CreateFilterOutput, error) {
	var output personalize.CreateFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFilterAsync(ctx workflow.Context, input *personalize.CreateFilterInput) *CreateFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateFilter", input)
	return &CreateFilterFuture{Future: future}
}

func (a *stub) CreateSchema(ctx workflow.Context, input *personalize.CreateSchemaInput) (*personalize.CreateSchemaOutput, error) {
	var output personalize.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSchemaAsync(ctx workflow.Context, input *personalize.CreateSchemaInput) *CreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSchema", input)
	return &CreateSchemaFuture{Future: future}
}

func (a *stub) CreateSolution(ctx workflow.Context, input *personalize.CreateSolutionInput) (*personalize.CreateSolutionOutput, error) {
	var output personalize.CreateSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSolutionAsync(ctx workflow.Context, input *personalize.CreateSolutionInput) *CreateSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSolution", input)
	return &CreateSolutionFuture{Future: future}
}

func (a *stub) CreateSolutionVersion(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) (*personalize.CreateSolutionVersionOutput, error) {
	var output personalize.CreateSolutionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSolutionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSolutionVersionAsync(ctx workflow.Context, input *personalize.CreateSolutionVersionInput) *CreateSolutionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-CreateSolutionVersion", input)
	return &CreateSolutionVersionFuture{Future: future}
}

func (a *stub) DeleteCampaign(ctx workflow.Context, input *personalize.DeleteCampaignInput) (*personalize.DeleteCampaignOutput, error) {
	var output personalize.DeleteCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCampaignAsync(ctx workflow.Context, input *personalize.DeleteCampaignInput) *DeleteCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteCampaign", input)
	return &DeleteCampaignFuture{Future: future}
}

func (a *stub) DeleteDataset(ctx workflow.Context, input *personalize.DeleteDatasetInput) (*personalize.DeleteDatasetOutput, error) {
	var output personalize.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetAsync(ctx workflow.Context, input *personalize.DeleteDatasetInput) *DeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteDataset", input)
	return &DeleteDatasetFuture{Future: future}
}

func (a *stub) DeleteDatasetGroup(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) (*personalize.DeleteDatasetGroupOutput, error) {
	var output personalize.DeleteDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetGroupAsync(ctx workflow.Context, input *personalize.DeleteDatasetGroupInput) *DeleteDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteDatasetGroup", input)
	return &DeleteDatasetGroupFuture{Future: future}
}

func (a *stub) DeleteEventTracker(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) (*personalize.DeleteEventTrackerOutput, error) {
	var output personalize.DeleteEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventTrackerAsync(ctx workflow.Context, input *personalize.DeleteEventTrackerInput) *DeleteEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteEventTracker", input)
	return &DeleteEventTrackerFuture{Future: future}
}

func (a *stub) DeleteFilter(ctx workflow.Context, input *personalize.DeleteFilterInput) (*personalize.DeleteFilterOutput, error) {
	var output personalize.DeleteFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFilterAsync(ctx workflow.Context, input *personalize.DeleteFilterInput) *DeleteFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteFilter", input)
	return &DeleteFilterFuture{Future: future}
}

func (a *stub) DeleteSchema(ctx workflow.Context, input *personalize.DeleteSchemaInput) (*personalize.DeleteSchemaOutput, error) {
	var output personalize.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaAsync(ctx workflow.Context, input *personalize.DeleteSchemaInput) *DeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteSchema", input)
	return &DeleteSchemaFuture{Future: future}
}

func (a *stub) DeleteSolution(ctx workflow.Context, input *personalize.DeleteSolutionInput) (*personalize.DeleteSolutionOutput, error) {
	var output personalize.DeleteSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSolutionAsync(ctx workflow.Context, input *personalize.DeleteSolutionInput) *DeleteSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DeleteSolution", input)
	return &DeleteSolutionFuture{Future: future}
}

func (a *stub) DescribeAlgorithm(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) (*personalize.DescribeAlgorithmOutput, error) {
	var output personalize.DescribeAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlgorithmAsync(ctx workflow.Context, input *personalize.DescribeAlgorithmInput) *DescribeAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeAlgorithm", input)
	return &DescribeAlgorithmFuture{Future: future}
}

func (a *stub) DescribeBatchInferenceJob(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) (*personalize.DescribeBatchInferenceJobOutput, error) {
	var output personalize.DescribeBatchInferenceJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeBatchInferenceJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBatchInferenceJobAsync(ctx workflow.Context, input *personalize.DescribeBatchInferenceJobInput) *DescribeBatchInferenceJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeBatchInferenceJob", input)
	return &DescribeBatchInferenceJobFuture{Future: future}
}

func (a *stub) DescribeCampaign(ctx workflow.Context, input *personalize.DescribeCampaignInput) (*personalize.DescribeCampaignOutput, error) {
	var output personalize.DescribeCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCampaignAsync(ctx workflow.Context, input *personalize.DescribeCampaignInput) *DescribeCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeCampaign", input)
	return &DescribeCampaignFuture{Future: future}
}

func (a *stub) DescribeDataset(ctx workflow.Context, input *personalize.DescribeDatasetInput) (*personalize.DescribeDatasetOutput, error) {
	var output personalize.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetAsync(ctx workflow.Context, input *personalize.DescribeDatasetInput) *DescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDataset", input)
	return &DescribeDatasetFuture{Future: future}
}

func (a *stub) DescribeDatasetGroup(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) (*personalize.DescribeDatasetGroupOutput, error) {
	var output personalize.DescribeDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetGroupAsync(ctx workflow.Context, input *personalize.DescribeDatasetGroupInput) *DescribeDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDatasetGroup", input)
	return &DescribeDatasetGroupFuture{Future: future}
}

func (a *stub) DescribeDatasetImportJob(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) (*personalize.DescribeDatasetImportJobOutput, error) {
	var output personalize.DescribeDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetImportJobAsync(ctx workflow.Context, input *personalize.DescribeDatasetImportJobInput) *DescribeDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeDatasetImportJob", input)
	return &DescribeDatasetImportJobFuture{Future: future}
}

func (a *stub) DescribeEventTracker(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) (*personalize.DescribeEventTrackerOutput, error) {
	var output personalize.DescribeEventTrackerOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeEventTracker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventTrackerAsync(ctx workflow.Context, input *personalize.DescribeEventTrackerInput) *DescribeEventTrackerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeEventTracker", input)
	return &DescribeEventTrackerFuture{Future: future}
}

func (a *stub) DescribeFeatureTransformation(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) (*personalize.DescribeFeatureTransformationOutput, error) {
	var output personalize.DescribeFeatureTransformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeFeatureTransformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFeatureTransformationAsync(ctx workflow.Context, input *personalize.DescribeFeatureTransformationInput) *DescribeFeatureTransformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeFeatureTransformation", input)
	return &DescribeFeatureTransformationFuture{Future: future}
}

func (a *stub) DescribeFilter(ctx workflow.Context, input *personalize.DescribeFilterInput) (*personalize.DescribeFilterOutput, error) {
	var output personalize.DescribeFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFilterAsync(ctx workflow.Context, input *personalize.DescribeFilterInput) *DescribeFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeFilter", input)
	return &DescribeFilterFuture{Future: future}
}

func (a *stub) DescribeRecipe(ctx workflow.Context, input *personalize.DescribeRecipeInput) (*personalize.DescribeRecipeOutput, error) {
	var output personalize.DescribeRecipeOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeRecipe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecipeAsync(ctx workflow.Context, input *personalize.DescribeRecipeInput) *DescribeRecipeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeRecipe", input)
	return &DescribeRecipeFuture{Future: future}
}

func (a *stub) DescribeSchema(ctx workflow.Context, input *personalize.DescribeSchemaInput) (*personalize.DescribeSchemaOutput, error) {
	var output personalize.DescribeSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSchemaAsync(ctx workflow.Context, input *personalize.DescribeSchemaInput) *DescribeSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSchema", input)
	return &DescribeSchemaFuture{Future: future}
}

func (a *stub) DescribeSolution(ctx workflow.Context, input *personalize.DescribeSolutionInput) (*personalize.DescribeSolutionOutput, error) {
	var output personalize.DescribeSolutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSolution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSolutionAsync(ctx workflow.Context, input *personalize.DescribeSolutionInput) *DescribeSolutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSolution", input)
	return &DescribeSolutionFuture{Future: future}
}

func (a *stub) DescribeSolutionVersion(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) (*personalize.DescribeSolutionVersionOutput, error) {
	var output personalize.DescribeSolutionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSolutionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSolutionVersionAsync(ctx workflow.Context, input *personalize.DescribeSolutionVersionInput) *DescribeSolutionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-DescribeSolutionVersion", input)
	return &DescribeSolutionVersionFuture{Future: future}
}

func (a *stub) GetSolutionMetrics(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) (*personalize.GetSolutionMetricsOutput, error) {
	var output personalize.GetSolutionMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-GetSolutionMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSolutionMetricsAsync(ctx workflow.Context, input *personalize.GetSolutionMetricsInput) *GetSolutionMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-GetSolutionMetrics", input)
	return &GetSolutionMetricsFuture{Future: future}
}

func (a *stub) ListBatchInferenceJobs(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) (*personalize.ListBatchInferenceJobsOutput, error) {
	var output personalize.ListBatchInferenceJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListBatchInferenceJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBatchInferenceJobsAsync(ctx workflow.Context, input *personalize.ListBatchInferenceJobsInput) *ListBatchInferenceJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListBatchInferenceJobs", input)
	return &ListBatchInferenceJobsFuture{Future: future}
}

func (a *stub) ListCampaigns(ctx workflow.Context, input *personalize.ListCampaignsInput) (*personalize.ListCampaignsOutput, error) {
	var output personalize.ListCampaignsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListCampaigns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCampaignsAsync(ctx workflow.Context, input *personalize.ListCampaignsInput) *ListCampaignsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListCampaigns", input)
	return &ListCampaignsFuture{Future: future}
}

func (a *stub) ListDatasetGroups(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) (*personalize.ListDatasetGroupsOutput, error) {
	var output personalize.ListDatasetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetGroupsAsync(ctx workflow.Context, input *personalize.ListDatasetGroupsInput) *ListDatasetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasetGroups", input)
	return &ListDatasetGroupsFuture{Future: future}
}

func (a *stub) ListDatasetImportJobs(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) (*personalize.ListDatasetImportJobsOutput, error) {
	var output personalize.ListDatasetImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasetImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetImportJobsAsync(ctx workflow.Context, input *personalize.ListDatasetImportJobsInput) *ListDatasetImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasetImportJobs", input)
	return &ListDatasetImportJobsFuture{Future: future}
}

func (a *stub) ListDatasets(ctx workflow.Context, input *personalize.ListDatasetsInput) (*personalize.ListDatasetsOutput, error) {
	var output personalize.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetsAsync(ctx workflow.Context, input *personalize.ListDatasetsInput) *ListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListDatasets", input)
	return &ListDatasetsFuture{Future: future}
}

func (a *stub) ListEventTrackers(ctx workflow.Context, input *personalize.ListEventTrackersInput) (*personalize.ListEventTrackersOutput, error) {
	var output personalize.ListEventTrackersOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListEventTrackers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventTrackersAsync(ctx workflow.Context, input *personalize.ListEventTrackersInput) *ListEventTrackersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListEventTrackers", input)
	return &ListEventTrackersFuture{Future: future}
}

func (a *stub) ListFilters(ctx workflow.Context, input *personalize.ListFiltersInput) (*personalize.ListFiltersOutput, error) {
	var output personalize.ListFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFiltersAsync(ctx workflow.Context, input *personalize.ListFiltersInput) *ListFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListFilters", input)
	return &ListFiltersFuture{Future: future}
}

func (a *stub) ListRecipes(ctx workflow.Context, input *personalize.ListRecipesInput) (*personalize.ListRecipesOutput, error) {
	var output personalize.ListRecipesOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListRecipes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecipesAsync(ctx workflow.Context, input *personalize.ListRecipesInput) *ListRecipesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListRecipes", input)
	return &ListRecipesFuture{Future: future}
}

func (a *stub) ListSchemas(ctx workflow.Context, input *personalize.ListSchemasInput) (*personalize.ListSchemasOutput, error) {
	var output personalize.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemasAsync(ctx workflow.Context, input *personalize.ListSchemasInput) *ListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListSchemas", input)
	return &ListSchemasFuture{Future: future}
}

func (a *stub) ListSolutionVersions(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) (*personalize.ListSolutionVersionsOutput, error) {
	var output personalize.ListSolutionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListSolutionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSolutionVersionsAsync(ctx workflow.Context, input *personalize.ListSolutionVersionsInput) *ListSolutionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListSolutionVersions", input)
	return &ListSolutionVersionsFuture{Future: future}
}

func (a *stub) ListSolutions(ctx workflow.Context, input *personalize.ListSolutionsInput) (*personalize.ListSolutionsOutput, error) {
	var output personalize.ListSolutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-ListSolutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSolutionsAsync(ctx workflow.Context, input *personalize.ListSolutionsInput) *ListSolutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-ListSolutions", input)
	return &ListSolutionsFuture{Future: future}
}

func (a *stub) UpdateCampaign(ctx workflow.Context, input *personalize.UpdateCampaignInput) (*personalize.UpdateCampaignOutput, error) {
	var output personalize.UpdateCampaignOutput
	err := workflow.ExecuteActivity(ctx, "aws-personalize-UpdateCampaign", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCampaignAsync(ctx workflow.Context, input *personalize.UpdateCampaignInput) *UpdateCampaignFuture {
	future := workflow.ExecuteActivity(ctx, "aws-personalize-UpdateCampaign", input)
	return &UpdateCampaignFuture{Future: future}
}
