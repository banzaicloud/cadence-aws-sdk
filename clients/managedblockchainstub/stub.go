// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package managedblockchainstub

import (
	"github.com/aws/aws-sdk-go/service/managedblockchain"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMemberFuture) Get(ctx workflow.Context) (*managedblockchain.CreateMemberOutput, error) {
	var output managedblockchain.CreateMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkFuture) Get(ctx workflow.Context) (*managedblockchain.CreateNetworkOutput, error) {
	var output managedblockchain.CreateNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNodeFuture) Get(ctx workflow.Context) (*managedblockchain.CreateNodeOutput, error) {
	var output managedblockchain.CreateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProposalFuture) Get(ctx workflow.Context) (*managedblockchain.CreateProposalOutput, error) {
	var output managedblockchain.CreateProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMemberFuture) Get(ctx workflow.Context) (*managedblockchain.DeleteMemberOutput, error) {
	var output managedblockchain.DeleteMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNodeFuture) Get(ctx workflow.Context) (*managedblockchain.DeleteNodeOutput, error) {
	var output managedblockchain.DeleteNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMemberFuture) Get(ctx workflow.Context) (*managedblockchain.GetMemberOutput, error) {
	var output managedblockchain.GetMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNetworkFuture) Get(ctx workflow.Context) (*managedblockchain.GetNetworkOutput, error) {
	var output managedblockchain.GetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNodeFuture) Get(ctx workflow.Context) (*managedblockchain.GetNodeOutput, error) {
	var output managedblockchain.GetNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProposalFuture) Get(ctx workflow.Context) (*managedblockchain.GetProposalOutput, error) {
	var output managedblockchain.GetProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInvitationsFuture) Get(ctx workflow.Context) (*managedblockchain.ListInvitationsOutput, error) {
	var output managedblockchain.ListInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMembersFuture) Get(ctx workflow.Context) (*managedblockchain.ListMembersOutput, error) {
	var output managedblockchain.ListMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNetworksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNetworksFuture) Get(ctx workflow.Context) (*managedblockchain.ListNetworksOutput, error) {
	var output managedblockchain.ListNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNodesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNodesFuture) Get(ctx workflow.Context) (*managedblockchain.ListNodesOutput, error) {
	var output managedblockchain.ListNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProposalVotesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProposalVotesFuture) Get(ctx workflow.Context) (*managedblockchain.ListProposalVotesOutput, error) {
	var output managedblockchain.ListProposalVotesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProposalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProposalsFuture) Get(ctx workflow.Context) (*managedblockchain.ListProposalsOutput, error) {
	var output managedblockchain.ListProposalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*managedblockchain.ListTagsForResourceOutput, error) {
	var output managedblockchain.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectInvitationFuture) Get(ctx workflow.Context) (*managedblockchain.RejectInvitationOutput, error) {
	var output managedblockchain.RejectInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*managedblockchain.TagResourceOutput, error) {
	var output managedblockchain.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*managedblockchain.UntagResourceOutput, error) {
	var output managedblockchain.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMemberFuture) Get(ctx workflow.Context) (*managedblockchain.UpdateMemberOutput, error) {
	var output managedblockchain.UpdateMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNodeFuture) Get(ctx workflow.Context) (*managedblockchain.UpdateNodeOutput, error) {
	var output managedblockchain.UpdateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VoteOnProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VoteOnProposalFuture) Get(ctx workflow.Context) (*managedblockchain.VoteOnProposalOutput, error) {
	var output managedblockchain.VoteOnProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMember(ctx workflow.Context, input *managedblockchain.CreateMemberInput) (*managedblockchain.CreateMemberOutput, error) {
	var output managedblockchain.CreateMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMemberAsync(ctx workflow.Context, input *managedblockchain.CreateMemberInput) *CreateMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateMember", input)
	return &CreateMemberFuture{Future: future}
}

func (a *stub) CreateNetwork(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) (*managedblockchain.CreateNetworkOutput, error) {
	var output managedblockchain.CreateNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkAsync(ctx workflow.Context, input *managedblockchain.CreateNetworkInput) *CreateNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateNetwork", input)
	return &CreateNetworkFuture{Future: future}
}

func (a *stub) CreateNode(ctx workflow.Context, input *managedblockchain.CreateNodeInput) (*managedblockchain.CreateNodeOutput, error) {
	var output managedblockchain.CreateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNodeAsync(ctx workflow.Context, input *managedblockchain.CreateNodeInput) *CreateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateNode", input)
	return &CreateNodeFuture{Future: future}
}

func (a *stub) CreateProposal(ctx workflow.Context, input *managedblockchain.CreateProposalInput) (*managedblockchain.CreateProposalOutput, error) {
	var output managedblockchain.CreateProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProposalAsync(ctx workflow.Context, input *managedblockchain.CreateProposalInput) *CreateProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-CreateProposal", input)
	return &CreateProposalFuture{Future: future}
}

func (a *stub) DeleteMember(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) (*managedblockchain.DeleteMemberOutput, error) {
	var output managedblockchain.DeleteMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-DeleteMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMemberAsync(ctx workflow.Context, input *managedblockchain.DeleteMemberInput) *DeleteMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-DeleteMember", input)
	return &DeleteMemberFuture{Future: future}
}

func (a *stub) DeleteNode(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) (*managedblockchain.DeleteNodeOutput, error) {
	var output managedblockchain.DeleteNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-DeleteNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNodeAsync(ctx workflow.Context, input *managedblockchain.DeleteNodeInput) *DeleteNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-DeleteNode", input)
	return &DeleteNodeFuture{Future: future}
}

func (a *stub) GetMember(ctx workflow.Context, input *managedblockchain.GetMemberInput) (*managedblockchain.GetMemberOutput, error) {
	var output managedblockchain.GetMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMemberAsync(ctx workflow.Context, input *managedblockchain.GetMemberInput) *GetMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetMember", input)
	return &GetMemberFuture{Future: future}
}

func (a *stub) GetNetwork(ctx workflow.Context, input *managedblockchain.GetNetworkInput) (*managedblockchain.GetNetworkOutput, error) {
	var output managedblockchain.GetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNetworkAsync(ctx workflow.Context, input *managedblockchain.GetNetworkInput) *GetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetNetwork", input)
	return &GetNetworkFuture{Future: future}
}

func (a *stub) GetNode(ctx workflow.Context, input *managedblockchain.GetNodeInput) (*managedblockchain.GetNodeOutput, error) {
	var output managedblockchain.GetNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNodeAsync(ctx workflow.Context, input *managedblockchain.GetNodeInput) *GetNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetNode", input)
	return &GetNodeFuture{Future: future}
}

func (a *stub) GetProposal(ctx workflow.Context, input *managedblockchain.GetProposalInput) (*managedblockchain.GetProposalOutput, error) {
	var output managedblockchain.GetProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProposalAsync(ctx workflow.Context, input *managedblockchain.GetProposalInput) *GetProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-GetProposal", input)
	return &GetProposalFuture{Future: future}
}

func (a *stub) ListInvitations(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) (*managedblockchain.ListInvitationsOutput, error) {
	var output managedblockchain.ListInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInvitationsAsync(ctx workflow.Context, input *managedblockchain.ListInvitationsInput) *ListInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListInvitations", input)
	return &ListInvitationsFuture{Future: future}
}

func (a *stub) ListMembers(ctx workflow.Context, input *managedblockchain.ListMembersInput) (*managedblockchain.ListMembersOutput, error) {
	var output managedblockchain.ListMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMembersAsync(ctx workflow.Context, input *managedblockchain.ListMembersInput) *ListMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListMembers", input)
	return &ListMembersFuture{Future: future}
}

func (a *stub) ListNetworks(ctx workflow.Context, input *managedblockchain.ListNetworksInput) (*managedblockchain.ListNetworksOutput, error) {
	var output managedblockchain.ListNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNetworksAsync(ctx workflow.Context, input *managedblockchain.ListNetworksInput) *ListNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListNetworks", input)
	return &ListNetworksFuture{Future: future}
}

func (a *stub) ListNodes(ctx workflow.Context, input *managedblockchain.ListNodesInput) (*managedblockchain.ListNodesOutput, error) {
	var output managedblockchain.ListNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNodesAsync(ctx workflow.Context, input *managedblockchain.ListNodesInput) *ListNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListNodes", input)
	return &ListNodesFuture{Future: future}
}

func (a *stub) ListProposalVotes(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) (*managedblockchain.ListProposalVotesOutput, error) {
	var output managedblockchain.ListProposalVotesOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListProposalVotes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProposalVotesAsync(ctx workflow.Context, input *managedblockchain.ListProposalVotesInput) *ListProposalVotesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListProposalVotes", input)
	return &ListProposalVotesFuture{Future: future}
}

func (a *stub) ListProposals(ctx workflow.Context, input *managedblockchain.ListProposalsInput) (*managedblockchain.ListProposalsOutput, error) {
	var output managedblockchain.ListProposalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListProposals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProposalsAsync(ctx workflow.Context, input *managedblockchain.ListProposalsInput) *ListProposalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListProposals", input)
	return &ListProposalsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *managedblockchain.ListTagsForResourceInput) (*managedblockchain.ListTagsForResourceOutput, error) {
	var output managedblockchain.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *managedblockchain.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RejectInvitation(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) (*managedblockchain.RejectInvitationOutput, error) {
	var output managedblockchain.RejectInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-RejectInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectInvitationAsync(ctx workflow.Context, input *managedblockchain.RejectInvitationInput) *RejectInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-RejectInvitation", input)
	return &RejectInvitationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *managedblockchain.TagResourceInput) (*managedblockchain.TagResourceOutput, error) {
	var output managedblockchain.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *managedblockchain.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *managedblockchain.UntagResourceInput) (*managedblockchain.UntagResourceOutput, error) {
	var output managedblockchain.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *managedblockchain.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateMember(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) (*managedblockchain.UpdateMemberOutput, error) {
	var output managedblockchain.UpdateMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UpdateMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMemberAsync(ctx workflow.Context, input *managedblockchain.UpdateMemberInput) *UpdateMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UpdateMember", input)
	return &UpdateMemberFuture{Future: future}
}

func (a *stub) UpdateNode(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) (*managedblockchain.UpdateNodeOutput, error) {
	var output managedblockchain.UpdateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UpdateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNodeAsync(ctx workflow.Context, input *managedblockchain.UpdateNodeInput) *UpdateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-UpdateNode", input)
	return &UpdateNodeFuture{Future: future}
}

func (a *stub) VoteOnProposal(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) (*managedblockchain.VoteOnProposalOutput, error) {
	var output managedblockchain.VoteOnProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-managedblockchain-VoteOnProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VoteOnProposalAsync(ctx workflow.Context, input *managedblockchain.VoteOnProposalInput) *VoteOnProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-managedblockchain-VoteOnProposal", input)
	return &VoteOnProposalFuture{Future: future}
}
