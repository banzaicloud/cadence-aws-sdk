// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package amplifystub

import (
	"github.com/aws/aws-sdk-go/service/amplify"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AmplifyCreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateAppFuture) Get(ctx workflow.Context) (*amplify.CreateAppOutput, error) {
	var output amplify.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateBackendEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.CreateBackendEnvironmentOutput, error) {
	var output amplify.CreateBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateBranchFuture) Get(ctx workflow.Context) (*amplify.CreateBranchOutput, error) {
	var output amplify.CreateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateDeploymentFuture) Get(ctx workflow.Context) (*amplify.CreateDeploymentOutput, error) {
	var output amplify.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateDomainAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.CreateDomainAssociationOutput, error) {
	var output amplify.CreateDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyCreateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyCreateWebhookFuture) Get(ctx workflow.Context) (*amplify.CreateWebhookOutput, error) {
	var output amplify.CreateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteAppFuture) Get(ctx workflow.Context) (*amplify.DeleteAppOutput, error) {
	var output amplify.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteBackendEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.DeleteBackendEnvironmentOutput, error) {
	var output amplify.DeleteBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteBranchFuture) Get(ctx workflow.Context) (*amplify.DeleteBranchOutput, error) {
	var output amplify.DeleteBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteDomainAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.DeleteDomainAssociationOutput, error) {
	var output amplify.DeleteDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteJobFuture) Get(ctx workflow.Context) (*amplify.DeleteJobOutput, error) {
	var output amplify.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyDeleteWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyDeleteWebhookFuture) Get(ctx workflow.Context) (*amplify.DeleteWebhookOutput, error) {
	var output amplify.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGenerateAccessLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGenerateAccessLogsFuture) Get(ctx workflow.Context) (*amplify.GenerateAccessLogsOutput, error) {
	var output amplify.GenerateAccessLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetAppFuture) Get(ctx workflow.Context) (*amplify.GetAppOutput, error) {
	var output amplify.GetAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetArtifactUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetArtifactUrlFuture) Get(ctx workflow.Context) (*amplify.GetArtifactUrlOutput, error) {
	var output amplify.GetArtifactUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetBackendEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetBackendEnvironmentFuture) Get(ctx workflow.Context) (*amplify.GetBackendEnvironmentOutput, error) {
	var output amplify.GetBackendEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetBranchFuture) Get(ctx workflow.Context) (*amplify.GetBranchOutput, error) {
	var output amplify.GetBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetDomainAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.GetDomainAssociationOutput, error) {
	var output amplify.GetDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetJobFuture) Get(ctx workflow.Context) (*amplify.GetJobOutput, error) {
	var output amplify.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyGetWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyGetWebhookFuture) Get(ctx workflow.Context) (*amplify.GetWebhookOutput, error) {
	var output amplify.GetWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListAppsFuture) Get(ctx workflow.Context) (*amplify.ListAppsOutput, error) {
	var output amplify.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListArtifactsFuture) Get(ctx workflow.Context) (*amplify.ListArtifactsOutput, error) {
	var output amplify.ListArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListBackendEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListBackendEnvironmentsFuture) Get(ctx workflow.Context) (*amplify.ListBackendEnvironmentsOutput, error) {
	var output amplify.ListBackendEnvironmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListBranchesFuture) Get(ctx workflow.Context) (*amplify.ListBranchesOutput, error) {
	var output amplify.ListBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListDomainAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListDomainAssociationsFuture) Get(ctx workflow.Context) (*amplify.ListDomainAssociationsOutput, error) {
	var output amplify.ListDomainAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListJobsFuture) Get(ctx workflow.Context) (*amplify.ListJobsOutput, error) {
	var output amplify.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListTagsForResourceFuture) Get(ctx workflow.Context) (*amplify.ListTagsForResourceOutput, error) {
	var output amplify.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyListWebhooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyListWebhooksFuture) Get(ctx workflow.Context) (*amplify.ListWebhooksOutput, error) {
	var output amplify.ListWebhooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStartDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyStartDeploymentFuture) Get(ctx workflow.Context) (*amplify.StartDeploymentOutput, error) {
	var output amplify.StartDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStartJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyStartJobFuture) Get(ctx workflow.Context) (*amplify.StartJobOutput, error) {
	var output amplify.StartJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyStopJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyStopJobFuture) Get(ctx workflow.Context) (*amplify.StopJobOutput, error) {
	var output amplify.StopJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyTagResourceFuture) Get(ctx workflow.Context) (*amplify.TagResourceOutput, error) {
	var output amplify.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyUntagResourceFuture) Get(ctx workflow.Context) (*amplify.UntagResourceOutput, error) {
	var output amplify.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyUpdateAppFuture) Get(ctx workflow.Context) (*amplify.UpdateAppOutput, error) {
	var output amplify.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyUpdateBranchFuture) Get(ctx workflow.Context) (*amplify.UpdateBranchOutput, error) {
	var output amplify.UpdateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateDomainAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyUpdateDomainAssociationFuture) Get(ctx workflow.Context) (*amplify.UpdateDomainAssociationOutput, error) {
	var output amplify.UpdateDomainAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AmplifyUpdateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AmplifyUpdateWebhookFuture) Get(ctx workflow.Context) (*amplify.UpdateWebhookOutput, error) {
	var output amplify.UpdateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApp(ctx workflow.Context, input *amplify.CreateAppInput) (*amplify.CreateAppOutput, error) {
	var output amplify.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppAsync(ctx workflow.Context, input *amplify.CreateAppInput) *AmplifyCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateApp", input)
	return &AmplifyCreateAppFuture{Future: future}
}

func (a *stub) CreateBackendEnvironment(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) (*amplify.CreateBackendEnvironmentOutput, error) {
	var output amplify.CreateBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackendEnvironmentAsync(ctx workflow.Context, input *amplify.CreateBackendEnvironmentInput) *AmplifyCreateBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateBackendEnvironment", input)
	return &AmplifyCreateBackendEnvironmentFuture{Future: future}
}

func (a *stub) CreateBranch(ctx workflow.Context, input *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error) {
	var output amplify.CreateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBranchAsync(ctx workflow.Context, input *amplify.CreateBranchInput) *AmplifyCreateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateBranch", input)
	return &AmplifyCreateBranchFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *amplify.CreateDeploymentInput) (*amplify.CreateDeploymentOutput, error) {
	var output amplify.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *amplify.CreateDeploymentInput) *AmplifyCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateDeployment", input)
	return &AmplifyCreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDomainAssociation(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error) {
	var output amplify.CreateDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAssociationAsync(ctx workflow.Context, input *amplify.CreateDomainAssociationInput) *AmplifyCreateDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateDomainAssociation", input)
	return &AmplifyCreateDomainAssociationFuture{Future: future}
}

func (a *stub) CreateWebhook(ctx workflow.Context, input *amplify.CreateWebhookInput) (*amplify.CreateWebhookOutput, error) {
	var output amplify.CreateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-CreateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebhookAsync(ctx workflow.Context, input *amplify.CreateWebhookInput) *AmplifyCreateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-CreateWebhook", input)
	return &AmplifyCreateWebhookFuture{Future: future}
}

func (a *stub) DeleteApp(ctx workflow.Context, input *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error) {
	var output amplify.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppAsync(ctx workflow.Context, input *amplify.DeleteAppInput) *AmplifyDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteApp", input)
	return &AmplifyDeleteAppFuture{Future: future}
}

func (a *stub) DeleteBackendEnvironment(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) (*amplify.DeleteBackendEnvironmentOutput, error) {
	var output amplify.DeleteBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackendEnvironmentAsync(ctx workflow.Context, input *amplify.DeleteBackendEnvironmentInput) *AmplifyDeleteBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteBackendEnvironment", input)
	return &AmplifyDeleteBackendEnvironmentFuture{Future: future}
}

func (a *stub) DeleteBranch(ctx workflow.Context, input *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error) {
	var output amplify.DeleteBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBranchAsync(ctx workflow.Context, input *amplify.DeleteBranchInput) *AmplifyDeleteBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteBranch", input)
	return &AmplifyDeleteBranchFuture{Future: future}
}

func (a *stub) DeleteDomainAssociation(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error) {
	var output amplify.DeleteDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAssociationAsync(ctx workflow.Context, input *amplify.DeleteDomainAssociationInput) *AmplifyDeleteDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteDomainAssociation", input)
	return &AmplifyDeleteDomainAssociationFuture{Future: future}
}

func (a *stub) DeleteJob(ctx workflow.Context, input *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error) {
	var output amplify.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobAsync(ctx workflow.Context, input *amplify.DeleteJobInput) *AmplifyDeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteJob", input)
	return &AmplifyDeleteJobFuture{Future: future}
}

func (a *stub) DeleteWebhook(ctx workflow.Context, input *amplify.DeleteWebhookInput) (*amplify.DeleteWebhookOutput, error) {
	var output amplify.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebhookAsync(ctx workflow.Context, input *amplify.DeleteWebhookInput) *AmplifyDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-DeleteWebhook", input)
	return &AmplifyDeleteWebhookFuture{Future: future}
}

func (a *stub) GenerateAccessLogs(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) (*amplify.GenerateAccessLogsOutput, error) {
	var output amplify.GenerateAccessLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GenerateAccessLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateAccessLogsAsync(ctx workflow.Context, input *amplify.GenerateAccessLogsInput) *AmplifyGenerateAccessLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GenerateAccessLogs", input)
	return &AmplifyGenerateAccessLogsFuture{Future: future}
}

func (a *stub) GetApp(ctx workflow.Context, input *amplify.GetAppInput) (*amplify.GetAppOutput, error) {
	var output amplify.GetAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppAsync(ctx workflow.Context, input *amplify.GetAppInput) *AmplifyGetAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetApp", input)
	return &AmplifyGetAppFuture{Future: future}
}

func (a *stub) GetArtifactUrl(ctx workflow.Context, input *amplify.GetArtifactUrlInput) (*amplify.GetArtifactUrlOutput, error) {
	var output amplify.GetArtifactUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetArtifactUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetArtifactUrlAsync(ctx workflow.Context, input *amplify.GetArtifactUrlInput) *AmplifyGetArtifactUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetArtifactUrl", input)
	return &AmplifyGetArtifactUrlFuture{Future: future}
}

func (a *stub) GetBackendEnvironment(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) (*amplify.GetBackendEnvironmentOutput, error) {
	var output amplify.GetBackendEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetBackendEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackendEnvironmentAsync(ctx workflow.Context, input *amplify.GetBackendEnvironmentInput) *AmplifyGetBackendEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetBackendEnvironment", input)
	return &AmplifyGetBackendEnvironmentFuture{Future: future}
}

func (a *stub) GetBranch(ctx workflow.Context, input *amplify.GetBranchInput) (*amplify.GetBranchOutput, error) {
	var output amplify.GetBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBranchAsync(ctx workflow.Context, input *amplify.GetBranchInput) *AmplifyGetBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetBranch", input)
	return &AmplifyGetBranchFuture{Future: future}
}

func (a *stub) GetDomainAssociation(ctx workflow.Context, input *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error) {
	var output amplify.GetDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainAssociationAsync(ctx workflow.Context, input *amplify.GetDomainAssociationInput) *AmplifyGetDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetDomainAssociation", input)
	return &AmplifyGetDomainAssociationFuture{Future: future}
}

func (a *stub) GetJob(ctx workflow.Context, input *amplify.GetJobInput) (*amplify.GetJobOutput, error) {
	var output amplify.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobAsync(ctx workflow.Context, input *amplify.GetJobInput) *AmplifyGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetJob", input)
	return &AmplifyGetJobFuture{Future: future}
}

func (a *stub) GetWebhook(ctx workflow.Context, input *amplify.GetWebhookInput) (*amplify.GetWebhookOutput, error) {
	var output amplify.GetWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-GetWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWebhookAsync(ctx workflow.Context, input *amplify.GetWebhookInput) *AmplifyGetWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-GetWebhook", input)
	return &AmplifyGetWebhookFuture{Future: future}
}

func (a *stub) ListApps(ctx workflow.Context, input *amplify.ListAppsInput) (*amplify.ListAppsOutput, error) {
	var output amplify.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppsAsync(ctx workflow.Context, input *amplify.ListAppsInput) *AmplifyListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListApps", input)
	return &AmplifyListAppsFuture{Future: future}
}

func (a *stub) ListArtifacts(ctx workflow.Context, input *amplify.ListArtifactsInput) (*amplify.ListArtifactsOutput, error) {
	var output amplify.ListArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListArtifactsAsync(ctx workflow.Context, input *amplify.ListArtifactsInput) *AmplifyListArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListArtifacts", input)
	return &AmplifyListArtifactsFuture{Future: future}
}

func (a *stub) ListBackendEnvironments(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) (*amplify.ListBackendEnvironmentsOutput, error) {
	var output amplify.ListBackendEnvironmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListBackendEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackendEnvironmentsAsync(ctx workflow.Context, input *amplify.ListBackendEnvironmentsInput) *AmplifyListBackendEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListBackendEnvironments", input)
	return &AmplifyListBackendEnvironmentsFuture{Future: future}
}

func (a *stub) ListBranches(ctx workflow.Context, input *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error) {
	var output amplify.ListBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBranchesAsync(ctx workflow.Context, input *amplify.ListBranchesInput) *AmplifyListBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListBranches", input)
	return &AmplifyListBranchesFuture{Future: future}
}

func (a *stub) ListDomainAssociations(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error) {
	var output amplify.ListDomainAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListDomainAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainAssociationsAsync(ctx workflow.Context, input *amplify.ListDomainAssociationsInput) *AmplifyListDomainAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListDomainAssociations", input)
	return &AmplifyListDomainAssociationsFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *amplify.ListJobsInput) (*amplify.ListJobsOutput, error) {
	var output amplify.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *amplify.ListJobsInput) *AmplifyListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListJobs", input)
	return &AmplifyListJobsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *amplify.ListTagsForResourceInput) (*amplify.ListTagsForResourceOutput, error) {
	var output amplify.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *amplify.ListTagsForResourceInput) *AmplifyListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListTagsForResource", input)
	return &AmplifyListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebhooks(ctx workflow.Context, input *amplify.ListWebhooksInput) (*amplify.ListWebhooksOutput, error) {
	var output amplify.ListWebhooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-ListWebhooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebhooksAsync(ctx workflow.Context, input *amplify.ListWebhooksInput) *AmplifyListWebhooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-ListWebhooks", input)
	return &AmplifyListWebhooksFuture{Future: future}
}

func (a *stub) StartDeployment(ctx workflow.Context, input *amplify.StartDeploymentInput) (*amplify.StartDeploymentOutput, error) {
	var output amplify.StartDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-StartDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDeploymentAsync(ctx workflow.Context, input *amplify.StartDeploymentInput) *AmplifyStartDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-StartDeployment", input)
	return &AmplifyStartDeploymentFuture{Future: future}
}

func (a *stub) StartJob(ctx workflow.Context, input *amplify.StartJobInput) (*amplify.StartJobOutput, error) {
	var output amplify.StartJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-StartJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartJobAsync(ctx workflow.Context, input *amplify.StartJobInput) *AmplifyStartJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-StartJob", input)
	return &AmplifyStartJobFuture{Future: future}
}

func (a *stub) StopJob(ctx workflow.Context, input *amplify.StopJobInput) (*amplify.StopJobOutput, error) {
	var output amplify.StopJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-StopJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopJobAsync(ctx workflow.Context, input *amplify.StopJobInput) *AmplifyStopJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-StopJob", input)
	return &AmplifyStopJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *amplify.TagResourceInput) (*amplify.TagResourceOutput, error) {
	var output amplify.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *amplify.TagResourceInput) *AmplifyTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-TagResource", input)
	return &AmplifyTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *amplify.UntagResourceInput) (*amplify.UntagResourceOutput, error) {
	var output amplify.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *amplify.UntagResourceInput) *AmplifyUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-UntagResource", input)
	return &AmplifyUntagResourceFuture{Future: future}
}

func (a *stub) UpdateApp(ctx workflow.Context, input *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error) {
	var output amplify.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppAsync(ctx workflow.Context, input *amplify.UpdateAppInput) *AmplifyUpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateApp", input)
	return &AmplifyUpdateAppFuture{Future: future}
}

func (a *stub) UpdateBranch(ctx workflow.Context, input *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error) {
	var output amplify.UpdateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBranchAsync(ctx workflow.Context, input *amplify.UpdateBranchInput) *AmplifyUpdateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateBranch", input)
	return &AmplifyUpdateBranchFuture{Future: future}
}

func (a *stub) UpdateDomainAssociation(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error) {
	var output amplify.UpdateDomainAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateDomainAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainAssociationAsync(ctx workflow.Context, input *amplify.UpdateDomainAssociationInput) *AmplifyUpdateDomainAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateDomainAssociation", input)
	return &AmplifyUpdateDomainAssociationFuture{Future: future}
}

func (a *stub) UpdateWebhook(ctx workflow.Context, input *amplify.UpdateWebhookInput) (*amplify.UpdateWebhookOutput, error) {
	var output amplify.UpdateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebhookAsync(ctx workflow.Context, input *amplify.UpdateWebhookInput) *AmplifyUpdateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-amplify-UpdateWebhook", input)
	return &AmplifyUpdateWebhookFuture{Future: future}
}
