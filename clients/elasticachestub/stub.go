// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elasticachestub

import (
	"github.com/aws/aws-sdk-go/service/elasticache"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeCacheSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchApplyUpdateActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchApplyUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchStopUpdateActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchStopUpdateActionFuture) Get(ctx workflow.Context) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CompleteMigrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteMigrationFuture) Get(ctx workflow.Context) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopySnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopySnapshotFuture) Get(ctx workflow.Context) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCacheClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCacheParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCacheSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCacheSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotFuture) Get(ctx workflow.Context) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserGroupFuture) Get(ctx workflow.Context) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DecreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DecreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DecreaseReplicaCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DecreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCacheClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCacheParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCacheSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCacheSecurityGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCacheSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotFuture) Get(ctx workflow.Context) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserGroupFuture) Get(ctx workflow.Context) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheClustersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheEngineVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheEngineVersionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheParameterGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheSecurityGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheSubnetGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEngineDefaultParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGlobalReplicationGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGlobalReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedCacheNodesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedCacheNodesFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedCacheNodesOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedCacheNodesOfferingsFuture) Get(ctx workflow.Context) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServiceUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServiceUpdatesFuture) Get(ctx workflow.Context) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotsFuture) Get(ctx workflow.Context) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUpdateActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUpdateActionsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserGroupsFuture) Get(ctx workflow.Context) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUsersFuture) Get(ctx workflow.Context) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FailoverGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FailoverGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IncreaseNodeGroupsInGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IncreaseNodeGroupsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IncreaseReplicaCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IncreaseReplicaCountFuture) Get(ctx workflow.Context) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAllowedNodeTypeModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAllowedNodeTypeModificationsFuture) Get(ctx workflow.Context) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyCacheClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyCacheParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyCacheSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyCacheSubnetGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReplicationGroupShardConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReplicationGroupShardConfigurationFuture) Get(ctx workflow.Context) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyUserFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyUserGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyUserGroupFuture) Get(ctx workflow.Context) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseReservedCacheNodesOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseReservedCacheNodesOfferingFuture) Get(ctx workflow.Context) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebalanceSlotsInGlobalReplicationGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebalanceSlotsInGlobalReplicationGroupFuture) Get(ctx workflow.Context) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootCacheClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootCacheClusterFuture) Get(ctx workflow.Context) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetCacheParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetCacheParameterGroupFuture) Get(ctx workflow.Context) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeCacheSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeCacheSecurityGroupIngressFuture) Get(ctx workflow.Context) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMigrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMigrationFuture) Get(ctx workflow.Context) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestFailoverFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestFailoverFuture) Get(ctx workflow.Context) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *elasticache.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) AuthorizeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.AuthorizeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-AuthorizeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.AuthorizeCacheSecurityGroupIngressInput) *AuthorizeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-AuthorizeCacheSecurityGroupIngress", input)
	return &AuthorizeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *stub) BatchApplyUpdateAction(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	var output elasticache.BatchApplyUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-BatchApplyUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchApplyUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchApplyUpdateActionInput) *BatchApplyUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-BatchApplyUpdateAction", input)
	return &BatchApplyUpdateActionFuture{Future: future}
}

func (a *stub) BatchStopUpdateAction(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	var output elasticache.BatchStopUpdateActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-BatchStopUpdateAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStopUpdateActionAsync(ctx workflow.Context, input *elasticache.BatchStopUpdateActionInput) *BatchStopUpdateActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-BatchStopUpdateAction", input)
	return &BatchStopUpdateActionFuture{Future: future}
}

func (a *stub) CompleteMigration(ctx workflow.Context, input *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	var output elasticache.CompleteMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CompleteMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteMigrationAsync(ctx workflow.Context, input *elasticache.CompleteMigrationInput) *CompleteMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CompleteMigration", input)
	return &CompleteMigrationFuture{Future: future}
}

func (a *stub) CopySnapshot(ctx workflow.Context, input *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	var output elasticache.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopySnapshotAsync(ctx workflow.Context, input *elasticache.CopySnapshotInput) *CopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CopySnapshot", input)
	return &CopySnapshotFuture{Future: future}
}

func (a *stub) CreateCacheCluster(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	var output elasticache.CreateCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCacheClusterAsync(ctx workflow.Context, input *elasticache.CreateCacheClusterInput) *CreateCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheCluster", input)
	return &CreateCacheClusterFuture{Future: future}
}

func (a *stub) CreateCacheParameterGroup(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	var output elasticache.CreateCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheParameterGroupInput) *CreateCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheParameterGroup", input)
	return &CreateCacheParameterGroupFuture{Future: future}
}

func (a *stub) CreateCacheSecurityGroup(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	var output elasticache.CreateCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSecurityGroupInput) *CreateCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheSecurityGroup", input)
	return &CreateCacheSecurityGroupFuture{Future: future}
}

func (a *stub) CreateCacheSubnetGroup(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	var output elasticache.CreateCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.CreateCacheSubnetGroupInput) *CreateCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateCacheSubnetGroup", input)
	return &CreateCacheSubnetGroupFuture{Future: future}
}

func (a *stub) CreateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	var output elasticache.CreateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateGlobalReplicationGroupInput) *CreateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateGlobalReplicationGroup", input)
	return &CreateGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) CreateReplicationGroup(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	var output elasticache.CreateReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationGroupAsync(ctx workflow.Context, input *elasticache.CreateReplicationGroupInput) *CreateReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateReplicationGroup", input)
	return &CreateReplicationGroupFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	var output elasticache.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *elasticache.CreateSnapshotInput) *CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateSnapshot", input)
	return &CreateSnapshotFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error) {
	var output elasticache.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *elasticache.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) CreateUserGroup(ctx workflow.Context, input *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error) {
	var output elasticache.CreateUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserGroupAsync(ctx workflow.Context, input *elasticache.CreateUserGroupInput) *CreateUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-CreateUserGroup", input)
	return &CreateUserGroupFuture{Future: future}
}

func (a *stub) DecreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DecreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DecreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) *DecreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DecreaseNodeGroupsInGlobalReplicationGroup", input)
	return &DecreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) DecreaseReplicaCount(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	var output elasticache.DecreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DecreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DecreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.DecreaseReplicaCountInput) *DecreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DecreaseReplicaCount", input)
	return &DecreaseReplicaCountFuture{Future: future}
}

func (a *stub) DeleteCacheCluster(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	var output elasticache.DeleteCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCacheClusterAsync(ctx workflow.Context, input *elasticache.DeleteCacheClusterInput) *DeleteCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheCluster", input)
	return &DeleteCacheClusterFuture{Future: future}
}

func (a *stub) DeleteCacheParameterGroup(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	var output elasticache.DeleteCacheParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheParameterGroupInput) *DeleteCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheParameterGroup", input)
	return &DeleteCacheParameterGroupFuture{Future: future}
}

func (a *stub) DeleteCacheSecurityGroup(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	var output elasticache.DeleteCacheSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCacheSecurityGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSecurityGroupInput) *DeleteCacheSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheSecurityGroup", input)
	return &DeleteCacheSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteCacheSubnetGroup(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	var output elasticache.DeleteCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.DeleteCacheSubnetGroupInput) *DeleteCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteCacheSubnetGroup", input)
	return &DeleteCacheSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	var output elasticache.DeleteGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteGlobalReplicationGroupInput) *DeleteGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteGlobalReplicationGroup", input)
	return &DeleteGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) DeleteReplicationGroup(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	var output elasticache.DeleteReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationGroupAsync(ctx workflow.Context, input *elasticache.DeleteReplicationGroupInput) *DeleteReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteReplicationGroup", input)
	return &DeleteReplicationGroupFuture{Future: future}
}

func (a *stub) DeleteSnapshot(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	var output elasticache.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotAsync(ctx workflow.Context, input *elasticache.DeleteSnapshotInput) *DeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteSnapshot", input)
	return &DeleteSnapshotFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error) {
	var output elasticache.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *elasticache.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DeleteUserGroup(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error) {
	var output elasticache.DeleteUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserGroupAsync(ctx workflow.Context, input *elasticache.DeleteUserGroupInput) *DeleteUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DeleteUserGroup", input)
	return &DeleteUserGroupFuture{Future: future}
}

func (a *stub) DescribeCacheClusters(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	var output elasticache.DescribeCacheClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheClustersAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *DescribeCacheClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheClusters", input)
	return &DescribeCacheClustersFuture{Future: future}
}

func (a *stub) DescribeCacheEngineVersions(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	var output elasticache.DescribeCacheEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheEngineVersionsAsync(ctx workflow.Context, input *elasticache.DescribeCacheEngineVersionsInput) *DescribeCacheEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheEngineVersions", input)
	return &DescribeCacheEngineVersionsFuture{Future: future}
}

func (a *stub) DescribeCacheParameterGroups(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	var output elasticache.DescribeCacheParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheParameterGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheParameterGroupsInput) *DescribeCacheParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheParameterGroups", input)
	return &DescribeCacheParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeCacheParameters(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	var output elasticache.DescribeCacheParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheParametersAsync(ctx workflow.Context, input *elasticache.DescribeCacheParametersInput) *DescribeCacheParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheParameters", input)
	return &DescribeCacheParametersFuture{Future: future}
}

func (a *stub) DescribeCacheSecurityGroups(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	var output elasticache.DescribeCacheSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheSecurityGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSecurityGroupsInput) *DescribeCacheSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheSecurityGroups", input)
	return &DescribeCacheSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeCacheSubnetGroups(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	var output elasticache.DescribeCacheSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheSubnetGroupsAsync(ctx workflow.Context, input *elasticache.DescribeCacheSubnetGroupsInput) *DescribeCacheSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeCacheSubnetGroups", input)
	return &DescribeCacheSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultParameters(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	var output elasticache.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *elasticache.DescribeEngineDefaultParametersInput) *DescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeEngineDefaultParameters", input)
	return &DescribeEngineDefaultParametersFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	var output elasticache.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *elasticache.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeGlobalReplicationGroups(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	var output elasticache.DescribeGlobalReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeGlobalReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeGlobalReplicationGroupsInput) *DescribeGlobalReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeGlobalReplicationGroups", input)
	return &DescribeGlobalReplicationGroupsFuture{Future: future}
}

func (a *stub) DescribeReplicationGroups(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	var output elasticache.DescribeReplicationGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReplicationGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationGroupsAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *DescribeReplicationGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReplicationGroups", input)
	return &DescribeReplicationGroupsFuture{Future: future}
}

func (a *stub) DescribeReservedCacheNodes(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReservedCacheNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedCacheNodesAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesInput) *DescribeReservedCacheNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReservedCacheNodes", input)
	return &DescribeReservedCacheNodesFuture{Future: future}
}

func (a *stub) DescribeReservedCacheNodesOfferings(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	var output elasticache.DescribeReservedCacheNodesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReservedCacheNodesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedCacheNodesOfferingsAsync(ctx workflow.Context, input *elasticache.DescribeReservedCacheNodesOfferingsInput) *DescribeReservedCacheNodesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeReservedCacheNodesOfferings", input)
	return &DescribeReservedCacheNodesOfferingsFuture{Future: future}
}

func (a *stub) DescribeServiceUpdates(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	var output elasticache.DescribeServiceUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeServiceUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceUpdatesAsync(ctx workflow.Context, input *elasticache.DescribeServiceUpdatesInput) *DescribeServiceUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeServiceUpdates", input)
	return &DescribeServiceUpdatesFuture{Future: future}
}

func (a *stub) DescribeSnapshots(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	var output elasticache.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotsAsync(ctx workflow.Context, input *elasticache.DescribeSnapshotsInput) *DescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeSnapshots", input)
	return &DescribeSnapshotsFuture{Future: future}
}

func (a *stub) DescribeUpdateActions(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	var output elasticache.DescribeUpdateActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUpdateActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUpdateActionsAsync(ctx workflow.Context, input *elasticache.DescribeUpdateActionsInput) *DescribeUpdateActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUpdateActions", input)
	return &DescribeUpdateActionsFuture{Future: future}
}

func (a *stub) DescribeUserGroups(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error) {
	var output elasticache.DescribeUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserGroupsAsync(ctx workflow.Context, input *elasticache.DescribeUserGroupsInput) *DescribeUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUserGroups", input)
	return &DescribeUserGroupsFuture{Future: future}
}

func (a *stub) DescribeUsers(ctx workflow.Context, input *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error) {
	var output elasticache.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsersAsync(ctx workflow.Context, input *elasticache.DescribeUsersInput) *DescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DescribeUsers", input)
	return &DescribeUsersFuture{Future: future}
}

func (a *stub) DisassociateGlobalReplicationGroup(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	var output elasticache.DisassociateGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-DisassociateGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.DisassociateGlobalReplicationGroupInput) *DisassociateGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-DisassociateGlobalReplicationGroup", input)
	return &DisassociateGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) FailoverGlobalReplicationGroup(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	var output elasticache.FailoverGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-FailoverGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FailoverGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.FailoverGlobalReplicationGroupInput) *FailoverGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-FailoverGlobalReplicationGroup", input)
	return &FailoverGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) IncreaseNodeGroupsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	var output elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-IncreaseNodeGroupsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IncreaseNodeGroupsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) *IncreaseNodeGroupsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-IncreaseNodeGroupsInGlobalReplicationGroup", input)
	return &IncreaseNodeGroupsInGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) IncreaseReplicaCount(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	var output elasticache.IncreaseReplicaCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-IncreaseReplicaCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IncreaseReplicaCountAsync(ctx workflow.Context, input *elasticache.IncreaseReplicaCountInput) *IncreaseReplicaCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-IncreaseReplicaCount", input)
	return &IncreaseReplicaCountFuture{Future: future}
}

func (a *stub) ListAllowedNodeTypeModifications(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	var output elasticache.ListAllowedNodeTypeModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ListAllowedNodeTypeModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAllowedNodeTypeModificationsAsync(ctx workflow.Context, input *elasticache.ListAllowedNodeTypeModificationsInput) *ListAllowedNodeTypeModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ListAllowedNodeTypeModifications", input)
	return &ListAllowedNodeTypeModificationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticache.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyCacheCluster(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	var output elasticache.ModifyCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCacheClusterAsync(ctx workflow.Context, input *elasticache.ModifyCacheClusterInput) *ModifyCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheCluster", input)
	return &ModifyCacheClusterFuture{Future: future}
}

func (a *stub) ModifyCacheParameterGroup(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheParameterGroupInput) *ModifyCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheParameterGroup", input)
	return &ModifyCacheParameterGroupFuture{Future: future}
}

func (a *stub) ModifyCacheSubnetGroup(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	var output elasticache.ModifyCacheSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCacheSubnetGroupAsync(ctx workflow.Context, input *elasticache.ModifyCacheSubnetGroupInput) *ModifyCacheSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyCacheSubnetGroup", input)
	return &ModifyCacheSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyGlobalReplicationGroup(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	var output elasticache.ModifyGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyGlobalReplicationGroupInput) *ModifyGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyGlobalReplicationGroup", input)
	return &ModifyGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) ModifyReplicationGroup(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	var output elasticache.ModifyReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationGroupAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupInput) *ModifyReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyReplicationGroup", input)
	return &ModifyReplicationGroupFuture{Future: future}
}

func (a *stub) ModifyReplicationGroupShardConfiguration(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	var output elasticache.ModifyReplicationGroupShardConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyReplicationGroupShardConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationGroupShardConfigurationAsync(ctx workflow.Context, input *elasticache.ModifyReplicationGroupShardConfigurationInput) *ModifyReplicationGroupShardConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyReplicationGroupShardConfiguration", input)
	return &ModifyReplicationGroupShardConfigurationFuture{Future: future}
}

func (a *stub) ModifyUser(ctx workflow.Context, input *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error) {
	var output elasticache.ModifyUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyUserAsync(ctx workflow.Context, input *elasticache.ModifyUserInput) *ModifyUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyUser", input)
	return &ModifyUserFuture{Future: future}
}

func (a *stub) ModifyUserGroup(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error) {
	var output elasticache.ModifyUserGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyUserGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyUserGroupAsync(ctx workflow.Context, input *elasticache.ModifyUserGroupInput) *ModifyUserGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ModifyUserGroup", input)
	return &ModifyUserGroupFuture{Future: future}
}

func (a *stub) PurchaseReservedCacheNodesOffering(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	var output elasticache.PurchaseReservedCacheNodesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-PurchaseReservedCacheNodesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedCacheNodesOfferingAsync(ctx workflow.Context, input *elasticache.PurchaseReservedCacheNodesOfferingInput) *PurchaseReservedCacheNodesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-PurchaseReservedCacheNodesOffering", input)
	return &PurchaseReservedCacheNodesOfferingFuture{Future: future}
}

func (a *stub) RebalanceSlotsInGlobalReplicationGroup(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	var output elasticache.RebalanceSlotsInGlobalReplicationGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-RebalanceSlotsInGlobalReplicationGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebalanceSlotsInGlobalReplicationGroupAsync(ctx workflow.Context, input *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) *RebalanceSlotsInGlobalReplicationGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-RebalanceSlotsInGlobalReplicationGroup", input)
	return &RebalanceSlotsInGlobalReplicationGroupFuture{Future: future}
}

func (a *stub) RebootCacheCluster(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	var output elasticache.RebootCacheClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-RebootCacheCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootCacheClusterAsync(ctx workflow.Context, input *elasticache.RebootCacheClusterInput) *RebootCacheClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-RebootCacheCluster", input)
	return &RebootCacheClusterFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	var output elasticache.TagListMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *elasticache.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetCacheParameterGroup(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	var output elasticache.CacheParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-ResetCacheParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetCacheParameterGroupAsync(ctx workflow.Context, input *elasticache.ResetCacheParameterGroupInput) *ResetCacheParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-ResetCacheParameterGroup", input)
	return &ResetCacheParameterGroupFuture{Future: future}
}

func (a *stub) RevokeCacheSecurityGroupIngress(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	var output elasticache.RevokeCacheSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-RevokeCacheSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeCacheSecurityGroupIngressAsync(ctx workflow.Context, input *elasticache.RevokeCacheSecurityGroupIngressInput) *RevokeCacheSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-RevokeCacheSecurityGroupIngress", input)
	return &RevokeCacheSecurityGroupIngressFuture{Future: future}
}

func (a *stub) StartMigration(ctx workflow.Context, input *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	var output elasticache.StartMigrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-StartMigration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMigrationAsync(ctx workflow.Context, input *elasticache.StartMigrationInput) *StartMigrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-StartMigration", input)
	return &StartMigrationFuture{Future: future}
}

func (a *stub) TestFailover(ctx workflow.Context, input *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	var output elasticache.TestFailoverOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticache-TestFailover", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestFailoverAsync(ctx workflow.Context, input *elasticache.TestFailoverInput) *TestFailoverFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-TestFailover", input)
	return &TestFailoverFuture{Future: future}
}

func (a *stub) WaitUntilCacheClusterAvailable(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilCacheClusterAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCacheClusterAvailableAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilCacheClusterAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilCacheClusterDeleted(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilCacheClusterDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCacheClusterDeletedAsync(ctx workflow.Context, input *elasticache.DescribeCacheClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilCacheClusterDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationGroupAvailable(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilReplicationGroupAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationGroupAvailableAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilReplicationGroupAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationGroupDeleted(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilReplicationGroupDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationGroupDeletedAsync(ctx workflow.Context, input *elasticache.DescribeReplicationGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticache-WaitUntilReplicationGroupDeleted", input)
	return clients.NewVoidFuture(future)
}
