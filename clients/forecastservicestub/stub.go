// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package forecastservicestub

import (
	"github.com/aws/aws-sdk-go/service/forecastservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateForecastFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateForecastFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateForecastExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePredictorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePredictorFuture) Get(ctx workflow.Context) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePredictorBacktestExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePredictorBacktestExportJobFuture) Get(ctx workflow.Context) (*forecastservice.CreatePredictorBacktestExportJobOutput, error) {
	var output forecastservice.CreatePredictorBacktestExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteForecastFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteForecastFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteForecastExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePredictorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePredictorBacktestExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePredictorBacktestExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DeletePredictorBacktestExportJobOutput, error) {
	var output forecastservice.DeletePredictorBacktestExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetImportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeForecastFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeForecastFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeForecastExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeForecastExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePredictorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePredictorFuture) Get(ctx workflow.Context) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePredictorBacktestExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePredictorBacktestExportJobFuture) Get(ctx workflow.Context) (*forecastservice.DescribePredictorBacktestExportJobOutput, error) {
	var output forecastservice.DescribePredictorBacktestExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccuracyMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccuracyMetricsFuture) Get(ctx workflow.Context) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetGroupsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetImportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetImportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetsFuture) Get(ctx workflow.Context) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListForecastExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListForecastExportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListForecastsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListForecastsFuture) Get(ctx workflow.Context) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPredictorBacktestExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPredictorBacktestExportJobsFuture) Get(ctx workflow.Context) (*forecastservice.ListPredictorBacktestExportJobsOutput, error) {
	var output forecastservice.ListPredictorBacktestExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPredictorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPredictorsFuture) Get(ctx workflow.Context) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDatasetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDatasetGroupFuture) Get(ctx workflow.Context) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataset(ctx workflow.Context, input *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error) {
	var output forecastservice.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetAsync(ctx workflow.Context, input *forecastservice.CreateDatasetInput) *CreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDataset", input)
	return &CreateDatasetFuture{Future: future}
}

func (a *stub) CreateDatasetGroup(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error) {
	var output forecastservice.CreateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.CreateDatasetGroupInput) *CreateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDatasetGroup", input)
	return &CreateDatasetGroupFuture{Future: future}
}

func (a *stub) CreateDatasetImportJob(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error) {
	var output forecastservice.CreateDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.CreateDatasetImportJobInput) *CreateDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateDatasetImportJob", input)
	return &CreateDatasetImportJobFuture{Future: future}
}

func (a *stub) CreateForecast(ctx workflow.Context, input *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error) {
	var output forecastservice.CreateForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateForecastAsync(ctx workflow.Context, input *forecastservice.CreateForecastInput) *CreateForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateForecast", input)
	return &CreateForecastFuture{Future: future}
}

func (a *stub) CreateForecastExportJob(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error) {
	var output forecastservice.CreateForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateForecastExportJobAsync(ctx workflow.Context, input *forecastservice.CreateForecastExportJobInput) *CreateForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreateForecastExportJob", input)
	return &CreateForecastExportJobFuture{Future: future}
}

func (a *stub) CreatePredictor(ctx workflow.Context, input *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error) {
	var output forecastservice.CreatePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreatePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePredictorAsync(ctx workflow.Context, input *forecastservice.CreatePredictorInput) *CreatePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreatePredictor", input)
	return &CreatePredictorFuture{Future: future}
}

func (a *stub) CreatePredictorBacktestExportJob(ctx workflow.Context, input *forecastservice.CreatePredictorBacktestExportJobInput) (*forecastservice.CreatePredictorBacktestExportJobOutput, error) {
	var output forecastservice.CreatePredictorBacktestExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreatePredictorBacktestExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePredictorBacktestExportJobAsync(ctx workflow.Context, input *forecastservice.CreatePredictorBacktestExportJobInput) *CreatePredictorBacktestExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-CreatePredictorBacktestExportJob", input)
	return &CreatePredictorBacktestExportJobFuture{Future: future}
}

func (a *stub) DeleteDataset(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error) {
	var output forecastservice.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetInput) *DeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDataset", input)
	return &DeleteDatasetFuture{Future: future}
}

func (a *stub) DeleteDatasetGroup(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error) {
	var output forecastservice.DeleteDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetGroupInput) *DeleteDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDatasetGroup", input)
	return &DeleteDatasetGroupFuture{Future: future}
}

func (a *stub) DeleteDatasetImportJob(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	var output forecastservice.DeleteDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DeleteDatasetImportJobInput) *DeleteDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteDatasetImportJob", input)
	return &DeleteDatasetImportJobFuture{Future: future}
}

func (a *stub) DeleteForecast(ctx workflow.Context, input *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error) {
	var output forecastservice.DeleteForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteForecastAsync(ctx workflow.Context, input *forecastservice.DeleteForecastInput) *DeleteForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteForecast", input)
	return &DeleteForecastFuture{Future: future}
}

func (a *stub) DeleteForecastExportJob(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error) {
	var output forecastservice.DeleteForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DeleteForecastExportJobInput) *DeleteForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeleteForecastExportJob", input)
	return &DeleteForecastExportJobFuture{Future: future}
}

func (a *stub) DeletePredictor(ctx workflow.Context, input *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error) {
	var output forecastservice.DeletePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeletePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePredictorAsync(ctx workflow.Context, input *forecastservice.DeletePredictorInput) *DeletePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeletePredictor", input)
	return &DeletePredictorFuture{Future: future}
}

func (a *stub) DeletePredictorBacktestExportJob(ctx workflow.Context, input *forecastservice.DeletePredictorBacktestExportJobInput) (*forecastservice.DeletePredictorBacktestExportJobOutput, error) {
	var output forecastservice.DeletePredictorBacktestExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeletePredictorBacktestExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePredictorBacktestExportJobAsync(ctx workflow.Context, input *forecastservice.DeletePredictorBacktestExportJobInput) *DeletePredictorBacktestExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DeletePredictorBacktestExportJob", input)
	return &DeletePredictorBacktestExportJobFuture{Future: future}
}

func (a *stub) DescribeDataset(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error) {
	var output forecastservice.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetInput) *DescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDataset", input)
	return &DescribeDatasetFuture{Future: future}
}

func (a *stub) DescribeDatasetGroup(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error) {
	var output forecastservice.DescribeDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetGroupAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetGroupInput) *DescribeDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDatasetGroup", input)
	return &DescribeDatasetGroupFuture{Future: future}
}

func (a *stub) DescribeDatasetImportJob(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	var output forecastservice.DescribeDatasetImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDatasetImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetImportJobAsync(ctx workflow.Context, input *forecastservice.DescribeDatasetImportJobInput) *DescribeDatasetImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeDatasetImportJob", input)
	return &DescribeDatasetImportJobFuture{Future: future}
}

func (a *stub) DescribeForecast(ctx workflow.Context, input *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error) {
	var output forecastservice.DescribeForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeForecastAsync(ctx workflow.Context, input *forecastservice.DescribeForecastInput) *DescribeForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeForecast", input)
	return &DescribeForecastFuture{Future: future}
}

func (a *stub) DescribeForecastExportJob(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error) {
	var output forecastservice.DescribeForecastExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeForecastExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeForecastExportJobAsync(ctx workflow.Context, input *forecastservice.DescribeForecastExportJobInput) *DescribeForecastExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribeForecastExportJob", input)
	return &DescribeForecastExportJobFuture{Future: future}
}

func (a *stub) DescribePredictor(ctx workflow.Context, input *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error) {
	var output forecastservice.DescribePredictorOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribePredictor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePredictorAsync(ctx workflow.Context, input *forecastservice.DescribePredictorInput) *DescribePredictorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribePredictor", input)
	return &DescribePredictorFuture{Future: future}
}

func (a *stub) DescribePredictorBacktestExportJob(ctx workflow.Context, input *forecastservice.DescribePredictorBacktestExportJobInput) (*forecastservice.DescribePredictorBacktestExportJobOutput, error) {
	var output forecastservice.DescribePredictorBacktestExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribePredictorBacktestExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePredictorBacktestExportJobAsync(ctx workflow.Context, input *forecastservice.DescribePredictorBacktestExportJobInput) *DescribePredictorBacktestExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-DescribePredictorBacktestExportJob", input)
	return &DescribePredictorBacktestExportJobFuture{Future: future}
}

func (a *stub) GetAccuracyMetrics(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error) {
	var output forecastservice.GetAccuracyMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-GetAccuracyMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccuracyMetricsAsync(ctx workflow.Context, input *forecastservice.GetAccuracyMetricsInput) *GetAccuracyMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-GetAccuracyMetrics", input)
	return &GetAccuracyMetricsFuture{Future: future}
}

func (a *stub) ListDatasetGroups(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error) {
	var output forecastservice.ListDatasetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetGroupsAsync(ctx workflow.Context, input *forecastservice.ListDatasetGroupsInput) *ListDatasetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasetGroups", input)
	return &ListDatasetGroupsFuture{Future: future}
}

func (a *stub) ListDatasetImportJobs(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error) {
	var output forecastservice.ListDatasetImportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasetImportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetImportJobsAsync(ctx workflow.Context, input *forecastservice.ListDatasetImportJobsInput) *ListDatasetImportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasetImportJobs", input)
	return &ListDatasetImportJobsFuture{Future: future}
}

func (a *stub) ListDatasets(ctx workflow.Context, input *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error) {
	var output forecastservice.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetsAsync(ctx workflow.Context, input *forecastservice.ListDatasetsInput) *ListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListDatasets", input)
	return &ListDatasetsFuture{Future: future}
}

func (a *stub) ListForecastExportJobs(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error) {
	var output forecastservice.ListForecastExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListForecastExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListForecastExportJobsAsync(ctx workflow.Context, input *forecastservice.ListForecastExportJobsInput) *ListForecastExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListForecastExportJobs", input)
	return &ListForecastExportJobsFuture{Future: future}
}

func (a *stub) ListForecasts(ctx workflow.Context, input *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error) {
	var output forecastservice.ListForecastsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListForecasts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListForecastsAsync(ctx workflow.Context, input *forecastservice.ListForecastsInput) *ListForecastsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListForecasts", input)
	return &ListForecastsFuture{Future: future}
}

func (a *stub) ListPredictorBacktestExportJobs(ctx workflow.Context, input *forecastservice.ListPredictorBacktestExportJobsInput) (*forecastservice.ListPredictorBacktestExportJobsOutput, error) {
	var output forecastservice.ListPredictorBacktestExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListPredictorBacktestExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPredictorBacktestExportJobsAsync(ctx workflow.Context, input *forecastservice.ListPredictorBacktestExportJobsInput) *ListPredictorBacktestExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListPredictorBacktestExportJobs", input)
	return &ListPredictorBacktestExportJobsFuture{Future: future}
}

func (a *stub) ListPredictors(ctx workflow.Context, input *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error) {
	var output forecastservice.ListPredictorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListPredictors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPredictorsAsync(ctx workflow.Context, input *forecastservice.ListPredictorsInput) *ListPredictorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListPredictors", input)
	return &ListPredictorsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error) {
	var output forecastservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *forecastservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error) {
	var output forecastservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *forecastservice.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error) {
	var output forecastservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *forecastservice.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDatasetGroup(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error) {
	var output forecastservice.UpdateDatasetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-forecastservice-UpdateDatasetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatasetGroupAsync(ctx workflow.Context, input *forecastservice.UpdateDatasetGroupInput) *UpdateDatasetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-forecastservice-UpdateDatasetGroup", input)
	return &UpdateDatasetGroupFuture{Future: future}
}
