// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package databasemigrationservicestub

import (
	"github.com/aws/aws-sdk-go/service/databasemigrationservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DatabaseMigrationServiceAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceAddTagsToResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCancelReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCancelReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCreateEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCreateReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCreateReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCreateReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCreateReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceCreateReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceCreateReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDeleteReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDeleteReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeApplicableIndividualAssessmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeApplicableIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeCertificatesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeConnectionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeEndpointTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeEndpointTypesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeEndpointsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeEventsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeOrderableReplicationInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeOrderableReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeRefreshSchemasStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeRefreshSchemasStatusFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationSubnetGroupsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationTaskAssessmentRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationTaskAssessmentRunsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationTaskIndividualAssessmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationTaskIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeReplicationTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeReplicationTasksFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceDescribeTableStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceDescribeTableStatisticsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceImportCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceImportCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceModifyEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceModifyEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceModifyReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceModifyReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceModifyReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceModifyReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceModifyReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceModifyReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceRebootReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceRebootReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceRefreshSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceRefreshSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceReloadTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceReloadTablesFuture) Get(ctx workflow.Context) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceStartReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceStartReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceStartReplicationTaskAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceStartReplicationTaskAssessmentFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceStartReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceStartReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceStopReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceStopReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DatabaseMigrationServiceTestConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DatabaseMigrationServiceTestConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) *DatabaseMigrationServiceAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-AddTagsToResource", input)
	return &DatabaseMigrationServiceAddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) *DatabaseMigrationServiceApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ApplyPendingMaintenanceAction", input)
	return &DatabaseMigrationServiceApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) CancelReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CancelReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) *DatabaseMigrationServiceCancelReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CancelReplicationTaskAssessmentRun", input)
	return &DatabaseMigrationServiceCancelReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) *DatabaseMigrationServiceCreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEndpoint", input)
	return &DatabaseMigrationServiceCreateEndpointFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) *DatabaseMigrationServiceCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEventSubscription", input)
	return &DatabaseMigrationServiceCreateEventSubscriptionFuture{Future: future}
}

func (a *stub) CreateReplicationInstance(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) *DatabaseMigrationServiceCreateReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationInstance", input)
	return &DatabaseMigrationServiceCreateReplicationInstanceFuture{Future: future}
}

func (a *stub) CreateReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) *DatabaseMigrationServiceCreateReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationSubnetGroup", input)
	return &DatabaseMigrationServiceCreateReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) CreateReplicationTask(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) *DatabaseMigrationServiceCreateReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationTask", input)
	return &DatabaseMigrationServiceCreateReplicationTaskFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) *DatabaseMigrationServiceDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteCertificate", input)
	return &DatabaseMigrationServiceDeleteCertificateFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) *DatabaseMigrationServiceDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteConnection", input)
	return &DatabaseMigrationServiceDeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) *DatabaseMigrationServiceDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEndpoint", input)
	return &DatabaseMigrationServiceDeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) *DatabaseMigrationServiceDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEventSubscription", input)
	return &DatabaseMigrationServiceDeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteReplicationInstance(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) *DatabaseMigrationServiceDeleteReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationInstance", input)
	return &DatabaseMigrationServiceDeleteReplicationInstanceFuture{Future: future}
}

func (a *stub) DeleteReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) *DatabaseMigrationServiceDeleteReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationSubnetGroup", input)
	return &DatabaseMigrationServiceDeleteReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteReplicationTask(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) *DatabaseMigrationServiceDeleteReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTask", input)
	return &DatabaseMigrationServiceDeleteReplicationTaskFuture{Future: future}
}

func (a *stub) DeleteReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) *DatabaseMigrationServiceDeleteReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTaskAssessmentRun", input)
	return &DatabaseMigrationServiceDeleteReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) *DatabaseMigrationServiceDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeAccountAttributes", input)
	return &DatabaseMigrationServiceDescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeApplicableIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeApplicableIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicableIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) *DatabaseMigrationServiceDescribeApplicableIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeApplicableIndividualAssessments", input)
	return &DatabaseMigrationServiceDescribeApplicableIndividualAssessmentsFuture{Future: future}
}

func (a *stub) DescribeCertificates(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificatesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) *DatabaseMigrationServiceDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeCertificates", input)
	return &DatabaseMigrationServiceDescribeCertificatesFuture{Future: future}
}

func (a *stub) DescribeConnections(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *DatabaseMigrationServiceDescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeConnections", input)
	return &DatabaseMigrationServiceDescribeConnectionsFuture{Future: future}
}

func (a *stub) DescribeEndpointTypes(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpointTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointTypesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) *DatabaseMigrationServiceDescribeEndpointTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpointTypes", input)
	return &DatabaseMigrationServiceDescribeEndpointTypesFuture{Future: future}
}

func (a *stub) DescribeEndpoints(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *DatabaseMigrationServiceDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpoints", input)
	return &DatabaseMigrationServiceDescribeEndpointsFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) *DatabaseMigrationServiceDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventCategories", input)
	return &DatabaseMigrationServiceDescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) *DatabaseMigrationServiceDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventSubscriptions", input)
	return &DatabaseMigrationServiceDescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) *DatabaseMigrationServiceDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEvents", input)
	return &DatabaseMigrationServiceDescribeEventsFuture{Future: future}
}

func (a *stub) DescribeOrderableReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeOrderableReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) *DatabaseMigrationServiceDescribeOrderableReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeOrderableReplicationInstances", input)
	return &DatabaseMigrationServiceDescribeOrderableReplicationInstancesFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) *DatabaseMigrationServiceDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribePendingMaintenanceActions", input)
	return &DatabaseMigrationServiceDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) DescribeRefreshSchemasStatus(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeRefreshSchemasStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRefreshSchemasStatusAsync(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) *DatabaseMigrationServiceDescribeRefreshSchemasStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeRefreshSchemasStatus", input)
	return &DatabaseMigrationServiceDescribeRefreshSchemasStatusFuture{Future: future}
}

func (a *stub) DescribeReplicationInstanceTaskLogs(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstanceTaskLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationInstanceTaskLogsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) *DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstanceTaskLogs", input)
	return &DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsFuture{Future: future}
}

func (a *stub) DescribeReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *DatabaseMigrationServiceDescribeReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstances", input)
	return &DatabaseMigrationServiceDescribeReplicationInstancesFuture{Future: future}
}

func (a *stub) DescribeReplicationSubnetGroups(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationSubnetGroupsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) *DatabaseMigrationServiceDescribeReplicationSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationSubnetGroups", input)
	return &DatabaseMigrationServiceDescribeReplicationSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskAssessmentResults(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskAssessmentResultsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) *DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentResults", input)
	return &DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskAssessmentRuns(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskAssessmentRunsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) *DatabaseMigrationServiceDescribeReplicationTaskAssessmentRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentRuns", input)
	return &DatabaseMigrationServiceDescribeReplicationTaskAssessmentRunsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) *DatabaseMigrationServiceDescribeReplicationTaskIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskIndividualAssessments", input)
	return &DatabaseMigrationServiceDescribeReplicationTaskIndividualAssessmentsFuture{Future: future}
}

func (a *stub) DescribeReplicationTasks(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTasksAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *DatabaseMigrationServiceDescribeReplicationTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTasks", input)
	return &DatabaseMigrationServiceDescribeReplicationTasksFuture{Future: future}
}

func (a *stub) DescribeSchemas(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSchemasAsync(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) *DatabaseMigrationServiceDescribeSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeSchemas", input)
	return &DatabaseMigrationServiceDescribeSchemasFuture{Future: future}
}

func (a *stub) DescribeTableStatistics(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeTableStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableStatisticsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) *DatabaseMigrationServiceDescribeTableStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeTableStatistics", input)
	return &DatabaseMigrationServiceDescribeTableStatisticsFuture{Future: future}
}

func (a *stub) ImportCertificate(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ImportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportCertificateAsync(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) *DatabaseMigrationServiceImportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ImportCertificate", input)
	return &DatabaseMigrationServiceImportCertificateFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) *DatabaseMigrationServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ListTagsForResource", input)
	return &DatabaseMigrationServiceListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyEndpoint(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEndpointAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) *DatabaseMigrationServiceModifyEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEndpoint", input)
	return &DatabaseMigrationServiceModifyEndpointFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) *DatabaseMigrationServiceModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEventSubscription", input)
	return &DatabaseMigrationServiceModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) ModifyReplicationInstance(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) *DatabaseMigrationServiceModifyReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationInstance", input)
	return &DatabaseMigrationServiceModifyReplicationInstanceFuture{Future: future}
}

func (a *stub) ModifyReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) *DatabaseMigrationServiceModifyReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationSubnetGroup", input)
	return &DatabaseMigrationServiceModifyReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyReplicationTask(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) *DatabaseMigrationServiceModifyReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationTask", input)
	return &DatabaseMigrationServiceModifyReplicationTaskFuture{Future: future}
}

func (a *stub) RebootReplicationInstance(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RebootReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) *DatabaseMigrationServiceRebootReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RebootReplicationInstance", input)
	return &DatabaseMigrationServiceRebootReplicationInstanceFuture{Future: future}
}

func (a *stub) RefreshSchemas(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RefreshSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RefreshSchemasAsync(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) *DatabaseMigrationServiceRefreshSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RefreshSchemas", input)
	return &DatabaseMigrationServiceRefreshSchemasFuture{Future: future}
}

func (a *stub) ReloadTables(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ReloadTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReloadTablesAsync(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) *DatabaseMigrationServiceReloadTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ReloadTables", input)
	return &DatabaseMigrationServiceReloadTablesFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) *DatabaseMigrationServiceRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RemoveTagsFromResource", input)
	return &DatabaseMigrationServiceRemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) StartReplicationTask(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) *DatabaseMigrationServiceStartReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTask", input)
	return &DatabaseMigrationServiceStartReplicationTaskFuture{Future: future}
}

func (a *stub) StartReplicationTaskAssessment(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAssessmentAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) *DatabaseMigrationServiceStartReplicationTaskAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessment", input)
	return &DatabaseMigrationServiceStartReplicationTaskAssessmentFuture{Future: future}
}

func (a *stub) StartReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) *DatabaseMigrationServiceStartReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessmentRun", input)
	return &DatabaseMigrationServiceStartReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) StopReplicationTask(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StopReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) *DatabaseMigrationServiceStopReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StopReplicationTask", input)
	return &DatabaseMigrationServiceStopReplicationTaskFuture{Future: future}
}

func (a *stub) TestConnection(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-TestConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestConnectionAsync(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) *DatabaseMigrationServiceTestConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-TestConnection", input)
	return &DatabaseMigrationServiceTestConnectionFuture{Future: future}
}

func (a *stub) WaitUntilEndpointDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilEndpointDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationInstanceAvailable(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationInstanceAvailableAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationInstanceDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationInstanceDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskReady(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskReady", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskReadyAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskReady", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskRunning(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskRunningAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskStopped(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskStoppedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTestConnectionSucceeds(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilTestConnectionSucceeds", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTestConnectionSucceedsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilTestConnectionSucceeds", input)
	return clients.NewVoidFuture(future)
}
