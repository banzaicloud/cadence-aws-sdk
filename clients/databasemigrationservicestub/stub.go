// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package databasemigrationservicestub

import (
	"github.com/aws/aws-sdk-go/service/databasemigrationservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeApplicableIndividualAssessmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeApplicableIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCertificatesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointTypesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventCategoriesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrderableReplicationInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrderableReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRefreshSchemasStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRefreshSchemasStatusFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationInstanceTaskLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationInstanceTaskLogsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationInstancesFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationSubnetGroupsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationTaskAssessmentResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationTaskAssessmentResultsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationTaskAssessmentRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationTaskAssessmentRunsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationTaskIndividualAssessmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationTaskIndividualAssessmentsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplicationTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplicationTasksFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTableStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTableStatisticsFuture) Get(ctx workflow.Context) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportCertificateFuture) Get(ctx workflow.Context) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyEndpointFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReplicationSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReplicationSubnetGroupFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MoveReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MoveReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.MoveReplicationTaskOutput, error) {
	var output databasemigrationservice.MoveReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootReplicationInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootReplicationInstanceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RefreshSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RefreshSchemasFuture) Get(ctx workflow.Context) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReloadTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReloadTablesFuture) Get(ctx workflow.Context) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartReplicationTaskAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartReplicationTaskAssessmentFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartReplicationTaskAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartReplicationTaskAssessmentRunFuture) Get(ctx workflow.Context) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopReplicationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopReplicationTaskFuture) Get(ctx workflow.Context) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestConnectionFuture) Get(ctx workflow.Context) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	var output databasemigrationservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *databasemigrationservice.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	var output databasemigrationservice.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *databasemigrationservice.ApplyPendingMaintenanceActionInput) *ApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ApplyPendingMaintenanceAction", input)
	return &ApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) CancelReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CancelReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.CancelReplicationTaskAssessmentRunInput) *CancelReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CancelReplicationTaskAssessmentRun", input)
	return &CancelReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) (*databasemigrationservice.CreateEndpointOutput, error) {
	var output databasemigrationservice.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *databasemigrationservice.CreateEndpointInput) *CreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEndpoint", input)
	return &CreateEndpointFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	var output databasemigrationservice.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.CreateEventSubscriptionInput) *CreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateEventSubscription", input)
	return &CreateEventSubscriptionFuture{Future: future}
}

func (a *stub) CreateReplicationInstance(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	var output databasemigrationservice.CreateReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationInstanceInput) *CreateReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationInstance", input)
	return &CreateReplicationInstanceFuture{Future: future}
}

func (a *stub) CreateReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.CreateReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationSubnetGroupInput) *CreateReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationSubnetGroup", input)
	return &CreateReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) CreateReplicationTask(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	var output databasemigrationservice.CreateReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.CreateReplicationTaskInput) *CreateReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-CreateReplicationTask", input)
	return &CreateReplicationTaskFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) (*databasemigrationservice.DeleteCertificateOutput, error) {
	var output databasemigrationservice.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *databasemigrationservice.DeleteCertificateInput) *DeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteCertificate", input)
	return &DeleteCertificateFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) (*databasemigrationservice.DeleteConnectionOutput, error) {
	var output databasemigrationservice.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteConnectionInput) *DeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteConnection", input)
	return &DeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) (*databasemigrationservice.DeleteEndpointOutput, error) {
	var output databasemigrationservice.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEndpointInput) *DeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEndpoint", input)
	return &DeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	var output databasemigrationservice.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.DeleteEventSubscriptionInput) *DeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteEventSubscription", input)
	return &DeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteReplicationInstance(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	var output databasemigrationservice.DeleteReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationInstanceInput) *DeleteReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationInstance", input)
	return &DeleteReplicationInstanceFuture{Future: future}
}

func (a *stub) DeleteReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.DeleteReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationSubnetGroupInput) *DeleteReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationSubnetGroup", input)
	return &DeleteReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteReplicationTask(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskInput) *DeleteReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTask", input)
	return &DeleteReplicationTaskFuture{Future: future}
}

func (a *stub) DeleteReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput) *DeleteReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DeleteReplicationTaskAssessmentRun", input)
	return &DeleteReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	var output databasemigrationservice.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeAccountAttributesInput) *DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeAccountAttributes", input)
	return &DescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeApplicableIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeApplicableIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicableIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput) *DescribeApplicableIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeApplicableIndividualAssessments", input)
	return &DescribeApplicableIndividualAssessmentsFuture{Future: future}
}

func (a *stub) DescribeCertificates(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	var output databasemigrationservice.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificatesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeCertificatesInput) *DescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeCertificates", input)
	return &DescribeCertificatesFuture{Future: future}
}

func (a *stub) DescribeConnections(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	var output databasemigrationservice.DescribeConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *DescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeConnections", input)
	return &DescribeConnectionsFuture{Future: future}
}

func (a *stub) DescribeEndpointTypes(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	var output databasemigrationservice.DescribeEndpointTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpointTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointTypesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointTypesInput) *DescribeEndpointTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpointTypes", input)
	return &DescribeEndpointTypesFuture{Future: future}
}

func (a *stub) DescribeEndpoints(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	var output databasemigrationservice.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *DescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEndpoints", input)
	return &DescribeEndpointsFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	var output databasemigrationservice.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventCategoriesInput) *DescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventCategories", input)
	return &DescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	var output databasemigrationservice.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventSubscriptionsInput) *DescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEventSubscriptions", input)
	return &DescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) (*databasemigrationservice.DescribeEventsOutput, error) {
	var output databasemigrationservice.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeOrderableReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeOrderableReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeOrderableReplicationInstancesInput) *DescribeOrderableReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeOrderableReplicationInstances", input)
	return &DescribeOrderableReplicationInstancesFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	var output databasemigrationservice.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *databasemigrationservice.DescribePendingMaintenanceActionsInput) *DescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribePendingMaintenanceActions", input)
	return &DescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) DescribeRefreshSchemasStatus(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	var output databasemigrationservice.DescribeRefreshSchemasStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeRefreshSchemasStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRefreshSchemasStatusAsync(ctx workflow.Context, input *databasemigrationservice.DescribeRefreshSchemasStatusInput) *DescribeRefreshSchemasStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeRefreshSchemasStatus", input)
	return &DescribeRefreshSchemasStatusFuture{Future: future}
}

func (a *stub) DescribeReplicationInstanceTaskLogs(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstanceTaskLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationInstanceTaskLogsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) *DescribeReplicationInstanceTaskLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstanceTaskLogs", input)
	return &DescribeReplicationInstanceTaskLogsFuture{Future: future}
}

func (a *stub) DescribeReplicationInstances(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	var output databasemigrationservice.DescribeReplicationInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationInstancesAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *DescribeReplicationInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationInstances", input)
	return &DescribeReplicationInstancesFuture{Future: future}
}

func (a *stub) DescribeReplicationSubnetGroups(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	var output databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationSubnetGroupsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationSubnetGroupsInput) *DescribeReplicationSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationSubnetGroups", input)
	return &DescribeReplicationSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskAssessmentResults(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskAssessmentResultsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) *DescribeReplicationTaskAssessmentResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentResults", input)
	return &DescribeReplicationTaskAssessmentResultsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskAssessmentRuns(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskAssessmentRunsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput) *DescribeReplicationTaskAssessmentRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskAssessmentRuns", input)
	return &DescribeReplicationTaskAssessmentRunsFuture{Future: future}
}

func (a *stub) DescribeReplicationTaskIndividualAssessments(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	var output databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskIndividualAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTaskIndividualAssessmentsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput) *DescribeReplicationTaskIndividualAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTaskIndividualAssessments", input)
	return &DescribeReplicationTaskIndividualAssessmentsFuture{Future: future}
}

func (a *stub) DescribeReplicationTasks(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	var output databasemigrationservice.DescribeReplicationTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplicationTasksAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *DescribeReplicationTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeReplicationTasks", input)
	return &DescribeReplicationTasksFuture{Future: future}
}

func (a *stub) DescribeSchemas(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) (*databasemigrationservice.DescribeSchemasOutput, error) {
	var output databasemigrationservice.DescribeSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSchemasAsync(ctx workflow.Context, input *databasemigrationservice.DescribeSchemasInput) *DescribeSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeSchemas", input)
	return &DescribeSchemasFuture{Future: future}
}

func (a *stub) DescribeTableStatistics(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	var output databasemigrationservice.DescribeTableStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeTableStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableStatisticsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeTableStatisticsInput) *DescribeTableStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-DescribeTableStatistics", input)
	return &DescribeTableStatisticsFuture{Future: future}
}

func (a *stub) ImportCertificate(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) (*databasemigrationservice.ImportCertificateOutput, error) {
	var output databasemigrationservice.ImportCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ImportCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportCertificateAsync(ctx workflow.Context, input *databasemigrationservice.ImportCertificateInput) *ImportCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ImportCertificate", input)
	return &ImportCertificateFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	var output databasemigrationservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *databasemigrationservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyEndpoint(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) (*databasemigrationservice.ModifyEndpointOutput, error) {
	var output databasemigrationservice.ModifyEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEndpointAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEndpointInput) *ModifyEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEndpoint", input)
	return &ModifyEndpointFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	var output databasemigrationservice.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *databasemigrationservice.ModifyEventSubscriptionInput) *ModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyEventSubscription", input)
	return &ModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) ModifyReplicationInstance(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	var output databasemigrationservice.ModifyReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationInstanceInput) *ModifyReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationInstance", input)
	return &ModifyReplicationInstanceFuture{Future: future}
}

func (a *stub) ModifyReplicationSubnetGroup(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	var output databasemigrationservice.ModifyReplicationSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationSubnetGroupAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationSubnetGroupInput) *ModifyReplicationSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationSubnetGroup", input)
	return &ModifyReplicationSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyReplicationTask(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	var output databasemigrationservice.ModifyReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.ModifyReplicationTaskInput) *ModifyReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ModifyReplicationTask", input)
	return &ModifyReplicationTaskFuture{Future: future}
}

func (a *stub) MoveReplicationTask(ctx workflow.Context, input *databasemigrationservice.MoveReplicationTaskInput) (*databasemigrationservice.MoveReplicationTaskOutput, error) {
	var output databasemigrationservice.MoveReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-MoveReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MoveReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.MoveReplicationTaskInput) *MoveReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-MoveReplicationTask", input)
	return &MoveReplicationTaskFuture{Future: future}
}

func (a *stub) RebootReplicationInstance(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	var output databasemigrationservice.RebootReplicationInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RebootReplicationInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootReplicationInstanceAsync(ctx workflow.Context, input *databasemigrationservice.RebootReplicationInstanceInput) *RebootReplicationInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RebootReplicationInstance", input)
	return &RebootReplicationInstanceFuture{Future: future}
}

func (a *stub) RefreshSchemas(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) (*databasemigrationservice.RefreshSchemasOutput, error) {
	var output databasemigrationservice.RefreshSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RefreshSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RefreshSchemasAsync(ctx workflow.Context, input *databasemigrationservice.RefreshSchemasInput) *RefreshSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RefreshSchemas", input)
	return &RefreshSchemasFuture{Future: future}
}

func (a *stub) ReloadTables(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) (*databasemigrationservice.ReloadTablesOutput, error) {
	var output databasemigrationservice.ReloadTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ReloadTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReloadTablesAsync(ctx workflow.Context, input *databasemigrationservice.ReloadTablesInput) *ReloadTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-ReloadTables", input)
	return &ReloadTablesFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	var output databasemigrationservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *databasemigrationservice.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) StartReplicationTask(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	var output databasemigrationservice.StartReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskInput) *StartReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTask", input)
	return &StartReplicationTaskFuture{Future: future}
}

func (a *stub) StartReplicationTaskAssessment(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAssessmentAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentInput) *StartReplicationTaskAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessment", input)
	return &StartReplicationTaskAssessmentFuture{Future: future}
}

func (a *stub) StartReplicationTaskAssessmentRun(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	var output databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplicationTaskAssessmentRunAsync(ctx workflow.Context, input *databasemigrationservice.StartReplicationTaskAssessmentRunInput) *StartReplicationTaskAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StartReplicationTaskAssessmentRun", input)
	return &StartReplicationTaskAssessmentRunFuture{Future: future}
}

func (a *stub) StopReplicationTask(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	var output databasemigrationservice.StopReplicationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StopReplicationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopReplicationTaskAsync(ctx workflow.Context, input *databasemigrationservice.StopReplicationTaskInput) *StopReplicationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-StopReplicationTask", input)
	return &StopReplicationTaskFuture{Future: future}
}

func (a *stub) TestConnection(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) (*databasemigrationservice.TestConnectionOutput, error) {
	var output databasemigrationservice.TestConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-TestConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestConnectionAsync(ctx workflow.Context, input *databasemigrationservice.TestConnectionInput) *TestConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-TestConnection", input)
	return &TestConnectionFuture{Future: future}
}

func (a *stub) WaitUntilEndpointDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeEndpointsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilEndpointDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationInstanceAvailable(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationInstanceAvailableAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationInstanceDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationInstanceDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskDeleted(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskDeletedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskReady(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskReady", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskReadyAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskReady", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskRunning(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskRunningAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilReplicationTaskStopped(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilReplicationTaskStoppedAsync(ctx workflow.Context, input *databasemigrationservice.DescribeReplicationTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilReplicationTaskStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTestConnectionSucceeds(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilTestConnectionSucceeds", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTestConnectionSucceedsAsync(ctx workflow.Context, input *databasemigrationservice.DescribeConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-databasemigrationservice-WaitUntilTestConnectionSucceeds", input)
	return clients.NewVoidFuture(future)
}
