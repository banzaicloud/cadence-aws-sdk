// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appflowstub

import (
	"github.com/aws/aws-sdk-go/service/appflow"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AppflowCreateConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowCreateConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.CreateConnectorProfileOutput, error) {
	var output appflow.CreateConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowCreateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowCreateFlowFuture) Get(ctx workflow.Context) (*appflow.CreateFlowOutput, error) {
	var output appflow.CreateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDeleteConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDeleteConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.DeleteConnectorProfileOutput, error) {
	var output appflow.DeleteConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDeleteFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDeleteFlowFuture) Get(ctx workflow.Context) (*appflow.DeleteFlowOutput, error) {
	var output appflow.DeleteFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDescribeConnectorEntityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDescribeConnectorEntityFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorEntityOutput, error) {
	var output appflow.DescribeConnectorEntityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDescribeConnectorProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDescribeConnectorProfilesFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorProfilesOutput, error) {
	var output appflow.DescribeConnectorProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDescribeConnectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDescribeConnectorsFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorsOutput, error) {
	var output appflow.DescribeConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDescribeFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDescribeFlowFuture) Get(ctx workflow.Context) (*appflow.DescribeFlowOutput, error) {
	var output appflow.DescribeFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowDescribeFlowExecutionRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowDescribeFlowExecutionRecordsFuture) Get(ctx workflow.Context) (*appflow.DescribeFlowExecutionRecordsOutput, error) {
	var output appflow.DescribeFlowExecutionRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowListConnectorEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowListConnectorEntitiesFuture) Get(ctx workflow.Context) (*appflow.ListConnectorEntitiesOutput, error) {
	var output appflow.ListConnectorEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowListFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowListFlowsFuture) Get(ctx workflow.Context) (*appflow.ListFlowsOutput, error) {
	var output appflow.ListFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowListTagsForResourceFuture) Get(ctx workflow.Context) (*appflow.ListTagsForResourceOutput, error) {
	var output appflow.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowStartFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowStartFlowFuture) Get(ctx workflow.Context) (*appflow.StartFlowOutput, error) {
	var output appflow.StartFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowStopFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowStopFlowFuture) Get(ctx workflow.Context) (*appflow.StopFlowOutput, error) {
	var output appflow.StopFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowTagResourceFuture) Get(ctx workflow.Context) (*appflow.TagResourceOutput, error) {
	var output appflow.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowUntagResourceFuture) Get(ctx workflow.Context) (*appflow.UntagResourceOutput, error) {
	var output appflow.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowUpdateConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowUpdateConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.UpdateConnectorProfileOutput, error) {
	var output appflow.UpdateConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AppflowUpdateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AppflowUpdateFlowFuture) Get(ctx workflow.Context) (*appflow.UpdateFlowOutput, error) {
	var output appflow.UpdateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorProfile(ctx workflow.Context, input *appflow.CreateConnectorProfileInput) (*appflow.CreateConnectorProfileOutput, error) {
	var output appflow.CreateConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-CreateConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorProfileAsync(ctx workflow.Context, input *appflow.CreateConnectorProfileInput) *AppflowCreateConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-CreateConnectorProfile", input)
	return &AppflowCreateConnectorProfileFuture{Future: future}
}

func (a *stub) CreateFlow(ctx workflow.Context, input *appflow.CreateFlowInput) (*appflow.CreateFlowOutput, error) {
	var output appflow.CreateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-CreateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowAsync(ctx workflow.Context, input *appflow.CreateFlowInput) *AppflowCreateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-CreateFlow", input)
	return &AppflowCreateFlowFuture{Future: future}
}

func (a *stub) DeleteConnectorProfile(ctx workflow.Context, input *appflow.DeleteConnectorProfileInput) (*appflow.DeleteConnectorProfileOutput, error) {
	var output appflow.DeleteConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectorProfileAsync(ctx workflow.Context, input *appflow.DeleteConnectorProfileInput) *AppflowDeleteConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteConnectorProfile", input)
	return &AppflowDeleteConnectorProfileFuture{Future: future}
}

func (a *stub) DeleteFlow(ctx workflow.Context, input *appflow.DeleteFlowInput) (*appflow.DeleteFlowOutput, error) {
	var output appflow.DeleteFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowAsync(ctx workflow.Context, input *appflow.DeleteFlowInput) *AppflowDeleteFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteFlow", input)
	return &AppflowDeleteFlowFuture{Future: future}
}

func (a *stub) DescribeConnectorEntity(ctx workflow.Context, input *appflow.DescribeConnectorEntityInput) (*appflow.DescribeConnectorEntityOutput, error) {
	var output appflow.DescribeConnectorEntityOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorEntity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorEntityAsync(ctx workflow.Context, input *appflow.DescribeConnectorEntityInput) *AppflowDescribeConnectorEntityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorEntity", input)
	return &AppflowDescribeConnectorEntityFuture{Future: future}
}

func (a *stub) DescribeConnectorProfiles(ctx workflow.Context, input *appflow.DescribeConnectorProfilesInput) (*appflow.DescribeConnectorProfilesOutput, error) {
	var output appflow.DescribeConnectorProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorProfilesAsync(ctx workflow.Context, input *appflow.DescribeConnectorProfilesInput) *AppflowDescribeConnectorProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorProfiles", input)
	return &AppflowDescribeConnectorProfilesFuture{Future: future}
}

func (a *stub) DescribeConnectors(ctx workflow.Context, input *appflow.DescribeConnectorsInput) (*appflow.DescribeConnectorsOutput, error) {
	var output appflow.DescribeConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorsAsync(ctx workflow.Context, input *appflow.DescribeConnectorsInput) *AppflowDescribeConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectors", input)
	return &AppflowDescribeConnectorsFuture{Future: future}
}

func (a *stub) DescribeFlow(ctx workflow.Context, input *appflow.DescribeFlowInput) (*appflow.DescribeFlowOutput, error) {
	var output appflow.DescribeFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowAsync(ctx workflow.Context, input *appflow.DescribeFlowInput) *AppflowDescribeFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlow", input)
	return &AppflowDescribeFlowFuture{Future: future}
}

func (a *stub) DescribeFlowExecutionRecords(ctx workflow.Context, input *appflow.DescribeFlowExecutionRecordsInput) (*appflow.DescribeFlowExecutionRecordsOutput, error) {
	var output appflow.DescribeFlowExecutionRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlowExecutionRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowExecutionRecordsAsync(ctx workflow.Context, input *appflow.DescribeFlowExecutionRecordsInput) *AppflowDescribeFlowExecutionRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlowExecutionRecords", input)
	return &AppflowDescribeFlowExecutionRecordsFuture{Future: future}
}

func (a *stub) ListConnectorEntities(ctx workflow.Context, input *appflow.ListConnectorEntitiesInput) (*appflow.ListConnectorEntitiesOutput, error) {
	var output appflow.ListConnectorEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListConnectorEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorEntitiesAsync(ctx workflow.Context, input *appflow.ListConnectorEntitiesInput) *AppflowListConnectorEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListConnectorEntities", input)
	return &AppflowListConnectorEntitiesFuture{Future: future}
}

func (a *stub) ListFlows(ctx workflow.Context, input *appflow.ListFlowsInput) (*appflow.ListFlowsOutput, error) {
	var output appflow.ListFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFlowsAsync(ctx workflow.Context, input *appflow.ListFlowsInput) *AppflowListFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListFlows", input)
	return &AppflowListFlowsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appflow.ListTagsForResourceInput) (*appflow.ListTagsForResourceOutput, error) {
	var output appflow.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appflow.ListTagsForResourceInput) *AppflowListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListTagsForResource", input)
	return &AppflowListTagsForResourceFuture{Future: future}
}

func (a *stub) StartFlow(ctx workflow.Context, input *appflow.StartFlowInput) (*appflow.StartFlowOutput, error) {
	var output appflow.StartFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-StartFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFlowAsync(ctx workflow.Context, input *appflow.StartFlowInput) *AppflowStartFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-StartFlow", input)
	return &AppflowStartFlowFuture{Future: future}
}

func (a *stub) StopFlow(ctx workflow.Context, input *appflow.StopFlowInput) (*appflow.StopFlowOutput, error) {
	var output appflow.StopFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-StopFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFlowAsync(ctx workflow.Context, input *appflow.StopFlowInput) *AppflowStopFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-StopFlow", input)
	return &AppflowStopFlowFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appflow.TagResourceInput) (*appflow.TagResourceOutput, error) {
	var output appflow.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appflow.TagResourceInput) *AppflowTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-TagResource", input)
	return &AppflowTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appflow.UntagResourceInput) (*appflow.UntagResourceOutput, error) {
	var output appflow.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appflow.UntagResourceInput) *AppflowUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UntagResource", input)
	return &AppflowUntagResourceFuture{Future: future}
}

func (a *stub) UpdateConnectorProfile(ctx workflow.Context, input *appflow.UpdateConnectorProfileInput) (*appflow.UpdateConnectorProfileOutput, error) {
	var output appflow.UpdateConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectorProfileAsync(ctx workflow.Context, input *appflow.UpdateConnectorProfileInput) *AppflowUpdateConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateConnectorProfile", input)
	return &AppflowUpdateConnectorProfileFuture{Future: future}
}

func (a *stub) UpdateFlow(ctx workflow.Context, input *appflow.UpdateFlowInput) (*appflow.UpdateFlowOutput, error) {
	var output appflow.UpdateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowAsync(ctx workflow.Context, input *appflow.UpdateFlowInput) *AppflowUpdateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateFlow", input)
	return &AppflowUpdateFlowFuture{Future: future}
}
