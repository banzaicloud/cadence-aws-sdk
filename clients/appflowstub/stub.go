// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appflowstub

import (
	"github.com/aws/aws-sdk-go/service/appflow"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.CreateConnectorProfileOutput, error) {
	var output appflow.CreateConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFlowFuture) Get(ctx workflow.Context) (*appflow.CreateFlowOutput, error) {
	var output appflow.CreateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.DeleteConnectorProfileOutput, error) {
	var output appflow.DeleteConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFlowFuture) Get(ctx workflow.Context) (*appflow.DeleteFlowOutput, error) {
	var output appflow.DeleteFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectorEntityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectorEntityFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorEntityOutput, error) {
	var output appflow.DescribeConnectorEntityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectorProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectorProfilesFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorProfilesOutput, error) {
	var output appflow.DescribeConnectorProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectorsFuture) Get(ctx workflow.Context) (*appflow.DescribeConnectorsOutput, error) {
	var output appflow.DescribeConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFlowFuture) Get(ctx workflow.Context) (*appflow.DescribeFlowOutput, error) {
	var output appflow.DescribeFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFlowExecutionRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFlowExecutionRecordsFuture) Get(ctx workflow.Context) (*appflow.DescribeFlowExecutionRecordsOutput, error) {
	var output appflow.DescribeFlowExecutionRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConnectorEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConnectorEntitiesFuture) Get(ctx workflow.Context) (*appflow.ListConnectorEntitiesOutput, error) {
	var output appflow.ListConnectorEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFlowsFuture) Get(ctx workflow.Context) (*appflow.ListFlowsOutput, error) {
	var output appflow.ListFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appflow.ListTagsForResourceOutput, error) {
	var output appflow.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFlowFuture) Get(ctx workflow.Context) (*appflow.StartFlowOutput, error) {
	var output appflow.StartFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopFlowFuture) Get(ctx workflow.Context) (*appflow.StopFlowOutput, error) {
	var output appflow.StopFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appflow.TagResourceOutput, error) {
	var output appflow.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appflow.UntagResourceOutput, error) {
	var output appflow.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConnectorProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConnectorProfileFuture) Get(ctx workflow.Context) (*appflow.UpdateConnectorProfileOutput, error) {
	var output appflow.UpdateConnectorProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFlowFuture) Get(ctx workflow.Context) (*appflow.UpdateFlowOutput, error) {
	var output appflow.UpdateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorProfile(ctx workflow.Context, input *appflow.CreateConnectorProfileInput) (*appflow.CreateConnectorProfileOutput, error) {
	var output appflow.CreateConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-CreateConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorProfileAsync(ctx workflow.Context, input *appflow.CreateConnectorProfileInput) *CreateConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-CreateConnectorProfile", input)
	return &CreateConnectorProfileFuture{Future: future}
}

func (a *stub) CreateFlow(ctx workflow.Context, input *appflow.CreateFlowInput) (*appflow.CreateFlowOutput, error) {
	var output appflow.CreateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-CreateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowAsync(ctx workflow.Context, input *appflow.CreateFlowInput) *CreateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-CreateFlow", input)
	return &CreateFlowFuture{Future: future}
}

func (a *stub) DeleteConnectorProfile(ctx workflow.Context, input *appflow.DeleteConnectorProfileInput) (*appflow.DeleteConnectorProfileOutput, error) {
	var output appflow.DeleteConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectorProfileAsync(ctx workflow.Context, input *appflow.DeleteConnectorProfileInput) *DeleteConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteConnectorProfile", input)
	return &DeleteConnectorProfileFuture{Future: future}
}

func (a *stub) DeleteFlow(ctx workflow.Context, input *appflow.DeleteFlowInput) (*appflow.DeleteFlowOutput, error) {
	var output appflow.DeleteFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowAsync(ctx workflow.Context, input *appflow.DeleteFlowInput) *DeleteFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DeleteFlow", input)
	return &DeleteFlowFuture{Future: future}
}

func (a *stub) DescribeConnectorEntity(ctx workflow.Context, input *appflow.DescribeConnectorEntityInput) (*appflow.DescribeConnectorEntityOutput, error) {
	var output appflow.DescribeConnectorEntityOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorEntity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorEntityAsync(ctx workflow.Context, input *appflow.DescribeConnectorEntityInput) *DescribeConnectorEntityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorEntity", input)
	return &DescribeConnectorEntityFuture{Future: future}
}

func (a *stub) DescribeConnectorProfiles(ctx workflow.Context, input *appflow.DescribeConnectorProfilesInput) (*appflow.DescribeConnectorProfilesOutput, error) {
	var output appflow.DescribeConnectorProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorProfilesAsync(ctx workflow.Context, input *appflow.DescribeConnectorProfilesInput) *DescribeConnectorProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectorProfiles", input)
	return &DescribeConnectorProfilesFuture{Future: future}
}

func (a *stub) DescribeConnectors(ctx workflow.Context, input *appflow.DescribeConnectorsInput) (*appflow.DescribeConnectorsOutput, error) {
	var output appflow.DescribeConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectorsAsync(ctx workflow.Context, input *appflow.DescribeConnectorsInput) *DescribeConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeConnectors", input)
	return &DescribeConnectorsFuture{Future: future}
}

func (a *stub) DescribeFlow(ctx workflow.Context, input *appflow.DescribeFlowInput) (*appflow.DescribeFlowOutput, error) {
	var output appflow.DescribeFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowAsync(ctx workflow.Context, input *appflow.DescribeFlowInput) *DescribeFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlow", input)
	return &DescribeFlowFuture{Future: future}
}

func (a *stub) DescribeFlowExecutionRecords(ctx workflow.Context, input *appflow.DescribeFlowExecutionRecordsInput) (*appflow.DescribeFlowExecutionRecordsOutput, error) {
	var output appflow.DescribeFlowExecutionRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlowExecutionRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowExecutionRecordsAsync(ctx workflow.Context, input *appflow.DescribeFlowExecutionRecordsInput) *DescribeFlowExecutionRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-DescribeFlowExecutionRecords", input)
	return &DescribeFlowExecutionRecordsFuture{Future: future}
}

func (a *stub) ListConnectorEntities(ctx workflow.Context, input *appflow.ListConnectorEntitiesInput) (*appflow.ListConnectorEntitiesOutput, error) {
	var output appflow.ListConnectorEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListConnectorEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorEntitiesAsync(ctx workflow.Context, input *appflow.ListConnectorEntitiesInput) *ListConnectorEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListConnectorEntities", input)
	return &ListConnectorEntitiesFuture{Future: future}
}

func (a *stub) ListFlows(ctx workflow.Context, input *appflow.ListFlowsInput) (*appflow.ListFlowsOutput, error) {
	var output appflow.ListFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFlowsAsync(ctx workflow.Context, input *appflow.ListFlowsInput) *ListFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListFlows", input)
	return &ListFlowsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appflow.ListTagsForResourceInput) (*appflow.ListTagsForResourceOutput, error) {
	var output appflow.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appflow.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) StartFlow(ctx workflow.Context, input *appflow.StartFlowInput) (*appflow.StartFlowOutput, error) {
	var output appflow.StartFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-StartFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFlowAsync(ctx workflow.Context, input *appflow.StartFlowInput) *StartFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-StartFlow", input)
	return &StartFlowFuture{Future: future}
}

func (a *stub) StopFlow(ctx workflow.Context, input *appflow.StopFlowInput) (*appflow.StopFlowOutput, error) {
	var output appflow.StopFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-StopFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFlowAsync(ctx workflow.Context, input *appflow.StopFlowInput) *StopFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-StopFlow", input)
	return &StopFlowFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appflow.TagResourceInput) (*appflow.TagResourceOutput, error) {
	var output appflow.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appflow.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appflow.UntagResourceInput) (*appflow.UntagResourceOutput, error) {
	var output appflow.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appflow.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateConnectorProfile(ctx workflow.Context, input *appflow.UpdateConnectorProfileInput) (*appflow.UpdateConnectorProfileOutput, error) {
	var output appflow.UpdateConnectorProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateConnectorProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectorProfileAsync(ctx workflow.Context, input *appflow.UpdateConnectorProfileInput) *UpdateConnectorProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateConnectorProfile", input)
	return &UpdateConnectorProfileFuture{Future: future}
}

func (a *stub) UpdateFlow(ctx workflow.Context, input *appflow.UpdateFlowInput) (*appflow.UpdateFlowOutput, error) {
	var output appflow.UpdateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowAsync(ctx workflow.Context, input *appflow.UpdateFlowInput) *UpdateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appflow-UpdateFlow", input)
	return &UpdateFlowFuture{Future: future}
}
