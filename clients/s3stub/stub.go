// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package s3stub

import (
	"github.com/aws/aws-sdk-go/service/s3"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AbortMultipartUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AbortMultipartUploadFuture) Get(ctx workflow.Context) (*s3.AbortMultipartUploadOutput, error) {
	var output s3.AbortMultipartUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CompleteMultipartUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteMultipartUploadFuture) Get(ctx workflow.Context) (*s3.CompleteMultipartUploadOutput, error) {
	var output s3.CompleteMultipartUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyObjectFuture) Get(ctx workflow.Context) (*s3.CopyObjectOutput, error) {
	var output s3.CopyObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBucketFuture) Get(ctx workflow.Context) (*s3.CreateBucketOutput, error) {
	var output s3.CreateBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMultipartUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMultipartUploadFuture) Get(ctx workflow.Context) (*s3.CreateMultipartUploadOutput, error) {
	var output s3.CreateMultipartUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketFuture) Get(ctx workflow.Context) (*s3.DeleteBucketOutput, error) {
	var output s3.DeleteBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketAnalyticsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketAnalyticsConfigurationFuture) Get(ctx workflow.Context) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	var output s3.DeleteBucketAnalyticsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketCorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketCorsFuture) Get(ctx workflow.Context) (*s3.DeleteBucketCorsOutput, error) {
	var output s3.DeleteBucketCorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketEncryptionFuture) Get(ctx workflow.Context) (*s3.DeleteBucketEncryptionOutput, error) {
	var output s3.DeleteBucketEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketIntelligentTieringConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketIntelligentTieringConfigurationFuture) Get(ctx workflow.Context) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.DeleteBucketIntelligentTieringConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketInventoryConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketInventoryConfigurationFuture) Get(ctx workflow.Context) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	var output s3.DeleteBucketInventoryConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketLifecycleFuture) Get(ctx workflow.Context) (*s3.DeleteBucketLifecycleOutput, error) {
	var output s3.DeleteBucketLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketMetricsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketMetricsConfigurationFuture) Get(ctx workflow.Context) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	var output s3.DeleteBucketMetricsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketOwnershipControlsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketOwnershipControlsFuture) Get(ctx workflow.Context) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	var output s3.DeleteBucketOwnershipControlsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketPolicyFuture) Get(ctx workflow.Context) (*s3.DeleteBucketPolicyOutput, error) {
	var output s3.DeleteBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketReplicationFuture) Get(ctx workflow.Context) (*s3.DeleteBucketReplicationOutput, error) {
	var output s3.DeleteBucketReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketTaggingFuture) Get(ctx workflow.Context) (*s3.DeleteBucketTaggingOutput, error) {
	var output s3.DeleteBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketWebsiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketWebsiteFuture) Get(ctx workflow.Context) (*s3.DeleteBucketWebsiteOutput, error) {
	var output s3.DeleteBucketWebsiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteObjectFuture) Get(ctx workflow.Context) (*s3.DeleteObjectOutput, error) {
	var output s3.DeleteObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteObjectTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteObjectTaggingFuture) Get(ctx workflow.Context) (*s3.DeleteObjectTaggingOutput, error) {
	var output s3.DeleteObjectTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteObjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteObjectsFuture) Get(ctx workflow.Context) (*s3.DeleteObjectsOutput, error) {
	var output s3.DeleteObjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePublicAccessBlockFuture) Get(ctx workflow.Context) (*s3.DeletePublicAccessBlockOutput, error) {
	var output s3.DeletePublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketAccelerateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketAccelerateConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	var output s3.GetBucketAccelerateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketAclFuture) Get(ctx workflow.Context) (*s3.GetBucketAclOutput, error) {
	var output s3.GetBucketAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketAnalyticsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketAnalyticsConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	var output s3.GetBucketAnalyticsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketCorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketCorsFuture) Get(ctx workflow.Context) (*s3.GetBucketCorsOutput, error) {
	var output s3.GetBucketCorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketEncryptionFuture) Get(ctx workflow.Context) (*s3.GetBucketEncryptionOutput, error) {
	var output s3.GetBucketEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketIntelligentTieringConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketIntelligentTieringConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.GetBucketIntelligentTieringConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketInventoryConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketInventoryConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketInventoryConfigurationOutput, error) {
	var output s3.GetBucketInventoryConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketLifecycleFuture) Get(ctx workflow.Context) (*s3.GetBucketLifecycleOutput, error) {
	var output s3.GetBucketLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	var output s3.GetBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketLocationFuture) Get(ctx workflow.Context) (*s3.GetBucketLocationOutput, error) {
	var output s3.GetBucketLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketLoggingFuture) Get(ctx workflow.Context) (*s3.GetBucketLoggingOutput, error) {
	var output s3.GetBucketLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketMetricsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketMetricsConfigurationFuture) Get(ctx workflow.Context) (*s3.GetBucketMetricsConfigurationOutput, error) {
	var output s3.GetBucketMetricsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketNotificationFuture) Get(ctx workflow.Context) (*s3.NotificationConfigurationDeprecated, error) {
	var output s3.NotificationConfigurationDeprecated
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketNotificationConfigurationFuture) Get(ctx workflow.Context) (*s3.NotificationConfiguration, error) {
	var output s3.NotificationConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketOwnershipControlsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketOwnershipControlsFuture) Get(ctx workflow.Context) (*s3.GetBucketOwnershipControlsOutput, error) {
	var output s3.GetBucketOwnershipControlsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketPolicyFuture) Get(ctx workflow.Context) (*s3.GetBucketPolicyOutput, error) {
	var output s3.GetBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketPolicyStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketPolicyStatusFuture) Get(ctx workflow.Context) (*s3.GetBucketPolicyStatusOutput, error) {
	var output s3.GetBucketPolicyStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketReplicationFuture) Get(ctx workflow.Context) (*s3.GetBucketReplicationOutput, error) {
	var output s3.GetBucketReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketRequestPaymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketRequestPaymentFuture) Get(ctx workflow.Context) (*s3.GetBucketRequestPaymentOutput, error) {
	var output s3.GetBucketRequestPaymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketTaggingFuture) Get(ctx workflow.Context) (*s3.GetBucketTaggingOutput, error) {
	var output s3.GetBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketVersioningFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketVersioningFuture) Get(ctx workflow.Context) (*s3.GetBucketVersioningOutput, error) {
	var output s3.GetBucketVersioningOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketWebsiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketWebsiteFuture) Get(ctx workflow.Context) (*s3.GetBucketWebsiteOutput, error) {
	var output s3.GetBucketWebsiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectFuture) Get(ctx workflow.Context) (*s3.GetObjectOutput, error) {
	var output s3.GetObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectAclFuture) Get(ctx workflow.Context) (*s3.GetObjectAclOutput, error) {
	var output s3.GetObjectAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectLegalHoldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectLegalHoldFuture) Get(ctx workflow.Context) (*s3.GetObjectLegalHoldOutput, error) {
	var output s3.GetObjectLegalHoldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectLockConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectLockConfigurationFuture) Get(ctx workflow.Context) (*s3.GetObjectLockConfigurationOutput, error) {
	var output s3.GetObjectLockConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectRetentionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectRetentionFuture) Get(ctx workflow.Context) (*s3.GetObjectRetentionOutput, error) {
	var output s3.GetObjectRetentionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectTaggingFuture) Get(ctx workflow.Context) (*s3.GetObjectTaggingOutput, error) {
	var output s3.GetObjectTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectTorrentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectTorrentFuture) Get(ctx workflow.Context) (*s3.GetObjectTorrentOutput, error) {
	var output s3.GetObjectTorrentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3.GetPublicAccessBlockOutput, error) {
	var output s3.GetPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type HeadBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *HeadBucketFuture) Get(ctx workflow.Context) (*s3.HeadBucketOutput, error) {
	var output s3.HeadBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type HeadObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *HeadObjectFuture) Get(ctx workflow.Context) (*s3.HeadObjectOutput, error) {
	var output s3.HeadObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBucketAnalyticsConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBucketAnalyticsConfigurationsFuture) Get(ctx workflow.Context) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	var output s3.ListBucketAnalyticsConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBucketIntelligentTieringConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBucketIntelligentTieringConfigurationsFuture) Get(ctx workflow.Context) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	var output s3.ListBucketIntelligentTieringConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBucketInventoryConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBucketInventoryConfigurationsFuture) Get(ctx workflow.Context) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	var output s3.ListBucketInventoryConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBucketMetricsConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBucketMetricsConfigurationsFuture) Get(ctx workflow.Context) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	var output s3.ListBucketMetricsConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBucketsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBucketsFuture) Get(ctx workflow.Context) (*s3.ListBucketsOutput, error) {
	var output s3.ListBucketsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMultipartUploadsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMultipartUploadsFuture) Get(ctx workflow.Context) (*s3.ListMultipartUploadsOutput, error) {
	var output s3.ListMultipartUploadsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectVersionsFuture) Get(ctx workflow.Context) (*s3.ListObjectVersionsOutput, error) {
	var output s3.ListObjectVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectsFuture) Get(ctx workflow.Context) (*s3.ListObjectsOutput, error) {
	var output s3.ListObjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectsV2Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectsV2Future) Get(ctx workflow.Context) (*s3.ListObjectsV2Output, error) {
	var output s3.ListObjectsV2Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPartsFuture) Get(ctx workflow.Context) (*s3.ListPartsOutput, error) {
	var output s3.ListPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketAccelerateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketAccelerateConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	var output s3.PutBucketAccelerateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketAclFuture) Get(ctx workflow.Context) (*s3.PutBucketAclOutput, error) {
	var output s3.PutBucketAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketAnalyticsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketAnalyticsConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	var output s3.PutBucketAnalyticsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketCorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketCorsFuture) Get(ctx workflow.Context) (*s3.PutBucketCorsOutput, error) {
	var output s3.PutBucketCorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketEncryptionFuture) Get(ctx workflow.Context) (*s3.PutBucketEncryptionOutput, error) {
	var output s3.PutBucketEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketIntelligentTieringConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketIntelligentTieringConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.PutBucketIntelligentTieringConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketInventoryConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketInventoryConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketInventoryConfigurationOutput, error) {
	var output s3.PutBucketInventoryConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketLifecycleFuture) Get(ctx workflow.Context) (*s3.PutBucketLifecycleOutput, error) {
	var output s3.PutBucketLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	var output s3.PutBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketLoggingFuture) Get(ctx workflow.Context) (*s3.PutBucketLoggingOutput, error) {
	var output s3.PutBucketLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketMetricsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketMetricsConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketMetricsConfigurationOutput, error) {
	var output s3.PutBucketMetricsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketNotificationFuture) Get(ctx workflow.Context) (*s3.PutBucketNotificationOutput, error) {
	var output s3.PutBucketNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketNotificationConfigurationFuture) Get(ctx workflow.Context) (*s3.PutBucketNotificationConfigurationOutput, error) {
	var output s3.PutBucketNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketOwnershipControlsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketOwnershipControlsFuture) Get(ctx workflow.Context) (*s3.PutBucketOwnershipControlsOutput, error) {
	var output s3.PutBucketOwnershipControlsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketPolicyFuture) Get(ctx workflow.Context) (*s3.PutBucketPolicyOutput, error) {
	var output s3.PutBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketReplicationFuture) Get(ctx workflow.Context) (*s3.PutBucketReplicationOutput, error) {
	var output s3.PutBucketReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketRequestPaymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketRequestPaymentFuture) Get(ctx workflow.Context) (*s3.PutBucketRequestPaymentOutput, error) {
	var output s3.PutBucketRequestPaymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketTaggingFuture) Get(ctx workflow.Context) (*s3.PutBucketTaggingOutput, error) {
	var output s3.PutBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketVersioningFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketVersioningFuture) Get(ctx workflow.Context) (*s3.PutBucketVersioningOutput, error) {
	var output s3.PutBucketVersioningOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketWebsiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketWebsiteFuture) Get(ctx workflow.Context) (*s3.PutBucketWebsiteOutput, error) {
	var output s3.PutBucketWebsiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectFuture) Get(ctx workflow.Context) (*s3.PutObjectOutput, error) {
	var output s3.PutObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectAclFuture) Get(ctx workflow.Context) (*s3.PutObjectAclOutput, error) {
	var output s3.PutObjectAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectLegalHoldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectLegalHoldFuture) Get(ctx workflow.Context) (*s3.PutObjectLegalHoldOutput, error) {
	var output s3.PutObjectLegalHoldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectLockConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectLockConfigurationFuture) Get(ctx workflow.Context) (*s3.PutObjectLockConfigurationOutput, error) {
	var output s3.PutObjectLockConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectRetentionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectRetentionFuture) Get(ctx workflow.Context) (*s3.PutObjectRetentionOutput, error) {
	var output s3.PutObjectRetentionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutObjectTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutObjectTaggingFuture) Get(ctx workflow.Context) (*s3.PutObjectTaggingOutput, error) {
	var output s3.PutObjectTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3.PutPublicAccessBlockOutput, error) {
	var output s3.PutPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreObjectFuture) Get(ctx workflow.Context) (*s3.RestoreObjectOutput, error) {
	var output s3.RestoreObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SelectObjectContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SelectObjectContentFuture) Get(ctx workflow.Context) (*s3.SelectObjectContentOutput, error) {
	var output s3.SelectObjectContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadPartFuture) Get(ctx workflow.Context) (*s3.UploadPartOutput, error) {
	var output s3.UploadPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadPartCopyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadPartCopyFuture) Get(ctx workflow.Context) (*s3.UploadPartCopyOutput, error) {
	var output s3.UploadPartCopyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortMultipartUpload(ctx workflow.Context, input *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	var output s3.AbortMultipartUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-AbortMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortMultipartUploadAsync(ctx workflow.Context, input *s3.AbortMultipartUploadInput) *AbortMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-AbortMultipartUpload", input)
	return &AbortMultipartUploadFuture{Future: future}
}

func (a *stub) CompleteMultipartUpload(ctx workflow.Context, input *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	var output s3.CompleteMultipartUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-CompleteMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteMultipartUploadAsync(ctx workflow.Context, input *s3.CompleteMultipartUploadInput) *CompleteMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-CompleteMultipartUpload", input)
	return &CompleteMultipartUploadFuture{Future: future}
}

func (a *stub) CopyObject(ctx workflow.Context, input *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
	var output s3.CopyObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-CopyObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyObjectAsync(ctx workflow.Context, input *s3.CopyObjectInput) *CopyObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-CopyObject", input)
	return &CopyObjectFuture{Future: future}
}

func (a *stub) CreateBucket(ctx workflow.Context, input *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	var output s3.CreateBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-CreateBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBucketAsync(ctx workflow.Context, input *s3.CreateBucketInput) *CreateBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-CreateBucket", input)
	return &CreateBucketFuture{Future: future}
}

func (a *stub) CreateMultipartUpload(ctx workflow.Context, input *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	var output s3.CreateMultipartUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-CreateMultipartUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMultipartUploadAsync(ctx workflow.Context, input *s3.CreateMultipartUploadInput) *CreateMultipartUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-CreateMultipartUpload", input)
	return &CreateMultipartUploadFuture{Future: future}
}

func (a *stub) DeleteBucket(ctx workflow.Context, input *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
	var output s3.DeleteBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketAsync(ctx workflow.Context, input *s3.DeleteBucketInput) *DeleteBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucket", input)
	return &DeleteBucketFuture{Future: future}
}

func (a *stub) DeleteBucketAnalyticsConfiguration(ctx workflow.Context, input *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	var output s3.DeleteBucketAnalyticsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketAnalyticsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketAnalyticsConfigurationAsync(ctx workflow.Context, input *s3.DeleteBucketAnalyticsConfigurationInput) *DeleteBucketAnalyticsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketAnalyticsConfiguration", input)
	return &DeleteBucketAnalyticsConfigurationFuture{Future: future}
}

func (a *stub) DeleteBucketCors(ctx workflow.Context, input *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
	var output s3.DeleteBucketCorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketCors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketCorsAsync(ctx workflow.Context, input *s3.DeleteBucketCorsInput) *DeleteBucketCorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketCors", input)
	return &DeleteBucketCorsFuture{Future: future}
}

func (a *stub) DeleteBucketEncryption(ctx workflow.Context, input *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
	var output s3.DeleteBucketEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketEncryptionAsync(ctx workflow.Context, input *s3.DeleteBucketEncryptionInput) *DeleteBucketEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketEncryption", input)
	return &DeleteBucketEncryptionFuture{Future: future}
}

func (a *stub) DeleteBucketIntelligentTieringConfiguration(ctx workflow.Context, input *s3.DeleteBucketIntelligentTieringConfigurationInput) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.DeleteBucketIntelligentTieringConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketIntelligentTieringConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketIntelligentTieringConfigurationAsync(ctx workflow.Context, input *s3.DeleteBucketIntelligentTieringConfigurationInput) *DeleteBucketIntelligentTieringConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketIntelligentTieringConfiguration", input)
	return &DeleteBucketIntelligentTieringConfigurationFuture{Future: future}
}

func (a *stub) DeleteBucketInventoryConfiguration(ctx workflow.Context, input *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	var output s3.DeleteBucketInventoryConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketInventoryConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketInventoryConfigurationAsync(ctx workflow.Context, input *s3.DeleteBucketInventoryConfigurationInput) *DeleteBucketInventoryConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketInventoryConfiguration", input)
	return &DeleteBucketInventoryConfigurationFuture{Future: future}
}

func (a *stub) DeleteBucketLifecycle(ctx workflow.Context, input *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
	var output s3.DeleteBucketLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketLifecycleAsync(ctx workflow.Context, input *s3.DeleteBucketLifecycleInput) *DeleteBucketLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketLifecycle", input)
	return &DeleteBucketLifecycleFuture{Future: future}
}

func (a *stub) DeleteBucketMetricsConfiguration(ctx workflow.Context, input *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	var output s3.DeleteBucketMetricsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketMetricsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketMetricsConfigurationAsync(ctx workflow.Context, input *s3.DeleteBucketMetricsConfigurationInput) *DeleteBucketMetricsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketMetricsConfiguration", input)
	return &DeleteBucketMetricsConfigurationFuture{Future: future}
}

func (a *stub) DeleteBucketOwnershipControls(ctx workflow.Context, input *s3.DeleteBucketOwnershipControlsInput) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	var output s3.DeleteBucketOwnershipControlsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketOwnershipControls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketOwnershipControlsAsync(ctx workflow.Context, input *s3.DeleteBucketOwnershipControlsInput) *DeleteBucketOwnershipControlsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketOwnershipControls", input)
	return &DeleteBucketOwnershipControlsFuture{Future: future}
}

func (a *stub) DeleteBucketPolicy(ctx workflow.Context, input *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
	var output s3.DeleteBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketPolicyAsync(ctx workflow.Context, input *s3.DeleteBucketPolicyInput) *DeleteBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketPolicy", input)
	return &DeleteBucketPolicyFuture{Future: future}
}

func (a *stub) DeleteBucketReplication(ctx workflow.Context, input *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
	var output s3.DeleteBucketReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketReplicationAsync(ctx workflow.Context, input *s3.DeleteBucketReplicationInput) *DeleteBucketReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketReplication", input)
	return &DeleteBucketReplicationFuture{Future: future}
}

func (a *stub) DeleteBucketTagging(ctx workflow.Context, input *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
	var output s3.DeleteBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketTaggingAsync(ctx workflow.Context, input *s3.DeleteBucketTaggingInput) *DeleteBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketTagging", input)
	return &DeleteBucketTaggingFuture{Future: future}
}

func (a *stub) DeleteBucketWebsite(ctx workflow.Context, input *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
	var output s3.DeleteBucketWebsiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketWebsite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketWebsiteAsync(ctx workflow.Context, input *s3.DeleteBucketWebsiteInput) *DeleteBucketWebsiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteBucketWebsite", input)
	return &DeleteBucketWebsiteFuture{Future: future}
}

func (a *stub) DeleteObject(ctx workflow.Context, input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	var output s3.DeleteObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteObjectAsync(ctx workflow.Context, input *s3.DeleteObjectInput) *DeleteObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObject", input)
	return &DeleteObjectFuture{Future: future}
}

func (a *stub) DeleteObjectTagging(ctx workflow.Context, input *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
	var output s3.DeleteObjectTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObjectTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteObjectTaggingAsync(ctx workflow.Context, input *s3.DeleteObjectTaggingInput) *DeleteObjectTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObjectTagging", input)
	return &DeleteObjectTaggingFuture{Future: future}
}

func (a *stub) DeleteObjects(ctx workflow.Context, input *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	var output s3.DeleteObjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteObjectsAsync(ctx workflow.Context, input *s3.DeleteObjectsInput) *DeleteObjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeleteObjects", input)
	return &DeleteObjectsFuture{Future: future}
}

func (a *stub) DeletePublicAccessBlock(ctx workflow.Context, input *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
	var output s3.DeletePublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-DeletePublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3.DeletePublicAccessBlockInput) *DeletePublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-DeletePublicAccessBlock", input)
	return &DeletePublicAccessBlockFuture{Future: future}
}

func (a *stub) GetBucketAccelerateConfiguration(ctx workflow.Context, input *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	var output s3.GetBucketAccelerateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAccelerateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketAccelerateConfigurationAsync(ctx workflow.Context, input *s3.GetBucketAccelerateConfigurationInput) *GetBucketAccelerateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAccelerateConfiguration", input)
	return &GetBucketAccelerateConfigurationFuture{Future: future}
}

func (a *stub) GetBucketAcl(ctx workflow.Context, input *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
	var output s3.GetBucketAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketAclAsync(ctx workflow.Context, input *s3.GetBucketAclInput) *GetBucketAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAcl", input)
	return &GetBucketAclFuture{Future: future}
}

func (a *stub) GetBucketAnalyticsConfiguration(ctx workflow.Context, input *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	var output s3.GetBucketAnalyticsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAnalyticsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketAnalyticsConfigurationAsync(ctx workflow.Context, input *s3.GetBucketAnalyticsConfigurationInput) *GetBucketAnalyticsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketAnalyticsConfiguration", input)
	return &GetBucketAnalyticsConfigurationFuture{Future: future}
}

func (a *stub) GetBucketCors(ctx workflow.Context, input *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
	var output s3.GetBucketCorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketCors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketCorsAsync(ctx workflow.Context, input *s3.GetBucketCorsInput) *GetBucketCorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketCors", input)
	return &GetBucketCorsFuture{Future: future}
}

func (a *stub) GetBucketEncryption(ctx workflow.Context, input *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
	var output s3.GetBucketEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketEncryptionAsync(ctx workflow.Context, input *s3.GetBucketEncryptionInput) *GetBucketEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketEncryption", input)
	return &GetBucketEncryptionFuture{Future: future}
}

func (a *stub) GetBucketIntelligentTieringConfiguration(ctx workflow.Context, input *s3.GetBucketIntelligentTieringConfigurationInput) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.GetBucketIntelligentTieringConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketIntelligentTieringConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketIntelligentTieringConfigurationAsync(ctx workflow.Context, input *s3.GetBucketIntelligentTieringConfigurationInput) *GetBucketIntelligentTieringConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketIntelligentTieringConfiguration", input)
	return &GetBucketIntelligentTieringConfigurationFuture{Future: future}
}

func (a *stub) GetBucketInventoryConfiguration(ctx workflow.Context, input *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
	var output s3.GetBucketInventoryConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketInventoryConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketInventoryConfigurationAsync(ctx workflow.Context, input *s3.GetBucketInventoryConfigurationInput) *GetBucketInventoryConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketInventoryConfiguration", input)
	return &GetBucketInventoryConfigurationFuture{Future: future}
}

func (a *stub) GetBucketLifecycle(ctx workflow.Context, input *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
	var output s3.GetBucketLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketLifecycleAsync(ctx workflow.Context, input *s3.GetBucketLifecycleInput) *GetBucketLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLifecycle", input)
	return &GetBucketLifecycleFuture{Future: future}
}

func (a *stub) GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	var output s3.GetBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3.GetBucketLifecycleConfigurationInput) *GetBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLifecycleConfiguration", input)
	return &GetBucketLifecycleConfigurationFuture{Future: future}
}

func (a *stub) GetBucketLocation(ctx workflow.Context, input *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
	var output s3.GetBucketLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketLocationAsync(ctx workflow.Context, input *s3.GetBucketLocationInput) *GetBucketLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLocation", input)
	return &GetBucketLocationFuture{Future: future}
}

func (a *stub) GetBucketLogging(ctx workflow.Context, input *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
	var output s3.GetBucketLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketLoggingAsync(ctx workflow.Context, input *s3.GetBucketLoggingInput) *GetBucketLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketLogging", input)
	return &GetBucketLoggingFuture{Future: future}
}

func (a *stub) GetBucketMetricsConfiguration(ctx workflow.Context, input *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
	var output s3.GetBucketMetricsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketMetricsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketMetricsConfigurationAsync(ctx workflow.Context, input *s3.GetBucketMetricsConfigurationInput) *GetBucketMetricsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketMetricsConfiguration", input)
	return &GetBucketMetricsConfigurationFuture{Future: future}
}

func (a *stub) GetBucketNotification(ctx workflow.Context, input *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
	var output s3.NotificationConfigurationDeprecated
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketNotificationAsync(ctx workflow.Context, input *s3.GetBucketNotificationConfigurationRequest) *GetBucketNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketNotification", input)
	return &GetBucketNotificationFuture{Future: future}
}

func (a *stub) GetBucketNotificationConfiguration(ctx workflow.Context, input *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
	var output s3.NotificationConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketNotificationConfigurationAsync(ctx workflow.Context, input *s3.GetBucketNotificationConfigurationRequest) *GetBucketNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketNotificationConfiguration", input)
	return &GetBucketNotificationConfigurationFuture{Future: future}
}

func (a *stub) GetBucketOwnershipControls(ctx workflow.Context, input *s3.GetBucketOwnershipControlsInput) (*s3.GetBucketOwnershipControlsOutput, error) {
	var output s3.GetBucketOwnershipControlsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketOwnershipControls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketOwnershipControlsAsync(ctx workflow.Context, input *s3.GetBucketOwnershipControlsInput) *GetBucketOwnershipControlsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketOwnershipControls", input)
	return &GetBucketOwnershipControlsFuture{Future: future}
}

func (a *stub) GetBucketPolicy(ctx workflow.Context, input *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
	var output s3.GetBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketPolicyAsync(ctx workflow.Context, input *s3.GetBucketPolicyInput) *GetBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketPolicy", input)
	return &GetBucketPolicyFuture{Future: future}
}

func (a *stub) GetBucketPolicyStatus(ctx workflow.Context, input *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
	var output s3.GetBucketPolicyStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketPolicyStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketPolicyStatusAsync(ctx workflow.Context, input *s3.GetBucketPolicyStatusInput) *GetBucketPolicyStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketPolicyStatus", input)
	return &GetBucketPolicyStatusFuture{Future: future}
}

func (a *stub) GetBucketReplication(ctx workflow.Context, input *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
	var output s3.GetBucketReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketReplicationAsync(ctx workflow.Context, input *s3.GetBucketReplicationInput) *GetBucketReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketReplication", input)
	return &GetBucketReplicationFuture{Future: future}
}

func (a *stub) GetBucketRequestPayment(ctx workflow.Context, input *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
	var output s3.GetBucketRequestPaymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketRequestPayment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketRequestPaymentAsync(ctx workflow.Context, input *s3.GetBucketRequestPaymentInput) *GetBucketRequestPaymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketRequestPayment", input)
	return &GetBucketRequestPaymentFuture{Future: future}
}

func (a *stub) GetBucketTagging(ctx workflow.Context, input *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
	var output s3.GetBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketTaggingAsync(ctx workflow.Context, input *s3.GetBucketTaggingInput) *GetBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketTagging", input)
	return &GetBucketTaggingFuture{Future: future}
}

func (a *stub) GetBucketVersioning(ctx workflow.Context, input *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
	var output s3.GetBucketVersioningOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketVersioning", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketVersioningAsync(ctx workflow.Context, input *s3.GetBucketVersioningInput) *GetBucketVersioningFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketVersioning", input)
	return &GetBucketVersioningFuture{Future: future}
}

func (a *stub) GetBucketWebsite(ctx workflow.Context, input *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
	var output s3.GetBucketWebsiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketWebsite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketWebsiteAsync(ctx workflow.Context, input *s3.GetBucketWebsiteInput) *GetBucketWebsiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetBucketWebsite", input)
	return &GetBucketWebsiteFuture{Future: future}
}

func (a *stub) GetObject(ctx workflow.Context, input *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	var output s3.GetObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectAsync(ctx workflow.Context, input *s3.GetObjectInput) *GetObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObject", input)
	return &GetObjectFuture{Future: future}
}

func (a *stub) GetObjectAcl(ctx workflow.Context, input *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
	var output s3.GetObjectAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectAclAsync(ctx workflow.Context, input *s3.GetObjectAclInput) *GetObjectAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectAcl", input)
	return &GetObjectAclFuture{Future: future}
}

func (a *stub) GetObjectLegalHold(ctx workflow.Context, input *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
	var output s3.GetObjectLegalHoldOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectLegalHold", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectLegalHoldAsync(ctx workflow.Context, input *s3.GetObjectLegalHoldInput) *GetObjectLegalHoldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectLegalHold", input)
	return &GetObjectLegalHoldFuture{Future: future}
}

func (a *stub) GetObjectLockConfiguration(ctx workflow.Context, input *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
	var output s3.GetObjectLockConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectLockConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectLockConfigurationAsync(ctx workflow.Context, input *s3.GetObjectLockConfigurationInput) *GetObjectLockConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectLockConfiguration", input)
	return &GetObjectLockConfigurationFuture{Future: future}
}

func (a *stub) GetObjectRetention(ctx workflow.Context, input *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
	var output s3.GetObjectRetentionOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectRetention", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectRetentionAsync(ctx workflow.Context, input *s3.GetObjectRetentionInput) *GetObjectRetentionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectRetention", input)
	return &GetObjectRetentionFuture{Future: future}
}

func (a *stub) GetObjectTagging(ctx workflow.Context, input *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
	var output s3.GetObjectTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectTaggingAsync(ctx workflow.Context, input *s3.GetObjectTaggingInput) *GetObjectTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectTagging", input)
	return &GetObjectTaggingFuture{Future: future}
}

func (a *stub) GetObjectTorrent(ctx workflow.Context, input *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
	var output s3.GetObjectTorrentOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectTorrent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectTorrentAsync(ctx workflow.Context, input *s3.GetObjectTorrentInput) *GetObjectTorrentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetObjectTorrent", input)
	return &GetObjectTorrentFuture{Future: future}
}

func (a *stub) GetPublicAccessBlock(ctx workflow.Context, input *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
	var output s3.GetPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-GetPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicAccessBlockAsync(ctx workflow.Context, input *s3.GetPublicAccessBlockInput) *GetPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-GetPublicAccessBlock", input)
	return &GetPublicAccessBlockFuture{Future: future}
}

func (a *stub) HeadBucket(ctx workflow.Context, input *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
	var output s3.HeadBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-HeadBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) HeadBucketAsync(ctx workflow.Context, input *s3.HeadBucketInput) *HeadBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-HeadBucket", input)
	return &HeadBucketFuture{Future: future}
}

func (a *stub) HeadObject(ctx workflow.Context, input *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	var output s3.HeadObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-HeadObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) HeadObjectAsync(ctx workflow.Context, input *s3.HeadObjectInput) *HeadObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-HeadObject", input)
	return &HeadObjectFuture{Future: future}
}

func (a *stub) ListBucketAnalyticsConfigurations(ctx workflow.Context, input *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	var output s3.ListBucketAnalyticsConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketAnalyticsConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBucketAnalyticsConfigurationsAsync(ctx workflow.Context, input *s3.ListBucketAnalyticsConfigurationsInput) *ListBucketAnalyticsConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketAnalyticsConfigurations", input)
	return &ListBucketAnalyticsConfigurationsFuture{Future: future}
}

func (a *stub) ListBucketIntelligentTieringConfigurations(ctx workflow.Context, input *s3.ListBucketIntelligentTieringConfigurationsInput) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	var output s3.ListBucketIntelligentTieringConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketIntelligentTieringConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBucketIntelligentTieringConfigurationsAsync(ctx workflow.Context, input *s3.ListBucketIntelligentTieringConfigurationsInput) *ListBucketIntelligentTieringConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketIntelligentTieringConfigurations", input)
	return &ListBucketIntelligentTieringConfigurationsFuture{Future: future}
}

func (a *stub) ListBucketInventoryConfigurations(ctx workflow.Context, input *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	var output s3.ListBucketInventoryConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketInventoryConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBucketInventoryConfigurationsAsync(ctx workflow.Context, input *s3.ListBucketInventoryConfigurationsInput) *ListBucketInventoryConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketInventoryConfigurations", input)
	return &ListBucketInventoryConfigurationsFuture{Future: future}
}

func (a *stub) ListBucketMetricsConfigurations(ctx workflow.Context, input *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	var output s3.ListBucketMetricsConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketMetricsConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBucketMetricsConfigurationsAsync(ctx workflow.Context, input *s3.ListBucketMetricsConfigurationsInput) *ListBucketMetricsConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListBucketMetricsConfigurations", input)
	return &ListBucketMetricsConfigurationsFuture{Future: future}
}

func (a *stub) ListBuckets(ctx workflow.Context, input *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
	var output s3.ListBucketsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListBuckets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBucketsAsync(ctx workflow.Context, input *s3.ListBucketsInput) *ListBucketsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListBuckets", input)
	return &ListBucketsFuture{Future: future}
}

func (a *stub) ListMultipartUploads(ctx workflow.Context, input *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	var output s3.ListMultipartUploadsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListMultipartUploads", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMultipartUploadsAsync(ctx workflow.Context, input *s3.ListMultipartUploadsInput) *ListMultipartUploadsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListMultipartUploads", input)
	return &ListMultipartUploadsFuture{Future: future}
}

func (a *stub) ListObjectVersions(ctx workflow.Context, input *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	var output s3.ListObjectVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListObjectVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectVersionsAsync(ctx workflow.Context, input *s3.ListObjectVersionsInput) *ListObjectVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListObjectVersions", input)
	return &ListObjectVersionsFuture{Future: future}
}

func (a *stub) ListObjects(ctx workflow.Context, input *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	var output s3.ListObjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListObjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectsAsync(ctx workflow.Context, input *s3.ListObjectsInput) *ListObjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListObjects", input)
	return &ListObjectsFuture{Future: future}
}

func (a *stub) ListObjectsV2(ctx workflow.Context, input *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	var output s3.ListObjectsV2Output
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListObjectsV2", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectsV2Async(ctx workflow.Context, input *s3.ListObjectsV2Input) *ListObjectsV2Future {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListObjectsV2", input)
	return &ListObjectsV2Future{Future: future}
}

func (a *stub) ListParts(ctx workflow.Context, input *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	var output s3.ListPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-ListParts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPartsAsync(ctx workflow.Context, input *s3.ListPartsInput) *ListPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-ListParts", input)
	return &ListPartsFuture{Future: future}
}

func (a *stub) PutBucketAccelerateConfiguration(ctx workflow.Context, input *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	var output s3.PutBucketAccelerateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAccelerateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketAccelerateConfigurationAsync(ctx workflow.Context, input *s3.PutBucketAccelerateConfigurationInput) *PutBucketAccelerateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAccelerateConfiguration", input)
	return &PutBucketAccelerateConfigurationFuture{Future: future}
}

func (a *stub) PutBucketAcl(ctx workflow.Context, input *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
	var output s3.PutBucketAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketAclAsync(ctx workflow.Context, input *s3.PutBucketAclInput) *PutBucketAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAcl", input)
	return &PutBucketAclFuture{Future: future}
}

func (a *stub) PutBucketAnalyticsConfiguration(ctx workflow.Context, input *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	var output s3.PutBucketAnalyticsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAnalyticsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketAnalyticsConfigurationAsync(ctx workflow.Context, input *s3.PutBucketAnalyticsConfigurationInput) *PutBucketAnalyticsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketAnalyticsConfiguration", input)
	return &PutBucketAnalyticsConfigurationFuture{Future: future}
}

func (a *stub) PutBucketCors(ctx workflow.Context, input *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
	var output s3.PutBucketCorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketCors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketCorsAsync(ctx workflow.Context, input *s3.PutBucketCorsInput) *PutBucketCorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketCors", input)
	return &PutBucketCorsFuture{Future: future}
}

func (a *stub) PutBucketEncryption(ctx workflow.Context, input *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
	var output s3.PutBucketEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketEncryptionAsync(ctx workflow.Context, input *s3.PutBucketEncryptionInput) *PutBucketEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketEncryption", input)
	return &PutBucketEncryptionFuture{Future: future}
}

func (a *stub) PutBucketIntelligentTieringConfiguration(ctx workflow.Context, input *s3.PutBucketIntelligentTieringConfigurationInput) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	var output s3.PutBucketIntelligentTieringConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketIntelligentTieringConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketIntelligentTieringConfigurationAsync(ctx workflow.Context, input *s3.PutBucketIntelligentTieringConfigurationInput) *PutBucketIntelligentTieringConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketIntelligentTieringConfiguration", input)
	return &PutBucketIntelligentTieringConfigurationFuture{Future: future}
}

func (a *stub) PutBucketInventoryConfiguration(ctx workflow.Context, input *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
	var output s3.PutBucketInventoryConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketInventoryConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketInventoryConfigurationAsync(ctx workflow.Context, input *s3.PutBucketInventoryConfigurationInput) *PutBucketInventoryConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketInventoryConfiguration", input)
	return &PutBucketInventoryConfigurationFuture{Future: future}
}

func (a *stub) PutBucketLifecycle(ctx workflow.Context, input *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
	var output s3.PutBucketLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketLifecycleAsync(ctx workflow.Context, input *s3.PutBucketLifecycleInput) *PutBucketLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLifecycle", input)
	return &PutBucketLifecycleFuture{Future: future}
}

func (a *stub) PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	var output s3.PutBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3.PutBucketLifecycleConfigurationInput) *PutBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLifecycleConfiguration", input)
	return &PutBucketLifecycleConfigurationFuture{Future: future}
}

func (a *stub) PutBucketLogging(ctx workflow.Context, input *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
	var output s3.PutBucketLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketLoggingAsync(ctx workflow.Context, input *s3.PutBucketLoggingInput) *PutBucketLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketLogging", input)
	return &PutBucketLoggingFuture{Future: future}
}

func (a *stub) PutBucketMetricsConfiguration(ctx workflow.Context, input *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
	var output s3.PutBucketMetricsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketMetricsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketMetricsConfigurationAsync(ctx workflow.Context, input *s3.PutBucketMetricsConfigurationInput) *PutBucketMetricsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketMetricsConfiguration", input)
	return &PutBucketMetricsConfigurationFuture{Future: future}
}

func (a *stub) PutBucketNotification(ctx workflow.Context, input *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
	var output s3.PutBucketNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketNotificationAsync(ctx workflow.Context, input *s3.PutBucketNotificationInput) *PutBucketNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketNotification", input)
	return &PutBucketNotificationFuture{Future: future}
}

func (a *stub) PutBucketNotificationConfiguration(ctx workflow.Context, input *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
	var output s3.PutBucketNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketNotificationConfigurationAsync(ctx workflow.Context, input *s3.PutBucketNotificationConfigurationInput) *PutBucketNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketNotificationConfiguration", input)
	return &PutBucketNotificationConfigurationFuture{Future: future}
}

func (a *stub) PutBucketOwnershipControls(ctx workflow.Context, input *s3.PutBucketOwnershipControlsInput) (*s3.PutBucketOwnershipControlsOutput, error) {
	var output s3.PutBucketOwnershipControlsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketOwnershipControls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketOwnershipControlsAsync(ctx workflow.Context, input *s3.PutBucketOwnershipControlsInput) *PutBucketOwnershipControlsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketOwnershipControls", input)
	return &PutBucketOwnershipControlsFuture{Future: future}
}

func (a *stub) PutBucketPolicy(ctx workflow.Context, input *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
	var output s3.PutBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketPolicyAsync(ctx workflow.Context, input *s3.PutBucketPolicyInput) *PutBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketPolicy", input)
	return &PutBucketPolicyFuture{Future: future}
}

func (a *stub) PutBucketReplication(ctx workflow.Context, input *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
	var output s3.PutBucketReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketReplicationAsync(ctx workflow.Context, input *s3.PutBucketReplicationInput) *PutBucketReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketReplication", input)
	return &PutBucketReplicationFuture{Future: future}
}

func (a *stub) PutBucketRequestPayment(ctx workflow.Context, input *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
	var output s3.PutBucketRequestPaymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketRequestPayment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketRequestPaymentAsync(ctx workflow.Context, input *s3.PutBucketRequestPaymentInput) *PutBucketRequestPaymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketRequestPayment", input)
	return &PutBucketRequestPaymentFuture{Future: future}
}

func (a *stub) PutBucketTagging(ctx workflow.Context, input *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
	var output s3.PutBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketTaggingAsync(ctx workflow.Context, input *s3.PutBucketTaggingInput) *PutBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketTagging", input)
	return &PutBucketTaggingFuture{Future: future}
}

func (a *stub) PutBucketVersioning(ctx workflow.Context, input *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
	var output s3.PutBucketVersioningOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketVersioning", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketVersioningAsync(ctx workflow.Context, input *s3.PutBucketVersioningInput) *PutBucketVersioningFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketVersioning", input)
	return &PutBucketVersioningFuture{Future: future}
}

func (a *stub) PutBucketWebsite(ctx workflow.Context, input *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
	var output s3.PutBucketWebsiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketWebsite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketWebsiteAsync(ctx workflow.Context, input *s3.PutBucketWebsiteInput) *PutBucketWebsiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutBucketWebsite", input)
	return &PutBucketWebsiteFuture{Future: future}
}

func (a *stub) PutObject(ctx workflow.Context, input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	var output s3.PutObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectAsync(ctx workflow.Context, input *s3.PutObjectInput) *PutObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObject", input)
	return &PutObjectFuture{Future: future}
}

func (a *stub) PutObjectAcl(ctx workflow.Context, input *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
	var output s3.PutObjectAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectAclAsync(ctx workflow.Context, input *s3.PutObjectAclInput) *PutObjectAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectAcl", input)
	return &PutObjectAclFuture{Future: future}
}

func (a *stub) PutObjectLegalHold(ctx workflow.Context, input *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
	var output s3.PutObjectLegalHoldOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectLegalHold", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectLegalHoldAsync(ctx workflow.Context, input *s3.PutObjectLegalHoldInput) *PutObjectLegalHoldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectLegalHold", input)
	return &PutObjectLegalHoldFuture{Future: future}
}

func (a *stub) PutObjectLockConfiguration(ctx workflow.Context, input *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
	var output s3.PutObjectLockConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectLockConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectLockConfigurationAsync(ctx workflow.Context, input *s3.PutObjectLockConfigurationInput) *PutObjectLockConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectLockConfiguration", input)
	return &PutObjectLockConfigurationFuture{Future: future}
}

func (a *stub) PutObjectRetention(ctx workflow.Context, input *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
	var output s3.PutObjectRetentionOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectRetention", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectRetentionAsync(ctx workflow.Context, input *s3.PutObjectRetentionInput) *PutObjectRetentionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectRetention", input)
	return &PutObjectRetentionFuture{Future: future}
}

func (a *stub) PutObjectTagging(ctx workflow.Context, input *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
	var output s3.PutObjectTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutObjectTaggingAsync(ctx workflow.Context, input *s3.PutObjectTaggingInput) *PutObjectTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutObjectTagging", input)
	return &PutObjectTaggingFuture{Future: future}
}

func (a *stub) PutPublicAccessBlock(ctx workflow.Context, input *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
	var output s3.PutPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-PutPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPublicAccessBlockAsync(ctx workflow.Context, input *s3.PutPublicAccessBlockInput) *PutPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-PutPublicAccessBlock", input)
	return &PutPublicAccessBlockFuture{Future: future}
}

func (a *stub) RestoreObject(ctx workflow.Context, input *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
	var output s3.RestoreObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-RestoreObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreObjectAsync(ctx workflow.Context, input *s3.RestoreObjectInput) *RestoreObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-RestoreObject", input)
	return &RestoreObjectFuture{Future: future}
}

func (a *stub) SelectObjectContent(ctx workflow.Context, input *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
	var output s3.SelectObjectContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-SelectObjectContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectObjectContentAsync(ctx workflow.Context, input *s3.SelectObjectContentInput) *SelectObjectContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-SelectObjectContent", input)
	return &SelectObjectContentFuture{Future: future}
}

func (a *stub) UploadPart(ctx workflow.Context, input *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	var output s3.UploadPartOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-UploadPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadPartAsync(ctx workflow.Context, input *s3.UploadPartInput) *UploadPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-UploadPart", input)
	return &UploadPartFuture{Future: future}
}

func (a *stub) UploadPartCopy(ctx workflow.Context, input *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	var output s3.UploadPartCopyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3-UploadPartCopy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadPartCopyAsync(ctx workflow.Context, input *s3.UploadPartCopyInput) *UploadPartCopyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-UploadPartCopy", input)
	return &UploadPartCopyFuture{Future: future}
}

func (a *stub) WaitUntilBucketExists(ctx workflow.Context, input *s3.HeadBucketInput) error {
	return workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilBucketExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilBucketExistsAsync(ctx workflow.Context, input *s3.HeadBucketInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilBucketExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilBucketNotExists(ctx workflow.Context, input *s3.HeadBucketInput) error {
	return workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilBucketNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilBucketNotExistsAsync(ctx workflow.Context, input *s3.HeadBucketInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilBucketNotExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilObjectExists(ctx workflow.Context, input *s3.HeadObjectInput) error {
	return workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilObjectExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilObjectExistsAsync(ctx workflow.Context, input *s3.HeadObjectInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilObjectExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilObjectNotExists(ctx workflow.Context, input *s3.HeadObjectInput) error {
	return workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilObjectNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilObjectNotExistsAsync(ctx workflow.Context, input *s3.HeadObjectInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3-WaitUntilObjectNotExists", input)
	return clients.NewVoidFuture(future)
}
