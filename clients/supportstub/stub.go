// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package supportstub

import (
	"github.com/aws/aws-sdk-go/service/support"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddAttachmentsToSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddAttachmentsToSetFuture) Get(ctx workflow.Context) (*support.AddAttachmentsToSetOutput, error) {
	var output support.AddAttachmentsToSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddCommunicationToCaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddCommunicationToCaseFuture) Get(ctx workflow.Context) (*support.AddCommunicationToCaseOutput, error) {
	var output support.AddCommunicationToCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCaseFuture) Get(ctx workflow.Context) (*support.CreateCaseOutput, error) {
	var output support.CreateCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAttachmentFuture) Get(ctx workflow.Context) (*support.DescribeAttachmentOutput, error) {
	var output support.DescribeAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCasesFuture) Get(ctx workflow.Context) (*support.DescribeCasesOutput, error) {
	var output support.DescribeCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCommunicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCommunicationsFuture) Get(ctx workflow.Context) (*support.DescribeCommunicationsOutput, error) {
	var output support.DescribeCommunicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServicesFuture) Get(ctx workflow.Context) (*support.DescribeServicesOutput, error) {
	var output support.DescribeServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSeverityLevelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSeverityLevelsFuture) Get(ctx workflow.Context) (*support.DescribeSeverityLevelsOutput, error) {
	var output support.DescribeSeverityLevelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrustedAdvisorCheckRefreshStatusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrustedAdvisorCheckRefreshStatusesFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrustedAdvisorCheckResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrustedAdvisorCheckResultFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	var output support.DescribeTrustedAdvisorCheckResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrustedAdvisorCheckSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrustedAdvisorCheckSummariesFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrustedAdvisorChecksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrustedAdvisorChecksFuture) Get(ctx workflow.Context) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	var output support.DescribeTrustedAdvisorChecksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RefreshTrustedAdvisorCheckFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RefreshTrustedAdvisorCheckFuture) Get(ctx workflow.Context) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	var output support.RefreshTrustedAdvisorCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResolveCaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResolveCaseFuture) Get(ctx workflow.Context) (*support.ResolveCaseOutput, error) {
	var output support.ResolveCaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddAttachmentsToSet(ctx workflow.Context, input *support.AddAttachmentsToSetInput) (*support.AddAttachmentsToSetOutput, error) {
	var output support.AddAttachmentsToSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-AddAttachmentsToSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddAttachmentsToSetAsync(ctx workflow.Context, input *support.AddAttachmentsToSetInput) *AddAttachmentsToSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-AddAttachmentsToSet", input)
	return &AddAttachmentsToSetFuture{Future: future}
}

func (a *stub) AddCommunicationToCase(ctx workflow.Context, input *support.AddCommunicationToCaseInput) (*support.AddCommunicationToCaseOutput, error) {
	var output support.AddCommunicationToCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-AddCommunicationToCase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddCommunicationToCaseAsync(ctx workflow.Context, input *support.AddCommunicationToCaseInput) *AddCommunicationToCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-AddCommunicationToCase", input)
	return &AddCommunicationToCaseFuture{Future: future}
}

func (a *stub) CreateCase(ctx workflow.Context, input *support.CreateCaseInput) (*support.CreateCaseOutput, error) {
	var output support.CreateCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-CreateCase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCaseAsync(ctx workflow.Context, input *support.CreateCaseInput) *CreateCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-CreateCase", input)
	return &CreateCaseFuture{Future: future}
}

func (a *stub) DescribeAttachment(ctx workflow.Context, input *support.DescribeAttachmentInput) (*support.DescribeAttachmentOutput, error) {
	var output support.DescribeAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAttachmentAsync(ctx workflow.Context, input *support.DescribeAttachmentInput) *DescribeAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeAttachment", input)
	return &DescribeAttachmentFuture{Future: future}
}

func (a *stub) DescribeCases(ctx workflow.Context, input *support.DescribeCasesInput) (*support.DescribeCasesOutput, error) {
	var output support.DescribeCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeCases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCasesAsync(ctx workflow.Context, input *support.DescribeCasesInput) *DescribeCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeCases", input)
	return &DescribeCasesFuture{Future: future}
}

func (a *stub) DescribeCommunications(ctx workflow.Context, input *support.DescribeCommunicationsInput) (*support.DescribeCommunicationsOutput, error) {
	var output support.DescribeCommunicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeCommunications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCommunicationsAsync(ctx workflow.Context, input *support.DescribeCommunicationsInput) *DescribeCommunicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeCommunications", input)
	return &DescribeCommunicationsFuture{Future: future}
}

func (a *stub) DescribeServices(ctx workflow.Context, input *support.DescribeServicesInput) (*support.DescribeServicesOutput, error) {
	var output support.DescribeServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServicesAsync(ctx workflow.Context, input *support.DescribeServicesInput) *DescribeServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeServices", input)
	return &DescribeServicesFuture{Future: future}
}

func (a *stub) DescribeSeverityLevels(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) (*support.DescribeSeverityLevelsOutput, error) {
	var output support.DescribeSeverityLevelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeSeverityLevels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSeverityLevelsAsync(ctx workflow.Context, input *support.DescribeSeverityLevelsInput) *DescribeSeverityLevelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeSeverityLevels", input)
	return &DescribeSeverityLevelsFuture{Future: future}
}

func (a *stub) DescribeTrustedAdvisorCheckRefreshStatuses(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckRefreshStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustedAdvisorCheckRefreshStatusesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *DescribeTrustedAdvisorCheckRefreshStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckRefreshStatuses", input)
	return &DescribeTrustedAdvisorCheckRefreshStatusesFuture{Future: future}
}

func (a *stub) DescribeTrustedAdvisorCheckResult(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	var output support.DescribeTrustedAdvisorCheckResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustedAdvisorCheckResultAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckResultInput) *DescribeTrustedAdvisorCheckResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckResult", input)
	return &DescribeTrustedAdvisorCheckResultFuture{Future: future}
}

func (a *stub) DescribeTrustedAdvisorCheckSummaries(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	var output support.DescribeTrustedAdvisorCheckSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustedAdvisorCheckSummariesAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorCheckSummariesInput) *DescribeTrustedAdvisorCheckSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorCheckSummaries", input)
	return &DescribeTrustedAdvisorCheckSummariesFuture{Future: future}
}

func (a *stub) DescribeTrustedAdvisorChecks(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	var output support.DescribeTrustedAdvisorChecksOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorChecks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustedAdvisorChecksAsync(ctx workflow.Context, input *support.DescribeTrustedAdvisorChecksInput) *DescribeTrustedAdvisorChecksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-DescribeTrustedAdvisorChecks", input)
	return &DescribeTrustedAdvisorChecksFuture{Future: future}
}

func (a *stub) RefreshTrustedAdvisorCheck(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	var output support.RefreshTrustedAdvisorCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-RefreshTrustedAdvisorCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RefreshTrustedAdvisorCheckAsync(ctx workflow.Context, input *support.RefreshTrustedAdvisorCheckInput) *RefreshTrustedAdvisorCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-RefreshTrustedAdvisorCheck", input)
	return &RefreshTrustedAdvisorCheckFuture{Future: future}
}

func (a *stub) ResolveCase(ctx workflow.Context, input *support.ResolveCaseInput) (*support.ResolveCaseOutput, error) {
	var output support.ResolveCaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-support-ResolveCase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveCaseAsync(ctx workflow.Context, input *support.ResolveCaseInput) *ResolveCaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-support-ResolveCase", input)
	return &ResolveCaseFuture{Future: future}
}
