// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package snowballstub

import (
	"github.com/aws/aws-sdk-go/service/snowball"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelClusterFuture) Get(ctx workflow.Context) (*snowball.CancelClusterOutput, error) {
	var output snowball.CancelClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelJobFuture) Get(ctx workflow.Context) (*snowball.CancelJobOutput, error) {
	var output snowball.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAddressFuture) Get(ctx workflow.Context) (*snowball.CreateAddressOutput, error) {
	var output snowball.CreateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterFuture) Get(ctx workflow.Context) (*snowball.CreateClusterOutput, error) {
	var output snowball.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateJobFuture) Get(ctx workflow.Context) (*snowball.CreateJobOutput, error) {
	var output snowball.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReturnShippingLabelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReturnShippingLabelFuture) Get(ctx workflow.Context) (*snowball.CreateReturnShippingLabelOutput, error) {
	var output snowball.CreateReturnShippingLabelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAddressFuture) Get(ctx workflow.Context) (*snowball.DescribeAddressOutput, error) {
	var output snowball.DescribeAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAddressesFuture) Get(ctx workflow.Context) (*snowball.DescribeAddressesOutput, error) {
	var output snowball.DescribeAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterFuture) Get(ctx workflow.Context) (*snowball.DescribeClusterOutput, error) {
	var output snowball.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeJobFuture) Get(ctx workflow.Context) (*snowball.DescribeJobOutput, error) {
	var output snowball.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReturnShippingLabelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReturnShippingLabelFuture) Get(ctx workflow.Context) (*snowball.DescribeReturnShippingLabelOutput, error) {
	var output snowball.DescribeReturnShippingLabelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobManifestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobManifestFuture) Get(ctx workflow.Context) (*snowball.GetJobManifestOutput, error) {
	var output snowball.GetJobManifestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobUnlockCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobUnlockCodeFuture) Get(ctx workflow.Context) (*snowball.GetJobUnlockCodeOutput, error) {
	var output snowball.GetJobUnlockCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSnowballUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSnowballUsageFuture) Get(ctx workflow.Context) (*snowball.GetSnowballUsageOutput, error) {
	var output snowball.GetSnowballUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSoftwareUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSoftwareUpdatesFuture) Get(ctx workflow.Context) (*snowball.GetSoftwareUpdatesOutput, error) {
	var output snowball.GetSoftwareUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListClusterJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListClusterJobsFuture) Get(ctx workflow.Context) (*snowball.ListClusterJobsOutput, error) {
	var output snowball.ListClusterJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListClustersFuture) Get(ctx workflow.Context) (*snowball.ListClustersOutput, error) {
	var output snowball.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCompatibleImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCompatibleImagesFuture) Get(ctx workflow.Context) (*snowball.ListCompatibleImagesOutput, error) {
	var output snowball.ListCompatibleImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobsFuture) Get(ctx workflow.Context) (*snowball.ListJobsOutput, error) {
	var output snowball.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClusterFuture) Get(ctx workflow.Context) (*snowball.UpdateClusterOutput, error) {
	var output snowball.UpdateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobFuture) Get(ctx workflow.Context) (*snowball.UpdateJobOutput, error) {
	var output snowball.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobShipmentStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobShipmentStateFuture) Get(ctx workflow.Context) (*snowball.UpdateJobShipmentStateOutput, error) {
	var output snowball.UpdateJobShipmentStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelCluster(ctx workflow.Context, input *snowball.CancelClusterInput) (*snowball.CancelClusterOutput, error) {
	var output snowball.CancelClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CancelCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelClusterAsync(ctx workflow.Context, input *snowball.CancelClusterInput) *CancelClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CancelCluster", input)
	return &CancelClusterFuture{Future: future}
}

func (a *stub) CancelJob(ctx workflow.Context, input *snowball.CancelJobInput) (*snowball.CancelJobOutput, error) {
	var output snowball.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobAsync(ctx workflow.Context, input *snowball.CancelJobInput) *CancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CancelJob", input)
	return &CancelJobFuture{Future: future}
}

func (a *stub) CreateAddress(ctx workflow.Context, input *snowball.CreateAddressInput) (*snowball.CreateAddressOutput, error) {
	var output snowball.CreateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CreateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAddressAsync(ctx workflow.Context, input *snowball.CreateAddressInput) *CreateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CreateAddress", input)
	return &CreateAddressFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *snowball.CreateClusterInput) (*snowball.CreateClusterOutput, error) {
	var output snowball.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *snowball.CreateClusterInput) *CreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CreateCluster", input)
	return &CreateClusterFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *snowball.CreateJobInput) (*snowball.CreateJobOutput, error) {
	var output snowball.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *snowball.CreateJobInput) *CreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CreateJob", input)
	return &CreateJobFuture{Future: future}
}

func (a *stub) CreateReturnShippingLabel(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) (*snowball.CreateReturnShippingLabelOutput, error) {
	var output snowball.CreateReturnShippingLabelOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-CreateReturnShippingLabel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReturnShippingLabelAsync(ctx workflow.Context, input *snowball.CreateReturnShippingLabelInput) *CreateReturnShippingLabelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-CreateReturnShippingLabel", input)
	return &CreateReturnShippingLabelFuture{Future: future}
}

func (a *stub) DescribeAddress(ctx workflow.Context, input *snowball.DescribeAddressInput) (*snowball.DescribeAddressOutput, error) {
	var output snowball.DescribeAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAddressAsync(ctx workflow.Context, input *snowball.DescribeAddressInput) *DescribeAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeAddress", input)
	return &DescribeAddressFuture{Future: future}
}

func (a *stub) DescribeAddresses(ctx workflow.Context, input *snowball.DescribeAddressesInput) (*snowball.DescribeAddressesOutput, error) {
	var output snowball.DescribeAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAddressesAsync(ctx workflow.Context, input *snowball.DescribeAddressesInput) *DescribeAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeAddresses", input)
	return &DescribeAddressesFuture{Future: future}
}

func (a *stub) DescribeCluster(ctx workflow.Context, input *snowball.DescribeClusterInput) (*snowball.DescribeClusterOutput, error) {
	var output snowball.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterAsync(ctx workflow.Context, input *snowball.DescribeClusterInput) *DescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeCluster", input)
	return &DescribeClusterFuture{Future: future}
}

func (a *stub) DescribeJob(ctx workflow.Context, input *snowball.DescribeJobInput) (*snowball.DescribeJobOutput, error) {
	var output snowball.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobAsync(ctx workflow.Context, input *snowball.DescribeJobInput) *DescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeJob", input)
	return &DescribeJobFuture{Future: future}
}

func (a *stub) DescribeReturnShippingLabel(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) (*snowball.DescribeReturnShippingLabelOutput, error) {
	var output snowball.DescribeReturnShippingLabelOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeReturnShippingLabel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReturnShippingLabelAsync(ctx workflow.Context, input *snowball.DescribeReturnShippingLabelInput) *DescribeReturnShippingLabelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-DescribeReturnShippingLabel", input)
	return &DescribeReturnShippingLabelFuture{Future: future}
}

func (a *stub) GetJobManifest(ctx workflow.Context, input *snowball.GetJobManifestInput) (*snowball.GetJobManifestOutput, error) {
	var output snowball.GetJobManifestOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-GetJobManifest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobManifestAsync(ctx workflow.Context, input *snowball.GetJobManifestInput) *GetJobManifestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-GetJobManifest", input)
	return &GetJobManifestFuture{Future: future}
}

func (a *stub) GetJobUnlockCode(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) (*snowball.GetJobUnlockCodeOutput, error) {
	var output snowball.GetJobUnlockCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-GetJobUnlockCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobUnlockCodeAsync(ctx workflow.Context, input *snowball.GetJobUnlockCodeInput) *GetJobUnlockCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-GetJobUnlockCode", input)
	return &GetJobUnlockCodeFuture{Future: future}
}

func (a *stub) GetSnowballUsage(ctx workflow.Context, input *snowball.GetSnowballUsageInput) (*snowball.GetSnowballUsageOutput, error) {
	var output snowball.GetSnowballUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-GetSnowballUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSnowballUsageAsync(ctx workflow.Context, input *snowball.GetSnowballUsageInput) *GetSnowballUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-GetSnowballUsage", input)
	return &GetSnowballUsageFuture{Future: future}
}

func (a *stub) GetSoftwareUpdates(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) (*snowball.GetSoftwareUpdatesOutput, error) {
	var output snowball.GetSoftwareUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-GetSoftwareUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSoftwareUpdatesAsync(ctx workflow.Context, input *snowball.GetSoftwareUpdatesInput) *GetSoftwareUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-GetSoftwareUpdates", input)
	return &GetSoftwareUpdatesFuture{Future: future}
}

func (a *stub) ListClusterJobs(ctx workflow.Context, input *snowball.ListClusterJobsInput) (*snowball.ListClusterJobsOutput, error) {
	var output snowball.ListClusterJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-ListClusterJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClusterJobsAsync(ctx workflow.Context, input *snowball.ListClusterJobsInput) *ListClusterJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-ListClusterJobs", input)
	return &ListClusterJobsFuture{Future: future}
}

func (a *stub) ListClusters(ctx workflow.Context, input *snowball.ListClustersInput) (*snowball.ListClustersOutput, error) {
	var output snowball.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClustersAsync(ctx workflow.Context, input *snowball.ListClustersInput) *ListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-ListClusters", input)
	return &ListClustersFuture{Future: future}
}

func (a *stub) ListCompatibleImages(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) (*snowball.ListCompatibleImagesOutput, error) {
	var output snowball.ListCompatibleImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-ListCompatibleImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCompatibleImagesAsync(ctx workflow.Context, input *snowball.ListCompatibleImagesInput) *ListCompatibleImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-ListCompatibleImages", input)
	return &ListCompatibleImagesFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *snowball.ListJobsInput) (*snowball.ListJobsOutput, error) {
	var output snowball.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *snowball.ListJobsInput) *ListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-ListJobs", input)
	return &ListJobsFuture{Future: future}
}

func (a *stub) UpdateCluster(ctx workflow.Context, input *snowball.UpdateClusterInput) (*snowball.UpdateClusterOutput, error) {
	var output snowball.UpdateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterAsync(ctx workflow.Context, input *snowball.UpdateClusterInput) *UpdateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateCluster", input)
	return &UpdateClusterFuture{Future: future}
}

func (a *stub) UpdateJob(ctx workflow.Context, input *snowball.UpdateJobInput) (*snowball.UpdateJobOutput, error) {
	var output snowball.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobAsync(ctx workflow.Context, input *snowball.UpdateJobInput) *UpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateJob", input)
	return &UpdateJobFuture{Future: future}
}

func (a *stub) UpdateJobShipmentState(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) (*snowball.UpdateJobShipmentStateOutput, error) {
	var output snowball.UpdateJobShipmentStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateJobShipmentState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobShipmentStateAsync(ctx workflow.Context, input *snowball.UpdateJobShipmentStateInput) *UpdateJobShipmentStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-snowball-UpdateJobShipmentState", input)
	return &UpdateJobShipmentStateFuture{Future: future}
}
