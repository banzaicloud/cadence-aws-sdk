// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudwatcheventsstub

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchevents"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ActivateEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ActivateEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	var output cloudwatchevents.ActivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelReplayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelReplayFuture) Get(ctx workflow.Context) (*cloudwatchevents.CancelReplayOutput, error) {
	var output cloudwatchevents.CancelReplayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateArchiveFuture) Get(ctx workflow.Context) (*cloudwatchevents.CreateArchiveOutput, error) {
	var output cloudwatchevents.CreateArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventBusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.CreateEventBusOutput, error) {
	var output cloudwatchevents.CreateEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePartnerEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	var output cloudwatchevents.CreatePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeactivateEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeactivateEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	var output cloudwatchevents.DeactivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteArchiveFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeleteArchiveOutput, error) {
	var output cloudwatchevents.DeleteArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventBusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeleteEventBusOutput, error) {
	var output cloudwatchevents.DeleteEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePartnerEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DeletePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeleteRuleOutput, error) {
	var output cloudwatchevents.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeArchiveFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeArchiveOutput, error) {
	var output cloudwatchevents.DescribeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventBusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeEventBusOutput, error) {
	var output cloudwatchevents.DescribeEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	var output cloudwatchevents.DescribeEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePartnerEventSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DescribePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReplayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReplayFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeReplayOutput, error) {
	var output cloudwatchevents.DescribeReplayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeRuleOutput, error) {
	var output cloudwatchevents.DescribeRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DisableRuleOutput, error) {
	var output cloudwatchevents.DisableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.EnableRuleOutput, error) {
	var output cloudwatchevents.EnableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListArchivesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListArchivesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListArchivesOutput, error) {
	var output cloudwatchevents.ListArchivesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventBusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventBusesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListEventBusesOutput, error) {
	var output cloudwatchevents.ListEventBusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventSourcesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListEventSourcesOutput, error) {
	var output cloudwatchevents.ListEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPartnerEventSourceAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPartnerEventSourceAccountsFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourceAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPartnerEventSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPartnerEventSourcesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReplaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReplaysFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListReplaysOutput, error) {
	var output cloudwatchevents.ListReplaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRuleNamesByTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRuleNamesByTargetFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	var output cloudwatchevents.ListRuleNamesByTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRulesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListRulesOutput, error) {
	var output cloudwatchevents.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	var output cloudwatchevents.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTargetsByRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTargetsByRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	var output cloudwatchevents.ListTargetsByRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutEventsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutEventsOutput, error) {
	var output cloudwatchevents.PutEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPartnerEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPartnerEventsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	var output cloudwatchevents.PutPartnerEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPermissionFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutPermissionOutput, error) {
	var output cloudwatchevents.PutPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutRuleOutput, error) {
	var output cloudwatchevents.PutRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutTargetsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutTargetsOutput, error) {
	var output cloudwatchevents.PutTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemovePermissionFuture) Get(ctx workflow.Context) (*cloudwatchevents.RemovePermissionOutput, error) {
	var output cloudwatchevents.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTargetsFuture) Get(ctx workflow.Context) (*cloudwatchevents.RemoveTargetsOutput, error) {
	var output cloudwatchevents.RemoveTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartReplayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartReplayFuture) Get(ctx workflow.Context) (*cloudwatchevents.StartReplayOutput, error) {
	var output cloudwatchevents.StartReplayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.TagResourceOutput, error) {
	var output cloudwatchevents.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestEventPatternFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestEventPatternFuture) Get(ctx workflow.Context) (*cloudwatchevents.TestEventPatternOutput, error) {
	var output cloudwatchevents.TestEventPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.UntagResourceOutput, error) {
	var output cloudwatchevents.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateArchiveFuture) Get(ctx workflow.Context) (*cloudwatchevents.UpdateArchiveOutput, error) {
	var output cloudwatchevents.UpdateArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateEventSource(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	var output cloudwatchevents.ActivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ActivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) *ActivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ActivateEventSource", input)
	return &ActivateEventSourceFuture{Future: future}
}

func (a *stub) CancelReplay(ctx workflow.Context, input *cloudwatchevents.CancelReplayInput) (*cloudwatchevents.CancelReplayOutput, error) {
	var output cloudwatchevents.CancelReplayOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CancelReplay", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelReplayAsync(ctx workflow.Context, input *cloudwatchevents.CancelReplayInput) *CancelReplayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CancelReplay", input)
	return &CancelReplayFuture{Future: future}
}

func (a *stub) CreateArchive(ctx workflow.Context, input *cloudwatchevents.CreateArchiveInput) (*cloudwatchevents.CreateArchiveOutput, error) {
	var output cloudwatchevents.CreateArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreateArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateArchiveAsync(ctx workflow.Context, input *cloudwatchevents.CreateArchiveInput) *CreateArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreateArchive", input)
	return &CreateArchiveFuture{Future: future}
}

func (a *stub) CreateEventBus(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error) {
	var output cloudwatchevents.CreateEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreateEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventBusAsync(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) *CreateEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreateEventBus", input)
	return &CreateEventBusFuture{Future: future}
}

func (a *stub) CreatePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	var output cloudwatchevents.CreatePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreatePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) *CreatePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-CreatePartnerEventSource", input)
	return &CreatePartnerEventSourceFuture{Future: future}
}

func (a *stub) DeactivateEventSource(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	var output cloudwatchevents.DeactivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeactivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeactivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) *DeactivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeactivateEventSource", input)
	return &DeactivateEventSourceFuture{Future: future}
}

func (a *stub) DeleteArchive(ctx workflow.Context, input *cloudwatchevents.DeleteArchiveInput) (*cloudwatchevents.DeleteArchiveOutput, error) {
	var output cloudwatchevents.DeleteArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteArchiveAsync(ctx workflow.Context, input *cloudwatchevents.DeleteArchiveInput) *DeleteArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteArchive", input)
	return &DeleteArchiveFuture{Future: future}
}

func (a *stub) DeleteEventBus(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error) {
	var output cloudwatchevents.DeleteEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) *DeleteEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteEventBus", input)
	return &DeleteEventBusFuture{Future: future}
}

func (a *stub) DeletePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DeletePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeletePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) *DeletePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeletePartnerEventSource", input)
	return &DeletePartnerEventSourceFuture{Future: future}
}

func (a *stub) DeleteRule(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	var output cloudwatchevents.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleAsync(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) *DeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DeleteRule", input)
	return &DeleteRuleFuture{Future: future}
}

func (a *stub) DescribeArchive(ctx workflow.Context, input *cloudwatchevents.DescribeArchiveInput) (*cloudwatchevents.DescribeArchiveOutput, error) {
	var output cloudwatchevents.DescribeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeArchiveAsync(ctx workflow.Context, input *cloudwatchevents.DescribeArchiveInput) *DescribeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeArchive", input)
	return &DescribeArchiveFuture{Future: future}
}

func (a *stub) DescribeEventBus(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	var output cloudwatchevents.DescribeEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) *DescribeEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeEventBus", input)
	return &DescribeEventBusFuture{Future: future}
}

func (a *stub) DescribeEventSource(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	var output cloudwatchevents.DescribeEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) *DescribeEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeEventSource", input)
	return &DescribeEventSourceFuture{Future: future}
}

func (a *stub) DescribePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DescribePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) *DescribePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribePartnerEventSource", input)
	return &DescribePartnerEventSourceFuture{Future: future}
}

func (a *stub) DescribeReplay(ctx workflow.Context, input *cloudwatchevents.DescribeReplayInput) (*cloudwatchevents.DescribeReplayOutput, error) {
	var output cloudwatchevents.DescribeReplayOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeReplay", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReplayAsync(ctx workflow.Context, input *cloudwatchevents.DescribeReplayInput) *DescribeReplayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeReplay", input)
	return &DescribeReplayFuture{Future: future}
}

func (a *stub) DescribeRule(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	var output cloudwatchevents.DescribeRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRuleAsync(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) *DescribeRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DescribeRule", input)
	return &DescribeRuleFuture{Future: future}
}

func (a *stub) DisableRule(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	var output cloudwatchevents.DisableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DisableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableRuleAsync(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) *DisableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-DisableRule", input)
	return &DisableRuleFuture{Future: future}
}

func (a *stub) EnableRule(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	var output cloudwatchevents.EnableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-EnableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableRuleAsync(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) *EnableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-EnableRule", input)
	return &EnableRuleFuture{Future: future}
}

func (a *stub) ListArchives(ctx workflow.Context, input *cloudwatchevents.ListArchivesInput) (*cloudwatchevents.ListArchivesOutput, error) {
	var output cloudwatchevents.ListArchivesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListArchives", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListArchivesAsync(ctx workflow.Context, input *cloudwatchevents.ListArchivesInput) *ListArchivesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListArchives", input)
	return &ListArchivesFuture{Future: future}
}

func (a *stub) ListEventBuses(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error) {
	var output cloudwatchevents.ListEventBusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListEventBuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventBusesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) *ListEventBusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListEventBuses", input)
	return &ListEventBusesFuture{Future: future}
}

func (a *stub) ListEventSources(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error) {
	var output cloudwatchevents.ListEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) *ListEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListEventSources", input)
	return &ListEventSourcesFuture{Future: future}
}

func (a *stub) ListPartnerEventSourceAccounts(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourceAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListPartnerEventSourceAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) *ListPartnerEventSourceAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListPartnerEventSourceAccounts", input)
	return &ListPartnerEventSourceAccountsFuture{Future: future}
}

func (a *stub) ListPartnerEventSources(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListPartnerEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPartnerEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) *ListPartnerEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListPartnerEventSources", input)
	return &ListPartnerEventSourcesFuture{Future: future}
}

func (a *stub) ListReplays(ctx workflow.Context, input *cloudwatchevents.ListReplaysInput) (*cloudwatchevents.ListReplaysOutput, error) {
	var output cloudwatchevents.ListReplaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListReplays", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReplaysAsync(ctx workflow.Context, input *cloudwatchevents.ListReplaysInput) *ListReplaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListReplays", input)
	return &ListReplaysFuture{Future: future}
}

func (a *stub) ListRuleNamesByTarget(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	var output cloudwatchevents.ListRuleNamesByTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListRuleNamesByTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRuleNamesByTargetAsync(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) *ListRuleNamesByTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListRuleNamesByTarget", input)
	return &ListRuleNamesByTargetFuture{Future: future}
}

func (a *stub) ListRules(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	var output cloudwatchevents.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRulesAsync(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) *ListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListRules", input)
	return &ListRulesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	var output cloudwatchevents.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargetsByRule(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	var output cloudwatchevents.ListTargetsByRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListTargetsByRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsByRuleAsync(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) *ListTargetsByRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-ListTargetsByRule", input)
	return &ListTargetsByRuleFuture{Future: future}
}

func (a *stub) PutEvents(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	var output cloudwatchevents.PutEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) *PutEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutEvents", input)
	return &PutEventsFuture{Future: future}
}

func (a *stub) PutPartnerEvents(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	var output cloudwatchevents.PutPartnerEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutPartnerEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPartnerEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) *PutPartnerEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutPartnerEvents", input)
	return &PutPartnerEventsFuture{Future: future}
}

func (a *stub) PutPermission(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	var output cloudwatchevents.PutPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPermissionAsync(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) *PutPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutPermission", input)
	return &PutPermissionFuture{Future: future}
}

func (a *stub) PutRule(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	var output cloudwatchevents.PutRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRuleAsync(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) *PutRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutRule", input)
	return &PutRuleFuture{Future: future}
}

func (a *stub) PutTargets(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	var output cloudwatchevents.PutTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutTargetsAsync(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) *PutTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-PutTargets", input)
	return &PutTargetsFuture{Future: future}
}

func (a *stub) RemovePermission(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	var output cloudwatchevents.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemovePermissionAsync(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) *RemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-RemovePermission", input)
	return &RemovePermissionFuture{Future: future}
}

func (a *stub) RemoveTargets(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	var output cloudwatchevents.RemoveTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-RemoveTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTargetsAsync(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) *RemoveTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-RemoveTargets", input)
	return &RemoveTargetsFuture{Future: future}
}

func (a *stub) StartReplay(ctx workflow.Context, input *cloudwatchevents.StartReplayInput) (*cloudwatchevents.StartReplayOutput, error) {
	var output cloudwatchevents.StartReplayOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-StartReplay", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartReplayAsync(ctx workflow.Context, input *cloudwatchevents.StartReplayInput) *StartReplayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-StartReplay", input)
	return &StartReplayFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error) {
	var output cloudwatchevents.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TestEventPattern(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	var output cloudwatchevents.TestEventPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-TestEventPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestEventPatternAsync(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) *TestEventPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-TestEventPattern", input)
	return &TestEventPatternFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error) {
	var output cloudwatchevents.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateArchive(ctx workflow.Context, input *cloudwatchevents.UpdateArchiveInput) (*cloudwatchevents.UpdateArchiveOutput, error) {
	var output cloudwatchevents.UpdateArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-UpdateArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateArchiveAsync(ctx workflow.Context, input *cloudwatchevents.UpdateArchiveInput) *UpdateArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchevents-UpdateArchive", input)
	return &UpdateArchiveFuture{Future: future}
}
