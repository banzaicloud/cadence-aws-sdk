// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudwatcheventsstub

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchevents"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	ActivateEventSource(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error)
	ActivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) *ActivateEventSourceFuture

	CancelReplay(ctx workflow.Context, input *cloudwatchevents.CancelReplayInput) (*cloudwatchevents.CancelReplayOutput, error)
	CancelReplayAsync(ctx workflow.Context, input *cloudwatchevents.CancelReplayInput) *CancelReplayFuture

	CreateArchive(ctx workflow.Context, input *cloudwatchevents.CreateArchiveInput) (*cloudwatchevents.CreateArchiveOutput, error)
	CreateArchiveAsync(ctx workflow.Context, input *cloudwatchevents.CreateArchiveInput) *CreateArchiveFuture

	CreateEventBus(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error)
	CreateEventBusAsync(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) *CreateEventBusFuture

	CreatePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error)
	CreatePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) *CreatePartnerEventSourceFuture

	DeactivateEventSource(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error)
	DeactivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) *DeactivateEventSourceFuture

	DeleteArchive(ctx workflow.Context, input *cloudwatchevents.DeleteArchiveInput) (*cloudwatchevents.DeleteArchiveOutput, error)
	DeleteArchiveAsync(ctx workflow.Context, input *cloudwatchevents.DeleteArchiveInput) *DeleteArchiveFuture

	DeleteEventBus(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error)
	DeleteEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) *DeleteEventBusFuture

	DeletePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error)
	DeletePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) *DeletePartnerEventSourceFuture

	DeleteRule(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) *DeleteRuleFuture

	DescribeArchive(ctx workflow.Context, input *cloudwatchevents.DescribeArchiveInput) (*cloudwatchevents.DescribeArchiveOutput, error)
	DescribeArchiveAsync(ctx workflow.Context, input *cloudwatchevents.DescribeArchiveInput) *DescribeArchiveFuture

	DescribeEventBus(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error)
	DescribeEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) *DescribeEventBusFuture

	DescribeEventSource(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error)
	DescribeEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) *DescribeEventSourceFuture

	DescribePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error)
	DescribePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) *DescribePartnerEventSourceFuture

	DescribeReplay(ctx workflow.Context, input *cloudwatchevents.DescribeReplayInput) (*cloudwatchevents.DescribeReplayOutput, error)
	DescribeReplayAsync(ctx workflow.Context, input *cloudwatchevents.DescribeReplayInput) *DescribeReplayFuture

	DescribeRule(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error)
	DescribeRuleAsync(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) *DescribeRuleFuture

	DisableRule(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error)
	DisableRuleAsync(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) *DisableRuleFuture

	EnableRule(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error)
	EnableRuleAsync(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) *EnableRuleFuture

	ListArchives(ctx workflow.Context, input *cloudwatchevents.ListArchivesInput) (*cloudwatchevents.ListArchivesOutput, error)
	ListArchivesAsync(ctx workflow.Context, input *cloudwatchevents.ListArchivesInput) *ListArchivesFuture

	ListEventBuses(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error)
	ListEventBusesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) *ListEventBusesFuture

	ListEventSources(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error)
	ListEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) *ListEventSourcesFuture

	ListPartnerEventSourceAccounts(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error)
	ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) *ListPartnerEventSourceAccountsFuture

	ListPartnerEventSources(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error)
	ListPartnerEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) *ListPartnerEventSourcesFuture

	ListReplays(ctx workflow.Context, input *cloudwatchevents.ListReplaysInput) (*cloudwatchevents.ListReplaysOutput, error)
	ListReplaysAsync(ctx workflow.Context, input *cloudwatchevents.ListReplaysInput) *ListReplaysFuture

	ListRuleNamesByTarget(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error)
	ListRuleNamesByTargetAsync(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) *ListRuleNamesByTargetFuture

	ListRules(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) *ListRulesFuture

	ListTagsForResource(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) *ListTagsForResourceFuture

	ListTargetsByRule(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error)
	ListTargetsByRuleAsync(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) *ListTargetsByRuleFuture

	PutEvents(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error)
	PutEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) *PutEventsFuture

	PutPartnerEvents(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error)
	PutPartnerEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) *PutPartnerEventsFuture

	PutPermission(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error)
	PutPermissionAsync(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) *PutPermissionFuture

	PutRule(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error)
	PutRuleAsync(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) *PutRuleFuture

	PutTargets(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error)
	PutTargetsAsync(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) *PutTargetsFuture

	RemovePermission(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) *RemovePermissionFuture

	RemoveTargets(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error)
	RemoveTargetsAsync(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) *RemoveTargetsFuture

	StartReplay(ctx workflow.Context, input *cloudwatchevents.StartReplayInput) (*cloudwatchevents.StartReplayOutput, error)
	StartReplayAsync(ctx workflow.Context, input *cloudwatchevents.StartReplayInput) *StartReplayFuture

	TagResource(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) *TagResourceFuture

	TestEventPattern(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error)
	TestEventPatternAsync(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) *TestEventPatternFuture

	UntagResource(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) *UntagResourceFuture

	UpdateArchive(ctx workflow.Context, input *cloudwatchevents.UpdateArchiveInput) (*cloudwatchevents.UpdateArchiveOutput, error)
	UpdateArchiveAsync(ctx workflow.Context, input *cloudwatchevents.UpdateArchiveInput) *UpdateArchiveFuture
}

func NewClient() Client {
	return &stub{}
}
