// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appstreamstub

import (
	"github.com/aws/aws-sdk-go/service/appstream"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateFleetFuture) Get(ctx workflow.Context) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchAssociateUserStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchAssociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisassociateUserStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisassociateUserStackFuture) Get(ctx workflow.Context) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyImageFuture) Get(ctx workflow.Context) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectoryConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFleetFuture) Get(ctx workflow.Context) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageBuilderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageBuilderFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageBuilderStreamingURLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageBuilderStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStackFuture) Get(ctx workflow.Context) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamingURLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamingURLFuture) Get(ctx workflow.Context) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUsageReportSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectoryConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFleetFuture) Get(ctx workflow.Context) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageFuture) Get(ctx workflow.Context) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageBuilderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageBuilderFuture) Get(ctx workflow.Context) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImagePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStackFuture) Get(ctx workflow.Context) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUsageReportSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUsageReportSubscriptionFuture) Get(ctx workflow.Context) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectoryConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectoryConfigsFuture) Get(ctx workflow.Context) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetsFuture) Get(ctx workflow.Context) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageBuildersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageBuildersFuture) Get(ctx workflow.Context) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImagePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImagesFuture) Get(ctx workflow.Context) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSessionsFuture) Get(ctx workflow.Context) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStacksFuture) Get(ctx workflow.Context) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUsageReportSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUsageReportSubscriptionsFuture) Get(ctx workflow.Context) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserStackAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserStackAssociationsFuture) Get(ctx workflow.Context) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUsersFuture) Get(ctx workflow.Context) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableUserFuture) Get(ctx workflow.Context) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateFleetFuture) Get(ctx workflow.Context) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableUserFuture) Get(ctx workflow.Context) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExpireSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExpireSessionFuture) Get(ctx workflow.Context) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedFleetsFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedStacksFuture) Get(ctx workflow.Context) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFleetFuture) Get(ctx workflow.Context) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartImageBuilderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopFleetFuture) Get(ctx workflow.Context) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopImageBuilderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopImageBuilderFuture) Get(ctx workflow.Context) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDirectoryConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDirectoryConfigFuture) Get(ctx workflow.Context) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFleetFuture) Get(ctx workflow.Context) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateImagePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateImagePermissionsFuture) Get(ctx workflow.Context) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStackFuture) Get(ctx workflow.Context) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFleet(ctx workflow.Context, input *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error) {
	var output appstream.AssociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-AssociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFleetAsync(ctx workflow.Context, input *appstream.AssociateFleetInput) *AssociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-AssociateFleet", input)
	return &AssociateFleetFuture{Future: future}
}

func (a *stub) BatchAssociateUserStack(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error) {
	var output appstream.BatchAssociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-BatchAssociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateUserStackAsync(ctx workflow.Context, input *appstream.BatchAssociateUserStackInput) *BatchAssociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-BatchAssociateUserStack", input)
	return &BatchAssociateUserStackFuture{Future: future}
}

func (a *stub) BatchDisassociateUserStack(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error) {
	var output appstream.BatchDisassociateUserStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-BatchDisassociateUserStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateUserStackAsync(ctx workflow.Context, input *appstream.BatchDisassociateUserStackInput) *BatchDisassociateUserStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-BatchDisassociateUserStack", input)
	return &BatchDisassociateUserStackFuture{Future: future}
}

func (a *stub) CopyImage(ctx workflow.Context, input *appstream.CopyImageInput) (*appstream.CopyImageOutput, error) {
	var output appstream.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyImageAsync(ctx workflow.Context, input *appstream.CopyImageInput) *CopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CopyImage", input)
	return &CopyImageFuture{Future: future}
}

func (a *stub) CreateDirectoryConfig(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error) {
	var output appstream.CreateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectoryConfigAsync(ctx workflow.Context, input *appstream.CreateDirectoryConfigInput) *CreateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateDirectoryConfig", input)
	return &CreateDirectoryConfigFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error) {
	var output appstream.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *appstream.CreateFleetInput) *CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateFleet", input)
	return &CreateFleetFuture{Future: future}
}

func (a *stub) CreateImageBuilder(ctx workflow.Context, input *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error) {
	var output appstream.CreateImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageBuilderAsync(ctx workflow.Context, input *appstream.CreateImageBuilderInput) *CreateImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateImageBuilder", input)
	return &CreateImageBuilderFuture{Future: future}
}

func (a *stub) CreateImageBuilderStreamingURL(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	var output appstream.CreateImageBuilderStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateImageBuilderStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageBuilderStreamingURLAsync(ctx workflow.Context, input *appstream.CreateImageBuilderStreamingURLInput) *CreateImageBuilderStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateImageBuilderStreamingURL", input)
	return &CreateImageBuilderStreamingURLFuture{Future: future}
}

func (a *stub) CreateStack(ctx workflow.Context, input *appstream.CreateStackInput) (*appstream.CreateStackOutput, error) {
	var output appstream.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackAsync(ctx workflow.Context, input *appstream.CreateStackInput) *CreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateStack", input)
	return &CreateStackFuture{Future: future}
}

func (a *stub) CreateStreamingURL(ctx workflow.Context, input *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error) {
	var output appstream.CreateStreamingURLOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateStreamingURL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamingURLAsync(ctx workflow.Context, input *appstream.CreateStreamingURLInput) *CreateStreamingURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateStreamingURL", input)
	return &CreateStreamingURLFuture{Future: future}
}

func (a *stub) CreateUsageReportSubscription(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	var output appstream.CreateUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.CreateUsageReportSubscriptionInput) *CreateUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateUsageReportSubscription", input)
	return &CreateUsageReportSubscriptionFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *appstream.CreateUserInput) (*appstream.CreateUserOutput, error) {
	var output appstream.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *appstream.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeleteDirectoryConfig(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error) {
	var output appstream.DeleteDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectoryConfigAsync(ctx workflow.Context, input *appstream.DeleteDirectoryConfigInput) *DeleteDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteDirectoryConfig", input)
	return &DeleteDirectoryConfigFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error) {
	var output appstream.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *appstream.DeleteFleetInput) *DeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteFleet", input)
	return &DeleteFleetFuture{Future: future}
}

func (a *stub) DeleteImage(ctx workflow.Context, input *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error) {
	var output appstream.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageAsync(ctx workflow.Context, input *appstream.DeleteImageInput) *DeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImage", input)
	return &DeleteImageFuture{Future: future}
}

func (a *stub) DeleteImageBuilder(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error) {
	var output appstream.DeleteImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageBuilderAsync(ctx workflow.Context, input *appstream.DeleteImageBuilderInput) *DeleteImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImageBuilder", input)
	return &DeleteImageBuilderFuture{Future: future}
}

func (a *stub) DeleteImagePermissions(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error) {
	var output appstream.DeleteImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImagePermissionsAsync(ctx workflow.Context, input *appstream.DeleteImagePermissionsInput) *DeleteImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteImagePermissions", input)
	return &DeleteImagePermissionsFuture{Future: future}
}

func (a *stub) DeleteStack(ctx workflow.Context, input *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error) {
	var output appstream.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackAsync(ctx workflow.Context, input *appstream.DeleteStackInput) *DeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteStack", input)
	return &DeleteStackFuture{Future: future}
}

func (a *stub) DeleteUsageReportSubscription(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	var output appstream.DeleteUsageReportSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteUsageReportSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsageReportSubscriptionAsync(ctx workflow.Context, input *appstream.DeleteUsageReportSubscriptionInput) *DeleteUsageReportSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteUsageReportSubscription", input)
	return &DeleteUsageReportSubscriptionFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error) {
	var output appstream.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *appstream.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DescribeDirectoryConfigs(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error) {
	var output appstream.DescribeDirectoryConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeDirectoryConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectoryConfigsAsync(ctx workflow.Context, input *appstream.DescribeDirectoryConfigsInput) *DescribeDirectoryConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeDirectoryConfigs", input)
	return &DescribeDirectoryConfigsFuture{Future: future}
}

func (a *stub) DescribeFleets(ctx workflow.Context, input *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error) {
	var output appstream.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetsAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *DescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeFleets", input)
	return &DescribeFleetsFuture{Future: future}
}

func (a *stub) DescribeImageBuilders(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error) {
	var output appstream.DescribeImageBuildersOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImageBuilders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageBuildersAsync(ctx workflow.Context, input *appstream.DescribeImageBuildersInput) *DescribeImageBuildersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImageBuilders", input)
	return &DescribeImageBuildersFuture{Future: future}
}

func (a *stub) DescribeImagePermissions(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error) {
	var output appstream.DescribeImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImagePermissionsAsync(ctx workflow.Context, input *appstream.DescribeImagePermissionsInput) *DescribeImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImagePermissions", input)
	return &DescribeImagePermissionsFuture{Future: future}
}

func (a *stub) DescribeImages(ctx workflow.Context, input *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error) {
	var output appstream.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImagesAsync(ctx workflow.Context, input *appstream.DescribeImagesInput) *DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeImages", input)
	return &DescribeImagesFuture{Future: future}
}

func (a *stub) DescribeSessions(ctx workflow.Context, input *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error) {
	var output appstream.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSessionsAsync(ctx workflow.Context, input *appstream.DescribeSessionsInput) *DescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeSessions", input)
	return &DescribeSessionsFuture{Future: future}
}

func (a *stub) DescribeStacks(ctx workflow.Context, input *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error) {
	var output appstream.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStacksAsync(ctx workflow.Context, input *appstream.DescribeStacksInput) *DescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeStacks", input)
	return &DescribeStacksFuture{Future: future}
}

func (a *stub) DescribeUsageReportSubscriptions(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	var output appstream.DescribeUsageReportSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUsageReportSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsageReportSubscriptionsAsync(ctx workflow.Context, input *appstream.DescribeUsageReportSubscriptionsInput) *DescribeUsageReportSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUsageReportSubscriptions", input)
	return &DescribeUsageReportSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeUserStackAssociations(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error) {
	var output appstream.DescribeUserStackAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUserStackAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserStackAssociationsAsync(ctx workflow.Context, input *appstream.DescribeUserStackAssociationsInput) *DescribeUserStackAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUserStackAssociations", input)
	return &DescribeUserStackAssociationsFuture{Future: future}
}

func (a *stub) DescribeUsers(ctx workflow.Context, input *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error) {
	var output appstream.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsersAsync(ctx workflow.Context, input *appstream.DescribeUsersInput) *DescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DescribeUsers", input)
	return &DescribeUsersFuture{Future: future}
}

func (a *stub) DisableUser(ctx workflow.Context, input *appstream.DisableUserInput) (*appstream.DisableUserOutput, error) {
	var output appstream.DisableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DisableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableUserAsync(ctx workflow.Context, input *appstream.DisableUserInput) *DisableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DisableUser", input)
	return &DisableUserFuture{Future: future}
}

func (a *stub) DisassociateFleet(ctx workflow.Context, input *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error) {
	var output appstream.DisassociateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-DisassociateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateFleetAsync(ctx workflow.Context, input *appstream.DisassociateFleetInput) *DisassociateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-DisassociateFleet", input)
	return &DisassociateFleetFuture{Future: future}
}

func (a *stub) EnableUser(ctx workflow.Context, input *appstream.EnableUserInput) (*appstream.EnableUserOutput, error) {
	var output appstream.EnableUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-EnableUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableUserAsync(ctx workflow.Context, input *appstream.EnableUserInput) *EnableUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-EnableUser", input)
	return &EnableUserFuture{Future: future}
}

func (a *stub) ExpireSession(ctx workflow.Context, input *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error) {
	var output appstream.ExpireSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-ExpireSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExpireSessionAsync(ctx workflow.Context, input *appstream.ExpireSessionInput) *ExpireSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-ExpireSession", input)
	return &ExpireSessionFuture{Future: future}
}

func (a *stub) ListAssociatedFleets(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error) {
	var output appstream.ListAssociatedFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-ListAssociatedFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedFleetsAsync(ctx workflow.Context, input *appstream.ListAssociatedFleetsInput) *ListAssociatedFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-ListAssociatedFleets", input)
	return &ListAssociatedFleetsFuture{Future: future}
}

func (a *stub) ListAssociatedStacks(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error) {
	var output appstream.ListAssociatedStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-ListAssociatedStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedStacksAsync(ctx workflow.Context, input *appstream.ListAssociatedStacksInput) *ListAssociatedStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-ListAssociatedStacks", input)
	return &ListAssociatedStacksFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error) {
	var output appstream.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appstream.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) StartFleet(ctx workflow.Context, input *appstream.StartFleetInput) (*appstream.StartFleetOutput, error) {
	var output appstream.StartFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-StartFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFleetAsync(ctx workflow.Context, input *appstream.StartFleetInput) *StartFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-StartFleet", input)
	return &StartFleetFuture{Future: future}
}

func (a *stub) StartImageBuilder(ctx workflow.Context, input *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error) {
	var output appstream.StartImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-StartImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImageBuilderAsync(ctx workflow.Context, input *appstream.StartImageBuilderInput) *StartImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-StartImageBuilder", input)
	return &StartImageBuilderFuture{Future: future}
}

func (a *stub) StopFleet(ctx workflow.Context, input *appstream.StopFleetInput) (*appstream.StopFleetOutput, error) {
	var output appstream.StopFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-StopFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFleetAsync(ctx workflow.Context, input *appstream.StopFleetInput) *StopFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-StopFleet", input)
	return &StopFleetFuture{Future: future}
}

func (a *stub) StopImageBuilder(ctx workflow.Context, input *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error) {
	var output appstream.StopImageBuilderOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-StopImageBuilder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopImageBuilderAsync(ctx workflow.Context, input *appstream.StopImageBuilderInput) *StopImageBuilderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-StopImageBuilder", input)
	return &StopImageBuilderFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appstream.TagResourceInput) (*appstream.TagResourceOutput, error) {
	var output appstream.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appstream.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error) {
	var output appstream.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appstream.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDirectoryConfig(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error) {
	var output appstream.UpdateDirectoryConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateDirectoryConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDirectoryConfigAsync(ctx workflow.Context, input *appstream.UpdateDirectoryConfigInput) *UpdateDirectoryConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateDirectoryConfig", input)
	return &UpdateDirectoryConfigFuture{Future: future}
}

func (a *stub) UpdateFleet(ctx workflow.Context, input *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error) {
	var output appstream.UpdateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetAsync(ctx workflow.Context, input *appstream.UpdateFleetInput) *UpdateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateFleet", input)
	return &UpdateFleetFuture{Future: future}
}

func (a *stub) UpdateImagePermissions(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error) {
	var output appstream.UpdateImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateImagePermissionsAsync(ctx workflow.Context, input *appstream.UpdateImagePermissionsInput) *UpdateImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateImagePermissions", input)
	return &UpdateImagePermissionsFuture{Future: future}
}

func (a *stub) UpdateStack(ctx workflow.Context, input *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error) {
	var output appstream.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackAsync(ctx workflow.Context, input *appstream.UpdateStackInput) *UpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-UpdateStack", input)
	return &UpdateStackFuture{Future: future}
}

func (a *stub) WaitUntilFleetStarted(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-appstream-WaitUntilFleetStarted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilFleetStartedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-WaitUntilFleetStarted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilFleetStopped(ctx workflow.Context, input *appstream.DescribeFleetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-appstream-WaitUntilFleetStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilFleetStoppedAsync(ctx workflow.Context, input *appstream.DescribeFleetsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appstream-WaitUntilFleetStopped", input)
	return clients.NewVoidFuture(future)
}
