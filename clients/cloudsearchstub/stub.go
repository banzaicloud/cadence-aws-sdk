// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudsearchstub

import (
	"github.com/aws/aws-sdk-go/service/cloudsearch"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BuildSuggestersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BuildSuggestersFuture) Get(ctx workflow.Context) (*cloudsearch.BuildSuggestersOutput, error) {
	var output cloudsearch.BuildSuggestersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*cloudsearch.CreateDomainOutput, error) {
	var output cloudsearch.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DefineAnalysisSchemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DefineAnalysisSchemeFuture) Get(ctx workflow.Context) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	var output cloudsearch.DefineAnalysisSchemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DefineExpressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DefineExpressionFuture) Get(ctx workflow.Context) (*cloudsearch.DefineExpressionOutput, error) {
	var output cloudsearch.DefineExpressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DefineIndexFieldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DefineIndexFieldFuture) Get(ctx workflow.Context) (*cloudsearch.DefineIndexFieldOutput, error) {
	var output cloudsearch.DefineIndexFieldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DefineSuggesterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DefineSuggesterFuture) Get(ctx workflow.Context) (*cloudsearch.DefineSuggesterOutput, error) {
	var output cloudsearch.DefineSuggesterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAnalysisSchemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAnalysisSchemeFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	var output cloudsearch.DeleteAnalysisSchemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteDomainOutput, error) {
	var output cloudsearch.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteExpressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteExpressionFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteExpressionOutput, error) {
	var output cloudsearch.DeleteExpressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIndexFieldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIndexFieldFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteIndexFieldOutput, error) {
	var output cloudsearch.DeleteIndexFieldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSuggesterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSuggesterFuture) Get(ctx workflow.Context) (*cloudsearch.DeleteSuggesterOutput, error) {
	var output cloudsearch.DeleteSuggesterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAnalysisSchemesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAnalysisSchemesFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	var output cloudsearch.DescribeAnalysisSchemesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAvailabilityOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAvailabilityOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	var output cloudsearch.DescribeAvailabilityOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainEndpointOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainEndpointOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {
	var output cloudsearch.DescribeDomainEndpointOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeDomainsOutput, error) {
	var output cloudsearch.DescribeDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExpressionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExpressionsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeExpressionsOutput, error) {
	var output cloudsearch.DescribeExpressionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIndexFieldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIndexFieldsFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	var output cloudsearch.DescribeIndexFieldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingParametersFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeScalingParametersOutput, error) {
	var output cloudsearch.DescribeScalingParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServiceAccessPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServiceAccessPoliciesFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	var output cloudsearch.DescribeServiceAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSuggestersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSuggestersFuture) Get(ctx workflow.Context) (*cloudsearch.DescribeSuggestersOutput, error) {
	var output cloudsearch.DescribeSuggestersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IndexDocumentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IndexDocumentsFuture) Get(ctx workflow.Context) (*cloudsearch.IndexDocumentsOutput, error) {
	var output cloudsearch.IndexDocumentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainNamesFuture) Get(ctx workflow.Context) (*cloudsearch.ListDomainNamesOutput, error) {
	var output cloudsearch.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAvailabilityOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAvailabilityOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	var output cloudsearch.UpdateAvailabilityOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainEndpointOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainEndpointOptionsFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {
	var output cloudsearch.UpdateDomainEndpointOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateScalingParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateScalingParametersFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateScalingParametersOutput, error) {
	var output cloudsearch.UpdateScalingParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceAccessPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceAccessPoliciesFuture) Get(ctx workflow.Context) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	var output cloudsearch.UpdateServiceAccessPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BuildSuggesters(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) (*cloudsearch.BuildSuggestersOutput, error) {
	var output cloudsearch.BuildSuggestersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-BuildSuggesters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BuildSuggestersAsync(ctx workflow.Context, input *cloudsearch.BuildSuggestersInput) *BuildSuggestersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-BuildSuggesters", input)
	return &BuildSuggestersFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *cloudsearch.CreateDomainInput) (*cloudsearch.CreateDomainOutput, error) {
	var output cloudsearch.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *cloudsearch.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) DefineAnalysisScheme(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	var output cloudsearch.DefineAnalysisSchemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineAnalysisScheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DefineAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DefineAnalysisSchemeInput) *DefineAnalysisSchemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineAnalysisScheme", input)
	return &DefineAnalysisSchemeFuture{Future: future}
}

func (a *stub) DefineExpression(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) (*cloudsearch.DefineExpressionOutput, error) {
	var output cloudsearch.DefineExpressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineExpression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DefineExpressionAsync(ctx workflow.Context, input *cloudsearch.DefineExpressionInput) *DefineExpressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineExpression", input)
	return &DefineExpressionFuture{Future: future}
}

func (a *stub) DefineIndexField(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) (*cloudsearch.DefineIndexFieldOutput, error) {
	var output cloudsearch.DefineIndexFieldOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineIndexField", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DefineIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DefineIndexFieldInput) *DefineIndexFieldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineIndexField", input)
	return &DefineIndexFieldFuture{Future: future}
}

func (a *stub) DefineSuggester(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) (*cloudsearch.DefineSuggesterOutput, error) {
	var output cloudsearch.DefineSuggesterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineSuggester", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DefineSuggesterAsync(ctx workflow.Context, input *cloudsearch.DefineSuggesterInput) *DefineSuggesterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DefineSuggester", input)
	return &DefineSuggesterFuture{Future: future}
}

func (a *stub) DeleteAnalysisScheme(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	var output cloudsearch.DeleteAnalysisSchemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteAnalysisScheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnalysisSchemeAsync(ctx workflow.Context, input *cloudsearch.DeleteAnalysisSchemeInput) *DeleteAnalysisSchemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteAnalysisScheme", input)
	return &DeleteAnalysisSchemeFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) (*cloudsearch.DeleteDomainOutput, error) {
	var output cloudsearch.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *cloudsearch.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DeleteExpression(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) (*cloudsearch.DeleteExpressionOutput, error) {
	var output cloudsearch.DeleteExpressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteExpression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteExpressionAsync(ctx workflow.Context, input *cloudsearch.DeleteExpressionInput) *DeleteExpressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteExpression", input)
	return &DeleteExpressionFuture{Future: future}
}

func (a *stub) DeleteIndexField(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) (*cloudsearch.DeleteIndexFieldOutput, error) {
	var output cloudsearch.DeleteIndexFieldOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteIndexField", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIndexFieldAsync(ctx workflow.Context, input *cloudsearch.DeleteIndexFieldInput) *DeleteIndexFieldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteIndexField", input)
	return &DeleteIndexFieldFuture{Future: future}
}

func (a *stub) DeleteSuggester(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) (*cloudsearch.DeleteSuggesterOutput, error) {
	var output cloudsearch.DeleteSuggesterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteSuggester", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSuggesterAsync(ctx workflow.Context, input *cloudsearch.DeleteSuggesterInput) *DeleteSuggesterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DeleteSuggester", input)
	return &DeleteSuggesterFuture{Future: future}
}

func (a *stub) DescribeAnalysisSchemes(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	var output cloudsearch.DescribeAnalysisSchemesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeAnalysisSchemes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAnalysisSchemesAsync(ctx workflow.Context, input *cloudsearch.DescribeAnalysisSchemesInput) *DescribeAnalysisSchemesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeAnalysisSchemes", input)
	return &DescribeAnalysisSchemesFuture{Future: future}
}

func (a *stub) DescribeAvailabilityOptions(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	var output cloudsearch.DescribeAvailabilityOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeAvailabilityOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeAvailabilityOptionsInput) *DescribeAvailabilityOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeAvailabilityOptions", input)
	return &DescribeAvailabilityOptionsFuture{Future: future}
}

func (a *stub) DescribeDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {
	var output cloudsearch.DescribeDomainEndpointOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeDomainEndpointOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainEndpointOptionsInput) *DescribeDomainEndpointOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeDomainEndpointOptions", input)
	return &DescribeDomainEndpointOptionsFuture{Future: future}
}

func (a *stub) DescribeDomains(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) (*cloudsearch.DescribeDomainsOutput, error) {
	var output cloudsearch.DescribeDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainsAsync(ctx workflow.Context, input *cloudsearch.DescribeDomainsInput) *DescribeDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeDomains", input)
	return &DescribeDomainsFuture{Future: future}
}

func (a *stub) DescribeExpressions(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) (*cloudsearch.DescribeExpressionsOutput, error) {
	var output cloudsearch.DescribeExpressionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeExpressions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExpressionsAsync(ctx workflow.Context, input *cloudsearch.DescribeExpressionsInput) *DescribeExpressionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeExpressions", input)
	return &DescribeExpressionsFuture{Future: future}
}

func (a *stub) DescribeIndexFields(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	var output cloudsearch.DescribeIndexFieldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeIndexFields", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIndexFieldsAsync(ctx workflow.Context, input *cloudsearch.DescribeIndexFieldsInput) *DescribeIndexFieldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeIndexFields", input)
	return &DescribeIndexFieldsFuture{Future: future}
}

func (a *stub) DescribeScalingParameters(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) (*cloudsearch.DescribeScalingParametersOutput, error) {
	var output cloudsearch.DescribeScalingParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeScalingParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingParametersAsync(ctx workflow.Context, input *cloudsearch.DescribeScalingParametersInput) *DescribeScalingParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeScalingParameters", input)
	return &DescribeScalingParametersFuture{Future: future}
}

func (a *stub) DescribeServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	var output cloudsearch.DescribeServiceAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeServiceAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.DescribeServiceAccessPoliciesInput) *DescribeServiceAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeServiceAccessPolicies", input)
	return &DescribeServiceAccessPoliciesFuture{Future: future}
}

func (a *stub) DescribeSuggesters(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) (*cloudsearch.DescribeSuggestersOutput, error) {
	var output cloudsearch.DescribeSuggestersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeSuggesters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSuggestersAsync(ctx workflow.Context, input *cloudsearch.DescribeSuggestersInput) *DescribeSuggestersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-DescribeSuggesters", input)
	return &DescribeSuggestersFuture{Future: future}
}

func (a *stub) IndexDocuments(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) (*cloudsearch.IndexDocumentsOutput, error) {
	var output cloudsearch.IndexDocumentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-IndexDocuments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IndexDocumentsAsync(ctx workflow.Context, input *cloudsearch.IndexDocumentsInput) *IndexDocumentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-IndexDocuments", input)
	return &IndexDocumentsFuture{Future: future}
}

func (a *stub) ListDomainNames(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) (*cloudsearch.ListDomainNamesOutput, error) {
	var output cloudsearch.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainNamesAsync(ctx workflow.Context, input *cloudsearch.ListDomainNamesInput) *ListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-ListDomainNames", input)
	return &ListDomainNamesFuture{Future: future}
}

func (a *stub) UpdateAvailabilityOptions(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	var output cloudsearch.UpdateAvailabilityOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateAvailabilityOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAvailabilityOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateAvailabilityOptionsInput) *UpdateAvailabilityOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateAvailabilityOptions", input)
	return &UpdateAvailabilityOptionsFuture{Future: future}
}

func (a *stub) UpdateDomainEndpointOptions(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {
	var output cloudsearch.UpdateDomainEndpointOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateDomainEndpointOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainEndpointOptionsAsync(ctx workflow.Context, input *cloudsearch.UpdateDomainEndpointOptionsInput) *UpdateDomainEndpointOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateDomainEndpointOptions", input)
	return &UpdateDomainEndpointOptionsFuture{Future: future}
}

func (a *stub) UpdateScalingParameters(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) (*cloudsearch.UpdateScalingParametersOutput, error) {
	var output cloudsearch.UpdateScalingParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateScalingParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateScalingParametersAsync(ctx workflow.Context, input *cloudsearch.UpdateScalingParametersInput) *UpdateScalingParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateScalingParameters", input)
	return &UpdateScalingParametersFuture{Future: future}
}

func (a *stub) UpdateServiceAccessPolicies(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	var output cloudsearch.UpdateServiceAccessPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateServiceAccessPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceAccessPoliciesAsync(ctx workflow.Context, input *cloudsearch.UpdateServiceAccessPoliciesInput) *UpdateServiceAccessPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudsearch-UpdateServiceAccessPolicies", input)
	return &UpdateServiceAccessPoliciesFuture{Future: future}
}
