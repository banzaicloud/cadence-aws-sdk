// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ecsstub

import (
	"github.com/aws/aws-sdk-go/service/ecs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateCapacityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterFuture) Get(ctx workflow.Context) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceFuture) Get(ctx workflow.Context) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTaskSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTaskSetFuture) Get(ctx workflow.Context) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountSettingFuture) Get(ctx workflow.Context) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAttributesFuture) Get(ctx workflow.Context) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCapacityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterFuture) Get(ctx workflow.Context) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceFuture) Get(ctx workflow.Context) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTaskSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTaskSetFuture) Get(ctx workflow.Context) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterContainerInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCapacityProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClustersFuture) Get(ctx workflow.Context) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeContainerInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServicesFuture) Get(ctx workflow.Context) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTaskSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTaskSetsFuture) Get(ctx workflow.Context) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTasksFuture) Get(ctx workflow.Context) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DiscoverPollEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DiscoverPollEndpointFuture) Get(ctx workflow.Context) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountSettingsFuture) Get(ctx workflow.Context) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttributesFuture) Get(ctx workflow.Context) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListClustersFuture) Get(ctx workflow.Context) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListContainerInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListContainerInstancesFuture) Get(ctx workflow.Context) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServicesFuture) Get(ctx workflow.Context) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTaskDefinitionFamiliesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTaskDefinitionFamiliesFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTaskDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTaskDefinitionsFuture) Get(ctx workflow.Context) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTasksFuture) Get(ctx workflow.Context) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAccountSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAccountSettingFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAccountSettingDefaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAccountSettingDefaultFuture) Get(ctx workflow.Context) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAttributesFuture) Get(ctx workflow.Context) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutClusterCapacityProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutClusterCapacityProvidersFuture) Get(ctx workflow.Context) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterContainerInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterContainerInstanceFuture) Get(ctx workflow.Context) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTaskDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTaskDefinitionFuture) Get(ctx workflow.Context) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RunTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RunTaskFuture) Get(ctx workflow.Context) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTaskFuture) Get(ctx workflow.Context) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTaskFuture) Get(ctx workflow.Context) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubmitAttachmentStateChangesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubmitAttachmentStateChangesFuture) Get(ctx workflow.Context) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubmitContainerStateChangeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubmitContainerStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubmitTaskStateChangeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubmitTaskStateChangeFuture) Get(ctx workflow.Context) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCapacityProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCapacityProviderFuture) Get(ctx workflow.Context) (*ecs.UpdateCapacityProviderOutput, error) {
	var output ecs.UpdateCapacityProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClusterSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClusterSettingsFuture) Get(ctx workflow.Context) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContainerAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContainerAgentFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContainerInstancesStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContainerInstancesStateFuture) Get(ctx workflow.Context) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceFuture) Get(ctx workflow.Context) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServicePrimaryTaskSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServicePrimaryTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTaskSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTaskSetFuture) Get(ctx workflow.Context) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCapacityProvider(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error) {
	var output ecs.CreateCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-CreateCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCapacityProviderAsync(ctx workflow.Context, input *ecs.CreateCapacityProviderInput) *CreateCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-CreateCapacityProvider", input)
	return &CreateCapacityProviderFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	var output ecs.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *ecs.CreateClusterInput) *CreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-CreateCluster", input)
	return &CreateClusterFuture{Future: future}
}

func (a *stub) CreateService(ctx workflow.Context, input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	var output ecs.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceAsync(ctx workflow.Context, input *ecs.CreateServiceInput) *CreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-CreateService", input)
	return &CreateServiceFuture{Future: future}
}

func (a *stub) CreateTaskSet(ctx workflow.Context, input *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error) {
	var output ecs.CreateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-CreateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTaskSetAsync(ctx workflow.Context, input *ecs.CreateTaskSetInput) *CreateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-CreateTaskSet", input)
	return &CreateTaskSetFuture{Future: future}
}

func (a *stub) DeleteAccountSetting(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error) {
	var output ecs.DeleteAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountSettingAsync(ctx workflow.Context, input *ecs.DeleteAccountSettingInput) *DeleteAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteAccountSetting", input)
	return &DeleteAccountSettingFuture{Future: future}
}

func (a *stub) DeleteAttributes(ctx workflow.Context, input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error) {
	var output ecs.DeleteAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAttributesAsync(ctx workflow.Context, input *ecs.DeleteAttributesInput) *DeleteAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteAttributes", input)
	return &DeleteAttributesFuture{Future: future}
}

func (a *stub) DeleteCapacityProvider(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error) {
	var output ecs.DeleteCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCapacityProviderAsync(ctx workflow.Context, input *ecs.DeleteCapacityProviderInput) *DeleteCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteCapacityProvider", input)
	return &DeleteCapacityProviderFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	var output ecs.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *ecs.DeleteClusterInput) *DeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteCluster", input)
	return &DeleteClusterFuture{Future: future}
}

func (a *stub) DeleteService(ctx workflow.Context, input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	var output ecs.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceAsync(ctx workflow.Context, input *ecs.DeleteServiceInput) *DeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteService", input)
	return &DeleteServiceFuture{Future: future}
}

func (a *stub) DeleteTaskSet(ctx workflow.Context, input *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error) {
	var output ecs.DeleteTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTaskSetAsync(ctx workflow.Context, input *ecs.DeleteTaskSetInput) *DeleteTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeleteTaskSet", input)
	return &DeleteTaskSetFuture{Future: future}
}

func (a *stub) DeregisterContainerInstance(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	var output ecs.DeregisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeregisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterContainerInstanceAsync(ctx workflow.Context, input *ecs.DeregisterContainerInstanceInput) *DeregisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeregisterContainerInstance", input)
	return &DeregisterContainerInstanceFuture{Future: future}
}

func (a *stub) DeregisterTaskDefinition(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	var output ecs.DeregisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DeregisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.DeregisterTaskDefinitionInput) *DeregisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DeregisterTaskDefinition", input)
	return &DeregisterTaskDefinitionFuture{Future: future}
}

func (a *stub) DescribeCapacityProviders(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error) {
	var output ecs.DescribeCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCapacityProvidersAsync(ctx workflow.Context, input *ecs.DescribeCapacityProvidersInput) *DescribeCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeCapacityProviders", input)
	return &DescribeCapacityProvidersFuture{Future: future}
}

func (a *stub) DescribeClusters(ctx workflow.Context, input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	var output ecs.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClustersAsync(ctx workflow.Context, input *ecs.DescribeClustersInput) *DescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeClusters", input)
	return &DescribeClustersFuture{Future: future}
}

func (a *stub) DescribeContainerInstances(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	var output ecs.DescribeContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContainerInstancesAsync(ctx workflow.Context, input *ecs.DescribeContainerInstancesInput) *DescribeContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeContainerInstances", input)
	return &DescribeContainerInstancesFuture{Future: future}
}

func (a *stub) DescribeServices(ctx workflow.Context, input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	var output ecs.DescribeServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServicesAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *DescribeServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeServices", input)
	return &DescribeServicesFuture{Future: future}
}

func (a *stub) DescribeTaskDefinition(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	var output ecs.DescribeTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTaskDefinitionAsync(ctx workflow.Context, input *ecs.DescribeTaskDefinitionInput) *DescribeTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTaskDefinition", input)
	return &DescribeTaskDefinitionFuture{Future: future}
}

func (a *stub) DescribeTaskSets(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error) {
	var output ecs.DescribeTaskSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTaskSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTaskSetsAsync(ctx workflow.Context, input *ecs.DescribeTaskSetsInput) *DescribeTaskSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTaskSets", input)
	return &DescribeTaskSetsFuture{Future: future}
}

func (a *stub) DescribeTasks(ctx workflow.Context, input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	var output ecs.DescribeTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTasksAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *DescribeTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DescribeTasks", input)
	return &DescribeTasksFuture{Future: future}
}

func (a *stub) DiscoverPollEndpoint(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	var output ecs.DiscoverPollEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-DiscoverPollEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DiscoverPollEndpointAsync(ctx workflow.Context, input *ecs.DiscoverPollEndpointInput) *DiscoverPollEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-DiscoverPollEndpoint", input)
	return &DiscoverPollEndpointFuture{Future: future}
}

func (a *stub) ListAccountSettings(ctx workflow.Context, input *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error) {
	var output ecs.ListAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountSettingsAsync(ctx workflow.Context, input *ecs.ListAccountSettingsInput) *ListAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListAccountSettings", input)
	return &ListAccountSettingsFuture{Future: future}
}

func (a *stub) ListAttributes(ctx workflow.Context, input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error) {
	var output ecs.ListAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttributesAsync(ctx workflow.Context, input *ecs.ListAttributesInput) *ListAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListAttributes", input)
	return &ListAttributesFuture{Future: future}
}

func (a *stub) ListClusters(ctx workflow.Context, input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	var output ecs.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClustersAsync(ctx workflow.Context, input *ecs.ListClustersInput) *ListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListClusters", input)
	return &ListClustersFuture{Future: future}
}

func (a *stub) ListContainerInstances(ctx workflow.Context, input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	var output ecs.ListContainerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListContainerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContainerInstancesAsync(ctx workflow.Context, input *ecs.ListContainerInstancesInput) *ListContainerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListContainerInstances", input)
	return &ListContainerInstancesFuture{Future: future}
}

func (a *stub) ListServices(ctx workflow.Context, input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	var output ecs.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServicesAsync(ctx workflow.Context, input *ecs.ListServicesInput) *ListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListServices", input)
	return &ListServicesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error) {
	var output ecs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *ecs.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTaskDefinitionFamilies(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	var output ecs.ListTaskDefinitionFamiliesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListTaskDefinitionFamilies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTaskDefinitionFamiliesAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionFamiliesInput) *ListTaskDefinitionFamiliesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListTaskDefinitionFamilies", input)
	return &ListTaskDefinitionFamiliesFuture{Future: future}
}

func (a *stub) ListTaskDefinitions(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	var output ecs.ListTaskDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListTaskDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTaskDefinitionsAsync(ctx workflow.Context, input *ecs.ListTaskDefinitionsInput) *ListTaskDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListTaskDefinitions", input)
	return &ListTaskDefinitionsFuture{Future: future}
}

func (a *stub) ListTasks(ctx workflow.Context, input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	var output ecs.ListTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-ListTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTasksAsync(ctx workflow.Context, input *ecs.ListTasksInput) *ListTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-ListTasks", input)
	return &ListTasksFuture{Future: future}
}

func (a *stub) PutAccountSetting(ctx workflow.Context, input *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error) {
	var output ecs.PutAccountSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-PutAccountSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAccountSettingAsync(ctx workflow.Context, input *ecs.PutAccountSettingInput) *PutAccountSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-PutAccountSetting", input)
	return &PutAccountSettingFuture{Future: future}
}

func (a *stub) PutAccountSettingDefault(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error) {
	var output ecs.PutAccountSettingDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-PutAccountSettingDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAccountSettingDefaultAsync(ctx workflow.Context, input *ecs.PutAccountSettingDefaultInput) *PutAccountSettingDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-PutAccountSettingDefault", input)
	return &PutAccountSettingDefaultFuture{Future: future}
}

func (a *stub) PutAttributes(ctx workflow.Context, input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error) {
	var output ecs.PutAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-PutAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAttributesAsync(ctx workflow.Context, input *ecs.PutAttributesInput) *PutAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-PutAttributes", input)
	return &PutAttributesFuture{Future: future}
}

func (a *stub) PutClusterCapacityProviders(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error) {
	var output ecs.PutClusterCapacityProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-PutClusterCapacityProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutClusterCapacityProvidersAsync(ctx workflow.Context, input *ecs.PutClusterCapacityProvidersInput) *PutClusterCapacityProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-PutClusterCapacityProviders", input)
	return &PutClusterCapacityProvidersFuture{Future: future}
}

func (a *stub) RegisterContainerInstance(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	var output ecs.RegisterContainerInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-RegisterContainerInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterContainerInstanceAsync(ctx workflow.Context, input *ecs.RegisterContainerInstanceInput) *RegisterContainerInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-RegisterContainerInstance", input)
	return &RegisterContainerInstanceFuture{Future: future}
}

func (a *stub) RegisterTaskDefinition(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	var output ecs.RegisterTaskDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-RegisterTaskDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTaskDefinitionAsync(ctx workflow.Context, input *ecs.RegisterTaskDefinitionInput) *RegisterTaskDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-RegisterTaskDefinition", input)
	return &RegisterTaskDefinitionFuture{Future: future}
}

func (a *stub) RunTask(ctx workflow.Context, input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	var output ecs.RunTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-RunTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunTaskAsync(ctx workflow.Context, input *ecs.RunTaskInput) *RunTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-RunTask", input)
	return &RunTaskFuture{Future: future}
}

func (a *stub) StartTask(ctx workflow.Context, input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	var output ecs.StartTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-StartTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTaskAsync(ctx workflow.Context, input *ecs.StartTaskInput) *StartTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-StartTask", input)
	return &StartTaskFuture{Future: future}
}

func (a *stub) StopTask(ctx workflow.Context, input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	var output ecs.StopTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-StopTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTaskAsync(ctx workflow.Context, input *ecs.StopTaskInput) *StopTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-StopTask", input)
	return &StopTaskFuture{Future: future}
}

func (a *stub) SubmitAttachmentStateChanges(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	var output ecs.SubmitAttachmentStateChangesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitAttachmentStateChanges", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubmitAttachmentStateChangesAsync(ctx workflow.Context, input *ecs.SubmitAttachmentStateChangesInput) *SubmitAttachmentStateChangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitAttachmentStateChanges", input)
	return &SubmitAttachmentStateChangesFuture{Future: future}
}

func (a *stub) SubmitContainerStateChange(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	var output ecs.SubmitContainerStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitContainerStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubmitContainerStateChangeAsync(ctx workflow.Context, input *ecs.SubmitContainerStateChangeInput) *SubmitContainerStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitContainerStateChange", input)
	return &SubmitContainerStateChangeFuture{Future: future}
}

func (a *stub) SubmitTaskStateChange(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	var output ecs.SubmitTaskStateChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitTaskStateChange", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubmitTaskStateChangeAsync(ctx workflow.Context, input *ecs.SubmitTaskStateChangeInput) *SubmitTaskStateChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-SubmitTaskStateChange", input)
	return &SubmitTaskStateChangeFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *ecs.TagResourceInput) (*ecs.TagResourceOutput, error) {
	var output ecs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *ecs.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error) {
	var output ecs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *ecs.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateCapacityProvider(ctx workflow.Context, input *ecs.UpdateCapacityProviderInput) (*ecs.UpdateCapacityProviderOutput, error) {
	var output ecs.UpdateCapacityProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateCapacityProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCapacityProviderAsync(ctx workflow.Context, input *ecs.UpdateCapacityProviderInput) *UpdateCapacityProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateCapacityProvider", input)
	return &UpdateCapacityProviderFuture{Future: future}
}

func (a *stub) UpdateClusterSettings(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error) {
	var output ecs.UpdateClusterSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateClusterSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterSettingsAsync(ctx workflow.Context, input *ecs.UpdateClusterSettingsInput) *UpdateClusterSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateClusterSettings", input)
	return &UpdateClusterSettingsFuture{Future: future}
}

func (a *stub) UpdateContainerAgent(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	var output ecs.UpdateContainerAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateContainerAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContainerAgentAsync(ctx workflow.Context, input *ecs.UpdateContainerAgentInput) *UpdateContainerAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateContainerAgent", input)
	return &UpdateContainerAgentFuture{Future: future}
}

func (a *stub) UpdateContainerInstancesState(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error) {
	var output ecs.UpdateContainerInstancesStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateContainerInstancesState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContainerInstancesStateAsync(ctx workflow.Context, input *ecs.UpdateContainerInstancesStateInput) *UpdateContainerInstancesStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateContainerInstancesState", input)
	return &UpdateContainerInstancesStateFuture{Future: future}
}

func (a *stub) UpdateService(ctx workflow.Context, input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	var output ecs.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceAsync(ctx workflow.Context, input *ecs.UpdateServiceInput) *UpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateService", input)
	return &UpdateServiceFuture{Future: future}
}

func (a *stub) UpdateServicePrimaryTaskSet(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	var output ecs.UpdateServicePrimaryTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateServicePrimaryTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServicePrimaryTaskSetAsync(ctx workflow.Context, input *ecs.UpdateServicePrimaryTaskSetInput) *UpdateServicePrimaryTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateServicePrimaryTaskSet", input)
	return &UpdateServicePrimaryTaskSetFuture{Future: future}
}

func (a *stub) UpdateTaskSet(ctx workflow.Context, input *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error) {
	var output ecs.UpdateTaskSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateTaskSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTaskSetAsync(ctx workflow.Context, input *ecs.UpdateTaskSetInput) *UpdateTaskSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-UpdateTaskSet", input)
	return &UpdateTaskSetFuture{Future: future}
}

func (a *stub) WaitUntilServicesInactive(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilServicesInactive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilServicesInactiveAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilServicesInactive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilServicesStable(ctx workflow.Context, input *ecs.DescribeServicesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilServicesStable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilServicesStableAsync(ctx workflow.Context, input *ecs.DescribeServicesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilServicesStable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTasksRunning(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilTasksRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTasksRunningAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilTasksRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTasksStopped(ctx workflow.Context, input *ecs.DescribeTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilTasksStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTasksStoppedAsync(ctx workflow.Context, input *ecs.DescribeTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecs-WaitUntilTasksStopped", input)
	return clients.NewVoidFuture(future)
}
