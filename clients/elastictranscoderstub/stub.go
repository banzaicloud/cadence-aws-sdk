// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elastictranscoderstub

import (
	"github.com/aws/aws-sdk-go/service/elastictranscoder"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ElasticTranscoderCancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCancelJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreateJobFuture) Get(ctx workflow.Context) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderCreatePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderCreatePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderDeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderDeletePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderDeletePresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderDeletePresetFuture) Get(ctx workflow.Context) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListJobsByPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListJobsByPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListJobsByStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListJobsByStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListPipelinesFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderListPresetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderListPresetsFuture) Get(ctx workflow.Context) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadJobFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadPipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderReadPresetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderReadPresetFuture) Get(ctx workflow.Context) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderTestRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderTestRoleFuture) Get(ctx workflow.Context) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineNotificationsFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticTranscoderUpdatePipelineStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticTranscoderUpdatePipelineStatusFuture) Get(ctx workflow.Context) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJob(ctx workflow.Context, input *elastictranscoder.CancelJobInput) (*elastictranscoder.CancelJobOutput, error) {
	var output elastictranscoder.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobAsync(ctx workflow.Context, input *elastictranscoder.CancelJobInput) *ElasticTranscoderCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CancelJob", input)
	return &ElasticTranscoderCancelJobFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *elastictranscoder.CreateJobInput) (*elastictranscoder.CreateJobResponse, error) {
	var output elastictranscoder.CreateJobResponse
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *elastictranscoder.CreateJobInput) *ElasticTranscoderCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreateJob", input)
	return &ElasticTranscoderCreateJobFuture{Future: future}
}

func (a *stub) CreatePipeline(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) (*elastictranscoder.CreatePipelineOutput, error) {
	var output elastictranscoder.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePipelineAsync(ctx workflow.Context, input *elastictranscoder.CreatePipelineInput) *ElasticTranscoderCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreatePipeline", input)
	return &ElasticTranscoderCreatePipelineFuture{Future: future}
}

func (a *stub) CreatePreset(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) (*elastictranscoder.CreatePresetOutput, error) {
	var output elastictranscoder.CreatePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreatePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresetAsync(ctx workflow.Context, input *elastictranscoder.CreatePresetInput) *ElasticTranscoderCreatePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-CreatePreset", input)
	return &ElasticTranscoderCreatePresetFuture{Future: future}
}

func (a *stub) DeletePipeline(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) (*elastictranscoder.DeletePipelineOutput, error) {
	var output elastictranscoder.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePipelineAsync(ctx workflow.Context, input *elastictranscoder.DeletePipelineInput) *ElasticTranscoderDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-DeletePipeline", input)
	return &ElasticTranscoderDeletePipelineFuture{Future: future}
}

func (a *stub) DeletePreset(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) (*elastictranscoder.DeletePresetOutput, error) {
	var output elastictranscoder.DeletePresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-DeletePreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePresetAsync(ctx workflow.Context, input *elastictranscoder.DeletePresetInput) *ElasticTranscoderDeletePresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-DeletePreset", input)
	return &ElasticTranscoderDeletePresetFuture{Future: future}
}

func (a *stub) ListJobsByPipeline(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) (*elastictranscoder.ListJobsByPipelineOutput, error) {
	var output elastictranscoder.ListJobsByPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListJobsByPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsByPipelineAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByPipelineInput) *ElasticTranscoderListJobsByPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListJobsByPipeline", input)
	return &ElasticTranscoderListJobsByPipelineFuture{Future: future}
}

func (a *stub) ListJobsByStatus(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) (*elastictranscoder.ListJobsByStatusOutput, error) {
	var output elastictranscoder.ListJobsByStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListJobsByStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsByStatusAsync(ctx workflow.Context, input *elastictranscoder.ListJobsByStatusInput) *ElasticTranscoderListJobsByStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListJobsByStatus", input)
	return &ElasticTranscoderListJobsByStatusFuture{Future: future}
}

func (a *stub) ListPipelines(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) (*elastictranscoder.ListPipelinesOutput, error) {
	var output elastictranscoder.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelinesAsync(ctx workflow.Context, input *elastictranscoder.ListPipelinesInput) *ElasticTranscoderListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListPipelines", input)
	return &ElasticTranscoderListPipelinesFuture{Future: future}
}

func (a *stub) ListPresets(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) (*elastictranscoder.ListPresetsOutput, error) {
	var output elastictranscoder.ListPresetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListPresets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPresetsAsync(ctx workflow.Context, input *elastictranscoder.ListPresetsInput) *ElasticTranscoderListPresetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ListPresets", input)
	return &ElasticTranscoderListPresetsFuture{Future: future}
}

func (a *stub) ReadJob(ctx workflow.Context, input *elastictranscoder.ReadJobInput) (*elastictranscoder.ReadJobOutput, error) {
	var output elastictranscoder.ReadJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReadJobAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *ElasticTranscoderReadJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadJob", input)
	return &ElasticTranscoderReadJobFuture{Future: future}
}

func (a *stub) ReadPipeline(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) (*elastictranscoder.ReadPipelineOutput, error) {
	var output elastictranscoder.ReadPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReadPipelineAsync(ctx workflow.Context, input *elastictranscoder.ReadPipelineInput) *ElasticTranscoderReadPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadPipeline", input)
	return &ElasticTranscoderReadPipelineFuture{Future: future}
}

func (a *stub) ReadPreset(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) (*elastictranscoder.ReadPresetOutput, error) {
	var output elastictranscoder.ReadPresetOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadPreset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReadPresetAsync(ctx workflow.Context, input *elastictranscoder.ReadPresetInput) *ElasticTranscoderReadPresetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-ReadPreset", input)
	return &ElasticTranscoderReadPresetFuture{Future: future}
}

func (a *stub) TestRole(ctx workflow.Context, input *elastictranscoder.TestRoleInput) (*elastictranscoder.TestRoleOutput, error) {
	var output elastictranscoder.TestRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-TestRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestRoleAsync(ctx workflow.Context, input *elastictranscoder.TestRoleInput) *ElasticTranscoderTestRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-TestRole", input)
	return &ElasticTranscoderTestRoleFuture{Future: future}
}

func (a *stub) UpdatePipeline(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) (*elastictranscoder.UpdatePipelineOutput, error) {
	var output elastictranscoder.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineInput) *ElasticTranscoderUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipeline", input)
	return &ElasticTranscoderUpdatePipelineFuture{Future: future}
}

func (a *stub) UpdatePipelineNotifications(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {
	var output elastictranscoder.UpdatePipelineNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipelineNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineNotificationsAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineNotificationsInput) *ElasticTranscoderUpdatePipelineNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipelineNotifications", input)
	return &ElasticTranscoderUpdatePipelineNotificationsFuture{Future: future}
}

func (a *stub) UpdatePipelineStatus(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) (*elastictranscoder.UpdatePipelineStatusOutput, error) {
	var output elastictranscoder.UpdatePipelineStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipelineStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineStatusAsync(ctx workflow.Context, input *elastictranscoder.UpdatePipelineStatusInput) *ElasticTranscoderUpdatePipelineStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-UpdatePipelineStatus", input)
	return &ElasticTranscoderUpdatePipelineStatusFuture{Future: future}
}

func (a *stub) WaitUntilJobComplete(ctx workflow.Context, input *elastictranscoder.ReadJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elastictranscoder-WaitUntilJobComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilJobCompleteAsync(ctx workflow.Context, input *elastictranscoder.ReadJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elastictranscoder-WaitUntilJobComplete", input)
	return clients.NewVoidFuture(future)
}
