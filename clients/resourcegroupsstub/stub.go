// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package resourcegroupsstub

import (
	"github.com/aws/aws-sdk-go/service/resourcegroups"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ResourceGroupsCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsCreateGroupFuture) Get(ctx workflow.Context) (*resourcegroups.CreateGroupOutput, error) {
	var output resourcegroups.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsDeleteGroupFuture) Get(ctx workflow.Context) (*resourcegroups.DeleteGroupOutput, error) {
	var output resourcegroups.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsGetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsGetGroupFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupOutput, error) {
	var output resourcegroups.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsGetGroupConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsGetGroupConfigurationFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupConfigurationOutput, error) {
	var output resourcegroups.GetGroupConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsGetGroupQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsGetGroupQueryFuture) Get(ctx workflow.Context) (*resourcegroups.GetGroupQueryOutput, error) {
	var output resourcegroups.GetGroupQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsGetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsGetTagsFuture) Get(ctx workflow.Context) (*resourcegroups.GetTagsOutput, error) {
	var output resourcegroups.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsGroupResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsGroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.GroupResourcesOutput, error) {
	var output resourcegroups.GroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsListGroupResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsListGroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.ListGroupResourcesOutput, error) {
	var output resourcegroups.ListGroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsListGroupsFuture) Get(ctx workflow.Context) (*resourcegroups.ListGroupsOutput, error) {
	var output resourcegroups.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsSearchResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsSearchResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.SearchResourcesOutput, error) {
	var output resourcegroups.SearchResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsTagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsTagFuture) Get(ctx workflow.Context) (*resourcegroups.TagOutput, error) {
	var output resourcegroups.TagOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsUngroupResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsUngroupResourcesFuture) Get(ctx workflow.Context) (*resourcegroups.UngroupResourcesOutput, error) {
	var output resourcegroups.UngroupResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsUntagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsUntagFuture) Get(ctx workflow.Context) (*resourcegroups.UntagOutput, error) {
	var output resourcegroups.UntagOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsUpdateGroupFuture) Get(ctx workflow.Context) (*resourcegroups.UpdateGroupOutput, error) {
	var output resourcegroups.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResourceGroupsUpdateGroupQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResourceGroupsUpdateGroupQueryFuture) Get(ctx workflow.Context) (*resourcegroups.UpdateGroupQueryOutput, error) {
	var output resourcegroups.UpdateGroupQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroup(ctx workflow.Context, input *resourcegroups.CreateGroupInput) (*resourcegroups.CreateGroupOutput, error) {
	var output resourcegroups.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *resourcegroups.CreateGroupInput) *ResourceGroupsCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-CreateGroup", input)
	return &ResourceGroupsCreateGroupFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) (*resourcegroups.DeleteGroupOutput, error) {
	var output resourcegroups.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *resourcegroups.DeleteGroupInput) *ResourceGroupsDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-DeleteGroup", input)
	return &ResourceGroupsDeleteGroupFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *resourcegroups.GetGroupInput) (*resourcegroups.GetGroupOutput, error) {
	var output resourcegroups.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *resourcegroups.GetGroupInput) *ResourceGroupsGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroup", input)
	return &ResourceGroupsGetGroupFuture{Future: future}
}

func (a *stub) GetGroupConfiguration(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) (*resourcegroups.GetGroupConfigurationOutput, error) {
	var output resourcegroups.GetGroupConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroupConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupConfigurationAsync(ctx workflow.Context, input *resourcegroups.GetGroupConfigurationInput) *ResourceGroupsGetGroupConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroupConfiguration", input)
	return &ResourceGroupsGetGroupConfigurationFuture{Future: future}
}

func (a *stub) GetGroupQuery(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) (*resourcegroups.GetGroupQueryOutput, error) {
	var output resourcegroups.GetGroupQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroupQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupQueryAsync(ctx workflow.Context, input *resourcegroups.GetGroupQueryInput) *ResourceGroupsGetGroupQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetGroupQuery", input)
	return &ResourceGroupsGetGroupQueryFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *resourcegroups.GetTagsInput) (*resourcegroups.GetTagsOutput, error) {
	var output resourcegroups.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *resourcegroups.GetTagsInput) *ResourceGroupsGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GetTags", input)
	return &ResourceGroupsGetTagsFuture{Future: future}
}

func (a *stub) GroupResources(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) (*resourcegroups.GroupResourcesOutput, error) {
	var output resourcegroups.GroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GroupResourcesAsync(ctx workflow.Context, input *resourcegroups.GroupResourcesInput) *ResourceGroupsGroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-GroupResources", input)
	return &ResourceGroupsGroupResourcesFuture{Future: future}
}

func (a *stub) ListGroupResources(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) (*resourcegroups.ListGroupResourcesOutput, error) {
	var output resourcegroups.ListGroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-ListGroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupResourcesAsync(ctx workflow.Context, input *resourcegroups.ListGroupResourcesInput) *ResourceGroupsListGroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-ListGroupResources", input)
	return &ResourceGroupsListGroupResourcesFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *resourcegroups.ListGroupsInput) (*resourcegroups.ListGroupsOutput, error) {
	var output resourcegroups.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *resourcegroups.ListGroupsInput) *ResourceGroupsListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-ListGroups", input)
	return &ResourceGroupsListGroupsFuture{Future: future}
}

func (a *stub) SearchResources(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) (*resourcegroups.SearchResourcesOutput, error) {
	var output resourcegroups.SearchResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-SearchResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchResourcesAsync(ctx workflow.Context, input *resourcegroups.SearchResourcesInput) *ResourceGroupsSearchResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-SearchResources", input)
	return &ResourceGroupsSearchResourcesFuture{Future: future}
}

func (a *stub) Tag(ctx workflow.Context, input *resourcegroups.TagInput) (*resourcegroups.TagOutput, error) {
	var output resourcegroups.TagOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-Tag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagAsync(ctx workflow.Context, input *resourcegroups.TagInput) *ResourceGroupsTagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-Tag", input)
	return &ResourceGroupsTagFuture{Future: future}
}

func (a *stub) UngroupResources(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) (*resourcegroups.UngroupResourcesOutput, error) {
	var output resourcegroups.UngroupResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UngroupResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UngroupResourcesAsync(ctx workflow.Context, input *resourcegroups.UngroupResourcesInput) *ResourceGroupsUngroupResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UngroupResources", input)
	return &ResourceGroupsUngroupResourcesFuture{Future: future}
}

func (a *stub) Untag(ctx workflow.Context, input *resourcegroups.UntagInput) (*resourcegroups.UntagOutput, error) {
	var output resourcegroups.UntagOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-Untag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagAsync(ctx workflow.Context, input *resourcegroups.UntagInput) *ResourceGroupsUntagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-Untag", input)
	return &ResourceGroupsUntagFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) (*resourcegroups.UpdateGroupOutput, error) {
	var output resourcegroups.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupInput) *ResourceGroupsUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UpdateGroup", input)
	return &ResourceGroupsUpdateGroupFuture{Future: future}
}

func (a *stub) UpdateGroupQuery(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) (*resourcegroups.UpdateGroupQueryOutput, error) {
	var output resourcegroups.UpdateGroupQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UpdateGroupQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupQueryAsync(ctx workflow.Context, input *resourcegroups.UpdateGroupQueryInput) *ResourceGroupsUpdateGroupQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-resourcegroups-UpdateGroupQuery", input)
	return &ResourceGroupsUpdateGroupQueryFuture{Future: future}
}
