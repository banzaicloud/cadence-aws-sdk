// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ecrpublicstub

import (
	"github.com/aws/aws-sdk-go/service/ecrpublic"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchCheckLayerAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCheckLayerAvailabilityFuture) Get(ctx workflow.Context) (*ecrpublic.BatchCheckLayerAvailabilityOutput, error) {
	var output ecrpublic.BatchCheckLayerAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteImageFuture) Get(ctx workflow.Context) (*ecrpublic.BatchDeleteImageOutput, error) {
	var output ecrpublic.BatchDeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CompleteLayerUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteLayerUploadFuture) Get(ctx workflow.Context) (*ecrpublic.CompleteLayerUploadOutput, error) {
	var output ecrpublic.CompleteLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRepositoryFuture) Get(ctx workflow.Context) (*ecrpublic.CreateRepositoryOutput, error) {
	var output ecrpublic.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryFuture) Get(ctx workflow.Context) (*ecrpublic.DeleteRepositoryOutput, error) {
	var output ecrpublic.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecrpublic.DeleteRepositoryPolicyOutput, error) {
	var output ecrpublic.DeleteRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageTagsFuture) Get(ctx workflow.Context) (*ecrpublic.DescribeImageTagsOutput, error) {
	var output ecrpublic.DescribeImageTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImagesFuture) Get(ctx workflow.Context) (*ecrpublic.DescribeImagesOutput, error) {
	var output ecrpublic.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRegistriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRegistriesFuture) Get(ctx workflow.Context) (*ecrpublic.DescribeRegistriesOutput, error) {
	var output ecrpublic.DescribeRegistriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRepositoriesFuture) Get(ctx workflow.Context) (*ecrpublic.DescribeRepositoriesOutput, error) {
	var output ecrpublic.DescribeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAuthorizationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAuthorizationTokenFuture) Get(ctx workflow.Context) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	var output ecrpublic.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegistryCatalogDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegistryCatalogDataFuture) Get(ctx workflow.Context) (*ecrpublic.GetRegistryCatalogDataOutput, error) {
	var output ecrpublic.GetRegistryCatalogDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryCatalogDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryCatalogDataFuture) Get(ctx workflow.Context) (*ecrpublic.GetRepositoryCatalogDataOutput, error) {
	var output ecrpublic.GetRepositoryCatalogDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecrpublic.GetRepositoryPolicyOutput, error) {
	var output ecrpublic.GetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InitiateLayerUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InitiateLayerUploadFuture) Get(ctx workflow.Context) (*ecrpublic.InitiateLayerUploadOutput, error) {
	var output ecrpublic.InitiateLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImageFuture) Get(ctx workflow.Context) (*ecrpublic.PutImageOutput, error) {
	var output ecrpublic.PutImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRegistryCatalogDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRegistryCatalogDataFuture) Get(ctx workflow.Context) (*ecrpublic.PutRegistryCatalogDataOutput, error) {
	var output ecrpublic.PutRegistryCatalogDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRepositoryCatalogDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRepositoryCatalogDataFuture) Get(ctx workflow.Context) (*ecrpublic.PutRepositoryCatalogDataOutput, error) {
	var output ecrpublic.PutRepositoryCatalogDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecrpublic.SetRepositoryPolicyOutput, error) {
	var output ecrpublic.SetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadLayerPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadLayerPartFuture) Get(ctx workflow.Context) (*ecrpublic.UploadLayerPartOutput, error) {
	var output ecrpublic.UploadLayerPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCheckLayerAvailability(ctx workflow.Context, input *ecrpublic.BatchCheckLayerAvailabilityInput) (*ecrpublic.BatchCheckLayerAvailabilityOutput, error) {
	var output ecrpublic.BatchCheckLayerAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-BatchCheckLayerAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCheckLayerAvailabilityAsync(ctx workflow.Context, input *ecrpublic.BatchCheckLayerAvailabilityInput) *BatchCheckLayerAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-BatchCheckLayerAvailability", input)
	return &BatchCheckLayerAvailabilityFuture{Future: future}
}

func (a *stub) BatchDeleteImage(ctx workflow.Context, input *ecrpublic.BatchDeleteImageInput) (*ecrpublic.BatchDeleteImageOutput, error) {
	var output ecrpublic.BatchDeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-BatchDeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteImageAsync(ctx workflow.Context, input *ecrpublic.BatchDeleteImageInput) *BatchDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-BatchDeleteImage", input)
	return &BatchDeleteImageFuture{Future: future}
}

func (a *stub) CompleteLayerUpload(ctx workflow.Context, input *ecrpublic.CompleteLayerUploadInput) (*ecrpublic.CompleteLayerUploadOutput, error) {
	var output ecrpublic.CompleteLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-CompleteLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteLayerUploadAsync(ctx workflow.Context, input *ecrpublic.CompleteLayerUploadInput) *CompleteLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-CompleteLayerUpload", input)
	return &CompleteLayerUploadFuture{Future: future}
}

func (a *stub) CreateRepository(ctx workflow.Context, input *ecrpublic.CreateRepositoryInput) (*ecrpublic.CreateRepositoryOutput, error) {
	var output ecrpublic.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRepositoryAsync(ctx workflow.Context, input *ecrpublic.CreateRepositoryInput) *CreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-CreateRepository", input)
	return &CreateRepositoryFuture{Future: future}
}

func (a *stub) DeleteRepository(ctx workflow.Context, input *ecrpublic.DeleteRepositoryInput) (*ecrpublic.DeleteRepositoryOutput, error) {
	var output ecrpublic.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryAsync(ctx workflow.Context, input *ecrpublic.DeleteRepositoryInput) *DeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DeleteRepository", input)
	return &DeleteRepositoryFuture{Future: future}
}

func (a *stub) DeleteRepositoryPolicy(ctx workflow.Context, input *ecrpublic.DeleteRepositoryPolicyInput) (*ecrpublic.DeleteRepositoryPolicyOutput, error) {
	var output ecrpublic.DeleteRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DeleteRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.DeleteRepositoryPolicyInput) *DeleteRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DeleteRepositoryPolicy", input)
	return &DeleteRepositoryPolicyFuture{Future: future}
}

func (a *stub) DescribeImageTags(ctx workflow.Context, input *ecrpublic.DescribeImageTagsInput) (*ecrpublic.DescribeImageTagsOutput, error) {
	var output ecrpublic.DescribeImageTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeImageTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageTagsAsync(ctx workflow.Context, input *ecrpublic.DescribeImageTagsInput) *DescribeImageTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeImageTags", input)
	return &DescribeImageTagsFuture{Future: future}
}

func (a *stub) DescribeImages(ctx workflow.Context, input *ecrpublic.DescribeImagesInput) (*ecrpublic.DescribeImagesOutput, error) {
	var output ecrpublic.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImagesAsync(ctx workflow.Context, input *ecrpublic.DescribeImagesInput) *DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeImages", input)
	return &DescribeImagesFuture{Future: future}
}

func (a *stub) DescribeRegistries(ctx workflow.Context, input *ecrpublic.DescribeRegistriesInput) (*ecrpublic.DescribeRegistriesOutput, error) {
	var output ecrpublic.DescribeRegistriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeRegistries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegistriesAsync(ctx workflow.Context, input *ecrpublic.DescribeRegistriesInput) *DescribeRegistriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeRegistries", input)
	return &DescribeRegistriesFuture{Future: future}
}

func (a *stub) DescribeRepositories(ctx workflow.Context, input *ecrpublic.DescribeRepositoriesInput) (*ecrpublic.DescribeRepositoriesOutput, error) {
	var output ecrpublic.DescribeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRepositoriesAsync(ctx workflow.Context, input *ecrpublic.DescribeRepositoriesInput) *DescribeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-DescribeRepositories", input)
	return &DescribeRepositoriesFuture{Future: future}
}

func (a *stub) GetAuthorizationToken(ctx workflow.Context, input *ecrpublic.GetAuthorizationTokenInput) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	var output ecrpublic.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizationTokenAsync(ctx workflow.Context, input *ecrpublic.GetAuthorizationTokenInput) *GetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetAuthorizationToken", input)
	return &GetAuthorizationTokenFuture{Future: future}
}

func (a *stub) GetRegistryCatalogData(ctx workflow.Context, input *ecrpublic.GetRegistryCatalogDataInput) (*ecrpublic.GetRegistryCatalogDataOutput, error) {
	var output ecrpublic.GetRegistryCatalogDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRegistryCatalogData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegistryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.GetRegistryCatalogDataInput) *GetRegistryCatalogDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRegistryCatalogData", input)
	return &GetRegistryCatalogDataFuture{Future: future}
}

func (a *stub) GetRepositoryCatalogData(ctx workflow.Context, input *ecrpublic.GetRepositoryCatalogDataInput) (*ecrpublic.GetRepositoryCatalogDataOutput, error) {
	var output ecrpublic.GetRepositoryCatalogDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRepositoryCatalogData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.GetRepositoryCatalogDataInput) *GetRepositoryCatalogDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRepositoryCatalogData", input)
	return &GetRepositoryCatalogDataFuture{Future: future}
}

func (a *stub) GetRepositoryPolicy(ctx workflow.Context, input *ecrpublic.GetRepositoryPolicyInput) (*ecrpublic.GetRepositoryPolicyOutput, error) {
	var output ecrpublic.GetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.GetRepositoryPolicyInput) *GetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-GetRepositoryPolicy", input)
	return &GetRepositoryPolicyFuture{Future: future}
}

func (a *stub) InitiateLayerUpload(ctx workflow.Context, input *ecrpublic.InitiateLayerUploadInput) (*ecrpublic.InitiateLayerUploadOutput, error) {
	var output ecrpublic.InitiateLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-InitiateLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitiateLayerUploadAsync(ctx workflow.Context, input *ecrpublic.InitiateLayerUploadInput) *InitiateLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-InitiateLayerUpload", input)
	return &InitiateLayerUploadFuture{Future: future}
}

func (a *stub) PutImage(ctx workflow.Context, input *ecrpublic.PutImageInput) (*ecrpublic.PutImageOutput, error) {
	var output ecrpublic.PutImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageAsync(ctx workflow.Context, input *ecrpublic.PutImageInput) *PutImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutImage", input)
	return &PutImageFuture{Future: future}
}

func (a *stub) PutRegistryCatalogData(ctx workflow.Context, input *ecrpublic.PutRegistryCatalogDataInput) (*ecrpublic.PutRegistryCatalogDataOutput, error) {
	var output ecrpublic.PutRegistryCatalogDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutRegistryCatalogData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRegistryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.PutRegistryCatalogDataInput) *PutRegistryCatalogDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutRegistryCatalogData", input)
	return &PutRegistryCatalogDataFuture{Future: future}
}

func (a *stub) PutRepositoryCatalogData(ctx workflow.Context, input *ecrpublic.PutRepositoryCatalogDataInput) (*ecrpublic.PutRepositoryCatalogDataOutput, error) {
	var output ecrpublic.PutRepositoryCatalogDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutRepositoryCatalogData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRepositoryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.PutRepositoryCatalogDataInput) *PutRepositoryCatalogDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-PutRepositoryCatalogData", input)
	return &PutRepositoryCatalogDataFuture{Future: future}
}

func (a *stub) SetRepositoryPolicy(ctx workflow.Context, input *ecrpublic.SetRepositoryPolicyInput) (*ecrpublic.SetRepositoryPolicyOutput, error) {
	var output ecrpublic.SetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-SetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.SetRepositoryPolicyInput) *SetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-SetRepositoryPolicy", input)
	return &SetRepositoryPolicyFuture{Future: future}
}

func (a *stub) UploadLayerPart(ctx workflow.Context, input *ecrpublic.UploadLayerPartInput) (*ecrpublic.UploadLayerPartOutput, error) {
	var output ecrpublic.UploadLayerPartOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecrpublic-UploadLayerPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadLayerPartAsync(ctx workflow.Context, input *ecrpublic.UploadLayerPartInput) *UploadLayerPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecrpublic-UploadLayerPart", input)
	return &UploadLayerPartFuture{Future: future}
}
