// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ecrpublicstub

import (
	"github.com/aws/aws-sdk-go/service/ecrpublic"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	BatchCheckLayerAvailability(ctx workflow.Context, input *ecrpublic.BatchCheckLayerAvailabilityInput) (*ecrpublic.BatchCheckLayerAvailabilityOutput, error)
	BatchCheckLayerAvailabilityAsync(ctx workflow.Context, input *ecrpublic.BatchCheckLayerAvailabilityInput) *BatchCheckLayerAvailabilityFuture

	BatchDeleteImage(ctx workflow.Context, input *ecrpublic.BatchDeleteImageInput) (*ecrpublic.BatchDeleteImageOutput, error)
	BatchDeleteImageAsync(ctx workflow.Context, input *ecrpublic.BatchDeleteImageInput) *BatchDeleteImageFuture

	CompleteLayerUpload(ctx workflow.Context, input *ecrpublic.CompleteLayerUploadInput) (*ecrpublic.CompleteLayerUploadOutput, error)
	CompleteLayerUploadAsync(ctx workflow.Context, input *ecrpublic.CompleteLayerUploadInput) *CompleteLayerUploadFuture

	CreateRepository(ctx workflow.Context, input *ecrpublic.CreateRepositoryInput) (*ecrpublic.CreateRepositoryOutput, error)
	CreateRepositoryAsync(ctx workflow.Context, input *ecrpublic.CreateRepositoryInput) *CreateRepositoryFuture

	DeleteRepository(ctx workflow.Context, input *ecrpublic.DeleteRepositoryInput) (*ecrpublic.DeleteRepositoryOutput, error)
	DeleteRepositoryAsync(ctx workflow.Context, input *ecrpublic.DeleteRepositoryInput) *DeleteRepositoryFuture

	DeleteRepositoryPolicy(ctx workflow.Context, input *ecrpublic.DeleteRepositoryPolicyInput) (*ecrpublic.DeleteRepositoryPolicyOutput, error)
	DeleteRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.DeleteRepositoryPolicyInput) *DeleteRepositoryPolicyFuture

	DescribeImageTags(ctx workflow.Context, input *ecrpublic.DescribeImageTagsInput) (*ecrpublic.DescribeImageTagsOutput, error)
	DescribeImageTagsAsync(ctx workflow.Context, input *ecrpublic.DescribeImageTagsInput) *DescribeImageTagsFuture

	DescribeImages(ctx workflow.Context, input *ecrpublic.DescribeImagesInput) (*ecrpublic.DescribeImagesOutput, error)
	DescribeImagesAsync(ctx workflow.Context, input *ecrpublic.DescribeImagesInput) *DescribeImagesFuture

	DescribeRegistries(ctx workflow.Context, input *ecrpublic.DescribeRegistriesInput) (*ecrpublic.DescribeRegistriesOutput, error)
	DescribeRegistriesAsync(ctx workflow.Context, input *ecrpublic.DescribeRegistriesInput) *DescribeRegistriesFuture

	DescribeRepositories(ctx workflow.Context, input *ecrpublic.DescribeRepositoriesInput) (*ecrpublic.DescribeRepositoriesOutput, error)
	DescribeRepositoriesAsync(ctx workflow.Context, input *ecrpublic.DescribeRepositoriesInput) *DescribeRepositoriesFuture

	GetAuthorizationToken(ctx workflow.Context, input *ecrpublic.GetAuthorizationTokenInput) (*ecrpublic.GetAuthorizationTokenOutput, error)
	GetAuthorizationTokenAsync(ctx workflow.Context, input *ecrpublic.GetAuthorizationTokenInput) *GetAuthorizationTokenFuture

	GetRegistryCatalogData(ctx workflow.Context, input *ecrpublic.GetRegistryCatalogDataInput) (*ecrpublic.GetRegistryCatalogDataOutput, error)
	GetRegistryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.GetRegistryCatalogDataInput) *GetRegistryCatalogDataFuture

	GetRepositoryCatalogData(ctx workflow.Context, input *ecrpublic.GetRepositoryCatalogDataInput) (*ecrpublic.GetRepositoryCatalogDataOutput, error)
	GetRepositoryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.GetRepositoryCatalogDataInput) *GetRepositoryCatalogDataFuture

	GetRepositoryPolicy(ctx workflow.Context, input *ecrpublic.GetRepositoryPolicyInput) (*ecrpublic.GetRepositoryPolicyOutput, error)
	GetRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.GetRepositoryPolicyInput) *GetRepositoryPolicyFuture

	InitiateLayerUpload(ctx workflow.Context, input *ecrpublic.InitiateLayerUploadInput) (*ecrpublic.InitiateLayerUploadOutput, error)
	InitiateLayerUploadAsync(ctx workflow.Context, input *ecrpublic.InitiateLayerUploadInput) *InitiateLayerUploadFuture

	PutImage(ctx workflow.Context, input *ecrpublic.PutImageInput) (*ecrpublic.PutImageOutput, error)
	PutImageAsync(ctx workflow.Context, input *ecrpublic.PutImageInput) *PutImageFuture

	PutRegistryCatalogData(ctx workflow.Context, input *ecrpublic.PutRegistryCatalogDataInput) (*ecrpublic.PutRegistryCatalogDataOutput, error)
	PutRegistryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.PutRegistryCatalogDataInput) *PutRegistryCatalogDataFuture

	PutRepositoryCatalogData(ctx workflow.Context, input *ecrpublic.PutRepositoryCatalogDataInput) (*ecrpublic.PutRepositoryCatalogDataOutput, error)
	PutRepositoryCatalogDataAsync(ctx workflow.Context, input *ecrpublic.PutRepositoryCatalogDataInput) *PutRepositoryCatalogDataFuture

	SetRepositoryPolicy(ctx workflow.Context, input *ecrpublic.SetRepositoryPolicyInput) (*ecrpublic.SetRepositoryPolicyOutput, error)
	SetRepositoryPolicyAsync(ctx workflow.Context, input *ecrpublic.SetRepositoryPolicyInput) *SetRepositoryPolicyFuture

	UploadLayerPart(ctx workflow.Context, input *ecrpublic.UploadLayerPartInput) (*ecrpublic.UploadLayerPartOutput, error)
	UploadLayerPartAsync(ctx workflow.Context, input *ecrpublic.UploadLayerPartInput) *UploadLayerPartFuture
}

func NewClient() Client {
	return &stub{}
}
