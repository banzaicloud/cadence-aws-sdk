// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package gameliftstub

import (
	"github.com/aws/aws-sdk-go/service/gamelift"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptMatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptMatchFuture) Get(ctx workflow.Context) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClaimGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ClaimGameServerFuture) Get(ctx workflow.Context) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAliasFuture) Get(ctx workflow.Context) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBuildFuture) Get(ctx workflow.Context) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFleetFuture) Get(ctx workflow.Context) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGameSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePlayerSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePlayerSessionFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePlayerSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateScriptFuture) Get(ctx workflow.Context) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcPeeringAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAliasFuture) Get(ctx workflow.Context) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBuildFuture) Get(ctx workflow.Context) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFleetFuture) Get(ctx workflow.Context) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScriptFuture) Get(ctx workflow.Context) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcPeeringAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAliasFuture) Get(ctx workflow.Context) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBuildFuture) Get(ctx workflow.Context) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEC2InstanceLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEC2InstanceLimitsFuture) Get(ctx workflow.Context) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetEventsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetPortSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetUtilizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetUtilizationFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameServerFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameServerInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameServerInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameSessionDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameSessionDetailsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameSessionQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameSessionQueuesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGameSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMatchmakingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMatchmakingConfigurationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMatchmakingRuleSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMatchmakingRuleSetsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePlayerSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingPoliciesFuture) Get(ctx workflow.Context) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScriptFuture) Get(ctx workflow.Context) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcPeeringAuthorizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcPeeringAuthorizationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcPeeringConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGameSessionLogUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGameSessionLogUrlFuture) Get(ctx workflow.Context) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceAccessFuture) Get(ctx workflow.Context) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAliasesFuture) Get(ctx workflow.Context) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBuildsFuture) Get(ctx workflow.Context) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFleetsFuture) Get(ctx workflow.Context) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGameServerGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGameServerGroupsFuture) Get(ctx workflow.Context) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGameServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGameServersFuture) Get(ctx workflow.Context) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListScriptsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListScriptsFuture) Get(ctx workflow.Context) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RequestUploadCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RequestUploadCredentialsFuture) Get(ctx workflow.Context) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResolveAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResolveAliasFuture) Get(ctx workflow.Context) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchGameSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFleetActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMatchBackfillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMatchBackfillFuture) Get(ctx workflow.Context) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopFleetActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SuspendGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SuspendGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAliasFuture) Get(ctx workflow.Context) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBuildFuture) Get(ctx workflow.Context) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFleetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFleetCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFleetPortSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGameServerFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGameSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateScriptFuture) Get(ctx workflow.Context) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptMatch(ctx workflow.Context, input *gamelift.AcceptMatchInput) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-AcceptMatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptMatchAsync(ctx workflow.Context, input *gamelift.AcceptMatchInput) *AcceptMatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-AcceptMatch", input)
	return &AcceptMatchFuture{Future: future}
}

func (a *stub) ClaimGameServer(ctx workflow.Context, input *gamelift.ClaimGameServerInput) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ClaimGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClaimGameServerAsync(ctx workflow.Context, input *gamelift.ClaimGameServerInput) *ClaimGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ClaimGameServer", input)
	return &ClaimGameServerFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *gamelift.CreateAliasInput) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *gamelift.CreateAliasInput) *CreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateAlias", input)
	return &CreateAliasFuture{Future: future}
}

func (a *stub) CreateBuild(ctx workflow.Context, input *gamelift.CreateBuildInput) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBuildAsync(ctx workflow.Context, input *gamelift.CreateBuildInput) *CreateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateBuild", input)
	return &CreateBuildFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *gamelift.CreateFleetInput) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *gamelift.CreateFleetInput) *CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateFleet", input)
	return &CreateFleetFuture{Future: future}
}

func (a *stub) CreateGameServerGroup(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameServerGroupAsync(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) *CreateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameServerGroup", input)
	return &CreateGameServerGroupFuture{Future: future}
}

func (a *stub) CreateGameSession(ctx workflow.Context, input *gamelift.CreateGameSessionInput) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameSessionAsync(ctx workflow.Context, input *gamelift.CreateGameSessionInput) *CreateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSession", input)
	return &CreateGameSessionFuture{Future: future}
}

func (a *stub) CreateGameSessionQueue(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) *CreateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSessionQueue", input)
	return &CreateGameSessionQueueFuture{Future: future}
}

func (a *stub) CreateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) *CreateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingConfiguration", input)
	return &CreateMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) CreateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) *CreateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingRuleSet", input)
	return &CreateMatchmakingRuleSetFuture{Future: future}
}

func (a *stub) CreatePlayerSession(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlayerSessionAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) *CreatePlayerSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSession", input)
	return &CreatePlayerSessionFuture{Future: future}
}

func (a *stub) CreatePlayerSessions(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlayerSessionsAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) *CreatePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSessions", input)
	return &CreatePlayerSessionsFuture{Future: future}
}

func (a *stub) CreateScript(ctx workflow.Context, input *gamelift.CreateScriptInput) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScriptAsync(ctx workflow.Context, input *gamelift.CreateScriptInput) *CreateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateScript", input)
	return &CreateScriptFuture{Future: future}
}

func (a *stub) CreateVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) *CreateVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringAuthorization", input)
	return &CreateVpcPeeringAuthorizationFuture{Future: future}
}

func (a *stub) CreateVpcPeeringConnection(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) *CreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringConnection", input)
	return &CreateVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *gamelift.DeleteAliasInput) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *gamelift.DeleteAliasInput) *DeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteAlias", input)
	return &DeleteAliasFuture{Future: future}
}

func (a *stub) DeleteBuild(ctx workflow.Context, input *gamelift.DeleteBuildInput) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBuildAsync(ctx workflow.Context, input *gamelift.DeleteBuildInput) *DeleteBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteBuild", input)
	return &DeleteBuildFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *gamelift.DeleteFleetInput) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *gamelift.DeleteFleetInput) *DeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteFleet", input)
	return &DeleteFleetFuture{Future: future}
}

func (a *stub) DeleteGameServerGroup(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGameServerGroupAsync(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) *DeleteGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameServerGroup", input)
	return &DeleteGameServerGroupFuture{Future: future}
}

func (a *stub) DeleteGameSessionQueue(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGameSessionQueueAsync(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) *DeleteGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameSessionQueue", input)
	return &DeleteGameSessionQueueFuture{Future: future}
}

func (a *stub) DeleteMatchmakingConfiguration(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) *DeleteMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingConfiguration", input)
	return &DeleteMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) DeleteMatchmakingRuleSet(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) *DeleteMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingRuleSet", input)
	return &DeleteMatchmakingRuleSetFuture{Future: future}
}

func (a *stub) DeleteScalingPolicy(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicyAsync(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) *DeleteScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScalingPolicy", input)
	return &DeleteScalingPolicyFuture{Future: future}
}

func (a *stub) DeleteScript(ctx workflow.Context, input *gamelift.DeleteScriptInput) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScriptAsync(ctx workflow.Context, input *gamelift.DeleteScriptInput) *DeleteScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScript", input)
	return &DeleteScriptFuture{Future: future}
}

func (a *stub) DeleteVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) *DeleteVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringAuthorization", input)
	return &DeleteVpcPeeringAuthorizationFuture{Future: future}
}

func (a *stub) DeleteVpcPeeringConnection(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) *DeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringConnection", input)
	return &DeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) DeregisterGameServer(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeregisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterGameServerAsync(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) *DeregisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeregisterGameServer", input)
	return &DeregisterGameServerFuture{Future: future}
}

func (a *stub) DescribeAlias(ctx workflow.Context, input *gamelift.DescribeAliasInput) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAliasAsync(ctx workflow.Context, input *gamelift.DescribeAliasInput) *DescribeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeAlias", input)
	return &DescribeAliasFuture{Future: future}
}

func (a *stub) DescribeBuild(ctx workflow.Context, input *gamelift.DescribeBuildInput) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBuildAsync(ctx workflow.Context, input *gamelift.DescribeBuildInput) *DescribeBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeBuild", input)
	return &DescribeBuildFuture{Future: future}
}

func (a *stub) DescribeEC2InstanceLimits(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeEC2InstanceLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEC2InstanceLimitsAsync(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) *DescribeEC2InstanceLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeEC2InstanceLimits", input)
	return &DescribeEC2InstanceLimitsFuture{Future: future}
}

func (a *stub) DescribeFleetAttributes(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetAttributesAsync(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) *DescribeFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetAttributes", input)
	return &DescribeFleetAttributesFuture{Future: future}
}

func (a *stub) DescribeFleetCapacity(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetCapacityAsync(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) *DescribeFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetCapacity", input)
	return &DescribeFleetCapacityFuture{Future: future}
}

func (a *stub) DescribeFleetEvents(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetEventsAsync(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) *DescribeFleetEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetEvents", input)
	return &DescribeFleetEventsFuture{Future: future}
}

func (a *stub) DescribeFleetPortSettings(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) *DescribeFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetPortSettings", input)
	return &DescribeFleetPortSettingsFuture{Future: future}
}

func (a *stub) DescribeFleetUtilization(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetUtilizationAsync(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) *DescribeFleetUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetUtilization", input)
	return &DescribeFleetUtilizationFuture{Future: future}
}

func (a *stub) DescribeGameServer(ctx workflow.Context, input *gamelift.DescribeGameServerInput) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInput) *DescribeGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServer", input)
	return &DescribeGameServerFuture{Future: future}
}

func (a *stub) DescribeGameServerGroup(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerGroupAsync(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) *DescribeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerGroup", input)
	return &DescribeGameServerGroupFuture{Future: future}
}

func (a *stub) DescribeGameServerInstances(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerInstancesAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) *DescribeGameServerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerInstances", input)
	return &DescribeGameServerInstancesFuture{Future: future}
}

func (a *stub) DescribeGameSessionDetails(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionDetailsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) *DescribeGameSessionDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionDetails", input)
	return &DescribeGameSessionDetailsFuture{Future: future}
}

func (a *stub) DescribeGameSessionPlacement(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) *DescribeGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionPlacement", input)
	return &DescribeGameSessionPlacementFuture{Future: future}
}

func (a *stub) DescribeGameSessionQueues(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionQueuesAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) *DescribeGameSessionQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionQueues", input)
	return &DescribeGameSessionQueuesFuture{Future: future}
}

func (a *stub) DescribeGameSessions(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) *DescribeGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessions", input)
	return &DescribeGameSessionsFuture{Future: future}
}

func (a *stub) DescribeInstances(ctx workflow.Context, input *gamelift.DescribeInstancesInput) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesAsync(ctx workflow.Context, input *gamelift.DescribeInstancesInput) *DescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeInstances", input)
	return &DescribeInstancesFuture{Future: future}
}

func (a *stub) DescribeMatchmaking(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) *DescribeMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmaking", input)
	return &DescribeMatchmakingFuture{Future: future}
}

func (a *stub) DescribeMatchmakingConfigurations(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingConfigurationsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) *DescribeMatchmakingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingConfigurations", input)
	return &DescribeMatchmakingConfigurationsFuture{Future: future}
}

func (a *stub) DescribeMatchmakingRuleSets(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingRuleSetsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) *DescribeMatchmakingRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingRuleSets", input)
	return &DescribeMatchmakingRuleSetsFuture{Future: future}
}

func (a *stub) DescribePlayerSessions(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlayerSessionsAsync(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) *DescribePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribePlayerSessions", input)
	return &DescribePlayerSessionsFuture{Future: future}
}

func (a *stub) DescribeRuntimeConfiguration(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) *DescribeRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeRuntimeConfiguration", input)
	return &DescribeRuntimeConfigurationFuture{Future: future}
}

func (a *stub) DescribeScalingPolicies(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScalingPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingPoliciesAsync(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) *DescribeScalingPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScalingPolicies", input)
	return &DescribeScalingPoliciesFuture{Future: future}
}

func (a *stub) DescribeScript(ctx workflow.Context, input *gamelift.DescribeScriptInput) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScriptAsync(ctx workflow.Context, input *gamelift.DescribeScriptInput) *DescribeScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScript", input)
	return &DescribeScriptFuture{Future: future}
}

func (a *stub) DescribeVpcPeeringAuthorizations(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcPeeringAuthorizationsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) *DescribeVpcPeeringAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringAuthorizations", input)
	return &DescribeVpcPeeringAuthorizationsFuture{Future: future}
}

func (a *stub) DescribeVpcPeeringConnections(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) *DescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringConnections", input)
	return &DescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *stub) GetGameSessionLogUrl(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-GetGameSessionLogUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGameSessionLogUrlAsync(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) *GetGameSessionLogUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-GetGameSessionLogUrl", input)
	return &GetGameSessionLogUrlFuture{Future: future}
}

func (a *stub) GetInstanceAccess(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-GetInstanceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAccessAsync(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) *GetInstanceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-GetInstanceAccess", input)
	return &GetInstanceAccessFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *gamelift.ListAliasesInput) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *gamelift.ListAliasesInput) *ListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListAliases", input)
	return &ListAliasesFuture{Future: future}
}

func (a *stub) ListBuilds(ctx workflow.Context, input *gamelift.ListBuildsInput) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsAsync(ctx workflow.Context, input *gamelift.ListBuildsInput) *ListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListBuilds", input)
	return &ListBuildsFuture{Future: future}
}

func (a *stub) ListFleets(ctx workflow.Context, input *gamelift.ListFleetsInput) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFleetsAsync(ctx workflow.Context, input *gamelift.ListFleetsInput) *ListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListFleets", input)
	return &ListFleetsFuture{Future: future}
}

func (a *stub) ListGameServerGroups(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServerGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGameServerGroupsAsync(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) *ListGameServerGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServerGroups", input)
	return &ListGameServerGroupsFuture{Future: future}
}

func (a *stub) ListGameServers(ctx workflow.Context, input *gamelift.ListGameServersInput) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGameServersAsync(ctx workflow.Context, input *gamelift.ListGameServersInput) *ListGameServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServers", input)
	return &ListGameServersFuture{Future: future}
}

func (a *stub) ListScripts(ctx workflow.Context, input *gamelift.ListScriptsInput) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListScripts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListScriptsAsync(ctx workflow.Context, input *gamelift.ListScriptsInput) *ListScriptsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListScripts", input)
	return &ListScriptsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutScalingPolicy(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScalingPolicyAsync(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) *PutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-PutScalingPolicy", input)
	return &PutScalingPolicyFuture{Future: future}
}

func (a *stub) RegisterGameServer(ctx workflow.Context, input *gamelift.RegisterGameServerInput) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-RegisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterGameServerAsync(ctx workflow.Context, input *gamelift.RegisterGameServerInput) *RegisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-RegisterGameServer", input)
	return &RegisterGameServerFuture{Future: future}
}

func (a *stub) RequestUploadCredentials(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-RequestUploadCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestUploadCredentialsAsync(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) *RequestUploadCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-RequestUploadCredentials", input)
	return &RequestUploadCredentialsFuture{Future: future}
}

func (a *stub) ResolveAlias(ctx workflow.Context, input *gamelift.ResolveAliasInput) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ResolveAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveAliasAsync(ctx workflow.Context, input *gamelift.ResolveAliasInput) *ResolveAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ResolveAlias", input)
	return &ResolveAliasFuture{Future: future}
}

func (a *stub) ResumeGameServerGroup(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ResumeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeGameServerGroupAsync(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) *ResumeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ResumeGameServerGroup", input)
	return &ResumeGameServerGroupFuture{Future: future}
}

func (a *stub) SearchGameSessions(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-SearchGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchGameSessionsAsync(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) *SearchGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-SearchGameSessions", input)
	return &SearchGameSessionsFuture{Future: future}
}

func (a *stub) StartFleetActions(ctx workflow.Context, input *gamelift.StartFleetActionsInput) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFleetActionsAsync(ctx workflow.Context, input *gamelift.StartFleetActionsInput) *StartFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartFleetActions", input)
	return &StartFleetActionsFuture{Future: future}
}

func (a *stub) StartGameSessionPlacement(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) *StartGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartGameSessionPlacement", input)
	return &StartGameSessionPlacementFuture{Future: future}
}

func (a *stub) StartMatchBackfill(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchBackfill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMatchBackfillAsync(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) *StartMatchBackfillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchBackfill", input)
	return &StartMatchBackfillFuture{Future: future}
}

func (a *stub) StartMatchmaking(ctx workflow.Context, input *gamelift.StartMatchmakingInput) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMatchmakingAsync(ctx workflow.Context, input *gamelift.StartMatchmakingInput) *StartMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchmaking", input)
	return &StartMatchmakingFuture{Future: future}
}

func (a *stub) StopFleetActions(ctx workflow.Context, input *gamelift.StopFleetActionsInput) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFleetActionsAsync(ctx workflow.Context, input *gamelift.StopFleetActionsInput) *StopFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopFleetActions", input)
	return &StopFleetActionsFuture{Future: future}
}

func (a *stub) StopGameSessionPlacement(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) *StopGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopGameSessionPlacement", input)
	return &StopGameSessionPlacementFuture{Future: future}
}

func (a *stub) StopMatchmaking(ctx workflow.Context, input *gamelift.StopMatchmakingInput) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMatchmakingAsync(ctx workflow.Context, input *gamelift.StopMatchmakingInput) *StopMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopMatchmaking", input)
	return &StopMatchmakingFuture{Future: future}
}

func (a *stub) SuspendGameServerGroup(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-SuspendGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SuspendGameServerGroupAsync(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) *SuspendGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-SuspendGameServerGroup", input)
	return &SuspendGameServerGroupFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *gamelift.TagResourceInput) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *gamelift.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *gamelift.UntagResourceInput) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *gamelift.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAlias(ctx workflow.Context, input *gamelift.UpdateAliasInput) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAliasAsync(ctx workflow.Context, input *gamelift.UpdateAliasInput) *UpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateAlias", input)
	return &UpdateAliasFuture{Future: future}
}

func (a *stub) UpdateBuild(ctx workflow.Context, input *gamelift.UpdateBuildInput) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBuildAsync(ctx workflow.Context, input *gamelift.UpdateBuildInput) *UpdateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateBuild", input)
	return &UpdateBuildFuture{Future: future}
}

func (a *stub) UpdateFleetAttributes(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetAttributesAsync(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) *UpdateFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetAttributes", input)
	return &UpdateFleetAttributesFuture{Future: future}
}

func (a *stub) UpdateFleetCapacity(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetCapacityAsync(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) *UpdateFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetCapacity", input)
	return &UpdateFleetCapacityFuture{Future: future}
}

func (a *stub) UpdateFleetPortSettings(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) *UpdateFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetPortSettings", input)
	return &UpdateFleetPortSettingsFuture{Future: future}
}

func (a *stub) UpdateGameServer(ctx workflow.Context, input *gamelift.UpdateGameServerInput) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameServerAsync(ctx workflow.Context, input *gamelift.UpdateGameServerInput) *UpdateGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServer", input)
	return &UpdateGameServerFuture{Future: future}
}

func (a *stub) UpdateGameServerGroup(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameServerGroupAsync(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) *UpdateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServerGroup", input)
	return &UpdateGameServerGroupFuture{Future: future}
}

func (a *stub) UpdateGameSession(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameSessionAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) *UpdateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSession", input)
	return &UpdateGameSessionFuture{Future: future}
}

func (a *stub) UpdateGameSessionQueue(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) *UpdateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSessionQueue", input)
	return &UpdateGameSessionQueueFuture{Future: future}
}

func (a *stub) UpdateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) *UpdateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateMatchmakingConfiguration", input)
	return &UpdateMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) UpdateRuntimeConfiguration(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) *UpdateRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateRuntimeConfiguration", input)
	return &UpdateRuntimeConfigurationFuture{Future: future}
}

func (a *stub) UpdateScript(ctx workflow.Context, input *gamelift.UpdateScriptInput) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateScriptAsync(ctx workflow.Context, input *gamelift.UpdateScriptInput) *UpdateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateScript", input)
	return &UpdateScriptFuture{Future: future}
}

func (a *stub) ValidateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ValidateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) *ValidateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ValidateMatchmakingRuleSet", input)
	return &ValidateMatchmakingRuleSetFuture{Future: future}
}
