// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package gameliftstub

import (
	"github.com/aws/aws-sdk-go/service/gamelift"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type GameLiftAcceptMatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftAcceptMatchFuture) Get(ctx workflow.Context) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftClaimGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftClaimGameServerFuture) Get(ctx workflow.Context) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateAliasFuture) Get(ctx workflow.Context) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateBuildFuture) Get(ctx workflow.Context) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateFleetFuture) Get(ctx workflow.Context) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateGameSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreatePlayerSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreatePlayerSessionFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreatePlayerSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreatePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateScriptFuture) Get(ctx workflow.Context) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateVpcPeeringAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftCreateVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftCreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteAliasFuture) Get(ctx workflow.Context) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteBuildFuture) Get(ctx workflow.Context) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteFleetFuture) Get(ctx workflow.Context) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteScriptFuture) Get(ctx workflow.Context) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteVpcPeeringAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteVpcPeeringAuthorizationFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeleteVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDeregisterGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDeregisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeAliasFuture) Get(ctx workflow.Context) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeBuildFuture) Get(ctx workflow.Context) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeEC2InstanceLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeEC2InstanceLimitsFuture) Get(ctx workflow.Context) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeFleetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeFleetCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeFleetEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeFleetEventsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeFleetPortSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeFleetUtilizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeFleetUtilizationFuture) Get(ctx workflow.Context) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameServerFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameServerInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameServerInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameSessionDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameSessionDetailsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameSessionQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameSessionQueuesFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeGameSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeInstancesFuture) Get(ctx workflow.Context) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeMatchmakingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeMatchmakingConfigurationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeMatchmakingRuleSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeMatchmakingRuleSetsFuture) Get(ctx workflow.Context) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribePlayerSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribePlayerSessionsFuture) Get(ctx workflow.Context) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeScalingPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeScalingPoliciesFuture) Get(ctx workflow.Context) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeScriptFuture) Get(ctx workflow.Context) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeVpcPeeringAuthorizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeVpcPeeringAuthorizationsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftDescribeVpcPeeringConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftDescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftGetGameSessionLogUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftGetGameSessionLogUrlFuture) Get(ctx workflow.Context) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftGetInstanceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftGetInstanceAccessFuture) Get(ctx workflow.Context) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListAliasesFuture) Get(ctx workflow.Context) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListBuildsFuture) Get(ctx workflow.Context) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListFleetsFuture) Get(ctx workflow.Context) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListGameServerGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListGameServerGroupsFuture) Get(ctx workflow.Context) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListGameServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListGameServersFuture) Get(ctx workflow.Context) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListScriptsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListScriptsFuture) Get(ctx workflow.Context) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftListTagsForResourceFuture) Get(ctx workflow.Context) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftPutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftPutScalingPolicyFuture) Get(ctx workflow.Context) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftRegisterGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftRegisterGameServerFuture) Get(ctx workflow.Context) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftRequestUploadCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftRequestUploadCredentialsFuture) Get(ctx workflow.Context) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftResolveAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftResolveAliasFuture) Get(ctx workflow.Context) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftResumeGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftResumeGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftSearchGameSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftSearchGameSessionsFuture) Get(ctx workflow.Context) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStartFleetActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStartFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStartGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStartGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStartMatchBackfillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStartMatchBackfillFuture) Get(ctx workflow.Context) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStartMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStartMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStopFleetActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStopFleetActionsFuture) Get(ctx workflow.Context) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStopGameSessionPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStopGameSessionPlacementFuture) Get(ctx workflow.Context) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftStopMatchmakingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftStopMatchmakingFuture) Get(ctx workflow.Context) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftSuspendGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftSuspendGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftTagResourceFuture) Get(ctx workflow.Context) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUntagResourceFuture) Get(ctx workflow.Context) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateAliasFuture) Get(ctx workflow.Context) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateBuildFuture) Get(ctx workflow.Context) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateFleetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateFleetAttributesFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateFleetCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateFleetCapacityFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateFleetPortSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateFleetPortSettingsFuture) Get(ctx workflow.Context) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateGameServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateGameServerFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateGameServerGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateGameServerGroupFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateGameSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateGameSessionFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateGameSessionQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateGameSessionQueueFuture) Get(ctx workflow.Context) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateMatchmakingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateMatchmakingConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateRuntimeConfigurationFuture) Get(ctx workflow.Context) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftUpdateScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftUpdateScriptFuture) Get(ctx workflow.Context) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GameLiftValidateMatchmakingRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GameLiftValidateMatchmakingRuleSetFuture) Get(ctx workflow.Context) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptMatch(ctx workflow.Context, input *gamelift.AcceptMatchInput) (*gamelift.AcceptMatchOutput, error) {
	var output gamelift.AcceptMatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-AcceptMatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptMatchAsync(ctx workflow.Context, input *gamelift.AcceptMatchInput) *GameLiftAcceptMatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-AcceptMatch", input)
	return &GameLiftAcceptMatchFuture{Future: future}
}

func (a *stub) ClaimGameServer(ctx workflow.Context, input *gamelift.ClaimGameServerInput) (*gamelift.ClaimGameServerOutput, error) {
	var output gamelift.ClaimGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ClaimGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClaimGameServerAsync(ctx workflow.Context, input *gamelift.ClaimGameServerInput) *GameLiftClaimGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ClaimGameServer", input)
	return &GameLiftClaimGameServerFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *gamelift.CreateAliasInput) (*gamelift.CreateAliasOutput, error) {
	var output gamelift.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *gamelift.CreateAliasInput) *GameLiftCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateAlias", input)
	return &GameLiftCreateAliasFuture{Future: future}
}

func (a *stub) CreateBuild(ctx workflow.Context, input *gamelift.CreateBuildInput) (*gamelift.CreateBuildOutput, error) {
	var output gamelift.CreateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBuildAsync(ctx workflow.Context, input *gamelift.CreateBuildInput) *GameLiftCreateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateBuild", input)
	return &GameLiftCreateBuildFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *gamelift.CreateFleetInput) (*gamelift.CreateFleetOutput, error) {
	var output gamelift.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *gamelift.CreateFleetInput) *GameLiftCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateFleet", input)
	return &GameLiftCreateFleetFuture{Future: future}
}

func (a *stub) CreateGameServerGroup(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) (*gamelift.CreateGameServerGroupOutput, error) {
	var output gamelift.CreateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameServerGroupAsync(ctx workflow.Context, input *gamelift.CreateGameServerGroupInput) *GameLiftCreateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameServerGroup", input)
	return &GameLiftCreateGameServerGroupFuture{Future: future}
}

func (a *stub) CreateGameSession(ctx workflow.Context, input *gamelift.CreateGameSessionInput) (*gamelift.CreateGameSessionOutput, error) {
	var output gamelift.CreateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameSessionAsync(ctx workflow.Context, input *gamelift.CreateGameSessionInput) *GameLiftCreateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSession", input)
	return &GameLiftCreateGameSessionFuture{Future: future}
}

func (a *stub) CreateGameSessionQueue(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) (*gamelift.CreateGameSessionQueueOutput, error) {
	var output gamelift.CreateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.CreateGameSessionQueueInput) *GameLiftCreateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateGameSessionQueue", input)
	return &GameLiftCreateGameSessionQueueFuture{Future: future}
}

func (a *stub) CreateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) (*gamelift.CreateMatchmakingConfigurationOutput, error) {
	var output gamelift.CreateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingConfigurationInput) *GameLiftCreateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingConfiguration", input)
	return &GameLiftCreateMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) CreateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) (*gamelift.CreateMatchmakingRuleSetOutput, error) {
	var output gamelift.CreateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.CreateMatchmakingRuleSetInput) *GameLiftCreateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateMatchmakingRuleSet", input)
	return &GameLiftCreateMatchmakingRuleSetFuture{Future: future}
}

func (a *stub) CreatePlayerSession(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) (*gamelift.CreatePlayerSessionOutput, error) {
	var output gamelift.CreatePlayerSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlayerSessionAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionInput) *GameLiftCreatePlayerSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSession", input)
	return &GameLiftCreatePlayerSessionFuture{Future: future}
}

func (a *stub) CreatePlayerSessions(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) (*gamelift.CreatePlayerSessionsOutput, error) {
	var output gamelift.CreatePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlayerSessionsAsync(ctx workflow.Context, input *gamelift.CreatePlayerSessionsInput) *GameLiftCreatePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreatePlayerSessions", input)
	return &GameLiftCreatePlayerSessionsFuture{Future: future}
}

func (a *stub) CreateScript(ctx workflow.Context, input *gamelift.CreateScriptInput) (*gamelift.CreateScriptOutput, error) {
	var output gamelift.CreateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScriptAsync(ctx workflow.Context, input *gamelift.CreateScriptInput) *GameLiftCreateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateScript", input)
	return &GameLiftCreateScriptFuture{Future: future}
}

func (a *stub) CreateVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {
	var output gamelift.CreateVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringAuthorizationInput) *GameLiftCreateVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringAuthorization", input)
	return &GameLiftCreateVpcPeeringAuthorizationFuture{Future: future}
}

func (a *stub) CreateVpcPeeringConnection(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) (*gamelift.CreateVpcPeeringConnectionOutput, error) {
	var output gamelift.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.CreateVpcPeeringConnectionInput) *GameLiftCreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-CreateVpcPeeringConnection", input)
	return &GameLiftCreateVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *gamelift.DeleteAliasInput) (*gamelift.DeleteAliasOutput, error) {
	var output gamelift.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *gamelift.DeleteAliasInput) *GameLiftDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteAlias", input)
	return &GameLiftDeleteAliasFuture{Future: future}
}

func (a *stub) DeleteBuild(ctx workflow.Context, input *gamelift.DeleteBuildInput) (*gamelift.DeleteBuildOutput, error) {
	var output gamelift.DeleteBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBuildAsync(ctx workflow.Context, input *gamelift.DeleteBuildInput) *GameLiftDeleteBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteBuild", input)
	return &GameLiftDeleteBuildFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *gamelift.DeleteFleetInput) (*gamelift.DeleteFleetOutput, error) {
	var output gamelift.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *gamelift.DeleteFleetInput) *GameLiftDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteFleet", input)
	return &GameLiftDeleteFleetFuture{Future: future}
}

func (a *stub) DeleteGameServerGroup(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) (*gamelift.DeleteGameServerGroupOutput, error) {
	var output gamelift.DeleteGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGameServerGroupAsync(ctx workflow.Context, input *gamelift.DeleteGameServerGroupInput) *GameLiftDeleteGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameServerGroup", input)
	return &GameLiftDeleteGameServerGroupFuture{Future: future}
}

func (a *stub) DeleteGameSessionQueue(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) (*gamelift.DeleteGameSessionQueueOutput, error) {
	var output gamelift.DeleteGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGameSessionQueueAsync(ctx workflow.Context, input *gamelift.DeleteGameSessionQueueInput) *GameLiftDeleteGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteGameSessionQueue", input)
	return &GameLiftDeleteGameSessionQueueFuture{Future: future}
}

func (a *stub) DeleteMatchmakingConfiguration(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {
	var output gamelift.DeleteMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingConfigurationInput) *GameLiftDeleteMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingConfiguration", input)
	return &GameLiftDeleteMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) DeleteMatchmakingRuleSet(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {
	var output gamelift.DeleteMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.DeleteMatchmakingRuleSetInput) *GameLiftDeleteMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteMatchmakingRuleSet", input)
	return &GameLiftDeleteMatchmakingRuleSetFuture{Future: future}
}

func (a *stub) DeleteScalingPolicy(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) (*gamelift.DeleteScalingPolicyOutput, error) {
	var output gamelift.DeleteScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicyAsync(ctx workflow.Context, input *gamelift.DeleteScalingPolicyInput) *GameLiftDeleteScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScalingPolicy", input)
	return &GameLiftDeleteScalingPolicyFuture{Future: future}
}

func (a *stub) DeleteScript(ctx workflow.Context, input *gamelift.DeleteScriptInput) (*gamelift.DeleteScriptOutput, error) {
	var output gamelift.DeleteScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScriptAsync(ctx workflow.Context, input *gamelift.DeleteScriptInput) *GameLiftDeleteScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteScript", input)
	return &GameLiftDeleteScriptFuture{Future: future}
}

func (a *stub) DeleteVpcPeeringAuthorization(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {
	var output gamelift.DeleteVpcPeeringAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcPeeringAuthorizationAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringAuthorizationInput) *GameLiftDeleteVpcPeeringAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringAuthorization", input)
	return &GameLiftDeleteVpcPeeringAuthorizationFuture{Future: future}
}

func (a *stub) DeleteVpcPeeringConnection(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {
	var output gamelift.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *gamelift.DeleteVpcPeeringConnectionInput) *GameLiftDeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeleteVpcPeeringConnection", input)
	return &GameLiftDeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) DeregisterGameServer(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) (*gamelift.DeregisterGameServerOutput, error) {
	var output gamelift.DeregisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DeregisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterGameServerAsync(ctx workflow.Context, input *gamelift.DeregisterGameServerInput) *GameLiftDeregisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DeregisterGameServer", input)
	return &GameLiftDeregisterGameServerFuture{Future: future}
}

func (a *stub) DescribeAlias(ctx workflow.Context, input *gamelift.DescribeAliasInput) (*gamelift.DescribeAliasOutput, error) {
	var output gamelift.DescribeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAliasAsync(ctx workflow.Context, input *gamelift.DescribeAliasInput) *GameLiftDescribeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeAlias", input)
	return &GameLiftDescribeAliasFuture{Future: future}
}

func (a *stub) DescribeBuild(ctx workflow.Context, input *gamelift.DescribeBuildInput) (*gamelift.DescribeBuildOutput, error) {
	var output gamelift.DescribeBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBuildAsync(ctx workflow.Context, input *gamelift.DescribeBuildInput) *GameLiftDescribeBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeBuild", input)
	return &GameLiftDescribeBuildFuture{Future: future}
}

func (a *stub) DescribeEC2InstanceLimits(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {
	var output gamelift.DescribeEC2InstanceLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeEC2InstanceLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEC2InstanceLimitsAsync(ctx workflow.Context, input *gamelift.DescribeEC2InstanceLimitsInput) *GameLiftDescribeEC2InstanceLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeEC2InstanceLimits", input)
	return &GameLiftDescribeEC2InstanceLimitsFuture{Future: future}
}

func (a *stub) DescribeFleetAttributes(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) (*gamelift.DescribeFleetAttributesOutput, error) {
	var output gamelift.DescribeFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetAttributesAsync(ctx workflow.Context, input *gamelift.DescribeFleetAttributesInput) *GameLiftDescribeFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetAttributes", input)
	return &GameLiftDescribeFleetAttributesFuture{Future: future}
}

func (a *stub) DescribeFleetCapacity(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) (*gamelift.DescribeFleetCapacityOutput, error) {
	var output gamelift.DescribeFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetCapacityAsync(ctx workflow.Context, input *gamelift.DescribeFleetCapacityInput) *GameLiftDescribeFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetCapacity", input)
	return &GameLiftDescribeFleetCapacityFuture{Future: future}
}

func (a *stub) DescribeFleetEvents(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) (*gamelift.DescribeFleetEventsOutput, error) {
	var output gamelift.DescribeFleetEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetEventsAsync(ctx workflow.Context, input *gamelift.DescribeFleetEventsInput) *GameLiftDescribeFleetEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetEvents", input)
	return &GameLiftDescribeFleetEventsFuture{Future: future}
}

func (a *stub) DescribeFleetPortSettings(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) (*gamelift.DescribeFleetPortSettingsOutput, error) {
	var output gamelift.DescribeFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.DescribeFleetPortSettingsInput) *GameLiftDescribeFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetPortSettings", input)
	return &GameLiftDescribeFleetPortSettingsFuture{Future: future}
}

func (a *stub) DescribeFleetUtilization(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) (*gamelift.DescribeFleetUtilizationOutput, error) {
	var output gamelift.DescribeFleetUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetUtilizationAsync(ctx workflow.Context, input *gamelift.DescribeFleetUtilizationInput) *GameLiftDescribeFleetUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeFleetUtilization", input)
	return &GameLiftDescribeFleetUtilizationFuture{Future: future}
}

func (a *stub) DescribeGameServer(ctx workflow.Context, input *gamelift.DescribeGameServerInput) (*gamelift.DescribeGameServerOutput, error) {
	var output gamelift.DescribeGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInput) *GameLiftDescribeGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServer", input)
	return &GameLiftDescribeGameServerFuture{Future: future}
}

func (a *stub) DescribeGameServerGroup(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) (*gamelift.DescribeGameServerGroupOutput, error) {
	var output gamelift.DescribeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerGroupAsync(ctx workflow.Context, input *gamelift.DescribeGameServerGroupInput) *GameLiftDescribeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerGroup", input)
	return &GameLiftDescribeGameServerGroupFuture{Future: future}
}

func (a *stub) DescribeGameServerInstances(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) (*gamelift.DescribeGameServerInstancesOutput, error) {
	var output gamelift.DescribeGameServerInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameServerInstancesAsync(ctx workflow.Context, input *gamelift.DescribeGameServerInstancesInput) *GameLiftDescribeGameServerInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameServerInstances", input)
	return &GameLiftDescribeGameServerInstancesFuture{Future: future}
}

func (a *stub) DescribeGameSessionDetails(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) (*gamelift.DescribeGameSessionDetailsOutput, error) {
	var output gamelift.DescribeGameSessionDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionDetailsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionDetailsInput) *GameLiftDescribeGameSessionDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionDetails", input)
	return &GameLiftDescribeGameSessionDetailsFuture{Future: future}
}

func (a *stub) DescribeGameSessionPlacement(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) (*gamelift.DescribeGameSessionPlacementOutput, error) {
	var output gamelift.DescribeGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionPlacementInput) *GameLiftDescribeGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionPlacement", input)
	return &GameLiftDescribeGameSessionPlacementFuture{Future: future}
}

func (a *stub) DescribeGameSessionQueues(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) (*gamelift.DescribeGameSessionQueuesOutput, error) {
	var output gamelift.DescribeGameSessionQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionQueuesAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionQueuesInput) *GameLiftDescribeGameSessionQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessionQueues", input)
	return &GameLiftDescribeGameSessionQueuesFuture{Future: future}
}

func (a *stub) DescribeGameSessions(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) (*gamelift.DescribeGameSessionsOutput, error) {
	var output gamelift.DescribeGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGameSessionsAsync(ctx workflow.Context, input *gamelift.DescribeGameSessionsInput) *GameLiftDescribeGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeGameSessions", input)
	return &GameLiftDescribeGameSessionsFuture{Future: future}
}

func (a *stub) DescribeInstances(ctx workflow.Context, input *gamelift.DescribeInstancesInput) (*gamelift.DescribeInstancesOutput, error) {
	var output gamelift.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesAsync(ctx workflow.Context, input *gamelift.DescribeInstancesInput) *GameLiftDescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeInstances", input)
	return &GameLiftDescribeInstancesFuture{Future: future}
}

func (a *stub) DescribeMatchmaking(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) (*gamelift.DescribeMatchmakingOutput, error) {
	var output gamelift.DescribeMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingInput) *GameLiftDescribeMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmaking", input)
	return &GameLiftDescribeMatchmakingFuture{Future: future}
}

func (a *stub) DescribeMatchmakingConfigurations(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {
	var output gamelift.DescribeMatchmakingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingConfigurationsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingConfigurationsInput) *GameLiftDescribeMatchmakingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingConfigurations", input)
	return &GameLiftDescribeMatchmakingConfigurationsFuture{Future: future}
}

func (a *stub) DescribeMatchmakingRuleSets(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {
	var output gamelift.DescribeMatchmakingRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMatchmakingRuleSetsAsync(ctx workflow.Context, input *gamelift.DescribeMatchmakingRuleSetsInput) *GameLiftDescribeMatchmakingRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeMatchmakingRuleSets", input)
	return &GameLiftDescribeMatchmakingRuleSetsFuture{Future: future}
}

func (a *stub) DescribePlayerSessions(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) (*gamelift.DescribePlayerSessionsOutput, error) {
	var output gamelift.DescribePlayerSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribePlayerSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlayerSessionsAsync(ctx workflow.Context, input *gamelift.DescribePlayerSessionsInput) *GameLiftDescribePlayerSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribePlayerSessions", input)
	return &GameLiftDescribePlayerSessionsFuture{Future: future}
}

func (a *stub) DescribeRuntimeConfiguration(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	var output gamelift.DescribeRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.DescribeRuntimeConfigurationInput) *GameLiftDescribeRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeRuntimeConfiguration", input)
	return &GameLiftDescribeRuntimeConfigurationFuture{Future: future}
}

func (a *stub) DescribeScalingPolicies(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) (*gamelift.DescribeScalingPoliciesOutput, error) {
	var output gamelift.DescribeScalingPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScalingPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingPoliciesAsync(ctx workflow.Context, input *gamelift.DescribeScalingPoliciesInput) *GameLiftDescribeScalingPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScalingPolicies", input)
	return &GameLiftDescribeScalingPoliciesFuture{Future: future}
}

func (a *stub) DescribeScript(ctx workflow.Context, input *gamelift.DescribeScriptInput) (*gamelift.DescribeScriptOutput, error) {
	var output gamelift.DescribeScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScriptAsync(ctx workflow.Context, input *gamelift.DescribeScriptInput) *GameLiftDescribeScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeScript", input)
	return &GameLiftDescribeScriptFuture{Future: future}
}

func (a *stub) DescribeVpcPeeringAuthorizations(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {
	var output gamelift.DescribeVpcPeeringAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcPeeringAuthorizationsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringAuthorizationsInput) *GameLiftDescribeVpcPeeringAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringAuthorizations", input)
	return &GameLiftDescribeVpcPeeringAuthorizationsFuture{Future: future}
}

func (a *stub) DescribeVpcPeeringConnections(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {
	var output gamelift.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *gamelift.DescribeVpcPeeringConnectionsInput) *GameLiftDescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-DescribeVpcPeeringConnections", input)
	return &GameLiftDescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *stub) GetGameSessionLogUrl(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) (*gamelift.GetGameSessionLogUrlOutput, error) {
	var output gamelift.GetGameSessionLogUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-GetGameSessionLogUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGameSessionLogUrlAsync(ctx workflow.Context, input *gamelift.GetGameSessionLogUrlInput) *GameLiftGetGameSessionLogUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-GetGameSessionLogUrl", input)
	return &GameLiftGetGameSessionLogUrlFuture{Future: future}
}

func (a *stub) GetInstanceAccess(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) (*gamelift.GetInstanceAccessOutput, error) {
	var output gamelift.GetInstanceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-GetInstanceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAccessAsync(ctx workflow.Context, input *gamelift.GetInstanceAccessInput) *GameLiftGetInstanceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-GetInstanceAccess", input)
	return &GameLiftGetInstanceAccessFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *gamelift.ListAliasesInput) (*gamelift.ListAliasesOutput, error) {
	var output gamelift.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *gamelift.ListAliasesInput) *GameLiftListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListAliases", input)
	return &GameLiftListAliasesFuture{Future: future}
}

func (a *stub) ListBuilds(ctx workflow.Context, input *gamelift.ListBuildsInput) (*gamelift.ListBuildsOutput, error) {
	var output gamelift.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsAsync(ctx workflow.Context, input *gamelift.ListBuildsInput) *GameLiftListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListBuilds", input)
	return &GameLiftListBuildsFuture{Future: future}
}

func (a *stub) ListFleets(ctx workflow.Context, input *gamelift.ListFleetsInput) (*gamelift.ListFleetsOutput, error) {
	var output gamelift.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFleetsAsync(ctx workflow.Context, input *gamelift.ListFleetsInput) *GameLiftListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListFleets", input)
	return &GameLiftListFleetsFuture{Future: future}
}

func (a *stub) ListGameServerGroups(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) (*gamelift.ListGameServerGroupsOutput, error) {
	var output gamelift.ListGameServerGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServerGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGameServerGroupsAsync(ctx workflow.Context, input *gamelift.ListGameServerGroupsInput) *GameLiftListGameServerGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServerGroups", input)
	return &GameLiftListGameServerGroupsFuture{Future: future}
}

func (a *stub) ListGameServers(ctx workflow.Context, input *gamelift.ListGameServersInput) (*gamelift.ListGameServersOutput, error) {
	var output gamelift.ListGameServersOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGameServersAsync(ctx workflow.Context, input *gamelift.ListGameServersInput) *GameLiftListGameServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListGameServers", input)
	return &GameLiftListGameServersFuture{Future: future}
}

func (a *stub) ListScripts(ctx workflow.Context, input *gamelift.ListScriptsInput) (*gamelift.ListScriptsOutput, error) {
	var output gamelift.ListScriptsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListScripts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListScriptsAsync(ctx workflow.Context, input *gamelift.ListScriptsInput) *GameLiftListScriptsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListScripts", input)
	return &GameLiftListScriptsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) (*gamelift.ListTagsForResourceOutput, error) {
	var output gamelift.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *gamelift.ListTagsForResourceInput) *GameLiftListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ListTagsForResource", input)
	return &GameLiftListTagsForResourceFuture{Future: future}
}

func (a *stub) PutScalingPolicy(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) (*gamelift.PutScalingPolicyOutput, error) {
	var output gamelift.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScalingPolicyAsync(ctx workflow.Context, input *gamelift.PutScalingPolicyInput) *GameLiftPutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-PutScalingPolicy", input)
	return &GameLiftPutScalingPolicyFuture{Future: future}
}

func (a *stub) RegisterGameServer(ctx workflow.Context, input *gamelift.RegisterGameServerInput) (*gamelift.RegisterGameServerOutput, error) {
	var output gamelift.RegisterGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-RegisterGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterGameServerAsync(ctx workflow.Context, input *gamelift.RegisterGameServerInput) *GameLiftRegisterGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-RegisterGameServer", input)
	return &GameLiftRegisterGameServerFuture{Future: future}
}

func (a *stub) RequestUploadCredentials(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) (*gamelift.RequestUploadCredentialsOutput, error) {
	var output gamelift.RequestUploadCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-RequestUploadCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestUploadCredentialsAsync(ctx workflow.Context, input *gamelift.RequestUploadCredentialsInput) *GameLiftRequestUploadCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-RequestUploadCredentials", input)
	return &GameLiftRequestUploadCredentialsFuture{Future: future}
}

func (a *stub) ResolveAlias(ctx workflow.Context, input *gamelift.ResolveAliasInput) (*gamelift.ResolveAliasOutput, error) {
	var output gamelift.ResolveAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ResolveAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveAliasAsync(ctx workflow.Context, input *gamelift.ResolveAliasInput) *GameLiftResolveAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ResolveAlias", input)
	return &GameLiftResolveAliasFuture{Future: future}
}

func (a *stub) ResumeGameServerGroup(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) (*gamelift.ResumeGameServerGroupOutput, error) {
	var output gamelift.ResumeGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ResumeGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeGameServerGroupAsync(ctx workflow.Context, input *gamelift.ResumeGameServerGroupInput) *GameLiftResumeGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ResumeGameServerGroup", input)
	return &GameLiftResumeGameServerGroupFuture{Future: future}
}

func (a *stub) SearchGameSessions(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) (*gamelift.SearchGameSessionsOutput, error) {
	var output gamelift.SearchGameSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-SearchGameSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchGameSessionsAsync(ctx workflow.Context, input *gamelift.SearchGameSessionsInput) *GameLiftSearchGameSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-SearchGameSessions", input)
	return &GameLiftSearchGameSessionsFuture{Future: future}
}

func (a *stub) StartFleetActions(ctx workflow.Context, input *gamelift.StartFleetActionsInput) (*gamelift.StartFleetActionsOutput, error) {
	var output gamelift.StartFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFleetActionsAsync(ctx workflow.Context, input *gamelift.StartFleetActionsInput) *GameLiftStartFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartFleetActions", input)
	return &GameLiftStartFleetActionsFuture{Future: future}
}

func (a *stub) StartGameSessionPlacement(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) (*gamelift.StartGameSessionPlacementOutput, error) {
	var output gamelift.StartGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StartGameSessionPlacementInput) *GameLiftStartGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartGameSessionPlacement", input)
	return &GameLiftStartGameSessionPlacementFuture{Future: future}
}

func (a *stub) StartMatchBackfill(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) (*gamelift.StartMatchBackfillOutput, error) {
	var output gamelift.StartMatchBackfillOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchBackfill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMatchBackfillAsync(ctx workflow.Context, input *gamelift.StartMatchBackfillInput) *GameLiftStartMatchBackfillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchBackfill", input)
	return &GameLiftStartMatchBackfillFuture{Future: future}
}

func (a *stub) StartMatchmaking(ctx workflow.Context, input *gamelift.StartMatchmakingInput) (*gamelift.StartMatchmakingOutput, error) {
	var output gamelift.StartMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMatchmakingAsync(ctx workflow.Context, input *gamelift.StartMatchmakingInput) *GameLiftStartMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StartMatchmaking", input)
	return &GameLiftStartMatchmakingFuture{Future: future}
}

func (a *stub) StopFleetActions(ctx workflow.Context, input *gamelift.StopFleetActionsInput) (*gamelift.StopFleetActionsOutput, error) {
	var output gamelift.StopFleetActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopFleetActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFleetActionsAsync(ctx workflow.Context, input *gamelift.StopFleetActionsInput) *GameLiftStopFleetActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopFleetActions", input)
	return &GameLiftStopFleetActionsFuture{Future: future}
}

func (a *stub) StopGameSessionPlacement(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) (*gamelift.StopGameSessionPlacementOutput, error) {
	var output gamelift.StopGameSessionPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopGameSessionPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopGameSessionPlacementAsync(ctx workflow.Context, input *gamelift.StopGameSessionPlacementInput) *GameLiftStopGameSessionPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopGameSessionPlacement", input)
	return &GameLiftStopGameSessionPlacementFuture{Future: future}
}

func (a *stub) StopMatchmaking(ctx workflow.Context, input *gamelift.StopMatchmakingInput) (*gamelift.StopMatchmakingOutput, error) {
	var output gamelift.StopMatchmakingOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-StopMatchmaking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMatchmakingAsync(ctx workflow.Context, input *gamelift.StopMatchmakingInput) *GameLiftStopMatchmakingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-StopMatchmaking", input)
	return &GameLiftStopMatchmakingFuture{Future: future}
}

func (a *stub) SuspendGameServerGroup(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) (*gamelift.SuspendGameServerGroupOutput, error) {
	var output gamelift.SuspendGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-SuspendGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SuspendGameServerGroupAsync(ctx workflow.Context, input *gamelift.SuspendGameServerGroupInput) *GameLiftSuspendGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-SuspendGameServerGroup", input)
	return &GameLiftSuspendGameServerGroupFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *gamelift.TagResourceInput) (*gamelift.TagResourceOutput, error) {
	var output gamelift.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *gamelift.TagResourceInput) *GameLiftTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-TagResource", input)
	return &GameLiftTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *gamelift.UntagResourceInput) (*gamelift.UntagResourceOutput, error) {
	var output gamelift.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *gamelift.UntagResourceInput) *GameLiftUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UntagResource", input)
	return &GameLiftUntagResourceFuture{Future: future}
}

func (a *stub) UpdateAlias(ctx workflow.Context, input *gamelift.UpdateAliasInput) (*gamelift.UpdateAliasOutput, error) {
	var output gamelift.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAliasAsync(ctx workflow.Context, input *gamelift.UpdateAliasInput) *GameLiftUpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateAlias", input)
	return &GameLiftUpdateAliasFuture{Future: future}
}

func (a *stub) UpdateBuild(ctx workflow.Context, input *gamelift.UpdateBuildInput) (*gamelift.UpdateBuildOutput, error) {
	var output gamelift.UpdateBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBuildAsync(ctx workflow.Context, input *gamelift.UpdateBuildInput) *GameLiftUpdateBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateBuild", input)
	return &GameLiftUpdateBuildFuture{Future: future}
}

func (a *stub) UpdateFleetAttributes(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) (*gamelift.UpdateFleetAttributesOutput, error) {
	var output gamelift.UpdateFleetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetAttributesAsync(ctx workflow.Context, input *gamelift.UpdateFleetAttributesInput) *GameLiftUpdateFleetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetAttributes", input)
	return &GameLiftUpdateFleetAttributesFuture{Future: future}
}

func (a *stub) UpdateFleetCapacity(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) (*gamelift.UpdateFleetCapacityOutput, error) {
	var output gamelift.UpdateFleetCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetCapacityAsync(ctx workflow.Context, input *gamelift.UpdateFleetCapacityInput) *GameLiftUpdateFleetCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetCapacity", input)
	return &GameLiftUpdateFleetCapacityFuture{Future: future}
}

func (a *stub) UpdateFleetPortSettings(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	var output gamelift.UpdateFleetPortSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetPortSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetPortSettingsAsync(ctx workflow.Context, input *gamelift.UpdateFleetPortSettingsInput) *GameLiftUpdateFleetPortSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateFleetPortSettings", input)
	return &GameLiftUpdateFleetPortSettingsFuture{Future: future}
}

func (a *stub) UpdateGameServer(ctx workflow.Context, input *gamelift.UpdateGameServerInput) (*gamelift.UpdateGameServerOutput, error) {
	var output gamelift.UpdateGameServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameServerAsync(ctx workflow.Context, input *gamelift.UpdateGameServerInput) *GameLiftUpdateGameServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServer", input)
	return &GameLiftUpdateGameServerFuture{Future: future}
}

func (a *stub) UpdateGameServerGroup(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) (*gamelift.UpdateGameServerGroupOutput, error) {
	var output gamelift.UpdateGameServerGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServerGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameServerGroupAsync(ctx workflow.Context, input *gamelift.UpdateGameServerGroupInput) *GameLiftUpdateGameServerGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameServerGroup", input)
	return &GameLiftUpdateGameServerGroupFuture{Future: future}
}

func (a *stub) UpdateGameSession(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) (*gamelift.UpdateGameSessionOutput, error) {
	var output gamelift.UpdateGameSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameSessionAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionInput) *GameLiftUpdateGameSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSession", input)
	return &GameLiftUpdateGameSessionFuture{Future: future}
}

func (a *stub) UpdateGameSessionQueue(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) (*gamelift.UpdateGameSessionQueueOutput, error) {
	var output gamelift.UpdateGameSessionQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSessionQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGameSessionQueueAsync(ctx workflow.Context, input *gamelift.UpdateGameSessionQueueInput) *GameLiftUpdateGameSessionQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateGameSessionQueue", input)
	return &GameLiftUpdateGameSessionQueueFuture{Future: future}
}

func (a *stub) UpdateMatchmakingConfiguration(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {
	var output gamelift.UpdateMatchmakingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateMatchmakingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMatchmakingConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateMatchmakingConfigurationInput) *GameLiftUpdateMatchmakingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateMatchmakingConfiguration", input)
	return &GameLiftUpdateMatchmakingConfigurationFuture{Future: future}
}

func (a *stub) UpdateRuntimeConfiguration(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) (*gamelift.UpdateRuntimeConfigurationOutput, error) {
	var output gamelift.UpdateRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuntimeConfigurationAsync(ctx workflow.Context, input *gamelift.UpdateRuntimeConfigurationInput) *GameLiftUpdateRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateRuntimeConfiguration", input)
	return &GameLiftUpdateRuntimeConfigurationFuture{Future: future}
}

func (a *stub) UpdateScript(ctx workflow.Context, input *gamelift.UpdateScriptInput) (*gamelift.UpdateScriptOutput, error) {
	var output gamelift.UpdateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateScriptAsync(ctx workflow.Context, input *gamelift.UpdateScriptInput) *GameLiftUpdateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-UpdateScript", input)
	return &GameLiftUpdateScriptFuture{Future: future}
}

func (a *stub) ValidateMatchmakingRuleSet(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {
	var output gamelift.ValidateMatchmakingRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-gamelift-ValidateMatchmakingRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateMatchmakingRuleSetAsync(ctx workflow.Context, input *gamelift.ValidateMatchmakingRuleSetInput) *GameLiftValidateMatchmakingRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-gamelift-ValidateMatchmakingRuleSet", input)
	return &GameLiftValidateMatchmakingRuleSetFuture{Future: future}
}
