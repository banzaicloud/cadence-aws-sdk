// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudformationstub

import (
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelUpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelUpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ContinueUpdateRollbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ContinueUpdateRollbackFuture) Get(ctx workflow.Context) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStackFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStackFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountLimitsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackDriftDetectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackDriftDetectionStatusFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackEventsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackInstanceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackResourceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackResourceDriftsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackResourceDriftsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackSetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStacksFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTypeFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTypeRegistrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTypeRegistrationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectStackDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectStackDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectStackResourceDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectStackResourceDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectStackSetDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectStackSetDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EstimateTemplateCostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EstimateTemplateCostFuture) Get(ctx workflow.Context) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStackPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTemplateFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTemplateSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTemplateSummaryFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChangeSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChangeSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListExportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListExportsFuture) Get(ctx workflow.Context) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImportsFuture) Get(ctx workflow.Context) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackSetOperationResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackSetOperationResultsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackSetOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackSetOperationsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStacksFuture) Get(ctx workflow.Context) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypeRegistrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypeRegistrationsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypeVersionsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypesFuture) Get(ctx workflow.Context) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecordHandlerProgressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecordHandlerProgressFuture) Get(ctx workflow.Context) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetStackPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetTypeDefaultVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetTypeDefaultVersionFuture) Get(ctx workflow.Context) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SignalResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SignalResourceFuture) Get(ctx workflow.Context) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopStackSetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTerminationProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTerminationProtectionFuture) Get(ctx workflow.Context) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateTemplateFuture) Get(ctx workflow.Context) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelUpdateStack(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CancelUpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelUpdateStackAsync(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) *CancelUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CancelUpdateStack", input)
	return &CancelUpdateStackFuture{Future: future}
}

func (a *stub) ContinueUpdateRollback(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ContinueUpdateRollback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ContinueUpdateRollbackAsync(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) *ContinueUpdateRollbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ContinueUpdateRollback", input)
	return &ContinueUpdateRollbackFuture{Future: future}
}

func (a *stub) CreateChangeSet(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChangeSetAsync(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) *CreateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateChangeSet", input)
	return &CreateChangeSetFuture{Future: future}
}

func (a *stub) CreateStack(ctx workflow.Context, input *cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackAsync(ctx workflow.Context, input *cloudformation.CreateStackInput) *CreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStack", input)
	return &CreateStackFuture{Future: future}
}

func (a *stub) CreateStackInstances(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackInstancesAsync(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) *CreateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackInstances", input)
	return &CreateStackInstancesFuture{Future: future}
}

func (a *stub) CreateStackSet(ctx workflow.Context, input *cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackSetAsync(ctx workflow.Context, input *cloudformation.CreateStackSetInput) *CreateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackSet", input)
	return &CreateStackSetFuture{Future: future}
}

func (a *stub) DeleteChangeSet(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChangeSetAsync(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) *DeleteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteChangeSet", input)
	return &DeleteChangeSetFuture{Future: future}
}

func (a *stub) DeleteStack(ctx workflow.Context, input *cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackAsync(ctx workflow.Context, input *cloudformation.DeleteStackInput) *DeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStack", input)
	return &DeleteStackFuture{Future: future}
}

func (a *stub) DeleteStackInstances(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackInstancesAsync(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) *DeleteStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackInstances", input)
	return &DeleteStackInstancesFuture{Future: future}
}

func (a *stub) DeleteStackSet(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackSetAsync(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) *DeleteStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackSet", input)
	return &DeleteStackSetFuture{Future: future}
}

func (a *stub) DeregisterType(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeregisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTypeAsync(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) *DeregisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeregisterType", input)
	return &DeregisterTypeFuture{Future: future}
}

func (a *stub) DescribeAccountLimits(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountLimitsAsync(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) *DescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeAccountLimits", input)
	return &DescribeAccountLimitsFuture{Future: future}
}

func (a *stub) DescribeChangeSet(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChangeSetAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *DescribeChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeChangeSet", input)
	return &DescribeChangeSetFuture{Future: future}
}

func (a *stub) DescribeStackDriftDetectionStatus(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackDriftDetectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackDriftDetectionStatusAsync(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) *DescribeStackDriftDetectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackDriftDetectionStatus", input)
	return &DescribeStackDriftDetectionStatusFuture{Future: future}
}

func (a *stub) DescribeStackEvents(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackEventsAsync(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) *DescribeStackEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackEvents", input)
	return &DescribeStackEventsFuture{Future: future}
}

func (a *stub) DescribeStackInstance(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackInstanceAsync(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) *DescribeStackInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackInstance", input)
	return &DescribeStackInstanceFuture{Future: future}
}

func (a *stub) DescribeStackResource(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourceAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) *DescribeStackResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResource", input)
	return &DescribeStackResourceFuture{Future: future}
}

func (a *stub) DescribeStackResourceDrifts(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResourceDrifts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourceDriftsAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) *DescribeStackResourceDriftsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResourceDrifts", input)
	return &DescribeStackResourceDriftsFuture{Future: future}
}

func (a *stub) DescribeStackResources(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourcesAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) *DescribeStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResources", input)
	return &DescribeStackResourcesFuture{Future: future}
}

func (a *stub) DescribeStackSet(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackSetAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) *DescribeStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSet", input)
	return &DescribeStackSetFuture{Future: future}
}

func (a *stub) DescribeStackSetOperation(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackSetOperationAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) *DescribeStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSetOperation", input)
	return &DescribeStackSetOperationFuture{Future: future}
}

func (a *stub) DescribeStacks(ctx workflow.Context, input *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStacksAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *DescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStacks", input)
	return &DescribeStacksFuture{Future: future}
}

func (a *stub) DescribeType(ctx workflow.Context, input *cloudformation.DescribeTypeInput) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTypeAsync(ctx workflow.Context, input *cloudformation.DescribeTypeInput) *DescribeTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeType", input)
	return &DescribeTypeFuture{Future: future}
}

func (a *stub) DescribeTypeRegistration(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeTypeRegistration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTypeRegistrationAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *DescribeTypeRegistrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeTypeRegistration", input)
	return &DescribeTypeRegistrationFuture{Future: future}
}

func (a *stub) DetectStackDrift(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) *DetectStackDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackDrift", input)
	return &DetectStackDriftFuture{Future: future}
}

func (a *stub) DetectStackResourceDrift(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackResourceDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackResourceDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) *DetectStackResourceDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackResourceDrift", input)
	return &DetectStackResourceDriftFuture{Future: future}
}

func (a *stub) DetectStackSetDrift(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackSetDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackSetDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) *DetectStackSetDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackSetDrift", input)
	return &DetectStackSetDriftFuture{Future: future}
}

func (a *stub) EstimateTemplateCost(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-EstimateTemplateCost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EstimateTemplateCostAsync(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) *EstimateTemplateCostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-EstimateTemplateCost", input)
	return &EstimateTemplateCostFuture{Future: future}
}

func (a *stub) ExecuteChangeSet(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ExecuteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteChangeSetAsync(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) *ExecuteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ExecuteChangeSet", input)
	return &ExecuteChangeSetFuture{Future: future}
}

func (a *stub) GetStackPolicy(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStackPolicyAsync(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) *GetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetStackPolicy", input)
	return &GetStackPolicyFuture{Future: future}
}

func (a *stub) GetTemplate(ctx workflow.Context, input *cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTemplateAsync(ctx workflow.Context, input *cloudformation.GetTemplateInput) *GetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplate", input)
	return &GetTemplateFuture{Future: future}
}

func (a *stub) GetTemplateSummary(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplateSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTemplateSummaryAsync(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) *GetTemplateSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplateSummary", input)
	return &GetTemplateSummaryFuture{Future: future}
}

func (a *stub) ListChangeSets(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListChangeSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChangeSetsAsync(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) *ListChangeSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListChangeSets", input)
	return &ListChangeSetsFuture{Future: future}
}

func (a *stub) ListExports(ctx workflow.Context, input *cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListExports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExportsAsync(ctx workflow.Context, input *cloudformation.ListExportsInput) *ListExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListExports", input)
	return &ListExportsFuture{Future: future}
}

func (a *stub) ListImports(ctx workflow.Context, input *cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListImports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImportsAsync(ctx workflow.Context, input *cloudformation.ListImportsInput) *ListImportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListImports", input)
	return &ListImportsFuture{Future: future}
}

func (a *stub) ListStackInstances(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackInstancesAsync(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) *ListStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackInstances", input)
	return &ListStackInstancesFuture{Future: future}
}

func (a *stub) ListStackResources(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackResourcesAsync(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) *ListStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackResources", input)
	return &ListStackResourcesFuture{Future: future}
}

func (a *stub) ListStackSetOperationResults(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetOperationResultsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) *ListStackSetOperationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperationResults", input)
	return &ListStackSetOperationResultsFuture{Future: future}
}

func (a *stub) ListStackSetOperations(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetOperationsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) *ListStackSetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperations", input)
	return &ListStackSetOperationsFuture{Future: future}
}

func (a *stub) ListStackSets(ctx workflow.Context, input *cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetsAsync(ctx workflow.Context, input *cloudformation.ListStackSetsInput) *ListStackSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSets", input)
	return &ListStackSetsFuture{Future: future}
}

func (a *stub) ListStacks(ctx workflow.Context, input *cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStacksAsync(ctx workflow.Context, input *cloudformation.ListStacksInput) *ListStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStacks", input)
	return &ListStacksFuture{Future: future}
}

func (a *stub) ListTypeRegistrations(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeRegistrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypeRegistrationsAsync(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) *ListTypeRegistrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeRegistrations", input)
	return &ListTypeRegistrationsFuture{Future: future}
}

func (a *stub) ListTypeVersions(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypeVersionsAsync(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) *ListTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeVersions", input)
	return &ListTypeVersionsFuture{Future: future}
}

func (a *stub) ListTypes(ctx workflow.Context, input *cloudformation.ListTypesInput) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypesAsync(ctx workflow.Context, input *cloudformation.ListTypesInput) *ListTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypes", input)
	return &ListTypesFuture{Future: future}
}

func (a *stub) RecordHandlerProgress(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-RecordHandlerProgress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecordHandlerProgressAsync(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) *RecordHandlerProgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-RecordHandlerProgress", input)
	return &RecordHandlerProgressFuture{Future: future}
}

func (a *stub) RegisterType(ctx workflow.Context, input *cloudformation.RegisterTypeInput) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-RegisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTypeAsync(ctx workflow.Context, input *cloudformation.RegisterTypeInput) *RegisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-RegisterType", input)
	return &RegisterTypeFuture{Future: future}
}

func (a *stub) SetStackPolicy(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetStackPolicyAsync(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) *SetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetStackPolicy", input)
	return &SetStackPolicyFuture{Future: future}
}

func (a *stub) SetTypeDefaultVersion(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetTypeDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTypeDefaultVersionAsync(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) *SetTypeDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetTypeDefaultVersion", input)
	return &SetTypeDefaultVersionFuture{Future: future}
}

func (a *stub) SignalResource(ctx workflow.Context, input *cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SignalResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignalResourceAsync(ctx workflow.Context, input *cloudformation.SignalResourceInput) *SignalResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SignalResource", input)
	return &SignalResourceFuture{Future: future}
}

func (a *stub) StopStackSetOperation(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-StopStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStackSetOperationAsync(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) *StopStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-StopStackSetOperation", input)
	return &StopStackSetOperationFuture{Future: future}
}

func (a *stub) UpdateStack(ctx workflow.Context, input *cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackAsync(ctx workflow.Context, input *cloudformation.UpdateStackInput) *UpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStack", input)
	return &UpdateStackFuture{Future: future}
}

func (a *stub) UpdateStackInstances(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackInstancesAsync(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) *UpdateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackInstances", input)
	return &UpdateStackInstancesFuture{Future: future}
}

func (a *stub) UpdateStackSet(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackSetAsync(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) *UpdateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackSet", input)
	return &UpdateStackSetFuture{Future: future}
}

func (a *stub) UpdateTerminationProtection(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTerminationProtectionAsync(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) *UpdateTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateTerminationProtection", input)
	return &UpdateTerminationProtectionFuture{Future: future}
}

func (a *stub) ValidateTemplate(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ValidateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateTemplateAsync(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) *ValidateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ValidateTemplate", input)
	return &ValidateTemplateFuture{Future: future}
}

func (a *stub) WaitUntilChangeSetCreateComplete(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilChangeSetCreateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChangeSetCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilChangeSetCreateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackCreateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackCreateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackCreateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackDeleteComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackDeleteComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackDeleteCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackDeleteComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackExists(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackExistsAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackImportComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackImportComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackImportCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackImportComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackRollbackComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackRollbackComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackRollbackCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackRollbackComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackUpdateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackUpdateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackUpdateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackUpdateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTypeRegistrationComplete(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilTypeRegistrationComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTypeRegistrationCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilTypeRegistrationComplete", input)
	return clients.NewVoidFuture(future)
}
