// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudformationstub

import (
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloudFormationCancelUpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationCancelUpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationContinueUpdateRollbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationContinueUpdateRollbackFuture) Get(ctx workflow.Context) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationCreateChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationCreateChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationCreateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationCreateStackFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationCreateStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationCreateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationCreateStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationCreateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDeleteChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDeleteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDeleteStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDeleteStackFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDeleteStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDeleteStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDeleteStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDeleteStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDeregisterTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDeregisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeAccountLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeAccountLimitsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackDriftDetectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackDriftDetectionStatusFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackEventsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackInstanceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackResourceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackResourceDriftsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackResourceDriftsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStackSetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeStacksFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeTypeFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDescribeTypeRegistrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDescribeTypeRegistrationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDetectStackDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDetectStackDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDetectStackResourceDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDetectStackResourceDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationDetectStackSetDriftFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationDetectStackSetDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationEstimateTemplateCostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationEstimateTemplateCostFuture) Get(ctx workflow.Context) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationExecuteChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationExecuteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationGetStackPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationGetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationGetTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationGetTemplateFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationGetTemplateSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationGetTemplateSummaryFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListChangeSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListChangeSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListExportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListExportsFuture) Get(ctx workflow.Context) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListImportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListImportsFuture) Get(ctx workflow.Context) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStackResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStackSetOperationResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStackSetOperationResultsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStackSetOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStackSetOperationsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStackSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStackSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListStacksFuture) Get(ctx workflow.Context) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListTypeRegistrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListTypeRegistrationsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListTypeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListTypeVersionsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationListTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationListTypesFuture) Get(ctx workflow.Context) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationRecordHandlerProgressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationRecordHandlerProgressFuture) Get(ctx workflow.Context) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationRegisterTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationRegisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationSetStackPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationSetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationSetTypeDefaultVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationSetTypeDefaultVersionFuture) Get(ctx workflow.Context) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationSignalResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationSignalResourceFuture) Get(ctx workflow.Context) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationStopStackSetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationStopStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationUpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationUpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationUpdateStackInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationUpdateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationUpdateStackSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationUpdateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationUpdateTerminationProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationUpdateTerminationProtectionFuture) Get(ctx workflow.Context) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFormationValidateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFormationValidateTemplateFuture) Get(ctx workflow.Context) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelUpdateStack(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CancelUpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelUpdateStackAsync(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) *CloudFormationCancelUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CancelUpdateStack", input)
	return &CloudFormationCancelUpdateStackFuture{Future: future}
}

func (a *stub) ContinueUpdateRollback(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ContinueUpdateRollback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ContinueUpdateRollbackAsync(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) *CloudFormationContinueUpdateRollbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ContinueUpdateRollback", input)
	return &CloudFormationContinueUpdateRollbackFuture{Future: future}
}

func (a *stub) CreateChangeSet(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChangeSetAsync(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) *CloudFormationCreateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateChangeSet", input)
	return &CloudFormationCreateChangeSetFuture{Future: future}
}

func (a *stub) CreateStack(ctx workflow.Context, input *cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackAsync(ctx workflow.Context, input *cloudformation.CreateStackInput) *CloudFormationCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStack", input)
	return &CloudFormationCreateStackFuture{Future: future}
}

func (a *stub) CreateStackInstances(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackInstancesAsync(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) *CloudFormationCreateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackInstances", input)
	return &CloudFormationCreateStackInstancesFuture{Future: future}
}

func (a *stub) CreateStackSet(ctx workflow.Context, input *cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackSetAsync(ctx workflow.Context, input *cloudformation.CreateStackSetInput) *CloudFormationCreateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-CreateStackSet", input)
	return &CloudFormationCreateStackSetFuture{Future: future}
}

func (a *stub) DeleteChangeSet(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChangeSetAsync(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) *CloudFormationDeleteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteChangeSet", input)
	return &CloudFormationDeleteChangeSetFuture{Future: future}
}

func (a *stub) DeleteStack(ctx workflow.Context, input *cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackAsync(ctx workflow.Context, input *cloudformation.DeleteStackInput) *CloudFormationDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStack", input)
	return &CloudFormationDeleteStackFuture{Future: future}
}

func (a *stub) DeleteStackInstances(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackInstancesAsync(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) *CloudFormationDeleteStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackInstances", input)
	return &CloudFormationDeleteStackInstancesFuture{Future: future}
}

func (a *stub) DeleteStackSet(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackSetAsync(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) *CloudFormationDeleteStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeleteStackSet", input)
	return &CloudFormationDeleteStackSetFuture{Future: future}
}

func (a *stub) DeregisterType(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeregisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTypeAsync(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) *CloudFormationDeregisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DeregisterType", input)
	return &CloudFormationDeregisterTypeFuture{Future: future}
}

func (a *stub) DescribeAccountLimits(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountLimitsAsync(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) *CloudFormationDescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeAccountLimits", input)
	return &CloudFormationDescribeAccountLimitsFuture{Future: future}
}

func (a *stub) DescribeChangeSet(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChangeSetAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *CloudFormationDescribeChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeChangeSet", input)
	return &CloudFormationDescribeChangeSetFuture{Future: future}
}

func (a *stub) DescribeStackDriftDetectionStatus(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackDriftDetectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackDriftDetectionStatusAsync(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) *CloudFormationDescribeStackDriftDetectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackDriftDetectionStatus", input)
	return &CloudFormationDescribeStackDriftDetectionStatusFuture{Future: future}
}

func (a *stub) DescribeStackEvents(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackEventsAsync(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) *CloudFormationDescribeStackEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackEvents", input)
	return &CloudFormationDescribeStackEventsFuture{Future: future}
}

func (a *stub) DescribeStackInstance(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackInstanceAsync(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) *CloudFormationDescribeStackInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackInstance", input)
	return &CloudFormationDescribeStackInstanceFuture{Future: future}
}

func (a *stub) DescribeStackResource(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourceAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) *CloudFormationDescribeStackResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResource", input)
	return &CloudFormationDescribeStackResourceFuture{Future: future}
}

func (a *stub) DescribeStackResourceDrifts(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResourceDrifts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourceDriftsAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) *CloudFormationDescribeStackResourceDriftsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResourceDrifts", input)
	return &CloudFormationDescribeStackResourceDriftsFuture{Future: future}
}

func (a *stub) DescribeStackResources(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackResourcesAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) *CloudFormationDescribeStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackResources", input)
	return &CloudFormationDescribeStackResourcesFuture{Future: future}
}

func (a *stub) DescribeStackSet(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackSetAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) *CloudFormationDescribeStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSet", input)
	return &CloudFormationDescribeStackSetFuture{Future: future}
}

func (a *stub) DescribeStackSetOperation(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackSetOperationAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) *CloudFormationDescribeStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStackSetOperation", input)
	return &CloudFormationDescribeStackSetOperationFuture{Future: future}
}

func (a *stub) DescribeStacks(ctx workflow.Context, input *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStacksAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *CloudFormationDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeStacks", input)
	return &CloudFormationDescribeStacksFuture{Future: future}
}

func (a *stub) DescribeType(ctx workflow.Context, input *cloudformation.DescribeTypeInput) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTypeAsync(ctx workflow.Context, input *cloudformation.DescribeTypeInput) *CloudFormationDescribeTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeType", input)
	return &CloudFormationDescribeTypeFuture{Future: future}
}

func (a *stub) DescribeTypeRegistration(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeTypeRegistration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTypeRegistrationAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *CloudFormationDescribeTypeRegistrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DescribeTypeRegistration", input)
	return &CloudFormationDescribeTypeRegistrationFuture{Future: future}
}

func (a *stub) DetectStackDrift(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) *CloudFormationDetectStackDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackDrift", input)
	return &CloudFormationDetectStackDriftFuture{Future: future}
}

func (a *stub) DetectStackResourceDrift(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackResourceDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackResourceDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) *CloudFormationDetectStackResourceDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackResourceDrift", input)
	return &CloudFormationDetectStackResourceDriftFuture{Future: future}
}

func (a *stub) DetectStackSetDrift(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackSetDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectStackSetDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) *CloudFormationDetectStackSetDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-DetectStackSetDrift", input)
	return &CloudFormationDetectStackSetDriftFuture{Future: future}
}

func (a *stub) EstimateTemplateCost(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-EstimateTemplateCost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EstimateTemplateCostAsync(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) *CloudFormationEstimateTemplateCostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-EstimateTemplateCost", input)
	return &CloudFormationEstimateTemplateCostFuture{Future: future}
}

func (a *stub) ExecuteChangeSet(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ExecuteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteChangeSetAsync(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) *CloudFormationExecuteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ExecuteChangeSet", input)
	return &CloudFormationExecuteChangeSetFuture{Future: future}
}

func (a *stub) GetStackPolicy(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStackPolicyAsync(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) *CloudFormationGetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetStackPolicy", input)
	return &CloudFormationGetStackPolicyFuture{Future: future}
}

func (a *stub) GetTemplate(ctx workflow.Context, input *cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTemplateAsync(ctx workflow.Context, input *cloudformation.GetTemplateInput) *CloudFormationGetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplate", input)
	return &CloudFormationGetTemplateFuture{Future: future}
}

func (a *stub) GetTemplateSummary(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplateSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTemplateSummaryAsync(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) *CloudFormationGetTemplateSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-GetTemplateSummary", input)
	return &CloudFormationGetTemplateSummaryFuture{Future: future}
}

func (a *stub) ListChangeSets(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListChangeSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChangeSetsAsync(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) *CloudFormationListChangeSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListChangeSets", input)
	return &CloudFormationListChangeSetsFuture{Future: future}
}

func (a *stub) ListExports(ctx workflow.Context, input *cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListExports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExportsAsync(ctx workflow.Context, input *cloudformation.ListExportsInput) *CloudFormationListExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListExports", input)
	return &CloudFormationListExportsFuture{Future: future}
}

func (a *stub) ListImports(ctx workflow.Context, input *cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListImports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImportsAsync(ctx workflow.Context, input *cloudformation.ListImportsInput) *CloudFormationListImportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListImports", input)
	return &CloudFormationListImportsFuture{Future: future}
}

func (a *stub) ListStackInstances(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackInstancesAsync(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) *CloudFormationListStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackInstances", input)
	return &CloudFormationListStackInstancesFuture{Future: future}
}

func (a *stub) ListStackResources(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackResourcesAsync(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) *CloudFormationListStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackResources", input)
	return &CloudFormationListStackResourcesFuture{Future: future}
}

func (a *stub) ListStackSetOperationResults(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetOperationResultsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) *CloudFormationListStackSetOperationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperationResults", input)
	return &CloudFormationListStackSetOperationResultsFuture{Future: future}
}

func (a *stub) ListStackSetOperations(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetOperationsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) *CloudFormationListStackSetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSetOperations", input)
	return &CloudFormationListStackSetOperationsFuture{Future: future}
}

func (a *stub) ListStackSets(ctx workflow.Context, input *cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackSetsAsync(ctx workflow.Context, input *cloudformation.ListStackSetsInput) *CloudFormationListStackSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStackSets", input)
	return &CloudFormationListStackSetsFuture{Future: future}
}

func (a *stub) ListStacks(ctx workflow.Context, input *cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStacksAsync(ctx workflow.Context, input *cloudformation.ListStacksInput) *CloudFormationListStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListStacks", input)
	return &CloudFormationListStacksFuture{Future: future}
}

func (a *stub) ListTypeRegistrations(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeRegistrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypeRegistrationsAsync(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) *CloudFormationListTypeRegistrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeRegistrations", input)
	return &CloudFormationListTypeRegistrationsFuture{Future: future}
}

func (a *stub) ListTypeVersions(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypeVersionsAsync(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) *CloudFormationListTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypeVersions", input)
	return &CloudFormationListTypeVersionsFuture{Future: future}
}

func (a *stub) ListTypes(ctx workflow.Context, input *cloudformation.ListTypesInput) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypesAsync(ctx workflow.Context, input *cloudformation.ListTypesInput) *CloudFormationListTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ListTypes", input)
	return &CloudFormationListTypesFuture{Future: future}
}

func (a *stub) RecordHandlerProgress(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-RecordHandlerProgress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecordHandlerProgressAsync(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) *CloudFormationRecordHandlerProgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-RecordHandlerProgress", input)
	return &CloudFormationRecordHandlerProgressFuture{Future: future}
}

func (a *stub) RegisterType(ctx workflow.Context, input *cloudformation.RegisterTypeInput) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-RegisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTypeAsync(ctx workflow.Context, input *cloudformation.RegisterTypeInput) *CloudFormationRegisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-RegisterType", input)
	return &CloudFormationRegisterTypeFuture{Future: future}
}

func (a *stub) SetStackPolicy(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetStackPolicyAsync(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) *CloudFormationSetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetStackPolicy", input)
	return &CloudFormationSetStackPolicyFuture{Future: future}
}

func (a *stub) SetTypeDefaultVersion(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetTypeDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTypeDefaultVersionAsync(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) *CloudFormationSetTypeDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SetTypeDefaultVersion", input)
	return &CloudFormationSetTypeDefaultVersionFuture{Future: future}
}

func (a *stub) SignalResource(ctx workflow.Context, input *cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-SignalResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignalResourceAsync(ctx workflow.Context, input *cloudformation.SignalResourceInput) *CloudFormationSignalResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-SignalResource", input)
	return &CloudFormationSignalResourceFuture{Future: future}
}

func (a *stub) StopStackSetOperation(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-StopStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStackSetOperationAsync(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) *CloudFormationStopStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-StopStackSetOperation", input)
	return &CloudFormationStopStackSetOperationFuture{Future: future}
}

func (a *stub) UpdateStack(ctx workflow.Context, input *cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackAsync(ctx workflow.Context, input *cloudformation.UpdateStackInput) *CloudFormationUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStack", input)
	return &CloudFormationUpdateStackFuture{Future: future}
}

func (a *stub) UpdateStackInstances(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackInstancesAsync(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) *CloudFormationUpdateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackInstances", input)
	return &CloudFormationUpdateStackInstancesFuture{Future: future}
}

func (a *stub) UpdateStackSet(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackSetAsync(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) *CloudFormationUpdateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateStackSet", input)
	return &CloudFormationUpdateStackSetFuture{Future: future}
}

func (a *stub) UpdateTerminationProtection(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTerminationProtectionAsync(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) *CloudFormationUpdateTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-UpdateTerminationProtection", input)
	return &CloudFormationUpdateTerminationProtectionFuture{Future: future}
}

func (a *stub) ValidateTemplate(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudformation-ValidateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateTemplateAsync(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) *CloudFormationValidateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-ValidateTemplate", input)
	return &CloudFormationValidateTemplateFuture{Future: future}
}

func (a *stub) WaitUntilChangeSetCreateComplete(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilChangeSetCreateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChangeSetCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilChangeSetCreateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackCreateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackCreateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackCreateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackDeleteComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackDeleteComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackDeleteCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackDeleteComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackExists(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackExistsAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackImportComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackImportComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackImportCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackImportComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackRollbackComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackRollbackComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackRollbackCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackRollbackComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStackUpdateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackUpdateComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStackUpdateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilStackUpdateComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTypeRegistrationComplete(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilTypeRegistrationComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTypeRegistrationCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudformation-WaitUntilTypeRegistrationComplete", input)
	return clients.NewVoidFuture(future)
}
