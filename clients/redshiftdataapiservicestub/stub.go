// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package redshiftdataapiservicestub

import (
	"github.com/aws/aws-sdk-go/service/redshiftdataapiservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.CancelStatementOutput, error) {
	var output redshiftdataapiservice.CancelStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	var output redshiftdataapiservice.DescribeStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTableFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.DescribeTableOutput, error) {
	var output redshiftdataapiservice.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteStatementFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	var output redshiftdataapiservice.ExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStatementResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStatementResultFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	var output redshiftdataapiservice.GetStatementResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatabasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatabasesFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	var output redshiftdataapiservice.ListDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSchemasFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListSchemasOutput, error) {
	var output redshiftdataapiservice.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStatementsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStatementsFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListStatementsOutput, error) {
	var output redshiftdataapiservice.ListStatementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTablesFuture) Get(ctx workflow.Context) (*redshiftdataapiservice.ListTablesOutput, error) {
	var output redshiftdataapiservice.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelStatement(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) (*redshiftdataapiservice.CancelStatementOutput, error) {
	var output redshiftdataapiservice.CancelStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-CancelStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.CancelStatementInput) *CancelStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-CancelStatement", input)
	return &CancelStatementFuture{Future: future}
}

func (a *stub) DescribeStatement(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	var output redshiftdataapiservice.DescribeStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-DescribeStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeStatementInput) *DescribeStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-DescribeStatement", input)
	return &DescribeStatementFuture{Future: future}
}

func (a *stub) DescribeTable(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) (*redshiftdataapiservice.DescribeTableOutput, error) {
	var output redshiftdataapiservice.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableAsync(ctx workflow.Context, input *redshiftdataapiservice.DescribeTableInput) *DescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-DescribeTable", input)
	return &DescribeTableFuture{Future: future}
}

func (a *stub) ExecuteStatement(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	var output redshiftdataapiservice.ExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteStatementAsync(ctx workflow.Context, input *redshiftdataapiservice.ExecuteStatementInput) *ExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ExecuteStatement", input)
	return &ExecuteStatementFuture{Future: future}
}

func (a *stub) GetStatementResult(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	var output redshiftdataapiservice.GetStatementResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-GetStatementResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStatementResultAsync(ctx workflow.Context, input *redshiftdataapiservice.GetStatementResultInput) *GetStatementResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-GetStatementResult", input)
	return &GetStatementResultFuture{Future: future}
}

func (a *stub) ListDatabases(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	var output redshiftdataapiservice.ListDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatabasesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListDatabasesInput) *ListDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListDatabases", input)
	return &ListDatabasesFuture{Future: future}
}

func (a *stub) ListSchemas(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) (*redshiftdataapiservice.ListSchemasOutput, error) {
	var output redshiftdataapiservice.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemasAsync(ctx workflow.Context, input *redshiftdataapiservice.ListSchemasInput) *ListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListSchemas", input)
	return &ListSchemasFuture{Future: future}
}

func (a *stub) ListStatements(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) (*redshiftdataapiservice.ListStatementsOutput, error) {
	var output redshiftdataapiservice.ListStatementsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListStatements", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStatementsAsync(ctx workflow.Context, input *redshiftdataapiservice.ListStatementsInput) *ListStatementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListStatements", input)
	return &ListStatementsFuture{Future: future}
}

func (a *stub) ListTables(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) (*redshiftdataapiservice.ListTablesOutput, error) {
	var output redshiftdataapiservice.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTablesAsync(ctx workflow.Context, input *redshiftdataapiservice.ListTablesInput) *ListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshiftdataapiservice-ListTables", input)
	return &ListTablesFuture{Future: future}
}
