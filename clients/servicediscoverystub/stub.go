// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package servicediscoverystub

import (
	"github.com/aws/aws-sdk-go/service/servicediscovery"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ServiceDiscoveryCreateHttpNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryCreateHttpNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryCreatePrivateDnsNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryCreatePrivateDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryCreatePublicDnsNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryCreatePublicDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryCreateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryCreateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryDeleteNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryDeleteNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryDeleteServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryDeleteServiceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryDeregisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryDeregisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryDiscoverInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryDiscoverInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryGetInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryGetInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryGetInstancesHealthStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryGetInstancesHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryGetNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryGetNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryGetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryGetOperationFuture) Get(ctx workflow.Context) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryGetServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryGetServiceFuture) Get(ctx workflow.Context) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryListInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryListInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryListNamespacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryListNamespacesFuture) Get(ctx workflow.Context) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryListOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryListOperationsFuture) Get(ctx workflow.Context) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryListServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryListServicesFuture) Get(ctx workflow.Context) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryListTagsForResourceFuture) Get(ctx workflow.Context) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryRegisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryRegisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryTagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryUntagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryUpdateInstanceCustomHealthStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryUpdateInstanceCustomHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceDiscoveryUpdateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceDiscoveryUpdateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHttpNamespace(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateHttpNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHttpNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) *ServiceDiscoveryCreateHttpNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateHttpNamespace", input)
	return &ServiceDiscoveryCreateHttpNamespaceFuture{Future: future}
}

func (a *stub) CreatePrivateDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePrivateDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePrivateDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) *ServiceDiscoveryCreatePrivateDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePrivateDnsNamespace", input)
	return &ServiceDiscoveryCreatePrivateDnsNamespaceFuture{Future: future}
}

func (a *stub) CreatePublicDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePublicDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) *ServiceDiscoveryCreatePublicDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePublicDnsNamespace", input)
	return &ServiceDiscoveryCreatePublicDnsNamespaceFuture{Future: future}
}

func (a *stub) CreateService(ctx workflow.Context, input *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceAsync(ctx workflow.Context, input *servicediscovery.CreateServiceInput) *ServiceDiscoveryCreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateService", input)
	return &ServiceDiscoveryCreateServiceFuture{Future: future}
}

func (a *stub) DeleteNamespace(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNamespaceAsync(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) *ServiceDiscoveryDeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteNamespace", input)
	return &ServiceDiscoveryDeleteNamespaceFuture{Future: future}
}

func (a *stub) DeleteService(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceAsync(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) *ServiceDiscoveryDeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteService", input)
	return &ServiceDiscoveryDeleteServiceFuture{Future: future}
}

func (a *stub) DeregisterInstance(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterInstanceAsync(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) *ServiceDiscoveryDeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeregisterInstance", input)
	return &ServiceDiscoveryDeregisterInstanceFuture{Future: future}
}

func (a *stub) DiscoverInstances(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DiscoverInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DiscoverInstancesAsync(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) *ServiceDiscoveryDiscoverInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DiscoverInstances", input)
	return &ServiceDiscoveryDiscoverInstancesFuture{Future: future}
}

func (a *stub) GetInstance(ctx workflow.Context, input *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAsync(ctx workflow.Context, input *servicediscovery.GetInstanceInput) *ServiceDiscoveryGetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstance", input)
	return &ServiceDiscoveryGetInstanceFuture{Future: future}
}

func (a *stub) GetInstancesHealthStatus(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstancesHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancesHealthStatusAsync(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) *ServiceDiscoveryGetInstancesHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstancesHealthStatus", input)
	return &ServiceDiscoveryGetInstancesHealthStatusFuture{Future: future}
}

func (a *stub) GetNamespace(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNamespaceAsync(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) *ServiceDiscoveryGetNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetNamespace", input)
	return &ServiceDiscoveryGetNamespaceFuture{Future: future}
}

func (a *stub) GetOperation(ctx workflow.Context, input *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationAsync(ctx workflow.Context, input *servicediscovery.GetOperationInput) *ServiceDiscoveryGetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetOperation", input)
	return &ServiceDiscoveryGetOperationFuture{Future: future}
}

func (a *stub) GetService(ctx workflow.Context, input *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceAsync(ctx workflow.Context, input *servicediscovery.GetServiceInput) *ServiceDiscoveryGetServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetService", input)
	return &ServiceDiscoveryGetServiceFuture{Future: future}
}

func (a *stub) ListInstances(ctx workflow.Context, input *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstancesAsync(ctx workflow.Context, input *servicediscovery.ListInstancesInput) *ServiceDiscoveryListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListInstances", input)
	return &ServiceDiscoveryListInstancesFuture{Future: future}
}

func (a *stub) ListNamespaces(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNamespacesAsync(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) *ServiceDiscoveryListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListNamespaces", input)
	return &ServiceDiscoveryListNamespacesFuture{Future: future}
}

func (a *stub) ListOperations(ctx workflow.Context, input *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOperationsAsync(ctx workflow.Context, input *servicediscovery.ListOperationsInput) *ServiceDiscoveryListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListOperations", input)
	return &ServiceDiscoveryListOperationsFuture{Future: future}
}

func (a *stub) ListServices(ctx workflow.Context, input *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServicesAsync(ctx workflow.Context, input *servicediscovery.ListServicesInput) *ServiceDiscoveryListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListServices", input)
	return &ServiceDiscoveryListServicesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) *ServiceDiscoveryListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListTagsForResource", input)
	return &ServiceDiscoveryListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterInstance(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterInstanceAsync(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) *ServiceDiscoveryRegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-RegisterInstance", input)
	return &ServiceDiscoveryRegisterInstanceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *servicediscovery.TagResourceInput) *ServiceDiscoveryTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-TagResource", input)
	return &ServiceDiscoveryTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *servicediscovery.UntagResourceInput) *ServiceDiscoveryUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UntagResource", input)
	return &ServiceDiscoveryUntagResourceFuture{Future: future}
}

func (a *stub) UpdateInstanceCustomHealthStatus(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateInstanceCustomHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceCustomHealthStatusAsync(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) *ServiceDiscoveryUpdateInstanceCustomHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateInstanceCustomHealthStatus", input)
	return &ServiceDiscoveryUpdateInstanceCustomHealthStatusFuture{Future: future}
}

func (a *stub) UpdateService(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceAsync(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) *ServiceDiscoveryUpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateService", input)
	return &ServiceDiscoveryUpdateServiceFuture{Future: future}
}
