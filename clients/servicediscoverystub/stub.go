// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package servicediscoverystub

import (
	"github.com/aws/aws-sdk-go/service/servicediscovery"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateHttpNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHttpNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePrivateDnsNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePrivateDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePublicDnsNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePublicDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DiscoverInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DiscoverInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstancesHealthStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstancesHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOperationFuture) Get(ctx workflow.Context) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceFuture) Get(ctx workflow.Context) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNamespacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNamespacesFuture) Get(ctx workflow.Context) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOperationsFuture) Get(ctx workflow.Context) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServicesFuture) Get(ctx workflow.Context) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInstanceCustomHealthStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInstanceCustomHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHttpNamespace(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateHttpNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHttpNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) *CreateHttpNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateHttpNamespace", input)
	return &CreateHttpNamespaceFuture{Future: future}
}

func (a *stub) CreatePrivateDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePrivateDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePrivateDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) *CreatePrivateDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePrivateDnsNamespace", input)
	return &CreatePrivateDnsNamespaceFuture{Future: future}
}

func (a *stub) CreatePublicDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePublicDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) *CreatePublicDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreatePublicDnsNamespace", input)
	return &CreatePublicDnsNamespaceFuture{Future: future}
}

func (a *stub) CreateService(ctx workflow.Context, input *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceAsync(ctx workflow.Context, input *servicediscovery.CreateServiceInput) *CreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-CreateService", input)
	return &CreateServiceFuture{Future: future}
}

func (a *stub) DeleteNamespace(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNamespaceAsync(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) *DeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteNamespace", input)
	return &DeleteNamespaceFuture{Future: future}
}

func (a *stub) DeleteService(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceAsync(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) *DeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeleteService", input)
	return &DeleteServiceFuture{Future: future}
}

func (a *stub) DeregisterInstance(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterInstanceAsync(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) *DeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DeregisterInstance", input)
	return &DeregisterInstanceFuture{Future: future}
}

func (a *stub) DiscoverInstances(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DiscoverInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DiscoverInstancesAsync(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) *DiscoverInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-DiscoverInstances", input)
	return &DiscoverInstancesFuture{Future: future}
}

func (a *stub) GetInstance(ctx workflow.Context, input *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAsync(ctx workflow.Context, input *servicediscovery.GetInstanceInput) *GetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstance", input)
	return &GetInstanceFuture{Future: future}
}

func (a *stub) GetInstancesHealthStatus(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstancesHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancesHealthStatusAsync(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) *GetInstancesHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetInstancesHealthStatus", input)
	return &GetInstancesHealthStatusFuture{Future: future}
}

func (a *stub) GetNamespace(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNamespaceAsync(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) *GetNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetNamespace", input)
	return &GetNamespaceFuture{Future: future}
}

func (a *stub) GetOperation(ctx workflow.Context, input *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationAsync(ctx workflow.Context, input *servicediscovery.GetOperationInput) *GetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetOperation", input)
	return &GetOperationFuture{Future: future}
}

func (a *stub) GetService(ctx workflow.Context, input *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceAsync(ctx workflow.Context, input *servicediscovery.GetServiceInput) *GetServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-GetService", input)
	return &GetServiceFuture{Future: future}
}

func (a *stub) ListInstances(ctx workflow.Context, input *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstancesAsync(ctx workflow.Context, input *servicediscovery.ListInstancesInput) *ListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListInstances", input)
	return &ListInstancesFuture{Future: future}
}

func (a *stub) ListNamespaces(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNamespacesAsync(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) *ListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListNamespaces", input)
	return &ListNamespacesFuture{Future: future}
}

func (a *stub) ListOperations(ctx workflow.Context, input *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOperationsAsync(ctx workflow.Context, input *servicediscovery.ListOperationsInput) *ListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListOperations", input)
	return &ListOperationsFuture{Future: future}
}

func (a *stub) ListServices(ctx workflow.Context, input *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServicesAsync(ctx workflow.Context, input *servicediscovery.ListServicesInput) *ListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListServices", input)
	return &ListServicesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterInstance(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterInstanceAsync(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) *RegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-RegisterInstance", input)
	return &RegisterInstanceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *servicediscovery.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *servicediscovery.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateInstanceCustomHealthStatus(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateInstanceCustomHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceCustomHealthStatusAsync(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) *UpdateInstanceCustomHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateInstanceCustomHealthStatus", input)
	return &UpdateInstanceCustomHealthStatusFuture{Future: future}
}

func (a *stub) UpdateService(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceAsync(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) *UpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicediscovery-UpdateService", input)
	return &UpdateServiceFuture{Future: future}
}
