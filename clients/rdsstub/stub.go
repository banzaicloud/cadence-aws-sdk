// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package rdsstub

import (
	"github.com/aws/aws-sdk-go/service/rds"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type RDSAddRoleToDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSAddRoleToDBClusterFuture) Get(ctx workflow.Context) (*rds.AddRoleToDBClusterOutput, error) {
	var output rds.AddRoleToDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSAddRoleToDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSAddRoleToDBInstanceFuture) Get(ctx workflow.Context) (*rds.AddRoleToDBInstanceOutput, error) {
	var output rds.AddRoleToDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSAddSourceIdentifierToSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSAddSourceIdentifierToSubscriptionFuture) Get(ctx workflow.Context) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	var output rds.AddSourceIdentifierToSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSAddTagsToResourceFuture) Get(ctx workflow.Context) (*rds.AddTagsToResourceOutput, error) {
	var output rds.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	var output rds.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSAuthorizeDBSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSAuthorizeDBSecurityGroupIngressFuture) Get(ctx workflow.Context) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	var output rds.AuthorizeDBSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSBacktrackDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSBacktrackDBClusterFuture) Get(ctx workflow.Context) (*rds.BacktrackDBClusterOutput, error) {
	var output rds.BacktrackDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCancelExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCancelExportTaskFuture) Get(ctx workflow.Context) (*rds.CancelExportTaskOutput, error) {
	var output rds.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCopyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.CopyDBClusterParameterGroupOutput, error) {
	var output rds.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCopyDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.CopyDBClusterSnapshotOutput, error) {
	var output rds.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCopyDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCopyDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.CopyDBParameterGroupOutput, error) {
	var output rds.CopyDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCopyDBSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCopyDBSnapshotFuture) Get(ctx workflow.Context) (*rds.CopyDBSnapshotOutput, error) {
	var output rds.CopyDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCopyOptionGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCopyOptionGroupFuture) Get(ctx workflow.Context) (*rds.CopyOptionGroupOutput, error) {
	var output rds.CopyOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateCustomAvailabilityZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateCustomAvailabilityZoneFuture) Get(ctx workflow.Context) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	var output rds.CreateCustomAvailabilityZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBClusterFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterOutput, error) {
	var output rds.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterEndpointOutput, error) {
	var output rds.CreateDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterParameterGroupOutput, error) {
	var output rds.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.CreateDBClusterSnapshotOutput, error) {
	var output rds.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBInstanceFuture) Get(ctx workflow.Context) (*rds.CreateDBInstanceOutput, error) {
	var output rds.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBInstanceReadReplicaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBInstanceReadReplicaFuture) Get(ctx workflow.Context) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	var output rds.CreateDBInstanceReadReplicaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBParameterGroupOutput, error) {
	var output rds.CreateDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBProxyFuture) Get(ctx workflow.Context) (*rds.CreateDBProxyOutput, error) {
	var output rds.CreateDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBSecurityGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBSecurityGroupOutput, error) {
	var output rds.CreateDBSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBSnapshotFuture) Get(ctx workflow.Context) (*rds.CreateDBSnapshotOutput, error) {
	var output rds.CreateDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.CreateDBSubnetGroupOutput, error) {
	var output rds.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.CreateEventSubscriptionOutput, error) {
	var output rds.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateGlobalClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateGlobalClusterFuture) Get(ctx workflow.Context) (*rds.CreateGlobalClusterOutput, error) {
	var output rds.CreateGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSCreateOptionGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSCreateOptionGroupFuture) Get(ctx workflow.Context) (*rds.CreateOptionGroupOutput, error) {
	var output rds.CreateOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteCustomAvailabilityZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteCustomAvailabilityZoneFuture) Get(ctx workflow.Context) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	var output rds.DeleteCustomAvailabilityZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBClusterFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterOutput, error) {
	var output rds.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterEndpointOutput, error) {
	var output rds.DeleteDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	var output rds.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*rds.DeleteDBClusterSnapshotOutput, error) {
	var output rds.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBInstanceFuture) Get(ctx workflow.Context) (*rds.DeleteDBInstanceOutput, error) {
	var output rds.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBInstanceAutomatedBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBInstanceAutomatedBackupFuture) Get(ctx workflow.Context) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	var output rds.DeleteDBInstanceAutomatedBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBParameterGroupOutput, error) {
	var output rds.DeleteDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBProxyFuture) Get(ctx workflow.Context) (*rds.DeleteDBProxyOutput, error) {
	var output rds.DeleteDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBSecurityGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBSecurityGroupOutput, error) {
	var output rds.DeleteDBSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBSnapshotFuture) Get(ctx workflow.Context) (*rds.DeleteDBSnapshotOutput, error) {
	var output rds.DeleteDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.DeleteDBSubnetGroupOutput, error) {
	var output rds.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.DeleteEventSubscriptionOutput, error) {
	var output rds.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteGlobalClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteGlobalClusterFuture) Get(ctx workflow.Context) (*rds.DeleteGlobalClusterOutput, error) {
	var output rds.DeleteGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteInstallationMediaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteInstallationMediaFuture) Get(ctx workflow.Context) (*rds.DeleteInstallationMediaOutput, error) {
	var output rds.DeleteInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeleteOptionGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeleteOptionGroupFuture) Get(ctx workflow.Context) (*rds.DeleteOptionGroupOutput, error) {
	var output rds.DeleteOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDeregisterDBProxyTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDeregisterDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.DeregisterDBProxyTargetsOutput, error) {
	var output rds.DeregisterDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeAccountAttributesOutput, error) {
	var output rds.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeCertificatesFuture) Get(ctx workflow.Context) (*rds.DescribeCertificatesOutput, error) {
	var output rds.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeCustomAvailabilityZonesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeCustomAvailabilityZonesFuture) Get(ctx workflow.Context) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	var output rds.DescribeCustomAvailabilityZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterBacktracksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterBacktracksFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterBacktracksOutput, error) {
	var output rds.DescribeDBClusterBacktracksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterEndpointsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterEndpointsOutput, error) {
	var output rds.DescribeDBClusterEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	var output rds.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterParametersOutput, error) {
	var output rds.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterSnapshotAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output rds.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	var output rds.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBClustersFuture) Get(ctx workflow.Context) (*rds.DescribeDBClustersOutput, error) {
	var output rds.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBEngineVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*rds.DescribeDBEngineVersionsOutput, error) {
	var output rds.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBInstanceAutomatedBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBInstanceAutomatedBackupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	var output rds.DescribeDBInstanceAutomatedBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBInstancesFuture) Get(ctx workflow.Context) (*rds.DescribeDBInstancesOutput, error) {
	var output rds.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBLogFilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBLogFilesFuture) Get(ctx workflow.Context) (*rds.DescribeDBLogFilesOutput, error) {
	var output rds.DescribeDBLogFilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBParameterGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBParameterGroupsOutput, error) {
	var output rds.DescribeDBParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBParametersFuture) Get(ctx workflow.Context) (*rds.DescribeDBParametersOutput, error) {
	var output rds.DescribeDBParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBProxiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBProxiesFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxiesOutput, error) {
	var output rds.DescribeDBProxiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBProxyTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBProxyTargetGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	var output rds.DescribeDBProxyTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBProxyTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.DescribeDBProxyTargetsOutput, error) {
	var output rds.DescribeDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBSecurityGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSecurityGroupsOutput, error) {
	var output rds.DescribeDBSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBSnapshotAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBSnapshotAttributesFuture) Get(ctx workflow.Context) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	var output rds.DescribeDBSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBSnapshotsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSnapshotsOutput, error) {
	var output rds.DescribeDBSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeDBSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeDBSubnetGroupsOutput, error) {
	var output rds.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeEngineDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	var output rds.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeEngineDefaultParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*rds.DescribeEngineDefaultParametersOutput, error) {
	var output rds.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*rds.DescribeEventCategoriesOutput, error) {
	var output rds.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*rds.DescribeEventSubscriptionsOutput, error) {
	var output rds.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeEventsFuture) Get(ctx workflow.Context) (*rds.DescribeEventsOutput, error) {
	var output rds.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeExportTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeExportTasksFuture) Get(ctx workflow.Context) (*rds.DescribeExportTasksOutput, error) {
	var output rds.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeGlobalClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeGlobalClustersFuture) Get(ctx workflow.Context) (*rds.DescribeGlobalClustersOutput, error) {
	var output rds.DescribeGlobalClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeInstallationMediaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeInstallationMediaFuture) Get(ctx workflow.Context) (*rds.DescribeInstallationMediaOutput, error) {
	var output rds.DescribeInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeOptionGroupOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeOptionGroupOptionsFuture) Get(ctx workflow.Context) (*rds.DescribeOptionGroupOptionsOutput, error) {
	var output rds.DescribeOptionGroupOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeOptionGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeOptionGroupsFuture) Get(ctx workflow.Context) (*rds.DescribeOptionGroupsOutput, error) {
	var output rds.DescribeOptionGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeOrderableDBInstanceOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output rds.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	var output rds.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeReservedDBInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeReservedDBInstancesFuture) Get(ctx workflow.Context) (*rds.DescribeReservedDBInstancesOutput, error) {
	var output rds.DescribeReservedDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeReservedDBInstancesOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeReservedDBInstancesOfferingsFuture) Get(ctx workflow.Context) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	var output rds.DescribeReservedDBInstancesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeSourceRegionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeSourceRegionsFuture) Get(ctx workflow.Context) (*rds.DescribeSourceRegionsOutput, error) {
	var output rds.DescribeSourceRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDescribeValidDBInstanceModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDescribeValidDBInstanceModificationsFuture) Get(ctx workflow.Context) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	var output rds.DescribeValidDBInstanceModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSDownloadDBLogFilePortionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSDownloadDBLogFilePortionFuture) Get(ctx workflow.Context) (*rds.DownloadDBLogFilePortionOutput, error) {
	var output rds.DownloadDBLogFilePortionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSFailoverDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSFailoverDBClusterFuture) Get(ctx workflow.Context) (*rds.FailoverDBClusterOutput, error) {
	var output rds.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSImportInstallationMediaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSImportInstallationMediaFuture) Get(ctx workflow.Context) (*rds.ImportInstallationMediaOutput, error) {
	var output rds.ImportInstallationMediaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSListTagsForResourceFuture) Get(ctx workflow.Context) (*rds.ListTagsForResourceOutput, error) {
	var output rds.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyCertificatesFuture) Get(ctx workflow.Context) (*rds.ModifyCertificatesOutput, error) {
	var output rds.ModifyCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyCurrentDBClusterCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyCurrentDBClusterCapacityFuture) Get(ctx workflow.Context) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	var output rds.ModifyCurrentDBClusterCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBClusterFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterOutput, error) {
	var output rds.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBClusterEndpointFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterEndpointOutput, error) {
	var output rds.ModifyDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBClusterSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output rds.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBInstanceFuture) Get(ctx workflow.Context) (*rds.ModifyDBInstanceOutput, error) {
	var output rds.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBProxyFuture) Get(ctx workflow.Context) (*rds.ModifyDBProxyOutput, error) {
	var output rds.ModifyDBProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBProxyTargetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBProxyTargetGroupFuture) Get(ctx workflow.Context) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	var output rds.ModifyDBProxyTargetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBSnapshotFuture) Get(ctx workflow.Context) (*rds.ModifyDBSnapshotOutput, error) {
	var output rds.ModifyDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBSnapshotAttributeFuture) Get(ctx workflow.Context) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	var output rds.ModifyDBSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*rds.ModifyDBSubnetGroupOutput, error) {
	var output rds.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*rds.ModifyEventSubscriptionOutput, error) {
	var output rds.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyGlobalClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyGlobalClusterFuture) Get(ctx workflow.Context) (*rds.ModifyGlobalClusterOutput, error) {
	var output rds.ModifyGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSModifyOptionGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSModifyOptionGroupFuture) Get(ctx workflow.Context) (*rds.ModifyOptionGroupOutput, error) {
	var output rds.ModifyOptionGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSPromoteReadReplicaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSPromoteReadReplicaFuture) Get(ctx workflow.Context) (*rds.PromoteReadReplicaOutput, error) {
	var output rds.PromoteReadReplicaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSPromoteReadReplicaDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSPromoteReadReplicaDBClusterFuture) Get(ctx workflow.Context) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	var output rds.PromoteReadReplicaDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSPurchaseReservedDBInstancesOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSPurchaseReservedDBInstancesOfferingFuture) Get(ctx workflow.Context) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	var output rds.PurchaseReservedDBInstancesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRebootDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRebootDBInstanceFuture) Get(ctx workflow.Context) (*rds.RebootDBInstanceOutput, error) {
	var output rds.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRegisterDBProxyTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRegisterDBProxyTargetsFuture) Get(ctx workflow.Context) (*rds.RegisterDBProxyTargetsOutput, error) {
	var output rds.RegisterDBProxyTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRemoveFromGlobalClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRemoveFromGlobalClusterFuture) Get(ctx workflow.Context) (*rds.RemoveFromGlobalClusterOutput, error) {
	var output rds.RemoveFromGlobalClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRemoveRoleFromDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRemoveRoleFromDBClusterFuture) Get(ctx workflow.Context) (*rds.RemoveRoleFromDBClusterOutput, error) {
	var output rds.RemoveRoleFromDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRemoveRoleFromDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRemoveRoleFromDBInstanceFuture) Get(ctx workflow.Context) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	var output rds.RemoveRoleFromDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRemoveSourceIdentifierFromSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRemoveSourceIdentifierFromSubscriptionFuture) Get(ctx workflow.Context) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output rds.RemoveSourceIdentifierFromSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*rds.RemoveTagsFromResourceOutput, error) {
	var output rds.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSResetDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSResetDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSResetDBParameterGroupFuture) Get(ctx workflow.Context) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBClusterFromS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBClusterFromS3Future) Get(ctx workflow.Context) (*rds.RestoreDBClusterFromS3Output, error) {
	var output rds.RestoreDBClusterFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBClusterFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	var output rds.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBClusterToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	var output rds.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBInstanceFromDBSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBInstanceFromDBSnapshotFuture) Get(ctx workflow.Context) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	var output rds.RestoreDBInstanceFromDBSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBInstanceFromS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBInstanceFromS3Future) Get(ctx workflow.Context) (*rds.RestoreDBInstanceFromS3Output, error) {
	var output rds.RestoreDBInstanceFromS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRestoreDBInstanceToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRestoreDBInstanceToPointInTimeFuture) Get(ctx workflow.Context) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	var output rds.RestoreDBInstanceToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSRevokeDBSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSRevokeDBSecurityGroupIngressFuture) Get(ctx workflow.Context) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	var output rds.RevokeDBSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStartActivityStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStartActivityStreamFuture) Get(ctx workflow.Context) (*rds.StartActivityStreamOutput, error) {
	var output rds.StartActivityStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStartDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStartDBClusterFuture) Get(ctx workflow.Context) (*rds.StartDBClusterOutput, error) {
	var output rds.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStartDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStartDBInstanceFuture) Get(ctx workflow.Context) (*rds.StartDBInstanceOutput, error) {
	var output rds.StartDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStartExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStartExportTaskFuture) Get(ctx workflow.Context) (*rds.StartExportTaskOutput, error) {
	var output rds.StartExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStopActivityStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStopActivityStreamFuture) Get(ctx workflow.Context) (*rds.StopActivityStreamOutput, error) {
	var output rds.StopActivityStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStopDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStopDBClusterFuture) Get(ctx workflow.Context) (*rds.StopDBClusterOutput, error) {
	var output rds.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RDSStopDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RDSStopDBInstanceFuture) Get(ctx workflow.Context) (*rds.StopDBInstanceOutput, error) {
	var output rds.StopDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToDBCluster(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	var output rds.AddRoleToDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-AddRoleToDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToDBClusterAsync(ctx workflow.Context, input *rds.AddRoleToDBClusterInput) *RDSAddRoleToDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-AddRoleToDBCluster", input)
	return &RDSAddRoleToDBClusterFuture{Future: future}
}

func (a *stub) AddRoleToDBInstance(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	var output rds.AddRoleToDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-AddRoleToDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToDBInstanceAsync(ctx workflow.Context, input *rds.AddRoleToDBInstanceInput) *RDSAddRoleToDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-AddRoleToDBInstance", input)
	return &RDSAddRoleToDBInstanceFuture{Future: future}
}

func (a *stub) AddSourceIdentifierToSubscription(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	var output rds.AddSourceIdentifierToSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-AddSourceIdentifierToSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *rds.AddSourceIdentifierToSubscriptionInput) *RDSAddSourceIdentifierToSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-AddSourceIdentifierToSubscription", input)
	return &RDSAddSourceIdentifierToSubscriptionFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	var output rds.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *rds.AddTagsToResourceInput) *RDSAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-AddTagsToResource", input)
	return &RDSAddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	var output rds.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *rds.ApplyPendingMaintenanceActionInput) *RDSApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ApplyPendingMaintenanceAction", input)
	return &RDSApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) AuthorizeDBSecurityGroupIngress(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	var output rds.AuthorizeDBSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-AuthorizeDBSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) *RDSAuthorizeDBSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-AuthorizeDBSecurityGroupIngress", input)
	return &RDSAuthorizeDBSecurityGroupIngressFuture{Future: future}
}

func (a *stub) BacktrackDBCluster(ctx workflow.Context, input *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	var output rds.BacktrackDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-BacktrackDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BacktrackDBClusterAsync(ctx workflow.Context, input *rds.BacktrackDBClusterInput) *RDSBacktrackDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-BacktrackDBCluster", input)
	return &RDSBacktrackDBClusterFuture{Future: future}
}

func (a *stub) CancelExportTask(ctx workflow.Context, input *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	var output rds.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelExportTaskAsync(ctx workflow.Context, input *rds.CancelExportTaskInput) *RDSCancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CancelExportTask", input)
	return &RDSCancelExportTaskFuture{Future: future}
}

func (a *stub) CopyDBClusterParameterGroup(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	var output rds.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBClusterParameterGroupInput) *RDSCopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBClusterParameterGroup", input)
	return &RDSCopyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CopyDBClusterSnapshot(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	var output rds.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CopyDBClusterSnapshotInput) *RDSCopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBClusterSnapshot", input)
	return &RDSCopyDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CopyDBParameterGroup(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	var output rds.CopyDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBParameterGroupAsync(ctx workflow.Context, input *rds.CopyDBParameterGroupInput) *RDSCopyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBParameterGroup", input)
	return &RDSCopyDBParameterGroupFuture{Future: future}
}

func (a *stub) CopyDBSnapshot(ctx workflow.Context, input *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	var output rds.CopyDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBSnapshotAsync(ctx workflow.Context, input *rds.CopyDBSnapshotInput) *RDSCopyDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CopyDBSnapshot", input)
	return &RDSCopyDBSnapshotFuture{Future: future}
}

func (a *stub) CopyOptionGroup(ctx workflow.Context, input *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	var output rds.CopyOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CopyOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyOptionGroupAsync(ctx workflow.Context, input *rds.CopyOptionGroupInput) *RDSCopyOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CopyOptionGroup", input)
	return &RDSCopyOptionGroupFuture{Future: future}
}

func (a *stub) CreateCustomAvailabilityZone(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	var output rds.CreateCustomAvailabilityZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateCustomAvailabilityZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.CreateCustomAvailabilityZoneInput) *RDSCreateCustomAvailabilityZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateCustomAvailabilityZone", input)
	return &RDSCreateCustomAvailabilityZoneFuture{Future: future}
}

func (a *stub) CreateDBCluster(ctx workflow.Context, input *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	var output rds.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterAsync(ctx workflow.Context, input *rds.CreateDBClusterInput) *RDSCreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBCluster", input)
	return &RDSCreateDBClusterFuture{Future: future}
}

func (a *stub) CreateDBClusterEndpoint(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	var output rds.CreateDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterEndpointAsync(ctx workflow.Context, input *rds.CreateDBClusterEndpointInput) *RDSCreateDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterEndpoint", input)
	return &RDSCreateDBClusterEndpointFuture{Future: future}
}

func (a *stub) CreateDBClusterParameterGroup(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	var output rds.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBClusterParameterGroupInput) *RDSCreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterParameterGroup", input)
	return &RDSCreateDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBClusterSnapshot(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	var output rds.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *rds.CreateDBClusterSnapshotInput) *RDSCreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBClusterSnapshot", input)
	return &RDSCreateDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBInstance(ctx workflow.Context, input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	var output rds.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBInstanceAsync(ctx workflow.Context, input *rds.CreateDBInstanceInput) *RDSCreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBInstance", input)
	return &RDSCreateDBInstanceFuture{Future: future}
}

func (a *stub) CreateDBInstanceReadReplica(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	var output rds.CreateDBInstanceReadReplicaOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBInstanceReadReplica", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBInstanceReadReplicaAsync(ctx workflow.Context, input *rds.CreateDBInstanceReadReplicaInput) *RDSCreateDBInstanceReadReplicaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBInstanceReadReplica", input)
	return &RDSCreateDBInstanceReadReplicaFuture{Future: future}
}

func (a *stub) CreateDBParameterGroup(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	var output rds.CreateDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBParameterGroupAsync(ctx workflow.Context, input *rds.CreateDBParameterGroupInput) *RDSCreateDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBParameterGroup", input)
	return &RDSCreateDBParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBProxy(ctx workflow.Context, input *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	var output rds.CreateDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBProxyAsync(ctx workflow.Context, input *rds.CreateDBProxyInput) *RDSCreateDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBProxy", input)
	return &RDSCreateDBProxyFuture{Future: future}
}

func (a *stub) CreateDBSecurityGroup(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	var output rds.CreateDBSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSecurityGroupAsync(ctx workflow.Context, input *rds.CreateDBSecurityGroupInput) *RDSCreateDBSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSecurityGroup", input)
	return &RDSCreateDBSecurityGroupFuture{Future: future}
}

func (a *stub) CreateDBSnapshot(ctx workflow.Context, input *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	var output rds.CreateDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSnapshotAsync(ctx workflow.Context, input *rds.CreateDBSnapshotInput) *RDSCreateDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSnapshot", input)
	return &RDSCreateDBSnapshotFuture{Future: future}
}

func (a *stub) CreateDBSubnetGroup(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	var output rds.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *rds.CreateDBSubnetGroupInput) *RDSCreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateDBSubnetGroup", input)
	return &RDSCreateDBSubnetGroupFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	var output rds.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *rds.CreateEventSubscriptionInput) *RDSCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateEventSubscription", input)
	return &RDSCreateEventSubscriptionFuture{Future: future}
}

func (a *stub) CreateGlobalCluster(ctx workflow.Context, input *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	var output rds.CreateGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGlobalClusterAsync(ctx workflow.Context, input *rds.CreateGlobalClusterInput) *RDSCreateGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateGlobalCluster", input)
	return &RDSCreateGlobalClusterFuture{Future: future}
}

func (a *stub) CreateOptionGroup(ctx workflow.Context, input *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	var output rds.CreateOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-CreateOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOptionGroupAsync(ctx workflow.Context, input *rds.CreateOptionGroupInput) *RDSCreateOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-CreateOptionGroup", input)
	return &RDSCreateOptionGroupFuture{Future: future}
}

func (a *stub) DeleteCustomAvailabilityZone(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	var output rds.DeleteCustomAvailabilityZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteCustomAvailabilityZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomAvailabilityZoneAsync(ctx workflow.Context, input *rds.DeleteCustomAvailabilityZoneInput) *RDSDeleteCustomAvailabilityZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteCustomAvailabilityZone", input)
	return &RDSDeleteCustomAvailabilityZoneFuture{Future: future}
}

func (a *stub) DeleteDBCluster(ctx workflow.Context, input *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	var output rds.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterAsync(ctx workflow.Context, input *rds.DeleteDBClusterInput) *RDSDeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBCluster", input)
	return &RDSDeleteDBClusterFuture{Future: future}
}

func (a *stub) DeleteDBClusterEndpoint(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	var output rds.DeleteDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterEndpointAsync(ctx workflow.Context, input *rds.DeleteDBClusterEndpointInput) *RDSDeleteDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterEndpoint", input)
	return &RDSDeleteDBClusterEndpointFuture{Future: future}
}

func (a *stub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	var output rds.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBClusterParameterGroupInput) *RDSDeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterParameterGroup", input)
	return &RDSDeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBClusterSnapshot(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	var output rds.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBClusterSnapshotInput) *RDSDeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBClusterSnapshot", input)
	return &RDSDeleteDBClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteDBInstance(ctx workflow.Context, input *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	var output rds.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBInstanceAsync(ctx workflow.Context, input *rds.DeleteDBInstanceInput) *RDSDeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBInstance", input)
	return &RDSDeleteDBInstanceFuture{Future: future}
}

func (a *stub) DeleteDBInstanceAutomatedBackup(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	var output rds.DeleteDBInstanceAutomatedBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBInstanceAutomatedBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBInstanceAutomatedBackupAsync(ctx workflow.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) *RDSDeleteDBInstanceAutomatedBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBInstanceAutomatedBackup", input)
	return &RDSDeleteDBInstanceAutomatedBackupFuture{Future: future}
}

func (a *stub) DeleteDBParameterGroup(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	var output rds.DeleteDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBParameterGroupAsync(ctx workflow.Context, input *rds.DeleteDBParameterGroupInput) *RDSDeleteDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBParameterGroup", input)
	return &RDSDeleteDBParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBProxy(ctx workflow.Context, input *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	var output rds.DeleteDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBProxyAsync(ctx workflow.Context, input *rds.DeleteDBProxyInput) *RDSDeleteDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBProxy", input)
	return &RDSDeleteDBProxyFuture{Future: future}
}

func (a *stub) DeleteDBSecurityGroup(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	var output rds.DeleteDBSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSecurityGroupAsync(ctx workflow.Context, input *rds.DeleteDBSecurityGroupInput) *RDSDeleteDBSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSecurityGroup", input)
	return &RDSDeleteDBSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteDBSnapshot(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	var output rds.DeleteDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSnapshotAsync(ctx workflow.Context, input *rds.DeleteDBSnapshotInput) *RDSDeleteDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSnapshot", input)
	return &RDSDeleteDBSnapshotFuture{Future: future}
}

func (a *stub) DeleteDBSubnetGroup(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	var output rds.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *rds.DeleteDBSubnetGroupInput) *RDSDeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteDBSubnetGroup", input)
	return &RDSDeleteDBSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	var output rds.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *rds.DeleteEventSubscriptionInput) *RDSDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteEventSubscription", input)
	return &RDSDeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteGlobalCluster(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	var output rds.DeleteGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGlobalClusterAsync(ctx workflow.Context, input *rds.DeleteGlobalClusterInput) *RDSDeleteGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteGlobalCluster", input)
	return &RDSDeleteGlobalClusterFuture{Future: future}
}

func (a *stub) DeleteInstallationMedia(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
	var output rds.DeleteInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstallationMediaAsync(ctx workflow.Context, input *rds.DeleteInstallationMediaInput) *RDSDeleteInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteInstallationMedia", input)
	return &RDSDeleteInstallationMediaFuture{Future: future}
}

func (a *stub) DeleteOptionGroup(ctx workflow.Context, input *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	var output rds.DeleteOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeleteOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOptionGroupAsync(ctx workflow.Context, input *rds.DeleteOptionGroupInput) *RDSDeleteOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeleteOptionGroup", input)
	return &RDSDeleteOptionGroupFuture{Future: future}
}

func (a *stub) DeregisterDBProxyTargets(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	var output rds.DeregisterDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DeregisterDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.DeregisterDBProxyTargetsInput) *RDSDeregisterDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DeregisterDBProxyTargets", input)
	return &RDSDeregisterDBProxyTargetsFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	var output rds.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *rds.DescribeAccountAttributesInput) *RDSDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeAccountAttributes", input)
	return &RDSDescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeCertificates(ctx workflow.Context, input *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	var output rds.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificatesAsync(ctx workflow.Context, input *rds.DescribeCertificatesInput) *RDSDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeCertificates", input)
	return &RDSDescribeCertificatesFuture{Future: future}
}

func (a *stub) DescribeCustomAvailabilityZones(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	var output rds.DescribeCustomAvailabilityZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeCustomAvailabilityZones", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCustomAvailabilityZonesAsync(ctx workflow.Context, input *rds.DescribeCustomAvailabilityZonesInput) *RDSDescribeCustomAvailabilityZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeCustomAvailabilityZones", input)
	return &RDSDescribeCustomAvailabilityZonesFuture{Future: future}
}

func (a *stub) DescribeDBClusterBacktracks(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	var output rds.DescribeDBClusterBacktracksOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterBacktracks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterBacktracksAsync(ctx workflow.Context, input *rds.DescribeDBClusterBacktracksInput) *RDSDescribeDBClusterBacktracksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterBacktracks", input)
	return &RDSDescribeDBClusterBacktracksFuture{Future: future}
}

func (a *stub) DescribeDBClusterEndpoints(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	var output rds.DescribeDBClusterEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterEndpointsAsync(ctx workflow.Context, input *rds.DescribeDBClusterEndpointsInput) *RDSDescribeDBClusterEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterEndpoints", input)
	return &RDSDescribeDBClusterEndpointsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	var output rds.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBClusterParameterGroupsInput) *RDSDescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterParameterGroups", input)
	return &RDSDescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameters(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	var output rds.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *rds.DescribeDBClusterParametersInput) *RDSDescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterParameters", input)
	return &RDSDescribeDBClusterParametersFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output rds.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) *RDSDescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterSnapshotAttributes", input)
	return &RDSDescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshots(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	var output rds.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) *RDSDescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusterSnapshots", input)
	return &RDSDescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeDBClusters(ctx workflow.Context, input *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	var output rds.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClustersAsync(ctx workflow.Context, input *rds.DescribeDBClustersInput) *RDSDescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBClusters", input)
	return &RDSDescribeDBClustersFuture{Future: future}
}

func (a *stub) DescribeDBEngineVersions(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	var output rds.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *rds.DescribeDBEngineVersionsInput) *RDSDescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBEngineVersions", input)
	return &RDSDescribeDBEngineVersionsFuture{Future: future}
}

func (a *stub) DescribeDBInstanceAutomatedBackups(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	var output rds.DescribeDBInstanceAutomatedBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBInstanceAutomatedBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBInstanceAutomatedBackupsAsync(ctx workflow.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) *RDSDescribeDBInstanceAutomatedBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBInstanceAutomatedBackups", input)
	return &RDSDescribeDBInstanceAutomatedBackupsFuture{Future: future}
}

func (a *stub) DescribeDBInstances(ctx workflow.Context, input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	var output rds.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBInstancesAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) *RDSDescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBInstances", input)
	return &RDSDescribeDBInstancesFuture{Future: future}
}

func (a *stub) DescribeDBLogFiles(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	var output rds.DescribeDBLogFilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBLogFiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBLogFilesAsync(ctx workflow.Context, input *rds.DescribeDBLogFilesInput) *RDSDescribeDBLogFilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBLogFiles", input)
	return &RDSDescribeDBLogFilesFuture{Future: future}
}

func (a *stub) DescribeDBParameterGroups(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	var output rds.DescribeDBParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBParameterGroupsAsync(ctx workflow.Context, input *rds.DescribeDBParameterGroupsInput) *RDSDescribeDBParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBParameterGroups", input)
	return &RDSDescribeDBParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBParameters(ctx workflow.Context, input *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	var output rds.DescribeDBParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBParametersAsync(ctx workflow.Context, input *rds.DescribeDBParametersInput) *RDSDescribeDBParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBParameters", input)
	return &RDSDescribeDBParametersFuture{Future: future}
}

func (a *stub) DescribeDBProxies(ctx workflow.Context, input *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	var output rds.DescribeDBProxiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBProxiesAsync(ctx workflow.Context, input *rds.DescribeDBProxiesInput) *RDSDescribeDBProxiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxies", input)
	return &RDSDescribeDBProxiesFuture{Future: future}
}

func (a *stub) DescribeDBProxyTargetGroups(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	var output rds.DescribeDBProxyTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxyTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBProxyTargetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetGroupsInput) *RDSDescribeDBProxyTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxyTargetGroups", input)
	return &RDSDescribeDBProxyTargetGroupsFuture{Future: future}
}

func (a *stub) DescribeDBProxyTargets(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	var output rds.DescribeDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBProxyTargetsAsync(ctx workflow.Context, input *rds.DescribeDBProxyTargetsInput) *RDSDescribeDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBProxyTargets", input)
	return &RDSDescribeDBProxyTargetsFuture{Future: future}
}

func (a *stub) DescribeDBSecurityGroups(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	var output rds.DescribeDBSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSecurityGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSecurityGroupsInput) *RDSDescribeDBSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSecurityGroups", input)
	return &RDSDescribeDBSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeDBSnapshotAttributes(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	var output rds.DescribeDBSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSnapshotAttributesAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotAttributesInput) *RDSDescribeDBSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSnapshotAttributes", input)
	return &RDSDescribeDBSnapshotAttributesFuture{Future: future}
}

func (a *stub) DescribeDBSnapshots(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	var output rds.DescribeDBSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSnapshotsAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) *RDSDescribeDBSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSnapshots", input)
	return &RDSDescribeDBSnapshotsFuture{Future: future}
}

func (a *stub) DescribeDBSubnetGroups(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	var output rds.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *rds.DescribeDBSubnetGroupsInput) *RDSDescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeDBSubnetGroups", input)
	return &RDSDescribeDBSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	var output rds.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultClusterParametersInput) *RDSDescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEngineDefaultClusterParameters", input)
	return &RDSDescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultParameters(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	var output rds.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *rds.DescribeEngineDefaultParametersInput) *RDSDescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEngineDefaultParameters", input)
	return &RDSDescribeEngineDefaultParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	var output rds.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *rds.DescribeEventCategoriesInput) *RDSDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEventCategories", input)
	return &RDSDescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	var output rds.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *rds.DescribeEventSubscriptionsInput) *RDSDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEventSubscriptions", input)
	return &RDSDescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	var output rds.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *rds.DescribeEventsInput) *RDSDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeEvents", input)
	return &RDSDescribeEventsFuture{Future: future}
}

func (a *stub) DescribeExportTasks(ctx workflow.Context, input *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	var output rds.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExportTasksAsync(ctx workflow.Context, input *rds.DescribeExportTasksInput) *RDSDescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeExportTasks", input)
	return &RDSDescribeExportTasksFuture{Future: future}
}

func (a *stub) DescribeGlobalClusters(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	var output rds.DescribeGlobalClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeGlobalClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalClustersAsync(ctx workflow.Context, input *rds.DescribeGlobalClustersInput) *RDSDescribeGlobalClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeGlobalClusters", input)
	return &RDSDescribeGlobalClustersFuture{Future: future}
}

func (a *stub) DescribeInstallationMedia(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
	var output rds.DescribeInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstallationMediaAsync(ctx workflow.Context, input *rds.DescribeInstallationMediaInput) *RDSDescribeInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeInstallationMedia", input)
	return &RDSDescribeInstallationMediaFuture{Future: future}
}

func (a *stub) DescribeOptionGroupOptions(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	var output rds.DescribeOptionGroupOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOptionGroupOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOptionGroupOptionsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupOptionsInput) *RDSDescribeOptionGroupOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOptionGroupOptions", input)
	return &RDSDescribeOptionGroupOptionsFuture{Future: future}
}

func (a *stub) DescribeOptionGroups(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	var output rds.DescribeOptionGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOptionGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOptionGroupsAsync(ctx workflow.Context, input *rds.DescribeOptionGroupsInput) *RDSDescribeOptionGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOptionGroups", input)
	return &RDSDescribeOptionGroupsFuture{Future: future}
}

func (a *stub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output rds.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) *RDSDescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeOrderableDBInstanceOptions", input)
	return &RDSDescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	var output rds.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *rds.DescribePendingMaintenanceActionsInput) *RDSDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribePendingMaintenanceActions", input)
	return &RDSDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) DescribeReservedDBInstances(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	var output rds.DescribeReservedDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeReservedDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedDBInstancesAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesInput) *RDSDescribeReservedDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeReservedDBInstances", input)
	return &RDSDescribeReservedDBInstancesFuture{Future: future}
}

func (a *stub) DescribeReservedDBInstancesOfferings(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	var output rds.DescribeReservedDBInstancesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeReservedDBInstancesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedDBInstancesOfferingsAsync(ctx workflow.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) *RDSDescribeReservedDBInstancesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeReservedDBInstancesOfferings", input)
	return &RDSDescribeReservedDBInstancesOfferingsFuture{Future: future}
}

func (a *stub) DescribeSourceRegions(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	var output rds.DescribeSourceRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeSourceRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSourceRegionsAsync(ctx workflow.Context, input *rds.DescribeSourceRegionsInput) *RDSDescribeSourceRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeSourceRegions", input)
	return &RDSDescribeSourceRegionsFuture{Future: future}
}

func (a *stub) DescribeValidDBInstanceModifications(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	var output rds.DescribeValidDBInstanceModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DescribeValidDBInstanceModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *rds.DescribeValidDBInstanceModificationsInput) *RDSDescribeValidDBInstanceModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DescribeValidDBInstanceModifications", input)
	return &RDSDescribeValidDBInstanceModificationsFuture{Future: future}
}

func (a *stub) DownloadDBLogFilePortion(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	var output rds.DownloadDBLogFilePortionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-DownloadDBLogFilePortion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DownloadDBLogFilePortionAsync(ctx workflow.Context, input *rds.DownloadDBLogFilePortionInput) *RDSDownloadDBLogFilePortionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-DownloadDBLogFilePortion", input)
	return &RDSDownloadDBLogFilePortionFuture{Future: future}
}

func (a *stub) FailoverDBCluster(ctx workflow.Context, input *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	var output rds.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FailoverDBClusterAsync(ctx workflow.Context, input *rds.FailoverDBClusterInput) *RDSFailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-FailoverDBCluster", input)
	return &RDSFailoverDBClusterFuture{Future: future}
}

func (a *stub) ImportInstallationMedia(ctx workflow.Context, input *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
	var output rds.ImportInstallationMediaOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ImportInstallationMedia", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportInstallationMediaAsync(ctx workflow.Context, input *rds.ImportInstallationMediaInput) *RDSImportInstallationMediaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ImportInstallationMedia", input)
	return &RDSImportInstallationMediaFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	var output rds.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *rds.ListTagsForResourceInput) *RDSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ListTagsForResource", input)
	return &RDSListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyCertificates(ctx workflow.Context, input *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	var output rds.ModifyCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCertificatesAsync(ctx workflow.Context, input *rds.ModifyCertificatesInput) *RDSModifyCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyCertificates", input)
	return &RDSModifyCertificatesFuture{Future: future}
}

func (a *stub) ModifyCurrentDBClusterCapacity(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	var output rds.ModifyCurrentDBClusterCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyCurrentDBClusterCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCurrentDBClusterCapacityAsync(ctx workflow.Context, input *rds.ModifyCurrentDBClusterCapacityInput) *RDSModifyCurrentDBClusterCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyCurrentDBClusterCapacity", input)
	return &RDSModifyCurrentDBClusterCapacityFuture{Future: future}
}

func (a *stub) ModifyDBCluster(ctx workflow.Context, input *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	var output rds.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterAsync(ctx workflow.Context, input *rds.ModifyDBClusterInput) *RDSModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBCluster", input)
	return &RDSModifyDBClusterFuture{Future: future}
}

func (a *stub) ModifyDBClusterEndpoint(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	var output rds.ModifyDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterEndpointAsync(ctx workflow.Context, input *rds.ModifyDBClusterEndpointInput) *RDSModifyDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterEndpoint", input)
	return &RDSModifyDBClusterEndpointFuture{Future: future}
}

func (a *stub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBClusterParameterGroupInput) *RDSModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterParameterGroup", input)
	return &RDSModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output rds.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) *RDSModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBClusterSnapshotAttribute", input)
	return &RDSModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifyDBInstance(ctx workflow.Context, input *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	var output rds.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBInstanceAsync(ctx workflow.Context, input *rds.ModifyDBInstanceInput) *RDSModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBInstance", input)
	return &RDSModifyDBInstanceFuture{Future: future}
}

func (a *stub) ModifyDBParameterGroup(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBParameterGroupAsync(ctx workflow.Context, input *rds.ModifyDBParameterGroupInput) *RDSModifyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBParameterGroup", input)
	return &RDSModifyDBParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBProxy(ctx workflow.Context, input *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	var output rds.ModifyDBProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBProxyAsync(ctx workflow.Context, input *rds.ModifyDBProxyInput) *RDSModifyDBProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBProxy", input)
	return &RDSModifyDBProxyFuture{Future: future}
}

func (a *stub) ModifyDBProxyTargetGroup(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	var output rds.ModifyDBProxyTargetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBProxyTargetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBProxyTargetGroupAsync(ctx workflow.Context, input *rds.ModifyDBProxyTargetGroupInput) *RDSModifyDBProxyTargetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBProxyTargetGroup", input)
	return &RDSModifyDBProxyTargetGroupFuture{Future: future}
}

func (a *stub) ModifyDBSnapshot(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	var output rds.ModifyDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSnapshotAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotInput) *RDSModifyDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSnapshot", input)
	return &RDSModifyDBSnapshotFuture{Future: future}
}

func (a *stub) ModifyDBSnapshotAttribute(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	var output rds.ModifyDBSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSnapshotAttributeAsync(ctx workflow.Context, input *rds.ModifyDBSnapshotAttributeInput) *RDSModifyDBSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSnapshotAttribute", input)
	return &RDSModifyDBSnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifyDBSubnetGroup(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	var output rds.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *rds.ModifyDBSubnetGroupInput) *RDSModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyDBSubnetGroup", input)
	return &RDSModifyDBSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	var output rds.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *rds.ModifyEventSubscriptionInput) *RDSModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyEventSubscription", input)
	return &RDSModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) ModifyGlobalCluster(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	var output rds.ModifyGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyGlobalClusterAsync(ctx workflow.Context, input *rds.ModifyGlobalClusterInput) *RDSModifyGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyGlobalCluster", input)
	return &RDSModifyGlobalClusterFuture{Future: future}
}

func (a *stub) ModifyOptionGroup(ctx workflow.Context, input *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	var output rds.ModifyOptionGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-ModifyOptionGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyOptionGroupAsync(ctx workflow.Context, input *rds.ModifyOptionGroupInput) *RDSModifyOptionGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ModifyOptionGroup", input)
	return &RDSModifyOptionGroupFuture{Future: future}
}

func (a *stub) PromoteReadReplica(ctx workflow.Context, input *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	var output rds.PromoteReadReplicaOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-PromoteReadReplica", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PromoteReadReplicaAsync(ctx workflow.Context, input *rds.PromoteReadReplicaInput) *RDSPromoteReadReplicaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-PromoteReadReplica", input)
	return &RDSPromoteReadReplicaFuture{Future: future}
}

func (a *stub) PromoteReadReplicaDBCluster(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	var output rds.PromoteReadReplicaDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-PromoteReadReplicaDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *rds.PromoteReadReplicaDBClusterInput) *RDSPromoteReadReplicaDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-PromoteReadReplicaDBCluster", input)
	return &RDSPromoteReadReplicaDBClusterFuture{Future: future}
}

func (a *stub) PurchaseReservedDBInstancesOffering(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	var output rds.PurchaseReservedDBInstancesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-PurchaseReservedDBInstancesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedDBInstancesOfferingAsync(ctx workflow.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) *RDSPurchaseReservedDBInstancesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-PurchaseReservedDBInstancesOffering", input)
	return &RDSPurchaseReservedDBInstancesOfferingFuture{Future: future}
}

func (a *stub) RebootDBInstance(ctx workflow.Context, input *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	var output rds.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootDBInstanceAsync(ctx workflow.Context, input *rds.RebootDBInstanceInput) *RDSRebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RebootDBInstance", input)
	return &RDSRebootDBInstanceFuture{Future: future}
}

func (a *stub) RegisterDBProxyTargets(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	var output rds.RegisterDBProxyTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RegisterDBProxyTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDBProxyTargetsAsync(ctx workflow.Context, input *rds.RegisterDBProxyTargetsInput) *RDSRegisterDBProxyTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RegisterDBProxyTargets", input)
	return &RDSRegisterDBProxyTargetsFuture{Future: future}
}

func (a *stub) RemoveFromGlobalCluster(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	var output rds.RemoveFromGlobalClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RemoveFromGlobalCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFromGlobalClusterAsync(ctx workflow.Context, input *rds.RemoveFromGlobalClusterInput) *RDSRemoveFromGlobalClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RemoveFromGlobalCluster", input)
	return &RDSRemoveFromGlobalClusterFuture{Future: future}
}

func (a *stub) RemoveRoleFromDBCluster(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	var output rds.RemoveRoleFromDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RemoveRoleFromDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBClusterInput) *RDSRemoveRoleFromDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RemoveRoleFromDBCluster", input)
	return &RDSRemoveRoleFromDBClusterFuture{Future: future}
}

func (a *stub) RemoveRoleFromDBInstance(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	var output rds.RemoveRoleFromDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RemoveRoleFromDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveRoleFromDBInstanceAsync(ctx workflow.Context, input *rds.RemoveRoleFromDBInstanceInput) *RDSRemoveRoleFromDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RemoveRoleFromDBInstance", input)
	return &RDSRemoveRoleFromDBInstanceFuture{Future: future}
}

func (a *stub) RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output rds.RemoveSourceIdentifierFromSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RemoveSourceIdentifierFromSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) *RDSRemoveSourceIdentifierFromSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RemoveSourceIdentifierFromSubscription", input)
	return &RDSRemoveSourceIdentifierFromSubscriptionFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	var output rds.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *rds.RemoveTagsFromResourceInput) *RDSRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RemoveTagsFromResource", input)
	return &RDSRemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetDBClusterParameterGroup(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	var output rds.DBClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-rds-ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBClusterParameterGroupInput) *RDSResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ResetDBClusterParameterGroup", input)
	return &RDSResetDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ResetDBParameterGroup(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	var output rds.DBParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-rds-ResetDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBParameterGroupAsync(ctx workflow.Context, input *rds.ResetDBParameterGroupInput) *RDSResetDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-ResetDBParameterGroup", input)
	return &RDSResetDBParameterGroupFuture{Future: future}
}

func (a *stub) RestoreDBClusterFromS3(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	var output rds.RestoreDBClusterFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterFromS3Async(ctx workflow.Context, input *rds.RestoreDBClusterFromS3Input) *RDSRestoreDBClusterFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterFromS3", input)
	return &RDSRestoreDBClusterFromS3Future{Future: future}
}

func (a *stub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	var output rds.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBClusterFromSnapshotInput) *RDSRestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterFromSnapshot", input)
	return &RDSRestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *stub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	var output rds.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBClusterToPointInTimeInput) *RDSRestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBClusterToPointInTime", input)
	return &RDSRestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *stub) RestoreDBInstanceFromDBSnapshot(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	var output rds.RestoreDBInstanceFromDBSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceFromDBSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBInstanceFromDBSnapshotAsync(ctx workflow.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) *RDSRestoreDBInstanceFromDBSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceFromDBSnapshot", input)
	return &RDSRestoreDBInstanceFromDBSnapshotFuture{Future: future}
}

func (a *stub) RestoreDBInstanceFromS3(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	var output rds.RestoreDBInstanceFromS3Output
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceFromS3", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBInstanceFromS3Async(ctx workflow.Context, input *rds.RestoreDBInstanceFromS3Input) *RDSRestoreDBInstanceFromS3Future {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceFromS3", input)
	return &RDSRestoreDBInstanceFromS3Future{Future: future}
}

func (a *stub) RestoreDBInstanceToPointInTime(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	var output rds.RestoreDBInstanceToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBInstanceToPointInTimeAsync(ctx workflow.Context, input *rds.RestoreDBInstanceToPointInTimeInput) *RDSRestoreDBInstanceToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RestoreDBInstanceToPointInTime", input)
	return &RDSRestoreDBInstanceToPointInTimeFuture{Future: future}
}

func (a *stub) RevokeDBSecurityGroupIngress(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	var output rds.RevokeDBSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-RevokeDBSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeDBSecurityGroupIngressAsync(ctx workflow.Context, input *rds.RevokeDBSecurityGroupIngressInput) *RDSRevokeDBSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-RevokeDBSecurityGroupIngress", input)
	return &RDSRevokeDBSecurityGroupIngressFuture{Future: future}
}

func (a *stub) StartActivityStream(ctx workflow.Context, input *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	var output rds.StartActivityStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StartActivityStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartActivityStreamAsync(ctx workflow.Context, input *rds.StartActivityStreamInput) *RDSStartActivityStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StartActivityStream", input)
	return &RDSStartActivityStreamFuture{Future: future}
}

func (a *stub) StartDBCluster(ctx workflow.Context, input *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	var output rds.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDBClusterAsync(ctx workflow.Context, input *rds.StartDBClusterInput) *RDSStartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StartDBCluster", input)
	return &RDSStartDBClusterFuture{Future: future}
}

func (a *stub) StartDBInstance(ctx workflow.Context, input *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	var output rds.StartDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StartDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDBInstanceAsync(ctx workflow.Context, input *rds.StartDBInstanceInput) *RDSStartDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StartDBInstance", input)
	return &RDSStartDBInstanceFuture{Future: future}
}

func (a *stub) StartExportTask(ctx workflow.Context, input *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	var output rds.StartExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StartExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartExportTaskAsync(ctx workflow.Context, input *rds.StartExportTaskInput) *RDSStartExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StartExportTask", input)
	return &RDSStartExportTaskFuture{Future: future}
}

func (a *stub) StopActivityStream(ctx workflow.Context, input *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	var output rds.StopActivityStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StopActivityStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopActivityStreamAsync(ctx workflow.Context, input *rds.StopActivityStreamInput) *RDSStopActivityStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StopActivityStream", input)
	return &RDSStopActivityStreamFuture{Future: future}
}

func (a *stub) StopDBCluster(ctx workflow.Context, input *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	var output rds.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDBClusterAsync(ctx workflow.Context, input *rds.StopDBClusterInput) *RDSStopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StopDBCluster", input)
	return &RDSStopDBClusterFuture{Future: future}
}

func (a *stub) StopDBInstance(ctx workflow.Context, input *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	var output rds.StopDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-rds-StopDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDBInstanceAsync(ctx workflow.Context, input *rds.StopDBInstanceInput) *RDSStopDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-StopDBInstance", input)
	return &RDSStopDBInstanceFuture{Future: future}
}

func (a *stub) WaitUntilDBClusterSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBClusterSnapshotAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBClusterSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBClusterSnapshotAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBClusterSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBClusterSnapshotDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBClusterSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBClusterSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBClusterSnapshotDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *rds.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *rds.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBSnapshotAvailable(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBSnapshotAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBSnapshotAvailableAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBSnapshotAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBSnapshotDeleted(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBSnapshotDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBSnapshotDeletedAsync(ctx workflow.Context, input *rds.DescribeDBSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rds-WaitUntilDBSnapshotDeleted", input)
	return clients.NewVoidFuture(future)
}
