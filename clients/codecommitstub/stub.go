// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codecommitstub

import (
	"github.com/aws/aws-sdk-go/service/codecommit"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateApprovalRuleTemplateWithRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateApprovalRuleTemplateWithRepositoryFuture) Get(ctx workflow.Context) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchAssociateApprovalRuleTemplateWithRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchAssociateApprovalRuleTemplateWithRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisassociateApprovalRuleTemplateFromRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisassociateApprovalRuleTemplateFromRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetCommitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetCommitsFuture) Get(ctx workflow.Context) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBranchFuture) Get(ctx workflow.Context) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePullRequestApprovalRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRepositoryFuture) Get(ctx workflow.Context) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUnreferencedMergeCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUnreferencedMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBranchFuture) Get(ctx workflow.Context) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCommentContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCommentContentFuture) Get(ctx workflow.Context) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFileFuture) Get(ctx workflow.Context) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePullRequestApprovalRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePullRequestApprovalRuleFuture) Get(ctx workflow.Context) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePullRequestEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePullRequestEventsFuture) Get(ctx workflow.Context) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateApprovalRuleTemplateFromRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateApprovalRuleTemplateFromRepositoryFuture) Get(ctx workflow.Context) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EvaluatePullRequestApprovalRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EvaluatePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBlobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBlobFuture) Get(ctx workflow.Context) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBranchFuture) Get(ctx workflow.Context) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCommentFuture) Get(ctx workflow.Context) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCommentReactionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCommentReactionsFuture) Get(ctx workflow.Context) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCommentsForComparedCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCommentsForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCommitFuture) Get(ctx workflow.Context) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDifferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDifferencesFuture) Get(ctx workflow.Context) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFileFuture) Get(ctx workflow.Context) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFolderFuture) Get(ctx workflow.Context) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMergeCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMergeCommitFuture) Get(ctx workflow.Context) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMergeConflictsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMergeConflictsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMergeOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMergeOptionsFuture) Get(ctx workflow.Context) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPullRequestApprovalStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPullRequestApprovalStatesFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPullRequestOverrideStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPullRequestOverrideStateFuture) Get(ctx workflow.Context) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApprovalRuleTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApprovalRuleTemplatesFuture) Get(ctx workflow.Context) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedApprovalRuleTemplatesForRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedApprovalRuleTemplatesForRepositoryFuture) Get(ctx workflow.Context) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBranchesFuture) Get(ctx workflow.Context) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPullRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPullRequestsFuture) Get(ctx workflow.Context) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRepositoriesFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRepositoriesForApprovalRuleTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRepositoriesForApprovalRuleTemplateFuture) Get(ctx workflow.Context) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergeBranchesByFastForwardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergeBranchesByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergeBranchesBySquashFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergeBranchesBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergeBranchesByThreeWayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergeBranchesByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergePullRequestByFastForwardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergePullRequestByFastForwardFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergePullRequestBySquashFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergePullRequestBySquashFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MergePullRequestByThreeWayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MergePullRequestByThreeWayFuture) Get(ctx workflow.Context) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OverridePullRequestApprovalRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OverridePullRequestApprovalRulesFuture) Get(ctx workflow.Context) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PostCommentForComparedCommitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PostCommentForComparedCommitFuture) Get(ctx workflow.Context) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PostCommentReplyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PostCommentReplyFuture) Get(ctx workflow.Context) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutCommentReactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutCommentReactionFuture) Get(ctx workflow.Context) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutFileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutFileFuture) Get(ctx workflow.Context) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestRepositoryTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestRepositoryTriggersFuture) Get(ctx workflow.Context) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApprovalRuleTemplateContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApprovalRuleTemplateContentFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApprovalRuleTemplateDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApprovalRuleTemplateDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApprovalRuleTemplateNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApprovalRuleTemplateNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCommentFuture) Get(ctx workflow.Context) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDefaultBranchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDefaultBranchFuture) Get(ctx workflow.Context) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePullRequestApprovalRuleContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePullRequestApprovalRuleContentFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePullRequestApprovalStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePullRequestApprovalStateFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePullRequestDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePullRequestDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePullRequestStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePullRequestStatusFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePullRequestTitleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePullRequestTitleFuture) Get(ctx workflow.Context) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRepositoryDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRepositoryDescriptionFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRepositoryNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRepositoryNameFuture) Get(ctx workflow.Context) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateApprovalRuleTemplateWithRepository(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	var output codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-AssociateApprovalRuleTemplateWithRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateApprovalRuleTemplateWithRepositoryAsync(ctx workflow.Context, input *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) *AssociateApprovalRuleTemplateWithRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-AssociateApprovalRuleTemplateWithRepository", input)
	return &AssociateApprovalRuleTemplateWithRepositoryFuture{Future: future}
}

func (a *stub) BatchAssociateApprovalRuleTemplateWithRepositories(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {
	var output codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchAssociateApprovalRuleTemplateWithRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) *BatchAssociateApprovalRuleTemplateWithRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchAssociateApprovalRuleTemplateWithRepositories", input)
	return &BatchAssociateApprovalRuleTemplateWithRepositoriesFuture{Future: future}
}

func (a *stub) BatchDescribeMergeConflicts(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) (*codecommit.BatchDescribeMergeConflictsOutput, error) {
	var output codecommit.BatchDescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchDescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.BatchDescribeMergeConflictsInput) *BatchDescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchDescribeMergeConflicts", input)
	return &BatchDescribeMergeConflictsFuture{Future: future}
}

func (a *stub) BatchDisassociateApprovalRuleTemplateFromRepositories(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {
	var output codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchDisassociateApprovalRuleTemplateFromRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) *BatchDisassociateApprovalRuleTemplateFromRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchDisassociateApprovalRuleTemplateFromRepositories", input)
	return &BatchDisassociateApprovalRuleTemplateFromRepositoriesFuture{Future: future}
}

func (a *stub) BatchGetCommits(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) (*codecommit.BatchGetCommitsOutput, error) {
	var output codecommit.BatchGetCommitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchGetCommits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetCommitsAsync(ctx workflow.Context, input *codecommit.BatchGetCommitsInput) *BatchGetCommitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchGetCommits", input)
	return &BatchGetCommitsFuture{Future: future}
}

func (a *stub) BatchGetRepositories(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error) {
	var output codecommit.BatchGetRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchGetRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetRepositoriesAsync(ctx workflow.Context, input *codecommit.BatchGetRepositoriesInput) *BatchGetRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-BatchGetRepositories", input)
	return &BatchGetRepositoriesFuture{Future: future}
}

func (a *stub) CreateApprovalRuleTemplate(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) (*codecommit.CreateApprovalRuleTemplateOutput, error) {
	var output codecommit.CreateApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.CreateApprovalRuleTemplateInput) *CreateApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateApprovalRuleTemplate", input)
	return &CreateApprovalRuleTemplateFuture{Future: future}
}

func (a *stub) CreateBranch(ctx workflow.Context, input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error) {
	var output codecommit.CreateBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBranchAsync(ctx workflow.Context, input *codecommit.CreateBranchInput) *CreateBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateBranch", input)
	return &CreateBranchFuture{Future: future}
}

func (a *stub) CreateCommit(ctx workflow.Context, input *codecommit.CreateCommitInput) (*codecommit.CreateCommitOutput, error) {
	var output codecommit.CreateCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCommitAsync(ctx workflow.Context, input *codecommit.CreateCommitInput) *CreateCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateCommit", input)
	return &CreateCommitFuture{Future: future}
}

func (a *stub) CreatePullRequestApprovalRule(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {
	var output codecommit.CreatePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreatePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.CreatePullRequestApprovalRuleInput) *CreatePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreatePullRequestApprovalRule", input)
	return &CreatePullRequestApprovalRuleFuture{Future: future}
}

func (a *stub) CreateRepository(ctx workflow.Context, input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error) {
	var output codecommit.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRepositoryAsync(ctx workflow.Context, input *codecommit.CreateRepositoryInput) *CreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateRepository", input)
	return &CreateRepositoryFuture{Future: future}
}

func (a *stub) CreateUnreferencedMergeCommit(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {
	var output codecommit.CreateUnreferencedMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateUnreferencedMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUnreferencedMergeCommitAsync(ctx workflow.Context, input *codecommit.CreateUnreferencedMergeCommitInput) *CreateUnreferencedMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-CreateUnreferencedMergeCommit", input)
	return &CreateUnreferencedMergeCommitFuture{Future: future}
}

func (a *stub) DeleteApprovalRuleTemplate(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {
	var output codecommit.DeleteApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.DeleteApprovalRuleTemplateInput) *DeleteApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteApprovalRuleTemplate", input)
	return &DeleteApprovalRuleTemplateFuture{Future: future}
}

func (a *stub) DeleteBranch(ctx workflow.Context, input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error) {
	var output codecommit.DeleteBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBranchAsync(ctx workflow.Context, input *codecommit.DeleteBranchInput) *DeleteBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteBranch", input)
	return &DeleteBranchFuture{Future: future}
}

func (a *stub) DeleteCommentContent(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) (*codecommit.DeleteCommentContentOutput, error) {
	var output codecommit.DeleteCommentContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteCommentContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCommentContentAsync(ctx workflow.Context, input *codecommit.DeleteCommentContentInput) *DeleteCommentContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteCommentContent", input)
	return &DeleteCommentContentFuture{Future: future}
}

func (a *stub) DeleteFile(ctx workflow.Context, input *codecommit.DeleteFileInput) (*codecommit.DeleteFileOutput, error) {
	var output codecommit.DeleteFileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteFile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileAsync(ctx workflow.Context, input *codecommit.DeleteFileInput) *DeleteFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteFile", input)
	return &DeleteFileFuture{Future: future}
}

func (a *stub) DeletePullRequestApprovalRule(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {
	var output codecommit.DeletePullRequestApprovalRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeletePullRequestApprovalRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePullRequestApprovalRuleAsync(ctx workflow.Context, input *codecommit.DeletePullRequestApprovalRuleInput) *DeletePullRequestApprovalRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeletePullRequestApprovalRule", input)
	return &DeletePullRequestApprovalRuleFuture{Future: future}
}

func (a *stub) DeleteRepository(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error) {
	var output codecommit.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryAsync(ctx workflow.Context, input *codecommit.DeleteRepositoryInput) *DeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DeleteRepository", input)
	return &DeleteRepositoryFuture{Future: future}
}

func (a *stub) DescribeMergeConflicts(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) (*codecommit.DescribeMergeConflictsOutput, error) {
	var output codecommit.DescribeMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DescribeMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMergeConflictsAsync(ctx workflow.Context, input *codecommit.DescribeMergeConflictsInput) *DescribeMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DescribeMergeConflicts", input)
	return &DescribeMergeConflictsFuture{Future: future}
}

func (a *stub) DescribePullRequestEvents(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) (*codecommit.DescribePullRequestEventsOutput, error) {
	var output codecommit.DescribePullRequestEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DescribePullRequestEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePullRequestEventsAsync(ctx workflow.Context, input *codecommit.DescribePullRequestEventsInput) *DescribePullRequestEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DescribePullRequestEvents", input)
	return &DescribePullRequestEventsFuture{Future: future}
}

func (a *stub) DisassociateApprovalRuleTemplateFromRepository(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {
	var output codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-DisassociateApprovalRuleTemplateFromRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateApprovalRuleTemplateFromRepositoryAsync(ctx workflow.Context, input *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) *DisassociateApprovalRuleTemplateFromRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-DisassociateApprovalRuleTemplateFromRepository", input)
	return &DisassociateApprovalRuleTemplateFromRepositoryFuture{Future: future}
}

func (a *stub) EvaluatePullRequestApprovalRules(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {
	var output codecommit.EvaluatePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-EvaluatePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EvaluatePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.EvaluatePullRequestApprovalRulesInput) *EvaluatePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-EvaluatePullRequestApprovalRules", input)
	return &EvaluatePullRequestApprovalRulesFuture{Future: future}
}

func (a *stub) GetApprovalRuleTemplate(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) (*codecommit.GetApprovalRuleTemplateOutput, error) {
	var output codecommit.GetApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.GetApprovalRuleTemplateInput) *GetApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetApprovalRuleTemplate", input)
	return &GetApprovalRuleTemplateFuture{Future: future}
}

func (a *stub) GetBlob(ctx workflow.Context, input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error) {
	var output codecommit.GetBlobOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetBlob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBlobAsync(ctx workflow.Context, input *codecommit.GetBlobInput) *GetBlobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetBlob", input)
	return &GetBlobFuture{Future: future}
}

func (a *stub) GetBranch(ctx workflow.Context, input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error) {
	var output codecommit.GetBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBranchAsync(ctx workflow.Context, input *codecommit.GetBranchInput) *GetBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetBranch", input)
	return &GetBranchFuture{Future: future}
}

func (a *stub) GetComment(ctx workflow.Context, input *codecommit.GetCommentInput) (*codecommit.GetCommentOutput, error) {
	var output codecommit.GetCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCommentAsync(ctx workflow.Context, input *codecommit.GetCommentInput) *GetCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetComment", input)
	return &GetCommentFuture{Future: future}
}

func (a *stub) GetCommentReactions(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) (*codecommit.GetCommentReactionsOutput, error) {
	var output codecommit.GetCommentReactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommentReactions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCommentReactionsAsync(ctx workflow.Context, input *codecommit.GetCommentReactionsInput) *GetCommentReactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommentReactions", input)
	return &GetCommentReactionsFuture{Future: future}
}

func (a *stub) GetCommentsForComparedCommit(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) (*codecommit.GetCommentsForComparedCommitOutput, error) {
	var output codecommit.GetCommentsForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommentsForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCommentsForComparedCommitAsync(ctx workflow.Context, input *codecommit.GetCommentsForComparedCommitInput) *GetCommentsForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommentsForComparedCommit", input)
	return &GetCommentsForComparedCommitFuture{Future: future}
}

func (a *stub) GetCommit(ctx workflow.Context, input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error) {
	var output codecommit.GetCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCommitAsync(ctx workflow.Context, input *codecommit.GetCommitInput) *GetCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetCommit", input)
	return &GetCommitFuture{Future: future}
}

func (a *stub) GetDifferences(ctx workflow.Context, input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error) {
	var output codecommit.GetDifferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetDifferences", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDifferencesAsync(ctx workflow.Context, input *codecommit.GetDifferencesInput) *GetDifferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetDifferences", input)
	return &GetDifferencesFuture{Future: future}
}

func (a *stub) GetFile(ctx workflow.Context, input *codecommit.GetFileInput) (*codecommit.GetFileOutput, error) {
	var output codecommit.GetFileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetFile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFileAsync(ctx workflow.Context, input *codecommit.GetFileInput) *GetFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetFile", input)
	return &GetFileFuture{Future: future}
}

func (a *stub) GetFolder(ctx workflow.Context, input *codecommit.GetFolderInput) (*codecommit.GetFolderOutput, error) {
	var output codecommit.GetFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFolderAsync(ctx workflow.Context, input *codecommit.GetFolderInput) *GetFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetFolder", input)
	return &GetFolderFuture{Future: future}
}

func (a *stub) GetMergeCommit(ctx workflow.Context, input *codecommit.GetMergeCommitInput) (*codecommit.GetMergeCommitOutput, error) {
	var output codecommit.GetMergeCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMergeCommitAsync(ctx workflow.Context, input *codecommit.GetMergeCommitInput) *GetMergeCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeCommit", input)
	return &GetMergeCommitFuture{Future: future}
}

func (a *stub) GetMergeConflicts(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) (*codecommit.GetMergeConflictsOutput, error) {
	var output codecommit.GetMergeConflictsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeConflicts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMergeConflictsAsync(ctx workflow.Context, input *codecommit.GetMergeConflictsInput) *GetMergeConflictsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeConflicts", input)
	return &GetMergeConflictsFuture{Future: future}
}

func (a *stub) GetMergeOptions(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) (*codecommit.GetMergeOptionsOutput, error) {
	var output codecommit.GetMergeOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMergeOptionsAsync(ctx workflow.Context, input *codecommit.GetMergeOptionsInput) *GetMergeOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetMergeOptions", input)
	return &GetMergeOptionsFuture{Future: future}
}

func (a *stub) GetPullRequestApprovalStates(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) (*codecommit.GetPullRequestApprovalStatesOutput, error) {
	var output codecommit.GetPullRequestApprovalStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetPullRequestApprovalStates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPullRequestApprovalStatesAsync(ctx workflow.Context, input *codecommit.GetPullRequestApprovalStatesInput) *GetPullRequestApprovalStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetPullRequestApprovalStates", input)
	return &GetPullRequestApprovalStatesFuture{Future: future}
}

func (a *stub) GetPullRequestOverrideState(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) (*codecommit.GetPullRequestOverrideStateOutput, error) {
	var output codecommit.GetPullRequestOverrideStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetPullRequestOverrideState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPullRequestOverrideStateAsync(ctx workflow.Context, input *codecommit.GetPullRequestOverrideStateInput) *GetPullRequestOverrideStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetPullRequestOverrideState", input)
	return &GetPullRequestOverrideStateFuture{Future: future}
}

func (a *stub) GetRepository(ctx workflow.Context, input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error) {
	var output codecommit.GetRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryAsync(ctx workflow.Context, input *codecommit.GetRepositoryInput) *GetRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetRepository", input)
	return &GetRepositoryFuture{Future: future}
}

func (a *stub) GetRepositoryTriggers(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error) {
	var output codecommit.GetRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-GetRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.GetRepositoryTriggersInput) *GetRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-GetRepositoryTriggers", input)
	return &GetRepositoryTriggersFuture{Future: future}
}

func (a *stub) ListApprovalRuleTemplates(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) (*codecommit.ListApprovalRuleTemplatesOutput, error) {
	var output codecommit.ListApprovalRuleTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListApprovalRuleTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApprovalRuleTemplatesAsync(ctx workflow.Context, input *codecommit.ListApprovalRuleTemplatesInput) *ListApprovalRuleTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListApprovalRuleTemplates", input)
	return &ListApprovalRuleTemplatesFuture{Future: future}
}

func (a *stub) ListAssociatedApprovalRuleTemplatesForRepository(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {
	var output codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListAssociatedApprovalRuleTemplatesForRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedApprovalRuleTemplatesForRepositoryAsync(ctx workflow.Context, input *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) *ListAssociatedApprovalRuleTemplatesForRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListAssociatedApprovalRuleTemplatesForRepository", input)
	return &ListAssociatedApprovalRuleTemplatesForRepositoryFuture{Future: future}
}

func (a *stub) ListBranches(ctx workflow.Context, input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error) {
	var output codecommit.ListBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBranchesAsync(ctx workflow.Context, input *codecommit.ListBranchesInput) *ListBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListBranches", input)
	return &ListBranchesFuture{Future: future}
}

func (a *stub) ListPullRequests(ctx workflow.Context, input *codecommit.ListPullRequestsInput) (*codecommit.ListPullRequestsOutput, error) {
	var output codecommit.ListPullRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListPullRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPullRequestsAsync(ctx workflow.Context, input *codecommit.ListPullRequestsInput) *ListPullRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListPullRequests", input)
	return &ListPullRequestsFuture{Future: future}
}

func (a *stub) ListRepositories(ctx workflow.Context, input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error) {
	var output codecommit.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesAsync(ctx workflow.Context, input *codecommit.ListRepositoriesInput) *ListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListRepositories", input)
	return &ListRepositoriesFuture{Future: future}
}

func (a *stub) ListRepositoriesForApprovalRuleTemplate(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {
	var output codecommit.ListRepositoriesForApprovalRuleTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListRepositoriesForApprovalRuleTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesForApprovalRuleTemplateAsync(ctx workflow.Context, input *codecommit.ListRepositoriesForApprovalRuleTemplateInput) *ListRepositoriesForApprovalRuleTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListRepositoriesForApprovalRuleTemplate", input)
	return &ListRepositoriesForApprovalRuleTemplateFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) (*codecommit.ListTagsForResourceOutput, error) {
	var output codecommit.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codecommit.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) MergeBranchesByFastForward(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) (*codecommit.MergeBranchesByFastForwardOutput, error) {
	var output codecommit.MergeBranchesByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergeBranchesByFastForwardAsync(ctx workflow.Context, input *codecommit.MergeBranchesByFastForwardInput) *MergeBranchesByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesByFastForward", input)
	return &MergeBranchesByFastForwardFuture{Future: future}
}

func (a *stub) MergeBranchesBySquash(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) (*codecommit.MergeBranchesBySquashOutput, error) {
	var output codecommit.MergeBranchesBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergeBranchesBySquashAsync(ctx workflow.Context, input *codecommit.MergeBranchesBySquashInput) *MergeBranchesBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesBySquash", input)
	return &MergeBranchesBySquashFuture{Future: future}
}

func (a *stub) MergeBranchesByThreeWay(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) (*codecommit.MergeBranchesByThreeWayOutput, error) {
	var output codecommit.MergeBranchesByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergeBranchesByThreeWayAsync(ctx workflow.Context, input *codecommit.MergeBranchesByThreeWayInput) *MergeBranchesByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergeBranchesByThreeWay", input)
	return &MergeBranchesByThreeWayFuture{Future: future}
}

func (a *stub) MergePullRequestByFastForward(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) (*codecommit.MergePullRequestByFastForwardOutput, error) {
	var output codecommit.MergePullRequestByFastForwardOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestByFastForward", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergePullRequestByFastForwardAsync(ctx workflow.Context, input *codecommit.MergePullRequestByFastForwardInput) *MergePullRequestByFastForwardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestByFastForward", input)
	return &MergePullRequestByFastForwardFuture{Future: future}
}

func (a *stub) MergePullRequestBySquash(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) (*codecommit.MergePullRequestBySquashOutput, error) {
	var output codecommit.MergePullRequestBySquashOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestBySquash", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergePullRequestBySquashAsync(ctx workflow.Context, input *codecommit.MergePullRequestBySquashInput) *MergePullRequestBySquashFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestBySquash", input)
	return &MergePullRequestBySquashFuture{Future: future}
}

func (a *stub) MergePullRequestByThreeWay(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) (*codecommit.MergePullRequestByThreeWayOutput, error) {
	var output codecommit.MergePullRequestByThreeWayOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestByThreeWay", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergePullRequestByThreeWayAsync(ctx workflow.Context, input *codecommit.MergePullRequestByThreeWayInput) *MergePullRequestByThreeWayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-MergePullRequestByThreeWay", input)
	return &MergePullRequestByThreeWayFuture{Future: future}
}

func (a *stub) OverridePullRequestApprovalRules(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {
	var output codecommit.OverridePullRequestApprovalRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-OverridePullRequestApprovalRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) OverridePullRequestApprovalRulesAsync(ctx workflow.Context, input *codecommit.OverridePullRequestApprovalRulesInput) *OverridePullRequestApprovalRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-OverridePullRequestApprovalRules", input)
	return &OverridePullRequestApprovalRulesFuture{Future: future}
}

func (a *stub) PostCommentForComparedCommit(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) (*codecommit.PostCommentForComparedCommitOutput, error) {
	var output codecommit.PostCommentForComparedCommitOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-PostCommentForComparedCommit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PostCommentForComparedCommitAsync(ctx workflow.Context, input *codecommit.PostCommentForComparedCommitInput) *PostCommentForComparedCommitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-PostCommentForComparedCommit", input)
	return &PostCommentForComparedCommitFuture{Future: future}
}

func (a *stub) PostCommentReply(ctx workflow.Context, input *codecommit.PostCommentReplyInput) (*codecommit.PostCommentReplyOutput, error) {
	var output codecommit.PostCommentReplyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-PostCommentReply", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PostCommentReplyAsync(ctx workflow.Context, input *codecommit.PostCommentReplyInput) *PostCommentReplyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-PostCommentReply", input)
	return &PostCommentReplyFuture{Future: future}
}

func (a *stub) PutCommentReaction(ctx workflow.Context, input *codecommit.PutCommentReactionInput) (*codecommit.PutCommentReactionOutput, error) {
	var output codecommit.PutCommentReactionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-PutCommentReaction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutCommentReactionAsync(ctx workflow.Context, input *codecommit.PutCommentReactionInput) *PutCommentReactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-PutCommentReaction", input)
	return &PutCommentReactionFuture{Future: future}
}

func (a *stub) PutFile(ctx workflow.Context, input *codecommit.PutFileInput) (*codecommit.PutFileOutput, error) {
	var output codecommit.PutFileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-PutFile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutFileAsync(ctx workflow.Context, input *codecommit.PutFileInput) *PutFileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-PutFile", input)
	return &PutFileFuture{Future: future}
}

func (a *stub) PutRepositoryTriggers(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error) {
	var output codecommit.PutRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-PutRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.PutRepositoryTriggersInput) *PutRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-PutRepositoryTriggers", input)
	return &PutRepositoryTriggersFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codecommit.TagResourceInput) (*codecommit.TagResourceOutput, error) {
	var output codecommit.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codecommit.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TestRepositoryTriggers(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error) {
	var output codecommit.TestRepositoryTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-TestRepositoryTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestRepositoryTriggersAsync(ctx workflow.Context, input *codecommit.TestRepositoryTriggersInput) *TestRepositoryTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-TestRepositoryTriggers", input)
	return &TestRepositoryTriggersFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codecommit.UntagResourceInput) (*codecommit.UntagResourceOutput, error) {
	var output codecommit.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codecommit.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApprovalRuleTemplateContent(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApprovalRuleTemplateContentAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateContentInput) *UpdateApprovalRuleTemplateContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateContent", input)
	return &UpdateApprovalRuleTemplateContentFuture{Future: future}
}

func (a *stub) UpdateApprovalRuleTemplateDescription(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApprovalRuleTemplateDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateDescriptionInput) *UpdateApprovalRuleTemplateDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateDescription", input)
	return &UpdateApprovalRuleTemplateDescriptionFuture{Future: future}
}

func (a *stub) UpdateApprovalRuleTemplateName(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {
	var output codecommit.UpdateApprovalRuleTemplateNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApprovalRuleTemplateNameAsync(ctx workflow.Context, input *codecommit.UpdateApprovalRuleTemplateNameInput) *UpdateApprovalRuleTemplateNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateApprovalRuleTemplateName", input)
	return &UpdateApprovalRuleTemplateNameFuture{Future: future}
}

func (a *stub) UpdateComment(ctx workflow.Context, input *codecommit.UpdateCommentInput) (*codecommit.UpdateCommentOutput, error) {
	var output codecommit.UpdateCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCommentAsync(ctx workflow.Context, input *codecommit.UpdateCommentInput) *UpdateCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateComment", input)
	return &UpdateCommentFuture{Future: future}
}

func (a *stub) UpdateDefaultBranch(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error) {
	var output codecommit.UpdateDefaultBranchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateDefaultBranch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDefaultBranchAsync(ctx workflow.Context, input *codecommit.UpdateDefaultBranchInput) *UpdateDefaultBranchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateDefaultBranch", input)
	return &UpdateDefaultBranchFuture{Future: future}
}

func (a *stub) UpdatePullRequestApprovalRuleContent(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {
	var output codecommit.UpdatePullRequestApprovalRuleContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestApprovalRuleContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePullRequestApprovalRuleContentAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalRuleContentInput) *UpdatePullRequestApprovalRuleContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestApprovalRuleContent", input)
	return &UpdatePullRequestApprovalRuleContentFuture{Future: future}
}

func (a *stub) UpdatePullRequestApprovalState(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {
	var output codecommit.UpdatePullRequestApprovalStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestApprovalState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePullRequestApprovalStateAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestApprovalStateInput) *UpdatePullRequestApprovalStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestApprovalState", input)
	return &UpdatePullRequestApprovalStateFuture{Future: future}
}

func (a *stub) UpdatePullRequestDescription(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) (*codecommit.UpdatePullRequestDescriptionOutput, error) {
	var output codecommit.UpdatePullRequestDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePullRequestDescriptionAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestDescriptionInput) *UpdatePullRequestDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestDescription", input)
	return &UpdatePullRequestDescriptionFuture{Future: future}
}

func (a *stub) UpdatePullRequestStatus(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) (*codecommit.UpdatePullRequestStatusOutput, error) {
	var output codecommit.UpdatePullRequestStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePullRequestStatusAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestStatusInput) *UpdatePullRequestStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestStatus", input)
	return &UpdatePullRequestStatusFuture{Future: future}
}

func (a *stub) UpdatePullRequestTitle(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) (*codecommit.UpdatePullRequestTitleOutput, error) {
	var output codecommit.UpdatePullRequestTitleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestTitle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePullRequestTitleAsync(ctx workflow.Context, input *codecommit.UpdatePullRequestTitleInput) *UpdatePullRequestTitleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdatePullRequestTitle", input)
	return &UpdatePullRequestTitleFuture{Future: future}
}

func (a *stub) UpdateRepositoryDescription(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	var output codecommit.UpdateRepositoryDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateRepositoryDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRepositoryDescriptionAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryDescriptionInput) *UpdateRepositoryDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateRepositoryDescription", input)
	return &UpdateRepositoryDescriptionFuture{Future: future}
}

func (a *stub) UpdateRepositoryName(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error) {
	var output codecommit.UpdateRepositoryNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateRepositoryName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRepositoryNameAsync(ctx workflow.Context, input *codecommit.UpdateRepositoryNameInput) *UpdateRepositoryNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codecommit-UpdateRepositoryName", input)
	return &UpdateRepositoryNameFuture{Future: future}
}
