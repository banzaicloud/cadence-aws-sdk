// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package route53stub

import (
	"github.com/aws/aws-sdk-go/service/route53"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type Route53AssociateVPCWithHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53AssociateVPCWithHostedZoneFuture) Get(ctx workflow.Context) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	var output route53.AssociateVPCWithHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ChangeResourceRecordSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ChangeResourceRecordSetsFuture) Get(ctx workflow.Context) (*route53.ChangeResourceRecordSetsOutput, error) {
	var output route53.ChangeResourceRecordSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ChangeTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ChangeTagsForResourceFuture) Get(ctx workflow.Context) (*route53.ChangeTagsForResourceOutput, error) {
	var output route53.ChangeTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateHealthCheckFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateHealthCheckFuture) Get(ctx workflow.Context) (*route53.CreateHealthCheckOutput, error) {
	var output route53.CreateHealthCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateHostedZoneFuture) Get(ctx workflow.Context) (*route53.CreateHostedZoneOutput, error) {
	var output route53.CreateHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateQueryLoggingConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateQueryLoggingConfigFuture) Get(ctx workflow.Context) (*route53.CreateQueryLoggingConfigOutput, error) {
	var output route53.CreateQueryLoggingConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateReusableDelegationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateReusableDelegationSetFuture) Get(ctx workflow.Context) (*route53.CreateReusableDelegationSetOutput, error) {
	var output route53.CreateReusableDelegationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateTrafficPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateTrafficPolicyFuture) Get(ctx workflow.Context) (*route53.CreateTrafficPolicyOutput, error) {
	var output route53.CreateTrafficPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateTrafficPolicyInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateTrafficPolicyInstanceFuture) Get(ctx workflow.Context) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	var output route53.CreateTrafficPolicyInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateTrafficPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateTrafficPolicyVersionFuture) Get(ctx workflow.Context) (*route53.CreateTrafficPolicyVersionOutput, error) {
	var output route53.CreateTrafficPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53CreateVPCAssociationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53CreateVPCAssociationAuthorizationFuture) Get(ctx workflow.Context) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	var output route53.CreateVPCAssociationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteHealthCheckFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteHealthCheckFuture) Get(ctx workflow.Context) (*route53.DeleteHealthCheckOutput, error) {
	var output route53.DeleteHealthCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteHostedZoneFuture) Get(ctx workflow.Context) (*route53.DeleteHostedZoneOutput, error) {
	var output route53.DeleteHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteQueryLoggingConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteQueryLoggingConfigFuture) Get(ctx workflow.Context) (*route53.DeleteQueryLoggingConfigOutput, error) {
	var output route53.DeleteQueryLoggingConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteReusableDelegationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteReusableDelegationSetFuture) Get(ctx workflow.Context) (*route53.DeleteReusableDelegationSetOutput, error) {
	var output route53.DeleteReusableDelegationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteTrafficPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteTrafficPolicyFuture) Get(ctx workflow.Context) (*route53.DeleteTrafficPolicyOutput, error) {
	var output route53.DeleteTrafficPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteTrafficPolicyInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteTrafficPolicyInstanceFuture) Get(ctx workflow.Context) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	var output route53.DeleteTrafficPolicyInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DeleteVPCAssociationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DeleteVPCAssociationAuthorizationFuture) Get(ctx workflow.Context) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	var output route53.DeleteVPCAssociationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53DisassociateVPCFromHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53DisassociateVPCFromHostedZoneFuture) Get(ctx workflow.Context) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	var output route53.DisassociateVPCFromHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetAccountLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetAccountLimitFuture) Get(ctx workflow.Context) (*route53.GetAccountLimitOutput, error) {
	var output route53.GetAccountLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetChangeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetChangeFuture) Get(ctx workflow.Context) (*route53.GetChangeOutput, error) {
	var output route53.GetChangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetCheckerIpRangesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetCheckerIpRangesFuture) Get(ctx workflow.Context) (*route53.GetCheckerIpRangesOutput, error) {
	var output route53.GetCheckerIpRangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetGeoLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetGeoLocationFuture) Get(ctx workflow.Context) (*route53.GetGeoLocationOutput, error) {
	var output route53.GetGeoLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHealthCheckFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHealthCheckFuture) Get(ctx workflow.Context) (*route53.GetHealthCheckOutput, error) {
	var output route53.GetHealthCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHealthCheckCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHealthCheckCountFuture) Get(ctx workflow.Context) (*route53.GetHealthCheckCountOutput, error) {
	var output route53.GetHealthCheckCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHealthCheckLastFailureReasonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHealthCheckLastFailureReasonFuture) Get(ctx workflow.Context) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	var output route53.GetHealthCheckLastFailureReasonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHealthCheckStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHealthCheckStatusFuture) Get(ctx workflow.Context) (*route53.GetHealthCheckStatusOutput, error) {
	var output route53.GetHealthCheckStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHostedZoneFuture) Get(ctx workflow.Context) (*route53.GetHostedZoneOutput, error) {
	var output route53.GetHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHostedZoneCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHostedZoneCountFuture) Get(ctx workflow.Context) (*route53.GetHostedZoneCountOutput, error) {
	var output route53.GetHostedZoneCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetHostedZoneLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetHostedZoneLimitFuture) Get(ctx workflow.Context) (*route53.GetHostedZoneLimitOutput, error) {
	var output route53.GetHostedZoneLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetQueryLoggingConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetQueryLoggingConfigFuture) Get(ctx workflow.Context) (*route53.GetQueryLoggingConfigOutput, error) {
	var output route53.GetQueryLoggingConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetReusableDelegationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetReusableDelegationSetFuture) Get(ctx workflow.Context) (*route53.GetReusableDelegationSetOutput, error) {
	var output route53.GetReusableDelegationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetReusableDelegationSetLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetReusableDelegationSetLimitFuture) Get(ctx workflow.Context) (*route53.GetReusableDelegationSetLimitOutput, error) {
	var output route53.GetReusableDelegationSetLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetTrafficPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetTrafficPolicyFuture) Get(ctx workflow.Context) (*route53.GetTrafficPolicyOutput, error) {
	var output route53.GetTrafficPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetTrafficPolicyInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetTrafficPolicyInstanceFuture) Get(ctx workflow.Context) (*route53.GetTrafficPolicyInstanceOutput, error) {
	var output route53.GetTrafficPolicyInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53GetTrafficPolicyInstanceCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53GetTrafficPolicyInstanceCountFuture) Get(ctx workflow.Context) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	var output route53.GetTrafficPolicyInstanceCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListGeoLocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListGeoLocationsFuture) Get(ctx workflow.Context) (*route53.ListGeoLocationsOutput, error) {
	var output route53.ListGeoLocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListHealthChecksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListHealthChecksFuture) Get(ctx workflow.Context) (*route53.ListHealthChecksOutput, error) {
	var output route53.ListHealthChecksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListHostedZonesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListHostedZonesFuture) Get(ctx workflow.Context) (*route53.ListHostedZonesOutput, error) {
	var output route53.ListHostedZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListHostedZonesByNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListHostedZonesByNameFuture) Get(ctx workflow.Context) (*route53.ListHostedZonesByNameOutput, error) {
	var output route53.ListHostedZonesByNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListHostedZonesByVPCFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListHostedZonesByVPCFuture) Get(ctx workflow.Context) (*route53.ListHostedZonesByVPCOutput, error) {
	var output route53.ListHostedZonesByVPCOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListQueryLoggingConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListQueryLoggingConfigsFuture) Get(ctx workflow.Context) (*route53.ListQueryLoggingConfigsOutput, error) {
	var output route53.ListQueryLoggingConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListResourceRecordSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListResourceRecordSetsFuture) Get(ctx workflow.Context) (*route53.ListResourceRecordSetsOutput, error) {
	var output route53.ListResourceRecordSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListReusableDelegationSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListReusableDelegationSetsFuture) Get(ctx workflow.Context) (*route53.ListReusableDelegationSetsOutput, error) {
	var output route53.ListReusableDelegationSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTagsForResourceFuture) Get(ctx workflow.Context) (*route53.ListTagsForResourceOutput, error) {
	var output route53.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTagsForResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTagsForResourcesFuture) Get(ctx workflow.Context) (*route53.ListTagsForResourcesOutput, error) {
	var output route53.ListTagsForResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTrafficPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTrafficPoliciesFuture) Get(ctx workflow.Context) (*route53.ListTrafficPoliciesOutput, error) {
	var output route53.ListTrafficPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTrafficPolicyInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTrafficPolicyInstancesFuture) Get(ctx workflow.Context) (*route53.ListTrafficPolicyInstancesOutput, error) {
	var output route53.ListTrafficPolicyInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTrafficPolicyInstancesByHostedZoneFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTrafficPolicyInstancesByHostedZoneFuture) Get(ctx workflow.Context) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	var output route53.ListTrafficPolicyInstancesByHostedZoneOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTrafficPolicyInstancesByPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTrafficPolicyInstancesByPolicyFuture) Get(ctx workflow.Context) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	var output route53.ListTrafficPolicyInstancesByPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListTrafficPolicyVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListTrafficPolicyVersionsFuture) Get(ctx workflow.Context) (*route53.ListTrafficPolicyVersionsOutput, error) {
	var output route53.ListTrafficPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ListVPCAssociationAuthorizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ListVPCAssociationAuthorizationsFuture) Get(ctx workflow.Context) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	var output route53.ListVPCAssociationAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53TestDNSAnswerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53TestDNSAnswerFuture) Get(ctx workflow.Context) (*route53.TestDNSAnswerOutput, error) {
	var output route53.TestDNSAnswerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53UpdateHealthCheckFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53UpdateHealthCheckFuture) Get(ctx workflow.Context) (*route53.UpdateHealthCheckOutput, error) {
	var output route53.UpdateHealthCheckOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53UpdateHostedZoneCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53UpdateHostedZoneCommentFuture) Get(ctx workflow.Context) (*route53.UpdateHostedZoneCommentOutput, error) {
	var output route53.UpdateHostedZoneCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53UpdateTrafficPolicyCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53UpdateTrafficPolicyCommentFuture) Get(ctx workflow.Context) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	var output route53.UpdateTrafficPolicyCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53UpdateTrafficPolicyInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53UpdateTrafficPolicyInstanceFuture) Get(ctx workflow.Context) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	var output route53.UpdateTrafficPolicyInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateVPCWithHostedZone(ctx workflow.Context, input *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	var output route53.AssociateVPCWithHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-AssociateVPCWithHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateVPCWithHostedZoneAsync(ctx workflow.Context, input *route53.AssociateVPCWithHostedZoneInput) *Route53AssociateVPCWithHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-AssociateVPCWithHostedZone", input)
	return &Route53AssociateVPCWithHostedZoneFuture{Future: future}
}

func (a *stub) ChangeResourceRecordSets(ctx workflow.Context, input *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	var output route53.ChangeResourceRecordSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ChangeResourceRecordSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangeResourceRecordSetsAsync(ctx workflow.Context, input *route53.ChangeResourceRecordSetsInput) *Route53ChangeResourceRecordSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ChangeResourceRecordSets", input)
	return &Route53ChangeResourceRecordSetsFuture{Future: future}
}

func (a *stub) ChangeTagsForResource(ctx workflow.Context, input *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error) {
	var output route53.ChangeTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ChangeTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangeTagsForResourceAsync(ctx workflow.Context, input *route53.ChangeTagsForResourceInput) *Route53ChangeTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ChangeTagsForResource", input)
	return &Route53ChangeTagsForResourceFuture{Future: future}
}

func (a *stub) CreateHealthCheck(ctx workflow.Context, input *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error) {
	var output route53.CreateHealthCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateHealthCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHealthCheckAsync(ctx workflow.Context, input *route53.CreateHealthCheckInput) *Route53CreateHealthCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateHealthCheck", input)
	return &Route53CreateHealthCheckFuture{Future: future}
}

func (a *stub) CreateHostedZone(ctx workflow.Context, input *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
	var output route53.CreateHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHostedZoneAsync(ctx workflow.Context, input *route53.CreateHostedZoneInput) *Route53CreateHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateHostedZone", input)
	return &Route53CreateHostedZoneFuture{Future: future}
}

func (a *stub) CreateQueryLoggingConfig(ctx workflow.Context, input *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error) {
	var output route53.CreateQueryLoggingConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateQueryLoggingConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateQueryLoggingConfigAsync(ctx workflow.Context, input *route53.CreateQueryLoggingConfigInput) *Route53CreateQueryLoggingConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateQueryLoggingConfig", input)
	return &Route53CreateQueryLoggingConfigFuture{Future: future}
}

func (a *stub) CreateReusableDelegationSet(ctx workflow.Context, input *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error) {
	var output route53.CreateReusableDelegationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateReusableDelegationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReusableDelegationSetAsync(ctx workflow.Context, input *route53.CreateReusableDelegationSetInput) *Route53CreateReusableDelegationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateReusableDelegationSet", input)
	return &Route53CreateReusableDelegationSetFuture{Future: future}
}

func (a *stub) CreateTrafficPolicy(ctx workflow.Context, input *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error) {
	var output route53.CreateTrafficPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficPolicyAsync(ctx workflow.Context, input *route53.CreateTrafficPolicyInput) *Route53CreateTrafficPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicy", input)
	return &Route53CreateTrafficPolicyFuture{Future: future}
}

func (a *stub) CreateTrafficPolicyInstance(ctx workflow.Context, input *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	var output route53.CreateTrafficPolicyInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicyInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficPolicyInstanceAsync(ctx workflow.Context, input *route53.CreateTrafficPolicyInstanceInput) *Route53CreateTrafficPolicyInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicyInstance", input)
	return &Route53CreateTrafficPolicyInstanceFuture{Future: future}
}

func (a *stub) CreateTrafficPolicyVersion(ctx workflow.Context, input *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error) {
	var output route53.CreateTrafficPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficPolicyVersionAsync(ctx workflow.Context, input *route53.CreateTrafficPolicyVersionInput) *Route53CreateTrafficPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateTrafficPolicyVersion", input)
	return &Route53CreateTrafficPolicyVersionFuture{Future: future}
}

func (a *stub) CreateVPCAssociationAuthorization(ctx workflow.Context, input *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	var output route53.CreateVPCAssociationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-CreateVPCAssociationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVPCAssociationAuthorizationAsync(ctx workflow.Context, input *route53.CreateVPCAssociationAuthorizationInput) *Route53CreateVPCAssociationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-CreateVPCAssociationAuthorization", input)
	return &Route53CreateVPCAssociationAuthorizationFuture{Future: future}
}

func (a *stub) DeleteHealthCheck(ctx workflow.Context, input *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error) {
	var output route53.DeleteHealthCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteHealthCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHealthCheckAsync(ctx workflow.Context, input *route53.DeleteHealthCheckInput) *Route53DeleteHealthCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteHealthCheck", input)
	return &Route53DeleteHealthCheckFuture{Future: future}
}

func (a *stub) DeleteHostedZone(ctx workflow.Context, input *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
	var output route53.DeleteHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHostedZoneAsync(ctx workflow.Context, input *route53.DeleteHostedZoneInput) *Route53DeleteHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteHostedZone", input)
	return &Route53DeleteHostedZoneFuture{Future: future}
}

func (a *stub) DeleteQueryLoggingConfig(ctx workflow.Context, input *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error) {
	var output route53.DeleteQueryLoggingConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteQueryLoggingConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteQueryLoggingConfigAsync(ctx workflow.Context, input *route53.DeleteQueryLoggingConfigInput) *Route53DeleteQueryLoggingConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteQueryLoggingConfig", input)
	return &Route53DeleteQueryLoggingConfigFuture{Future: future}
}

func (a *stub) DeleteReusableDelegationSet(ctx workflow.Context, input *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error) {
	var output route53.DeleteReusableDelegationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteReusableDelegationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReusableDelegationSetAsync(ctx workflow.Context, input *route53.DeleteReusableDelegationSetInput) *Route53DeleteReusableDelegationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteReusableDelegationSet", input)
	return &Route53DeleteReusableDelegationSetFuture{Future: future}
}

func (a *stub) DeleteTrafficPolicy(ctx workflow.Context, input *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error) {
	var output route53.DeleteTrafficPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteTrafficPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficPolicyAsync(ctx workflow.Context, input *route53.DeleteTrafficPolicyInput) *Route53DeleteTrafficPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteTrafficPolicy", input)
	return &Route53DeleteTrafficPolicyFuture{Future: future}
}

func (a *stub) DeleteTrafficPolicyInstance(ctx workflow.Context, input *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	var output route53.DeleteTrafficPolicyInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteTrafficPolicyInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficPolicyInstanceAsync(ctx workflow.Context, input *route53.DeleteTrafficPolicyInstanceInput) *Route53DeleteTrafficPolicyInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteTrafficPolicyInstance", input)
	return &Route53DeleteTrafficPolicyInstanceFuture{Future: future}
}

func (a *stub) DeleteVPCAssociationAuthorization(ctx workflow.Context, input *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	var output route53.DeleteVPCAssociationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DeleteVPCAssociationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVPCAssociationAuthorizationAsync(ctx workflow.Context, input *route53.DeleteVPCAssociationAuthorizationInput) *Route53DeleteVPCAssociationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DeleteVPCAssociationAuthorization", input)
	return &Route53DeleteVPCAssociationAuthorizationFuture{Future: future}
}

func (a *stub) DisassociateVPCFromHostedZone(ctx workflow.Context, input *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	var output route53.DisassociateVPCFromHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-DisassociateVPCFromHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateVPCFromHostedZoneAsync(ctx workflow.Context, input *route53.DisassociateVPCFromHostedZoneInput) *Route53DisassociateVPCFromHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-DisassociateVPCFromHostedZone", input)
	return &Route53DisassociateVPCFromHostedZoneFuture{Future: future}
}

func (a *stub) GetAccountLimit(ctx workflow.Context, input *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error) {
	var output route53.GetAccountLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetAccountLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountLimitAsync(ctx workflow.Context, input *route53.GetAccountLimitInput) *Route53GetAccountLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetAccountLimit", input)
	return &Route53GetAccountLimitFuture{Future: future}
}

func (a *stub) GetChange(ctx workflow.Context, input *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
	var output route53.GetChangeOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetChange", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeAsync(ctx workflow.Context, input *route53.GetChangeInput) *Route53GetChangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetChange", input)
	return &Route53GetChangeFuture{Future: future}
}

func (a *stub) GetCheckerIpRanges(ctx workflow.Context, input *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error) {
	var output route53.GetCheckerIpRangesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetCheckerIpRanges", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCheckerIpRangesAsync(ctx workflow.Context, input *route53.GetCheckerIpRangesInput) *Route53GetCheckerIpRangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetCheckerIpRanges", input)
	return &Route53GetCheckerIpRangesFuture{Future: future}
}

func (a *stub) GetGeoLocation(ctx workflow.Context, input *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error) {
	var output route53.GetGeoLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetGeoLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGeoLocationAsync(ctx workflow.Context, input *route53.GetGeoLocationInput) *Route53GetGeoLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetGeoLocation", input)
	return &Route53GetGeoLocationFuture{Future: future}
}

func (a *stub) GetHealthCheck(ctx workflow.Context, input *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error) {
	var output route53.GetHealthCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHealthCheckAsync(ctx workflow.Context, input *route53.GetHealthCheckInput) *Route53GetHealthCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheck", input)
	return &Route53GetHealthCheckFuture{Future: future}
}

func (a *stub) GetHealthCheckCount(ctx workflow.Context, input *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error) {
	var output route53.GetHealthCheckCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHealthCheckCountAsync(ctx workflow.Context, input *route53.GetHealthCheckCountInput) *Route53GetHealthCheckCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckCount", input)
	return &Route53GetHealthCheckCountFuture{Future: future}
}

func (a *stub) GetHealthCheckLastFailureReason(ctx workflow.Context, input *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	var output route53.GetHealthCheckLastFailureReasonOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckLastFailureReason", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHealthCheckLastFailureReasonAsync(ctx workflow.Context, input *route53.GetHealthCheckLastFailureReasonInput) *Route53GetHealthCheckLastFailureReasonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckLastFailureReason", input)
	return &Route53GetHealthCheckLastFailureReasonFuture{Future: future}
}

func (a *stub) GetHealthCheckStatus(ctx workflow.Context, input *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error) {
	var output route53.GetHealthCheckStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHealthCheckStatusAsync(ctx workflow.Context, input *route53.GetHealthCheckStatusInput) *Route53GetHealthCheckStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHealthCheckStatus", input)
	return &Route53GetHealthCheckStatusFuture{Future: future}
}

func (a *stub) GetHostedZone(ctx workflow.Context, input *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
	var output route53.GetHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostedZoneAsync(ctx workflow.Context, input *route53.GetHostedZoneInput) *Route53GetHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZone", input)
	return &Route53GetHostedZoneFuture{Future: future}
}

func (a *stub) GetHostedZoneCount(ctx workflow.Context, input *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error) {
	var output route53.GetHostedZoneCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZoneCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostedZoneCountAsync(ctx workflow.Context, input *route53.GetHostedZoneCountInput) *Route53GetHostedZoneCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZoneCount", input)
	return &Route53GetHostedZoneCountFuture{Future: future}
}

func (a *stub) GetHostedZoneLimit(ctx workflow.Context, input *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error) {
	var output route53.GetHostedZoneLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZoneLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostedZoneLimitAsync(ctx workflow.Context, input *route53.GetHostedZoneLimitInput) *Route53GetHostedZoneLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetHostedZoneLimit", input)
	return &Route53GetHostedZoneLimitFuture{Future: future}
}

func (a *stub) GetQueryLoggingConfig(ctx workflow.Context, input *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error) {
	var output route53.GetQueryLoggingConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetQueryLoggingConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueryLoggingConfigAsync(ctx workflow.Context, input *route53.GetQueryLoggingConfigInput) *Route53GetQueryLoggingConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetQueryLoggingConfig", input)
	return &Route53GetQueryLoggingConfigFuture{Future: future}
}

func (a *stub) GetReusableDelegationSet(ctx workflow.Context, input *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error) {
	var output route53.GetReusableDelegationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetReusableDelegationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReusableDelegationSetAsync(ctx workflow.Context, input *route53.GetReusableDelegationSetInput) *Route53GetReusableDelegationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetReusableDelegationSet", input)
	return &Route53GetReusableDelegationSetFuture{Future: future}
}

func (a *stub) GetReusableDelegationSetLimit(ctx workflow.Context, input *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error) {
	var output route53.GetReusableDelegationSetLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetReusableDelegationSetLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReusableDelegationSetLimitAsync(ctx workflow.Context, input *route53.GetReusableDelegationSetLimitInput) *Route53GetReusableDelegationSetLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetReusableDelegationSetLimit", input)
	return &Route53GetReusableDelegationSetLimitFuture{Future: future}
}

func (a *stub) GetTrafficPolicy(ctx workflow.Context, input *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error) {
	var output route53.GetTrafficPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTrafficPolicyAsync(ctx workflow.Context, input *route53.GetTrafficPolicyInput) *Route53GetTrafficPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicy", input)
	return &Route53GetTrafficPolicyFuture{Future: future}
}

func (a *stub) GetTrafficPolicyInstance(ctx workflow.Context, input *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error) {
	var output route53.GetTrafficPolicyInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicyInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTrafficPolicyInstanceAsync(ctx workflow.Context, input *route53.GetTrafficPolicyInstanceInput) *Route53GetTrafficPolicyInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicyInstance", input)
	return &Route53GetTrafficPolicyInstanceFuture{Future: future}
}

func (a *stub) GetTrafficPolicyInstanceCount(ctx workflow.Context, input *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	var output route53.GetTrafficPolicyInstanceCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicyInstanceCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTrafficPolicyInstanceCountAsync(ctx workflow.Context, input *route53.GetTrafficPolicyInstanceCountInput) *Route53GetTrafficPolicyInstanceCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-GetTrafficPolicyInstanceCount", input)
	return &Route53GetTrafficPolicyInstanceCountFuture{Future: future}
}

func (a *stub) ListGeoLocations(ctx workflow.Context, input *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error) {
	var output route53.ListGeoLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListGeoLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGeoLocationsAsync(ctx workflow.Context, input *route53.ListGeoLocationsInput) *Route53ListGeoLocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListGeoLocations", input)
	return &Route53ListGeoLocationsFuture{Future: future}
}

func (a *stub) ListHealthChecks(ctx workflow.Context, input *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error) {
	var output route53.ListHealthChecksOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListHealthChecks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHealthChecksAsync(ctx workflow.Context, input *route53.ListHealthChecksInput) *Route53ListHealthChecksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListHealthChecks", input)
	return &Route53ListHealthChecksFuture{Future: future}
}

func (a *stub) ListHostedZones(ctx workflow.Context, input *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
	var output route53.ListHostedZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZones", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHostedZonesAsync(ctx workflow.Context, input *route53.ListHostedZonesInput) *Route53ListHostedZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZones", input)
	return &Route53ListHostedZonesFuture{Future: future}
}

func (a *stub) ListHostedZonesByName(ctx workflow.Context, input *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	var output route53.ListHostedZonesByNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZonesByName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHostedZonesByNameAsync(ctx workflow.Context, input *route53.ListHostedZonesByNameInput) *Route53ListHostedZonesByNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZonesByName", input)
	return &Route53ListHostedZonesByNameFuture{Future: future}
}

func (a *stub) ListHostedZonesByVPC(ctx workflow.Context, input *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error) {
	var output route53.ListHostedZonesByVPCOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZonesByVPC", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHostedZonesByVPCAsync(ctx workflow.Context, input *route53.ListHostedZonesByVPCInput) *Route53ListHostedZonesByVPCFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListHostedZonesByVPC", input)
	return &Route53ListHostedZonesByVPCFuture{Future: future}
}

func (a *stub) ListQueryLoggingConfigs(ctx workflow.Context, input *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error) {
	var output route53.ListQueryLoggingConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListQueryLoggingConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueryLoggingConfigsAsync(ctx workflow.Context, input *route53.ListQueryLoggingConfigsInput) *Route53ListQueryLoggingConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListQueryLoggingConfigs", input)
	return &Route53ListQueryLoggingConfigsFuture{Future: future}
}

func (a *stub) ListResourceRecordSets(ctx workflow.Context, input *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
	var output route53.ListResourceRecordSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListResourceRecordSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceRecordSetsAsync(ctx workflow.Context, input *route53.ListResourceRecordSetsInput) *Route53ListResourceRecordSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListResourceRecordSets", input)
	return &Route53ListResourceRecordSetsFuture{Future: future}
}

func (a *stub) ListReusableDelegationSets(ctx workflow.Context, input *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error) {
	var output route53.ListReusableDelegationSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListReusableDelegationSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReusableDelegationSetsAsync(ctx workflow.Context, input *route53.ListReusableDelegationSetsInput) *Route53ListReusableDelegationSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListReusableDelegationSets", input)
	return &Route53ListReusableDelegationSetsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
	var output route53.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *route53.ListTagsForResourceInput) *Route53ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTagsForResource", input)
	return &Route53ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTagsForResources(ctx workflow.Context, input *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error) {
	var output route53.ListTagsForResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTagsForResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourcesAsync(ctx workflow.Context, input *route53.ListTagsForResourcesInput) *Route53ListTagsForResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTagsForResources", input)
	return &Route53ListTagsForResourcesFuture{Future: future}
}

func (a *stub) ListTrafficPolicies(ctx workflow.Context, input *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error) {
	var output route53.ListTrafficPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrafficPoliciesAsync(ctx workflow.Context, input *route53.ListTrafficPoliciesInput) *Route53ListTrafficPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicies", input)
	return &Route53ListTrafficPoliciesFuture{Future: future}
}

func (a *stub) ListTrafficPolicyInstances(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error) {
	var output route53.ListTrafficPolicyInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrafficPolicyInstancesAsync(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesInput) *Route53ListTrafficPolicyInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstances", input)
	return &Route53ListTrafficPolicyInstancesFuture{Future: future}
}

func (a *stub) ListTrafficPolicyInstancesByHostedZone(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	var output route53.ListTrafficPolicyInstancesByHostedZoneOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstancesByHostedZone", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrafficPolicyInstancesByHostedZoneAsync(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesByHostedZoneInput) *Route53ListTrafficPolicyInstancesByHostedZoneFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstancesByHostedZone", input)
	return &Route53ListTrafficPolicyInstancesByHostedZoneFuture{Future: future}
}

func (a *stub) ListTrafficPolicyInstancesByPolicy(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	var output route53.ListTrafficPolicyInstancesByPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstancesByPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrafficPolicyInstancesByPolicyAsync(ctx workflow.Context, input *route53.ListTrafficPolicyInstancesByPolicyInput) *Route53ListTrafficPolicyInstancesByPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyInstancesByPolicy", input)
	return &Route53ListTrafficPolicyInstancesByPolicyFuture{Future: future}
}

func (a *stub) ListTrafficPolicyVersions(ctx workflow.Context, input *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error) {
	var output route53.ListTrafficPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrafficPolicyVersionsAsync(ctx workflow.Context, input *route53.ListTrafficPolicyVersionsInput) *Route53ListTrafficPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListTrafficPolicyVersions", input)
	return &Route53ListTrafficPolicyVersionsFuture{Future: future}
}

func (a *stub) ListVPCAssociationAuthorizations(ctx workflow.Context, input *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	var output route53.ListVPCAssociationAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-ListVPCAssociationAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVPCAssociationAuthorizationsAsync(ctx workflow.Context, input *route53.ListVPCAssociationAuthorizationsInput) *Route53ListVPCAssociationAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-ListVPCAssociationAuthorizations", input)
	return &Route53ListVPCAssociationAuthorizationsFuture{Future: future}
}

func (a *stub) TestDNSAnswer(ctx workflow.Context, input *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error) {
	var output route53.TestDNSAnswerOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-TestDNSAnswer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestDNSAnswerAsync(ctx workflow.Context, input *route53.TestDNSAnswerInput) *Route53TestDNSAnswerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-TestDNSAnswer", input)
	return &Route53TestDNSAnswerFuture{Future: future}
}

func (a *stub) UpdateHealthCheck(ctx workflow.Context, input *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error) {
	var output route53.UpdateHealthCheckOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-UpdateHealthCheck", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateHealthCheckAsync(ctx workflow.Context, input *route53.UpdateHealthCheckInput) *Route53UpdateHealthCheckFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-UpdateHealthCheck", input)
	return &Route53UpdateHealthCheckFuture{Future: future}
}

func (a *stub) UpdateHostedZoneComment(ctx workflow.Context, input *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error) {
	var output route53.UpdateHostedZoneCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-UpdateHostedZoneComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateHostedZoneCommentAsync(ctx workflow.Context, input *route53.UpdateHostedZoneCommentInput) *Route53UpdateHostedZoneCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-UpdateHostedZoneComment", input)
	return &Route53UpdateHostedZoneCommentFuture{Future: future}
}

func (a *stub) UpdateTrafficPolicyComment(ctx workflow.Context, input *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	var output route53.UpdateTrafficPolicyCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-UpdateTrafficPolicyComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrafficPolicyCommentAsync(ctx workflow.Context, input *route53.UpdateTrafficPolicyCommentInput) *Route53UpdateTrafficPolicyCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-UpdateTrafficPolicyComment", input)
	return &Route53UpdateTrafficPolicyCommentFuture{Future: future}
}

func (a *stub) UpdateTrafficPolicyInstance(ctx workflow.Context, input *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	var output route53.UpdateTrafficPolicyInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53-UpdateTrafficPolicyInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrafficPolicyInstanceAsync(ctx workflow.Context, input *route53.UpdateTrafficPolicyInstanceInput) *Route53UpdateTrafficPolicyInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-UpdateTrafficPolicyInstance", input)
	return &Route53UpdateTrafficPolicyInstanceFuture{Future: future}
}

func (a *stub) WaitUntilResourceRecordSetsChanged(ctx workflow.Context, input *route53.GetChangeInput) error {
	return workflow.ExecuteActivity(ctx, "aws-route53-WaitUntilResourceRecordSetsChanged", input).Get(ctx, nil)
}

func (a *stub) WaitUntilResourceRecordSetsChangedAsync(ctx workflow.Context, input *route53.GetChangeInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53-WaitUntilResourceRecordSetsChanged", input)
	return clients.NewVoidFuture(future)
}
