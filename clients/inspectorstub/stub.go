// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package inspectorstub

import (
	"github.com/aws/aws-sdk-go/service/inspector"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddAttributesToFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddAttributesToFindingsFuture) Get(ctx workflow.Context) (*inspector.AddAttributesToFindingsOutput, error) {
	var output inspector.AddAttributesToFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssessmentTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssessmentTargetFuture) Get(ctx workflow.Context) (*inspector.CreateAssessmentTargetOutput, error) {
	var output inspector.CreateAssessmentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssessmentTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssessmentTemplateFuture) Get(ctx workflow.Context) (*inspector.CreateAssessmentTemplateOutput, error) {
	var output inspector.CreateAssessmentTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateExclusionsPreviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateExclusionsPreviewFuture) Get(ctx workflow.Context) (*inspector.CreateExclusionsPreviewOutput, error) {
	var output inspector.CreateExclusionsPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceGroupFuture) Get(ctx workflow.Context) (*inspector.CreateResourceGroupOutput, error) {
	var output inspector.CreateResourceGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentRunFuture) Get(ctx workflow.Context) (*inspector.DeleteAssessmentRunOutput, error) {
	var output inspector.DeleteAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentTargetFuture) Get(ctx workflow.Context) (*inspector.DeleteAssessmentTargetOutput, error) {
	var output inspector.DeleteAssessmentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentTemplateFuture) Get(ctx workflow.Context) (*inspector.DeleteAssessmentTemplateOutput, error) {
	var output inspector.DeleteAssessmentTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssessmentRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssessmentRunsFuture) Get(ctx workflow.Context) (*inspector.DescribeAssessmentRunsOutput, error) {
	var output inspector.DescribeAssessmentRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssessmentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssessmentTargetsFuture) Get(ctx workflow.Context) (*inspector.DescribeAssessmentTargetsOutput, error) {
	var output inspector.DescribeAssessmentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssessmentTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssessmentTemplatesFuture) Get(ctx workflow.Context) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	var output inspector.DescribeAssessmentTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCrossAccountAccessRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCrossAccountAccessRoleFuture) Get(ctx workflow.Context) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	var output inspector.DescribeCrossAccountAccessRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExclusionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExclusionsFuture) Get(ctx workflow.Context) (*inspector.DescribeExclusionsOutput, error) {
	var output inspector.DescribeExclusionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFindingsFuture) Get(ctx workflow.Context) (*inspector.DescribeFindingsOutput, error) {
	var output inspector.DescribeFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourceGroupsFuture) Get(ctx workflow.Context) (*inspector.DescribeResourceGroupsOutput, error) {
	var output inspector.DescribeResourceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRulesPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRulesPackagesFuture) Get(ctx workflow.Context) (*inspector.DescribeRulesPackagesOutput, error) {
	var output inspector.DescribeRulesPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssessmentReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssessmentReportFuture) Get(ctx workflow.Context) (*inspector.GetAssessmentReportOutput, error) {
	var output inspector.GetAssessmentReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetExclusionsPreviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetExclusionsPreviewFuture) Get(ctx workflow.Context) (*inspector.GetExclusionsPreviewOutput, error) {
	var output inspector.GetExclusionsPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTelemetryMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTelemetryMetadataFuture) Get(ctx workflow.Context) (*inspector.GetTelemetryMetadataOutput, error) {
	var output inspector.GetTelemetryMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentRunAgentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentRunAgentsFuture) Get(ctx workflow.Context) (*inspector.ListAssessmentRunAgentsOutput, error) {
	var output inspector.ListAssessmentRunAgentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentRunsFuture) Get(ctx workflow.Context) (*inspector.ListAssessmentRunsOutput, error) {
	var output inspector.ListAssessmentRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentTargetsFuture) Get(ctx workflow.Context) (*inspector.ListAssessmentTargetsOutput, error) {
	var output inspector.ListAssessmentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentTemplatesFuture) Get(ctx workflow.Context) (*inspector.ListAssessmentTemplatesOutput, error) {
	var output inspector.ListAssessmentTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventSubscriptionsFuture) Get(ctx workflow.Context) (*inspector.ListEventSubscriptionsOutput, error) {
	var output inspector.ListEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListExclusionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListExclusionsFuture) Get(ctx workflow.Context) (*inspector.ListExclusionsOutput, error) {
	var output inspector.ListExclusionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFindingsFuture) Get(ctx workflow.Context) (*inspector.ListFindingsOutput, error) {
	var output inspector.ListFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRulesPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRulesPackagesFuture) Get(ctx workflow.Context) (*inspector.ListRulesPackagesOutput, error) {
	var output inspector.ListRulesPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*inspector.ListTagsForResourceOutput, error) {
	var output inspector.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PreviewAgentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PreviewAgentsFuture) Get(ctx workflow.Context) (*inspector.PreviewAgentsOutput, error) {
	var output inspector.PreviewAgentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterCrossAccountAccessRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterCrossAccountAccessRoleFuture) Get(ctx workflow.Context) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	var output inspector.RegisterCrossAccountAccessRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveAttributesFromFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveAttributesFromFindingsFuture) Get(ctx workflow.Context) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	var output inspector.RemoveAttributesFromFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetTagsForResourceFuture) Get(ctx workflow.Context) (*inspector.SetTagsForResourceOutput, error) {
	var output inspector.SetTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAssessmentRunFuture) Get(ctx workflow.Context) (*inspector.StartAssessmentRunOutput, error) {
	var output inspector.StartAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopAssessmentRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopAssessmentRunFuture) Get(ctx workflow.Context) (*inspector.StopAssessmentRunOutput, error) {
	var output inspector.StopAssessmentRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubscribeToEventFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubscribeToEventFuture) Get(ctx workflow.Context) (*inspector.SubscribeToEventOutput, error) {
	var output inspector.SubscribeToEventOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnsubscribeFromEventFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnsubscribeFromEventFuture) Get(ctx workflow.Context) (*inspector.UnsubscribeFromEventOutput, error) {
	var output inspector.UnsubscribeFromEventOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentTargetFuture) Get(ctx workflow.Context) (*inspector.UpdateAssessmentTargetOutput, error) {
	var output inspector.UpdateAssessmentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddAttributesToFindings(ctx workflow.Context, input *inspector.AddAttributesToFindingsInput) (*inspector.AddAttributesToFindingsOutput, error) {
	var output inspector.AddAttributesToFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-AddAttributesToFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddAttributesToFindingsAsync(ctx workflow.Context, input *inspector.AddAttributesToFindingsInput) *AddAttributesToFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-AddAttributesToFindings", input)
	return &AddAttributesToFindingsFuture{Future: future}
}

func (a *stub) CreateAssessmentTarget(ctx workflow.Context, input *inspector.CreateAssessmentTargetInput) (*inspector.CreateAssessmentTargetOutput, error) {
	var output inspector.CreateAssessmentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-CreateAssessmentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssessmentTargetAsync(ctx workflow.Context, input *inspector.CreateAssessmentTargetInput) *CreateAssessmentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-CreateAssessmentTarget", input)
	return &CreateAssessmentTargetFuture{Future: future}
}

func (a *stub) CreateAssessmentTemplate(ctx workflow.Context, input *inspector.CreateAssessmentTemplateInput) (*inspector.CreateAssessmentTemplateOutput, error) {
	var output inspector.CreateAssessmentTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-CreateAssessmentTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssessmentTemplateAsync(ctx workflow.Context, input *inspector.CreateAssessmentTemplateInput) *CreateAssessmentTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-CreateAssessmentTemplate", input)
	return &CreateAssessmentTemplateFuture{Future: future}
}

func (a *stub) CreateExclusionsPreview(ctx workflow.Context, input *inspector.CreateExclusionsPreviewInput) (*inspector.CreateExclusionsPreviewOutput, error) {
	var output inspector.CreateExclusionsPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-CreateExclusionsPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateExclusionsPreviewAsync(ctx workflow.Context, input *inspector.CreateExclusionsPreviewInput) *CreateExclusionsPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-CreateExclusionsPreview", input)
	return &CreateExclusionsPreviewFuture{Future: future}
}

func (a *stub) CreateResourceGroup(ctx workflow.Context, input *inspector.CreateResourceGroupInput) (*inspector.CreateResourceGroupOutput, error) {
	var output inspector.CreateResourceGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-CreateResourceGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceGroupAsync(ctx workflow.Context, input *inspector.CreateResourceGroupInput) *CreateResourceGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-CreateResourceGroup", input)
	return &CreateResourceGroupFuture{Future: future}
}

func (a *stub) DeleteAssessmentRun(ctx workflow.Context, input *inspector.DeleteAssessmentRunInput) (*inspector.DeleteAssessmentRunOutput, error) {
	var output inspector.DeleteAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentRunAsync(ctx workflow.Context, input *inspector.DeleteAssessmentRunInput) *DeleteAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentRun", input)
	return &DeleteAssessmentRunFuture{Future: future}
}

func (a *stub) DeleteAssessmentTarget(ctx workflow.Context, input *inspector.DeleteAssessmentTargetInput) (*inspector.DeleteAssessmentTargetOutput, error) {
	var output inspector.DeleteAssessmentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentTargetAsync(ctx workflow.Context, input *inspector.DeleteAssessmentTargetInput) *DeleteAssessmentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentTarget", input)
	return &DeleteAssessmentTargetFuture{Future: future}
}

func (a *stub) DeleteAssessmentTemplate(ctx workflow.Context, input *inspector.DeleteAssessmentTemplateInput) (*inspector.DeleteAssessmentTemplateOutput, error) {
	var output inspector.DeleteAssessmentTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentTemplateAsync(ctx workflow.Context, input *inspector.DeleteAssessmentTemplateInput) *DeleteAssessmentTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DeleteAssessmentTemplate", input)
	return &DeleteAssessmentTemplateFuture{Future: future}
}

func (a *stub) DescribeAssessmentRuns(ctx workflow.Context, input *inspector.DescribeAssessmentRunsInput) (*inspector.DescribeAssessmentRunsOutput, error) {
	var output inspector.DescribeAssessmentRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssessmentRunsAsync(ctx workflow.Context, input *inspector.DescribeAssessmentRunsInput) *DescribeAssessmentRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentRuns", input)
	return &DescribeAssessmentRunsFuture{Future: future}
}

func (a *stub) DescribeAssessmentTargets(ctx workflow.Context, input *inspector.DescribeAssessmentTargetsInput) (*inspector.DescribeAssessmentTargetsOutput, error) {
	var output inspector.DescribeAssessmentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssessmentTargetsAsync(ctx workflow.Context, input *inspector.DescribeAssessmentTargetsInput) *DescribeAssessmentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentTargets", input)
	return &DescribeAssessmentTargetsFuture{Future: future}
}

func (a *stub) DescribeAssessmentTemplates(ctx workflow.Context, input *inspector.DescribeAssessmentTemplatesInput) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	var output inspector.DescribeAssessmentTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssessmentTemplatesAsync(ctx workflow.Context, input *inspector.DescribeAssessmentTemplatesInput) *DescribeAssessmentTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeAssessmentTemplates", input)
	return &DescribeAssessmentTemplatesFuture{Future: future}
}

func (a *stub) DescribeCrossAccountAccessRole(ctx workflow.Context, input *inspector.DescribeCrossAccountAccessRoleInput) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	var output inspector.DescribeCrossAccountAccessRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeCrossAccountAccessRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCrossAccountAccessRoleAsync(ctx workflow.Context, input *inspector.DescribeCrossAccountAccessRoleInput) *DescribeCrossAccountAccessRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeCrossAccountAccessRole", input)
	return &DescribeCrossAccountAccessRoleFuture{Future: future}
}

func (a *stub) DescribeExclusions(ctx workflow.Context, input *inspector.DescribeExclusionsInput) (*inspector.DescribeExclusionsOutput, error) {
	var output inspector.DescribeExclusionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeExclusions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExclusionsAsync(ctx workflow.Context, input *inspector.DescribeExclusionsInput) *DescribeExclusionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeExclusions", input)
	return &DescribeExclusionsFuture{Future: future}
}

func (a *stub) DescribeFindings(ctx workflow.Context, input *inspector.DescribeFindingsInput) (*inspector.DescribeFindingsOutput, error) {
	var output inspector.DescribeFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFindingsAsync(ctx workflow.Context, input *inspector.DescribeFindingsInput) *DescribeFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeFindings", input)
	return &DescribeFindingsFuture{Future: future}
}

func (a *stub) DescribeResourceGroups(ctx workflow.Context, input *inspector.DescribeResourceGroupsInput) (*inspector.DescribeResourceGroupsOutput, error) {
	var output inspector.DescribeResourceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeResourceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourceGroupsAsync(ctx workflow.Context, input *inspector.DescribeResourceGroupsInput) *DescribeResourceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeResourceGroups", input)
	return &DescribeResourceGroupsFuture{Future: future}
}

func (a *stub) DescribeRulesPackages(ctx workflow.Context, input *inspector.DescribeRulesPackagesInput) (*inspector.DescribeRulesPackagesOutput, error) {
	var output inspector.DescribeRulesPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeRulesPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRulesPackagesAsync(ctx workflow.Context, input *inspector.DescribeRulesPackagesInput) *DescribeRulesPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-DescribeRulesPackages", input)
	return &DescribeRulesPackagesFuture{Future: future}
}

func (a *stub) GetAssessmentReport(ctx workflow.Context, input *inspector.GetAssessmentReportInput) (*inspector.GetAssessmentReportOutput, error) {
	var output inspector.GetAssessmentReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-GetAssessmentReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssessmentReportAsync(ctx workflow.Context, input *inspector.GetAssessmentReportInput) *GetAssessmentReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-GetAssessmentReport", input)
	return &GetAssessmentReportFuture{Future: future}
}

func (a *stub) GetExclusionsPreview(ctx workflow.Context, input *inspector.GetExclusionsPreviewInput) (*inspector.GetExclusionsPreviewOutput, error) {
	var output inspector.GetExclusionsPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-GetExclusionsPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExclusionsPreviewAsync(ctx workflow.Context, input *inspector.GetExclusionsPreviewInput) *GetExclusionsPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-GetExclusionsPreview", input)
	return &GetExclusionsPreviewFuture{Future: future}
}

func (a *stub) GetTelemetryMetadata(ctx workflow.Context, input *inspector.GetTelemetryMetadataInput) (*inspector.GetTelemetryMetadataOutput, error) {
	var output inspector.GetTelemetryMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-GetTelemetryMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTelemetryMetadataAsync(ctx workflow.Context, input *inspector.GetTelemetryMetadataInput) *GetTelemetryMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-GetTelemetryMetadata", input)
	return &GetTelemetryMetadataFuture{Future: future}
}

func (a *stub) ListAssessmentRunAgents(ctx workflow.Context, input *inspector.ListAssessmentRunAgentsInput) (*inspector.ListAssessmentRunAgentsOutput, error) {
	var output inspector.ListAssessmentRunAgentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentRunAgents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentRunAgentsAsync(ctx workflow.Context, input *inspector.ListAssessmentRunAgentsInput) *ListAssessmentRunAgentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentRunAgents", input)
	return &ListAssessmentRunAgentsFuture{Future: future}
}

func (a *stub) ListAssessmentRuns(ctx workflow.Context, input *inspector.ListAssessmentRunsInput) (*inspector.ListAssessmentRunsOutput, error) {
	var output inspector.ListAssessmentRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentRunsAsync(ctx workflow.Context, input *inspector.ListAssessmentRunsInput) *ListAssessmentRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentRuns", input)
	return &ListAssessmentRunsFuture{Future: future}
}

func (a *stub) ListAssessmentTargets(ctx workflow.Context, input *inspector.ListAssessmentTargetsInput) (*inspector.ListAssessmentTargetsOutput, error) {
	var output inspector.ListAssessmentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentTargetsAsync(ctx workflow.Context, input *inspector.ListAssessmentTargetsInput) *ListAssessmentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentTargets", input)
	return &ListAssessmentTargetsFuture{Future: future}
}

func (a *stub) ListAssessmentTemplates(ctx workflow.Context, input *inspector.ListAssessmentTemplatesInput) (*inspector.ListAssessmentTemplatesOutput, error) {
	var output inspector.ListAssessmentTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentTemplatesAsync(ctx workflow.Context, input *inspector.ListAssessmentTemplatesInput) *ListAssessmentTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListAssessmentTemplates", input)
	return &ListAssessmentTemplatesFuture{Future: future}
}

func (a *stub) ListEventSubscriptions(ctx workflow.Context, input *inspector.ListEventSubscriptionsInput) (*inspector.ListEventSubscriptionsOutput, error) {
	var output inspector.ListEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventSubscriptionsAsync(ctx workflow.Context, input *inspector.ListEventSubscriptionsInput) *ListEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListEventSubscriptions", input)
	return &ListEventSubscriptionsFuture{Future: future}
}

func (a *stub) ListExclusions(ctx workflow.Context, input *inspector.ListExclusionsInput) (*inspector.ListExclusionsOutput, error) {
	var output inspector.ListExclusionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListExclusions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExclusionsAsync(ctx workflow.Context, input *inspector.ListExclusionsInput) *ListExclusionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListExclusions", input)
	return &ListExclusionsFuture{Future: future}
}

func (a *stub) ListFindings(ctx workflow.Context, input *inspector.ListFindingsInput) (*inspector.ListFindingsOutput, error) {
	var output inspector.ListFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFindingsAsync(ctx workflow.Context, input *inspector.ListFindingsInput) *ListFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListFindings", input)
	return &ListFindingsFuture{Future: future}
}

func (a *stub) ListRulesPackages(ctx workflow.Context, input *inspector.ListRulesPackagesInput) (*inspector.ListRulesPackagesOutput, error) {
	var output inspector.ListRulesPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListRulesPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRulesPackagesAsync(ctx workflow.Context, input *inspector.ListRulesPackagesInput) *ListRulesPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListRulesPackages", input)
	return &ListRulesPackagesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *inspector.ListTagsForResourceInput) (*inspector.ListTagsForResourceOutput, error) {
	var output inspector.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *inspector.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PreviewAgents(ctx workflow.Context, input *inspector.PreviewAgentsInput) (*inspector.PreviewAgentsOutput, error) {
	var output inspector.PreviewAgentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-PreviewAgents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PreviewAgentsAsync(ctx workflow.Context, input *inspector.PreviewAgentsInput) *PreviewAgentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-PreviewAgents", input)
	return &PreviewAgentsFuture{Future: future}
}

func (a *stub) RegisterCrossAccountAccessRole(ctx workflow.Context, input *inspector.RegisterCrossAccountAccessRoleInput) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	var output inspector.RegisterCrossAccountAccessRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-RegisterCrossAccountAccessRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCrossAccountAccessRoleAsync(ctx workflow.Context, input *inspector.RegisterCrossAccountAccessRoleInput) *RegisterCrossAccountAccessRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-RegisterCrossAccountAccessRole", input)
	return &RegisterCrossAccountAccessRoleFuture{Future: future}
}

func (a *stub) RemoveAttributesFromFindings(ctx workflow.Context, input *inspector.RemoveAttributesFromFindingsInput) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	var output inspector.RemoveAttributesFromFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-RemoveAttributesFromFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveAttributesFromFindingsAsync(ctx workflow.Context, input *inspector.RemoveAttributesFromFindingsInput) *RemoveAttributesFromFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-RemoveAttributesFromFindings", input)
	return &RemoveAttributesFromFindingsFuture{Future: future}
}

func (a *stub) SetTagsForResource(ctx workflow.Context, input *inspector.SetTagsForResourceInput) (*inspector.SetTagsForResourceOutput, error) {
	var output inspector.SetTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-SetTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTagsForResourceAsync(ctx workflow.Context, input *inspector.SetTagsForResourceInput) *SetTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-SetTagsForResource", input)
	return &SetTagsForResourceFuture{Future: future}
}

func (a *stub) StartAssessmentRun(ctx workflow.Context, input *inspector.StartAssessmentRunInput) (*inspector.StartAssessmentRunOutput, error) {
	var output inspector.StartAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-StartAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAssessmentRunAsync(ctx workflow.Context, input *inspector.StartAssessmentRunInput) *StartAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-StartAssessmentRun", input)
	return &StartAssessmentRunFuture{Future: future}
}

func (a *stub) StopAssessmentRun(ctx workflow.Context, input *inspector.StopAssessmentRunInput) (*inspector.StopAssessmentRunOutput, error) {
	var output inspector.StopAssessmentRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-StopAssessmentRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAssessmentRunAsync(ctx workflow.Context, input *inspector.StopAssessmentRunInput) *StopAssessmentRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-StopAssessmentRun", input)
	return &StopAssessmentRunFuture{Future: future}
}

func (a *stub) SubscribeToEvent(ctx workflow.Context, input *inspector.SubscribeToEventInput) (*inspector.SubscribeToEventOutput, error) {
	var output inspector.SubscribeToEventOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-SubscribeToEvent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubscribeToEventAsync(ctx workflow.Context, input *inspector.SubscribeToEventInput) *SubscribeToEventFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-SubscribeToEvent", input)
	return &SubscribeToEventFuture{Future: future}
}

func (a *stub) UnsubscribeFromEvent(ctx workflow.Context, input *inspector.UnsubscribeFromEventInput) (*inspector.UnsubscribeFromEventOutput, error) {
	var output inspector.UnsubscribeFromEventOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-UnsubscribeFromEvent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnsubscribeFromEventAsync(ctx workflow.Context, input *inspector.UnsubscribeFromEventInput) *UnsubscribeFromEventFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-UnsubscribeFromEvent", input)
	return &UnsubscribeFromEventFuture{Future: future}
}

func (a *stub) UpdateAssessmentTarget(ctx workflow.Context, input *inspector.UpdateAssessmentTargetInput) (*inspector.UpdateAssessmentTargetOutput, error) {
	var output inspector.UpdateAssessmentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-inspector-UpdateAssessmentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentTargetAsync(ctx workflow.Context, input *inspector.UpdateAssessmentTargetInput) *UpdateAssessmentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-inspector-UpdateAssessmentTarget", input)
	return &UpdateAssessmentTargetFuture{Future: future}
}
