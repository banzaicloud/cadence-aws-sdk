// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kmsstub

import (
	"github.com/aws/aws-sdk-go/service/kms"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelKeyDeletionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelKeyDeletionFuture) Get(ctx workflow.Context) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAliasFuture) Get(ctx workflow.Context) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGrantFuture) Get(ctx workflow.Context) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateKeyFuture) Get(ctx workflow.Context) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DecryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DecryptFuture) Get(ctx workflow.Context) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAliasFuture) Get(ctx workflow.Context) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImportedKeyMaterialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImportedKeyMaterialFuture) Get(ctx workflow.Context) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCustomKeyStoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCustomKeyStoresFuture) Get(ctx workflow.Context) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeKeyFuture) Get(ctx workflow.Context) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableKeyFuture) Get(ctx workflow.Context) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableKeyRotationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableKeyRotationFuture) Get(ctx workflow.Context) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisconnectCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisconnectCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableKeyFuture) Get(ctx workflow.Context) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableKeyRotationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableKeyRotationFuture) Get(ctx workflow.Context) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EncryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EncryptFuture) Get(ctx workflow.Context) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateDataKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateDataKeyFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateDataKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateDataKeyPairFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateDataKeyPairWithoutPlaintextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateDataKeyPairWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateDataKeyWithoutPlaintextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateDataKeyWithoutPlaintextFuture) Get(ctx workflow.Context) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateRandomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateRandomFuture) Get(ctx workflow.Context) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyPolicyFuture) Get(ctx workflow.Context) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyRotationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyRotationStatusFuture) Get(ctx workflow.Context) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetParametersForImportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetParametersForImportFuture) Get(ctx workflow.Context) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPublicKeyFuture) Get(ctx workflow.Context) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportKeyMaterialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportKeyMaterialFuture) Get(ctx workflow.Context) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAliasesFuture) Get(ctx workflow.Context) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListKeyPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListKeyPoliciesFuture) Get(ctx workflow.Context) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListKeysFuture) Get(ctx workflow.Context) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceTagsFuture) Get(ctx workflow.Context) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRetirableGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRetirableGrantsFuture) Get(ctx workflow.Context) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutKeyPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutKeyPolicyFuture) Get(ctx workflow.Context) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReEncryptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReEncryptFuture) Get(ctx workflow.Context) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetireGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetireGrantFuture) Get(ctx workflow.Context) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeGrantFuture) Get(ctx workflow.Context) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ScheduleKeyDeletionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ScheduleKeyDeletionFuture) Get(ctx workflow.Context) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SignFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SignFuture) Get(ctx workflow.Context) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAliasFuture) Get(ctx workflow.Context) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCustomKeyStoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCustomKeyStoreFuture) Get(ctx workflow.Context) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateKeyDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateKeyDescriptionFuture) Get(ctx workflow.Context) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyFuture) Get(ctx workflow.Context) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelKeyDeletion(ctx workflow.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error) {
	var output kms.CancelKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-CancelKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelKeyDeletionAsync(ctx workflow.Context, input *kms.CancelKeyDeletionInput) *CancelKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-CancelKeyDeletion", input)
	return &CancelKeyDeletionFuture{Future: future}
}

func (a *stub) ConnectCustomKeyStore(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error) {
	var output kms.ConnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ConnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.ConnectCustomKeyStoreInput) *ConnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ConnectCustomKeyStore", input)
	return &ConnectCustomKeyStoreFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error) {
	var output kms.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *kms.CreateAliasInput) *CreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-CreateAlias", input)
	return &CreateAliasFuture{Future: future}
}

func (a *stub) CreateCustomKeyStore(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error) {
	var output kms.CreateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-CreateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomKeyStoreAsync(ctx workflow.Context, input *kms.CreateCustomKeyStoreInput) *CreateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-CreateCustomKeyStore", input)
	return &CreateCustomKeyStoreFuture{Future: future}
}

func (a *stub) CreateGrant(ctx workflow.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error) {
	var output kms.CreateGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-CreateGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGrantAsync(ctx workflow.Context, input *kms.CreateGrantInput) *CreateGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-CreateGrant", input)
	return &CreateGrantFuture{Future: future}
}

func (a *stub) CreateKey(ctx workflow.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error) {
	var output kms.CreateKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-CreateKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyAsync(ctx workflow.Context, input *kms.CreateKeyInput) *CreateKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-CreateKey", input)
	return &CreateKeyFuture{Future: future}
}

func (a *stub) Decrypt(ctx workflow.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error) {
	var output kms.DecryptOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-Decrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DecryptAsync(ctx workflow.Context, input *kms.DecryptInput) *DecryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-Decrypt", input)
	return &DecryptFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error) {
	var output kms.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *kms.DeleteAliasInput) *DeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DeleteAlias", input)
	return &DeleteAliasFuture{Future: future}
}

func (a *stub) DeleteCustomKeyStore(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error) {
	var output kms.DeleteCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DeleteCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomKeyStoreAsync(ctx workflow.Context, input *kms.DeleteCustomKeyStoreInput) *DeleteCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DeleteCustomKeyStore", input)
	return &DeleteCustomKeyStoreFuture{Future: future}
}

func (a *stub) DeleteImportedKeyMaterial(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error) {
	var output kms.DeleteImportedKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DeleteImportedKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImportedKeyMaterialAsync(ctx workflow.Context, input *kms.DeleteImportedKeyMaterialInput) *DeleteImportedKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DeleteImportedKeyMaterial", input)
	return &DeleteImportedKeyMaterialFuture{Future: future}
}

func (a *stub) DescribeCustomKeyStores(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error) {
	var output kms.DescribeCustomKeyStoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DescribeCustomKeyStores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCustomKeyStoresAsync(ctx workflow.Context, input *kms.DescribeCustomKeyStoresInput) *DescribeCustomKeyStoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DescribeCustomKeyStores", input)
	return &DescribeCustomKeyStoresFuture{Future: future}
}

func (a *stub) DescribeKey(ctx workflow.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error) {
	var output kms.DescribeKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DescribeKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeKeyAsync(ctx workflow.Context, input *kms.DescribeKeyInput) *DescribeKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DescribeKey", input)
	return &DescribeKeyFuture{Future: future}
}

func (a *stub) DisableKey(ctx workflow.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error) {
	var output kms.DisableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DisableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableKeyAsync(ctx workflow.Context, input *kms.DisableKeyInput) *DisableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DisableKey", input)
	return &DisableKeyFuture{Future: future}
}

func (a *stub) DisableKeyRotation(ctx workflow.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error) {
	var output kms.DisableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DisableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableKeyRotationAsync(ctx workflow.Context, input *kms.DisableKeyRotationInput) *DisableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DisableKeyRotation", input)
	return &DisableKeyRotationFuture{Future: future}
}

func (a *stub) DisconnectCustomKeyStore(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error) {
	var output kms.DisconnectCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-DisconnectCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisconnectCustomKeyStoreAsync(ctx workflow.Context, input *kms.DisconnectCustomKeyStoreInput) *DisconnectCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-DisconnectCustomKeyStore", input)
	return &DisconnectCustomKeyStoreFuture{Future: future}
}

func (a *stub) EnableKey(ctx workflow.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error) {
	var output kms.EnableKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-EnableKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableKeyAsync(ctx workflow.Context, input *kms.EnableKeyInput) *EnableKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-EnableKey", input)
	return &EnableKeyFuture{Future: future}
}

func (a *stub) EnableKeyRotation(ctx workflow.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error) {
	var output kms.EnableKeyRotationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-EnableKeyRotation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableKeyRotationAsync(ctx workflow.Context, input *kms.EnableKeyRotationInput) *EnableKeyRotationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-EnableKeyRotation", input)
	return &EnableKeyRotationFuture{Future: future}
}

func (a *stub) Encrypt(ctx workflow.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error) {
	var output kms.EncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-Encrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EncryptAsync(ctx workflow.Context, input *kms.EncryptInput) *EncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-Encrypt", input)
	return &EncryptFuture{Future: future}
}

func (a *stub) GenerateDataKey(ctx workflow.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error) {
	var output kms.GenerateDataKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateDataKeyAsync(ctx workflow.Context, input *kms.GenerateDataKeyInput) *GenerateDataKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKey", input)
	return &GenerateDataKeyFuture{Future: future}
}

func (a *stub) GenerateDataKeyPair(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error) {
	var output kms.GenerateDataKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateDataKeyPairAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairInput) *GenerateDataKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyPair", input)
	return &GenerateDataKeyPairFuture{Future: future}
}

func (a *stub) GenerateDataKeyPairWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyPairWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyPairWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateDataKeyPairWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) *GenerateDataKeyPairWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyPairWithoutPlaintext", input)
	return &GenerateDataKeyPairWithoutPlaintextFuture{Future: future}
}

func (a *stub) GenerateDataKeyWithoutPlaintext(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	var output kms.GenerateDataKeyWithoutPlaintextOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyWithoutPlaintext", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateDataKeyWithoutPlaintextAsync(ctx workflow.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) *GenerateDataKeyWithoutPlaintextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GenerateDataKeyWithoutPlaintext", input)
	return &GenerateDataKeyWithoutPlaintextFuture{Future: future}
}

func (a *stub) GenerateRandom(ctx workflow.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error) {
	var output kms.GenerateRandomOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GenerateRandom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateRandomAsync(ctx workflow.Context, input *kms.GenerateRandomInput) *GenerateRandomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GenerateRandom", input)
	return &GenerateRandomFuture{Future: future}
}

func (a *stub) GetKeyPolicy(ctx workflow.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error) {
	var output kms.GetKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GetKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyPolicyAsync(ctx workflow.Context, input *kms.GetKeyPolicyInput) *GetKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GetKeyPolicy", input)
	return &GetKeyPolicyFuture{Future: future}
}

func (a *stub) GetKeyRotationStatus(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error) {
	var output kms.GetKeyRotationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GetKeyRotationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyRotationStatusAsync(ctx workflow.Context, input *kms.GetKeyRotationStatusInput) *GetKeyRotationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GetKeyRotationStatus", input)
	return &GetKeyRotationStatusFuture{Future: future}
}

func (a *stub) GetParametersForImport(ctx workflow.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error) {
	var output kms.GetParametersForImportOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GetParametersForImport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetParametersForImportAsync(ctx workflow.Context, input *kms.GetParametersForImportInput) *GetParametersForImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GetParametersForImport", input)
	return &GetParametersForImportFuture{Future: future}
}

func (a *stub) GetPublicKey(ctx workflow.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error) {
	var output kms.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicKeyAsync(ctx workflow.Context, input *kms.GetPublicKeyInput) *GetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-GetPublicKey", input)
	return &GetPublicKeyFuture{Future: future}
}

func (a *stub) ImportKeyMaterial(ctx workflow.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error) {
	var output kms.ImportKeyMaterialOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ImportKeyMaterial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportKeyMaterialAsync(ctx workflow.Context, input *kms.ImportKeyMaterialInput) *ImportKeyMaterialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ImportKeyMaterial", input)
	return &ImportKeyMaterialFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error) {
	var output kms.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *kms.ListAliasesInput) *ListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListAliases", input)
	return &ListAliasesFuture{Future: future}
}

func (a *stub) ListGrants(ctx workflow.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGrantsAsync(ctx workflow.Context, input *kms.ListGrantsInput) *ListGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListGrants", input)
	return &ListGrantsFuture{Future: future}
}

func (a *stub) ListKeyPolicies(ctx workflow.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error) {
	var output kms.ListKeyPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListKeyPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeyPoliciesAsync(ctx workflow.Context, input *kms.ListKeyPoliciesInput) *ListKeyPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListKeyPolicies", input)
	return &ListKeyPoliciesFuture{Future: future}
}

func (a *stub) ListKeys(ctx workflow.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error) {
	var output kms.ListKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeysAsync(ctx workflow.Context, input *kms.ListKeysInput) *ListKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListKeys", input)
	return &ListKeysFuture{Future: future}
}

func (a *stub) ListResourceTags(ctx workflow.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error) {
	var output kms.ListResourceTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListResourceTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceTagsAsync(ctx workflow.Context, input *kms.ListResourceTagsInput) *ListResourceTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListResourceTags", input)
	return &ListResourceTagsFuture{Future: future}
}

func (a *stub) ListRetirableGrants(ctx workflow.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error) {
	var output kms.ListGrantsResponse
	err := workflow.ExecuteActivity(ctx, "aws-kms-ListRetirableGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRetirableGrantsAsync(ctx workflow.Context, input *kms.ListRetirableGrantsInput) *ListRetirableGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ListRetirableGrants", input)
	return &ListRetirableGrantsFuture{Future: future}
}

func (a *stub) PutKeyPolicy(ctx workflow.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error) {
	var output kms.PutKeyPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-PutKeyPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutKeyPolicyAsync(ctx workflow.Context, input *kms.PutKeyPolicyInput) *PutKeyPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-PutKeyPolicy", input)
	return &PutKeyPolicyFuture{Future: future}
}

func (a *stub) ReEncrypt(ctx workflow.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error) {
	var output kms.ReEncryptOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ReEncrypt", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReEncryptAsync(ctx workflow.Context, input *kms.ReEncryptInput) *ReEncryptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ReEncrypt", input)
	return &ReEncryptFuture{Future: future}
}

func (a *stub) RetireGrant(ctx workflow.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error) {
	var output kms.RetireGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-RetireGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetireGrantAsync(ctx workflow.Context, input *kms.RetireGrantInput) *RetireGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-RetireGrant", input)
	return &RetireGrantFuture{Future: future}
}

func (a *stub) RevokeGrant(ctx workflow.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error) {
	var output kms.RevokeGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-RevokeGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeGrantAsync(ctx workflow.Context, input *kms.RevokeGrantInput) *RevokeGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-RevokeGrant", input)
	return &RevokeGrantFuture{Future: future}
}

func (a *stub) ScheduleKeyDeletion(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error) {
	var output kms.ScheduleKeyDeletionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-ScheduleKeyDeletion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScheduleKeyDeletionAsync(ctx workflow.Context, input *kms.ScheduleKeyDeletionInput) *ScheduleKeyDeletionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-ScheduleKeyDeletion", input)
	return &ScheduleKeyDeletionFuture{Future: future}
}

func (a *stub) Sign(ctx workflow.Context, input *kms.SignInput) (*kms.SignOutput, error) {
	var output kms.SignOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-Sign", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignAsync(ctx workflow.Context, input *kms.SignInput) *SignFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-Sign", input)
	return &SignFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error) {
	var output kms.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *kms.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error) {
	var output kms.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *kms.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAlias(ctx workflow.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error) {
	var output kms.UpdateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAliasAsync(ctx workflow.Context, input *kms.UpdateAliasInput) *UpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-UpdateAlias", input)
	return &UpdateAliasFuture{Future: future}
}

func (a *stub) UpdateCustomKeyStore(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error) {
	var output kms.UpdateCustomKeyStoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-UpdateCustomKeyStore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCustomKeyStoreAsync(ctx workflow.Context, input *kms.UpdateCustomKeyStoreInput) *UpdateCustomKeyStoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-UpdateCustomKeyStore", input)
	return &UpdateCustomKeyStoreFuture{Future: future}
}

func (a *stub) UpdateKeyDescription(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error) {
	var output kms.UpdateKeyDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-UpdateKeyDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateKeyDescriptionAsync(ctx workflow.Context, input *kms.UpdateKeyDescriptionInput) *UpdateKeyDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-UpdateKeyDescription", input)
	return &UpdateKeyDescriptionFuture{Future: future}
}

func (a *stub) Verify(ctx workflow.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error) {
	var output kms.VerifyOutput
	err := workflow.ExecuteActivity(ctx, "aws-kms-Verify", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyAsync(ctx workflow.Context, input *kms.VerifyInput) *VerifyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kms-Verify", input)
	return &VerifyFuture{Future: future}
}
