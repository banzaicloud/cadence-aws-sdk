// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package emrstub

import (
	"github.com/aws/aws-sdk-go/service/emr"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type EMRAddInstanceFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddInstanceFleetFuture) Get(ctx workflow.Context) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddJobFlowStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddJobFlowStepsFuture) Get(ctx workflow.Context) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRAddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRAddTagsFuture) Get(ctx workflow.Context) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRCancelStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRCancelStepsFuture) Get(ctx workflow.Context) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRCreateSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRCreateSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDeleteSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDeleteSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeClusterFuture) Get(ctx workflow.Context) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeJobFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeJobFlowsFuture) Get(ctx workflow.Context) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeSecurityConfigurationFuture) Get(ctx workflow.Context) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRDescribeStepFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRDescribeStepFuture) Get(ctx workflow.Context) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRGetBlockPublicAccessConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRGetBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRGetManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRGetManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListBootstrapActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListBootstrapActionsFuture) Get(ctx workflow.Context) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListClustersFuture) Get(ctx workflow.Context) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstanceFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstanceFleetsFuture) Get(ctx workflow.Context) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListInstancesFuture) Get(ctx workflow.Context) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListNotebookExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListNotebookExecutionsFuture) Get(ctx workflow.Context) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListSecurityConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListSecurityConfigurationsFuture) Get(ctx workflow.Context) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRListStepsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRListStepsFuture) Get(ctx workflow.Context) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyClusterFuture) Get(ctx workflow.Context) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyInstanceFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyInstanceFleetFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRModifyInstanceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRModifyInstanceGroupsFuture) Get(ctx workflow.Context) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutAutoScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutBlockPublicAccessConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutBlockPublicAccessConfigurationFuture) Get(ctx workflow.Context) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRPutManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRPutManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveAutoScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveAutoScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveManagedScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveManagedScalingPolicyFuture) Get(ctx workflow.Context) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRemoveTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRemoveTagsFuture) Get(ctx workflow.Context) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRRunJobFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRRunJobFlowFuture) Get(ctx workflow.Context) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRSetTerminationProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRSetTerminationProtectionFuture) Get(ctx workflow.Context) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRSetVisibleToAllUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRSetVisibleToAllUsersFuture) Get(ctx workflow.Context) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRStartNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRStartNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRStopNotebookExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRStopNotebookExecutionFuture) Get(ctx workflow.Context) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EMRTerminateJobFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EMRTerminateJobFlowsFuture) Get(ctx workflow.Context) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddInstanceFleet(ctx workflow.Context, input *emr.AddInstanceFleetInput) (*emr.AddInstanceFleetOutput, error) {
	var output emr.AddInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-AddInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddInstanceFleetAsync(ctx workflow.Context, input *emr.AddInstanceFleetInput) *EMRAddInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-AddInstanceFleet", input)
	return &EMRAddInstanceFleetFuture{Future: future}
}

func (a *stub) AddInstanceGroups(ctx workflow.Context, input *emr.AddInstanceGroupsInput) (*emr.AddInstanceGroupsOutput, error) {
	var output emr.AddInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-AddInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddInstanceGroupsAsync(ctx workflow.Context, input *emr.AddInstanceGroupsInput) *EMRAddInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-AddInstanceGroups", input)
	return &EMRAddInstanceGroupsFuture{Future: future}
}

func (a *stub) AddJobFlowSteps(ctx workflow.Context, input *emr.AddJobFlowStepsInput) (*emr.AddJobFlowStepsOutput, error) {
	var output emr.AddJobFlowStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-AddJobFlowSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddJobFlowStepsAsync(ctx workflow.Context, input *emr.AddJobFlowStepsInput) *EMRAddJobFlowStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-AddJobFlowSteps", input)
	return &EMRAddJobFlowStepsFuture{Future: future}
}

func (a *stub) AddTags(ctx workflow.Context, input *emr.AddTagsInput) (*emr.AddTagsOutput, error) {
	var output emr.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsAsync(ctx workflow.Context, input *emr.AddTagsInput) *EMRAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-AddTags", input)
	return &EMRAddTagsFuture{Future: future}
}

func (a *stub) CancelSteps(ctx workflow.Context, input *emr.CancelStepsInput) (*emr.CancelStepsOutput, error) {
	var output emr.CancelStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-CancelSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelStepsAsync(ctx workflow.Context, input *emr.CancelStepsInput) *EMRCancelStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-CancelSteps", input)
	return &EMRCancelStepsFuture{Future: future}
}

func (a *stub) CreateSecurityConfiguration(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) (*emr.CreateSecurityConfigurationOutput, error) {
	var output emr.CreateSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-CreateSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSecurityConfigurationAsync(ctx workflow.Context, input *emr.CreateSecurityConfigurationInput) *EMRCreateSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-CreateSecurityConfiguration", input)
	return &EMRCreateSecurityConfigurationFuture{Future: future}
}

func (a *stub) DeleteSecurityConfiguration(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) (*emr.DeleteSecurityConfigurationOutput, error) {
	var output emr.DeleteSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DeleteSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSecurityConfigurationAsync(ctx workflow.Context, input *emr.DeleteSecurityConfigurationInput) *EMRDeleteSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DeleteSecurityConfiguration", input)
	return &EMRDeleteSecurityConfigurationFuture{Future: future}
}

func (a *stub) DescribeCluster(ctx workflow.Context, input *emr.DescribeClusterInput) (*emr.DescribeClusterOutput, error) {
	var output emr.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *EMRDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DescribeCluster", input)
	return &EMRDescribeClusterFuture{Future: future}
}

func (a *stub) DescribeJobFlows(ctx workflow.Context, input *emr.DescribeJobFlowsInput) (*emr.DescribeJobFlowsOutput, error) {
	var output emr.DescribeJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DescribeJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobFlowsAsync(ctx workflow.Context, input *emr.DescribeJobFlowsInput) *EMRDescribeJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DescribeJobFlows", input)
	return &EMRDescribeJobFlowsFuture{Future: future}
}

func (a *stub) DescribeNotebookExecution(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) (*emr.DescribeNotebookExecutionOutput, error) {
	var output emr.DescribeNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DescribeNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotebookExecutionAsync(ctx workflow.Context, input *emr.DescribeNotebookExecutionInput) *EMRDescribeNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DescribeNotebookExecution", input)
	return &EMRDescribeNotebookExecutionFuture{Future: future}
}

func (a *stub) DescribeSecurityConfiguration(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) (*emr.DescribeSecurityConfigurationOutput, error) {
	var output emr.DescribeSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DescribeSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSecurityConfigurationAsync(ctx workflow.Context, input *emr.DescribeSecurityConfigurationInput) *EMRDescribeSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DescribeSecurityConfiguration", input)
	return &EMRDescribeSecurityConfigurationFuture{Future: future}
}

func (a *stub) DescribeStep(ctx workflow.Context, input *emr.DescribeStepInput) (*emr.DescribeStepOutput, error) {
	var output emr.DescribeStepOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-DescribeStep", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStepAsync(ctx workflow.Context, input *emr.DescribeStepInput) *EMRDescribeStepFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-DescribeStep", input)
	return &EMRDescribeStepFuture{Future: future}
}

func (a *stub) GetBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) (*emr.GetBlockPublicAccessConfigurationOutput, error) {
	var output emr.GetBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-GetBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.GetBlockPublicAccessConfigurationInput) *EMRGetBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-GetBlockPublicAccessConfiguration", input)
	return &EMRGetBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *stub) GetManagedScalingPolicy(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) (*emr.GetManagedScalingPolicyOutput, error) {
	var output emr.GetManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-GetManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetManagedScalingPolicyAsync(ctx workflow.Context, input *emr.GetManagedScalingPolicyInput) *EMRGetManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-GetManagedScalingPolicy", input)
	return &EMRGetManagedScalingPolicyFuture{Future: future}
}

func (a *stub) ListBootstrapActions(ctx workflow.Context, input *emr.ListBootstrapActionsInput) (*emr.ListBootstrapActionsOutput, error) {
	var output emr.ListBootstrapActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListBootstrapActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBootstrapActionsAsync(ctx workflow.Context, input *emr.ListBootstrapActionsInput) *EMRListBootstrapActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListBootstrapActions", input)
	return &EMRListBootstrapActionsFuture{Future: future}
}

func (a *stub) ListClusters(ctx workflow.Context, input *emr.ListClustersInput) (*emr.ListClustersOutput, error) {
	var output emr.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClustersAsync(ctx workflow.Context, input *emr.ListClustersInput) *EMRListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListClusters", input)
	return &EMRListClustersFuture{Future: future}
}

func (a *stub) ListInstanceFleets(ctx workflow.Context, input *emr.ListInstanceFleetsInput) (*emr.ListInstanceFleetsOutput, error) {
	var output emr.ListInstanceFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListInstanceFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceFleetsAsync(ctx workflow.Context, input *emr.ListInstanceFleetsInput) *EMRListInstanceFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListInstanceFleets", input)
	return &EMRListInstanceFleetsFuture{Future: future}
}

func (a *stub) ListInstanceGroups(ctx workflow.Context, input *emr.ListInstanceGroupsInput) (*emr.ListInstanceGroupsOutput, error) {
	var output emr.ListInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceGroupsAsync(ctx workflow.Context, input *emr.ListInstanceGroupsInput) *EMRListInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListInstanceGroups", input)
	return &EMRListInstanceGroupsFuture{Future: future}
}

func (a *stub) ListInstances(ctx workflow.Context, input *emr.ListInstancesInput) (*emr.ListInstancesOutput, error) {
	var output emr.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstancesAsync(ctx workflow.Context, input *emr.ListInstancesInput) *EMRListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListInstances", input)
	return &EMRListInstancesFuture{Future: future}
}

func (a *stub) ListNotebookExecutions(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) (*emr.ListNotebookExecutionsOutput, error) {
	var output emr.ListNotebookExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListNotebookExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotebookExecutionsAsync(ctx workflow.Context, input *emr.ListNotebookExecutionsInput) *EMRListNotebookExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListNotebookExecutions", input)
	return &EMRListNotebookExecutionsFuture{Future: future}
}

func (a *stub) ListSecurityConfigurations(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) (*emr.ListSecurityConfigurationsOutput, error) {
	var output emr.ListSecurityConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListSecurityConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecurityConfigurationsAsync(ctx workflow.Context, input *emr.ListSecurityConfigurationsInput) *EMRListSecurityConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListSecurityConfigurations", input)
	return &EMRListSecurityConfigurationsFuture{Future: future}
}

func (a *stub) ListSteps(ctx workflow.Context, input *emr.ListStepsInput) (*emr.ListStepsOutput, error) {
	var output emr.ListStepsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ListSteps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStepsAsync(ctx workflow.Context, input *emr.ListStepsInput) *EMRListStepsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ListSteps", input)
	return &EMRListStepsFuture{Future: future}
}

func (a *stub) ModifyCluster(ctx workflow.Context, input *emr.ModifyClusterInput) (*emr.ModifyClusterOutput, error) {
	var output emr.ModifyClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ModifyCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterAsync(ctx workflow.Context, input *emr.ModifyClusterInput) *EMRModifyClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ModifyCluster", input)
	return &EMRModifyClusterFuture{Future: future}
}

func (a *stub) ModifyInstanceFleet(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) (*emr.ModifyInstanceFleetOutput, error) {
	var output emr.ModifyInstanceFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ModifyInstanceFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceFleetAsync(ctx workflow.Context, input *emr.ModifyInstanceFleetInput) *EMRModifyInstanceFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ModifyInstanceFleet", input)
	return &EMRModifyInstanceFleetFuture{Future: future}
}

func (a *stub) ModifyInstanceGroups(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) (*emr.ModifyInstanceGroupsOutput, error) {
	var output emr.ModifyInstanceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-ModifyInstanceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceGroupsAsync(ctx workflow.Context, input *emr.ModifyInstanceGroupsInput) *EMRModifyInstanceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-ModifyInstanceGroups", input)
	return &EMRModifyInstanceGroupsFuture{Future: future}
}

func (a *stub) PutAutoScalingPolicy(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) (*emr.PutAutoScalingPolicyOutput, error) {
	var output emr.PutAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-PutAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAutoScalingPolicyAsync(ctx workflow.Context, input *emr.PutAutoScalingPolicyInput) *EMRPutAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-PutAutoScalingPolicy", input)
	return &EMRPutAutoScalingPolicyFuture{Future: future}
}

func (a *stub) PutBlockPublicAccessConfiguration(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) (*emr.PutBlockPublicAccessConfigurationOutput, error) {
	var output emr.PutBlockPublicAccessConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-PutBlockPublicAccessConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBlockPublicAccessConfigurationAsync(ctx workflow.Context, input *emr.PutBlockPublicAccessConfigurationInput) *EMRPutBlockPublicAccessConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-PutBlockPublicAccessConfiguration", input)
	return &EMRPutBlockPublicAccessConfigurationFuture{Future: future}
}

func (a *stub) PutManagedScalingPolicy(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) (*emr.PutManagedScalingPolicyOutput, error) {
	var output emr.PutManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-PutManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutManagedScalingPolicyAsync(ctx workflow.Context, input *emr.PutManagedScalingPolicyInput) *EMRPutManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-PutManagedScalingPolicy", input)
	return &EMRPutManagedScalingPolicyFuture{Future: future}
}

func (a *stub) RemoveAutoScalingPolicy(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) (*emr.RemoveAutoScalingPolicyOutput, error) {
	var output emr.RemoveAutoScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-RemoveAutoScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveAutoScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveAutoScalingPolicyInput) *EMRRemoveAutoScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-RemoveAutoScalingPolicy", input)
	return &EMRRemoveAutoScalingPolicyFuture{Future: future}
}

func (a *stub) RemoveManagedScalingPolicy(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) (*emr.RemoveManagedScalingPolicyOutput, error) {
	var output emr.RemoveManagedScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-RemoveManagedScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveManagedScalingPolicyAsync(ctx workflow.Context, input *emr.RemoveManagedScalingPolicyInput) *EMRRemoveManagedScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-RemoveManagedScalingPolicy", input)
	return &EMRRemoveManagedScalingPolicyFuture{Future: future}
}

func (a *stub) RemoveTags(ctx workflow.Context, input *emr.RemoveTagsInput) (*emr.RemoveTagsOutput, error) {
	var output emr.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsAsync(ctx workflow.Context, input *emr.RemoveTagsInput) *EMRRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-RemoveTags", input)
	return &EMRRemoveTagsFuture{Future: future}
}

func (a *stub) RunJobFlow(ctx workflow.Context, input *emr.RunJobFlowInput) (*emr.RunJobFlowOutput, error) {
	var output emr.RunJobFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-RunJobFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunJobFlowAsync(ctx workflow.Context, input *emr.RunJobFlowInput) *EMRRunJobFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-RunJobFlow", input)
	return &EMRRunJobFlowFuture{Future: future}
}

func (a *stub) SetTerminationProtection(ctx workflow.Context, input *emr.SetTerminationProtectionInput) (*emr.SetTerminationProtectionOutput, error) {
	var output emr.SetTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-SetTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTerminationProtectionAsync(ctx workflow.Context, input *emr.SetTerminationProtectionInput) *EMRSetTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-SetTerminationProtection", input)
	return &EMRSetTerminationProtectionFuture{Future: future}
}

func (a *stub) SetVisibleToAllUsers(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) (*emr.SetVisibleToAllUsersOutput, error) {
	var output emr.SetVisibleToAllUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-SetVisibleToAllUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetVisibleToAllUsersAsync(ctx workflow.Context, input *emr.SetVisibleToAllUsersInput) *EMRSetVisibleToAllUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-SetVisibleToAllUsers", input)
	return &EMRSetVisibleToAllUsersFuture{Future: future}
}

func (a *stub) StartNotebookExecution(ctx workflow.Context, input *emr.StartNotebookExecutionInput) (*emr.StartNotebookExecutionOutput, error) {
	var output emr.StartNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-StartNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartNotebookExecutionAsync(ctx workflow.Context, input *emr.StartNotebookExecutionInput) *EMRStartNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-StartNotebookExecution", input)
	return &EMRStartNotebookExecutionFuture{Future: future}
}

func (a *stub) StopNotebookExecution(ctx workflow.Context, input *emr.StopNotebookExecutionInput) (*emr.StopNotebookExecutionOutput, error) {
	var output emr.StopNotebookExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-StopNotebookExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopNotebookExecutionAsync(ctx workflow.Context, input *emr.StopNotebookExecutionInput) *EMRStopNotebookExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-StopNotebookExecution", input)
	return &EMRStopNotebookExecutionFuture{Future: future}
}

func (a *stub) TerminateJobFlows(ctx workflow.Context, input *emr.TerminateJobFlowsInput) (*emr.TerminateJobFlowsOutput, error) {
	var output emr.TerminateJobFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emr-TerminateJobFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateJobFlowsAsync(ctx workflow.Context, input *emr.TerminateJobFlowsInput) *EMRTerminateJobFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-TerminateJobFlows", input)
	return &EMRTerminateJobFlowsFuture{Future: future}
}

func (a *stub) WaitUntilClusterRunning(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilClusterRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterRunningAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilClusterRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterTerminated(ctx workflow.Context, input *emr.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilClusterTerminated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterTerminatedAsync(ctx workflow.Context, input *emr.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilClusterTerminated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStepComplete(ctx workflow.Context, input *emr.DescribeStepInput) error {
	return workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilStepComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStepCompleteAsync(ctx workflow.Context, input *emr.DescribeStepInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emr-WaitUntilStepComplete", input)
	return clients.NewVoidFuture(future)
}
