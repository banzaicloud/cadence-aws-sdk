// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package connectparticipantstub

import (
	"github.com/aws/aws-sdk-go/service/connectparticipant"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CompleteAttachmentUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteAttachmentUploadFuture) Get(ctx workflow.Context) (*connectparticipant.CompleteAttachmentUploadOutput, error) {
	var output connectparticipant.CompleteAttachmentUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateParticipantConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateParticipantConnectionFuture) Get(ctx workflow.Context) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	var output connectparticipant.CreateParticipantConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisconnectParticipantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisconnectParticipantFuture) Get(ctx workflow.Context) (*connectparticipant.DisconnectParticipantOutput, error) {
	var output connectparticipant.DisconnectParticipantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAttachmentFuture) Get(ctx workflow.Context) (*connectparticipant.GetAttachmentOutput, error) {
	var output connectparticipant.GetAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTranscriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTranscriptFuture) Get(ctx workflow.Context) (*connectparticipant.GetTranscriptOutput, error) {
	var output connectparticipant.GetTranscriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendEventFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendEventFuture) Get(ctx workflow.Context) (*connectparticipant.SendEventOutput, error) {
	var output connectparticipant.SendEventOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendMessageFuture) Get(ctx workflow.Context) (*connectparticipant.SendMessageOutput, error) {
	var output connectparticipant.SendMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAttachmentUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAttachmentUploadFuture) Get(ctx workflow.Context) (*connectparticipant.StartAttachmentUploadOutput, error) {
	var output connectparticipant.StartAttachmentUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteAttachmentUpload(ctx workflow.Context, input *connectparticipant.CompleteAttachmentUploadInput) (*connectparticipant.CompleteAttachmentUploadOutput, error) {
	var output connectparticipant.CompleteAttachmentUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-CompleteAttachmentUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteAttachmentUploadAsync(ctx workflow.Context, input *connectparticipant.CompleteAttachmentUploadInput) *CompleteAttachmentUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-CompleteAttachmentUpload", input)
	return &CompleteAttachmentUploadFuture{Future: future}
}

func (a *stub) CreateParticipantConnection(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	var output connectparticipant.CreateParticipantConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-CreateParticipantConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateParticipantConnectionAsync(ctx workflow.Context, input *connectparticipant.CreateParticipantConnectionInput) *CreateParticipantConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-CreateParticipantConnection", input)
	return &CreateParticipantConnectionFuture{Future: future}
}

func (a *stub) DisconnectParticipant(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) (*connectparticipant.DisconnectParticipantOutput, error) {
	var output connectparticipant.DisconnectParticipantOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-DisconnectParticipant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisconnectParticipantAsync(ctx workflow.Context, input *connectparticipant.DisconnectParticipantInput) *DisconnectParticipantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-DisconnectParticipant", input)
	return &DisconnectParticipantFuture{Future: future}
}

func (a *stub) GetAttachment(ctx workflow.Context, input *connectparticipant.GetAttachmentInput) (*connectparticipant.GetAttachmentOutput, error) {
	var output connectparticipant.GetAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-GetAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAttachmentAsync(ctx workflow.Context, input *connectparticipant.GetAttachmentInput) *GetAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-GetAttachment", input)
	return &GetAttachmentFuture{Future: future}
}

func (a *stub) GetTranscript(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) (*connectparticipant.GetTranscriptOutput, error) {
	var output connectparticipant.GetTranscriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-GetTranscript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTranscriptAsync(ctx workflow.Context, input *connectparticipant.GetTranscriptInput) *GetTranscriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-GetTranscript", input)
	return &GetTranscriptFuture{Future: future}
}

func (a *stub) SendEvent(ctx workflow.Context, input *connectparticipant.SendEventInput) (*connectparticipant.SendEventOutput, error) {
	var output connectparticipant.SendEventOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-SendEvent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendEventAsync(ctx workflow.Context, input *connectparticipant.SendEventInput) *SendEventFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-SendEvent", input)
	return &SendEventFuture{Future: future}
}

func (a *stub) SendMessage(ctx workflow.Context, input *connectparticipant.SendMessageInput) (*connectparticipant.SendMessageOutput, error) {
	var output connectparticipant.SendMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-SendMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendMessageAsync(ctx workflow.Context, input *connectparticipant.SendMessageInput) *SendMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-SendMessage", input)
	return &SendMessageFuture{Future: future}
}

func (a *stub) StartAttachmentUpload(ctx workflow.Context, input *connectparticipant.StartAttachmentUploadInput) (*connectparticipant.StartAttachmentUploadOutput, error) {
	var output connectparticipant.StartAttachmentUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-connectparticipant-StartAttachmentUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAttachmentUploadAsync(ctx workflow.Context, input *connectparticipant.StartAttachmentUploadInput) *StartAttachmentUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connectparticipant-StartAttachmentUpload", input)
	return &StartAttachmentUploadFuture{Future: future}
}
