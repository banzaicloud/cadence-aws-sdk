// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mediapackagevodstub

import (
	"github.com/aws/aws-sdk-go/service/mediapackagevod"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssetFuture) Get(ctx workflow.Context) (*mediapackagevod.CreateAssetOutput, error) {
	var output mediapackagevod.CreateAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePackagingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePackagingConfigurationFuture) Get(ctx workflow.Context) (*mediapackagevod.CreatePackagingConfigurationOutput, error) {
	var output mediapackagevod.CreatePackagingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePackagingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePackagingGroupFuture) Get(ctx workflow.Context) (*mediapackagevod.CreatePackagingGroupOutput, error) {
	var output mediapackagevod.CreatePackagingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssetFuture) Get(ctx workflow.Context) (*mediapackagevod.DeleteAssetOutput, error) {
	var output mediapackagevod.DeleteAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePackagingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePackagingConfigurationFuture) Get(ctx workflow.Context) (*mediapackagevod.DeletePackagingConfigurationOutput, error) {
	var output mediapackagevod.DeletePackagingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePackagingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePackagingGroupFuture) Get(ctx workflow.Context) (*mediapackagevod.DeletePackagingGroupOutput, error) {
	var output mediapackagevod.DeletePackagingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssetFuture) Get(ctx workflow.Context) (*mediapackagevod.DescribeAssetOutput, error) {
	var output mediapackagevod.DescribeAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePackagingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePackagingConfigurationFuture) Get(ctx workflow.Context) (*mediapackagevod.DescribePackagingConfigurationOutput, error) {
	var output mediapackagevod.DescribePackagingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePackagingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePackagingGroupFuture) Get(ctx workflow.Context) (*mediapackagevod.DescribePackagingGroupOutput, error) {
	var output mediapackagevod.DescribePackagingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssetsFuture) Get(ctx workflow.Context) (*mediapackagevod.ListAssetsOutput, error) {
	var output mediapackagevod.ListAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackagingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackagingConfigurationsFuture) Get(ctx workflow.Context) (*mediapackagevod.ListPackagingConfigurationsOutput, error) {
	var output mediapackagevod.ListPackagingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackagingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackagingGroupsFuture) Get(ctx workflow.Context) (*mediapackagevod.ListPackagingGroupsOutput, error) {
	var output mediapackagevod.ListPackagingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*mediapackagevod.ListTagsForResourceOutput, error) {
	var output mediapackagevod.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*mediapackagevod.TagResourceOutput, error) {
	var output mediapackagevod.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*mediapackagevod.UntagResourceOutput, error) {
	var output mediapackagevod.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePackagingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePackagingGroupFuture) Get(ctx workflow.Context) (*mediapackagevod.UpdatePackagingGroupOutput, error) {
	var output mediapackagevod.UpdatePackagingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAsset(ctx workflow.Context, input *mediapackagevod.CreateAssetInput) (*mediapackagevod.CreateAssetOutput, error) {
	var output mediapackagevod.CreateAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreateAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssetAsync(ctx workflow.Context, input *mediapackagevod.CreateAssetInput) *CreateAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreateAsset", input)
	return &CreateAssetFuture{Future: future}
}

func (a *stub) CreatePackagingConfiguration(ctx workflow.Context, input *mediapackagevod.CreatePackagingConfigurationInput) (*mediapackagevod.CreatePackagingConfigurationOutput, error) {
	var output mediapackagevod.CreatePackagingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreatePackagingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePackagingConfigurationAsync(ctx workflow.Context, input *mediapackagevod.CreatePackagingConfigurationInput) *CreatePackagingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreatePackagingConfiguration", input)
	return &CreatePackagingConfigurationFuture{Future: future}
}

func (a *stub) CreatePackagingGroup(ctx workflow.Context, input *mediapackagevod.CreatePackagingGroupInput) (*mediapackagevod.CreatePackagingGroupOutput, error) {
	var output mediapackagevod.CreatePackagingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreatePackagingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePackagingGroupAsync(ctx workflow.Context, input *mediapackagevod.CreatePackagingGroupInput) *CreatePackagingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-CreatePackagingGroup", input)
	return &CreatePackagingGroupFuture{Future: future}
}

func (a *stub) DeleteAsset(ctx workflow.Context, input *mediapackagevod.DeleteAssetInput) (*mediapackagevod.DeleteAssetOutput, error) {
	var output mediapackagevod.DeleteAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeleteAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssetAsync(ctx workflow.Context, input *mediapackagevod.DeleteAssetInput) *DeleteAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeleteAsset", input)
	return &DeleteAssetFuture{Future: future}
}

func (a *stub) DeletePackagingConfiguration(ctx workflow.Context, input *mediapackagevod.DeletePackagingConfigurationInput) (*mediapackagevod.DeletePackagingConfigurationOutput, error) {
	var output mediapackagevod.DeletePackagingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeletePackagingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackagingConfigurationAsync(ctx workflow.Context, input *mediapackagevod.DeletePackagingConfigurationInput) *DeletePackagingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeletePackagingConfiguration", input)
	return &DeletePackagingConfigurationFuture{Future: future}
}

func (a *stub) DeletePackagingGroup(ctx workflow.Context, input *mediapackagevod.DeletePackagingGroupInput) (*mediapackagevod.DeletePackagingGroupOutput, error) {
	var output mediapackagevod.DeletePackagingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeletePackagingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackagingGroupAsync(ctx workflow.Context, input *mediapackagevod.DeletePackagingGroupInput) *DeletePackagingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DeletePackagingGroup", input)
	return &DeletePackagingGroupFuture{Future: future}
}

func (a *stub) DescribeAsset(ctx workflow.Context, input *mediapackagevod.DescribeAssetInput) (*mediapackagevod.DescribeAssetOutput, error) {
	var output mediapackagevod.DescribeAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribeAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssetAsync(ctx workflow.Context, input *mediapackagevod.DescribeAssetInput) *DescribeAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribeAsset", input)
	return &DescribeAssetFuture{Future: future}
}

func (a *stub) DescribePackagingConfiguration(ctx workflow.Context, input *mediapackagevod.DescribePackagingConfigurationInput) (*mediapackagevod.DescribePackagingConfigurationOutput, error) {
	var output mediapackagevod.DescribePackagingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribePackagingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackagingConfigurationAsync(ctx workflow.Context, input *mediapackagevod.DescribePackagingConfigurationInput) *DescribePackagingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribePackagingConfiguration", input)
	return &DescribePackagingConfigurationFuture{Future: future}
}

func (a *stub) DescribePackagingGroup(ctx workflow.Context, input *mediapackagevod.DescribePackagingGroupInput) (*mediapackagevod.DescribePackagingGroupOutput, error) {
	var output mediapackagevod.DescribePackagingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribePackagingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackagingGroupAsync(ctx workflow.Context, input *mediapackagevod.DescribePackagingGroupInput) *DescribePackagingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-DescribePackagingGroup", input)
	return &DescribePackagingGroupFuture{Future: future}
}

func (a *stub) ListAssets(ctx workflow.Context, input *mediapackagevod.ListAssetsInput) (*mediapackagevod.ListAssetsOutput, error) {
	var output mediapackagevod.ListAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssetsAsync(ctx workflow.Context, input *mediapackagevod.ListAssetsInput) *ListAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListAssets", input)
	return &ListAssetsFuture{Future: future}
}

func (a *stub) ListPackagingConfigurations(ctx workflow.Context, input *mediapackagevod.ListPackagingConfigurationsInput) (*mediapackagevod.ListPackagingConfigurationsOutput, error) {
	var output mediapackagevod.ListPackagingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListPackagingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagingConfigurationsAsync(ctx workflow.Context, input *mediapackagevod.ListPackagingConfigurationsInput) *ListPackagingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListPackagingConfigurations", input)
	return &ListPackagingConfigurationsFuture{Future: future}
}

func (a *stub) ListPackagingGroups(ctx workflow.Context, input *mediapackagevod.ListPackagingGroupsInput) (*mediapackagevod.ListPackagingGroupsOutput, error) {
	var output mediapackagevod.ListPackagingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListPackagingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagingGroupsAsync(ctx workflow.Context, input *mediapackagevod.ListPackagingGroupsInput) *ListPackagingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListPackagingGroups", input)
	return &ListPackagingGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mediapackagevod.ListTagsForResourceInput) (*mediapackagevod.ListTagsForResourceOutput, error) {
	var output mediapackagevod.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mediapackagevod.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mediapackagevod.TagResourceInput) (*mediapackagevod.TagResourceOutput, error) {
	var output mediapackagevod.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mediapackagevod.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mediapackagevod.UntagResourceInput) (*mediapackagevod.UntagResourceOutput, error) {
	var output mediapackagevod.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mediapackagevod.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdatePackagingGroup(ctx workflow.Context, input *mediapackagevod.UpdatePackagingGroupInput) (*mediapackagevod.UpdatePackagingGroupOutput, error) {
	var output mediapackagevod.UpdatePackagingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-UpdatePackagingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePackagingGroupAsync(ctx workflow.Context, input *mediapackagevod.UpdatePackagingGroupInput) *UpdatePackagingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediapackagevod-UpdatePackagingGroup", input)
	return &UpdatePackagingGroupFuture{Future: future}
}
