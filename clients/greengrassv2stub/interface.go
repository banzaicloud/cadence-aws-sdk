// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package greengrassv2stub

import (
	"github.com/aws/aws-sdk-go/service/greengrassv2"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CancelDeployment(ctx workflow.Context, input *greengrassv2.CancelDeploymentInput) (*greengrassv2.CancelDeploymentOutput, error)
	CancelDeploymentAsync(ctx workflow.Context, input *greengrassv2.CancelDeploymentInput) *CancelDeploymentFuture

	CreateComponentVersion(ctx workflow.Context, input *greengrassv2.CreateComponentVersionInput) (*greengrassv2.CreateComponentVersionOutput, error)
	CreateComponentVersionAsync(ctx workflow.Context, input *greengrassv2.CreateComponentVersionInput) *CreateComponentVersionFuture

	CreateDeployment(ctx workflow.Context, input *greengrassv2.CreateDeploymentInput) (*greengrassv2.CreateDeploymentOutput, error)
	CreateDeploymentAsync(ctx workflow.Context, input *greengrassv2.CreateDeploymentInput) *CreateDeploymentFuture

	DeleteComponent(ctx workflow.Context, input *greengrassv2.DeleteComponentInput) (*greengrassv2.DeleteComponentOutput, error)
	DeleteComponentAsync(ctx workflow.Context, input *greengrassv2.DeleteComponentInput) *DeleteComponentFuture

	DeleteCoreDevice(ctx workflow.Context, input *greengrassv2.DeleteCoreDeviceInput) (*greengrassv2.DeleteCoreDeviceOutput, error)
	DeleteCoreDeviceAsync(ctx workflow.Context, input *greengrassv2.DeleteCoreDeviceInput) *DeleteCoreDeviceFuture

	DescribeComponent(ctx workflow.Context, input *greengrassv2.DescribeComponentInput) (*greengrassv2.DescribeComponentOutput, error)
	DescribeComponentAsync(ctx workflow.Context, input *greengrassv2.DescribeComponentInput) *DescribeComponentFuture

	GetComponent(ctx workflow.Context, input *greengrassv2.GetComponentInput) (*greengrassv2.GetComponentOutput, error)
	GetComponentAsync(ctx workflow.Context, input *greengrassv2.GetComponentInput) *GetComponentFuture

	GetComponentVersionArtifact(ctx workflow.Context, input *greengrassv2.GetComponentVersionArtifactInput) (*greengrassv2.GetComponentVersionArtifactOutput, error)
	GetComponentVersionArtifactAsync(ctx workflow.Context, input *greengrassv2.GetComponentVersionArtifactInput) *GetComponentVersionArtifactFuture

	GetCoreDevice(ctx workflow.Context, input *greengrassv2.GetCoreDeviceInput) (*greengrassv2.GetCoreDeviceOutput, error)
	GetCoreDeviceAsync(ctx workflow.Context, input *greengrassv2.GetCoreDeviceInput) *GetCoreDeviceFuture

	GetDeployment(ctx workflow.Context, input *greengrassv2.GetDeploymentInput) (*greengrassv2.GetDeploymentOutput, error)
	GetDeploymentAsync(ctx workflow.Context, input *greengrassv2.GetDeploymentInput) *GetDeploymentFuture

	ListComponentVersions(ctx workflow.Context, input *greengrassv2.ListComponentVersionsInput) (*greengrassv2.ListComponentVersionsOutput, error)
	ListComponentVersionsAsync(ctx workflow.Context, input *greengrassv2.ListComponentVersionsInput) *ListComponentVersionsFuture

	ListComponents(ctx workflow.Context, input *greengrassv2.ListComponentsInput) (*greengrassv2.ListComponentsOutput, error)
	ListComponentsAsync(ctx workflow.Context, input *greengrassv2.ListComponentsInput) *ListComponentsFuture

	ListCoreDevices(ctx workflow.Context, input *greengrassv2.ListCoreDevicesInput) (*greengrassv2.ListCoreDevicesOutput, error)
	ListCoreDevicesAsync(ctx workflow.Context, input *greengrassv2.ListCoreDevicesInput) *ListCoreDevicesFuture

	ListDeployments(ctx workflow.Context, input *greengrassv2.ListDeploymentsInput) (*greengrassv2.ListDeploymentsOutput, error)
	ListDeploymentsAsync(ctx workflow.Context, input *greengrassv2.ListDeploymentsInput) *ListDeploymentsFuture

	ListEffectiveDeployments(ctx workflow.Context, input *greengrassv2.ListEffectiveDeploymentsInput) (*greengrassv2.ListEffectiveDeploymentsOutput, error)
	ListEffectiveDeploymentsAsync(ctx workflow.Context, input *greengrassv2.ListEffectiveDeploymentsInput) *ListEffectiveDeploymentsFuture

	ListInstalledComponents(ctx workflow.Context, input *greengrassv2.ListInstalledComponentsInput) (*greengrassv2.ListInstalledComponentsOutput, error)
	ListInstalledComponentsAsync(ctx workflow.Context, input *greengrassv2.ListInstalledComponentsInput) *ListInstalledComponentsFuture

	ListTagsForResource(ctx workflow.Context, input *greengrassv2.ListTagsForResourceInput) (*greengrassv2.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *greengrassv2.ListTagsForResourceInput) *ListTagsForResourceFuture

	ResolveComponentCandidates(ctx workflow.Context, input *greengrassv2.ResolveComponentCandidatesInput) (*greengrassv2.ResolveComponentCandidatesOutput, error)
	ResolveComponentCandidatesAsync(ctx workflow.Context, input *greengrassv2.ResolveComponentCandidatesInput) *ResolveComponentCandidatesFuture

	TagResource(ctx workflow.Context, input *greengrassv2.TagResourceInput) (*greengrassv2.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *greengrassv2.TagResourceInput) *TagResourceFuture

	UntagResource(ctx workflow.Context, input *greengrassv2.UntagResourceInput) (*greengrassv2.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *greengrassv2.UntagResourceInput) *UntagResourceFuture
}

func NewClient() Client {
	return &stub{}
}
