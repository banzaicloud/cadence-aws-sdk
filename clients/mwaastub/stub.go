// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mwaastub

import (
	"github.com/aws/aws-sdk-go/service/mwaa"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateCliTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCliTokenFuture) Get(ctx workflow.Context) (*mwaa.CreateCliTokenOutput, error) {
	var output mwaa.CreateCliTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEnvironmentFuture) Get(ctx workflow.Context) (*mwaa.CreateEnvironmentOutput, error) {
	var output mwaa.CreateEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWebLoginTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWebLoginTokenFuture) Get(ctx workflow.Context) (*mwaa.CreateWebLoginTokenOutput, error) {
	var output mwaa.CreateWebLoginTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEnvironmentFuture) Get(ctx workflow.Context) (*mwaa.DeleteEnvironmentOutput, error) {
	var output mwaa.DeleteEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEnvironmentFuture) Get(ctx workflow.Context) (*mwaa.GetEnvironmentOutput, error) {
	var output mwaa.GetEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEnvironmentsFuture) Get(ctx workflow.Context) (*mwaa.ListEnvironmentsOutput, error) {
	var output mwaa.ListEnvironmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*mwaa.ListTagsForResourceOutput, error) {
	var output mwaa.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PublishMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PublishMetricsFuture) Get(ctx workflow.Context) (*mwaa.PublishMetricsOutput, error) {
	var output mwaa.PublishMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*mwaa.TagResourceOutput, error) {
	var output mwaa.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*mwaa.UntagResourceOutput, error) {
	var output mwaa.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEnvironmentFuture) Get(ctx workflow.Context) (*mwaa.UpdateEnvironmentOutput, error) {
	var output mwaa.UpdateEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCliToken(ctx workflow.Context, input *mwaa.CreateCliTokenInput) (*mwaa.CreateCliTokenOutput, error) {
	var output mwaa.CreateCliTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateCliToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCliTokenAsync(ctx workflow.Context, input *mwaa.CreateCliTokenInput) *CreateCliTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateCliToken", input)
	return &CreateCliTokenFuture{Future: future}
}

func (a *stub) CreateEnvironment(ctx workflow.Context, input *mwaa.CreateEnvironmentInput) (*mwaa.CreateEnvironmentOutput, error) {
	var output mwaa.CreateEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEnvironmentAsync(ctx workflow.Context, input *mwaa.CreateEnvironmentInput) *CreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateEnvironment", input)
	return &CreateEnvironmentFuture{Future: future}
}

func (a *stub) CreateWebLoginToken(ctx workflow.Context, input *mwaa.CreateWebLoginTokenInput) (*mwaa.CreateWebLoginTokenOutput, error) {
	var output mwaa.CreateWebLoginTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateWebLoginToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebLoginTokenAsync(ctx workflow.Context, input *mwaa.CreateWebLoginTokenInput) *CreateWebLoginTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-CreateWebLoginToken", input)
	return &CreateWebLoginTokenFuture{Future: future}
}

func (a *stub) DeleteEnvironment(ctx workflow.Context, input *mwaa.DeleteEnvironmentInput) (*mwaa.DeleteEnvironmentOutput, error) {
	var output mwaa.DeleteEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-DeleteEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEnvironmentAsync(ctx workflow.Context, input *mwaa.DeleteEnvironmentInput) *DeleteEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-DeleteEnvironment", input)
	return &DeleteEnvironmentFuture{Future: future}
}

func (a *stub) GetEnvironment(ctx workflow.Context, input *mwaa.GetEnvironmentInput) (*mwaa.GetEnvironmentOutput, error) {
	var output mwaa.GetEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-GetEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEnvironmentAsync(ctx workflow.Context, input *mwaa.GetEnvironmentInput) *GetEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-GetEnvironment", input)
	return &GetEnvironmentFuture{Future: future}
}

func (a *stub) ListEnvironments(ctx workflow.Context, input *mwaa.ListEnvironmentsInput) (*mwaa.ListEnvironmentsOutput, error) {
	var output mwaa.ListEnvironmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-ListEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEnvironmentsAsync(ctx workflow.Context, input *mwaa.ListEnvironmentsInput) *ListEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-ListEnvironments", input)
	return &ListEnvironmentsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mwaa.ListTagsForResourceInput) (*mwaa.ListTagsForResourceOutput, error) {
	var output mwaa.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mwaa.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PublishMetrics(ctx workflow.Context, input *mwaa.PublishMetricsInput) (*mwaa.PublishMetricsOutput, error) {
	var output mwaa.PublishMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-PublishMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishMetricsAsync(ctx workflow.Context, input *mwaa.PublishMetricsInput) *PublishMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-PublishMetrics", input)
	return &PublishMetricsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mwaa.TagResourceInput) (*mwaa.TagResourceOutput, error) {
	var output mwaa.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mwaa.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mwaa.UntagResourceInput) (*mwaa.UntagResourceOutput, error) {
	var output mwaa.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mwaa.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateEnvironment(ctx workflow.Context, input *mwaa.UpdateEnvironmentInput) (*mwaa.UpdateEnvironmentOutput, error) {
	var output mwaa.UpdateEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-mwaa-UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEnvironmentAsync(ctx workflow.Context, input *mwaa.UpdateEnvironmentInput) *UpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mwaa-UpdateEnvironment", input)
	return &UpdateEnvironmentFuture{Future: future}
}
