// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mqstub

import (
	"github.com/aws/aws-sdk-go/service/mq"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateBrokerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBrokerFuture) Get(ctx workflow.Context) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationFuture) Get(ctx workflow.Context) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBrokerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBrokerFuture) Get(ctx workflow.Context) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBrokerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBrokerFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBrokerEngineTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBrokerEngineTypesFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBrokerInstanceOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBrokerInstanceOptionsFuture) Get(ctx workflow.Context) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationRevisionFuture) Get(ctx workflow.Context) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserFuture) Get(ctx workflow.Context) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBrokersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBrokersFuture) Get(ctx workflow.Context) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConfigurationRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConfigurationRevisionsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConfigurationsFuture) Get(ctx workflow.Context) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootBrokerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootBrokerFuture) Get(ctx workflow.Context) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBrokerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBrokerFuture) Get(ctx workflow.Context) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationFuture) Get(ctx workflow.Context) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserFuture) Get(ctx workflow.Context) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBroker(ctx workflow.Context, input *mq.CreateBrokerRequest) (*mq.CreateBrokerResponse, error) {
	var output mq.CreateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-CreateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBrokerAsync(ctx workflow.Context, input *mq.CreateBrokerRequest) *CreateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-CreateBroker", input)
	return &CreateBrokerFuture{Future: future}
}

func (a *stub) CreateConfiguration(ctx workflow.Context, input *mq.CreateConfigurationRequest) (*mq.CreateConfigurationResponse, error) {
	var output mq.CreateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-CreateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationAsync(ctx workflow.Context, input *mq.CreateConfigurationRequest) *CreateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-CreateConfiguration", input)
	return &CreateConfigurationFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *mq.CreateTagsInput) (*mq.CreateTagsOutput, error) {
	var output mq.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *mq.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *mq.CreateUserRequest) (*mq.CreateUserOutput, error) {
	var output mq.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *mq.CreateUserRequest) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeleteBroker(ctx workflow.Context, input *mq.DeleteBrokerInput) (*mq.DeleteBrokerResponse, error) {
	var output mq.DeleteBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-DeleteBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBrokerAsync(ctx workflow.Context, input *mq.DeleteBrokerInput) *DeleteBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DeleteBroker", input)
	return &DeleteBrokerFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *mq.DeleteTagsInput) (*mq.DeleteTagsOutput, error) {
	var output mq.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *mq.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *mq.DeleteUserInput) (*mq.DeleteUserOutput, error) {
	var output mq.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *mq.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DescribeBroker(ctx workflow.Context, input *mq.DescribeBrokerInput) (*mq.DescribeBrokerResponse, error) {
	var output mq.DescribeBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBrokerAsync(ctx workflow.Context, input *mq.DescribeBrokerInput) *DescribeBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBroker", input)
	return &DescribeBrokerFuture{Future: future}
}

func (a *stub) DescribeBrokerEngineTypes(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) (*mq.DescribeBrokerEngineTypesOutput, error) {
	var output mq.DescribeBrokerEngineTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBrokerEngineTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBrokerEngineTypesAsync(ctx workflow.Context, input *mq.DescribeBrokerEngineTypesInput) *DescribeBrokerEngineTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBrokerEngineTypes", input)
	return &DescribeBrokerEngineTypesFuture{Future: future}
}

func (a *stub) DescribeBrokerInstanceOptions(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) (*mq.DescribeBrokerInstanceOptionsOutput, error) {
	var output mq.DescribeBrokerInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBrokerInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBrokerInstanceOptionsAsync(ctx workflow.Context, input *mq.DescribeBrokerInstanceOptionsInput) *DescribeBrokerInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeBrokerInstanceOptions", input)
	return &DescribeBrokerInstanceOptionsFuture{Future: future}
}

func (a *stub) DescribeConfiguration(ctx workflow.Context, input *mq.DescribeConfigurationInput) (*mq.DescribeConfigurationOutput, error) {
	var output mq.DescribeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationAsync(ctx workflow.Context, input *mq.DescribeConfigurationInput) *DescribeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeConfiguration", input)
	return &DescribeConfigurationFuture{Future: future}
}

func (a *stub) DescribeConfigurationRevision(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) (*mq.DescribeConfigurationRevisionResponse, error) {
	var output mq.DescribeConfigurationRevisionResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeConfigurationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationRevisionAsync(ctx workflow.Context, input *mq.DescribeConfigurationRevisionInput) *DescribeConfigurationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeConfigurationRevision", input)
	return &DescribeConfigurationRevisionFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *mq.DescribeUserInput) (*mq.DescribeUserResponse, error) {
	var output mq.DescribeUserResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *mq.DescribeUserInput) *DescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-DescribeUser", input)
	return &DescribeUserFuture{Future: future}
}

func (a *stub) ListBrokers(ctx workflow.Context, input *mq.ListBrokersInput) (*mq.ListBrokersResponse, error) {
	var output mq.ListBrokersResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-ListBrokers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBrokersAsync(ctx workflow.Context, input *mq.ListBrokersInput) *ListBrokersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-ListBrokers", input)
	return &ListBrokersFuture{Future: future}
}

func (a *stub) ListConfigurationRevisions(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) (*mq.ListConfigurationRevisionsResponse, error) {
	var output mq.ListConfigurationRevisionsResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-ListConfigurationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConfigurationRevisionsAsync(ctx workflow.Context, input *mq.ListConfigurationRevisionsInput) *ListConfigurationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-ListConfigurationRevisions", input)
	return &ListConfigurationRevisionsFuture{Future: future}
}

func (a *stub) ListConfigurations(ctx workflow.Context, input *mq.ListConfigurationsInput) (*mq.ListConfigurationsResponse, error) {
	var output mq.ListConfigurationsResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-ListConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConfigurationsAsync(ctx workflow.Context, input *mq.ListConfigurationsInput) *ListConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-ListConfigurations", input)
	return &ListConfigurationsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *mq.ListTagsInput) (*mq.ListTagsOutput, error) {
	var output mq.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *mq.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *mq.ListUsersInput) (*mq.ListUsersResponse, error) {
	var output mq.ListUsersResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *mq.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) RebootBroker(ctx workflow.Context, input *mq.RebootBrokerInput) (*mq.RebootBrokerOutput, error) {
	var output mq.RebootBrokerOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-RebootBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootBrokerAsync(ctx workflow.Context, input *mq.RebootBrokerInput) *RebootBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-RebootBroker", input)
	return &RebootBrokerFuture{Future: future}
}

func (a *stub) UpdateBroker(ctx workflow.Context, input *mq.UpdateBrokerRequest) (*mq.UpdateBrokerResponse, error) {
	var output mq.UpdateBrokerResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-UpdateBroker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBrokerAsync(ctx workflow.Context, input *mq.UpdateBrokerRequest) *UpdateBrokerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-UpdateBroker", input)
	return &UpdateBrokerFuture{Future: future}
}

func (a *stub) UpdateConfiguration(ctx workflow.Context, input *mq.UpdateConfigurationRequest) (*mq.UpdateConfigurationResponse, error) {
	var output mq.UpdateConfigurationResponse
	err := workflow.ExecuteActivity(ctx, "aws-mq-UpdateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationAsync(ctx workflow.Context, input *mq.UpdateConfigurationRequest) *UpdateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-UpdateConfiguration", input)
	return &UpdateConfigurationFuture{Future: future}
}

func (a *stub) UpdateUser(ctx workflow.Context, input *mq.UpdateUserRequest) (*mq.UpdateUserOutput, error) {
	var output mq.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-mq-UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAsync(ctx workflow.Context, input *mq.UpdateUserRequest) *UpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mq-UpdateUser", input)
	return &UpdateUserFuture{Future: future}
}
