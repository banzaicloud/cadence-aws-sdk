// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package wafstub

import (
	"github.com/aws/aws-sdk-go/service/waf"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIPSetFuture) Get(ctx workflow.Context) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRuleFuture) Get(ctx workflow.Context) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRuleGroupFuture) Get(ctx workflow.Context) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWebACLFuture) Get(ctx workflow.Context) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWebACLMigrationStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWebACLMigrationStackFuture) Get(ctx workflow.Context) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteByteMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIPSetFuture) Get(ctx workflow.Context) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePermissionPolicyFuture) Get(ctx workflow.Context) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRuleGroupFuture) Get(ctx workflow.Context) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWebACLFuture) Get(ctx workflow.Context) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteXssMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetByteMatchSetFuture) Get(ctx workflow.Context) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetChangeTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetChangeTokenFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetChangeTokenStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetChangeTokenStatusFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIPSetFuture) Get(ctx workflow.Context) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRateBasedRuleManagedKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRateBasedRuleManagedKeysFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRuleFuture) Get(ctx workflow.Context) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRuleGroupFuture) Get(ctx workflow.Context) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSampledRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSampledRequestsFuture) Get(ctx workflow.Context) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWebACLFuture) Get(ctx workflow.Context) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetXssMatchSetFuture) Get(ctx workflow.Context) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListActivatedRulesInRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListActivatedRulesInRuleGroupFuture) Get(ctx workflow.Context) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListByteMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListByteMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGeoMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGeoMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIPSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIPSetsFuture) Get(ctx workflow.Context) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLoggingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLoggingConfigurationsFuture) Get(ctx workflow.Context) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRateBasedRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRateBasedRulesFuture) Get(ctx workflow.Context) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRegexMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRegexMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRegexPatternSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRegexPatternSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRulesFuture) Get(ctx workflow.Context) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSizeConstraintSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSizeConstraintSetsFuture) Get(ctx workflow.Context) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSqlInjectionMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSqlInjectionMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSubscribedRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSubscribedRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWebACLsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWebACLsFuture) Get(ctx workflow.Context) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListXssMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListXssMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIPSetFuture) Get(ctx workflow.Context) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRuleGroupFuture) Get(ctx workflow.Context) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWebACLFuture) Get(ctx workflow.Context) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *CreateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateByteMatchSet", input)
	return &CreateByteMatchSetFuture{Future: future}
}

func (a *stub) CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *CreateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateGeoMatchSet", input)
	return &CreateGeoMatchSetFuture{Future: future}
}

func (a *stub) CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *CreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateIPSet", input)
	return &CreateIPSetFuture{Future: future}
}

func (a *stub) CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *CreateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRateBasedRule", input)
	return &CreateRateBasedRuleFuture{Future: future}
}

func (a *stub) CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *CreateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexMatchSet", input)
	return &CreateRegexMatchSetFuture{Future: future}
}

func (a *stub) CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *CreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexPatternSet", input)
	return &CreateRegexPatternSetFuture{Future: future}
}

func (a *stub) CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *CreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRule", input)
	return &CreateRuleFuture{Future: future}
}

func (a *stub) CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *CreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRuleGroup", input)
	return &CreateRuleGroupFuture{Future: future}
}

func (a *stub) CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *CreateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateSizeConstraintSet", input)
	return &CreateSizeConstraintSetFuture{Future: future}
}

func (a *stub) CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *CreateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateSqlInjectionMatchSet", input)
	return &CreateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *CreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACL", input)
	return &CreateWebACLFuture{Future: future}
}

func (a *stub) CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACLMigrationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *CreateWebACLMigrationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACLMigrationStack", input)
	return &CreateWebACLMigrationStackFuture{Future: future}
}

func (a *stub) CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *CreateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateXssMatchSet", input)
	return &CreateXssMatchSetFuture{Future: future}
}

func (a *stub) DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *DeleteByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteByteMatchSet", input)
	return &DeleteByteMatchSetFuture{Future: future}
}

func (a *stub) DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *DeleteGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteGeoMatchSet", input)
	return &DeleteGeoMatchSetFuture{Future: future}
}

func (a *stub) DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *DeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteIPSet", input)
	return &DeleteIPSetFuture{Future: future}
}

func (a *stub) DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *DeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteLoggingConfiguration", input)
	return &DeleteLoggingConfigurationFuture{Future: future}
}

func (a *stub) DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *DeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeletePermissionPolicy", input)
	return &DeletePermissionPolicyFuture{Future: future}
}

func (a *stub) DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *DeleteRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRateBasedRule", input)
	return &DeleteRateBasedRuleFuture{Future: future}
}

func (a *stub) DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *DeleteRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexMatchSet", input)
	return &DeleteRegexMatchSetFuture{Future: future}
}

func (a *stub) DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *DeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexPatternSet", input)
	return &DeleteRegexPatternSetFuture{Future: future}
}

func (a *stub) DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *DeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRule", input)
	return &DeleteRuleFuture{Future: future}
}

func (a *stub) DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *DeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRuleGroup", input)
	return &DeleteRuleGroupFuture{Future: future}
}

func (a *stub) DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *DeleteSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSizeConstraintSet", input)
	return &DeleteSizeConstraintSetFuture{Future: future}
}

func (a *stub) DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *DeleteSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSqlInjectionMatchSet", input)
	return &DeleteSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *DeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteWebACL", input)
	return &DeleteWebACLFuture{Future: future}
}

func (a *stub) DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *DeleteXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteXssMatchSet", input)
	return &DeleteXssMatchSetFuture{Future: future}
}

func (a *stub) GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *GetByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetByteMatchSet", input)
	return &GetByteMatchSetFuture{Future: future}
}

func (a *stub) GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *GetChangeTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeToken", input)
	return &GetChangeTokenFuture{Future: future}
}

func (a *stub) GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeTokenStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *GetChangeTokenStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeTokenStatus", input)
	return &GetChangeTokenStatusFuture{Future: future}
}

func (a *stub) GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *GetGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetGeoMatchSet", input)
	return &GetGeoMatchSetFuture{Future: future}
}

func (a *stub) GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *GetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetIPSet", input)
	return &GetIPSetFuture{Future: future}
}

func (a *stub) GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *GetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetLoggingConfiguration", input)
	return &GetLoggingConfigurationFuture{Future: future}
}

func (a *stub) GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *GetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetPermissionPolicy", input)
	return &GetPermissionPolicyFuture{Future: future}
}

func (a *stub) GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *GetRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRule", input)
	return &GetRateBasedRuleFuture{Future: future}
}

func (a *stub) GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRuleManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *GetRateBasedRuleManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRuleManagedKeys", input)
	return &GetRateBasedRuleManagedKeysFuture{Future: future}
}

func (a *stub) GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *GetRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexMatchSet", input)
	return &GetRegexMatchSetFuture{Future: future}
}

func (a *stub) GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *GetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexPatternSet", input)
	return &GetRegexPatternSetFuture{Future: future}
}

func (a *stub) GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *GetRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRule", input)
	return &GetRuleFuture{Future: future}
}

func (a *stub) GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *GetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRuleGroup", input)
	return &GetRuleGroupFuture{Future: future}
}

func (a *stub) GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *GetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSampledRequests", input)
	return &GetSampledRequestsFuture{Future: future}
}

func (a *stub) GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *GetSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSizeConstraintSet", input)
	return &GetSizeConstraintSetFuture{Future: future}
}

func (a *stub) GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *GetSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSqlInjectionMatchSet", input)
	return &GetSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *GetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetWebACL", input)
	return &GetWebACLFuture{Future: future}
}

func (a *stub) GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *GetXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetXssMatchSet", input)
	return &GetXssMatchSetFuture{Future: future}
}

func (a *stub) ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListActivatedRulesInRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *ListActivatedRulesInRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListActivatedRulesInRuleGroup", input)
	return &ListActivatedRulesInRuleGroupFuture{Future: future}
}

func (a *stub) ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListByteMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *ListByteMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListByteMatchSets", input)
	return &ListByteMatchSetsFuture{Future: future}
}

func (a *stub) ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListGeoMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *ListGeoMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListGeoMatchSets", input)
	return &ListGeoMatchSetsFuture{Future: future}
}

func (a *stub) ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *ListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListIPSets", input)
	return &ListIPSetsFuture{Future: future}
}

func (a *stub) ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *ListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListLoggingConfigurations", input)
	return &ListLoggingConfigurationsFuture{Future: future}
}

func (a *stub) ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRateBasedRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *ListRateBasedRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRateBasedRules", input)
	return &ListRateBasedRulesFuture{Future: future}
}

func (a *stub) ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *ListRegexMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexMatchSets", input)
	return &ListRegexMatchSetsFuture{Future: future}
}

func (a *stub) ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *ListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexPatternSets", input)
	return &ListRegexPatternSetsFuture{Future: future}
}

func (a *stub) ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *ListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRuleGroups", input)
	return &ListRuleGroupsFuture{Future: future}
}

func (a *stub) ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *ListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRules", input)
	return &ListRulesFuture{Future: future}
}

func (a *stub) ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSizeConstraintSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *ListSizeConstraintSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSizeConstraintSets", input)
	return &ListSizeConstraintSetsFuture{Future: future}
}

func (a *stub) ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSqlInjectionMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *ListSqlInjectionMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSqlInjectionMatchSets", input)
	return &ListSqlInjectionMatchSetsFuture{Future: future}
}

func (a *stub) ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSubscribedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *ListSubscribedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSubscribedRuleGroups", input)
	return &ListSubscribedRuleGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *ListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListWebACLs", input)
	return &ListWebACLsFuture{Future: future}
}

func (a *stub) ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListXssMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *ListXssMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListXssMatchSets", input)
	return &ListXssMatchSetsFuture{Future: future}
}

func (a *stub) PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *PutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-PutLoggingConfiguration", input)
	return &PutLoggingConfigurationFuture{Future: future}
}

func (a *stub) PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *PutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-PutPermissionPolicy", input)
	return &PutPermissionPolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *UpdateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateByteMatchSet", input)
	return &UpdateByteMatchSetFuture{Future: future}
}

func (a *stub) UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *UpdateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateGeoMatchSet", input)
	return &UpdateGeoMatchSetFuture{Future: future}
}

func (a *stub) UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *UpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateIPSet", input)
	return &UpdateIPSetFuture{Future: future}
}

func (a *stub) UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *UpdateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRateBasedRule", input)
	return &UpdateRateBasedRuleFuture{Future: future}
}

func (a *stub) UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *UpdateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexMatchSet", input)
	return &UpdateRegexMatchSetFuture{Future: future}
}

func (a *stub) UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *UpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexPatternSet", input)
	return &UpdateRegexPatternSetFuture{Future: future}
}

func (a *stub) UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *UpdateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRule", input)
	return &UpdateRuleFuture{Future: future}
}

func (a *stub) UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *UpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRuleGroup", input)
	return &UpdateRuleGroupFuture{Future: future}
}

func (a *stub) UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *UpdateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSizeConstraintSet", input)
	return &UpdateSizeConstraintSetFuture{Future: future}
}

func (a *stub) UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *UpdateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSqlInjectionMatchSet", input)
	return &UpdateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *UpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateWebACL", input)
	return &UpdateWebACLFuture{Future: future}
}

func (a *stub) UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *UpdateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateXssMatchSet", input)
	return &UpdateXssMatchSetFuture{Future: future}
}
