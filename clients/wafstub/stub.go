// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package wafstub

import (
	"github.com/aws/aws-sdk-go/service/waf"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type WAFCreateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateIPSetFuture) Get(ctx workflow.Context) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateRuleFuture) Get(ctx workflow.Context) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateRuleGroupFuture) Get(ctx workflow.Context) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateWebACLFuture) Get(ctx workflow.Context) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateWebACLMigrationStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateWebACLMigrationStackFuture) Get(ctx workflow.Context) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFCreateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteByteMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteIPSetFuture) Get(ctx workflow.Context) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeletePermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeletePermissionPolicyFuture) Get(ctx workflow.Context) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteRuleGroupFuture) Get(ctx workflow.Context) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteWebACLFuture) Get(ctx workflow.Context) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFDeleteXssMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetByteMatchSetFuture) Get(ctx workflow.Context) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetChangeTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetChangeTokenFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetChangeTokenStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetChangeTokenStatusFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetIPSetFuture) Get(ctx workflow.Context) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRateBasedRuleManagedKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRateBasedRuleManagedKeysFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRuleFuture) Get(ctx workflow.Context) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetRuleGroupFuture) Get(ctx workflow.Context) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSampledRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetSampledRequestsFuture) Get(ctx workflow.Context) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetWebACLFuture) Get(ctx workflow.Context) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFGetXssMatchSetFuture) Get(ctx workflow.Context) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListActivatedRulesInRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListActivatedRulesInRuleGroupFuture) Get(ctx workflow.Context) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListByteMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListByteMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListGeoMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListGeoMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListIPSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListIPSetsFuture) Get(ctx workflow.Context) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListLoggingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListLoggingConfigurationsFuture) Get(ctx workflow.Context) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRateBasedRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListRateBasedRulesFuture) Get(ctx workflow.Context) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRegexMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListRegexMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRegexPatternSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListRegexPatternSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListRulesFuture) Get(ctx workflow.Context) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSizeConstraintSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListSizeConstraintSetsFuture) Get(ctx workflow.Context) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSqlInjectionMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListSqlInjectionMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSubscribedRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListSubscribedRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListTagsForResourceFuture) Get(ctx workflow.Context) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListWebACLsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListWebACLsFuture) Get(ctx workflow.Context) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListXssMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFListXssMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFPutLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFPutLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFPutPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFPutPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFTagResourceFuture) Get(ctx workflow.Context) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUntagResourceFuture) Get(ctx workflow.Context) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateIPSetFuture) Get(ctx workflow.Context) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateRuleGroupFuture) Get(ctx workflow.Context) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateWebACLFuture) Get(ctx workflow.Context) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFUpdateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WAFCreateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateByteMatchSet", input)
	return &WAFCreateByteMatchSetFuture{Future: future}
}

func (a *stub) CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WAFCreateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateGeoMatchSet", input)
	return &WAFCreateGeoMatchSetFuture{Future: future}
}

func (a *stub) CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WAFCreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateIPSet", input)
	return &WAFCreateIPSetFuture{Future: future}
}

func (a *stub) CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WAFCreateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRateBasedRule", input)
	return &WAFCreateRateBasedRuleFuture{Future: future}
}

func (a *stub) CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WAFCreateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexMatchSet", input)
	return &WAFCreateRegexMatchSetFuture{Future: future}
}

func (a *stub) CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WAFCreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRegexPatternSet", input)
	return &WAFCreateRegexPatternSetFuture{Future: future}
}

func (a *stub) CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WAFCreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRule", input)
	return &WAFCreateRuleFuture{Future: future}
}

func (a *stub) CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WAFCreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateRuleGroup", input)
	return &WAFCreateRuleGroupFuture{Future: future}
}

func (a *stub) CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WAFCreateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateSizeConstraintSet", input)
	return &WAFCreateSizeConstraintSetFuture{Future: future}
}

func (a *stub) CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WAFCreateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateSqlInjectionMatchSet", input)
	return &WAFCreateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WAFCreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACL", input)
	return &WAFCreateWebACLFuture{Future: future}
}

func (a *stub) CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACLMigrationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WAFCreateWebACLMigrationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateWebACLMigrationStack", input)
	return &WAFCreateWebACLMigrationStackFuture{Future: future}
}

func (a *stub) CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-CreateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WAFCreateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-CreateXssMatchSet", input)
	return &WAFCreateXssMatchSetFuture{Future: future}
}

func (a *stub) DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WAFDeleteByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteByteMatchSet", input)
	return &WAFDeleteByteMatchSetFuture{Future: future}
}

func (a *stub) DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WAFDeleteGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteGeoMatchSet", input)
	return &WAFDeleteGeoMatchSetFuture{Future: future}
}

func (a *stub) DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WAFDeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteIPSet", input)
	return &WAFDeleteIPSetFuture{Future: future}
}

func (a *stub) DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WAFDeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteLoggingConfiguration", input)
	return &WAFDeleteLoggingConfigurationFuture{Future: future}
}

func (a *stub) DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WAFDeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeletePermissionPolicy", input)
	return &WAFDeletePermissionPolicyFuture{Future: future}
}

func (a *stub) DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WAFDeleteRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRateBasedRule", input)
	return &WAFDeleteRateBasedRuleFuture{Future: future}
}

func (a *stub) DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WAFDeleteRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexMatchSet", input)
	return &WAFDeleteRegexMatchSetFuture{Future: future}
}

func (a *stub) DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WAFDeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRegexPatternSet", input)
	return &WAFDeleteRegexPatternSetFuture{Future: future}
}

func (a *stub) DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WAFDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRule", input)
	return &WAFDeleteRuleFuture{Future: future}
}

func (a *stub) DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WAFDeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteRuleGroup", input)
	return &WAFDeleteRuleGroupFuture{Future: future}
}

func (a *stub) DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WAFDeleteSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSizeConstraintSet", input)
	return &WAFDeleteSizeConstraintSetFuture{Future: future}
}

func (a *stub) DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WAFDeleteSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteSqlInjectionMatchSet", input)
	return &WAFDeleteSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WAFDeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteWebACL", input)
	return &WAFDeleteWebACLFuture{Future: future}
}

func (a *stub) DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-DeleteXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WAFDeleteXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-DeleteXssMatchSet", input)
	return &WAFDeleteXssMatchSetFuture{Future: future}
}

func (a *stub) GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WAFGetByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetByteMatchSet", input)
	return &WAFGetByteMatchSetFuture{Future: future}
}

func (a *stub) GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WAFGetChangeTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeToken", input)
	return &WAFGetChangeTokenFuture{Future: future}
}

func (a *stub) GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeTokenStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WAFGetChangeTokenStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetChangeTokenStatus", input)
	return &WAFGetChangeTokenStatusFuture{Future: future}
}

func (a *stub) GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WAFGetGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetGeoMatchSet", input)
	return &WAFGetGeoMatchSetFuture{Future: future}
}

func (a *stub) GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WAFGetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetIPSet", input)
	return &WAFGetIPSetFuture{Future: future}
}

func (a *stub) GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WAFGetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetLoggingConfiguration", input)
	return &WAFGetLoggingConfigurationFuture{Future: future}
}

func (a *stub) GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WAFGetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetPermissionPolicy", input)
	return &WAFGetPermissionPolicyFuture{Future: future}
}

func (a *stub) GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WAFGetRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRule", input)
	return &WAFGetRateBasedRuleFuture{Future: future}
}

func (a *stub) GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRuleManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WAFGetRateBasedRuleManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRateBasedRuleManagedKeys", input)
	return &WAFGetRateBasedRuleManagedKeysFuture{Future: future}
}

func (a *stub) GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WAFGetRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexMatchSet", input)
	return &WAFGetRegexMatchSetFuture{Future: future}
}

func (a *stub) GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WAFGetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRegexPatternSet", input)
	return &WAFGetRegexPatternSetFuture{Future: future}
}

func (a *stub) GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WAFGetRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRule", input)
	return &WAFGetRuleFuture{Future: future}
}

func (a *stub) GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WAFGetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetRuleGroup", input)
	return &WAFGetRuleGroupFuture{Future: future}
}

func (a *stub) GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WAFGetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSampledRequests", input)
	return &WAFGetSampledRequestsFuture{Future: future}
}

func (a *stub) GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WAFGetSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSizeConstraintSet", input)
	return &WAFGetSizeConstraintSetFuture{Future: future}
}

func (a *stub) GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WAFGetSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetSqlInjectionMatchSet", input)
	return &WAFGetSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WAFGetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetWebACL", input)
	return &WAFGetWebACLFuture{Future: future}
}

func (a *stub) GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-GetXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WAFGetXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-GetXssMatchSet", input)
	return &WAFGetXssMatchSetFuture{Future: future}
}

func (a *stub) ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListActivatedRulesInRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WAFListActivatedRulesInRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListActivatedRulesInRuleGroup", input)
	return &WAFListActivatedRulesInRuleGroupFuture{Future: future}
}

func (a *stub) ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListByteMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WAFListByteMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListByteMatchSets", input)
	return &WAFListByteMatchSetsFuture{Future: future}
}

func (a *stub) ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListGeoMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WAFListGeoMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListGeoMatchSets", input)
	return &WAFListGeoMatchSetsFuture{Future: future}
}

func (a *stub) ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WAFListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListIPSets", input)
	return &WAFListIPSetsFuture{Future: future}
}

func (a *stub) ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WAFListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListLoggingConfigurations", input)
	return &WAFListLoggingConfigurationsFuture{Future: future}
}

func (a *stub) ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRateBasedRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WAFListRateBasedRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRateBasedRules", input)
	return &WAFListRateBasedRulesFuture{Future: future}
}

func (a *stub) ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WAFListRegexMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexMatchSets", input)
	return &WAFListRegexMatchSetsFuture{Future: future}
}

func (a *stub) ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WAFListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRegexPatternSets", input)
	return &WAFListRegexPatternSetsFuture{Future: future}
}

func (a *stub) ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WAFListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRuleGroups", input)
	return &WAFListRuleGroupsFuture{Future: future}
}

func (a *stub) ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WAFListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListRules", input)
	return &WAFListRulesFuture{Future: future}
}

func (a *stub) ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSizeConstraintSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WAFListSizeConstraintSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSizeConstraintSets", input)
	return &WAFListSizeConstraintSetsFuture{Future: future}
}

func (a *stub) ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSqlInjectionMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WAFListSqlInjectionMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSqlInjectionMatchSets", input)
	return &WAFListSqlInjectionMatchSetsFuture{Future: future}
}

func (a *stub) ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListSubscribedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WAFListSubscribedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListSubscribedRuleGroups", input)
	return &WAFListSubscribedRuleGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WAFListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListTagsForResource", input)
	return &WAFListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WAFListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListWebACLs", input)
	return &WAFListWebACLsFuture{Future: future}
}

func (a *stub) ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-ListXssMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WAFListXssMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-ListXssMatchSets", input)
	return &WAFListXssMatchSetsFuture{Future: future}
}

func (a *stub) PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WAFPutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-PutLoggingConfiguration", input)
	return &WAFPutLoggingConfigurationFuture{Future: future}
}

func (a *stub) PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WAFPutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-PutPermissionPolicy", input)
	return &WAFPutPermissionPolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WAFTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-TagResource", input)
	return &WAFTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WAFUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UntagResource", input)
	return &WAFUntagResourceFuture{Future: future}
}

func (a *stub) UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WAFUpdateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateByteMatchSet", input)
	return &WAFUpdateByteMatchSetFuture{Future: future}
}

func (a *stub) UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WAFUpdateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateGeoMatchSet", input)
	return &WAFUpdateGeoMatchSetFuture{Future: future}
}

func (a *stub) UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WAFUpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateIPSet", input)
	return &WAFUpdateIPSetFuture{Future: future}
}

func (a *stub) UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WAFUpdateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRateBasedRule", input)
	return &WAFUpdateRateBasedRuleFuture{Future: future}
}

func (a *stub) UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WAFUpdateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexMatchSet", input)
	return &WAFUpdateRegexMatchSetFuture{Future: future}
}

func (a *stub) UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WAFUpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRegexPatternSet", input)
	return &WAFUpdateRegexPatternSetFuture{Future: future}
}

func (a *stub) UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WAFUpdateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRule", input)
	return &WAFUpdateRuleFuture{Future: future}
}

func (a *stub) UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WAFUpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateRuleGroup", input)
	return &WAFUpdateRuleGroupFuture{Future: future}
}

func (a *stub) UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WAFUpdateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSizeConstraintSet", input)
	return &WAFUpdateSizeConstraintSetFuture{Future: future}
}

func (a *stub) UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WAFUpdateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateSqlInjectionMatchSet", input)
	return &WAFUpdateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WAFUpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateWebACL", input)
	return &WAFUpdateWebACLFuture{Future: future}
}

func (a *stub) UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-waf-UpdateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WAFUpdateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-waf-UpdateXssMatchSet", input)
	return &WAFUpdateXssMatchSetFuture{Future: future}
}
