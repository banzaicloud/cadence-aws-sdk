// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cognitoidentitystub

import (
	"github.com/aws/aws-sdk-go/service/cognitoidentity"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CognitoIdentityCreateIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityCreateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDeleteIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDeleteIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDeleteIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDeleteIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDescribeIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDescribeIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityDescribeIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityDescribeIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetCredentialsForIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetCredentialsForIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetIdFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetIdentityPoolRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetOpenIdTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetOpenIdTokenFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListIdentityPoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListIdentityPoolsFuture) Get(ctx workflow.Context) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityListTagsForResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityLookupDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityLookupDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityMergeDeveloperIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityMergeDeveloperIdentitiesFuture) Get(ctx workflow.Context) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentitySetIdentityPoolRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentitySetIdentityPoolRolesFuture) Get(ctx workflow.Context) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityTagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUnlinkDeveloperIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUnlinkDeveloperIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUnlinkIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUnlinkIdentityFuture) Get(ctx workflow.Context) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUntagResourceFuture) Get(ctx workflow.Context) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CognitoIdentityUpdateIdentityPoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CognitoIdentityUpdateIdentityPoolFuture) Get(ctx workflow.Context) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIdentityPool(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-CreateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.CreateIdentityPoolInput) *CognitoIdentityCreateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-CreateIdentityPool", input)
	return &CognitoIdentityCreateIdentityPoolFuture{Future: future}
}

func (a *stub) DeleteIdentities(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) (*cognitoidentity.DeleteIdentitiesOutput, error) {
	var output cognitoidentity.DeleteIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DeleteIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentitiesInput) *CognitoIdentityDeleteIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DeleteIdentities", input)
	return &CognitoIdentityDeleteIdentitiesFuture{Future: future}
}

func (a *stub) DeleteIdentityPool(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) (*cognitoidentity.DeleteIdentityPoolOutput, error) {
	var output cognitoidentity.DeleteIdentityPoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DeleteIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DeleteIdentityPoolInput) *CognitoIdentityDeleteIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DeleteIdentityPool", input)
	return &CognitoIdentityDeleteIdentityPoolFuture{Future: future}
}

func (a *stub) DescribeIdentity(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) (*cognitoidentity.IdentityDescription, error) {
	var output cognitoidentity.IdentityDescription
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DescribeIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityInput) *CognitoIdentityDescribeIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DescribeIdentity", input)
	return &CognitoIdentityDescribeIdentityFuture{Future: future}
}

func (a *stub) DescribeIdentityPool(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DescribeIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.DescribeIdentityPoolInput) *CognitoIdentityDescribeIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-DescribeIdentityPool", input)
	return &CognitoIdentityDescribeIdentityPoolFuture{Future: future}
}

func (a *stub) GetCredentialsForIdentity(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {
	var output cognitoidentity.GetCredentialsForIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetCredentialsForIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCredentialsForIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetCredentialsForIdentityInput) *CognitoIdentityGetCredentialsForIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetCredentialsForIdentity", input)
	return &CognitoIdentityGetCredentialsForIdentityFuture{Future: future}
}

func (a *stub) GetId(ctx workflow.Context, input *cognitoidentity.GetIdInput) (*cognitoidentity.GetIdOutput, error) {
	var output cognitoidentity.GetIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdAsync(ctx workflow.Context, input *cognitoidentity.GetIdInput) *CognitoIdentityGetIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetId", input)
	return &CognitoIdentityGetIdFuture{Future: future}
}

func (a *stub) GetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.GetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.GetIdentityPoolRolesInput) *CognitoIdentityGetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetIdentityPoolRoles", input)
	return &CognitoIdentityGetIdentityPoolRolesFuture{Future: future}
}

func (a *stub) GetOpenIdToken(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) (*cognitoidentity.GetOpenIdTokenOutput, error) {
	var output cognitoidentity.GetOpenIdTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetOpenIdToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpenIdTokenAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenInput) *CognitoIdentityGetOpenIdTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetOpenIdToken", input)
	return &CognitoIdentityGetOpenIdTokenFuture{Future: future}
}

func (a *stub) GetOpenIdTokenForDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	var output cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetOpenIdTokenForDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpenIdTokenForDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) *CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-GetOpenIdTokenForDeveloperIdentity", input)
	return &CognitoIdentityGetOpenIdTokenForDeveloperIdentityFuture{Future: future}
}

func (a *stub) ListIdentities(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) (*cognitoidentity.ListIdentitiesOutput, error) {
	var output cognitoidentity.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.ListIdentitiesInput) *CognitoIdentityListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListIdentities", input)
	return &CognitoIdentityListIdentitiesFuture{Future: future}
}

func (a *stub) ListIdentityPools(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) (*cognitoidentity.ListIdentityPoolsOutput, error) {
	var output cognitoidentity.ListIdentityPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListIdentityPools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentityPoolsAsync(ctx workflow.Context, input *cognitoidentity.ListIdentityPoolsInput) *CognitoIdentityListIdentityPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListIdentityPools", input)
	return &CognitoIdentityListIdentityPoolsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) (*cognitoidentity.ListTagsForResourceOutput, error) {
	var output cognitoidentity.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cognitoidentity.ListTagsForResourceInput) *CognitoIdentityListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-ListTagsForResource", input)
	return &CognitoIdentityListTagsForResourceFuture{Future: future}
}

func (a *stub) LookupDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {
	var output cognitoidentity.LookupDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-LookupDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LookupDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.LookupDeveloperIdentityInput) *CognitoIdentityLookupDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-LookupDeveloperIdentity", input)
	return &CognitoIdentityLookupDeveloperIdentityFuture{Future: future}
}

func (a *stub) MergeDeveloperIdentities(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {
	var output cognitoidentity.MergeDeveloperIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-MergeDeveloperIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MergeDeveloperIdentitiesAsync(ctx workflow.Context, input *cognitoidentity.MergeDeveloperIdentitiesInput) *CognitoIdentityMergeDeveloperIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-MergeDeveloperIdentities", input)
	return &CognitoIdentityMergeDeveloperIdentitiesFuture{Future: future}
}

func (a *stub) SetIdentityPoolRoles(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {
	var output cognitoidentity.SetIdentityPoolRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-SetIdentityPoolRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityPoolRolesAsync(ctx workflow.Context, input *cognitoidentity.SetIdentityPoolRolesInput) *CognitoIdentitySetIdentityPoolRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-SetIdentityPoolRoles", input)
	return &CognitoIdentitySetIdentityPoolRolesFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cognitoidentity.TagResourceInput) (*cognitoidentity.TagResourceOutput, error) {
	var output cognitoidentity.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cognitoidentity.TagResourceInput) *CognitoIdentityTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-TagResource", input)
	return &CognitoIdentityTagResourceFuture{Future: future}
}

func (a *stub) UnlinkDeveloperIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {
	var output cognitoidentity.UnlinkDeveloperIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UnlinkDeveloperIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnlinkDeveloperIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkDeveloperIdentityInput) *CognitoIdentityUnlinkDeveloperIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UnlinkDeveloperIdentity", input)
	return &CognitoIdentityUnlinkDeveloperIdentityFuture{Future: future}
}

func (a *stub) UnlinkIdentity(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) (*cognitoidentity.UnlinkIdentityOutput, error) {
	var output cognitoidentity.UnlinkIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UnlinkIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnlinkIdentityAsync(ctx workflow.Context, input *cognitoidentity.UnlinkIdentityInput) *CognitoIdentityUnlinkIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UnlinkIdentity", input)
	return &CognitoIdentityUnlinkIdentityFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) (*cognitoidentity.UntagResourceOutput, error) {
	var output cognitoidentity.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cognitoidentity.UntagResourceInput) *CognitoIdentityUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UntagResource", input)
	return &CognitoIdentityUntagResourceFuture{Future: future}
}

func (a *stub) UpdateIdentityPool(ctx workflow.Context, input *cognitoidentity.IdentityPool) (*cognitoidentity.IdentityPool, error) {
	var output cognitoidentity.IdentityPool
	err := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UpdateIdentityPool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIdentityPoolAsync(ctx workflow.Context, input *cognitoidentity.IdentityPool) *CognitoIdentityUpdateIdentityPoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitoidentity-UpdateIdentityPool", input)
	return &CognitoIdentityUpdateIdentityPoolFuture{Future: future}
}
