// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudwatchlogsstub

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateKmsKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateExportTaskFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLogStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLogStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLogStreamFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteQueryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSubscriptionFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDestinationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDestinationsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExportTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExportTasksFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLogGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLogGroupsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLogStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLogStreamsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMetricFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMetricFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeQueriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeQueriesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeQueryDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeQueryDefinitionsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourcePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourcePoliciesFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSubscriptionFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSubscriptionFiltersFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateKmsKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateKmsKeyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FilterLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FilterLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLogGroupFieldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLogGroupFieldsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLogRecordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLogRecordFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueryResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueryResultsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDestinationFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDestinationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDestinationPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLogEventsFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutQueryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutQueryDefinitionFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourcePolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRetentionPolicyFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSubscriptionFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSubscriptionFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopQueryFuture) Get(ctx workflow.Context) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestMetricFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestMetricFilterFuture) Get(ctx workflow.Context) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagLogGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagLogGroupFuture) Get(ctx workflow.Context) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	var output cloudwatchlogs.AssociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-AssociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.AssociateKmsKeyInput) *AssociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-AssociateKmsKey", input)
	return &AssociateKmsKeyFuture{Future: future}
}

func (a *stub) CancelExportTask(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	var output cloudwatchlogs.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CancelExportTaskInput) *CancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CancelExportTask", input)
	return &CancelExportTaskFuture{Future: future}
}

func (a *stub) CreateExportTask(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	var output cloudwatchlogs.CreateExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateExportTaskAsync(ctx workflow.Context, input *cloudwatchlogs.CreateExportTaskInput) *CreateExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateExportTask", input)
	return &CreateExportTaskFuture{Future: future}
}

func (a *stub) CreateLogGroup(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	var output cloudwatchlogs.CreateLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogGroupInput) *CreateLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateLogGroup", input)
	return &CreateLogGroupFuture{Future: future}
}

func (a *stub) CreateLogStream(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	var output cloudwatchlogs.CreateLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.CreateLogStreamInput) *CreateLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-CreateLogStream", input)
	return &CreateLogStreamFuture{Future: future}
}

func (a *stub) DeleteDestination(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	var output cloudwatchlogs.DeleteDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteDestinationInput) *DeleteDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteDestination", input)
	return &DeleteDestinationFuture{Future: future}
}

func (a *stub) DeleteLogGroup(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	var output cloudwatchlogs.DeleteLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogGroupInput) *DeleteLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteLogGroup", input)
	return &DeleteLogGroupFuture{Future: future}
}

func (a *stub) DeleteLogStream(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	var output cloudwatchlogs.DeleteLogStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteLogStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLogStreamAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteLogStreamInput) *DeleteLogStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteLogStream", input)
	return &DeleteLogStreamFuture{Future: future}
}

func (a *stub) DeleteMetricFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	var output cloudwatchlogs.DeleteMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteMetricFilterInput) *DeleteMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteMetricFilter", input)
	return &DeleteMetricFilterFuture{Future: future}
}

func (a *stub) DeleteQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	var output cloudwatchlogs.DeleteQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteQueryDefinitionInput) *DeleteQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteQueryDefinition", input)
	return &DeleteQueryDefinitionFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	var output cloudwatchlogs.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteResourcePolicyInput) *DeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteResourcePolicy", input)
	return &DeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	var output cloudwatchlogs.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput) *DeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteRetentionPolicy", input)
	return &DeleteRetentionPolicyFuture{Future: future}
}

func (a *stub) DeleteSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.DeleteSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput) *DeleteSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DeleteSubscriptionFilter", input)
	return &DeleteSubscriptionFilterFuture{Future: future}
}

func (a *stub) DescribeDestinations(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	var output cloudwatchlogs.DescribeDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDestinationsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeDestinationsInput) *DescribeDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeDestinations", input)
	return &DescribeDestinationsFuture{Future: future}
}

func (a *stub) DescribeExportTasks(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	var output cloudwatchlogs.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExportTasksAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeExportTasksInput) *DescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeExportTasks", input)
	return &DescribeExportTasksFuture{Future: future}
}

func (a *stub) DescribeLogGroups(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	var output cloudwatchlogs.DescribeLogGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeLogGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLogGroupsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogGroupsInput) *DescribeLogGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeLogGroups", input)
	return &DescribeLogGroupsFuture{Future: future}
}

func (a *stub) DescribeLogStreams(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	var output cloudwatchlogs.DescribeLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLogStreamsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeLogStreamsInput) *DescribeLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeLogStreams", input)
	return &DescribeLogStreamsFuture{Future: future}
}

func (a *stub) DescribeMetricFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	var output cloudwatchlogs.DescribeMetricFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeMetricFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMetricFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeMetricFiltersInput) *DescribeMetricFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeMetricFilters", input)
	return &DescribeMetricFiltersFuture{Future: future}
}

func (a *stub) DescribeQueries(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	var output cloudwatchlogs.DescribeQueriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeQueries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeQueriesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueriesInput) *DescribeQueriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeQueries", input)
	return &DescribeQueriesFuture{Future: future}
}

func (a *stub) DescribeQueryDefinitions(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	var output cloudwatchlogs.DescribeQueryDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeQueryDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeQueryDefinitionsAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeQueryDefinitionsInput) *DescribeQueryDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeQueryDefinitions", input)
	return &DescribeQueryDefinitionsFuture{Future: future}
}

func (a *stub) DescribeResourcePolicies(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	var output cloudwatchlogs.DescribeResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourcePoliciesAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput) *DescribeResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeResourcePolicies", input)
	return &DescribeResourcePoliciesFuture{Future: future}
}

func (a *stub) DescribeSubscriptionFilters(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	var output cloudwatchlogs.DescribeSubscriptionFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeSubscriptionFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSubscriptionFiltersAsync(ctx workflow.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput) *DescribeSubscriptionFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DescribeSubscriptionFilters", input)
	return &DescribeSubscriptionFiltersFuture{Future: future}
}

func (a *stub) DisassociateKmsKey(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	var output cloudwatchlogs.DisassociateKmsKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DisassociateKmsKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateKmsKeyAsync(ctx workflow.Context, input *cloudwatchlogs.DisassociateKmsKeyInput) *DisassociateKmsKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-DisassociateKmsKey", input)
	return &DisassociateKmsKeyFuture{Future: future}
}

func (a *stub) FilterLogEvents(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	var output cloudwatchlogs.FilterLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-FilterLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FilterLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.FilterLogEventsInput) *FilterLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-FilterLogEvents", input)
	return &FilterLogEventsFuture{Future: future}
}

func (a *stub) GetLogEvents(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	var output cloudwatchlogs.GetLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogEventsInput) *GetLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogEvents", input)
	return &GetLogEventsFuture{Future: future}
}

func (a *stub) GetLogGroupFields(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	var output cloudwatchlogs.GetLogGroupFieldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogGroupFields", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLogGroupFieldsAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogGroupFieldsInput) *GetLogGroupFieldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogGroupFields", input)
	return &GetLogGroupFieldsFuture{Future: future}
}

func (a *stub) GetLogRecord(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error) {
	var output cloudwatchlogs.GetLogRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLogRecordAsync(ctx workflow.Context, input *cloudwatchlogs.GetLogRecordInput) *GetLogRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetLogRecord", input)
	return &GetLogRecordFuture{Future: future}
}

func (a *stub) GetQueryResults(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	var output cloudwatchlogs.GetQueryResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetQueryResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueryResultsAsync(ctx workflow.Context, input *cloudwatchlogs.GetQueryResultsInput) *GetQueryResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-GetQueryResults", input)
	return &GetQueryResultsFuture{Future: future}
}

func (a *stub) ListTagsLogGroup(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	var output cloudwatchlogs.ListTagsLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-ListTagsLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.ListTagsLogGroupInput) *ListTagsLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-ListTagsLogGroup", input)
	return &ListTagsLogGroupFuture{Future: future}
}

func (a *stub) PutDestination(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	var output cloudwatchlogs.PutDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDestinationAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationInput) *PutDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutDestination", input)
	return &PutDestinationFuture{Future: future}
}

func (a *stub) PutDestinationPolicy(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	var output cloudwatchlogs.PutDestinationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutDestinationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDestinationPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutDestinationPolicyInput) *PutDestinationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutDestinationPolicy", input)
	return &PutDestinationPolicyFuture{Future: future}
}

func (a *stub) PutLogEvents(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	var output cloudwatchlogs.PutLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLogEventsAsync(ctx workflow.Context, input *cloudwatchlogs.PutLogEventsInput) *PutLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutLogEvents", input)
	return &PutLogEventsFuture{Future: future}
}

func (a *stub) PutMetricFilter(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	var output cloudwatchlogs.PutMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutMetricFilterInput) *PutMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutMetricFilter", input)
	return &PutMetricFilterFuture{Future: future}
}

func (a *stub) PutQueryDefinition(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	var output cloudwatchlogs.PutQueryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutQueryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutQueryDefinitionAsync(ctx workflow.Context, input *cloudwatchlogs.PutQueryDefinitionInput) *PutQueryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutQueryDefinition", input)
	return &PutQueryDefinitionFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	var output cloudwatchlogs.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutResourcePolicyInput) *PutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutResourcePolicy", input)
	return &PutResourcePolicyFuture{Future: future}
}

func (a *stub) PutRetentionPolicy(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	var output cloudwatchlogs.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionPolicyAsync(ctx workflow.Context, input *cloudwatchlogs.PutRetentionPolicyInput) *PutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutRetentionPolicy", input)
	return &PutRetentionPolicyFuture{Future: future}
}

func (a *stub) PutSubscriptionFilter(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	var output cloudwatchlogs.PutSubscriptionFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutSubscriptionFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSubscriptionFilterAsync(ctx workflow.Context, input *cloudwatchlogs.PutSubscriptionFilterInput) *PutSubscriptionFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-PutSubscriptionFilter", input)
	return &PutSubscriptionFilterFuture{Future: future}
}

func (a *stub) StartQuery(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error) {
	var output cloudwatchlogs.StartQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-StartQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StartQueryInput) *StartQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-StartQuery", input)
	return &StartQueryFuture{Future: future}
}

func (a *stub) StopQuery(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error) {
	var output cloudwatchlogs.StopQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-StopQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopQueryAsync(ctx workflow.Context, input *cloudwatchlogs.StopQueryInput) *StopQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-StopQuery", input)
	return &StopQueryFuture{Future: future}
}

func (a *stub) TagLogGroup(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	var output cloudwatchlogs.TagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-TagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.TagLogGroupInput) *TagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-TagLogGroup", input)
	return &TagLogGroupFuture{Future: future}
}

func (a *stub) TestMetricFilter(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	var output cloudwatchlogs.TestMetricFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-TestMetricFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestMetricFilterAsync(ctx workflow.Context, input *cloudwatchlogs.TestMetricFilterInput) *TestMetricFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-TestMetricFilter", input)
	return &TestMetricFilterFuture{Future: future}
}

func (a *stub) UntagLogGroup(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	var output cloudwatchlogs.UntagLogGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-UntagLogGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagLogGroupAsync(ctx workflow.Context, input *cloudwatchlogs.UntagLogGroupInput) *UntagLogGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatchlogs-UntagLogGroup", input)
	return &UntagLogGroupFuture{Future: future}
}
