// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package alexaforbusinessstub

import (
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AlexaForBusinessApproveSkillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessApproveSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateContactWithAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateContactWithAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateDeviceWithNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateDeviceWithNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateDeviceWithRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateDeviceWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateSkillGroupWithRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateSkillGroupWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateSkillWithSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateSkillWithSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessAssociateSkillWithUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessAssociateSkillWithUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessCreateUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteDeviceUsageDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteDeviceUsageDataFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteSkillAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDeleteUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDisassociateContactFromAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDisassociateContactFromAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDisassociateDeviceFromRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDisassociateDeviceFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDisassociateSkillFromSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDisassociateSkillFromSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDisassociateSkillFromUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDisassociateSkillFromUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessDisassociateSkillGroupFromRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessDisassociateSkillGroupFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessForgetSmartHomeAppliancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessForgetSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetConferencePreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetInvitationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessGetSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessGetSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListBusinessReportSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListBusinessReportSchedulesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListConferenceProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListConferenceProvidersFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListDeviceEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListDeviceEventsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListGatewayGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListGatewayGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListGatewaysFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListSkillsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListSkillsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListSkillsStoreCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListSkillsStoreCategoriesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListSkillsStoreSkillsByCategoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListSkillsStoreSkillsByCategoryFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListSmartHomeAppliancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessListTagsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessPutConferencePreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessPutConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessPutInvitationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessPutInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessPutRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessPutRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessPutSkillAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessPutSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessRegisterAVSDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessRegisterAVSDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessRejectSkillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessRejectSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessResolveRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessResolveRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessRevokeInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessRevokeInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchAddressBooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchAddressBooksFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchContactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchContactsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchDevicesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchNetworkProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchNetworkProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchRoomsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchRoomsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchSkillGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchSkillGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSearchUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSearchUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSendAnnouncementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSendAnnouncementFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessSendInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessSendInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessStartDeviceSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessStartDeviceSyncFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessStartSmartHomeApplianceDiscoveryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessStartSmartHomeApplianceDiscoveryFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessTagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUntagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AlexaForBusinessUpdateSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AlexaForBusinessUpdateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ApproveSkill(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ApproveSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApproveSkillAsync(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) *AlexaForBusinessApproveSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ApproveSkill", input)
	return &AlexaForBusinessApproveSkillFuture{Future: future}
}

func (a *stub) AssociateContactWithAddressBook(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateContactWithAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateContactWithAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) *AlexaForBusinessAssociateContactWithAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateContactWithAddressBook", input)
	return &AlexaForBusinessAssociateContactWithAddressBookFuture{Future: future}
}

func (a *stub) AssociateDeviceWithNetworkProfile(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) *AlexaForBusinessAssociateDeviceWithNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithNetworkProfile", input)
	return &AlexaForBusinessAssociateDeviceWithNetworkProfileFuture{Future: future}
}

func (a *stub) AssociateDeviceWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) *AlexaForBusinessAssociateDeviceWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithRoom", input)
	return &AlexaForBusinessAssociateDeviceWithRoomFuture{Future: future}
}

func (a *stub) AssociateSkillGroupWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillGroupWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillGroupWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) *AlexaForBusinessAssociateSkillGroupWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillGroupWithRoom", input)
	return &AlexaForBusinessAssociateSkillGroupWithRoomFuture{Future: future}
}

func (a *stub) AssociateSkillWithSkillGroup(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillWithSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) *AlexaForBusinessAssociateSkillWithSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithSkillGroup", input)
	return &AlexaForBusinessAssociateSkillWithSkillGroupFuture{Future: future}
}

func (a *stub) AssociateSkillWithUsers(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillWithUsersAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) *AlexaForBusinessAssociateSkillWithUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithUsers", input)
	return &AlexaForBusinessAssociateSkillWithUsersFuture{Future: future}
}

func (a *stub) CreateAddressBook(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) *AlexaForBusinessCreateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateAddressBook", input)
	return &AlexaForBusinessCreateAddressBookFuture{Future: future}
}

func (a *stub) CreateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) *AlexaForBusinessCreateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateBusinessReportSchedule", input)
	return &AlexaForBusinessCreateBusinessReportScheduleFuture{Future: future}
}

func (a *stub) CreateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) *AlexaForBusinessCreateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateConferenceProvider", input)
	return &AlexaForBusinessCreateConferenceProviderFuture{Future: future}
}

func (a *stub) CreateContact(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactAsync(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) *AlexaForBusinessCreateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateContact", input)
	return &AlexaForBusinessCreateContactFuture{Future: future}
}

func (a *stub) CreateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) *AlexaForBusinessCreateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateGatewayGroup", input)
	return &AlexaForBusinessCreateGatewayGroupFuture{Future: future}
}

func (a *stub) CreateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) *AlexaForBusinessCreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateNetworkProfile", input)
	return &AlexaForBusinessCreateNetworkProfileFuture{Future: future}
}

func (a *stub) CreateProfile(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) *AlexaForBusinessCreateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateProfile", input)
	return &AlexaForBusinessCreateProfileFuture{Future: future}
}

func (a *stub) CreateRoom(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoomAsync(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) *AlexaForBusinessCreateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateRoom", input)
	return &AlexaForBusinessCreateRoomFuture{Future: future}
}

func (a *stub) CreateSkillGroup(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) *AlexaForBusinessCreateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateSkillGroup", input)
	return &AlexaForBusinessCreateSkillGroupFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) *AlexaForBusinessCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateUser", input)
	return &AlexaForBusinessCreateUserFuture{Future: future}
}

func (a *stub) DeleteAddressBook(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) *AlexaForBusinessDeleteAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteAddressBook", input)
	return &AlexaForBusinessDeleteAddressBookFuture{Future: future}
}

func (a *stub) DeleteBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) *AlexaForBusinessDeleteBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteBusinessReportSchedule", input)
	return &AlexaForBusinessDeleteBusinessReportScheduleFuture{Future: future}
}

func (a *stub) DeleteConferenceProvider(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) *AlexaForBusinessDeleteConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteConferenceProvider", input)
	return &AlexaForBusinessDeleteConferenceProviderFuture{Future: future}
}

func (a *stub) DeleteContact(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContactAsync(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) *AlexaForBusinessDeleteContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteContact", input)
	return &AlexaForBusinessDeleteContactFuture{Future: future}
}

func (a *stub) DeleteDevice(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) *AlexaForBusinessDeleteDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDevice", input)
	return &AlexaForBusinessDeleteDeviceFuture{Future: future}
}

func (a *stub) DeleteDeviceUsageData(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDeviceUsageData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceUsageDataAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) *AlexaForBusinessDeleteDeviceUsageDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDeviceUsageData", input)
	return &AlexaForBusinessDeleteDeviceUsageDataFuture{Future: future}
}

func (a *stub) DeleteGatewayGroup(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) *AlexaForBusinessDeleteGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteGatewayGroup", input)
	return &AlexaForBusinessDeleteGatewayGroupFuture{Future: future}
}

func (a *stub) DeleteNetworkProfile(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) *AlexaForBusinessDeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteNetworkProfile", input)
	return &AlexaForBusinessDeleteNetworkProfileFuture{Future: future}
}

func (a *stub) DeleteProfile(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) *AlexaForBusinessDeleteProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteProfile", input)
	return &AlexaForBusinessDeleteProfileFuture{Future: future}
}

func (a *stub) DeleteRoom(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) *AlexaForBusinessDeleteRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoom", input)
	return &AlexaForBusinessDeleteRoomFuture{Future: future}
}

func (a *stub) DeleteRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) *AlexaForBusinessDeleteRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoomSkillParameter", input)
	return &AlexaForBusinessDeleteRoomSkillParameterFuture{Future: future}
}

func (a *stub) DeleteSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) *AlexaForBusinessDeleteSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillAuthorization", input)
	return &AlexaForBusinessDeleteSkillAuthorizationFuture{Future: future}
}

func (a *stub) DeleteSkillGroup(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) *AlexaForBusinessDeleteSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillGroup", input)
	return &AlexaForBusinessDeleteSkillGroupFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) *AlexaForBusinessDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteUser", input)
	return &AlexaForBusinessDeleteUserFuture{Future: future}
}

func (a *stub) DisassociateContactFromAddressBook(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateContactFromAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateContactFromAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) *AlexaForBusinessDisassociateContactFromAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateContactFromAddressBook", input)
	return &AlexaForBusinessDisassociateContactFromAddressBookFuture{Future: future}
}

func (a *stub) DisassociateDeviceFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateDeviceFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDeviceFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) *AlexaForBusinessDisassociateDeviceFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateDeviceFromRoom", input)
	return &AlexaForBusinessDisassociateDeviceFromRoomFuture{Future: future}
}

func (a *stub) DisassociateSkillFromSkillGroup(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillFromSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) *AlexaForBusinessDisassociateSkillFromSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromSkillGroup", input)
	return &AlexaForBusinessDisassociateSkillFromSkillGroupFuture{Future: future}
}

func (a *stub) DisassociateSkillFromUsers(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillFromUsersAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) *AlexaForBusinessDisassociateSkillFromUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromUsers", input)
	return &AlexaForBusinessDisassociateSkillFromUsersFuture{Future: future}
}

func (a *stub) DisassociateSkillGroupFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillGroupFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillGroupFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) *AlexaForBusinessDisassociateSkillGroupFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillGroupFromRoom", input)
	return &AlexaForBusinessDisassociateSkillGroupFromRoomFuture{Future: future}
}

func (a *stub) ForgetSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ForgetSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ForgetSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) *AlexaForBusinessForgetSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ForgetSmartHomeAppliances", input)
	return &AlexaForBusinessForgetSmartHomeAppliancesFuture{Future: future}
}

func (a *stub) GetAddressBook(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) *AlexaForBusinessGetAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetAddressBook", input)
	return &AlexaForBusinessGetAddressBookFuture{Future: future}
}

func (a *stub) GetConferencePreference(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) *AlexaForBusinessGetConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferencePreference", input)
	return &AlexaForBusinessGetConferencePreferenceFuture{Future: future}
}

func (a *stub) GetConferenceProvider(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) *AlexaForBusinessGetConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferenceProvider", input)
	return &AlexaForBusinessGetConferenceProviderFuture{Future: future}
}

func (a *stub) GetContact(ctx workflow.Context, input *alexaforbusiness.GetContactInput) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactAsync(ctx workflow.Context, input *alexaforbusiness.GetContactInput) *AlexaForBusinessGetContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetContact", input)
	return &AlexaForBusinessGetContactFuture{Future: future}
}

func (a *stub) GetDevice(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceAsync(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) *AlexaForBusinessGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetDevice", input)
	return &AlexaForBusinessGetDeviceFuture{Future: future}
}

func (a *stub) GetGateway(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) *AlexaForBusinessGetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGateway", input)
	return &AlexaForBusinessGetGatewayFuture{Future: future}
}

func (a *stub) GetGatewayGroup(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) *AlexaForBusinessGetGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGatewayGroup", input)
	return &AlexaForBusinessGetGatewayGroupFuture{Future: future}
}

func (a *stub) GetInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) *AlexaForBusinessGetInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetInvitationConfiguration", input)
	return &AlexaForBusinessGetInvitationConfigurationFuture{Future: future}
}

func (a *stub) GetNetworkProfile(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) *AlexaForBusinessGetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetNetworkProfile", input)
	return &AlexaForBusinessGetNetworkProfileFuture{Future: future}
}

func (a *stub) GetProfile(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) *AlexaForBusinessGetProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetProfile", input)
	return &AlexaForBusinessGetProfileFuture{Future: future}
}

func (a *stub) GetRoom(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoomAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) *AlexaForBusinessGetRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoom", input)
	return &AlexaForBusinessGetRoomFuture{Future: future}
}

func (a *stub) GetRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) *AlexaForBusinessGetRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoomSkillParameter", input)
	return &AlexaForBusinessGetRoomSkillParameterFuture{Future: future}
}

func (a *stub) GetSkillGroup(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) *AlexaForBusinessGetSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetSkillGroup", input)
	return &AlexaForBusinessGetSkillGroupFuture{Future: future}
}

func (a *stub) ListBusinessReportSchedules(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListBusinessReportSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBusinessReportSchedulesAsync(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) *AlexaForBusinessListBusinessReportSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListBusinessReportSchedules", input)
	return &AlexaForBusinessListBusinessReportSchedulesFuture{Future: future}
}

func (a *stub) ListConferenceProviders(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListConferenceProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConferenceProvidersAsync(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) *AlexaForBusinessListConferenceProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListConferenceProviders", input)
	return &AlexaForBusinessListConferenceProvidersFuture{Future: future}
}

func (a *stub) ListDeviceEvents(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListDeviceEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceEventsAsync(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) *AlexaForBusinessListDeviceEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListDeviceEvents", input)
	return &AlexaForBusinessListDeviceEventsFuture{Future: future}
}

func (a *stub) ListGatewayGroups(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGatewayGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewayGroupsAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) *AlexaForBusinessListGatewayGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGatewayGroups", input)
	return &AlexaForBusinessListGatewayGroupsFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) *AlexaForBusinessListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGateways", input)
	return &AlexaForBusinessListGatewaysFuture{Future: future}
}

func (a *stub) ListSkills(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkills", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) *AlexaForBusinessListSkillsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkills", input)
	return &AlexaForBusinessListSkillsFuture{Future: future}
}

func (a *stub) ListSkillsStoreCategories(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsStoreCategoriesAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) *AlexaForBusinessListSkillsStoreCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreCategories", input)
	return &AlexaForBusinessListSkillsStoreCategoriesFuture{Future: future}
}

func (a *stub) ListSkillsStoreSkillsByCategory(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreSkillsByCategory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsStoreSkillsByCategoryAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) *AlexaForBusinessListSkillsStoreSkillsByCategoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreSkillsByCategory", input)
	return &AlexaForBusinessListSkillsStoreSkillsByCategoryFuture{Future: future}
}

func (a *stub) ListSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) *AlexaForBusinessListSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSmartHomeAppliances", input)
	return &AlexaForBusinessListSmartHomeAppliancesFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) *AlexaForBusinessListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListTags", input)
	return &AlexaForBusinessListTagsFuture{Future: future}
}

func (a *stub) PutConferencePreference(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) *AlexaForBusinessPutConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutConferencePreference", input)
	return &AlexaForBusinessPutConferencePreferenceFuture{Future: future}
}

func (a *stub) PutInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) *AlexaForBusinessPutInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutInvitationConfiguration", input)
	return &AlexaForBusinessPutInvitationConfigurationFuture{Future: future}
}

func (a *stub) PutRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) *AlexaForBusinessPutRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutRoomSkillParameter", input)
	return &AlexaForBusinessPutRoomSkillParameterFuture{Future: future}
}

func (a *stub) PutSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) *AlexaForBusinessPutSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutSkillAuthorization", input)
	return &AlexaForBusinessPutSkillAuthorizationFuture{Future: future}
}

func (a *stub) RegisterAVSDevice(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RegisterAVSDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterAVSDeviceAsync(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) *AlexaForBusinessRegisterAVSDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RegisterAVSDevice", input)
	return &AlexaForBusinessRegisterAVSDeviceFuture{Future: future}
}

func (a *stub) RejectSkill(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RejectSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectSkillAsync(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) *AlexaForBusinessRejectSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RejectSkill", input)
	return &AlexaForBusinessRejectSkillFuture{Future: future}
}

func (a *stub) ResolveRoom(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ResolveRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveRoomAsync(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) *AlexaForBusinessResolveRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ResolveRoom", input)
	return &AlexaForBusinessResolveRoomFuture{Future: future}
}

func (a *stub) RevokeInvitation(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RevokeInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeInvitationAsync(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) *AlexaForBusinessRevokeInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RevokeInvitation", input)
	return &AlexaForBusinessRevokeInvitationFuture{Future: future}
}

func (a *stub) SearchAddressBooks(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchAddressBooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAddressBooksAsync(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) *AlexaForBusinessSearchAddressBooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchAddressBooks", input)
	return &AlexaForBusinessSearchAddressBooksFuture{Future: future}
}

func (a *stub) SearchContacts(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchContacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchContactsAsync(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) *AlexaForBusinessSearchContactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchContacts", input)
	return &AlexaForBusinessSearchContactsFuture{Future: future}
}

func (a *stub) SearchDevices(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchDevicesAsync(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) *AlexaForBusinessSearchDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchDevices", input)
	return &AlexaForBusinessSearchDevicesFuture{Future: future}
}

func (a *stub) SearchNetworkProfiles(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchNetworkProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) *AlexaForBusinessSearchNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchNetworkProfiles", input)
	return &AlexaForBusinessSearchNetworkProfilesFuture{Future: future}
}

func (a *stub) SearchProfiles(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) *AlexaForBusinessSearchProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchProfiles", input)
	return &AlexaForBusinessSearchProfilesFuture{Future: future}
}

func (a *stub) SearchRooms(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchRooms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchRoomsAsync(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) *AlexaForBusinessSearchRoomsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchRooms", input)
	return &AlexaForBusinessSearchRoomsFuture{Future: future}
}

func (a *stub) SearchSkillGroups(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchSkillGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchSkillGroupsAsync(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) *AlexaForBusinessSearchSkillGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchSkillGroups", input)
	return &AlexaForBusinessSearchSkillGroupsFuture{Future: future}
}

func (a *stub) SearchUsers(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchUsersAsync(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) *AlexaForBusinessSearchUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchUsers", input)
	return &AlexaForBusinessSearchUsersFuture{Future: future}
}

func (a *stub) SendAnnouncement(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendAnnouncement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendAnnouncementAsync(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) *AlexaForBusinessSendAnnouncementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendAnnouncement", input)
	return &AlexaForBusinessSendAnnouncementFuture{Future: future}
}

func (a *stub) SendInvitation(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendInvitationAsync(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) *AlexaForBusinessSendInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendInvitation", input)
	return &AlexaForBusinessSendInvitationFuture{Future: future}
}

func (a *stub) StartDeviceSync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartDeviceSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDeviceSyncAsync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) *AlexaForBusinessStartDeviceSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartDeviceSync", input)
	return &AlexaForBusinessStartDeviceSyncFuture{Future: future}
}

func (a *stub) StartSmartHomeApplianceDiscovery(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartSmartHomeApplianceDiscovery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSmartHomeApplianceDiscoveryAsync(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) *AlexaForBusinessStartSmartHomeApplianceDiscoveryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartSmartHomeApplianceDiscovery", input)
	return &AlexaForBusinessStartSmartHomeApplianceDiscoveryFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) *AlexaForBusinessTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-TagResource", input)
	return &AlexaForBusinessTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) *AlexaForBusinessUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UntagResource", input)
	return &AlexaForBusinessUntagResourceFuture{Future: future}
}

func (a *stub) UpdateAddressBook(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) *AlexaForBusinessUpdateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateAddressBook", input)
	return &AlexaForBusinessUpdateAddressBookFuture{Future: future}
}

func (a *stub) UpdateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) *AlexaForBusinessUpdateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateBusinessReportSchedule", input)
	return &AlexaForBusinessUpdateBusinessReportScheduleFuture{Future: future}
}

func (a *stub) UpdateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) *AlexaForBusinessUpdateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateConferenceProvider", input)
	return &AlexaForBusinessUpdateConferenceProviderFuture{Future: future}
}

func (a *stub) UpdateContact(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactAsync(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) *AlexaForBusinessUpdateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateContact", input)
	return &AlexaForBusinessUpdateContactFuture{Future: future}
}

func (a *stub) UpdateDevice(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceAsync(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) *AlexaForBusinessUpdateDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateDevice", input)
	return &AlexaForBusinessUpdateDeviceFuture{Future: future}
}

func (a *stub) UpdateGateway(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) *AlexaForBusinessUpdateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGateway", input)
	return &AlexaForBusinessUpdateGatewayFuture{Future: future}
}

func (a *stub) UpdateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) *AlexaForBusinessUpdateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGatewayGroup", input)
	return &AlexaForBusinessUpdateGatewayGroupFuture{Future: future}
}

func (a *stub) UpdateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) *AlexaForBusinessUpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateNetworkProfile", input)
	return &AlexaForBusinessUpdateNetworkProfileFuture{Future: future}
}

func (a *stub) UpdateProfile(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) *AlexaForBusinessUpdateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateProfile", input)
	return &AlexaForBusinessUpdateProfileFuture{Future: future}
}

func (a *stub) UpdateRoom(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoomAsync(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) *AlexaForBusinessUpdateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateRoom", input)
	return &AlexaForBusinessUpdateRoomFuture{Future: future}
}

func (a *stub) UpdateSkillGroup(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) *AlexaForBusinessUpdateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateSkillGroup", input)
	return &AlexaForBusinessUpdateSkillGroupFuture{Future: future}
}
