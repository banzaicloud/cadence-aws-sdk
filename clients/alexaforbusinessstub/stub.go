// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package alexaforbusinessstub

import (
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ApproveSkillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApproveSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateContactWithAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateContactWithAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateDeviceWithNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDeviceWithNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateDeviceWithRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDeviceWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSkillGroupWithRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSkillGroupWithRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSkillWithSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSkillWithSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSkillWithUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSkillWithUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeviceUsageDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeviceUsageDataFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSkillAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateContactFromAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateContactFromAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateDeviceFromRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateDeviceFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSkillFromSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSkillFromSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSkillFromUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSkillFromUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSkillGroupFromRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSkillGroupFromRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ForgetSmartHomeAppliancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ForgetSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConferencePreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInvitationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBusinessReportSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBusinessReportSchedulesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConferenceProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConferenceProvidersFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceEventsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGatewayGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGatewayGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGatewaysFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSkillsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSkillsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSkillsStoreCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSkillsStoreCategoriesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSkillsStoreSkillsByCategoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSkillsStoreSkillsByCategoryFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSmartHomeAppliancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSmartHomeAppliancesFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConferencePreferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConferencePreferenceFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutInvitationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutInvitationConfigurationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRoomSkillParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRoomSkillParameterFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSkillAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSkillAuthorizationFuture) Get(ctx workflow.Context) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterAVSDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterAVSDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectSkillFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectSkillFuture) Get(ctx workflow.Context) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResolveRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResolveRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchAddressBooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchAddressBooksFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchContactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchContactsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchDevicesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchNetworkProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchNetworkProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchProfilesFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchRoomsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchRoomsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchSkillGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchSkillGroupsFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchUsersFuture) Get(ctx workflow.Context) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendAnnouncementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendAnnouncementFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendInvitationFuture) Get(ctx workflow.Context) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDeviceSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDeviceSyncFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSmartHomeApplianceDiscoveryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSmartHomeApplianceDiscoveryFuture) Get(ctx workflow.Context) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAddressBookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAddressBookFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBusinessReportScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBusinessReportScheduleFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConferenceProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConferenceProviderFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContactFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeviceFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNetworkProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProfileFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoomFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSkillGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSkillGroupFuture) Get(ctx workflow.Context) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ApproveSkill(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) (*alexaforbusiness.ApproveSkillOutput, error) {
	var output alexaforbusiness.ApproveSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ApproveSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApproveSkillAsync(ctx workflow.Context, input *alexaforbusiness.ApproveSkillInput) *ApproveSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ApproveSkill", input)
	return &ApproveSkillFuture{Future: future}
}

func (a *stub) AssociateContactWithAddressBook(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	var output alexaforbusiness.AssociateContactWithAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateContactWithAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateContactWithAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.AssociateContactWithAddressBookInput) *AssociateContactWithAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateContactWithAddressBook", input)
	return &AssociateContactWithAddressBookFuture{Future: future}
}

func (a *stub) AssociateDeviceWithNetworkProfile(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) *AssociateDeviceWithNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithNetworkProfile", input)
	return &AssociateDeviceWithNetworkProfileFuture{Future: future}
}

func (a *stub) AssociateDeviceWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	var output alexaforbusiness.AssociateDeviceWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput) *AssociateDeviceWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateDeviceWithRoom", input)
	return &AssociateDeviceWithRoomFuture{Future: future}
}

func (a *stub) AssociateSkillGroupWithRoom(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	var output alexaforbusiness.AssociateSkillGroupWithRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillGroupWithRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillGroupWithRoomAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput) *AssociateSkillGroupWithRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillGroupWithRoom", input)
	return &AssociateSkillGroupWithRoomFuture{Future: future}
}

func (a *stub) AssociateSkillWithSkillGroup(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	var output alexaforbusiness.AssociateSkillWithSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillWithSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithSkillGroupInput) *AssociateSkillWithSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithSkillGroup", input)
	return &AssociateSkillWithSkillGroupFuture{Future: future}
}

func (a *stub) AssociateSkillWithUsers(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	var output alexaforbusiness.AssociateSkillWithUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSkillWithUsersAsync(ctx workflow.Context, input *alexaforbusiness.AssociateSkillWithUsersInput) *AssociateSkillWithUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-AssociateSkillWithUsers", input)
	return &AssociateSkillWithUsersFuture{Future: future}
}

func (a *stub) CreateAddressBook(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) (*alexaforbusiness.CreateAddressBookOutput, error) {
	var output alexaforbusiness.CreateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.CreateAddressBookInput) *CreateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateAddressBook", input)
	return &CreateAddressBookFuture{Future: future}
}

func (a *stub) CreateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.CreateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.CreateBusinessReportScheduleInput) *CreateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateBusinessReportSchedule", input)
	return &CreateBusinessReportScheduleFuture{Future: future}
}

func (a *stub) CreateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	var output alexaforbusiness.CreateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.CreateConferenceProviderInput) *CreateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateConferenceProvider", input)
	return &CreateConferenceProviderFuture{Future: future}
}

func (a *stub) CreateContact(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) (*alexaforbusiness.CreateContactOutput, error) {
	var output alexaforbusiness.CreateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactAsync(ctx workflow.Context, input *alexaforbusiness.CreateContactInput) *CreateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateContact", input)
	return &CreateContactFuture{Future: future}
}

func (a *stub) CreateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	var output alexaforbusiness.CreateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateGatewayGroupInput) *CreateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateGatewayGroup", input)
	return &CreateGatewayGroupFuture{Future: future}
}

func (a *stub) CreateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	var output alexaforbusiness.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateNetworkProfileInput) *CreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateNetworkProfile", input)
	return &CreateNetworkProfileFuture{Future: future}
}

func (a *stub) CreateProfile(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error) {
	var output alexaforbusiness.CreateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProfileAsync(ctx workflow.Context, input *alexaforbusiness.CreateProfileInput) *CreateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateProfile", input)
	return &CreateProfileFuture{Future: future}
}

func (a *stub) CreateRoom(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error) {
	var output alexaforbusiness.CreateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoomAsync(ctx workflow.Context, input *alexaforbusiness.CreateRoomInput) *CreateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateRoom", input)
	return &CreateRoomFuture{Future: future}
}

func (a *stub) CreateSkillGroup(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	var output alexaforbusiness.CreateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.CreateSkillGroupInput) *CreateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateSkillGroup", input)
	return &CreateSkillGroupFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error) {
	var output alexaforbusiness.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *alexaforbusiness.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeleteAddressBook(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	var output alexaforbusiness.DeleteAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DeleteAddressBookInput) *DeleteAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteAddressBook", input)
	return &DeleteAddressBookFuture{Future: future}
}

func (a *stub) DeleteBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.DeleteBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.DeleteBusinessReportScheduleInput) *DeleteBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteBusinessReportSchedule", input)
	return &DeleteBusinessReportScheduleFuture{Future: future}
}

func (a *stub) DeleteConferenceProvider(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	var output alexaforbusiness.DeleteConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.DeleteConferenceProviderInput) *DeleteConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteConferenceProvider", input)
	return &DeleteConferenceProviderFuture{Future: future}
}

func (a *stub) DeleteContact(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) (*alexaforbusiness.DeleteContactOutput, error) {
	var output alexaforbusiness.DeleteContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContactAsync(ctx workflow.Context, input *alexaforbusiness.DeleteContactInput) *DeleteContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteContact", input)
	return &DeleteContactFuture{Future: future}
}

func (a *stub) DeleteDevice(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) (*alexaforbusiness.DeleteDeviceOutput, error) {
	var output alexaforbusiness.DeleteDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceInput) *DeleteDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDevice", input)
	return &DeleteDeviceFuture{Future: future}
}

func (a *stub) DeleteDeviceUsageData(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	var output alexaforbusiness.DeleteDeviceUsageDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDeviceUsageData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceUsageDataAsync(ctx workflow.Context, input *alexaforbusiness.DeleteDeviceUsageDataInput) *DeleteDeviceUsageDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteDeviceUsageData", input)
	return &DeleteDeviceUsageDataFuture{Future: future}
}

func (a *stub) DeleteGatewayGroup(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	var output alexaforbusiness.DeleteGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteGatewayGroupInput) *DeleteGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteGatewayGroup", input)
	return &DeleteGatewayGroupFuture{Future: future}
}

func (a *stub) DeleteNetworkProfile(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	var output alexaforbusiness.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteNetworkProfileInput) *DeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteNetworkProfile", input)
	return &DeleteNetworkProfileFuture{Future: future}
}

func (a *stub) DeleteProfile(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error) {
	var output alexaforbusiness.DeleteProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileAsync(ctx workflow.Context, input *alexaforbusiness.DeleteProfileInput) *DeleteProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteProfile", input)
	return &DeleteProfileFuture{Future: future}
}

func (a *stub) DeleteRoom(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error) {
	var output alexaforbusiness.DeleteRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomInput) *DeleteRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoom", input)
	return &DeleteRoomFuture{Future: future}
}

func (a *stub) DeleteRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	var output alexaforbusiness.DeleteRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput) *DeleteRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteRoomSkillParameter", input)
	return &DeleteRoomSkillParameterFuture{Future: future}
}

func (a *stub) DeleteSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	var output alexaforbusiness.DeleteSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillAuthorizationInput) *DeleteSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillAuthorization", input)
	return &DeleteSkillAuthorizationFuture{Future: future}
}

func (a *stub) DeleteSkillGroup(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	var output alexaforbusiness.DeleteSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DeleteSkillGroupInput) *DeleteSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteSkillGroup", input)
	return &DeleteSkillGroupFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error) {
	var output alexaforbusiness.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *alexaforbusiness.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DisassociateContactFromAddressBook(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	var output alexaforbusiness.DisassociateContactFromAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateContactFromAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateContactFromAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateContactFromAddressBookInput) *DisassociateContactFromAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateContactFromAddressBook", input)
	return &DisassociateContactFromAddressBookFuture{Future: future}
}

func (a *stub) DisassociateDeviceFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateDeviceFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateDeviceFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDeviceFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput) *DisassociateDeviceFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateDeviceFromRoom", input)
	return &DisassociateDeviceFromRoomFuture{Future: future}
}

func (a *stub) DisassociateSkillFromSkillGroup(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillFromSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromSkillGroupInput) *DisassociateSkillFromSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromSkillGroup", input)
	return &DisassociateSkillFromSkillGroupFuture{Future: future}
}

func (a *stub) DisassociateSkillFromUsers(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	var output alexaforbusiness.DisassociateSkillFromUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillFromUsersAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillFromUsersInput) *DisassociateSkillFromUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillFromUsers", input)
	return &DisassociateSkillFromUsersFuture{Future: future}
}

func (a *stub) DisassociateSkillGroupFromRoom(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	var output alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillGroupFromRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSkillGroupFromRoomAsync(ctx workflow.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) *DisassociateSkillGroupFromRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-DisassociateSkillGroupFromRoom", input)
	return &DisassociateSkillGroupFromRoomFuture{Future: future}
}

func (a *stub) ForgetSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ForgetSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ForgetSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ForgetSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ForgetSmartHomeAppliancesInput) *ForgetSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ForgetSmartHomeAppliances", input)
	return &ForgetSmartHomeAppliancesFuture{Future: future}
}

func (a *stub) GetAddressBook(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) (*alexaforbusiness.GetAddressBookOutput, error) {
	var output alexaforbusiness.GetAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.GetAddressBookInput) *GetAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetAddressBook", input)
	return &GetAddressBookFuture{Future: future}
}

func (a *stub) GetConferencePreference(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	var output alexaforbusiness.GetConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.GetConferencePreferenceInput) *GetConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferencePreference", input)
	return &GetConferencePreferenceFuture{Future: future}
}

func (a *stub) GetConferenceProvider(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	var output alexaforbusiness.GetConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.GetConferenceProviderInput) *GetConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetConferenceProvider", input)
	return &GetConferenceProviderFuture{Future: future}
}

func (a *stub) GetContact(ctx workflow.Context, input *alexaforbusiness.GetContactInput) (*alexaforbusiness.GetContactOutput, error) {
	var output alexaforbusiness.GetContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactAsync(ctx workflow.Context, input *alexaforbusiness.GetContactInput) *GetContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetContact", input)
	return &GetContactFuture{Future: future}
}

func (a *stub) GetDevice(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error) {
	var output alexaforbusiness.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceAsync(ctx workflow.Context, input *alexaforbusiness.GetDeviceInput) *GetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetDevice", input)
	return &GetDeviceFuture{Future: future}
}

func (a *stub) GetGateway(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) (*alexaforbusiness.GetGatewayOutput, error) {
	var output alexaforbusiness.GetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayInput) *GetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGateway", input)
	return &GetGatewayFuture{Future: future}
}

func (a *stub) GetGatewayGroup(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	var output alexaforbusiness.GetGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetGatewayGroupInput) *GetGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetGatewayGroup", input)
	return &GetGatewayGroupFuture{Future: future}
}

func (a *stub) GetInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	var output alexaforbusiness.GetInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.GetInvitationConfigurationInput) *GetInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetInvitationConfiguration", input)
	return &GetInvitationConfigurationFuture{Future: future}
}

func (a *stub) GetNetworkProfile(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	var output alexaforbusiness.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetNetworkProfileInput) *GetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetNetworkProfile", input)
	return &GetNetworkProfileFuture{Future: future}
}

func (a *stub) GetProfile(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error) {
	var output alexaforbusiness.GetProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProfileAsync(ctx workflow.Context, input *alexaforbusiness.GetProfileInput) *GetProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetProfile", input)
	return &GetProfileFuture{Future: future}
}

func (a *stub) GetRoom(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error) {
	var output alexaforbusiness.GetRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoomAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomInput) *GetRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoom", input)
	return &GetRoomFuture{Future: future}
}

func (a *stub) GetRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	var output alexaforbusiness.GetRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.GetRoomSkillParameterInput) *GetRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetRoomSkillParameter", input)
	return &GetRoomSkillParameterFuture{Future: future}
}

func (a *stub) GetSkillGroup(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error) {
	var output alexaforbusiness.GetSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.GetSkillGroupInput) *GetSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-GetSkillGroup", input)
	return &GetSkillGroupFuture{Future: future}
}

func (a *stub) ListBusinessReportSchedules(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	var output alexaforbusiness.ListBusinessReportSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListBusinessReportSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBusinessReportSchedulesAsync(ctx workflow.Context, input *alexaforbusiness.ListBusinessReportSchedulesInput) *ListBusinessReportSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListBusinessReportSchedules", input)
	return &ListBusinessReportSchedulesFuture{Future: future}
}

func (a *stub) ListConferenceProviders(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	var output alexaforbusiness.ListConferenceProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListConferenceProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConferenceProvidersAsync(ctx workflow.Context, input *alexaforbusiness.ListConferenceProvidersInput) *ListConferenceProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListConferenceProviders", input)
	return &ListConferenceProvidersFuture{Future: future}
}

func (a *stub) ListDeviceEvents(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	var output alexaforbusiness.ListDeviceEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListDeviceEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceEventsAsync(ctx workflow.Context, input *alexaforbusiness.ListDeviceEventsInput) *ListDeviceEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListDeviceEvents", input)
	return &ListDeviceEventsFuture{Future: future}
}

func (a *stub) ListGatewayGroups(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	var output alexaforbusiness.ListGatewayGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGatewayGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewayGroupsAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewayGroupsInput) *ListGatewayGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGatewayGroups", input)
	return &ListGatewayGroupsFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) (*alexaforbusiness.ListGatewaysOutput, error) {
	var output alexaforbusiness.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *alexaforbusiness.ListGatewaysInput) *ListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListGateways", input)
	return &ListGatewaysFuture{Future: future}
}

func (a *stub) ListSkills(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error) {
	var output alexaforbusiness.ListSkillsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkills", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsInput) *ListSkillsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkills", input)
	return &ListSkillsFuture{Future: future}
}

func (a *stub) ListSkillsStoreCategories(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	var output alexaforbusiness.ListSkillsStoreCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsStoreCategoriesAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreCategoriesInput) *ListSkillsStoreCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreCategories", input)
	return &ListSkillsStoreCategoriesFuture{Future: future}
}

func (a *stub) ListSkillsStoreSkillsByCategory(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	var output alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreSkillsByCategory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSkillsStoreSkillsByCategoryAsync(ctx workflow.Context, input *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) *ListSkillsStoreSkillsByCategoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSkillsStoreSkillsByCategory", input)
	return &ListSkillsStoreSkillsByCategoryFuture{Future: future}
}

func (a *stub) ListSmartHomeAppliances(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	var output alexaforbusiness.ListSmartHomeAppliancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSmartHomeAppliances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSmartHomeAppliancesAsync(ctx workflow.Context, input *alexaforbusiness.ListSmartHomeAppliancesInput) *ListSmartHomeAppliancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListSmartHomeAppliances", input)
	return &ListSmartHomeAppliancesFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error) {
	var output alexaforbusiness.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *alexaforbusiness.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) PutConferencePreference(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	var output alexaforbusiness.PutConferencePreferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutConferencePreference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConferencePreferenceAsync(ctx workflow.Context, input *alexaforbusiness.PutConferencePreferenceInput) *PutConferencePreferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutConferencePreference", input)
	return &PutConferencePreferenceFuture{Future: future}
}

func (a *stub) PutInvitationConfiguration(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	var output alexaforbusiness.PutInvitationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutInvitationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInvitationConfigurationAsync(ctx workflow.Context, input *alexaforbusiness.PutInvitationConfigurationInput) *PutInvitationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutInvitationConfiguration", input)
	return &PutInvitationConfigurationFuture{Future: future}
}

func (a *stub) PutRoomSkillParameter(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	var output alexaforbusiness.PutRoomSkillParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutRoomSkillParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRoomSkillParameterAsync(ctx workflow.Context, input *alexaforbusiness.PutRoomSkillParameterInput) *PutRoomSkillParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutRoomSkillParameter", input)
	return &PutRoomSkillParameterFuture{Future: future}
}

func (a *stub) PutSkillAuthorization(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	var output alexaforbusiness.PutSkillAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutSkillAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSkillAuthorizationAsync(ctx workflow.Context, input *alexaforbusiness.PutSkillAuthorizationInput) *PutSkillAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-PutSkillAuthorization", input)
	return &PutSkillAuthorizationFuture{Future: future}
}

func (a *stub) RegisterAVSDevice(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	var output alexaforbusiness.RegisterAVSDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RegisterAVSDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterAVSDeviceAsync(ctx workflow.Context, input *alexaforbusiness.RegisterAVSDeviceInput) *RegisterAVSDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RegisterAVSDevice", input)
	return &RegisterAVSDeviceFuture{Future: future}
}

func (a *stub) RejectSkill(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) (*alexaforbusiness.RejectSkillOutput, error) {
	var output alexaforbusiness.RejectSkillOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RejectSkill", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectSkillAsync(ctx workflow.Context, input *alexaforbusiness.RejectSkillInput) *RejectSkillFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RejectSkill", input)
	return &RejectSkillFuture{Future: future}
}

func (a *stub) ResolveRoom(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error) {
	var output alexaforbusiness.ResolveRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ResolveRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveRoomAsync(ctx workflow.Context, input *alexaforbusiness.ResolveRoomInput) *ResolveRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-ResolveRoom", input)
	return &ResolveRoomFuture{Future: future}
}

func (a *stub) RevokeInvitation(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error) {
	var output alexaforbusiness.RevokeInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RevokeInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeInvitationAsync(ctx workflow.Context, input *alexaforbusiness.RevokeInvitationInput) *RevokeInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-RevokeInvitation", input)
	return &RevokeInvitationFuture{Future: future}
}

func (a *stub) SearchAddressBooks(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	var output alexaforbusiness.SearchAddressBooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchAddressBooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAddressBooksAsync(ctx workflow.Context, input *alexaforbusiness.SearchAddressBooksInput) *SearchAddressBooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchAddressBooks", input)
	return &SearchAddressBooksFuture{Future: future}
}

func (a *stub) SearchContacts(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) (*alexaforbusiness.SearchContactsOutput, error) {
	var output alexaforbusiness.SearchContactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchContacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchContactsAsync(ctx workflow.Context, input *alexaforbusiness.SearchContactsInput) *SearchContactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchContacts", input)
	return &SearchContactsFuture{Future: future}
}

func (a *stub) SearchDevices(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error) {
	var output alexaforbusiness.SearchDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchDevicesAsync(ctx workflow.Context, input *alexaforbusiness.SearchDevicesInput) *SearchDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchDevices", input)
	return &SearchDevicesFuture{Future: future}
}

func (a *stub) SearchNetworkProfiles(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	var output alexaforbusiness.SearchNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchNetworkProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchNetworkProfilesInput) *SearchNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchNetworkProfiles", input)
	return &SearchNetworkProfilesFuture{Future: future}
}

func (a *stub) SearchProfiles(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error) {
	var output alexaforbusiness.SearchProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProfilesAsync(ctx workflow.Context, input *alexaforbusiness.SearchProfilesInput) *SearchProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchProfiles", input)
	return &SearchProfilesFuture{Future: future}
}

func (a *stub) SearchRooms(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error) {
	var output alexaforbusiness.SearchRoomsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchRooms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchRoomsAsync(ctx workflow.Context, input *alexaforbusiness.SearchRoomsInput) *SearchRoomsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchRooms", input)
	return &SearchRoomsFuture{Future: future}
}

func (a *stub) SearchSkillGroups(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	var output alexaforbusiness.SearchSkillGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchSkillGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchSkillGroupsAsync(ctx workflow.Context, input *alexaforbusiness.SearchSkillGroupsInput) *SearchSkillGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchSkillGroups", input)
	return &SearchSkillGroupsFuture{Future: future}
}

func (a *stub) SearchUsers(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error) {
	var output alexaforbusiness.SearchUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchUsersAsync(ctx workflow.Context, input *alexaforbusiness.SearchUsersInput) *SearchUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SearchUsers", input)
	return &SearchUsersFuture{Future: future}
}

func (a *stub) SendAnnouncement(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) (*alexaforbusiness.SendAnnouncementOutput, error) {
	var output alexaforbusiness.SendAnnouncementOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendAnnouncement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendAnnouncementAsync(ctx workflow.Context, input *alexaforbusiness.SendAnnouncementInput) *SendAnnouncementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendAnnouncement", input)
	return &SendAnnouncementFuture{Future: future}
}

func (a *stub) SendInvitation(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error) {
	var output alexaforbusiness.SendInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendInvitationAsync(ctx workflow.Context, input *alexaforbusiness.SendInvitationInput) *SendInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-SendInvitation", input)
	return &SendInvitationFuture{Future: future}
}

func (a *stub) StartDeviceSync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	var output alexaforbusiness.StartDeviceSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartDeviceSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDeviceSyncAsync(ctx workflow.Context, input *alexaforbusiness.StartDeviceSyncInput) *StartDeviceSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartDeviceSync", input)
	return &StartDeviceSyncFuture{Future: future}
}

func (a *stub) StartSmartHomeApplianceDiscovery(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	var output alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartSmartHomeApplianceDiscovery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSmartHomeApplianceDiscoveryAsync(ctx workflow.Context, input *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) *StartSmartHomeApplianceDiscoveryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-StartSmartHomeApplianceDiscovery", input)
	return &StartSmartHomeApplianceDiscoveryFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error) {
	var output alexaforbusiness.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *alexaforbusiness.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error) {
	var output alexaforbusiness.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *alexaforbusiness.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAddressBook(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	var output alexaforbusiness.UpdateAddressBookOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateAddressBook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAddressBookAsync(ctx workflow.Context, input *alexaforbusiness.UpdateAddressBookInput) *UpdateAddressBookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateAddressBook", input)
	return &UpdateAddressBookFuture{Future: future}
}

func (a *stub) UpdateBusinessReportSchedule(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	var output alexaforbusiness.UpdateBusinessReportScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateBusinessReportSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBusinessReportScheduleAsync(ctx workflow.Context, input *alexaforbusiness.UpdateBusinessReportScheduleInput) *UpdateBusinessReportScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateBusinessReportSchedule", input)
	return &UpdateBusinessReportScheduleFuture{Future: future}
}

func (a *stub) UpdateConferenceProvider(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	var output alexaforbusiness.UpdateConferenceProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateConferenceProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConferenceProviderAsync(ctx workflow.Context, input *alexaforbusiness.UpdateConferenceProviderInput) *UpdateConferenceProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateConferenceProvider", input)
	return &UpdateConferenceProviderFuture{Future: future}
}

func (a *stub) UpdateContact(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) (*alexaforbusiness.UpdateContactOutput, error) {
	var output alexaforbusiness.UpdateContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactAsync(ctx workflow.Context, input *alexaforbusiness.UpdateContactInput) *UpdateContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateContact", input)
	return &UpdateContactFuture{Future: future}
}

func (a *stub) UpdateDevice(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error) {
	var output alexaforbusiness.UpdateDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceAsync(ctx workflow.Context, input *alexaforbusiness.UpdateDeviceInput) *UpdateDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateDevice", input)
	return &UpdateDeviceFuture{Future: future}
}

func (a *stub) UpdateGateway(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) (*alexaforbusiness.UpdateGatewayOutput, error) {
	var output alexaforbusiness.UpdateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayInput) *UpdateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGateway", input)
	return &UpdateGatewayFuture{Future: future}
}

func (a *stub) UpdateGatewayGroup(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	var output alexaforbusiness.UpdateGatewayGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGatewayGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateGatewayGroupInput) *UpdateGatewayGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateGatewayGroup", input)
	return &UpdateGatewayGroupFuture{Future: future}
}

func (a *stub) UpdateNetworkProfile(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	var output alexaforbusiness.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNetworkProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateNetworkProfileInput) *UpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateNetworkProfile", input)
	return &UpdateNetworkProfileFuture{Future: future}
}

func (a *stub) UpdateProfile(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error) {
	var output alexaforbusiness.UpdateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProfileAsync(ctx workflow.Context, input *alexaforbusiness.UpdateProfileInput) *UpdateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateProfile", input)
	return &UpdateProfileFuture{Future: future}
}

func (a *stub) UpdateRoom(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error) {
	var output alexaforbusiness.UpdateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoomAsync(ctx workflow.Context, input *alexaforbusiness.UpdateRoomInput) *UpdateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateRoom", input)
	return &UpdateRoomFuture{Future: future}
}

func (a *stub) UpdateSkillGroup(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	var output alexaforbusiness.UpdateSkillGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateSkillGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSkillGroupAsync(ctx workflow.Context, input *alexaforbusiness.UpdateSkillGroupInput) *UpdateSkillGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-alexaforbusiness-UpdateSkillGroup", input)
	return &UpdateSkillGroupFuture{Future: future}
}
