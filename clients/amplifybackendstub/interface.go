// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package amplifybackendstub

import (
	"github.com/aws/aws-sdk-go/service/amplifybackend"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CloneBackend(ctx workflow.Context, input *amplifybackend.CloneBackendInput) (*amplifybackend.CloneBackendOutput, error)
	CloneBackendAsync(ctx workflow.Context, input *amplifybackend.CloneBackendInput) *CloneBackendFuture

	CreateBackend(ctx workflow.Context, input *amplifybackend.CreateBackendInput) (*amplifybackend.CreateBackendOutput, error)
	CreateBackendAsync(ctx workflow.Context, input *amplifybackend.CreateBackendInput) *CreateBackendFuture

	CreateBackendAPI(ctx workflow.Context, input *amplifybackend.CreateBackendAPIInput) (*amplifybackend.CreateBackendAPIOutput, error)
	CreateBackendAPIAsync(ctx workflow.Context, input *amplifybackend.CreateBackendAPIInput) *CreateBackendAPIFuture

	CreateBackendAuth(ctx workflow.Context, input *amplifybackend.CreateBackendAuthInput) (*amplifybackend.CreateBackendAuthOutput, error)
	CreateBackendAuthAsync(ctx workflow.Context, input *amplifybackend.CreateBackendAuthInput) *CreateBackendAuthFuture

	CreateBackendConfig(ctx workflow.Context, input *amplifybackend.CreateBackendConfigInput) (*amplifybackend.CreateBackendConfigOutput, error)
	CreateBackendConfigAsync(ctx workflow.Context, input *amplifybackend.CreateBackendConfigInput) *CreateBackendConfigFuture

	CreateToken(ctx workflow.Context, input *amplifybackend.CreateTokenInput) (*amplifybackend.CreateTokenOutput, error)
	CreateTokenAsync(ctx workflow.Context, input *amplifybackend.CreateTokenInput) *CreateTokenFuture

	DeleteBackend(ctx workflow.Context, input *amplifybackend.DeleteBackendInput) (*amplifybackend.DeleteBackendOutput, error)
	DeleteBackendAsync(ctx workflow.Context, input *amplifybackend.DeleteBackendInput) *DeleteBackendFuture

	DeleteBackendAPI(ctx workflow.Context, input *amplifybackend.DeleteBackendAPIInput) (*amplifybackend.DeleteBackendAPIOutput, error)
	DeleteBackendAPIAsync(ctx workflow.Context, input *amplifybackend.DeleteBackendAPIInput) *DeleteBackendAPIFuture

	DeleteBackendAuth(ctx workflow.Context, input *amplifybackend.DeleteBackendAuthInput) (*amplifybackend.DeleteBackendAuthOutput, error)
	DeleteBackendAuthAsync(ctx workflow.Context, input *amplifybackend.DeleteBackendAuthInput) *DeleteBackendAuthFuture

	DeleteToken(ctx workflow.Context, input *amplifybackend.DeleteTokenInput) (*amplifybackend.DeleteTokenOutput, error)
	DeleteTokenAsync(ctx workflow.Context, input *amplifybackend.DeleteTokenInput) *DeleteTokenFuture

	GenerateBackendAPIModels(ctx workflow.Context, input *amplifybackend.GenerateBackendAPIModelsInput) (*amplifybackend.GenerateBackendAPIModelsOutput, error)
	GenerateBackendAPIModelsAsync(ctx workflow.Context, input *amplifybackend.GenerateBackendAPIModelsInput) *GenerateBackendAPIModelsFuture

	GetBackend(ctx workflow.Context, input *amplifybackend.GetBackendInput) (*amplifybackend.GetBackendOutput, error)
	GetBackendAsync(ctx workflow.Context, input *amplifybackend.GetBackendInput) *GetBackendFuture

	GetBackendAPI(ctx workflow.Context, input *amplifybackend.GetBackendAPIInput) (*amplifybackend.GetBackendAPIOutput, error)
	GetBackendAPIAsync(ctx workflow.Context, input *amplifybackend.GetBackendAPIInput) *GetBackendAPIFuture

	GetBackendAPIModels(ctx workflow.Context, input *amplifybackend.GetBackendAPIModelsInput) (*amplifybackend.GetBackendAPIModelsOutput, error)
	GetBackendAPIModelsAsync(ctx workflow.Context, input *amplifybackend.GetBackendAPIModelsInput) *GetBackendAPIModelsFuture

	GetBackendAuth(ctx workflow.Context, input *amplifybackend.GetBackendAuthInput) (*amplifybackend.GetBackendAuthOutput, error)
	GetBackendAuthAsync(ctx workflow.Context, input *amplifybackend.GetBackendAuthInput) *GetBackendAuthFuture

	GetBackendJob(ctx workflow.Context, input *amplifybackend.GetBackendJobInput) (*amplifybackend.GetBackendJobOutput, error)
	GetBackendJobAsync(ctx workflow.Context, input *amplifybackend.GetBackendJobInput) *GetBackendJobFuture

	GetToken(ctx workflow.Context, input *amplifybackend.GetTokenInput) (*amplifybackend.GetTokenOutput, error)
	GetTokenAsync(ctx workflow.Context, input *amplifybackend.GetTokenInput) *GetTokenFuture

	ListBackendJobs(ctx workflow.Context, input *amplifybackend.ListBackendJobsInput) (*amplifybackend.ListBackendJobsOutput, error)
	ListBackendJobsAsync(ctx workflow.Context, input *amplifybackend.ListBackendJobsInput) *ListBackendJobsFuture

	RemoveAllBackends(ctx workflow.Context, input *amplifybackend.RemoveAllBackendsInput) (*amplifybackend.RemoveAllBackendsOutput, error)
	RemoveAllBackendsAsync(ctx workflow.Context, input *amplifybackend.RemoveAllBackendsInput) *RemoveAllBackendsFuture

	RemoveBackendConfig(ctx workflow.Context, input *amplifybackend.RemoveBackendConfigInput) (*amplifybackend.RemoveBackendConfigOutput, error)
	RemoveBackendConfigAsync(ctx workflow.Context, input *amplifybackend.RemoveBackendConfigInput) *RemoveBackendConfigFuture

	UpdateBackendAPI(ctx workflow.Context, input *amplifybackend.UpdateBackendAPIInput) (*amplifybackend.UpdateBackendAPIOutput, error)
	UpdateBackendAPIAsync(ctx workflow.Context, input *amplifybackend.UpdateBackendAPIInput) *UpdateBackendAPIFuture

	UpdateBackendAuth(ctx workflow.Context, input *amplifybackend.UpdateBackendAuthInput) (*amplifybackend.UpdateBackendAuthOutput, error)
	UpdateBackendAuthAsync(ctx workflow.Context, input *amplifybackend.UpdateBackendAuthInput) *UpdateBackendAuthFuture

	UpdateBackendConfig(ctx workflow.Context, input *amplifybackend.UpdateBackendConfigInput) (*amplifybackend.UpdateBackendConfigOutput, error)
	UpdateBackendConfigAsync(ctx workflow.Context, input *amplifybackend.UpdateBackendConfigInput) *UpdateBackendConfigFuture

	UpdateBackendJob(ctx workflow.Context, input *amplifybackend.UpdateBackendJobInput) (*amplifybackend.UpdateBackendJobOutput, error)
	UpdateBackendJobAsync(ctx workflow.Context, input *amplifybackend.UpdateBackendJobInput) *UpdateBackendJobFuture
}

func NewClient() Client {
	return &stub{}
}
