// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package computeoptimizerstub

import (
	"github.com/aws/aws-sdk-go/service/computeoptimizer"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DescribeRecommendationExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRecommendationExportJobsFuture) Get(ctx workflow.Context) (*computeoptimizer.DescribeRecommendationExportJobsOutput, error) {
	var output computeoptimizer.DescribeRecommendationExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportAutoScalingGroupRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportAutoScalingGroupRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput, error) {
	var output computeoptimizer.ExportAutoScalingGroupRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportEC2InstanceRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportEC2InstanceRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.ExportEC2InstanceRecommendationsOutput, error) {
	var output computeoptimizer.ExportEC2InstanceRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAutoScalingGroupRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAutoScalingGroupRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.GetAutoScalingGroupRecommendationsOutput, error) {
	var output computeoptimizer.GetAutoScalingGroupRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEBSVolumeRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEBSVolumeRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.GetEBSVolumeRecommendationsOutput, error) {
	var output computeoptimizer.GetEBSVolumeRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEC2InstanceRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEC2InstanceRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.GetEC2InstanceRecommendationsOutput, error) {
	var output computeoptimizer.GetEC2InstanceRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEC2RecommendationProjectedMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEC2RecommendationProjectedMetricsFuture) Get(ctx workflow.Context) (*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, error) {
	var output computeoptimizer.GetEC2RecommendationProjectedMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEnrollmentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEnrollmentStatusFuture) Get(ctx workflow.Context) (*computeoptimizer.GetEnrollmentStatusOutput, error) {
	var output computeoptimizer.GetEnrollmentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLambdaFunctionRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLambdaFunctionRecommendationsFuture) Get(ctx workflow.Context) (*computeoptimizer.GetLambdaFunctionRecommendationsOutput, error) {
	var output computeoptimizer.GetLambdaFunctionRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRecommendationSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRecommendationSummariesFuture) Get(ctx workflow.Context) (*computeoptimizer.GetRecommendationSummariesOutput, error) {
	var output computeoptimizer.GetRecommendationSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEnrollmentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEnrollmentStatusFuture) Get(ctx workflow.Context) (*computeoptimizer.UpdateEnrollmentStatusOutput, error) {
	var output computeoptimizer.UpdateEnrollmentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecommendationExportJobs(ctx workflow.Context, input *computeoptimizer.DescribeRecommendationExportJobsInput) (*computeoptimizer.DescribeRecommendationExportJobsOutput, error) {
	var output computeoptimizer.DescribeRecommendationExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-DescribeRecommendationExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecommendationExportJobsAsync(ctx workflow.Context, input *computeoptimizer.DescribeRecommendationExportJobsInput) *DescribeRecommendationExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-DescribeRecommendationExportJobs", input)
	return &DescribeRecommendationExportJobsFuture{Future: future}
}

func (a *stub) ExportAutoScalingGroupRecommendations(ctx workflow.Context, input *computeoptimizer.ExportAutoScalingGroupRecommendationsInput) (*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput, error) {
	var output computeoptimizer.ExportAutoScalingGroupRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-ExportAutoScalingGroupRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportAutoScalingGroupRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.ExportAutoScalingGroupRecommendationsInput) *ExportAutoScalingGroupRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-ExportAutoScalingGroupRecommendations", input)
	return &ExportAutoScalingGroupRecommendationsFuture{Future: future}
}

func (a *stub) ExportEC2InstanceRecommendations(ctx workflow.Context, input *computeoptimizer.ExportEC2InstanceRecommendationsInput) (*computeoptimizer.ExportEC2InstanceRecommendationsOutput, error) {
	var output computeoptimizer.ExportEC2InstanceRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-ExportEC2InstanceRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportEC2InstanceRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.ExportEC2InstanceRecommendationsInput) *ExportEC2InstanceRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-ExportEC2InstanceRecommendations", input)
	return &ExportEC2InstanceRecommendationsFuture{Future: future}
}

func (a *stub) GetAutoScalingGroupRecommendations(ctx workflow.Context, input *computeoptimizer.GetAutoScalingGroupRecommendationsInput) (*computeoptimizer.GetAutoScalingGroupRecommendationsOutput, error) {
	var output computeoptimizer.GetAutoScalingGroupRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetAutoScalingGroupRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAutoScalingGroupRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.GetAutoScalingGroupRecommendationsInput) *GetAutoScalingGroupRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetAutoScalingGroupRecommendations", input)
	return &GetAutoScalingGroupRecommendationsFuture{Future: future}
}

func (a *stub) GetEBSVolumeRecommendations(ctx workflow.Context, input *computeoptimizer.GetEBSVolumeRecommendationsInput) (*computeoptimizer.GetEBSVolumeRecommendationsOutput, error) {
	var output computeoptimizer.GetEBSVolumeRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEBSVolumeRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEBSVolumeRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.GetEBSVolumeRecommendationsInput) *GetEBSVolumeRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEBSVolumeRecommendations", input)
	return &GetEBSVolumeRecommendationsFuture{Future: future}
}

func (a *stub) GetEC2InstanceRecommendations(ctx workflow.Context, input *computeoptimizer.GetEC2InstanceRecommendationsInput) (*computeoptimizer.GetEC2InstanceRecommendationsOutput, error) {
	var output computeoptimizer.GetEC2InstanceRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEC2InstanceRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEC2InstanceRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.GetEC2InstanceRecommendationsInput) *GetEC2InstanceRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEC2InstanceRecommendations", input)
	return &GetEC2InstanceRecommendationsFuture{Future: future}
}

func (a *stub) GetEC2RecommendationProjectedMetrics(ctx workflow.Context, input *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) (*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, error) {
	var output computeoptimizer.GetEC2RecommendationProjectedMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEC2RecommendationProjectedMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEC2RecommendationProjectedMetricsAsync(ctx workflow.Context, input *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) *GetEC2RecommendationProjectedMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEC2RecommendationProjectedMetrics", input)
	return &GetEC2RecommendationProjectedMetricsFuture{Future: future}
}

func (a *stub) GetEnrollmentStatus(ctx workflow.Context, input *computeoptimizer.GetEnrollmentStatusInput) (*computeoptimizer.GetEnrollmentStatusOutput, error) {
	var output computeoptimizer.GetEnrollmentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEnrollmentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEnrollmentStatusAsync(ctx workflow.Context, input *computeoptimizer.GetEnrollmentStatusInput) *GetEnrollmentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetEnrollmentStatus", input)
	return &GetEnrollmentStatusFuture{Future: future}
}

func (a *stub) GetLambdaFunctionRecommendations(ctx workflow.Context, input *computeoptimizer.GetLambdaFunctionRecommendationsInput) (*computeoptimizer.GetLambdaFunctionRecommendationsOutput, error) {
	var output computeoptimizer.GetLambdaFunctionRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetLambdaFunctionRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLambdaFunctionRecommendationsAsync(ctx workflow.Context, input *computeoptimizer.GetLambdaFunctionRecommendationsInput) *GetLambdaFunctionRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetLambdaFunctionRecommendations", input)
	return &GetLambdaFunctionRecommendationsFuture{Future: future}
}

func (a *stub) GetRecommendationSummaries(ctx workflow.Context, input *computeoptimizer.GetRecommendationSummariesInput) (*computeoptimizer.GetRecommendationSummariesOutput, error) {
	var output computeoptimizer.GetRecommendationSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetRecommendationSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRecommendationSummariesAsync(ctx workflow.Context, input *computeoptimizer.GetRecommendationSummariesInput) *GetRecommendationSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-GetRecommendationSummaries", input)
	return &GetRecommendationSummariesFuture{Future: future}
}

func (a *stub) UpdateEnrollmentStatus(ctx workflow.Context, input *computeoptimizer.UpdateEnrollmentStatusInput) (*computeoptimizer.UpdateEnrollmentStatusOutput, error) {
	var output computeoptimizer.UpdateEnrollmentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-UpdateEnrollmentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEnrollmentStatusAsync(ctx workflow.Context, input *computeoptimizer.UpdateEnrollmentStatusInput) *UpdateEnrollmentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-computeoptimizer-UpdateEnrollmentStatus", input)
	return &UpdateEnrollmentStatusFuture{Future: future}
}
