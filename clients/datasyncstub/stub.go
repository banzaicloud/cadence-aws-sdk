// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package datasyncstub

import (
	"github.com/aws/aws-sdk-go/service/datasync"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelTaskExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelTaskExecutionFuture) Get(ctx workflow.Context) (*datasync.CancelTaskExecutionOutput, error) {
	var output datasync.CancelTaskExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAgentFuture) Get(ctx workflow.Context) (*datasync.CreateAgentOutput, error) {
	var output datasync.CreateAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationEfsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationEfsFuture) Get(ctx workflow.Context) (*datasync.CreateLocationEfsOutput, error) {
	var output datasync.CreateLocationEfsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationFsxWindowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationFsxWindowsFuture) Get(ctx workflow.Context) (*datasync.CreateLocationFsxWindowsOutput, error) {
	var output datasync.CreateLocationFsxWindowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationNfsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationNfsFuture) Get(ctx workflow.Context) (*datasync.CreateLocationNfsOutput, error) {
	var output datasync.CreateLocationNfsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationObjectStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationObjectStorageFuture) Get(ctx workflow.Context) (*datasync.CreateLocationObjectStorageOutput, error) {
	var output datasync.CreateLocationObjectStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationS3Future) Get(ctx workflow.Context) (*datasync.CreateLocationS3Output, error) {
	var output datasync.CreateLocationS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocationSmbFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocationSmbFuture) Get(ctx workflow.Context) (*datasync.CreateLocationSmbOutput, error) {
	var output datasync.CreateLocationSmbOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTaskFuture) Get(ctx workflow.Context) (*datasync.CreateTaskOutput, error) {
	var output datasync.CreateTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAgentFuture) Get(ctx workflow.Context) (*datasync.DeleteAgentOutput, error) {
	var output datasync.DeleteAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLocationFuture) Get(ctx workflow.Context) (*datasync.DeleteLocationOutput, error) {
	var output datasync.DeleteLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTaskFuture) Get(ctx workflow.Context) (*datasync.DeleteTaskOutput, error) {
	var output datasync.DeleteTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAgentFuture) Get(ctx workflow.Context) (*datasync.DescribeAgentOutput, error) {
	var output datasync.DescribeAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationEfsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationEfsFuture) Get(ctx workflow.Context) (*datasync.DescribeLocationEfsOutput, error) {
	var output datasync.DescribeLocationEfsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationFsxWindowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationFsxWindowsFuture) Get(ctx workflow.Context) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	var output datasync.DescribeLocationFsxWindowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationNfsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationNfsFuture) Get(ctx workflow.Context) (*datasync.DescribeLocationNfsOutput, error) {
	var output datasync.DescribeLocationNfsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationObjectStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationObjectStorageFuture) Get(ctx workflow.Context) (*datasync.DescribeLocationObjectStorageOutput, error) {
	var output datasync.DescribeLocationObjectStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationS3Future) Get(ctx workflow.Context) (*datasync.DescribeLocationS3Output, error) {
	var output datasync.DescribeLocationS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationSmbFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationSmbFuture) Get(ctx workflow.Context) (*datasync.DescribeLocationSmbOutput, error) {
	var output datasync.DescribeLocationSmbOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTaskFuture) Get(ctx workflow.Context) (*datasync.DescribeTaskOutput, error) {
	var output datasync.DescribeTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTaskExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTaskExecutionFuture) Get(ctx workflow.Context) (*datasync.DescribeTaskExecutionOutput, error) {
	var output datasync.DescribeTaskExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAgentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAgentsFuture) Get(ctx workflow.Context) (*datasync.ListAgentsOutput, error) {
	var output datasync.ListAgentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLocationsFuture) Get(ctx workflow.Context) (*datasync.ListLocationsOutput, error) {
	var output datasync.ListLocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*datasync.ListTagsForResourceOutput, error) {
	var output datasync.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTaskExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTaskExecutionsFuture) Get(ctx workflow.Context) (*datasync.ListTaskExecutionsOutput, error) {
	var output datasync.ListTaskExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTasksFuture) Get(ctx workflow.Context) (*datasync.ListTasksOutput, error) {
	var output datasync.ListTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTaskExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTaskExecutionFuture) Get(ctx workflow.Context) (*datasync.StartTaskExecutionOutput, error) {
	var output datasync.StartTaskExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*datasync.TagResourceOutput, error) {
	var output datasync.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*datasync.UntagResourceOutput, error) {
	var output datasync.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAgentFuture) Get(ctx workflow.Context) (*datasync.UpdateAgentOutput, error) {
	var output datasync.UpdateAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTaskFuture) Get(ctx workflow.Context) (*datasync.UpdateTaskOutput, error) {
	var output datasync.UpdateTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTaskExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTaskExecutionFuture) Get(ctx workflow.Context) (*datasync.UpdateTaskExecutionOutput, error) {
	var output datasync.UpdateTaskExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelTaskExecution(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) (*datasync.CancelTaskExecutionOutput, error) {
	var output datasync.CancelTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CancelTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelTaskExecutionAsync(ctx workflow.Context, input *datasync.CancelTaskExecutionInput) *CancelTaskExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CancelTaskExecution", input)
	return &CancelTaskExecutionFuture{Future: future}
}

func (a *stub) CreateAgent(ctx workflow.Context, input *datasync.CreateAgentInput) (*datasync.CreateAgentOutput, error) {
	var output datasync.CreateAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAgentAsync(ctx workflow.Context, input *datasync.CreateAgentInput) *CreateAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateAgent", input)
	return &CreateAgentFuture{Future: future}
}

func (a *stub) CreateLocationEfs(ctx workflow.Context, input *datasync.CreateLocationEfsInput) (*datasync.CreateLocationEfsOutput, error) {
	var output datasync.CreateLocationEfsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationEfs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationEfsAsync(ctx workflow.Context, input *datasync.CreateLocationEfsInput) *CreateLocationEfsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationEfs", input)
	return &CreateLocationEfsFuture{Future: future}
}

func (a *stub) CreateLocationFsxWindows(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) (*datasync.CreateLocationFsxWindowsOutput, error) {
	var output datasync.CreateLocationFsxWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationFsxWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.CreateLocationFsxWindowsInput) *CreateLocationFsxWindowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationFsxWindows", input)
	return &CreateLocationFsxWindowsFuture{Future: future}
}

func (a *stub) CreateLocationNfs(ctx workflow.Context, input *datasync.CreateLocationNfsInput) (*datasync.CreateLocationNfsOutput, error) {
	var output datasync.CreateLocationNfsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationNfs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationNfsAsync(ctx workflow.Context, input *datasync.CreateLocationNfsInput) *CreateLocationNfsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationNfs", input)
	return &CreateLocationNfsFuture{Future: future}
}

func (a *stub) CreateLocationObjectStorage(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) (*datasync.CreateLocationObjectStorageOutput, error) {
	var output datasync.CreateLocationObjectStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationObjectStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationObjectStorageAsync(ctx workflow.Context, input *datasync.CreateLocationObjectStorageInput) *CreateLocationObjectStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationObjectStorage", input)
	return &CreateLocationObjectStorageFuture{Future: future}
}

func (a *stub) CreateLocationS3(ctx workflow.Context, input *datasync.CreateLocationS3Input) (*datasync.CreateLocationS3Output, error) {
	var output datasync.CreateLocationS3Output
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationS3", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationS3Async(ctx workflow.Context, input *datasync.CreateLocationS3Input) *CreateLocationS3Future {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationS3", input)
	return &CreateLocationS3Future{Future: future}
}

func (a *stub) CreateLocationSmb(ctx workflow.Context, input *datasync.CreateLocationSmbInput) (*datasync.CreateLocationSmbOutput, error) {
	var output datasync.CreateLocationSmbOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationSmb", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocationSmbAsync(ctx workflow.Context, input *datasync.CreateLocationSmbInput) *CreateLocationSmbFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateLocationSmb", input)
	return &CreateLocationSmbFuture{Future: future}
}

func (a *stub) CreateTask(ctx workflow.Context, input *datasync.CreateTaskInput) (*datasync.CreateTaskOutput, error) {
	var output datasync.CreateTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-CreateTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTaskAsync(ctx workflow.Context, input *datasync.CreateTaskInput) *CreateTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-CreateTask", input)
	return &CreateTaskFuture{Future: future}
}

func (a *stub) DeleteAgent(ctx workflow.Context, input *datasync.DeleteAgentInput) (*datasync.DeleteAgentOutput, error) {
	var output datasync.DeleteAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAgentAsync(ctx workflow.Context, input *datasync.DeleteAgentInput) *DeleteAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteAgent", input)
	return &DeleteAgentFuture{Future: future}
}

func (a *stub) DeleteLocation(ctx workflow.Context, input *datasync.DeleteLocationInput) (*datasync.DeleteLocationOutput, error) {
	var output datasync.DeleteLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLocationAsync(ctx workflow.Context, input *datasync.DeleteLocationInput) *DeleteLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteLocation", input)
	return &DeleteLocationFuture{Future: future}
}

func (a *stub) DeleteTask(ctx workflow.Context, input *datasync.DeleteTaskInput) (*datasync.DeleteTaskOutput, error) {
	var output datasync.DeleteTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTaskAsync(ctx workflow.Context, input *datasync.DeleteTaskInput) *DeleteTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DeleteTask", input)
	return &DeleteTaskFuture{Future: future}
}

func (a *stub) DescribeAgent(ctx workflow.Context, input *datasync.DescribeAgentInput) (*datasync.DescribeAgentOutput, error) {
	var output datasync.DescribeAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAgentAsync(ctx workflow.Context, input *datasync.DescribeAgentInput) *DescribeAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeAgent", input)
	return &DescribeAgentFuture{Future: future}
}

func (a *stub) DescribeLocationEfs(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) (*datasync.DescribeLocationEfsOutput, error) {
	var output datasync.DescribeLocationEfsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationEfs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationEfsAsync(ctx workflow.Context, input *datasync.DescribeLocationEfsInput) *DescribeLocationEfsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationEfs", input)
	return &DescribeLocationEfsFuture{Future: future}
}

func (a *stub) DescribeLocationFsxWindows(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	var output datasync.DescribeLocationFsxWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationFsxWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationFsxWindowsAsync(ctx workflow.Context, input *datasync.DescribeLocationFsxWindowsInput) *DescribeLocationFsxWindowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationFsxWindows", input)
	return &DescribeLocationFsxWindowsFuture{Future: future}
}

func (a *stub) DescribeLocationNfs(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) (*datasync.DescribeLocationNfsOutput, error) {
	var output datasync.DescribeLocationNfsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationNfs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationNfsAsync(ctx workflow.Context, input *datasync.DescribeLocationNfsInput) *DescribeLocationNfsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationNfs", input)
	return &DescribeLocationNfsFuture{Future: future}
}

func (a *stub) DescribeLocationObjectStorage(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) (*datasync.DescribeLocationObjectStorageOutput, error) {
	var output datasync.DescribeLocationObjectStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationObjectStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationObjectStorageAsync(ctx workflow.Context, input *datasync.DescribeLocationObjectStorageInput) *DescribeLocationObjectStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationObjectStorage", input)
	return &DescribeLocationObjectStorageFuture{Future: future}
}

func (a *stub) DescribeLocationS3(ctx workflow.Context, input *datasync.DescribeLocationS3Input) (*datasync.DescribeLocationS3Output, error) {
	var output datasync.DescribeLocationS3Output
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationS3", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationS3Async(ctx workflow.Context, input *datasync.DescribeLocationS3Input) *DescribeLocationS3Future {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationS3", input)
	return &DescribeLocationS3Future{Future: future}
}

func (a *stub) DescribeLocationSmb(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) (*datasync.DescribeLocationSmbOutput, error) {
	var output datasync.DescribeLocationSmbOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationSmb", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationSmbAsync(ctx workflow.Context, input *datasync.DescribeLocationSmbInput) *DescribeLocationSmbFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeLocationSmb", input)
	return &DescribeLocationSmbFuture{Future: future}
}

func (a *stub) DescribeTask(ctx workflow.Context, input *datasync.DescribeTaskInput) (*datasync.DescribeTaskOutput, error) {
	var output datasync.DescribeTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTaskAsync(ctx workflow.Context, input *datasync.DescribeTaskInput) *DescribeTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeTask", input)
	return &DescribeTaskFuture{Future: future}
}

func (a *stub) DescribeTaskExecution(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) (*datasync.DescribeTaskExecutionOutput, error) {
	var output datasync.DescribeTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTaskExecutionAsync(ctx workflow.Context, input *datasync.DescribeTaskExecutionInput) *DescribeTaskExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-DescribeTaskExecution", input)
	return &DescribeTaskExecutionFuture{Future: future}
}

func (a *stub) ListAgents(ctx workflow.Context, input *datasync.ListAgentsInput) (*datasync.ListAgentsOutput, error) {
	var output datasync.ListAgentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-ListAgents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAgentsAsync(ctx workflow.Context, input *datasync.ListAgentsInput) *ListAgentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-ListAgents", input)
	return &ListAgentsFuture{Future: future}
}

func (a *stub) ListLocations(ctx workflow.Context, input *datasync.ListLocationsInput) (*datasync.ListLocationsOutput, error) {
	var output datasync.ListLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-ListLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLocationsAsync(ctx workflow.Context, input *datasync.ListLocationsInput) *ListLocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-ListLocations", input)
	return &ListLocationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *datasync.ListTagsForResourceInput) (*datasync.ListTagsForResourceOutput, error) {
	var output datasync.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *datasync.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTaskExecutions(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) (*datasync.ListTaskExecutionsOutput, error) {
	var output datasync.ListTaskExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-ListTaskExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTaskExecutionsAsync(ctx workflow.Context, input *datasync.ListTaskExecutionsInput) *ListTaskExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-ListTaskExecutions", input)
	return &ListTaskExecutionsFuture{Future: future}
}

func (a *stub) ListTasks(ctx workflow.Context, input *datasync.ListTasksInput) (*datasync.ListTasksOutput, error) {
	var output datasync.ListTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-ListTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTasksAsync(ctx workflow.Context, input *datasync.ListTasksInput) *ListTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-ListTasks", input)
	return &ListTasksFuture{Future: future}
}

func (a *stub) StartTaskExecution(ctx workflow.Context, input *datasync.StartTaskExecutionInput) (*datasync.StartTaskExecutionOutput, error) {
	var output datasync.StartTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-StartTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTaskExecutionAsync(ctx workflow.Context, input *datasync.StartTaskExecutionInput) *StartTaskExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-StartTaskExecution", input)
	return &StartTaskExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *datasync.TagResourceInput) (*datasync.TagResourceOutput, error) {
	var output datasync.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *datasync.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *datasync.UntagResourceInput) (*datasync.UntagResourceOutput, error) {
	var output datasync.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *datasync.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAgent(ctx workflow.Context, input *datasync.UpdateAgentInput) (*datasync.UpdateAgentOutput, error) {
	var output datasync.UpdateAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAgentAsync(ctx workflow.Context, input *datasync.UpdateAgentInput) *UpdateAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateAgent", input)
	return &UpdateAgentFuture{Future: future}
}

func (a *stub) UpdateTask(ctx workflow.Context, input *datasync.UpdateTaskInput) (*datasync.UpdateTaskOutput, error) {
	var output datasync.UpdateTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTaskAsync(ctx workflow.Context, input *datasync.UpdateTaskInput) *UpdateTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateTask", input)
	return &UpdateTaskFuture{Future: future}
}

func (a *stub) UpdateTaskExecution(ctx workflow.Context, input *datasync.UpdateTaskExecutionInput) (*datasync.UpdateTaskExecutionOutput, error) {
	var output datasync.UpdateTaskExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateTaskExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTaskExecutionAsync(ctx workflow.Context, input *datasync.UpdateTaskExecutionInput) *UpdateTaskExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-datasync-UpdateTaskExecution", input)
	return &UpdateTaskExecutionFuture{Future: future}
}
