// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sagemakerstub

import (
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsFuture) Get(ctx workflow.Context) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppFuture) Get(ctx workflow.Context) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateAppImageConfigOutput, error) {
	var output sagemaker.CreateAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageFuture) Get(ctx workflow.Context) (*sagemaker.CreateImageOutput, error) {
	var output sagemaker.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.CreateImageVersionOutput, error) {
	var output sagemaker.CreateImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateModelFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePresignedDomainUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePresignedDomainUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePresignedNotebookInstanceUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePresignedNotebookInstanceUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrialFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAppImageConfigOutput, error) {
	var output sagemaker.DeleteAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageFuture) Get(ctx workflow.Context) (*sagemaker.DeleteImageOutput, error) {
	var output sagemaker.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.DeleteImageVersionOutput, error) {
	var output sagemaker.DeleteImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteModelFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrialFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAppImageConfigOutput, error) {
	var output sagemaker.DescribeAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainFuture) Get(ctx workflow.Context) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageFuture) Get(ctx workflow.Context) (*sagemaker.DescribeImageOutput, error) {
	var output sagemaker.DescribeImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.DescribeImageVersionOutput, error) {
	var output sagemaker.DescribeImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeModelFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSubscribedWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSubscribedWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrialFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSearchSuggestionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSearchSuggestionsFuture) Get(ctx workflow.Context) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAlgorithmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAlgorithmsFuture) Get(ctx workflow.Context) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppImageConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppImageConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListAppImageConfigsOutput, error) {
	var output sagemaker.ListAppImageConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppsFuture) Get(ctx workflow.Context) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAutoMLJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAutoMLJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCandidatesForAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCandidatesForAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCodeRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCodeRepositoriesFuture) Get(ctx workflow.Context) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCompilationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCompilationJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEndpointConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEndpointConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEndpointsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListExperimentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListExperimentsFuture) Get(ctx workflow.Context) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFlowDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFlowDefinitionsFuture) Get(ctx workflow.Context) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHumanTaskUisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHumanTaskUisFuture) Get(ctx workflow.Context) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHyperParameterTuningJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHyperParameterTuningJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImageVersionsFuture) Get(ctx workflow.Context) (*sagemaker.ListImageVersionsOutput, error) {
	var output sagemaker.ListImageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImagesFuture) Get(ctx workflow.Context) (*sagemaker.ListImagesOutput, error) {
	var output sagemaker.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLabelingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLabelingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLabelingJobsForWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLabelingJobsForWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListModelPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListModelPackagesFuture) Get(ctx workflow.Context) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListModelsFuture) Get(ctx workflow.Context) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMonitoringExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMonitoringExecutionsFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMonitoringSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMonitoringSchedulesFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNotebookInstanceLifecycleConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNotebookInstanceLifecycleConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNotebookInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNotebookInstancesFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProcessingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProcessingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSubscribedWorkteamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSubscribedWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTrainingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTrainingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTrainingJobsForHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTrainingJobsForHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTransformJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTransformJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTrialComponentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTrialComponentsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTrialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTrialsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserProfilesFuture) Get(ctx workflow.Context) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorkforcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorkforcesFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorkteamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RenderUiTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RenderUiTemplateFuture) Get(ctx workflow.Context) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchFuture) Get(ctx workflow.Context) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.UpdateAppImageConfigOutput, error) {
	var output sagemaker.UpdateAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainFuture) Get(ctx workflow.Context) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEndpointWeightsAndCapacitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEndpointWeightsAndCapacitiesFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateImageFuture) Get(ctx workflow.Context) (*sagemaker.UpdateImageOutput, error) {
	var output sagemaker.UpdateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTrialFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTags(ctx workflow.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsAsync(ctx workflow.Context, input *sagemaker.AddTagsInput) *AddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-AddTags", input)
	return &AddTagsFuture{Future: future}
}

func (a *stub) AssociateTrialComponent(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-AssociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) *AssociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-AssociateTrialComponent", input)
	return &AssociateTrialComponentFuture{Future: future}
}

func (a *stub) CreateAlgorithm(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAlgorithmAsync(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) *CreateAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAlgorithm", input)
	return &CreateAlgorithmFuture{Future: future}
}

func (a *stub) CreateApp(ctx workflow.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppAsync(ctx workflow.Context, input *sagemaker.CreateAppInput) *CreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateApp", input)
	return &CreateAppFuture{Future: future}
}

func (a *stub) CreateAppImageConfig(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) (*sagemaker.CreateAppImageConfigOutput, error) {
	var output sagemaker.CreateAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) *CreateAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAppImageConfig", input)
	return &CreateAppImageConfigFuture{Future: future}
}

func (a *stub) CreateAutoMLJob(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAutoMLJobAsync(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) *CreateAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAutoMLJob", input)
	return &CreateAutoMLJobFuture{Future: future}
}

func (a *stub) CreateCodeRepository(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) *CreateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCodeRepository", input)
	return &CreateCodeRepositoryFuture{Future: future}
}

func (a *stub) CreateCompilationJob(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCompilationJobAsync(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) *CreateCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCompilationJob", input)
	return &CreateCompilationJobFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *sagemaker.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *sagemaker.CreateEndpointInput) *CreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpoint", input)
	return &CreateEndpointFuture{Future: future}
}

func (a *stub) CreateEndpointConfig(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointConfigAsync(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) *CreateEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpointConfig", input)
	return &CreateEndpointConfigFuture{Future: future}
}

func (a *stub) CreateExperiment(ctx workflow.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateExperimentAsync(ctx workflow.Context, input *sagemaker.CreateExperimentInput) *CreateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateExperiment", input)
	return &CreateExperimentFuture{Future: future}
}

func (a *stub) CreateFlowDefinition(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) *CreateFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateFlowDefinition", input)
	return &CreateFlowDefinitionFuture{Future: future}
}

func (a *stub) CreateHumanTaskUi(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) *CreateHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHumanTaskUi", input)
	return &CreateHumanTaskUiFuture{Future: future}
}

func (a *stub) CreateHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) *CreateHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHyperParameterTuningJob", input)
	return &CreateHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) CreateImage(ctx workflow.Context, input *sagemaker.CreateImageInput) (*sagemaker.CreateImageOutput, error) {
	var output sagemaker.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageAsync(ctx workflow.Context, input *sagemaker.CreateImageInput) *CreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImage", input)
	return &CreateImageFuture{Future: future}
}

func (a *stub) CreateImageVersion(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) (*sagemaker.CreateImageVersionOutput, error) {
	var output sagemaker.CreateImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageVersionAsync(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) *CreateImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImageVersion", input)
	return &CreateImageVersionFuture{Future: future}
}

func (a *stub) CreateLabelingJob(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLabelingJobAsync(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) *CreateLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateLabelingJob", input)
	return &CreateLabelingJobFuture{Future: future}
}

func (a *stub) CreateModel(ctx workflow.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelAsync(ctx workflow.Context, input *sagemaker.CreateModelInput) *CreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModel", input)
	return &CreateModelFuture{Future: future}
}

func (a *stub) CreateModelPackage(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelPackageAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) *CreateModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModelPackage", input)
	return &CreateModelPackageFuture{Future: future}
}

func (a *stub) CreateMonitoringSchedule(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) *CreateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateMonitoringSchedule", input)
	return &CreateMonitoringScheduleFuture{Future: future}
}

func (a *stub) CreateNotebookInstance(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) *CreateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstance", input)
	return &CreateNotebookInstanceFuture{Future: future}
}

func (a *stub) CreateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) *CreateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstanceLifecycleConfig", input)
	return &CreateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) CreatePresignedDomainUrl(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedDomainUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresignedDomainUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) *CreatePresignedDomainUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedDomainUrl", input)
	return &CreatePresignedDomainUrlFuture{Future: future}
}

func (a *stub) CreatePresignedNotebookInstanceUrl(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedNotebookInstanceUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresignedNotebookInstanceUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) *CreatePresignedNotebookInstanceUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedNotebookInstanceUrl", input)
	return &CreatePresignedNotebookInstanceUrlFuture{Future: future}
}

func (a *stub) CreateProcessingJob(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProcessingJobAsync(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) *CreateProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateProcessingJob", input)
	return &CreateProcessingJobFuture{Future: future}
}

func (a *stub) CreateTrainingJob(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrainingJobAsync(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) *CreateTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrainingJob", input)
	return &CreateTrainingJobFuture{Future: future}
}

func (a *stub) CreateTransformJob(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransformJobAsync(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) *CreateTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTransformJob", input)
	return &CreateTransformJobFuture{Future: future}
}

func (a *stub) CreateTrial(ctx workflow.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrialAsync(ctx workflow.Context, input *sagemaker.CreateTrialInput) *CreateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrial", input)
	return &CreateTrialFuture{Future: future}
}

func (a *stub) CreateTrialComponent(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrialComponentAsync(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) *CreateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrialComponent", input)
	return &CreateTrialComponentFuture{Future: future}
}

func (a *stub) CreateUserProfile(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserProfileAsync(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) *CreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateUserProfile", input)
	return &CreateUserProfileFuture{Future: future}
}

func (a *stub) CreateWorkforce(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkforceAsync(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) *CreateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkforce", input)
	return &CreateWorkforceFuture{Future: future}
}

func (a *stub) CreateWorkteam(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkteamAsync(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) *CreateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkteam", input)
	return &CreateWorkteamFuture{Future: future}
}

func (a *stub) DeleteAlgorithm(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlgorithmAsync(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) *DeleteAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAlgorithm", input)
	return &DeleteAlgorithmFuture{Future: future}
}

func (a *stub) DeleteApp(ctx workflow.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppAsync(ctx workflow.Context, input *sagemaker.DeleteAppInput) *DeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteApp", input)
	return &DeleteAppFuture{Future: future}
}

func (a *stub) DeleteAppImageConfig(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) (*sagemaker.DeleteAppImageConfigOutput, error) {
	var output sagemaker.DeleteAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) *DeleteAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAppImageConfig", input)
	return &DeleteAppImageConfigFuture{Future: future}
}

func (a *stub) DeleteCodeRepository(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) *DeleteCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteCodeRepository", input)
	return &DeleteCodeRepositoryFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *sagemaker.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) *DeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpoint", input)
	return &DeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEndpointConfig(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) *DeleteEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpointConfig", input)
	return &DeleteEndpointConfigFuture{Future: future}
}

func (a *stub) DeleteExperiment(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteExperimentAsync(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) *DeleteExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteExperiment", input)
	return &DeleteExperimentFuture{Future: future}
}

func (a *stub) DeleteFlowDefinition(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) *DeleteFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteFlowDefinition", input)
	return &DeleteFlowDefinitionFuture{Future: future}
}

func (a *stub) DeleteHumanTaskUi(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) *DeleteHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteHumanTaskUi", input)
	return &DeleteHumanTaskUiFuture{Future: future}
}

func (a *stub) DeleteImage(ctx workflow.Context, input *sagemaker.DeleteImageInput) (*sagemaker.DeleteImageOutput, error) {
	var output sagemaker.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageAsync(ctx workflow.Context, input *sagemaker.DeleteImageInput) *DeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImage", input)
	return &DeleteImageFuture{Future: future}
}

func (a *stub) DeleteImageVersion(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) (*sagemaker.DeleteImageVersionOutput, error) {
	var output sagemaker.DeleteImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageVersionAsync(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) *DeleteImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImageVersion", input)
	return &DeleteImageVersionFuture{Future: future}
}

func (a *stub) DeleteModel(ctx workflow.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelAsync(ctx workflow.Context, input *sagemaker.DeleteModelInput) *DeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModel", input)
	return &DeleteModelFuture{Future: future}
}

func (a *stub) DeleteModelPackage(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelPackageAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) *DeleteModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModelPackage", input)
	return &DeleteModelPackageFuture{Future: future}
}

func (a *stub) DeleteMonitoringSchedule(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) *DeleteMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteMonitoringSchedule", input)
	return &DeleteMonitoringScheduleFuture{Future: future}
}

func (a *stub) DeleteNotebookInstance(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) *DeleteNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstance", input)
	return &DeleteNotebookInstanceFuture{Future: future}
}

func (a *stub) DeleteNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) *DeleteNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstanceLifecycleConfig", input)
	return &DeleteNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *sagemaker.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DeleteTrial(ctx workflow.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrialAsync(ctx workflow.Context, input *sagemaker.DeleteTrialInput) *DeleteTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrial", input)
	return &DeleteTrialFuture{Future: future}
}

func (a *stub) DeleteTrialComponent(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrialComponentAsync(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) *DeleteTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrialComponent", input)
	return &DeleteTrialComponentFuture{Future: future}
}

func (a *stub) DeleteUserProfile(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserProfileAsync(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) *DeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteUserProfile", input)
	return &DeleteUserProfileFuture{Future: future}
}

func (a *stub) DeleteWorkforce(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkforceAsync(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) *DeleteWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkforce", input)
	return &DeleteWorkforceFuture{Future: future}
}

func (a *stub) DeleteWorkteam(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkteamAsync(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) *DeleteWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkteam", input)
	return &DeleteWorkteamFuture{Future: future}
}

func (a *stub) DescribeAlgorithm(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlgorithmAsync(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) *DescribeAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAlgorithm", input)
	return &DescribeAlgorithmFuture{Future: future}
}

func (a *stub) DescribeApp(ctx workflow.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppAsync(ctx workflow.Context, input *sagemaker.DescribeAppInput) *DescribeAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeApp", input)
	return &DescribeAppFuture{Future: future}
}

func (a *stub) DescribeAppImageConfig(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) (*sagemaker.DescribeAppImageConfigOutput, error) {
	var output sagemaker.DescribeAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) *DescribeAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAppImageConfig", input)
	return &DescribeAppImageConfigFuture{Future: future}
}

func (a *stub) DescribeAutoMLJob(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutoMLJobAsync(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) *DescribeAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAutoMLJob", input)
	return &DescribeAutoMLJobFuture{Future: future}
}

func (a *stub) DescribeCodeRepository(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) *DescribeCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCodeRepository", input)
	return &DescribeCodeRepositoryFuture{Future: future}
}

func (a *stub) DescribeCompilationJob(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCompilationJobAsync(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) *DescribeCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCompilationJob", input)
	return &DescribeCompilationJobFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *sagemaker.DescribeDomainInput) *DescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeDomain", input)
	return &DescribeDomainFuture{Future: future}
}

func (a *stub) DescribeEndpoint(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *DescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpoint", input)
	return &DescribeEndpointFuture{Future: future}
}

func (a *stub) DescribeEndpointConfig(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) *DescribeEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpointConfig", input)
	return &DescribeEndpointConfigFuture{Future: future}
}

func (a *stub) DescribeExperiment(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExperimentAsync(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) *DescribeExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeExperiment", input)
	return &DescribeExperimentFuture{Future: future}
}

func (a *stub) DescribeFlowDefinition(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) *DescribeFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeFlowDefinition", input)
	return &DescribeFlowDefinitionFuture{Future: future}
}

func (a *stub) DescribeHumanTaskUi(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) *DescribeHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHumanTaskUi", input)
	return &DescribeHumanTaskUiFuture{Future: future}
}

func (a *stub) DescribeHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) *DescribeHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHyperParameterTuningJob", input)
	return &DescribeHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) DescribeImage(ctx workflow.Context, input *sagemaker.DescribeImageInput) (*sagemaker.DescribeImageOutput, error) {
	var output sagemaker.DescribeImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageAsync(ctx workflow.Context, input *sagemaker.DescribeImageInput) *DescribeImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImage", input)
	return &DescribeImageFuture{Future: future}
}

func (a *stub) DescribeImageVersion(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) (*sagemaker.DescribeImageVersionOutput, error) {
	var output sagemaker.DescribeImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageVersionAsync(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) *DescribeImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImageVersion", input)
	return &DescribeImageVersionFuture{Future: future}
}

func (a *stub) DescribeLabelingJob(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLabelingJobAsync(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) *DescribeLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeLabelingJob", input)
	return &DescribeLabelingJobFuture{Future: future}
}

func (a *stub) DescribeModel(ctx workflow.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeModelAsync(ctx workflow.Context, input *sagemaker.DescribeModelInput) *DescribeModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModel", input)
	return &DescribeModelFuture{Future: future}
}

func (a *stub) DescribeModelPackage(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeModelPackageAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) *DescribeModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModelPackage", input)
	return &DescribeModelPackageFuture{Future: future}
}

func (a *stub) DescribeMonitoringSchedule(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) *DescribeMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeMonitoringSchedule", input)
	return &DescribeMonitoringScheduleFuture{Future: future}
}

func (a *stub) DescribeNotebookInstance(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *DescribeNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstance", input)
	return &DescribeNotebookInstanceFuture{Future: future}
}

func (a *stub) DescribeNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) *DescribeNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstanceLifecycleConfig", input)
	return &DescribeNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) DescribeProcessingJob(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProcessingJobAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *DescribeProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeProcessingJob", input)
	return &DescribeProcessingJobFuture{Future: future}
}

func (a *stub) DescribeSubscribedWorkteam(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeSubscribedWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSubscribedWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) *DescribeSubscribedWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeSubscribedWorkteam", input)
	return &DescribeSubscribedWorkteamFuture{Future: future}
}

func (a *stub) DescribeTrainingJob(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrainingJobAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *DescribeTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrainingJob", input)
	return &DescribeTrainingJobFuture{Future: future}
}

func (a *stub) DescribeTransformJob(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransformJobAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *DescribeTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTransformJob", input)
	return &DescribeTransformJobFuture{Future: future}
}

func (a *stub) DescribeTrial(ctx workflow.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrialAsync(ctx workflow.Context, input *sagemaker.DescribeTrialInput) *DescribeTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrial", input)
	return &DescribeTrialFuture{Future: future}
}

func (a *stub) DescribeTrialComponent(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrialComponentAsync(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) *DescribeTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrialComponent", input)
	return &DescribeTrialComponentFuture{Future: future}
}

func (a *stub) DescribeUserProfile(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserProfileAsync(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) *DescribeUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeUserProfile", input)
	return &DescribeUserProfileFuture{Future: future}
}

func (a *stub) DescribeWorkforce(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkforceAsync(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) *DescribeWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkforce", input)
	return &DescribeWorkforceFuture{Future: future}
}

func (a *stub) DescribeWorkteam(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) *DescribeWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkteam", input)
	return &DescribeWorkteamFuture{Future: future}
}

func (a *stub) DisassociateTrialComponent(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DisassociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) *DisassociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DisassociateTrialComponent", input)
	return &DisassociateTrialComponentFuture{Future: future}
}

func (a *stub) GetSearchSuggestions(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-GetSearchSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSearchSuggestionsAsync(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) *GetSearchSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-GetSearchSuggestions", input)
	return &GetSearchSuggestionsFuture{Future: future}
}

func (a *stub) ListAlgorithms(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAlgorithms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAlgorithmsAsync(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) *ListAlgorithmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAlgorithms", input)
	return &ListAlgorithmsFuture{Future: future}
}

func (a *stub) ListAppImageConfigs(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) (*sagemaker.ListAppImageConfigsOutput, error) {
	var output sagemaker.ListAppImageConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAppImageConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppImageConfigsAsync(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) *ListAppImageConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAppImageConfigs", input)
	return &ListAppImageConfigsFuture{Future: future}
}

func (a *stub) ListApps(ctx workflow.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppsAsync(ctx workflow.Context, input *sagemaker.ListAppsInput) *ListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListApps", input)
	return &ListAppsFuture{Future: future}
}

func (a *stub) ListAutoMLJobs(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAutoMLJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAutoMLJobsAsync(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) *ListAutoMLJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAutoMLJobs", input)
	return &ListAutoMLJobsFuture{Future: future}
}

func (a *stub) ListCandidatesForAutoMLJob(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCandidatesForAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCandidatesForAutoMLJobAsync(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) *ListCandidatesForAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCandidatesForAutoMLJob", input)
	return &ListCandidatesForAutoMLJobFuture{Future: future}
}

func (a *stub) ListCodeRepositories(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCodeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCodeRepositoriesAsync(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) *ListCodeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCodeRepositories", input)
	return &ListCodeRepositoriesFuture{Future: future}
}

func (a *stub) ListCompilationJobs(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCompilationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCompilationJobsAsync(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) *ListCompilationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCompilationJobs", input)
	return &ListCompilationJobsFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *sagemaker.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListEndpointConfigs(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpointConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointConfigsAsync(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) *ListEndpointConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpointConfigs", input)
	return &ListEndpointConfigsFuture{Future: future}
}

func (a *stub) ListEndpoints(ctx workflow.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointsAsync(ctx workflow.Context, input *sagemaker.ListEndpointsInput) *ListEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpoints", input)
	return &ListEndpointsFuture{Future: future}
}

func (a *stub) ListExperiments(ctx workflow.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListExperiments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExperimentsAsync(ctx workflow.Context, input *sagemaker.ListExperimentsInput) *ListExperimentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListExperiments", input)
	return &ListExperimentsFuture{Future: future}
}

func (a *stub) ListFlowDefinitions(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListFlowDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFlowDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) *ListFlowDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListFlowDefinitions", input)
	return &ListFlowDefinitionsFuture{Future: future}
}

func (a *stub) ListHumanTaskUis(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHumanTaskUis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHumanTaskUisAsync(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) *ListHumanTaskUisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHumanTaskUis", input)
	return &ListHumanTaskUisFuture{Future: future}
}

func (a *stub) ListHyperParameterTuningJobs(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHyperParameterTuningJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHyperParameterTuningJobsAsync(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) *ListHyperParameterTuningJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHyperParameterTuningJobs", input)
	return &ListHyperParameterTuningJobsFuture{Future: future}
}

func (a *stub) ListImageVersions(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) (*sagemaker.ListImageVersionsOutput, error) {
	var output sagemaker.ListImageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageVersionsAsync(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) *ListImageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImageVersions", input)
	return &ListImageVersionsFuture{Future: future}
}

func (a *stub) ListImages(ctx workflow.Context, input *sagemaker.ListImagesInput) (*sagemaker.ListImagesOutput, error) {
	var output sagemaker.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagesAsync(ctx workflow.Context, input *sagemaker.ListImagesInput) *ListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImages", input)
	return &ListImagesFuture{Future: future}
}

func (a *stub) ListLabelingJobs(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLabelingJobsAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) *ListLabelingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobs", input)
	return &ListLabelingJobsFuture{Future: future}
}

func (a *stub) ListLabelingJobsForWorkteam(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobsForWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLabelingJobsForWorkteamAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) *ListLabelingJobsForWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobsForWorkteam", input)
	return &ListLabelingJobsForWorkteamFuture{Future: future}
}

func (a *stub) ListModelPackages(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModelPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListModelPackagesAsync(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) *ListModelPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModelPackages", input)
	return &ListModelPackagesFuture{Future: future}
}

func (a *stub) ListModels(ctx workflow.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListModelsAsync(ctx workflow.Context, input *sagemaker.ListModelsInput) *ListModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModels", input)
	return &ListModelsFuture{Future: future}
}

func (a *stub) ListMonitoringExecutions(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMonitoringExecutionsAsync(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) *ListMonitoringExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringExecutions", input)
	return &ListMonitoringExecutionsFuture{Future: future}
}

func (a *stub) ListMonitoringSchedules(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMonitoringSchedulesAsync(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) *ListMonitoringSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringSchedules", input)
	return &ListMonitoringSchedulesFuture{Future: future}
}

func (a *stub) ListNotebookInstanceLifecycleConfigs(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstanceLifecycleConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotebookInstanceLifecycleConfigsAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) *ListNotebookInstanceLifecycleConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstanceLifecycleConfigs", input)
	return &ListNotebookInstanceLifecycleConfigsFuture{Future: future}
}

func (a *stub) ListNotebookInstances(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotebookInstancesAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) *ListNotebookInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstances", input)
	return &ListNotebookInstancesFuture{Future: future}
}

func (a *stub) ListProcessingJobs(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListProcessingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProcessingJobsAsync(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) *ListProcessingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListProcessingJobs", input)
	return &ListProcessingJobsFuture{Future: future}
}

func (a *stub) ListSubscribedWorkteams(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListSubscribedWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscribedWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) *ListSubscribedWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListSubscribedWorkteams", input)
	return &ListSubscribedWorkteamsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *sagemaker.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) ListTrainingJobs(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrainingJobsAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) *ListTrainingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobs", input)
	return &ListTrainingJobsFuture{Future: future}
}

func (a *stub) ListTrainingJobsForHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobsForHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrainingJobsForHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) *ListTrainingJobsForHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobsForHyperParameterTuningJob", input)
	return &ListTrainingJobsForHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) ListTransformJobs(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTransformJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTransformJobsAsync(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) *ListTransformJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTransformJobs", input)
	return &ListTransformJobsFuture{Future: future}
}

func (a *stub) ListTrialComponents(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrialComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrialComponentsAsync(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) *ListTrialComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrialComponents", input)
	return &ListTrialComponentsFuture{Future: future}
}

func (a *stub) ListTrials(ctx workflow.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrialsAsync(ctx workflow.Context, input *sagemaker.ListTrialsInput) *ListTrialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrials", input)
	return &ListTrialsFuture{Future: future}
}

func (a *stub) ListUserProfiles(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserProfilesAsync(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) *ListUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListUserProfiles", input)
	return &ListUserProfilesFuture{Future: future}
}

func (a *stub) ListWorkforces(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkforces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkforcesAsync(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) *ListWorkforcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkforces", input)
	return &ListWorkforcesFuture{Future: future}
}

func (a *stub) ListWorkteams(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) *ListWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkteams", input)
	return &ListWorkteamsFuture{Future: future}
}

func (a *stub) RenderUiTemplate(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-RenderUiTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenderUiTemplateAsync(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) *RenderUiTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-RenderUiTemplate", input)
	return &RenderUiTemplateFuture{Future: future}
}

func (a *stub) Search(ctx workflow.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-Search", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAsync(ctx workflow.Context, input *sagemaker.SearchInput) *SearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-Search", input)
	return &SearchFuture{Future: future}
}

func (a *stub) StartMonitoringSchedule(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) *StartMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartMonitoringSchedule", input)
	return &StartMonitoringScheduleFuture{Future: future}
}

func (a *stub) StartNotebookInstance(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) *StartNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartNotebookInstance", input)
	return &StartNotebookInstanceFuture{Future: future}
}

func (a *stub) StopAutoMLJob(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAutoMLJobAsync(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) *StopAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopAutoMLJob", input)
	return &StopAutoMLJobFuture{Future: future}
}

func (a *stub) StopCompilationJob(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopCompilationJobAsync(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) *StopCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopCompilationJob", input)
	return &StopCompilationJobFuture{Future: future}
}

func (a *stub) StopHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) *StopHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopHyperParameterTuningJob", input)
	return &StopHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) StopLabelingJob(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopLabelingJobAsync(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) *StopLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopLabelingJob", input)
	return &StopLabelingJobFuture{Future: future}
}

func (a *stub) StopMonitoringSchedule(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) *StopMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopMonitoringSchedule", input)
	return &StopMonitoringScheduleFuture{Future: future}
}

func (a *stub) StopNotebookInstance(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) *StopNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopNotebookInstance", input)
	return &StopNotebookInstanceFuture{Future: future}
}

func (a *stub) StopProcessingJob(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopProcessingJobAsync(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) *StopProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopProcessingJob", input)
	return &StopProcessingJobFuture{Future: future}
}

func (a *stub) StopTrainingJob(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingJobAsync(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) *StopTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTrainingJob", input)
	return &StopTrainingJobFuture{Future: future}
}

func (a *stub) StopTransformJob(ctx workflow.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTransformJobAsync(ctx workflow.Context, input *sagemaker.StopTransformJobInput) *StopTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTransformJob", input)
	return &StopTransformJobFuture{Future: future}
}

func (a *stub) UpdateAppImageConfig(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) (*sagemaker.UpdateAppImageConfigOutput, error) {
	var output sagemaker.UpdateAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) *UpdateAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateAppImageConfig", input)
	return &UpdateAppImageConfigFuture{Future: future}
}

func (a *stub) UpdateCodeRepository(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) *UpdateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateCodeRepository", input)
	return &UpdateCodeRepositoryFuture{Future: future}
}

func (a *stub) UpdateDomain(ctx workflow.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainAsync(ctx workflow.Context, input *sagemaker.UpdateDomainInput) *UpdateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateDomain", input)
	return &UpdateDomainFuture{Future: future}
}

func (a *stub) UpdateEndpoint(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) *UpdateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpoint", input)
	return &UpdateEndpointFuture{Future: future}
}

func (a *stub) UpdateEndpointWeightsAndCapacities(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpointWeightsAndCapacities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointWeightsAndCapacitiesAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) *UpdateEndpointWeightsAndCapacitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpointWeightsAndCapacities", input)
	return &UpdateEndpointWeightsAndCapacitiesFuture{Future: future}
}

func (a *stub) UpdateExperiment(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateExperimentAsync(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) *UpdateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateExperiment", input)
	return &UpdateExperimentFuture{Future: future}
}

func (a *stub) UpdateImage(ctx workflow.Context, input *sagemaker.UpdateImageInput) (*sagemaker.UpdateImageOutput, error) {
	var output sagemaker.UpdateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateImageAsync(ctx workflow.Context, input *sagemaker.UpdateImageInput) *UpdateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateImage", input)
	return &UpdateImageFuture{Future: future}
}

func (a *stub) UpdateMonitoringSchedule(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) *UpdateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateMonitoringSchedule", input)
	return &UpdateMonitoringScheduleFuture{Future: future}
}

func (a *stub) UpdateNotebookInstance(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) *UpdateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstance", input)
	return &UpdateNotebookInstanceFuture{Future: future}
}

func (a *stub) UpdateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) *UpdateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstanceLifecycleConfig", input)
	return &UpdateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) UpdateTrial(ctx workflow.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrialAsync(ctx workflow.Context, input *sagemaker.UpdateTrialInput) *UpdateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrial", input)
	return &UpdateTrialFuture{Future: future}
}

func (a *stub) UpdateTrialComponent(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrialComponentAsync(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) *UpdateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrialComponent", input)
	return &UpdateTrialComponentFuture{Future: future}
}

func (a *stub) UpdateUserProfile(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserProfileAsync(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) *UpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateUserProfile", input)
	return &UpdateUserProfileFuture{Future: future}
}

func (a *stub) UpdateWorkforce(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkforceAsync(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) *UpdateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkforce", input)
	return &UpdateWorkforceFuture{Future: future}
}

func (a *stub) UpdateWorkteam(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkteamAsync(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) *UpdateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkteam", input)
	return &UpdateWorkteamFuture{Future: future}
}

func (a *stub) WaitUntilEndpointDeleted(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEndpointInService(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointInService", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointInService", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceDeleted(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceInService(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceInService", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceInService", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceStopped(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilProcessingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilProcessingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProcessingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilProcessingJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTrainingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTrainingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTrainingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTrainingJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTransformJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTransformJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTransformJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTransformJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}
