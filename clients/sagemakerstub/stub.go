// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sagemakerstub

import (
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type SageMakerAddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerAddTagsFuture) Get(ctx workflow.Context) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerAssociateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerAssociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateAppFuture) Get(ctx workflow.Context) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateAppImageConfigOutput, error) {
	var output sagemaker.CreateAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateDomainFuture) Get(ctx workflow.Context) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateImageFuture) Get(ctx workflow.Context) (*sagemaker.CreateImageOutput, error) {
	var output sagemaker.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.CreateImageVersionOutput, error) {
	var output sagemaker.CreateImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateModelFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreatePresignedDomainUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreatePresignedDomainUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreatePresignedNotebookInstanceUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreatePresignedNotebookInstanceUrlFuture) Get(ctx workflow.Context) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateTrialFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerCreateWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerCreateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteAppFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteAppImageConfigOutput, error) {
	var output sagemaker.DeleteAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteDomainFuture) Get(ctx workflow.Context) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteImageFuture) Get(ctx workflow.Context) (*sagemaker.DeleteImageOutput, error) {
	var output sagemaker.DeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.DeleteImageVersionOutput, error) {
	var output sagemaker.DeleteImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteModelFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteTagsFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteTrialFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDeleteWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDeleteWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeAlgorithmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeAlgorithmFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeAppFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAppImageConfigOutput, error) {
	var output sagemaker.DescribeAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeDomainFuture) Get(ctx workflow.Context) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeEndpointFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeEndpointConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeEndpointConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeExperimentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeFlowDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeFlowDefinitionFuture) Get(ctx workflow.Context) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeHumanTaskUiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeHumanTaskUiFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeImageFuture) Get(ctx workflow.Context) (*sagemaker.DescribeImageOutput, error) {
	var output sagemaker.DescribeImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeImageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeImageVersionFuture) Get(ctx workflow.Context) (*sagemaker.DescribeImageVersionOutput, error) {
	var output sagemaker.DescribeImageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeModelFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeModelPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeModelPackageFuture) Get(ctx workflow.Context) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeSubscribedWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeSubscribedWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeTrialFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDescribeWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDescribeWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerDisassociateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerDisassociateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerGetSearchSuggestionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerGetSearchSuggestionsFuture) Get(ctx workflow.Context) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListAlgorithmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListAlgorithmsFuture) Get(ctx workflow.Context) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListAppImageConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListAppImageConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListAppImageConfigsOutput, error) {
	var output sagemaker.ListAppImageConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListAppsFuture) Get(ctx workflow.Context) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListAutoMLJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListAutoMLJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListCandidatesForAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListCandidatesForAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListCodeRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListCodeRepositoriesFuture) Get(ctx workflow.Context) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListCompilationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListCompilationJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListDomainsFuture) Get(ctx workflow.Context) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListEndpointConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListEndpointConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListEndpointsFuture) Get(ctx workflow.Context) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListExperimentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListExperimentsFuture) Get(ctx workflow.Context) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListFlowDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListFlowDefinitionsFuture) Get(ctx workflow.Context) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListHumanTaskUisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListHumanTaskUisFuture) Get(ctx workflow.Context) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListHyperParameterTuningJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListHyperParameterTuningJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListImageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListImageVersionsFuture) Get(ctx workflow.Context) (*sagemaker.ListImageVersionsOutput, error) {
	var output sagemaker.ListImageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListImagesFuture) Get(ctx workflow.Context) (*sagemaker.ListImagesOutput, error) {
	var output sagemaker.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListLabelingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListLabelingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListLabelingJobsForWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListLabelingJobsForWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListModelPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListModelPackagesFuture) Get(ctx workflow.Context) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListModelsFuture) Get(ctx workflow.Context) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListMonitoringExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListMonitoringExecutionsFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListMonitoringSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListMonitoringSchedulesFuture) Get(ctx workflow.Context) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListNotebookInstanceLifecycleConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListNotebookInstanceLifecycleConfigsFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListNotebookInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListNotebookInstancesFuture) Get(ctx workflow.Context) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListProcessingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListProcessingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListSubscribedWorkteamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListSubscribedWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTagsFuture) Get(ctx workflow.Context) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTrainingJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTrainingJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTrainingJobsForHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTrainingJobsForHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTransformJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTransformJobsFuture) Get(ctx workflow.Context) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTrialComponentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTrialComponentsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListTrialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListTrialsFuture) Get(ctx workflow.Context) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListUserProfilesFuture) Get(ctx workflow.Context) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListWorkforcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListWorkforcesFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerListWorkteamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerListWorkteamsFuture) Get(ctx workflow.Context) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerRenderUiTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerRenderUiTemplateFuture) Get(ctx workflow.Context) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerSearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerSearchFuture) Get(ctx workflow.Context) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStartMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStartMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStartNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStartNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopAutoMLJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopAutoMLJobFuture) Get(ctx workflow.Context) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopCompilationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopCompilationJobFuture) Get(ctx workflow.Context) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopHyperParameterTuningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopHyperParameterTuningJobFuture) Get(ctx workflow.Context) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopLabelingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopLabelingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopProcessingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopProcessingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopTrainingJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopTrainingJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerStopTransformJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerStopTransformJobFuture) Get(ctx workflow.Context) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateAppImageConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateAppImageConfigFuture) Get(ctx workflow.Context) (*sagemaker.UpdateAppImageConfigOutput, error) {
	var output sagemaker.UpdateAppImageConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateCodeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateCodeRepositoryFuture) Get(ctx workflow.Context) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateDomainFuture) Get(ctx workflow.Context) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateEndpointFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateEndpointWeightsAndCapacitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateEndpointWeightsAndCapacitiesFuture) Get(ctx workflow.Context) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateExperimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateExperimentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateImageFuture) Get(ctx workflow.Context) (*sagemaker.UpdateImageOutput, error) {
	var output sagemaker.UpdateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateMonitoringScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateMonitoringScheduleFuture) Get(ctx workflow.Context) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateNotebookInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateNotebookInstanceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateNotebookInstanceLifecycleConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateNotebookInstanceLifecycleConfigFuture) Get(ctx workflow.Context) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateTrialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateTrialFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateTrialComponentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateTrialComponentFuture) Get(ctx workflow.Context) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateUserProfileFuture) Get(ctx workflow.Context) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateWorkforceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateWorkforceFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SageMakerUpdateWorkteamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SageMakerUpdateWorkteamFuture) Get(ctx workflow.Context) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTags(ctx workflow.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	var output sagemaker.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsAsync(ctx workflow.Context, input *sagemaker.AddTagsInput) *SageMakerAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-AddTags", input)
	return &SageMakerAddTagsFuture{Future: future}
}

func (a *stub) AssociateTrialComponent(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error) {
	var output sagemaker.AssociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-AssociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) *SageMakerAssociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-AssociateTrialComponent", input)
	return &SageMakerAssociateTrialComponentFuture{Future: future}
}

func (a *stub) CreateAlgorithm(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error) {
	var output sagemaker.CreateAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAlgorithmAsync(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) *SageMakerCreateAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAlgorithm", input)
	return &SageMakerCreateAlgorithmFuture{Future: future}
}

func (a *stub) CreateApp(ctx workflow.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error) {
	var output sagemaker.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppAsync(ctx workflow.Context, input *sagemaker.CreateAppInput) *SageMakerCreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateApp", input)
	return &SageMakerCreateAppFuture{Future: future}
}

func (a *stub) CreateAppImageConfig(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) (*sagemaker.CreateAppImageConfigOutput, error) {
	var output sagemaker.CreateAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) *SageMakerCreateAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAppImageConfig", input)
	return &SageMakerCreateAppImageConfigFuture{Future: future}
}

func (a *stub) CreateAutoMLJob(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error) {
	var output sagemaker.CreateAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAutoMLJobAsync(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) *SageMakerCreateAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateAutoMLJob", input)
	return &SageMakerCreateAutoMLJobFuture{Future: future}
}

func (a *stub) CreateCodeRepository(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error) {
	var output sagemaker.CreateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) *SageMakerCreateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCodeRepository", input)
	return &SageMakerCreateCodeRepositoryFuture{Future: future}
}

func (a *stub) CreateCompilationJob(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error) {
	var output sagemaker.CreateCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCompilationJobAsync(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) *SageMakerCreateCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateCompilationJob", input)
	return &SageMakerCreateCompilationJobFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error) {
	var output sagemaker.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *sagemaker.CreateDomainInput) *SageMakerCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateDomain", input)
	return &SageMakerCreateDomainFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	var output sagemaker.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *sagemaker.CreateEndpointInput) *SageMakerCreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpoint", input)
	return &SageMakerCreateEndpointFuture{Future: future}
}

func (a *stub) CreateEndpointConfig(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	var output sagemaker.CreateEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointConfigAsync(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) *SageMakerCreateEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateEndpointConfig", input)
	return &SageMakerCreateEndpointConfigFuture{Future: future}
}

func (a *stub) CreateExperiment(ctx workflow.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error) {
	var output sagemaker.CreateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateExperimentAsync(ctx workflow.Context, input *sagemaker.CreateExperimentInput) *SageMakerCreateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateExperiment", input)
	return &SageMakerCreateExperimentFuture{Future: future}
}

func (a *stub) CreateFlowDefinition(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error) {
	var output sagemaker.CreateFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) *SageMakerCreateFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateFlowDefinition", input)
	return &SageMakerCreateFlowDefinitionFuture{Future: future}
}

func (a *stub) CreateHumanTaskUi(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error) {
	var output sagemaker.CreateHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) *SageMakerCreateHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHumanTaskUi", input)
	return &SageMakerCreateHumanTaskUiFuture{Future: future}
}

func (a *stub) CreateHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	var output sagemaker.CreateHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) *SageMakerCreateHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateHyperParameterTuningJob", input)
	return &SageMakerCreateHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) CreateImage(ctx workflow.Context, input *sagemaker.CreateImageInput) (*sagemaker.CreateImageOutput, error) {
	var output sagemaker.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageAsync(ctx workflow.Context, input *sagemaker.CreateImageInput) *SageMakerCreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImage", input)
	return &SageMakerCreateImageFuture{Future: future}
}

func (a *stub) CreateImageVersion(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) (*sagemaker.CreateImageVersionOutput, error) {
	var output sagemaker.CreateImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageVersionAsync(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) *SageMakerCreateImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateImageVersion", input)
	return &SageMakerCreateImageVersionFuture{Future: future}
}

func (a *stub) CreateLabelingJob(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error) {
	var output sagemaker.CreateLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLabelingJobAsync(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) *SageMakerCreateLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateLabelingJob", input)
	return &SageMakerCreateLabelingJobFuture{Future: future}
}

func (a *stub) CreateModel(ctx workflow.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	var output sagemaker.CreateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelAsync(ctx workflow.Context, input *sagemaker.CreateModelInput) *SageMakerCreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModel", input)
	return &SageMakerCreateModelFuture{Future: future}
}

func (a *stub) CreateModelPackage(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error) {
	var output sagemaker.CreateModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelPackageAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) *SageMakerCreateModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateModelPackage", input)
	return &SageMakerCreateModelPackageFuture{Future: future}
}

func (a *stub) CreateMonitoringSchedule(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	var output sagemaker.CreateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) *SageMakerCreateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateMonitoringSchedule", input)
	return &SageMakerCreateMonitoringScheduleFuture{Future: future}
}

func (a *stub) CreateNotebookInstance(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	var output sagemaker.CreateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) *SageMakerCreateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstance", input)
	return &SageMakerCreateNotebookInstanceFuture{Future: future}
}

func (a *stub) CreateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) *SageMakerCreateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateNotebookInstanceLifecycleConfig", input)
	return &SageMakerCreateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) CreatePresignedDomainUrl(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	var output sagemaker.CreatePresignedDomainUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedDomainUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresignedDomainUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) *SageMakerCreatePresignedDomainUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedDomainUrl", input)
	return &SageMakerCreatePresignedDomainUrlFuture{Future: future}
}

func (a *stub) CreatePresignedNotebookInstanceUrl(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	var output sagemaker.CreatePresignedNotebookInstanceUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedNotebookInstanceUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePresignedNotebookInstanceUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) *SageMakerCreatePresignedNotebookInstanceUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreatePresignedNotebookInstanceUrl", input)
	return &SageMakerCreatePresignedNotebookInstanceUrlFuture{Future: future}
}

func (a *stub) CreateProcessingJob(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error) {
	var output sagemaker.CreateProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProcessingJobAsync(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) *SageMakerCreateProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateProcessingJob", input)
	return &SageMakerCreateProcessingJobFuture{Future: future}
}

func (a *stub) CreateTrainingJob(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	var output sagemaker.CreateTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrainingJobAsync(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) *SageMakerCreateTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrainingJob", input)
	return &SageMakerCreateTrainingJobFuture{Future: future}
}

func (a *stub) CreateTransformJob(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error) {
	var output sagemaker.CreateTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransformJobAsync(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) *SageMakerCreateTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTransformJob", input)
	return &SageMakerCreateTransformJobFuture{Future: future}
}

func (a *stub) CreateTrial(ctx workflow.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error) {
	var output sagemaker.CreateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrialAsync(ctx workflow.Context, input *sagemaker.CreateTrialInput) *SageMakerCreateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrial", input)
	return &SageMakerCreateTrialFuture{Future: future}
}

func (a *stub) CreateTrialComponent(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error) {
	var output sagemaker.CreateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrialComponentAsync(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) *SageMakerCreateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateTrialComponent", input)
	return &SageMakerCreateTrialComponentFuture{Future: future}
}

func (a *stub) CreateUserProfile(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error) {
	var output sagemaker.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserProfileAsync(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) *SageMakerCreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateUserProfile", input)
	return &SageMakerCreateUserProfileFuture{Future: future}
}

func (a *stub) CreateWorkforce(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error) {
	var output sagemaker.CreateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkforceAsync(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) *SageMakerCreateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkforce", input)
	return &SageMakerCreateWorkforceFuture{Future: future}
}

func (a *stub) CreateWorkteam(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error) {
	var output sagemaker.CreateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkteamAsync(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) *SageMakerCreateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-CreateWorkteam", input)
	return &SageMakerCreateWorkteamFuture{Future: future}
}

func (a *stub) DeleteAlgorithm(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error) {
	var output sagemaker.DeleteAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlgorithmAsync(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) *SageMakerDeleteAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAlgorithm", input)
	return &SageMakerDeleteAlgorithmFuture{Future: future}
}

func (a *stub) DeleteApp(ctx workflow.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error) {
	var output sagemaker.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppAsync(ctx workflow.Context, input *sagemaker.DeleteAppInput) *SageMakerDeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteApp", input)
	return &SageMakerDeleteAppFuture{Future: future}
}

func (a *stub) DeleteAppImageConfig(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) (*sagemaker.DeleteAppImageConfigOutput, error) {
	var output sagemaker.DeleteAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) *SageMakerDeleteAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteAppImageConfig", input)
	return &SageMakerDeleteAppImageConfigFuture{Future: future}
}

func (a *stub) DeleteCodeRepository(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	var output sagemaker.DeleteCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) *SageMakerDeleteCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteCodeRepository", input)
	return &SageMakerDeleteCodeRepositoryFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error) {
	var output sagemaker.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *sagemaker.DeleteDomainInput) *SageMakerDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteDomain", input)
	return &SageMakerDeleteDomainFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	var output sagemaker.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) *SageMakerDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpoint", input)
	return &SageMakerDeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEndpointConfig(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	var output sagemaker.DeleteEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) *SageMakerDeleteEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteEndpointConfig", input)
	return &SageMakerDeleteEndpointConfigFuture{Future: future}
}

func (a *stub) DeleteExperiment(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error) {
	var output sagemaker.DeleteExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteExperimentAsync(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) *SageMakerDeleteExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteExperiment", input)
	return &SageMakerDeleteExperimentFuture{Future: future}
}

func (a *stub) DeleteFlowDefinition(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	var output sagemaker.DeleteFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) *SageMakerDeleteFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteFlowDefinition", input)
	return &SageMakerDeleteFlowDefinitionFuture{Future: future}
}

func (a *stub) DeleteHumanTaskUi(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	var output sagemaker.DeleteHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) *SageMakerDeleteHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteHumanTaskUi", input)
	return &SageMakerDeleteHumanTaskUiFuture{Future: future}
}

func (a *stub) DeleteImage(ctx workflow.Context, input *sagemaker.DeleteImageInput) (*sagemaker.DeleteImageOutput, error) {
	var output sagemaker.DeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageAsync(ctx workflow.Context, input *sagemaker.DeleteImageInput) *SageMakerDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImage", input)
	return &SageMakerDeleteImageFuture{Future: future}
}

func (a *stub) DeleteImageVersion(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) (*sagemaker.DeleteImageVersionOutput, error) {
	var output sagemaker.DeleteImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteImageVersionAsync(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) *SageMakerDeleteImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteImageVersion", input)
	return &SageMakerDeleteImageVersionFuture{Future: future}
}

func (a *stub) DeleteModel(ctx workflow.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	var output sagemaker.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelAsync(ctx workflow.Context, input *sagemaker.DeleteModelInput) *SageMakerDeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModel", input)
	return &SageMakerDeleteModelFuture{Future: future}
}

func (a *stub) DeleteModelPackage(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error) {
	var output sagemaker.DeleteModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelPackageAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) *SageMakerDeleteModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteModelPackage", input)
	return &SageMakerDeleteModelPackageFuture{Future: future}
}

func (a *stub) DeleteMonitoringSchedule(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	var output sagemaker.DeleteMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) *SageMakerDeleteMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteMonitoringSchedule", input)
	return &SageMakerDeleteMonitoringScheduleFuture{Future: future}
}

func (a *stub) DeleteNotebookInstance(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	var output sagemaker.DeleteNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) *SageMakerDeleteNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstance", input)
	return &SageMakerDeleteNotebookInstanceFuture{Future: future}
}

func (a *stub) DeleteNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) *SageMakerDeleteNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteNotebookInstanceLifecycleConfig", input)
	return &SageMakerDeleteNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	var output sagemaker.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *sagemaker.DeleteTagsInput) *SageMakerDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTags", input)
	return &SageMakerDeleteTagsFuture{Future: future}
}

func (a *stub) DeleteTrial(ctx workflow.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error) {
	var output sagemaker.DeleteTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrialAsync(ctx workflow.Context, input *sagemaker.DeleteTrialInput) *SageMakerDeleteTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrial", input)
	return &SageMakerDeleteTrialFuture{Future: future}
}

func (a *stub) DeleteTrialComponent(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error) {
	var output sagemaker.DeleteTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrialComponentAsync(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) *SageMakerDeleteTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteTrialComponent", input)
	return &SageMakerDeleteTrialComponentFuture{Future: future}
}

func (a *stub) DeleteUserProfile(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error) {
	var output sagemaker.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserProfileAsync(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) *SageMakerDeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteUserProfile", input)
	return &SageMakerDeleteUserProfileFuture{Future: future}
}

func (a *stub) DeleteWorkforce(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error) {
	var output sagemaker.DeleteWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkforceAsync(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) *SageMakerDeleteWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkforce", input)
	return &SageMakerDeleteWorkforceFuture{Future: future}
}

func (a *stub) DeleteWorkteam(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error) {
	var output sagemaker.DeleteWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkteamAsync(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) *SageMakerDeleteWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DeleteWorkteam", input)
	return &SageMakerDeleteWorkteamFuture{Future: future}
}

func (a *stub) DescribeAlgorithm(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error) {
	var output sagemaker.DescribeAlgorithmOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAlgorithm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlgorithmAsync(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) *SageMakerDescribeAlgorithmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAlgorithm", input)
	return &SageMakerDescribeAlgorithmFuture{Future: future}
}

func (a *stub) DescribeApp(ctx workflow.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error) {
	var output sagemaker.DescribeAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppAsync(ctx workflow.Context, input *sagemaker.DescribeAppInput) *SageMakerDescribeAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeApp", input)
	return &SageMakerDescribeAppFuture{Future: future}
}

func (a *stub) DescribeAppImageConfig(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) (*sagemaker.DescribeAppImageConfigOutput, error) {
	var output sagemaker.DescribeAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) *SageMakerDescribeAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAppImageConfig", input)
	return &SageMakerDescribeAppImageConfigFuture{Future: future}
}

func (a *stub) DescribeAutoMLJob(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error) {
	var output sagemaker.DescribeAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutoMLJobAsync(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) *SageMakerDescribeAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeAutoMLJob", input)
	return &SageMakerDescribeAutoMLJobFuture{Future: future}
}

func (a *stub) DescribeCodeRepository(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	var output sagemaker.DescribeCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) *SageMakerDescribeCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCodeRepository", input)
	return &SageMakerDescribeCodeRepositoryFuture{Future: future}
}

func (a *stub) DescribeCompilationJob(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error) {
	var output sagemaker.DescribeCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCompilationJobAsync(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) *SageMakerDescribeCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeCompilationJob", input)
	return &SageMakerDescribeCompilationJobFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error) {
	var output sagemaker.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *sagemaker.DescribeDomainInput) *SageMakerDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeDomain", input)
	return &SageMakerDescribeDomainFuture{Future: future}
}

func (a *stub) DescribeEndpoint(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	var output sagemaker.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *SageMakerDescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpoint", input)
	return &SageMakerDescribeEndpointFuture{Future: future}
}

func (a *stub) DescribeEndpointConfig(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	var output sagemaker.DescribeEndpointConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpointConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) *SageMakerDescribeEndpointConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeEndpointConfig", input)
	return &SageMakerDescribeEndpointConfigFuture{Future: future}
}

func (a *stub) DescribeExperiment(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error) {
	var output sagemaker.DescribeExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExperimentAsync(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) *SageMakerDescribeExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeExperiment", input)
	return &SageMakerDescribeExperimentFuture{Future: future}
}

func (a *stub) DescribeFlowDefinition(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	var output sagemaker.DescribeFlowDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeFlowDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) *SageMakerDescribeFlowDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeFlowDefinition", input)
	return &SageMakerDescribeFlowDefinitionFuture{Future: future}
}

func (a *stub) DescribeHumanTaskUi(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	var output sagemaker.DescribeHumanTaskUiOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHumanTaskUi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) *SageMakerDescribeHumanTaskUiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHumanTaskUi", input)
	return &SageMakerDescribeHumanTaskUiFuture{Future: future}
}

func (a *stub) DescribeHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	var output sagemaker.DescribeHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) *SageMakerDescribeHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeHyperParameterTuningJob", input)
	return &SageMakerDescribeHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) DescribeImage(ctx workflow.Context, input *sagemaker.DescribeImageInput) (*sagemaker.DescribeImageOutput, error) {
	var output sagemaker.DescribeImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageAsync(ctx workflow.Context, input *sagemaker.DescribeImageInput) *SageMakerDescribeImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImage", input)
	return &SageMakerDescribeImageFuture{Future: future}
}

func (a *stub) DescribeImageVersion(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) (*sagemaker.DescribeImageVersionOutput, error) {
	var output sagemaker.DescribeImageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageVersionAsync(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) *SageMakerDescribeImageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeImageVersion", input)
	return &SageMakerDescribeImageVersionFuture{Future: future}
}

func (a *stub) DescribeLabelingJob(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error) {
	var output sagemaker.DescribeLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLabelingJobAsync(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) *SageMakerDescribeLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeLabelingJob", input)
	return &SageMakerDescribeLabelingJobFuture{Future: future}
}

func (a *stub) DescribeModel(ctx workflow.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	var output sagemaker.DescribeModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeModelAsync(ctx workflow.Context, input *sagemaker.DescribeModelInput) *SageMakerDescribeModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModel", input)
	return &SageMakerDescribeModelFuture{Future: future}
}

func (a *stub) DescribeModelPackage(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error) {
	var output sagemaker.DescribeModelPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModelPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeModelPackageAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) *SageMakerDescribeModelPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeModelPackage", input)
	return &SageMakerDescribeModelPackageFuture{Future: future}
}

func (a *stub) DescribeMonitoringSchedule(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	var output sagemaker.DescribeMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) *SageMakerDescribeMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeMonitoringSchedule", input)
	return &SageMakerDescribeMonitoringScheduleFuture{Future: future}
}

func (a *stub) DescribeNotebookInstance(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	var output sagemaker.DescribeNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *SageMakerDescribeNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstance", input)
	return &SageMakerDescribeNotebookInstanceFuture{Future: future}
}

func (a *stub) DescribeNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) *SageMakerDescribeNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeNotebookInstanceLifecycleConfig", input)
	return &SageMakerDescribeNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) DescribeProcessingJob(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error) {
	var output sagemaker.DescribeProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProcessingJobAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *SageMakerDescribeProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeProcessingJob", input)
	return &SageMakerDescribeProcessingJobFuture{Future: future}
}

func (a *stub) DescribeSubscribedWorkteam(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	var output sagemaker.DescribeSubscribedWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeSubscribedWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSubscribedWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) *SageMakerDescribeSubscribedWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeSubscribedWorkteam", input)
	return &SageMakerDescribeSubscribedWorkteamFuture{Future: future}
}

func (a *stub) DescribeTrainingJob(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	var output sagemaker.DescribeTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrainingJobAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *SageMakerDescribeTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrainingJob", input)
	return &SageMakerDescribeTrainingJobFuture{Future: future}
}

func (a *stub) DescribeTransformJob(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error) {
	var output sagemaker.DescribeTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransformJobAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *SageMakerDescribeTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTransformJob", input)
	return &SageMakerDescribeTransformJobFuture{Future: future}
}

func (a *stub) DescribeTrial(ctx workflow.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error) {
	var output sagemaker.DescribeTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrialAsync(ctx workflow.Context, input *sagemaker.DescribeTrialInput) *SageMakerDescribeTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrial", input)
	return &SageMakerDescribeTrialFuture{Future: future}
}

func (a *stub) DescribeTrialComponent(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error) {
	var output sagemaker.DescribeTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrialComponentAsync(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) *SageMakerDescribeTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeTrialComponent", input)
	return &SageMakerDescribeTrialComponentFuture{Future: future}
}

func (a *stub) DescribeUserProfile(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error) {
	var output sagemaker.DescribeUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserProfileAsync(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) *SageMakerDescribeUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeUserProfile", input)
	return &SageMakerDescribeUserProfileFuture{Future: future}
}

func (a *stub) DescribeWorkforce(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error) {
	var output sagemaker.DescribeWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkforceAsync(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) *SageMakerDescribeWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkforce", input)
	return &SageMakerDescribeWorkforceFuture{Future: future}
}

func (a *stub) DescribeWorkteam(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error) {
	var output sagemaker.DescribeWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) *SageMakerDescribeWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DescribeWorkteam", input)
	return &SageMakerDescribeWorkteamFuture{Future: future}
}

func (a *stub) DisassociateTrialComponent(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error) {
	var output sagemaker.DisassociateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-DisassociateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) *SageMakerDisassociateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-DisassociateTrialComponent", input)
	return &SageMakerDisassociateTrialComponentFuture{Future: future}
}

func (a *stub) GetSearchSuggestions(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error) {
	var output sagemaker.GetSearchSuggestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-GetSearchSuggestions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSearchSuggestionsAsync(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) *SageMakerGetSearchSuggestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-GetSearchSuggestions", input)
	return &SageMakerGetSearchSuggestionsFuture{Future: future}
}

func (a *stub) ListAlgorithms(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error) {
	var output sagemaker.ListAlgorithmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAlgorithms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAlgorithmsAsync(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) *SageMakerListAlgorithmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAlgorithms", input)
	return &SageMakerListAlgorithmsFuture{Future: future}
}

func (a *stub) ListAppImageConfigs(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) (*sagemaker.ListAppImageConfigsOutput, error) {
	var output sagemaker.ListAppImageConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAppImageConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppImageConfigsAsync(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) *SageMakerListAppImageConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAppImageConfigs", input)
	return &SageMakerListAppImageConfigsFuture{Future: future}
}

func (a *stub) ListApps(ctx workflow.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error) {
	var output sagemaker.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppsAsync(ctx workflow.Context, input *sagemaker.ListAppsInput) *SageMakerListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListApps", input)
	return &SageMakerListAppsFuture{Future: future}
}

func (a *stub) ListAutoMLJobs(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error) {
	var output sagemaker.ListAutoMLJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAutoMLJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAutoMLJobsAsync(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) *SageMakerListAutoMLJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListAutoMLJobs", input)
	return &SageMakerListAutoMLJobsFuture{Future: future}
}

func (a *stub) ListCandidatesForAutoMLJob(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	var output sagemaker.ListCandidatesForAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCandidatesForAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCandidatesForAutoMLJobAsync(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) *SageMakerListCandidatesForAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCandidatesForAutoMLJob", input)
	return &SageMakerListCandidatesForAutoMLJobFuture{Future: future}
}

func (a *stub) ListCodeRepositories(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error) {
	var output sagemaker.ListCodeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCodeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCodeRepositoriesAsync(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) *SageMakerListCodeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCodeRepositories", input)
	return &SageMakerListCodeRepositoriesFuture{Future: future}
}

func (a *stub) ListCompilationJobs(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error) {
	var output sagemaker.ListCompilationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCompilationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCompilationJobsAsync(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) *SageMakerListCompilationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListCompilationJobs", input)
	return &SageMakerListCompilationJobsFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error) {
	var output sagemaker.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *sagemaker.ListDomainsInput) *SageMakerListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListDomains", input)
	return &SageMakerListDomainsFuture{Future: future}
}

func (a *stub) ListEndpointConfigs(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	var output sagemaker.ListEndpointConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpointConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointConfigsAsync(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) *SageMakerListEndpointConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpointConfigs", input)
	return &SageMakerListEndpointConfigsFuture{Future: future}
}

func (a *stub) ListEndpoints(ctx workflow.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	var output sagemaker.ListEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointsAsync(ctx workflow.Context, input *sagemaker.ListEndpointsInput) *SageMakerListEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListEndpoints", input)
	return &SageMakerListEndpointsFuture{Future: future}
}

func (a *stub) ListExperiments(ctx workflow.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error) {
	var output sagemaker.ListExperimentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListExperiments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExperimentsAsync(ctx workflow.Context, input *sagemaker.ListExperimentsInput) *SageMakerListExperimentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListExperiments", input)
	return &SageMakerListExperimentsFuture{Future: future}
}

func (a *stub) ListFlowDefinitions(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error) {
	var output sagemaker.ListFlowDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListFlowDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFlowDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) *SageMakerListFlowDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListFlowDefinitions", input)
	return &SageMakerListFlowDefinitionsFuture{Future: future}
}

func (a *stub) ListHumanTaskUis(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error) {
	var output sagemaker.ListHumanTaskUisOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHumanTaskUis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHumanTaskUisAsync(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) *SageMakerListHumanTaskUisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHumanTaskUis", input)
	return &SageMakerListHumanTaskUisFuture{Future: future}
}

func (a *stub) ListHyperParameterTuningJobs(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	var output sagemaker.ListHyperParameterTuningJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHyperParameterTuningJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHyperParameterTuningJobsAsync(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) *SageMakerListHyperParameterTuningJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListHyperParameterTuningJobs", input)
	return &SageMakerListHyperParameterTuningJobsFuture{Future: future}
}

func (a *stub) ListImageVersions(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) (*sagemaker.ListImageVersionsOutput, error) {
	var output sagemaker.ListImageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImageVersionsAsync(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) *SageMakerListImageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImageVersions", input)
	return &SageMakerListImageVersionsFuture{Future: future}
}

func (a *stub) ListImages(ctx workflow.Context, input *sagemaker.ListImagesInput) (*sagemaker.ListImagesOutput, error) {
	var output sagemaker.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagesAsync(ctx workflow.Context, input *sagemaker.ListImagesInput) *SageMakerListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListImages", input)
	return &SageMakerListImagesFuture{Future: future}
}

func (a *stub) ListLabelingJobs(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error) {
	var output sagemaker.ListLabelingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLabelingJobsAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) *SageMakerListLabelingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobs", input)
	return &SageMakerListLabelingJobsFuture{Future: future}
}

func (a *stub) ListLabelingJobsForWorkteam(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	var output sagemaker.ListLabelingJobsForWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobsForWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLabelingJobsForWorkteamAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) *SageMakerListLabelingJobsForWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListLabelingJobsForWorkteam", input)
	return &SageMakerListLabelingJobsForWorkteamFuture{Future: future}
}

func (a *stub) ListModelPackages(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error) {
	var output sagemaker.ListModelPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModelPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListModelPackagesAsync(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) *SageMakerListModelPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModelPackages", input)
	return &SageMakerListModelPackagesFuture{Future: future}
}

func (a *stub) ListModels(ctx workflow.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	var output sagemaker.ListModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListModelsAsync(ctx workflow.Context, input *sagemaker.ListModelsInput) *SageMakerListModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListModels", input)
	return &SageMakerListModelsFuture{Future: future}
}

func (a *stub) ListMonitoringExecutions(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	var output sagemaker.ListMonitoringExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMonitoringExecutionsAsync(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) *SageMakerListMonitoringExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringExecutions", input)
	return &SageMakerListMonitoringExecutionsFuture{Future: future}
}

func (a *stub) ListMonitoringSchedules(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	var output sagemaker.ListMonitoringSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMonitoringSchedulesAsync(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) *SageMakerListMonitoringSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListMonitoringSchedules", input)
	return &SageMakerListMonitoringSchedulesFuture{Future: future}
}

func (a *stub) ListNotebookInstanceLifecycleConfigs(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	var output sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstanceLifecycleConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotebookInstanceLifecycleConfigsAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) *SageMakerListNotebookInstanceLifecycleConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstanceLifecycleConfigs", input)
	return &SageMakerListNotebookInstanceLifecycleConfigsFuture{Future: future}
}

func (a *stub) ListNotebookInstances(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	var output sagemaker.ListNotebookInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotebookInstancesAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) *SageMakerListNotebookInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListNotebookInstances", input)
	return &SageMakerListNotebookInstancesFuture{Future: future}
}

func (a *stub) ListProcessingJobs(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error) {
	var output sagemaker.ListProcessingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListProcessingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProcessingJobsAsync(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) *SageMakerListProcessingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListProcessingJobs", input)
	return &SageMakerListProcessingJobsFuture{Future: future}
}

func (a *stub) ListSubscribedWorkteams(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	var output sagemaker.ListSubscribedWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListSubscribedWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscribedWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) *SageMakerListSubscribedWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListSubscribedWorkteams", input)
	return &SageMakerListSubscribedWorkteamsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	var output sagemaker.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *sagemaker.ListTagsInput) *SageMakerListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTags", input)
	return &SageMakerListTagsFuture{Future: future}
}

func (a *stub) ListTrainingJobs(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	var output sagemaker.ListTrainingJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrainingJobsAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) *SageMakerListTrainingJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobs", input)
	return &SageMakerListTrainingJobsFuture{Future: future}
}

func (a *stub) ListTrainingJobsForHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	var output sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobsForHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrainingJobsForHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) *SageMakerListTrainingJobsForHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrainingJobsForHyperParameterTuningJob", input)
	return &SageMakerListTrainingJobsForHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) ListTransformJobs(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error) {
	var output sagemaker.ListTransformJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTransformJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTransformJobsAsync(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) *SageMakerListTransformJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTransformJobs", input)
	return &SageMakerListTransformJobsFuture{Future: future}
}

func (a *stub) ListTrialComponents(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error) {
	var output sagemaker.ListTrialComponentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrialComponents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrialComponentsAsync(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) *SageMakerListTrialComponentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrialComponents", input)
	return &SageMakerListTrialComponentsFuture{Future: future}
}

func (a *stub) ListTrials(ctx workflow.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error) {
	var output sagemaker.ListTrialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTrialsAsync(ctx workflow.Context, input *sagemaker.ListTrialsInput) *SageMakerListTrialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListTrials", input)
	return &SageMakerListTrialsFuture{Future: future}
}

func (a *stub) ListUserProfiles(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error) {
	var output sagemaker.ListUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserProfilesAsync(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) *SageMakerListUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListUserProfiles", input)
	return &SageMakerListUserProfilesFuture{Future: future}
}

func (a *stub) ListWorkforces(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error) {
	var output sagemaker.ListWorkforcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkforces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkforcesAsync(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) *SageMakerListWorkforcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkforces", input)
	return &SageMakerListWorkforcesFuture{Future: future}
}

func (a *stub) ListWorkteams(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error) {
	var output sagemaker.ListWorkteamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkteams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) *SageMakerListWorkteamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-ListWorkteams", input)
	return &SageMakerListWorkteamsFuture{Future: future}
}

func (a *stub) RenderUiTemplate(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error) {
	var output sagemaker.RenderUiTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-RenderUiTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenderUiTemplateAsync(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) *SageMakerRenderUiTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-RenderUiTemplate", input)
	return &SageMakerRenderUiTemplateFuture{Future: future}
}

func (a *stub) Search(ctx workflow.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error) {
	var output sagemaker.SearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-Search", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAsync(ctx workflow.Context, input *sagemaker.SearchInput) *SageMakerSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-Search", input)
	return &SageMakerSearchFuture{Future: future}
}

func (a *stub) StartMonitoringSchedule(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error) {
	var output sagemaker.StartMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) *SageMakerStartMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartMonitoringSchedule", input)
	return &SageMakerStartMonitoringScheduleFuture{Future: future}
}

func (a *stub) StartNotebookInstance(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	var output sagemaker.StartNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) *SageMakerStartNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StartNotebookInstance", input)
	return &SageMakerStartNotebookInstanceFuture{Future: future}
}

func (a *stub) StopAutoMLJob(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error) {
	var output sagemaker.StopAutoMLJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopAutoMLJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAutoMLJobAsync(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) *SageMakerStopAutoMLJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopAutoMLJob", input)
	return &SageMakerStopAutoMLJobFuture{Future: future}
}

func (a *stub) StopCompilationJob(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error) {
	var output sagemaker.StopCompilationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopCompilationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopCompilationJobAsync(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) *SageMakerStopCompilationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopCompilationJob", input)
	return &SageMakerStopCompilationJobFuture{Future: future}
}

func (a *stub) StopHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	var output sagemaker.StopHyperParameterTuningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopHyperParameterTuningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) *SageMakerStopHyperParameterTuningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopHyperParameterTuningJob", input)
	return &SageMakerStopHyperParameterTuningJobFuture{Future: future}
}

func (a *stub) StopLabelingJob(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error) {
	var output sagemaker.StopLabelingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopLabelingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopLabelingJobAsync(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) *SageMakerStopLabelingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopLabelingJob", input)
	return &SageMakerStopLabelingJobFuture{Future: future}
}

func (a *stub) StopMonitoringSchedule(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error) {
	var output sagemaker.StopMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) *SageMakerStopMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopMonitoringSchedule", input)
	return &SageMakerStopMonitoringScheduleFuture{Future: future}
}

func (a *stub) StopNotebookInstance(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	var output sagemaker.StopNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) *SageMakerStopNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopNotebookInstance", input)
	return &SageMakerStopNotebookInstanceFuture{Future: future}
}

func (a *stub) StopProcessingJob(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error) {
	var output sagemaker.StopProcessingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopProcessingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopProcessingJobAsync(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) *SageMakerStopProcessingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopProcessingJob", input)
	return &SageMakerStopProcessingJobFuture{Future: future}
}

func (a *stub) StopTrainingJob(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	var output sagemaker.StopTrainingJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTrainingJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingJobAsync(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) *SageMakerStopTrainingJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTrainingJob", input)
	return &SageMakerStopTrainingJobFuture{Future: future}
}

func (a *stub) StopTransformJob(ctx workflow.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error) {
	var output sagemaker.StopTransformJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTransformJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTransformJobAsync(ctx workflow.Context, input *sagemaker.StopTransformJobInput) *SageMakerStopTransformJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-StopTransformJob", input)
	return &SageMakerStopTransformJobFuture{Future: future}
}

func (a *stub) UpdateAppImageConfig(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) (*sagemaker.UpdateAppImageConfigOutput, error) {
	var output sagemaker.UpdateAppImageConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateAppImageConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) *SageMakerUpdateAppImageConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateAppImageConfig", input)
	return &SageMakerUpdateAppImageConfigFuture{Future: future}
}

func (a *stub) UpdateCodeRepository(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	var output sagemaker.UpdateCodeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateCodeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) *SageMakerUpdateCodeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateCodeRepository", input)
	return &SageMakerUpdateCodeRepositoryFuture{Future: future}
}

func (a *stub) UpdateDomain(ctx workflow.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error) {
	var output sagemaker.UpdateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainAsync(ctx workflow.Context, input *sagemaker.UpdateDomainInput) *SageMakerUpdateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateDomain", input)
	return &SageMakerUpdateDomainFuture{Future: future}
}

func (a *stub) UpdateEndpoint(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	var output sagemaker.UpdateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) *SageMakerUpdateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpoint", input)
	return &SageMakerUpdateEndpointFuture{Future: future}
}

func (a *stub) UpdateEndpointWeightsAndCapacities(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	var output sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpointWeightsAndCapacities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointWeightsAndCapacitiesAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) *SageMakerUpdateEndpointWeightsAndCapacitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateEndpointWeightsAndCapacities", input)
	return &SageMakerUpdateEndpointWeightsAndCapacitiesFuture{Future: future}
}

func (a *stub) UpdateExperiment(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error) {
	var output sagemaker.UpdateExperimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateExperiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateExperimentAsync(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) *SageMakerUpdateExperimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateExperiment", input)
	return &SageMakerUpdateExperimentFuture{Future: future}
}

func (a *stub) UpdateImage(ctx workflow.Context, input *sagemaker.UpdateImageInput) (*sagemaker.UpdateImageOutput, error) {
	var output sagemaker.UpdateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateImageAsync(ctx workflow.Context, input *sagemaker.UpdateImageInput) *SageMakerUpdateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateImage", input)
	return &SageMakerUpdateImageFuture{Future: future}
}

func (a *stub) UpdateMonitoringSchedule(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	var output sagemaker.UpdateMonitoringScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateMonitoringSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) *SageMakerUpdateMonitoringScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateMonitoringSchedule", input)
	return &SageMakerUpdateMonitoringScheduleFuture{Future: future}
}

func (a *stub) UpdateNotebookInstance(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	var output sagemaker.UpdateNotebookInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) *SageMakerUpdateNotebookInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstance", input)
	return &SageMakerUpdateNotebookInstanceFuture{Future: future}
}

func (a *stub) UpdateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	var output sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstanceLifecycleConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) *SageMakerUpdateNotebookInstanceLifecycleConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateNotebookInstanceLifecycleConfig", input)
	return &SageMakerUpdateNotebookInstanceLifecycleConfigFuture{Future: future}
}

func (a *stub) UpdateTrial(ctx workflow.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error) {
	var output sagemaker.UpdateTrialOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrial", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrialAsync(ctx workflow.Context, input *sagemaker.UpdateTrialInput) *SageMakerUpdateTrialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrial", input)
	return &SageMakerUpdateTrialFuture{Future: future}
}

func (a *stub) UpdateTrialComponent(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error) {
	var output sagemaker.UpdateTrialComponentOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrialComponent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrialComponentAsync(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) *SageMakerUpdateTrialComponentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateTrialComponent", input)
	return &SageMakerUpdateTrialComponentFuture{Future: future}
}

func (a *stub) UpdateUserProfile(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error) {
	var output sagemaker.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserProfileAsync(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) *SageMakerUpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateUserProfile", input)
	return &SageMakerUpdateUserProfileFuture{Future: future}
}

func (a *stub) UpdateWorkforce(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error) {
	var output sagemaker.UpdateWorkforceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkforce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkforceAsync(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) *SageMakerUpdateWorkforceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkforce", input)
	return &SageMakerUpdateWorkforceFuture{Future: future}
}

func (a *stub) UpdateWorkteam(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error) {
	var output sagemaker.UpdateWorkteamOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkteam", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkteamAsync(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) *SageMakerUpdateWorkteamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-UpdateWorkteam", input)
	return &SageMakerUpdateWorkteamFuture{Future: future}
}

func (a *stub) WaitUntilEndpointDeleted(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEndpointInService(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointInService", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEndpointInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilEndpointInService", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceDeleted(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceInService(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceInService", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceInService", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNotebookInstanceStopped(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNotebookInstanceStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilNotebookInstanceStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilProcessingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilProcessingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProcessingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilProcessingJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTrainingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTrainingJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTrainingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTrainingJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTransformJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTransformJobCompletedOrStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTransformJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemaker-WaitUntilTransformJobCompletedOrStopped", input)
	return clients.NewVoidFuture(future)
}
