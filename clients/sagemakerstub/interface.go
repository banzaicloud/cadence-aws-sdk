// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sagemakerstub

import (
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	AddAssociation(ctx workflow.Context, input *sagemaker.AddAssociationInput) (*sagemaker.AddAssociationOutput, error)
	AddAssociationAsync(ctx workflow.Context, input *sagemaker.AddAssociationInput) *AddAssociationFuture

	AddTags(ctx workflow.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *sagemaker.AddTagsInput) *AddTagsFuture

	AssociateTrialComponent(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error)
	AssociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.AssociateTrialComponentInput) *AssociateTrialComponentFuture

	CreateAction(ctx workflow.Context, input *sagemaker.CreateActionInput) (*sagemaker.CreateActionOutput, error)
	CreateActionAsync(ctx workflow.Context, input *sagemaker.CreateActionInput) *CreateActionFuture

	CreateAlgorithm(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error)
	CreateAlgorithmAsync(ctx workflow.Context, input *sagemaker.CreateAlgorithmInput) *CreateAlgorithmFuture

	CreateApp(ctx workflow.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error)
	CreateAppAsync(ctx workflow.Context, input *sagemaker.CreateAppInput) *CreateAppFuture

	CreateAppImageConfig(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) (*sagemaker.CreateAppImageConfigOutput, error)
	CreateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.CreateAppImageConfigInput) *CreateAppImageConfigFuture

	CreateArtifact(ctx workflow.Context, input *sagemaker.CreateArtifactInput) (*sagemaker.CreateArtifactOutput, error)
	CreateArtifactAsync(ctx workflow.Context, input *sagemaker.CreateArtifactInput) *CreateArtifactFuture

	CreateAutoMLJob(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error)
	CreateAutoMLJobAsync(ctx workflow.Context, input *sagemaker.CreateAutoMLJobInput) *CreateAutoMLJobFuture

	CreateCodeRepository(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error)
	CreateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.CreateCodeRepositoryInput) *CreateCodeRepositoryFuture

	CreateCompilationJob(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error)
	CreateCompilationJobAsync(ctx workflow.Context, input *sagemaker.CreateCompilationJobInput) *CreateCompilationJobFuture

	CreateContext(ctx workflow.Context, input *sagemaker.CreateContextInput) (*sagemaker.CreateContextOutput, error)
	CreateContextAsync(ctx workflow.Context, input *sagemaker.CreateContextInput) *CreateContextFuture

	CreateDataQualityJobDefinition(ctx workflow.Context, input *sagemaker.CreateDataQualityJobDefinitionInput) (*sagemaker.CreateDataQualityJobDefinitionOutput, error)
	CreateDataQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateDataQualityJobDefinitionInput) *CreateDataQualityJobDefinitionFuture

	CreateDeviceFleet(ctx workflow.Context, input *sagemaker.CreateDeviceFleetInput) (*sagemaker.CreateDeviceFleetOutput, error)
	CreateDeviceFleetAsync(ctx workflow.Context, input *sagemaker.CreateDeviceFleetInput) *CreateDeviceFleetFuture

	CreateDomain(ctx workflow.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error)
	CreateDomainAsync(ctx workflow.Context, input *sagemaker.CreateDomainInput) *CreateDomainFuture

	CreateEdgePackagingJob(ctx workflow.Context, input *sagemaker.CreateEdgePackagingJobInput) (*sagemaker.CreateEdgePackagingJobOutput, error)
	CreateEdgePackagingJobAsync(ctx workflow.Context, input *sagemaker.CreateEdgePackagingJobInput) *CreateEdgePackagingJobFuture

	CreateEndpoint(ctx workflow.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error)
	CreateEndpointAsync(ctx workflow.Context, input *sagemaker.CreateEndpointInput) *CreateEndpointFuture

	CreateEndpointConfig(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error)
	CreateEndpointConfigAsync(ctx workflow.Context, input *sagemaker.CreateEndpointConfigInput) *CreateEndpointConfigFuture

	CreateExperiment(ctx workflow.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error)
	CreateExperimentAsync(ctx workflow.Context, input *sagemaker.CreateExperimentInput) *CreateExperimentFuture

	CreateFeatureGroup(ctx workflow.Context, input *sagemaker.CreateFeatureGroupInput) (*sagemaker.CreateFeatureGroupOutput, error)
	CreateFeatureGroupAsync(ctx workflow.Context, input *sagemaker.CreateFeatureGroupInput) *CreateFeatureGroupFuture

	CreateFlowDefinition(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error)
	CreateFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateFlowDefinitionInput) *CreateFlowDefinitionFuture

	CreateHumanTaskUi(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error)
	CreateHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.CreateHumanTaskUiInput) *CreateHumanTaskUiFuture

	CreateHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error)
	CreateHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.CreateHyperParameterTuningJobInput) *CreateHyperParameterTuningJobFuture

	CreateImage(ctx workflow.Context, input *sagemaker.CreateImageInput) (*sagemaker.CreateImageOutput, error)
	CreateImageAsync(ctx workflow.Context, input *sagemaker.CreateImageInput) *CreateImageFuture

	CreateImageVersion(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) (*sagemaker.CreateImageVersionOutput, error)
	CreateImageVersionAsync(ctx workflow.Context, input *sagemaker.CreateImageVersionInput) *CreateImageVersionFuture

	CreateLabelingJob(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error)
	CreateLabelingJobAsync(ctx workflow.Context, input *sagemaker.CreateLabelingJobInput) *CreateLabelingJobFuture

	CreateModel(ctx workflow.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error)
	CreateModelAsync(ctx workflow.Context, input *sagemaker.CreateModelInput) *CreateModelFuture

	CreateModelBiasJobDefinition(ctx workflow.Context, input *sagemaker.CreateModelBiasJobDefinitionInput) (*sagemaker.CreateModelBiasJobDefinitionOutput, error)
	CreateModelBiasJobDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateModelBiasJobDefinitionInput) *CreateModelBiasJobDefinitionFuture

	CreateModelExplainabilityJobDefinition(ctx workflow.Context, input *sagemaker.CreateModelExplainabilityJobDefinitionInput) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error)
	CreateModelExplainabilityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateModelExplainabilityJobDefinitionInput) *CreateModelExplainabilityJobDefinitionFuture

	CreateModelPackage(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error)
	CreateModelPackageAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageInput) *CreateModelPackageFuture

	CreateModelPackageGroup(ctx workflow.Context, input *sagemaker.CreateModelPackageGroupInput) (*sagemaker.CreateModelPackageGroupOutput, error)
	CreateModelPackageGroupAsync(ctx workflow.Context, input *sagemaker.CreateModelPackageGroupInput) *CreateModelPackageGroupFuture

	CreateModelQualityJobDefinition(ctx workflow.Context, input *sagemaker.CreateModelQualityJobDefinitionInput) (*sagemaker.CreateModelQualityJobDefinitionOutput, error)
	CreateModelQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.CreateModelQualityJobDefinitionInput) *CreateModelQualityJobDefinitionFuture

	CreateMonitoringSchedule(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error)
	CreateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.CreateMonitoringScheduleInput) *CreateMonitoringScheduleFuture

	CreateNotebookInstance(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error)
	CreateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceInput) *CreateNotebookInstanceFuture

	CreateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error)
	CreateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) *CreateNotebookInstanceLifecycleConfigFuture

	CreatePipeline(ctx workflow.Context, input *sagemaker.CreatePipelineInput) (*sagemaker.CreatePipelineOutput, error)
	CreatePipelineAsync(ctx workflow.Context, input *sagemaker.CreatePipelineInput) *CreatePipelineFuture

	CreatePresignedDomainUrl(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error)
	CreatePresignedDomainUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedDomainUrlInput) *CreatePresignedDomainUrlFuture

	CreatePresignedNotebookInstanceUrl(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error)
	CreatePresignedNotebookInstanceUrlAsync(ctx workflow.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) *CreatePresignedNotebookInstanceUrlFuture

	CreateProcessingJob(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error)
	CreateProcessingJobAsync(ctx workflow.Context, input *sagemaker.CreateProcessingJobInput) *CreateProcessingJobFuture

	CreateProject(ctx workflow.Context, input *sagemaker.CreateProjectInput) (*sagemaker.CreateProjectOutput, error)
	CreateProjectAsync(ctx workflow.Context, input *sagemaker.CreateProjectInput) *CreateProjectFuture

	CreateTrainingJob(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error)
	CreateTrainingJobAsync(ctx workflow.Context, input *sagemaker.CreateTrainingJobInput) *CreateTrainingJobFuture

	CreateTransformJob(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error)
	CreateTransformJobAsync(ctx workflow.Context, input *sagemaker.CreateTransformJobInput) *CreateTransformJobFuture

	CreateTrial(ctx workflow.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error)
	CreateTrialAsync(ctx workflow.Context, input *sagemaker.CreateTrialInput) *CreateTrialFuture

	CreateTrialComponent(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error)
	CreateTrialComponentAsync(ctx workflow.Context, input *sagemaker.CreateTrialComponentInput) *CreateTrialComponentFuture

	CreateUserProfile(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error)
	CreateUserProfileAsync(ctx workflow.Context, input *sagemaker.CreateUserProfileInput) *CreateUserProfileFuture

	CreateWorkforce(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error)
	CreateWorkforceAsync(ctx workflow.Context, input *sagemaker.CreateWorkforceInput) *CreateWorkforceFuture

	CreateWorkteam(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error)
	CreateWorkteamAsync(ctx workflow.Context, input *sagemaker.CreateWorkteamInput) *CreateWorkteamFuture

	DeleteAction(ctx workflow.Context, input *sagemaker.DeleteActionInput) (*sagemaker.DeleteActionOutput, error)
	DeleteActionAsync(ctx workflow.Context, input *sagemaker.DeleteActionInput) *DeleteActionFuture

	DeleteAlgorithm(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error)
	DeleteAlgorithmAsync(ctx workflow.Context, input *sagemaker.DeleteAlgorithmInput) *DeleteAlgorithmFuture

	DeleteApp(ctx workflow.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error)
	DeleteAppAsync(ctx workflow.Context, input *sagemaker.DeleteAppInput) *DeleteAppFuture

	DeleteAppImageConfig(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) (*sagemaker.DeleteAppImageConfigOutput, error)
	DeleteAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DeleteAppImageConfigInput) *DeleteAppImageConfigFuture

	DeleteArtifact(ctx workflow.Context, input *sagemaker.DeleteArtifactInput) (*sagemaker.DeleteArtifactOutput, error)
	DeleteArtifactAsync(ctx workflow.Context, input *sagemaker.DeleteArtifactInput) *DeleteArtifactFuture

	DeleteAssociation(ctx workflow.Context, input *sagemaker.DeleteAssociationInput) (*sagemaker.DeleteAssociationOutput, error)
	DeleteAssociationAsync(ctx workflow.Context, input *sagemaker.DeleteAssociationInput) *DeleteAssociationFuture

	DeleteCodeRepository(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error)
	DeleteCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DeleteCodeRepositoryInput) *DeleteCodeRepositoryFuture

	DeleteContext(ctx workflow.Context, input *sagemaker.DeleteContextInput) (*sagemaker.DeleteContextOutput, error)
	DeleteContextAsync(ctx workflow.Context, input *sagemaker.DeleteContextInput) *DeleteContextFuture

	DeleteDataQualityJobDefinition(ctx workflow.Context, input *sagemaker.DeleteDataQualityJobDefinitionInput) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error)
	DeleteDataQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteDataQualityJobDefinitionInput) *DeleteDataQualityJobDefinitionFuture

	DeleteDeviceFleet(ctx workflow.Context, input *sagemaker.DeleteDeviceFleetInput) (*sagemaker.DeleteDeviceFleetOutput, error)
	DeleteDeviceFleetAsync(ctx workflow.Context, input *sagemaker.DeleteDeviceFleetInput) *DeleteDeviceFleetFuture

	DeleteDomain(ctx workflow.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error)
	DeleteDomainAsync(ctx workflow.Context, input *sagemaker.DeleteDomainInput) *DeleteDomainFuture

	DeleteEndpoint(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error)
	DeleteEndpointAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointInput) *DeleteEndpointFuture

	DeleteEndpointConfig(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error)
	DeleteEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DeleteEndpointConfigInput) *DeleteEndpointConfigFuture

	DeleteExperiment(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error)
	DeleteExperimentAsync(ctx workflow.Context, input *sagemaker.DeleteExperimentInput) *DeleteExperimentFuture

	DeleteFeatureGroup(ctx workflow.Context, input *sagemaker.DeleteFeatureGroupInput) (*sagemaker.DeleteFeatureGroupOutput, error)
	DeleteFeatureGroupAsync(ctx workflow.Context, input *sagemaker.DeleteFeatureGroupInput) *DeleteFeatureGroupFuture

	DeleteFlowDefinition(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error)
	DeleteFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteFlowDefinitionInput) *DeleteFlowDefinitionFuture

	DeleteHumanTaskUi(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error)
	DeleteHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DeleteHumanTaskUiInput) *DeleteHumanTaskUiFuture

	DeleteImage(ctx workflow.Context, input *sagemaker.DeleteImageInput) (*sagemaker.DeleteImageOutput, error)
	DeleteImageAsync(ctx workflow.Context, input *sagemaker.DeleteImageInput) *DeleteImageFuture

	DeleteImageVersion(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) (*sagemaker.DeleteImageVersionOutput, error)
	DeleteImageVersionAsync(ctx workflow.Context, input *sagemaker.DeleteImageVersionInput) *DeleteImageVersionFuture

	DeleteModel(ctx workflow.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *sagemaker.DeleteModelInput) *DeleteModelFuture

	DeleteModelBiasJobDefinition(ctx workflow.Context, input *sagemaker.DeleteModelBiasJobDefinitionInput) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error)
	DeleteModelBiasJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteModelBiasJobDefinitionInput) *DeleteModelBiasJobDefinitionFuture

	DeleteModelExplainabilityJobDefinition(ctx workflow.Context, input *sagemaker.DeleteModelExplainabilityJobDefinitionInput) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error)
	DeleteModelExplainabilityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteModelExplainabilityJobDefinitionInput) *DeleteModelExplainabilityJobDefinitionFuture

	DeleteModelPackage(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error)
	DeleteModelPackageAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageInput) *DeleteModelPackageFuture

	DeleteModelPackageGroup(ctx workflow.Context, input *sagemaker.DeleteModelPackageGroupInput) (*sagemaker.DeleteModelPackageGroupOutput, error)
	DeleteModelPackageGroupAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageGroupInput) *DeleteModelPackageGroupFuture

	DeleteModelPackageGroupPolicy(ctx workflow.Context, input *sagemaker.DeleteModelPackageGroupPolicyInput) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error)
	DeleteModelPackageGroupPolicyAsync(ctx workflow.Context, input *sagemaker.DeleteModelPackageGroupPolicyInput) *DeleteModelPackageGroupPolicyFuture

	DeleteModelQualityJobDefinition(ctx workflow.Context, input *sagemaker.DeleteModelQualityJobDefinitionInput) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error)
	DeleteModelQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DeleteModelQualityJobDefinitionInput) *DeleteModelQualityJobDefinitionFuture

	DeleteMonitoringSchedule(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error)
	DeleteMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DeleteMonitoringScheduleInput) *DeleteMonitoringScheduleFuture

	DeleteNotebookInstance(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error)
	DeleteNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceInput) *DeleteNotebookInstanceFuture

	DeleteNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error)
	DeleteNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) *DeleteNotebookInstanceLifecycleConfigFuture

	DeletePipeline(ctx workflow.Context, input *sagemaker.DeletePipelineInput) (*sagemaker.DeletePipelineOutput, error)
	DeletePipelineAsync(ctx workflow.Context, input *sagemaker.DeletePipelineInput) *DeletePipelineFuture

	DeleteProject(ctx workflow.Context, input *sagemaker.DeleteProjectInput) (*sagemaker.DeleteProjectOutput, error)
	DeleteProjectAsync(ctx workflow.Context, input *sagemaker.DeleteProjectInput) *DeleteProjectFuture

	DeleteTags(ctx workflow.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error)
	DeleteTagsAsync(ctx workflow.Context, input *sagemaker.DeleteTagsInput) *DeleteTagsFuture

	DeleteTrial(ctx workflow.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error)
	DeleteTrialAsync(ctx workflow.Context, input *sagemaker.DeleteTrialInput) *DeleteTrialFuture

	DeleteTrialComponent(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error)
	DeleteTrialComponentAsync(ctx workflow.Context, input *sagemaker.DeleteTrialComponentInput) *DeleteTrialComponentFuture

	DeleteUserProfile(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error)
	DeleteUserProfileAsync(ctx workflow.Context, input *sagemaker.DeleteUserProfileInput) *DeleteUserProfileFuture

	DeleteWorkforce(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error)
	DeleteWorkforceAsync(ctx workflow.Context, input *sagemaker.DeleteWorkforceInput) *DeleteWorkforceFuture

	DeleteWorkteam(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error)
	DeleteWorkteamAsync(ctx workflow.Context, input *sagemaker.DeleteWorkteamInput) *DeleteWorkteamFuture

	DeregisterDevices(ctx workflow.Context, input *sagemaker.DeregisterDevicesInput) (*sagemaker.DeregisterDevicesOutput, error)
	DeregisterDevicesAsync(ctx workflow.Context, input *sagemaker.DeregisterDevicesInput) *DeregisterDevicesFuture

	DescribeAction(ctx workflow.Context, input *sagemaker.DescribeActionInput) (*sagemaker.DescribeActionOutput, error)
	DescribeActionAsync(ctx workflow.Context, input *sagemaker.DescribeActionInput) *DescribeActionFuture

	DescribeAlgorithm(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error)
	DescribeAlgorithmAsync(ctx workflow.Context, input *sagemaker.DescribeAlgorithmInput) *DescribeAlgorithmFuture

	DescribeApp(ctx workflow.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error)
	DescribeAppAsync(ctx workflow.Context, input *sagemaker.DescribeAppInput) *DescribeAppFuture

	DescribeAppImageConfig(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) (*sagemaker.DescribeAppImageConfigOutput, error)
	DescribeAppImageConfigAsync(ctx workflow.Context, input *sagemaker.DescribeAppImageConfigInput) *DescribeAppImageConfigFuture

	DescribeArtifact(ctx workflow.Context, input *sagemaker.DescribeArtifactInput) (*sagemaker.DescribeArtifactOutput, error)
	DescribeArtifactAsync(ctx workflow.Context, input *sagemaker.DescribeArtifactInput) *DescribeArtifactFuture

	DescribeAutoMLJob(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error)
	DescribeAutoMLJobAsync(ctx workflow.Context, input *sagemaker.DescribeAutoMLJobInput) *DescribeAutoMLJobFuture

	DescribeCodeRepository(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error)
	DescribeCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.DescribeCodeRepositoryInput) *DescribeCodeRepositoryFuture

	DescribeCompilationJob(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error)
	DescribeCompilationJobAsync(ctx workflow.Context, input *sagemaker.DescribeCompilationJobInput) *DescribeCompilationJobFuture

	DescribeContext(ctx workflow.Context, input *sagemaker.DescribeContextInput) (*sagemaker.DescribeContextOutput, error)
	DescribeContextAsync(ctx workflow.Context, input *sagemaker.DescribeContextInput) *DescribeContextFuture

	DescribeDataQualityJobDefinition(ctx workflow.Context, input *sagemaker.DescribeDataQualityJobDefinitionInput) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error)
	DescribeDataQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeDataQualityJobDefinitionInput) *DescribeDataQualityJobDefinitionFuture

	DescribeDevice(ctx workflow.Context, input *sagemaker.DescribeDeviceInput) (*sagemaker.DescribeDeviceOutput, error)
	DescribeDeviceAsync(ctx workflow.Context, input *sagemaker.DescribeDeviceInput) *DescribeDeviceFuture

	DescribeDeviceFleet(ctx workflow.Context, input *sagemaker.DescribeDeviceFleetInput) (*sagemaker.DescribeDeviceFleetOutput, error)
	DescribeDeviceFleetAsync(ctx workflow.Context, input *sagemaker.DescribeDeviceFleetInput) *DescribeDeviceFleetFuture

	DescribeDomain(ctx workflow.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error)
	DescribeDomainAsync(ctx workflow.Context, input *sagemaker.DescribeDomainInput) *DescribeDomainFuture

	DescribeEdgePackagingJob(ctx workflow.Context, input *sagemaker.DescribeEdgePackagingJobInput) (*sagemaker.DescribeEdgePackagingJobOutput, error)
	DescribeEdgePackagingJobAsync(ctx workflow.Context, input *sagemaker.DescribeEdgePackagingJobInput) *DescribeEdgePackagingJobFuture

	DescribeEndpoint(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error)
	DescribeEndpointAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *DescribeEndpointFuture

	DescribeEndpointConfig(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error)
	DescribeEndpointConfigAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointConfigInput) *DescribeEndpointConfigFuture

	DescribeExperiment(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error)
	DescribeExperimentAsync(ctx workflow.Context, input *sagemaker.DescribeExperimentInput) *DescribeExperimentFuture

	DescribeFeatureGroup(ctx workflow.Context, input *sagemaker.DescribeFeatureGroupInput) (*sagemaker.DescribeFeatureGroupOutput, error)
	DescribeFeatureGroupAsync(ctx workflow.Context, input *sagemaker.DescribeFeatureGroupInput) *DescribeFeatureGroupFuture

	DescribeFlowDefinition(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error)
	DescribeFlowDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeFlowDefinitionInput) *DescribeFlowDefinitionFuture

	DescribeHumanTaskUi(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error)
	DescribeHumanTaskUiAsync(ctx workflow.Context, input *sagemaker.DescribeHumanTaskUiInput) *DescribeHumanTaskUiFuture

	DescribeHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error)
	DescribeHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) *DescribeHyperParameterTuningJobFuture

	DescribeImage(ctx workflow.Context, input *sagemaker.DescribeImageInput) (*sagemaker.DescribeImageOutput, error)
	DescribeImageAsync(ctx workflow.Context, input *sagemaker.DescribeImageInput) *DescribeImageFuture

	DescribeImageVersion(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) (*sagemaker.DescribeImageVersionOutput, error)
	DescribeImageVersionAsync(ctx workflow.Context, input *sagemaker.DescribeImageVersionInput) *DescribeImageVersionFuture

	DescribeLabelingJob(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error)
	DescribeLabelingJobAsync(ctx workflow.Context, input *sagemaker.DescribeLabelingJobInput) *DescribeLabelingJobFuture

	DescribeModel(ctx workflow.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error)
	DescribeModelAsync(ctx workflow.Context, input *sagemaker.DescribeModelInput) *DescribeModelFuture

	DescribeModelBiasJobDefinition(ctx workflow.Context, input *sagemaker.DescribeModelBiasJobDefinitionInput) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error)
	DescribeModelBiasJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeModelBiasJobDefinitionInput) *DescribeModelBiasJobDefinitionFuture

	DescribeModelExplainabilityJobDefinition(ctx workflow.Context, input *sagemaker.DescribeModelExplainabilityJobDefinitionInput) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error)
	DescribeModelExplainabilityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeModelExplainabilityJobDefinitionInput) *DescribeModelExplainabilityJobDefinitionFuture

	DescribeModelPackage(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error)
	DescribeModelPackageAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageInput) *DescribeModelPackageFuture

	DescribeModelPackageGroup(ctx workflow.Context, input *sagemaker.DescribeModelPackageGroupInput) (*sagemaker.DescribeModelPackageGroupOutput, error)
	DescribeModelPackageGroupAsync(ctx workflow.Context, input *sagemaker.DescribeModelPackageGroupInput) *DescribeModelPackageGroupFuture

	DescribeModelQualityJobDefinition(ctx workflow.Context, input *sagemaker.DescribeModelQualityJobDefinitionInput) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error)
	DescribeModelQualityJobDefinitionAsync(ctx workflow.Context, input *sagemaker.DescribeModelQualityJobDefinitionInput) *DescribeModelQualityJobDefinitionFuture

	DescribeMonitoringSchedule(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error)
	DescribeMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.DescribeMonitoringScheduleInput) *DescribeMonitoringScheduleFuture

	DescribeNotebookInstance(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error)
	DescribeNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *DescribeNotebookInstanceFuture

	DescribeNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error)
	DescribeNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) *DescribeNotebookInstanceLifecycleConfigFuture

	DescribePipeline(ctx workflow.Context, input *sagemaker.DescribePipelineInput) (*sagemaker.DescribePipelineOutput, error)
	DescribePipelineAsync(ctx workflow.Context, input *sagemaker.DescribePipelineInput) *DescribePipelineFuture

	DescribePipelineDefinitionForExecution(ctx workflow.Context, input *sagemaker.DescribePipelineDefinitionForExecutionInput) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error)
	DescribePipelineDefinitionForExecutionAsync(ctx workflow.Context, input *sagemaker.DescribePipelineDefinitionForExecutionInput) *DescribePipelineDefinitionForExecutionFuture

	DescribePipelineExecution(ctx workflow.Context, input *sagemaker.DescribePipelineExecutionInput) (*sagemaker.DescribePipelineExecutionOutput, error)
	DescribePipelineExecutionAsync(ctx workflow.Context, input *sagemaker.DescribePipelineExecutionInput) *DescribePipelineExecutionFuture

	DescribeProcessingJob(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error)
	DescribeProcessingJobAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *DescribeProcessingJobFuture

	DescribeProject(ctx workflow.Context, input *sagemaker.DescribeProjectInput) (*sagemaker.DescribeProjectOutput, error)
	DescribeProjectAsync(ctx workflow.Context, input *sagemaker.DescribeProjectInput) *DescribeProjectFuture

	DescribeSubscribedWorkteam(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error)
	DescribeSubscribedWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeSubscribedWorkteamInput) *DescribeSubscribedWorkteamFuture

	DescribeTrainingJob(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error)
	DescribeTrainingJobAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *DescribeTrainingJobFuture

	DescribeTransformJob(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error)
	DescribeTransformJobAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *DescribeTransformJobFuture

	DescribeTrial(ctx workflow.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error)
	DescribeTrialAsync(ctx workflow.Context, input *sagemaker.DescribeTrialInput) *DescribeTrialFuture

	DescribeTrialComponent(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error)
	DescribeTrialComponentAsync(ctx workflow.Context, input *sagemaker.DescribeTrialComponentInput) *DescribeTrialComponentFuture

	DescribeUserProfile(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error)
	DescribeUserProfileAsync(ctx workflow.Context, input *sagemaker.DescribeUserProfileInput) *DescribeUserProfileFuture

	DescribeWorkforce(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error)
	DescribeWorkforceAsync(ctx workflow.Context, input *sagemaker.DescribeWorkforceInput) *DescribeWorkforceFuture

	DescribeWorkteam(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error)
	DescribeWorkteamAsync(ctx workflow.Context, input *sagemaker.DescribeWorkteamInput) *DescribeWorkteamFuture

	DisableSagemakerServicecatalogPortfolio(ctx workflow.Context, input *sagemaker.DisableSagemakerServicecatalogPortfolioInput) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error)
	DisableSagemakerServicecatalogPortfolioAsync(ctx workflow.Context, input *sagemaker.DisableSagemakerServicecatalogPortfolioInput) *DisableSagemakerServicecatalogPortfolioFuture

	DisassociateTrialComponent(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error)
	DisassociateTrialComponentAsync(ctx workflow.Context, input *sagemaker.DisassociateTrialComponentInput) *DisassociateTrialComponentFuture

	EnableSagemakerServicecatalogPortfolio(ctx workflow.Context, input *sagemaker.EnableSagemakerServicecatalogPortfolioInput) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error)
	EnableSagemakerServicecatalogPortfolioAsync(ctx workflow.Context, input *sagemaker.EnableSagemakerServicecatalogPortfolioInput) *EnableSagemakerServicecatalogPortfolioFuture

	GetDeviceFleetReport(ctx workflow.Context, input *sagemaker.GetDeviceFleetReportInput) (*sagemaker.GetDeviceFleetReportOutput, error)
	GetDeviceFleetReportAsync(ctx workflow.Context, input *sagemaker.GetDeviceFleetReportInput) *GetDeviceFleetReportFuture

	GetModelPackageGroupPolicy(ctx workflow.Context, input *sagemaker.GetModelPackageGroupPolicyInput) (*sagemaker.GetModelPackageGroupPolicyOutput, error)
	GetModelPackageGroupPolicyAsync(ctx workflow.Context, input *sagemaker.GetModelPackageGroupPolicyInput) *GetModelPackageGroupPolicyFuture

	GetSagemakerServicecatalogPortfolioStatus(ctx workflow.Context, input *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error)
	GetSagemakerServicecatalogPortfolioStatusAsync(ctx workflow.Context, input *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput) *GetSagemakerServicecatalogPortfolioStatusFuture

	GetSearchSuggestions(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error)
	GetSearchSuggestionsAsync(ctx workflow.Context, input *sagemaker.GetSearchSuggestionsInput) *GetSearchSuggestionsFuture

	ListActions(ctx workflow.Context, input *sagemaker.ListActionsInput) (*sagemaker.ListActionsOutput, error)
	ListActionsAsync(ctx workflow.Context, input *sagemaker.ListActionsInput) *ListActionsFuture

	ListAlgorithms(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error)
	ListAlgorithmsAsync(ctx workflow.Context, input *sagemaker.ListAlgorithmsInput) *ListAlgorithmsFuture

	ListAppImageConfigs(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) (*sagemaker.ListAppImageConfigsOutput, error)
	ListAppImageConfigsAsync(ctx workflow.Context, input *sagemaker.ListAppImageConfigsInput) *ListAppImageConfigsFuture

	ListApps(ctx workflow.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error)
	ListAppsAsync(ctx workflow.Context, input *sagemaker.ListAppsInput) *ListAppsFuture

	ListArtifacts(ctx workflow.Context, input *sagemaker.ListArtifactsInput) (*sagemaker.ListArtifactsOutput, error)
	ListArtifactsAsync(ctx workflow.Context, input *sagemaker.ListArtifactsInput) *ListArtifactsFuture

	ListAssociations(ctx workflow.Context, input *sagemaker.ListAssociationsInput) (*sagemaker.ListAssociationsOutput, error)
	ListAssociationsAsync(ctx workflow.Context, input *sagemaker.ListAssociationsInput) *ListAssociationsFuture

	ListAutoMLJobs(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error)
	ListAutoMLJobsAsync(ctx workflow.Context, input *sagemaker.ListAutoMLJobsInput) *ListAutoMLJobsFuture

	ListCandidatesForAutoMLJob(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error)
	ListCandidatesForAutoMLJobAsync(ctx workflow.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) *ListCandidatesForAutoMLJobFuture

	ListCodeRepositories(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error)
	ListCodeRepositoriesAsync(ctx workflow.Context, input *sagemaker.ListCodeRepositoriesInput) *ListCodeRepositoriesFuture

	ListCompilationJobs(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error)
	ListCompilationJobsAsync(ctx workflow.Context, input *sagemaker.ListCompilationJobsInput) *ListCompilationJobsFuture

	ListContexts(ctx workflow.Context, input *sagemaker.ListContextsInput) (*sagemaker.ListContextsOutput, error)
	ListContextsAsync(ctx workflow.Context, input *sagemaker.ListContextsInput) *ListContextsFuture

	ListDataQualityJobDefinitions(ctx workflow.Context, input *sagemaker.ListDataQualityJobDefinitionsInput) (*sagemaker.ListDataQualityJobDefinitionsOutput, error)
	ListDataQualityJobDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListDataQualityJobDefinitionsInput) *ListDataQualityJobDefinitionsFuture

	ListDeviceFleets(ctx workflow.Context, input *sagemaker.ListDeviceFleetsInput) (*sagemaker.ListDeviceFleetsOutput, error)
	ListDeviceFleetsAsync(ctx workflow.Context, input *sagemaker.ListDeviceFleetsInput) *ListDeviceFleetsFuture

	ListDevices(ctx workflow.Context, input *sagemaker.ListDevicesInput) (*sagemaker.ListDevicesOutput, error)
	ListDevicesAsync(ctx workflow.Context, input *sagemaker.ListDevicesInput) *ListDevicesFuture

	ListDomains(ctx workflow.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error)
	ListDomainsAsync(ctx workflow.Context, input *sagemaker.ListDomainsInput) *ListDomainsFuture

	ListEdgePackagingJobs(ctx workflow.Context, input *sagemaker.ListEdgePackagingJobsInput) (*sagemaker.ListEdgePackagingJobsOutput, error)
	ListEdgePackagingJobsAsync(ctx workflow.Context, input *sagemaker.ListEdgePackagingJobsInput) *ListEdgePackagingJobsFuture

	ListEndpointConfigs(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error)
	ListEndpointConfigsAsync(ctx workflow.Context, input *sagemaker.ListEndpointConfigsInput) *ListEndpointConfigsFuture

	ListEndpoints(ctx workflow.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error)
	ListEndpointsAsync(ctx workflow.Context, input *sagemaker.ListEndpointsInput) *ListEndpointsFuture

	ListExperiments(ctx workflow.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error)
	ListExperimentsAsync(ctx workflow.Context, input *sagemaker.ListExperimentsInput) *ListExperimentsFuture

	ListFeatureGroups(ctx workflow.Context, input *sagemaker.ListFeatureGroupsInput) (*sagemaker.ListFeatureGroupsOutput, error)
	ListFeatureGroupsAsync(ctx workflow.Context, input *sagemaker.ListFeatureGroupsInput) *ListFeatureGroupsFuture

	ListFlowDefinitions(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error)
	ListFlowDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListFlowDefinitionsInput) *ListFlowDefinitionsFuture

	ListHumanTaskUis(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error)
	ListHumanTaskUisAsync(ctx workflow.Context, input *sagemaker.ListHumanTaskUisInput) *ListHumanTaskUisFuture

	ListHyperParameterTuningJobs(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error)
	ListHyperParameterTuningJobsAsync(ctx workflow.Context, input *sagemaker.ListHyperParameterTuningJobsInput) *ListHyperParameterTuningJobsFuture

	ListImageVersions(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) (*sagemaker.ListImageVersionsOutput, error)
	ListImageVersionsAsync(ctx workflow.Context, input *sagemaker.ListImageVersionsInput) *ListImageVersionsFuture

	ListImages(ctx workflow.Context, input *sagemaker.ListImagesInput) (*sagemaker.ListImagesOutput, error)
	ListImagesAsync(ctx workflow.Context, input *sagemaker.ListImagesInput) *ListImagesFuture

	ListLabelingJobs(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error)
	ListLabelingJobsAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsInput) *ListLabelingJobsFuture

	ListLabelingJobsForWorkteam(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error)
	ListLabelingJobsForWorkteamAsync(ctx workflow.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) *ListLabelingJobsForWorkteamFuture

	ListModelBiasJobDefinitions(ctx workflow.Context, input *sagemaker.ListModelBiasJobDefinitionsInput) (*sagemaker.ListModelBiasJobDefinitionsOutput, error)
	ListModelBiasJobDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListModelBiasJobDefinitionsInput) *ListModelBiasJobDefinitionsFuture

	ListModelExplainabilityJobDefinitions(ctx workflow.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error)
	ListModelExplainabilityJobDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput) *ListModelExplainabilityJobDefinitionsFuture

	ListModelPackageGroups(ctx workflow.Context, input *sagemaker.ListModelPackageGroupsInput) (*sagemaker.ListModelPackageGroupsOutput, error)
	ListModelPackageGroupsAsync(ctx workflow.Context, input *sagemaker.ListModelPackageGroupsInput) *ListModelPackageGroupsFuture

	ListModelPackages(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error)
	ListModelPackagesAsync(ctx workflow.Context, input *sagemaker.ListModelPackagesInput) *ListModelPackagesFuture

	ListModelQualityJobDefinitions(ctx workflow.Context, input *sagemaker.ListModelQualityJobDefinitionsInput) (*sagemaker.ListModelQualityJobDefinitionsOutput, error)
	ListModelQualityJobDefinitionsAsync(ctx workflow.Context, input *sagemaker.ListModelQualityJobDefinitionsInput) *ListModelQualityJobDefinitionsFuture

	ListModels(ctx workflow.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error)
	ListModelsAsync(ctx workflow.Context, input *sagemaker.ListModelsInput) *ListModelsFuture

	ListMonitoringExecutions(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error)
	ListMonitoringExecutionsAsync(ctx workflow.Context, input *sagemaker.ListMonitoringExecutionsInput) *ListMonitoringExecutionsFuture

	ListMonitoringSchedules(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error)
	ListMonitoringSchedulesAsync(ctx workflow.Context, input *sagemaker.ListMonitoringSchedulesInput) *ListMonitoringSchedulesFuture

	ListNotebookInstanceLifecycleConfigs(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error)
	ListNotebookInstanceLifecycleConfigsAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) *ListNotebookInstanceLifecycleConfigsFuture

	ListNotebookInstances(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error)
	ListNotebookInstancesAsync(ctx workflow.Context, input *sagemaker.ListNotebookInstancesInput) *ListNotebookInstancesFuture

	ListPipelineExecutionSteps(ctx workflow.Context, input *sagemaker.ListPipelineExecutionStepsInput) (*sagemaker.ListPipelineExecutionStepsOutput, error)
	ListPipelineExecutionStepsAsync(ctx workflow.Context, input *sagemaker.ListPipelineExecutionStepsInput) *ListPipelineExecutionStepsFuture

	ListPipelineExecutions(ctx workflow.Context, input *sagemaker.ListPipelineExecutionsInput) (*sagemaker.ListPipelineExecutionsOutput, error)
	ListPipelineExecutionsAsync(ctx workflow.Context, input *sagemaker.ListPipelineExecutionsInput) *ListPipelineExecutionsFuture

	ListPipelineParametersForExecution(ctx workflow.Context, input *sagemaker.ListPipelineParametersForExecutionInput) (*sagemaker.ListPipelineParametersForExecutionOutput, error)
	ListPipelineParametersForExecutionAsync(ctx workflow.Context, input *sagemaker.ListPipelineParametersForExecutionInput) *ListPipelineParametersForExecutionFuture

	ListPipelines(ctx workflow.Context, input *sagemaker.ListPipelinesInput) (*sagemaker.ListPipelinesOutput, error)
	ListPipelinesAsync(ctx workflow.Context, input *sagemaker.ListPipelinesInput) *ListPipelinesFuture

	ListProcessingJobs(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error)
	ListProcessingJobsAsync(ctx workflow.Context, input *sagemaker.ListProcessingJobsInput) *ListProcessingJobsFuture

	ListProjects(ctx workflow.Context, input *sagemaker.ListProjectsInput) (*sagemaker.ListProjectsOutput, error)
	ListProjectsAsync(ctx workflow.Context, input *sagemaker.ListProjectsInput) *ListProjectsFuture

	ListSubscribedWorkteams(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error)
	ListSubscribedWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListSubscribedWorkteamsInput) *ListSubscribedWorkteamsFuture

	ListTags(ctx workflow.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *sagemaker.ListTagsInput) *ListTagsFuture

	ListTrainingJobs(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error)
	ListTrainingJobsAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsInput) *ListTrainingJobsFuture

	ListTrainingJobsForHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error)
	ListTrainingJobsForHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) *ListTrainingJobsForHyperParameterTuningJobFuture

	ListTransformJobs(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error)
	ListTransformJobsAsync(ctx workflow.Context, input *sagemaker.ListTransformJobsInput) *ListTransformJobsFuture

	ListTrialComponents(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error)
	ListTrialComponentsAsync(ctx workflow.Context, input *sagemaker.ListTrialComponentsInput) *ListTrialComponentsFuture

	ListTrials(ctx workflow.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error)
	ListTrialsAsync(ctx workflow.Context, input *sagemaker.ListTrialsInput) *ListTrialsFuture

	ListUserProfiles(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error)
	ListUserProfilesAsync(ctx workflow.Context, input *sagemaker.ListUserProfilesInput) *ListUserProfilesFuture

	ListWorkforces(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error)
	ListWorkforcesAsync(ctx workflow.Context, input *sagemaker.ListWorkforcesInput) *ListWorkforcesFuture

	ListWorkteams(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error)
	ListWorkteamsAsync(ctx workflow.Context, input *sagemaker.ListWorkteamsInput) *ListWorkteamsFuture

	PutModelPackageGroupPolicy(ctx workflow.Context, input *sagemaker.PutModelPackageGroupPolicyInput) (*sagemaker.PutModelPackageGroupPolicyOutput, error)
	PutModelPackageGroupPolicyAsync(ctx workflow.Context, input *sagemaker.PutModelPackageGroupPolicyInput) *PutModelPackageGroupPolicyFuture

	RegisterDevices(ctx workflow.Context, input *sagemaker.RegisterDevicesInput) (*sagemaker.RegisterDevicesOutput, error)
	RegisterDevicesAsync(ctx workflow.Context, input *sagemaker.RegisterDevicesInput) *RegisterDevicesFuture

	RenderUiTemplate(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error)
	RenderUiTemplateAsync(ctx workflow.Context, input *sagemaker.RenderUiTemplateInput) *RenderUiTemplateFuture

	Search(ctx workflow.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error)
	SearchAsync(ctx workflow.Context, input *sagemaker.SearchInput) *SearchFuture

	StartMonitoringSchedule(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error)
	StartMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StartMonitoringScheduleInput) *StartMonitoringScheduleFuture

	StartNotebookInstance(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error)
	StartNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StartNotebookInstanceInput) *StartNotebookInstanceFuture

	StartPipelineExecution(ctx workflow.Context, input *sagemaker.StartPipelineExecutionInput) (*sagemaker.StartPipelineExecutionOutput, error)
	StartPipelineExecutionAsync(ctx workflow.Context, input *sagemaker.StartPipelineExecutionInput) *StartPipelineExecutionFuture

	StopAutoMLJob(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error)
	StopAutoMLJobAsync(ctx workflow.Context, input *sagemaker.StopAutoMLJobInput) *StopAutoMLJobFuture

	StopCompilationJob(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error)
	StopCompilationJobAsync(ctx workflow.Context, input *sagemaker.StopCompilationJobInput) *StopCompilationJobFuture

	StopEdgePackagingJob(ctx workflow.Context, input *sagemaker.StopEdgePackagingJobInput) (*sagemaker.StopEdgePackagingJobOutput, error)
	StopEdgePackagingJobAsync(ctx workflow.Context, input *sagemaker.StopEdgePackagingJobInput) *StopEdgePackagingJobFuture

	StopHyperParameterTuningJob(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error)
	StopHyperParameterTuningJobAsync(ctx workflow.Context, input *sagemaker.StopHyperParameterTuningJobInput) *StopHyperParameterTuningJobFuture

	StopLabelingJob(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error)
	StopLabelingJobAsync(ctx workflow.Context, input *sagemaker.StopLabelingJobInput) *StopLabelingJobFuture

	StopMonitoringSchedule(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error)
	StopMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.StopMonitoringScheduleInput) *StopMonitoringScheduleFuture

	StopNotebookInstance(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error)
	StopNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.StopNotebookInstanceInput) *StopNotebookInstanceFuture

	StopPipelineExecution(ctx workflow.Context, input *sagemaker.StopPipelineExecutionInput) (*sagemaker.StopPipelineExecutionOutput, error)
	StopPipelineExecutionAsync(ctx workflow.Context, input *sagemaker.StopPipelineExecutionInput) *StopPipelineExecutionFuture

	StopProcessingJob(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error)
	StopProcessingJobAsync(ctx workflow.Context, input *sagemaker.StopProcessingJobInput) *StopProcessingJobFuture

	StopTrainingJob(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error)
	StopTrainingJobAsync(ctx workflow.Context, input *sagemaker.StopTrainingJobInput) *StopTrainingJobFuture

	StopTransformJob(ctx workflow.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error)
	StopTransformJobAsync(ctx workflow.Context, input *sagemaker.StopTransformJobInput) *StopTransformJobFuture

	UpdateAction(ctx workflow.Context, input *sagemaker.UpdateActionInput) (*sagemaker.UpdateActionOutput, error)
	UpdateActionAsync(ctx workflow.Context, input *sagemaker.UpdateActionInput) *UpdateActionFuture

	UpdateAppImageConfig(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) (*sagemaker.UpdateAppImageConfigOutput, error)
	UpdateAppImageConfigAsync(ctx workflow.Context, input *sagemaker.UpdateAppImageConfigInput) *UpdateAppImageConfigFuture

	UpdateArtifact(ctx workflow.Context, input *sagemaker.UpdateArtifactInput) (*sagemaker.UpdateArtifactOutput, error)
	UpdateArtifactAsync(ctx workflow.Context, input *sagemaker.UpdateArtifactInput) *UpdateArtifactFuture

	UpdateCodeRepository(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error)
	UpdateCodeRepositoryAsync(ctx workflow.Context, input *sagemaker.UpdateCodeRepositoryInput) *UpdateCodeRepositoryFuture

	UpdateContext(ctx workflow.Context, input *sagemaker.UpdateContextInput) (*sagemaker.UpdateContextOutput, error)
	UpdateContextAsync(ctx workflow.Context, input *sagemaker.UpdateContextInput) *UpdateContextFuture

	UpdateDeviceFleet(ctx workflow.Context, input *sagemaker.UpdateDeviceFleetInput) (*sagemaker.UpdateDeviceFleetOutput, error)
	UpdateDeviceFleetAsync(ctx workflow.Context, input *sagemaker.UpdateDeviceFleetInput) *UpdateDeviceFleetFuture

	UpdateDevices(ctx workflow.Context, input *sagemaker.UpdateDevicesInput) (*sagemaker.UpdateDevicesOutput, error)
	UpdateDevicesAsync(ctx workflow.Context, input *sagemaker.UpdateDevicesInput) *UpdateDevicesFuture

	UpdateDomain(ctx workflow.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error)
	UpdateDomainAsync(ctx workflow.Context, input *sagemaker.UpdateDomainInput) *UpdateDomainFuture

	UpdateEndpoint(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error)
	UpdateEndpointAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointInput) *UpdateEndpointFuture

	UpdateEndpointWeightsAndCapacities(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error)
	UpdateEndpointWeightsAndCapacitiesAsync(ctx workflow.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) *UpdateEndpointWeightsAndCapacitiesFuture

	UpdateExperiment(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error)
	UpdateExperimentAsync(ctx workflow.Context, input *sagemaker.UpdateExperimentInput) *UpdateExperimentFuture

	UpdateImage(ctx workflow.Context, input *sagemaker.UpdateImageInput) (*sagemaker.UpdateImageOutput, error)
	UpdateImageAsync(ctx workflow.Context, input *sagemaker.UpdateImageInput) *UpdateImageFuture

	UpdateModelPackage(ctx workflow.Context, input *sagemaker.UpdateModelPackageInput) (*sagemaker.UpdateModelPackageOutput, error)
	UpdateModelPackageAsync(ctx workflow.Context, input *sagemaker.UpdateModelPackageInput) *UpdateModelPackageFuture

	UpdateMonitoringSchedule(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error)
	UpdateMonitoringScheduleAsync(ctx workflow.Context, input *sagemaker.UpdateMonitoringScheduleInput) *UpdateMonitoringScheduleFuture

	UpdateNotebookInstance(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error)
	UpdateNotebookInstanceAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceInput) *UpdateNotebookInstanceFuture

	UpdateNotebookInstanceLifecycleConfig(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error)
	UpdateNotebookInstanceLifecycleConfigAsync(ctx workflow.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) *UpdateNotebookInstanceLifecycleConfigFuture

	UpdatePipeline(ctx workflow.Context, input *sagemaker.UpdatePipelineInput) (*sagemaker.UpdatePipelineOutput, error)
	UpdatePipelineAsync(ctx workflow.Context, input *sagemaker.UpdatePipelineInput) *UpdatePipelineFuture

	UpdatePipelineExecution(ctx workflow.Context, input *sagemaker.UpdatePipelineExecutionInput) (*sagemaker.UpdatePipelineExecutionOutput, error)
	UpdatePipelineExecutionAsync(ctx workflow.Context, input *sagemaker.UpdatePipelineExecutionInput) *UpdatePipelineExecutionFuture

	UpdateTrainingJob(ctx workflow.Context, input *sagemaker.UpdateTrainingJobInput) (*sagemaker.UpdateTrainingJobOutput, error)
	UpdateTrainingJobAsync(ctx workflow.Context, input *sagemaker.UpdateTrainingJobInput) *UpdateTrainingJobFuture

	UpdateTrial(ctx workflow.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error)
	UpdateTrialAsync(ctx workflow.Context, input *sagemaker.UpdateTrialInput) *UpdateTrialFuture

	UpdateTrialComponent(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error)
	UpdateTrialComponentAsync(ctx workflow.Context, input *sagemaker.UpdateTrialComponentInput) *UpdateTrialComponentFuture

	UpdateUserProfile(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error)
	UpdateUserProfileAsync(ctx workflow.Context, input *sagemaker.UpdateUserProfileInput) *UpdateUserProfileFuture

	UpdateWorkforce(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error)
	UpdateWorkforceAsync(ctx workflow.Context, input *sagemaker.UpdateWorkforceInput) *UpdateWorkforceFuture

	UpdateWorkteam(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error)
	UpdateWorkteamAsync(ctx workflow.Context, input *sagemaker.UpdateWorkteamInput) *UpdateWorkteamFuture

	WaitUntilEndpointDeleted(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error
	WaitUntilEndpointDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture

	WaitUntilEndpointInService(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) error
	WaitUntilEndpointInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeEndpointInput) *clients.VoidFuture

	WaitUntilNotebookInstanceDeleted(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceDeletedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture

	WaitUntilNotebookInstanceInService(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceInServiceAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture

	WaitUntilNotebookInstanceStopped(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) error
	WaitUntilNotebookInstanceStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeNotebookInstanceInput) *clients.VoidFuture

	WaitUntilProcessingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) error
	WaitUntilProcessingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeProcessingJobInput) *clients.VoidFuture

	WaitUntilTrainingJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) error
	WaitUntilTrainingJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTrainingJobInput) *clients.VoidFuture

	WaitUntilTransformJobCompletedOrStopped(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) error
	WaitUntilTransformJobCompletedOrStoppedAsync(ctx workflow.Context, input *sagemaker.DescribeTransformJobInput) *clients.VoidFuture
}

func NewClient() Client {
	return &stub{}
}
