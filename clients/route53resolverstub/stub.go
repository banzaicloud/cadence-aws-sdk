// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package route53resolverstub

import (
	"github.com/aws/aws-sdk-go/service/route53resolver"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type Route53ResolverAssociateResolverEndpointIpAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverAssociateResolverEndpointIpAddressFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.AssociateResolverEndpointIpAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverAssociateResolverQueryLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverAssociateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.AssociateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverAssociateResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverAssociateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.AssociateResolverRuleOutput, error) {
	var output route53resolver.AssociateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverCreateResolverEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverCreateResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverEndpointOutput, error) {
	var output route53resolver.CreateResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverCreateResolverQueryLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverCreateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	var output route53resolver.CreateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverCreateResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverCreateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.CreateResolverRuleOutput, error) {
	var output route53resolver.CreateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDeleteResolverEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDeleteResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverEndpointOutput, error) {
	var output route53resolver.DeleteResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDeleteResolverQueryLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDeleteResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	var output route53resolver.DeleteResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDeleteResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDeleteResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.DeleteResolverRuleOutput, error) {
	var output route53resolver.DeleteResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDisassociateResolverEndpointIpAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDisassociateResolverEndpointIpAddressFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.DisassociateResolverEndpointIpAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDisassociateResolverQueryLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDisassociateResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.DisassociateResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverDisassociateResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverDisassociateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.DisassociateResolverRuleOutput, error) {
	var output route53resolver.DisassociateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverEndpointOutput, error) {
	var output route53resolver.GetResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverQueryLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverQueryLogConfigFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverQueryLogConfigAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverQueryLogConfigAssociationFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverQueryLogConfigPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverQueryLogConfigPolicyFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRuleOutput, error) {
	var output route53resolver.GetResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverRuleAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverRuleAssociationFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	var output route53resolver.GetResolverRuleAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverGetResolverRulePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverGetResolverRulePolicyFuture) Get(ctx workflow.Context) (*route53resolver.GetResolverRulePolicyOutput, error) {
	var output route53resolver.GetResolverRulePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverEndpointIpAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverEndpointIpAddressesFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	var output route53resolver.ListResolverEndpointIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverEndpointsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverEndpointsOutput, error) {
	var output route53resolver.ListResolverEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverQueryLogConfigAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverQueryLogConfigAssociationsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverQueryLogConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverQueryLogConfigsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverRuleAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverRuleAssociationsFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	var output route53resolver.ListResolverRuleAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListResolverRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListResolverRulesFuture) Get(ctx workflow.Context) (*route53resolver.ListResolverRulesOutput, error) {
	var output route53resolver.ListResolverRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverListTagsForResourceFuture) Get(ctx workflow.Context) (*route53resolver.ListTagsForResourceOutput, error) {
	var output route53resolver.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverPutResolverQueryLogConfigPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverPutResolverQueryLogConfigPolicyFuture) Get(ctx workflow.Context) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.PutResolverQueryLogConfigPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverPutResolverRulePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverPutResolverRulePolicyFuture) Get(ctx workflow.Context) (*route53resolver.PutResolverRulePolicyOutput, error) {
	var output route53resolver.PutResolverRulePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverTagResourceFuture) Get(ctx workflow.Context) (*route53resolver.TagResourceOutput, error) {
	var output route53resolver.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverUntagResourceFuture) Get(ctx workflow.Context) (*route53resolver.UntagResourceOutput, error) {
	var output route53resolver.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverUpdateResolverEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverUpdateResolverEndpointFuture) Get(ctx workflow.Context) (*route53resolver.UpdateResolverEndpointOutput, error) {
	var output route53resolver.UpdateResolverEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type Route53ResolverUpdateResolverRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *Route53ResolverUpdateResolverRuleFuture) Get(ctx workflow.Context) (*route53resolver.UpdateResolverRuleOutput, error) {
	var output route53resolver.UpdateResolverRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.AssociateResolverEndpointIpAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverEndpointIpAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.AssociateResolverEndpointIpAddressInput) *Route53ResolverAssociateResolverEndpointIpAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverEndpointIpAddress", input)
	return &Route53ResolverAssociateResolverEndpointIpAddressFuture{Future: future}
}

func (a *stub) AssociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.AssociateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.AssociateResolverQueryLogConfigInput) *Route53ResolverAssociateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverQueryLogConfig", input)
	return &Route53ResolverAssociateResolverQueryLogConfigFuture{Future: future}
}

func (a *stub) AssociateResolverRule(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) (*route53resolver.AssociateResolverRuleOutput, error) {
	var output route53resolver.AssociateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.AssociateResolverRuleInput) *Route53ResolverAssociateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-AssociateResolverRule", input)
	return &Route53ResolverAssociateResolverRuleFuture{Future: future}
}

func (a *stub) CreateResolverEndpoint(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) (*route53resolver.CreateResolverEndpointOutput, error) {
	var output route53resolver.CreateResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.CreateResolverEndpointInput) *Route53ResolverCreateResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverEndpoint", input)
	return &Route53ResolverCreateResolverEndpointFuture{Future: future}
}

func (a *stub) CreateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	var output route53resolver.CreateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.CreateResolverQueryLogConfigInput) *Route53ResolverCreateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverQueryLogConfig", input)
	return &Route53ResolverCreateResolverQueryLogConfigFuture{Future: future}
}

func (a *stub) CreateResolverRule(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) (*route53resolver.CreateResolverRuleOutput, error) {
	var output route53resolver.CreateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResolverRuleAsync(ctx workflow.Context, input *route53resolver.CreateResolverRuleInput) *Route53ResolverCreateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-CreateResolverRule", input)
	return &Route53ResolverCreateResolverRuleFuture{Future: future}
}

func (a *stub) DeleteResolverEndpoint(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) (*route53resolver.DeleteResolverEndpointOutput, error) {
	var output route53resolver.DeleteResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResolverEndpointAsync(ctx workflow.Context, input *route53resolver.DeleteResolverEndpointInput) *Route53ResolverDeleteResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverEndpoint", input)
	return &Route53ResolverDeleteResolverEndpointFuture{Future: future}
}

func (a *stub) DeleteResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	var output route53resolver.DeleteResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DeleteResolverQueryLogConfigInput) *Route53ResolverDeleteResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverQueryLogConfig", input)
	return &Route53ResolverDeleteResolverQueryLogConfigFuture{Future: future}
}

func (a *stub) DeleteResolverRule(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) (*route53resolver.DeleteResolverRuleOutput, error) {
	var output route53resolver.DeleteResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResolverRuleAsync(ctx workflow.Context, input *route53resolver.DeleteResolverRuleInput) *Route53ResolverDeleteResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DeleteResolverRule", input)
	return &Route53ResolverDeleteResolverRuleFuture{Future: future}
}

func (a *stub) DisassociateResolverEndpointIpAddress(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	var output route53resolver.DisassociateResolverEndpointIpAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverEndpointIpAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResolverEndpointIpAddressAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverEndpointIpAddressInput) *Route53ResolverDisassociateResolverEndpointIpAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverEndpointIpAddress", input)
	return &Route53ResolverDisassociateResolverEndpointIpAddressFuture{Future: future}
}

func (a *stub) DisassociateResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	var output route53resolver.DisassociateResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverQueryLogConfigInput) *Route53ResolverDisassociateResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverQueryLogConfig", input)
	return &Route53ResolverDisassociateResolverQueryLogConfigFuture{Future: future}
}

func (a *stub) DisassociateResolverRule(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) (*route53resolver.DisassociateResolverRuleOutput, error) {
	var output route53resolver.DisassociateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResolverRuleAsync(ctx workflow.Context, input *route53resolver.DisassociateResolverRuleInput) *Route53ResolverDisassociateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-DisassociateResolverRule", input)
	return &Route53ResolverDisassociateResolverRuleFuture{Future: future}
}

func (a *stub) GetResolverEndpoint(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) (*route53resolver.GetResolverEndpointOutput, error) {
	var output route53resolver.GetResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverEndpointAsync(ctx workflow.Context, input *route53resolver.GetResolverEndpointInput) *Route53ResolverGetResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverEndpoint", input)
	return &Route53ResolverGetResolverEndpointFuture{Future: future}
}

func (a *stub) GetResolverQueryLogConfig(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverQueryLogConfigAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigInput) *Route53ResolverGetResolverQueryLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfig", input)
	return &Route53ResolverGetResolverQueryLogConfigFuture{Future: future}
}

func (a *stub) GetResolverQueryLogConfigAssociation(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfigAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverQueryLogConfigAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigAssociationInput) *Route53ResolverGetResolverQueryLogConfigAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfigAssociation", input)
	return &Route53ResolverGetResolverQueryLogConfigAssociationFuture{Future: future}
}

func (a *stub) GetResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.GetResolverQueryLogConfigPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfigPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverQueryLogConfigPolicyInput) *Route53ResolverGetResolverQueryLogConfigPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverQueryLogConfigPolicy", input)
	return &Route53ResolverGetResolverQueryLogConfigPolicyFuture{Future: future}
}

func (a *stub) GetResolverRule(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) (*route53resolver.GetResolverRuleOutput, error) {
	var output route53resolver.GetResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverRuleAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleInput) *Route53ResolverGetResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRule", input)
	return &Route53ResolverGetResolverRuleFuture{Future: future}
}

func (a *stub) GetResolverRuleAssociation(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	var output route53resolver.GetResolverRuleAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRuleAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverRuleAssociationAsync(ctx workflow.Context, input *route53resolver.GetResolverRuleAssociationInput) *Route53ResolverGetResolverRuleAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRuleAssociation", input)
	return &Route53ResolverGetResolverRuleAssociationFuture{Future: future}
}

func (a *stub) GetResolverRulePolicy(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) (*route53resolver.GetResolverRulePolicyOutput, error) {
	var output route53resolver.GetResolverRulePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRulePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.GetResolverRulePolicyInput) *Route53ResolverGetResolverRulePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-GetResolverRulePolicy", input)
	return &Route53ResolverGetResolverRulePolicyFuture{Future: future}
}

func (a *stub) ListResolverEndpointIpAddresses(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	var output route53resolver.ListResolverEndpointIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverEndpointIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverEndpointIpAddressesAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointIpAddressesInput) *Route53ResolverListResolverEndpointIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverEndpointIpAddresses", input)
	return &Route53ResolverListResolverEndpointIpAddressesFuture{Future: future}
}

func (a *stub) ListResolverEndpoints(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) (*route53resolver.ListResolverEndpointsOutput, error) {
	var output route53resolver.ListResolverEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverEndpointsAsync(ctx workflow.Context, input *route53resolver.ListResolverEndpointsInput) *Route53ResolverListResolverEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverEndpoints", input)
	return &Route53ResolverListResolverEndpointsFuture{Future: future}
}

func (a *stub) ListResolverQueryLogConfigAssociations(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverQueryLogConfigAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverQueryLogConfigAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigAssociationsInput) *Route53ResolverListResolverQueryLogConfigAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverQueryLogConfigAssociations", input)
	return &Route53ResolverListResolverQueryLogConfigAssociationsFuture{Future: future}
}

func (a *stub) ListResolverQueryLogConfigs(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	var output route53resolver.ListResolverQueryLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverQueryLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverQueryLogConfigsAsync(ctx workflow.Context, input *route53resolver.ListResolverQueryLogConfigsInput) *Route53ResolverListResolverQueryLogConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverQueryLogConfigs", input)
	return &Route53ResolverListResolverQueryLogConfigsFuture{Future: future}
}

func (a *stub) ListResolverRuleAssociations(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	var output route53resolver.ListResolverRuleAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverRuleAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverRuleAssociationsAsync(ctx workflow.Context, input *route53resolver.ListResolverRuleAssociationsInput) *Route53ResolverListResolverRuleAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverRuleAssociations", input)
	return &Route53ResolverListResolverRuleAssociationsFuture{Future: future}
}

func (a *stub) ListResolverRules(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) (*route53resolver.ListResolverRulesOutput, error) {
	var output route53resolver.ListResolverRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolverRulesAsync(ctx workflow.Context, input *route53resolver.ListResolverRulesInput) *Route53ResolverListResolverRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListResolverRules", input)
	return &Route53ResolverListResolverRulesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) (*route53resolver.ListTagsForResourceOutput, error) {
	var output route53resolver.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *route53resolver.ListTagsForResourceInput) *Route53ResolverListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-ListTagsForResource", input)
	return &Route53ResolverListTagsForResourceFuture{Future: future}
}

func (a *stub) PutResolverQueryLogConfigPolicy(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	var output route53resolver.PutResolverQueryLogConfigPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-PutResolverQueryLogConfigPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResolverQueryLogConfigPolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverQueryLogConfigPolicyInput) *Route53ResolverPutResolverQueryLogConfigPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-PutResolverQueryLogConfigPolicy", input)
	return &Route53ResolverPutResolverQueryLogConfigPolicyFuture{Future: future}
}

func (a *stub) PutResolverRulePolicy(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) (*route53resolver.PutResolverRulePolicyOutput, error) {
	var output route53resolver.PutResolverRulePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-PutResolverRulePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResolverRulePolicyAsync(ctx workflow.Context, input *route53resolver.PutResolverRulePolicyInput) *Route53ResolverPutResolverRulePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-PutResolverRulePolicy", input)
	return &Route53ResolverPutResolverRulePolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *route53resolver.TagResourceInput) (*route53resolver.TagResourceOutput, error) {
	var output route53resolver.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *route53resolver.TagResourceInput) *Route53ResolverTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-TagResource", input)
	return &Route53ResolverTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *route53resolver.UntagResourceInput) (*route53resolver.UntagResourceOutput, error) {
	var output route53resolver.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *route53resolver.UntagResourceInput) *Route53ResolverUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-UntagResource", input)
	return &Route53ResolverUntagResourceFuture{Future: future}
}

func (a *stub) UpdateResolverEndpoint(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) (*route53resolver.UpdateResolverEndpointOutput, error) {
	var output route53resolver.UpdateResolverEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-UpdateResolverEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResolverEndpointAsync(ctx workflow.Context, input *route53resolver.UpdateResolverEndpointInput) *Route53ResolverUpdateResolverEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-UpdateResolverEndpoint", input)
	return &Route53ResolverUpdateResolverEndpointFuture{Future: future}
}

func (a *stub) UpdateResolverRule(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) (*route53resolver.UpdateResolverRuleOutput, error) {
	var output route53resolver.UpdateResolverRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-route53resolver-UpdateResolverRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResolverRuleAsync(ctx workflow.Context, input *route53resolver.UpdateResolverRuleInput) *Route53ResolverUpdateResolverRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-route53resolver-UpdateResolverRule", input)
	return &Route53ResolverUpdateResolverRuleFuture{Future: future}
}
