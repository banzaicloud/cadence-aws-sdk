// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ivsstub

import (
	"github.com/aws/aws-sdk-go/service/ivs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchGetChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetChannelFuture) Get(ctx workflow.Context) (*ivs.BatchGetChannelOutput, error) {
	var output ivs.BatchGetChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetStreamKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetStreamKeyFuture) Get(ctx workflow.Context) (*ivs.BatchGetStreamKeyOutput, error) {
	var output ivs.BatchGetStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelFuture) Get(ctx workflow.Context) (*ivs.CreateChannelOutput, error) {
	var output ivs.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamKeyFuture) Get(ctx workflow.Context) (*ivs.CreateStreamKeyOutput, error) {
	var output ivs.CreateStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelFuture) Get(ctx workflow.Context) (*ivs.DeleteChannelOutput, error) {
	var output ivs.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePlaybackKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.DeletePlaybackKeyPairOutput, error) {
	var output ivs.DeletePlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStreamKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStreamKeyFuture) Get(ctx workflow.Context) (*ivs.DeleteStreamKeyOutput, error) {
	var output ivs.DeleteStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetChannelFuture) Get(ctx workflow.Context) (*ivs.GetChannelOutput, error) {
	var output ivs.GetChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPlaybackKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.GetPlaybackKeyPairOutput, error) {
	var output ivs.GetPlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStreamFuture) Get(ctx workflow.Context) (*ivs.GetStreamOutput, error) {
	var output ivs.GetStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStreamKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStreamKeyFuture) Get(ctx workflow.Context) (*ivs.GetStreamKeyOutput, error) {
	var output ivs.GetStreamKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportPlaybackKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportPlaybackKeyPairFuture) Get(ctx workflow.Context) (*ivs.ImportPlaybackKeyPairOutput, error) {
	var output ivs.ImportPlaybackKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelsFuture) Get(ctx workflow.Context) (*ivs.ListChannelsOutput, error) {
	var output ivs.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPlaybackKeyPairsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPlaybackKeyPairsFuture) Get(ctx workflow.Context) (*ivs.ListPlaybackKeyPairsOutput, error) {
	var output ivs.ListPlaybackKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStreamKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStreamKeysFuture) Get(ctx workflow.Context) (*ivs.ListStreamKeysOutput, error) {
	var output ivs.ListStreamKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStreamsFuture) Get(ctx workflow.Context) (*ivs.ListStreamsOutput, error) {
	var output ivs.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*ivs.ListTagsForResourceOutput, error) {
	var output ivs.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMetadataFuture) Get(ctx workflow.Context) (*ivs.PutMetadataOutput, error) {
	var output ivs.PutMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopStreamFuture) Get(ctx workflow.Context) (*ivs.StopStreamOutput, error) {
	var output ivs.StopStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*ivs.TagResourceOutput, error) {
	var output ivs.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*ivs.UntagResourceOutput, error) {
	var output ivs.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelFuture) Get(ctx workflow.Context) (*ivs.UpdateChannelOutput, error) {
	var output ivs.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetChannel(ctx workflow.Context, input *ivs.BatchGetChannelInput) (*ivs.BatchGetChannelOutput, error) {
	var output ivs.BatchGetChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-BatchGetChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetChannelAsync(ctx workflow.Context, input *ivs.BatchGetChannelInput) *BatchGetChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-BatchGetChannel", input)
	return &BatchGetChannelFuture{Future: future}
}

func (a *stub) BatchGetStreamKey(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) (*ivs.BatchGetStreamKeyOutput, error) {
	var output ivs.BatchGetStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-BatchGetStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetStreamKeyAsync(ctx workflow.Context, input *ivs.BatchGetStreamKeyInput) *BatchGetStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-BatchGetStreamKey", input)
	return &BatchGetStreamKeyFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *ivs.CreateChannelInput) (*ivs.CreateChannelOutput, error) {
	var output ivs.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *ivs.CreateChannelInput) *CreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-CreateChannel", input)
	return &CreateChannelFuture{Future: future}
}

func (a *stub) CreateStreamKey(ctx workflow.Context, input *ivs.CreateStreamKeyInput) (*ivs.CreateStreamKeyOutput, error) {
	var output ivs.CreateStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-CreateStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamKeyAsync(ctx workflow.Context, input *ivs.CreateStreamKeyInput) *CreateStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-CreateStreamKey", input)
	return &CreateStreamKeyFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *ivs.DeleteChannelInput) (*ivs.DeleteChannelOutput, error) {
	var output ivs.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *ivs.DeleteChannelInput) *DeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-DeleteChannel", input)
	return &DeleteChannelFuture{Future: future}
}

func (a *stub) DeletePlaybackKeyPair(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) (*ivs.DeletePlaybackKeyPairOutput, error) {
	var output ivs.DeletePlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-DeletePlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlaybackKeyPairAsync(ctx workflow.Context, input *ivs.DeletePlaybackKeyPairInput) *DeletePlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-DeletePlaybackKeyPair", input)
	return &DeletePlaybackKeyPairFuture{Future: future}
}

func (a *stub) DeleteStreamKey(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) (*ivs.DeleteStreamKeyOutput, error) {
	var output ivs.DeleteStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-DeleteStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamKeyAsync(ctx workflow.Context, input *ivs.DeleteStreamKeyInput) *DeleteStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-DeleteStreamKey", input)
	return &DeleteStreamKeyFuture{Future: future}
}

func (a *stub) GetChannel(ctx workflow.Context, input *ivs.GetChannelInput) (*ivs.GetChannelOutput, error) {
	var output ivs.GetChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-GetChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChannelAsync(ctx workflow.Context, input *ivs.GetChannelInput) *GetChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-GetChannel", input)
	return &GetChannelFuture{Future: future}
}

func (a *stub) GetPlaybackKeyPair(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) (*ivs.GetPlaybackKeyPairOutput, error) {
	var output ivs.GetPlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-GetPlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.GetPlaybackKeyPairInput) *GetPlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-GetPlaybackKeyPair", input)
	return &GetPlaybackKeyPairFuture{Future: future}
}

func (a *stub) GetStream(ctx workflow.Context, input *ivs.GetStreamInput) (*ivs.GetStreamOutput, error) {
	var output ivs.GetStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-GetStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamAsync(ctx workflow.Context, input *ivs.GetStreamInput) *GetStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-GetStream", input)
	return &GetStreamFuture{Future: future}
}

func (a *stub) GetStreamKey(ctx workflow.Context, input *ivs.GetStreamKeyInput) (*ivs.GetStreamKeyOutput, error) {
	var output ivs.GetStreamKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-GetStreamKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamKeyAsync(ctx workflow.Context, input *ivs.GetStreamKeyInput) *GetStreamKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-GetStreamKey", input)
	return &GetStreamKeyFuture{Future: future}
}

func (a *stub) ImportPlaybackKeyPair(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) (*ivs.ImportPlaybackKeyPairOutput, error) {
	var output ivs.ImportPlaybackKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ImportPlaybackKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportPlaybackKeyPairAsync(ctx workflow.Context, input *ivs.ImportPlaybackKeyPairInput) *ImportPlaybackKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ImportPlaybackKeyPair", input)
	return &ImportPlaybackKeyPairFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *ivs.ListChannelsInput) (*ivs.ListChannelsOutput, error) {
	var output ivs.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *ivs.ListChannelsInput) *ListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ListChannels", input)
	return &ListChannelsFuture{Future: future}
}

func (a *stub) ListPlaybackKeyPairs(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) (*ivs.ListPlaybackKeyPairsOutput, error) {
	var output ivs.ListPlaybackKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ListPlaybackKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlaybackKeyPairsAsync(ctx workflow.Context, input *ivs.ListPlaybackKeyPairsInput) *ListPlaybackKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ListPlaybackKeyPairs", input)
	return &ListPlaybackKeyPairsFuture{Future: future}
}

func (a *stub) ListStreamKeys(ctx workflow.Context, input *ivs.ListStreamKeysInput) (*ivs.ListStreamKeysOutput, error) {
	var output ivs.ListStreamKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ListStreamKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamKeysAsync(ctx workflow.Context, input *ivs.ListStreamKeysInput) *ListStreamKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ListStreamKeys", input)
	return &ListStreamKeysFuture{Future: future}
}

func (a *stub) ListStreams(ctx workflow.Context, input *ivs.ListStreamsInput) (*ivs.ListStreamsOutput, error) {
	var output ivs.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamsAsync(ctx workflow.Context, input *ivs.ListStreamsInput) *ListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ListStreams", input)
	return &ListStreamsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *ivs.ListTagsForResourceInput) (*ivs.ListTagsForResourceOutput, error) {
	var output ivs.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *ivs.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutMetadata(ctx workflow.Context, input *ivs.PutMetadataInput) (*ivs.PutMetadataOutput, error) {
	var output ivs.PutMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-PutMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMetadataAsync(ctx workflow.Context, input *ivs.PutMetadataInput) *PutMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-PutMetadata", input)
	return &PutMetadataFuture{Future: future}
}

func (a *stub) StopStream(ctx workflow.Context, input *ivs.StopStreamInput) (*ivs.StopStreamOutput, error) {
	var output ivs.StopStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-StopStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStreamAsync(ctx workflow.Context, input *ivs.StopStreamInput) *StopStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-StopStream", input)
	return &StopStreamFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *ivs.TagResourceInput) (*ivs.TagResourceOutput, error) {
	var output ivs.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *ivs.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *ivs.UntagResourceInput) (*ivs.UntagResourceOutput, error) {
	var output ivs.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *ivs.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *ivs.UpdateChannelInput) (*ivs.UpdateChannelOutput, error) {
	var output ivs.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-ivs-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *ivs.UpdateChannelInput) *UpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ivs-UpdateChannel", input)
	return &UpdateChannelFuture{Future: future}
}
