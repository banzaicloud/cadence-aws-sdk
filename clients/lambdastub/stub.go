// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lambdastub

import (
	"github.com/aws/aws-sdk-go/service/lambda"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddLayerVersionPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddLayerVersionPermissionFuture) Get(ctx workflow.Context) (*lambda.AddLayerVersionPermissionOutput, error) {
	var output lambda.AddLayerVersionPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddPermissionFuture) Get(ctx workflow.Context) (*lambda.AddPermissionOutput, error) {
	var output lambda.AddPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.CreateCodeSigningConfigOutput, error) {
	var output lambda.CreateCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventSourceMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFunctionFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAliasFuture) Get(ctx workflow.Context) (*lambda.DeleteAliasOutput, error) {
	var output lambda.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteCodeSigningConfigOutput, error) {
	var output lambda.DeleteCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventSourceMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionOutput, error) {
	var output lambda.DeleteFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	var output lambda.DeleteFunctionCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionConcurrencyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	var output lambda.DeleteFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionEventInvokeConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	var output lambda.DeleteFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLayerVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLayerVersionFuture) Get(ctx workflow.Context) (*lambda.DeleteLayerVersionOutput, error) {
	var output lambda.DeleteLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProvisionedConcurrencyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	var output lambda.DeleteProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountSettingsFuture) Get(ctx workflow.Context) (*lambda.GetAccountSettingsOutput, error) {
	var output lambda.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.GetCodeSigningConfigOutput, error) {
	var output lambda.GetCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEventSourceMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionFuture) Get(ctx workflow.Context) (*lambda.GetFunctionOutput, error) {
	var output lambda.GetFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	var output lambda.GetFunctionCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionConcurrencyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.GetFunctionConcurrencyOutput, error) {
	var output lambda.GetFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionConfigurationFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionEventInvokeConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	var output lambda.GetFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLayerVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLayerVersionFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionOutput, error) {
	var output lambda.GetLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLayerVersionByArnFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLayerVersionByArnFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionByArnOutput, error) {
	var output lambda.GetLayerVersionByArnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLayerVersionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLayerVersionPolicyFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionPolicyOutput, error) {
	var output lambda.GetLayerVersionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPolicyFuture) Get(ctx workflow.Context) (*lambda.GetPolicyOutput, error) {
	var output lambda.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProvisionedConcurrencyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	var output lambda.GetProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InvokeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InvokeFuture) Get(ctx workflow.Context) (*lambda.InvokeOutput, error) {
	var output lambda.InvokeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAliasesFuture) Get(ctx workflow.Context) (*lambda.ListAliasesOutput, error) {
	var output lambda.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCodeSigningConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCodeSigningConfigsFuture) Get(ctx workflow.Context) (*lambda.ListCodeSigningConfigsOutput, error) {
	var output lambda.ListCodeSigningConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventSourceMappingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventSourceMappingsFuture) Get(ctx workflow.Context) (*lambda.ListEventSourceMappingsOutput, error) {
	var output lambda.ListEventSourceMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionEventInvokeConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionEventInvokeConfigsFuture) Get(ctx workflow.Context) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	var output lambda.ListFunctionEventInvokeConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionsFuture) Get(ctx workflow.Context) (*lambda.ListFunctionsOutput, error) {
	var output lambda.ListFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionsByCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionsByCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	var output lambda.ListFunctionsByCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLayerVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLayerVersionsFuture) Get(ctx workflow.Context) (*lambda.ListLayerVersionsOutput, error) {
	var output lambda.ListLayerVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLayersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLayersFuture) Get(ctx workflow.Context) (*lambda.ListLayersOutput, error) {
	var output lambda.ListLayersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProvisionedConcurrencyConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProvisionedConcurrencyConfigsFuture) Get(ctx workflow.Context) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	var output lambda.ListProvisionedConcurrencyConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*lambda.ListTagsOutput, error) {
	var output lambda.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVersionsByFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVersionsByFunctionFuture) Get(ctx workflow.Context) (*lambda.ListVersionsByFunctionOutput, error) {
	var output lambda.ListVersionsByFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PublishLayerVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PublishLayerVersionFuture) Get(ctx workflow.Context) (*lambda.PublishLayerVersionOutput, error) {
	var output lambda.PublishLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PublishVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PublishVersionFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutFunctionCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutFunctionCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	var output lambda.PutFunctionCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutFunctionConcurrencyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.PutFunctionConcurrencyOutput, error) {
	var output lambda.PutFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutFunctionEventInvokeConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	var output lambda.PutFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutProvisionedConcurrencyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	var output lambda.PutProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveLayerVersionPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveLayerVersionPermissionFuture) Get(ctx workflow.Context) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	var output lambda.RemoveLayerVersionPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemovePermissionFuture) Get(ctx workflow.Context) (*lambda.RemovePermissionOutput, error) {
	var output lambda.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*lambda.TagResourceOutput, error) {
	var output lambda.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*lambda.UntagResourceOutput, error) {
	var output lambda.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCodeSigningConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCodeSigningConfigFuture) Get(ctx workflow.Context) (*lambda.UpdateCodeSigningConfigOutput, error) {
	var output lambda.UpdateCodeSigningConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEventSourceMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFunctionCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFunctionCodeFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFunctionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFunctionConfigurationFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFunctionEventInvokeConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	var output lambda.UpdateFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddLayerVersionPermission(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error) {
	var output lambda.AddLayerVersionPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-AddLayerVersionPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) *AddLayerVersionPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-AddLayerVersionPermission", input)
	return &AddLayerVersionPermissionFuture{Future: future}
}

func (a *stub) AddPermission(ctx workflow.Context, input *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	var output lambda.AddPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-AddPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddPermissionAsync(ctx workflow.Context, input *lambda.AddPermissionInput) *AddPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-AddPermission", input)
	return &AddPermissionFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *lambda.CreateAliasInput) *CreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-CreateAlias", input)
	return &CreateAliasFuture{Future: future}
}

func (a *stub) CreateCodeSigningConfig(ctx workflow.Context, input *lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error) {
	var output lambda.CreateCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-CreateCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCodeSigningConfigAsync(ctx workflow.Context, input *lambda.CreateCodeSigningConfigInput) *CreateCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-CreateCodeSigningConfig", input)
	return &CreateCodeSigningConfigFuture{Future: future}
}

func (a *stub) CreateEventSourceMapping(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-CreateEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSourceMappingAsync(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) *CreateEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-CreateEventSourceMapping", input)
	return &CreateEventSourceMappingFuture{Future: future}
}

func (a *stub) CreateFunction(ctx workflow.Context, input *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-CreateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionAsync(ctx workflow.Context, input *lambda.CreateFunctionInput) *CreateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-CreateFunction", input)
	return &CreateFunctionFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	var output lambda.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *lambda.DeleteAliasInput) *DeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteAlias", input)
	return &DeleteAliasFuture{Future: future}
}

func (a *stub) DeleteCodeSigningConfig(ctx workflow.Context, input *lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error) {
	var output lambda.DeleteCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCodeSigningConfigAsync(ctx workflow.Context, input *lambda.DeleteCodeSigningConfigInput) *DeleteCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteCodeSigningConfig", input)
	return &DeleteCodeSigningConfigFuture{Future: future}
}

func (a *stub) DeleteEventSourceMapping(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSourceMappingAsync(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) *DeleteEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteEventSourceMapping", input)
	return &DeleteEventSourceMappingFuture{Future: future}
}

func (a *stub) DeleteFunction(ctx workflow.Context, input *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	var output lambda.DeleteFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionAsync(ctx workflow.Context, input *lambda.DeleteFunctionInput) *DeleteFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunction", input)
	return &DeleteFunctionFuture{Future: future}
}

func (a *stub) DeleteFunctionCodeSigningConfig(ctx workflow.Context, input *lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	var output lambda.DeleteFunctionCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionCodeSigningConfigAsync(ctx workflow.Context, input *lambda.DeleteFunctionCodeSigningConfigInput) *DeleteFunctionCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionCodeSigningConfig", input)
	return &DeleteFunctionCodeSigningConfigFuture{Future: future}
}

func (a *stub) DeleteFunctionConcurrency(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	var output lambda.DeleteFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) *DeleteFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionConcurrency", input)
	return &DeleteFunctionConcurrencyFuture{Future: future}
}

func (a *stub) DeleteFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	var output lambda.DeleteFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) *DeleteFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteFunctionEventInvokeConfig", input)
	return &DeleteFunctionEventInvokeConfigFuture{Future: future}
}

func (a *stub) DeleteLayerVersion(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error) {
	var output lambda.DeleteLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLayerVersionAsync(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) *DeleteLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteLayerVersion", input)
	return &DeleteLayerVersionFuture{Future: future}
}

func (a *stub) DeleteProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	var output lambda.DeleteProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) *DeleteProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-DeleteProvisionedConcurrencyConfig", input)
	return &DeleteProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *stub) GetAccountSettings(ctx workflow.Context, input *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	var output lambda.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSettingsAsync(ctx workflow.Context, input *lambda.GetAccountSettingsInput) *GetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetAccountSettings", input)
	return &GetAccountSettingsFuture{Future: future}
}

func (a *stub) GetAlias(ctx workflow.Context, input *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAliasAsync(ctx workflow.Context, input *lambda.GetAliasInput) *GetAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetAlias", input)
	return &GetAliasFuture{Future: future}
}

func (a *stub) GetCodeSigningConfig(ctx workflow.Context, input *lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error) {
	var output lambda.GetCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCodeSigningConfigAsync(ctx workflow.Context, input *lambda.GetCodeSigningConfigInput) *GetCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetCodeSigningConfig", input)
	return &GetCodeSigningConfigFuture{Future: future}
}

func (a *stub) GetEventSourceMapping(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEventSourceMappingAsync(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) *GetEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetEventSourceMapping", input)
	return &GetEventSourceMappingFuture{Future: future}
}

func (a *stub) GetFunction(ctx workflow.Context, input *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	var output lambda.GetFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionAsync(ctx workflow.Context, input *lambda.GetFunctionInput) *GetFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunction", input)
	return &GetFunctionFuture{Future: future}
}

func (a *stub) GetFunctionCodeSigningConfig(ctx workflow.Context, input *lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	var output lambda.GetFunctionCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionCodeSigningConfigAsync(ctx workflow.Context, input *lambda.GetFunctionCodeSigningConfigInput) *GetFunctionCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionCodeSigningConfig", input)
	return &GetFunctionCodeSigningConfigFuture{Future: future}
}

func (a *stub) GetFunctionConcurrency(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error) {
	var output lambda.GetFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) *GetFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionConcurrency", input)
	return &GetFunctionConcurrencyFuture{Future: future}
}

func (a *stub) GetFunctionConfiguration(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionConfigurationAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) *GetFunctionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionConfiguration", input)
	return &GetFunctionConfigurationFuture{Future: future}
}

func (a *stub) GetFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	var output lambda.GetFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) *GetFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetFunctionEventInvokeConfig", input)
	return &GetFunctionEventInvokeConfigFuture{Future: future}
}

func (a *stub) GetLayerVersion(ctx workflow.Context, input *lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error) {
	var output lambda.GetLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLayerVersionAsync(ctx workflow.Context, input *lambda.GetLayerVersionInput) *GetLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersion", input)
	return &GetLayerVersionFuture{Future: future}
}

func (a *stub) GetLayerVersionByArn(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error) {
	var output lambda.GetLayerVersionByArnOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersionByArn", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLayerVersionByArnAsync(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) *GetLayerVersionByArnFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersionByArn", input)
	return &GetLayerVersionByArnFuture{Future: future}
}

func (a *stub) GetLayerVersionPolicy(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error) {
	var output lambda.GetLayerVersionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLayerVersionPolicyAsync(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) *GetLayerVersionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetLayerVersionPolicy", input)
	return &GetLayerVersionPolicyFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	var output lambda.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *lambda.GetPolicyInput) *GetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetPolicy", input)
	return &GetPolicyFuture{Future: future}
}

func (a *stub) GetProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	var output lambda.GetProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-GetProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) *GetProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-GetProvisionedConcurrencyConfig", input)
	return &GetProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *stub) Invoke(ctx workflow.Context, input *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	var output lambda.InvokeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-Invoke", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InvokeAsync(ctx workflow.Context, input *lambda.InvokeInput) *InvokeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-Invoke", input)
	return &InvokeFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	var output lambda.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *lambda.ListAliasesInput) *ListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListAliases", input)
	return &ListAliasesFuture{Future: future}
}

func (a *stub) ListCodeSigningConfigs(ctx workflow.Context, input *lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error) {
	var output lambda.ListCodeSigningConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListCodeSigningConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCodeSigningConfigsAsync(ctx workflow.Context, input *lambda.ListCodeSigningConfigsInput) *ListCodeSigningConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListCodeSigningConfigs", input)
	return &ListCodeSigningConfigsFuture{Future: future}
}

func (a *stub) ListEventSourceMappings(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	var output lambda.ListEventSourceMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListEventSourceMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventSourceMappingsAsync(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) *ListEventSourceMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListEventSourceMappings", input)
	return &ListEventSourceMappingsFuture{Future: future}
}

func (a *stub) ListFunctionEventInvokeConfigs(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	var output lambda.ListFunctionEventInvokeConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctionEventInvokeConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionEventInvokeConfigsAsync(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) *ListFunctionEventInvokeConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctionEventInvokeConfigs", input)
	return &ListFunctionEventInvokeConfigsFuture{Future: future}
}

func (a *stub) ListFunctions(ctx workflow.Context, input *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	var output lambda.ListFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionsAsync(ctx workflow.Context, input *lambda.ListFunctionsInput) *ListFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctions", input)
	return &ListFunctionsFuture{Future: future}
}

func (a *stub) ListFunctionsByCodeSigningConfig(ctx workflow.Context, input *lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	var output lambda.ListFunctionsByCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctionsByCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionsByCodeSigningConfigAsync(ctx workflow.Context, input *lambda.ListFunctionsByCodeSigningConfigInput) *ListFunctionsByCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListFunctionsByCodeSigningConfig", input)
	return &ListFunctionsByCodeSigningConfigFuture{Future: future}
}

func (a *stub) ListLayerVersions(ctx workflow.Context, input *lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error) {
	var output lambda.ListLayerVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListLayerVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLayerVersionsAsync(ctx workflow.Context, input *lambda.ListLayerVersionsInput) *ListLayerVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListLayerVersions", input)
	return &ListLayerVersionsFuture{Future: future}
}

func (a *stub) ListLayers(ctx workflow.Context, input *lambda.ListLayersInput) (*lambda.ListLayersOutput, error) {
	var output lambda.ListLayersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListLayers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLayersAsync(ctx workflow.Context, input *lambda.ListLayersInput) *ListLayersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListLayers", input)
	return &ListLayersFuture{Future: future}
}

func (a *stub) ListProvisionedConcurrencyConfigs(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	var output lambda.ListProvisionedConcurrencyConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListProvisionedConcurrencyConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisionedConcurrencyConfigsAsync(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) *ListProvisionedConcurrencyConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListProvisionedConcurrencyConfigs", input)
	return &ListProvisionedConcurrencyConfigsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	var output lambda.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *lambda.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) ListVersionsByFunction(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	var output lambda.ListVersionsByFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-ListVersionsByFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVersionsByFunctionAsync(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) *ListVersionsByFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-ListVersionsByFunction", input)
	return &ListVersionsByFunctionFuture{Future: future}
}

func (a *stub) PublishLayerVersion(ctx workflow.Context, input *lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error) {
	var output lambda.PublishLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PublishLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishLayerVersionAsync(ctx workflow.Context, input *lambda.PublishLayerVersionInput) *PublishLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PublishLayerVersion", input)
	return &PublishLayerVersionFuture{Future: future}
}

func (a *stub) PublishVersion(ctx workflow.Context, input *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PublishVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishVersionAsync(ctx workflow.Context, input *lambda.PublishVersionInput) *PublishVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PublishVersion", input)
	return &PublishVersionFuture{Future: future}
}

func (a *stub) PutFunctionCodeSigningConfig(ctx workflow.Context, input *lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	var output lambda.PutFunctionCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutFunctionCodeSigningConfigAsync(ctx workflow.Context, input *lambda.PutFunctionCodeSigningConfigInput) *PutFunctionCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionCodeSigningConfig", input)
	return &PutFunctionCodeSigningConfigFuture{Future: future}
}

func (a *stub) PutFunctionConcurrency(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error) {
	var output lambda.PutFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) *PutFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionConcurrency", input)
	return &PutFunctionConcurrencyFuture{Future: future}
}

func (a *stub) PutFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	var output lambda.PutFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) *PutFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PutFunctionEventInvokeConfig", input)
	return &PutFunctionEventInvokeConfigFuture{Future: future}
}

func (a *stub) PutProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	var output lambda.PutProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-PutProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) *PutProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-PutProvisionedConcurrencyConfig", input)
	return &PutProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *stub) RemoveLayerVersionPermission(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	var output lambda.RemoveLayerVersionPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-RemoveLayerVersionPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) *RemoveLayerVersionPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-RemoveLayerVersionPermission", input)
	return &RemoveLayerVersionPermissionFuture{Future: future}
}

func (a *stub) RemovePermission(ctx workflow.Context, input *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	var output lambda.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemovePermissionAsync(ctx workflow.Context, input *lambda.RemovePermissionInput) *RemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-RemovePermission", input)
	return &RemovePermissionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	var output lambda.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *lambda.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	var output lambda.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *lambda.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAlias(ctx workflow.Context, input *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAliasAsync(ctx workflow.Context, input *lambda.UpdateAliasInput) *UpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateAlias", input)
	return &UpdateAliasFuture{Future: future}
}

func (a *stub) UpdateCodeSigningConfig(ctx workflow.Context, input *lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error) {
	var output lambda.UpdateCodeSigningConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateCodeSigningConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCodeSigningConfigAsync(ctx workflow.Context, input *lambda.UpdateCodeSigningConfigInput) *UpdateCodeSigningConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateCodeSigningConfig", input)
	return &UpdateCodeSigningConfigFuture{Future: future}
}

func (a *stub) UpdateEventSourceMapping(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEventSourceMappingAsync(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) *UpdateEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateEventSourceMapping", input)
	return &UpdateEventSourceMappingFuture{Future: future}
}

func (a *stub) UpdateFunctionCode(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionCodeAsync(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) *UpdateFunctionCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionCode", input)
	return &UpdateFunctionCodeFuture{Future: future}
}

func (a *stub) UpdateFunctionConfiguration(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionConfigurationAsync(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) *UpdateFunctionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionConfiguration", input)
	return &UpdateFunctionConfigurationFuture{Future: future}
}

func (a *stub) UpdateFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	var output lambda.UpdateFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) *UpdateFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-UpdateFunctionEventInvokeConfig", input)
	return &UpdateFunctionEventInvokeConfigFuture{Future: future}
}

func (a *stub) WaitUntilFunctionActive(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilFunctionActiveAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilFunctionExists(ctx workflow.Context, input *lambda.GetFunctionInput) error {
	return workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilFunctionExistsAsync(ctx workflow.Context, input *lambda.GetFunctionInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilFunctionUpdated(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionUpdated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilFunctionUpdatedAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lambda-WaitUntilFunctionUpdated", input)
	return clients.NewVoidFuture(future)
}
