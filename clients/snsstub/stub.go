// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package snsstub

import (
	"github.com/aws/aws-sdk-go/service/sns"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type SNSAddPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSAddPermissionFuture) Get(ctx workflow.Context) (*sns.AddPermissionOutput, error) {
	var output sns.AddPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSCheckIfPhoneNumberIsOptedOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSCheckIfPhoneNumberIsOptedOutFuture) Get(ctx workflow.Context) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	var output sns.CheckIfPhoneNumberIsOptedOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSConfirmSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSConfirmSubscriptionFuture) Get(ctx workflow.Context) (*sns.ConfirmSubscriptionOutput, error) {
	var output sns.ConfirmSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSCreatePlatformApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSCreatePlatformApplicationFuture) Get(ctx workflow.Context) (*sns.CreatePlatformApplicationOutput, error) {
	var output sns.CreatePlatformApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSCreatePlatformEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSCreatePlatformEndpointFuture) Get(ctx workflow.Context) (*sns.CreatePlatformEndpointOutput, error) {
	var output sns.CreatePlatformEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSCreateTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSCreateTopicFuture) Get(ctx workflow.Context) (*sns.CreateTopicOutput, error) {
	var output sns.CreateTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSDeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSDeleteEndpointFuture) Get(ctx workflow.Context) (*sns.DeleteEndpointOutput, error) {
	var output sns.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSDeletePlatformApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSDeletePlatformApplicationFuture) Get(ctx workflow.Context) (*sns.DeletePlatformApplicationOutput, error) {
	var output sns.DeletePlatformApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSDeleteTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSDeleteTopicFuture) Get(ctx workflow.Context) (*sns.DeleteTopicOutput, error) {
	var output sns.DeleteTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSGetEndpointAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSGetEndpointAttributesFuture) Get(ctx workflow.Context) (*sns.GetEndpointAttributesOutput, error) {
	var output sns.GetEndpointAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSGetPlatformApplicationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSGetPlatformApplicationAttributesFuture) Get(ctx workflow.Context) (*sns.GetPlatformApplicationAttributesOutput, error) {
	var output sns.GetPlatformApplicationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSGetSMSAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSGetSMSAttributesFuture) Get(ctx workflow.Context) (*sns.GetSMSAttributesOutput, error) {
	var output sns.GetSMSAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSGetSubscriptionAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSGetSubscriptionAttributesFuture) Get(ctx workflow.Context) (*sns.GetSubscriptionAttributesOutput, error) {
	var output sns.GetSubscriptionAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSGetTopicAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSGetTopicAttributesFuture) Get(ctx workflow.Context) (*sns.GetTopicAttributesOutput, error) {
	var output sns.GetTopicAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListEndpointsByPlatformApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListEndpointsByPlatformApplicationFuture) Get(ctx workflow.Context) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	var output sns.ListEndpointsByPlatformApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListPhoneNumbersOptedOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListPhoneNumbersOptedOutFuture) Get(ctx workflow.Context) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	var output sns.ListPhoneNumbersOptedOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListPlatformApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListPlatformApplicationsFuture) Get(ctx workflow.Context) (*sns.ListPlatformApplicationsOutput, error) {
	var output sns.ListPlatformApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListSubscriptionsFuture) Get(ctx workflow.Context) (*sns.ListSubscriptionsOutput, error) {
	var output sns.ListSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListSubscriptionsByTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListSubscriptionsByTopicFuture) Get(ctx workflow.Context) (*sns.ListSubscriptionsByTopicOutput, error) {
	var output sns.ListSubscriptionsByTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListTagsForResourceFuture) Get(ctx workflow.Context) (*sns.ListTagsForResourceOutput, error) {
	var output sns.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSListTopicsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSListTopicsFuture) Get(ctx workflow.Context) (*sns.ListTopicsOutput, error) {
	var output sns.ListTopicsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSOptInPhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSOptInPhoneNumberFuture) Get(ctx workflow.Context) (*sns.OptInPhoneNumberOutput, error) {
	var output sns.OptInPhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSPublishFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSPublishFuture) Get(ctx workflow.Context) (*sns.PublishOutput, error) {
	var output sns.PublishOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSRemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSRemovePermissionFuture) Get(ctx workflow.Context) (*sns.RemovePermissionOutput, error) {
	var output sns.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSetEndpointAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSetEndpointAttributesFuture) Get(ctx workflow.Context) (*sns.SetEndpointAttributesOutput, error) {
	var output sns.SetEndpointAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSetPlatformApplicationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSetPlatformApplicationAttributesFuture) Get(ctx workflow.Context) (*sns.SetPlatformApplicationAttributesOutput, error) {
	var output sns.SetPlatformApplicationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSetSMSAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSetSMSAttributesFuture) Get(ctx workflow.Context) (*sns.SetSMSAttributesOutput, error) {
	var output sns.SetSMSAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSetSubscriptionAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSetSubscriptionAttributesFuture) Get(ctx workflow.Context) (*sns.SetSubscriptionAttributesOutput, error) {
	var output sns.SetSubscriptionAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSetTopicAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSetTopicAttributesFuture) Get(ctx workflow.Context) (*sns.SetTopicAttributesOutput, error) {
	var output sns.SetTopicAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSSubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSSubscribeFuture) Get(ctx workflow.Context) (*sns.SubscribeOutput, error) {
	var output sns.SubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSTagResourceFuture) Get(ctx workflow.Context) (*sns.TagResourceOutput, error) {
	var output sns.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSUnsubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSUnsubscribeFuture) Get(ctx workflow.Context) (*sns.UnsubscribeOutput, error) {
	var output sns.UnsubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SNSUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SNSUntagResourceFuture) Get(ctx workflow.Context) (*sns.UntagResourceOutput, error) {
	var output sns.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddPermission(ctx workflow.Context, input *sns.AddPermissionInput) (*sns.AddPermissionOutput, error) {
	var output sns.AddPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-AddPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddPermissionAsync(ctx workflow.Context, input *sns.AddPermissionInput) *SNSAddPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-AddPermission", input)
	return &SNSAddPermissionFuture{Future: future}
}

func (a *stub) CheckIfPhoneNumberIsOptedOut(ctx workflow.Context, input *sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	var output sns.CheckIfPhoneNumberIsOptedOutOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-CheckIfPhoneNumberIsOptedOut", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckIfPhoneNumberIsOptedOutAsync(ctx workflow.Context, input *sns.CheckIfPhoneNumberIsOptedOutInput) *SNSCheckIfPhoneNumberIsOptedOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-CheckIfPhoneNumberIsOptedOut", input)
	return &SNSCheckIfPhoneNumberIsOptedOutFuture{Future: future}
}

func (a *stub) ConfirmSubscription(ctx workflow.Context, input *sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error) {
	var output sns.ConfirmSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ConfirmSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmSubscriptionAsync(ctx workflow.Context, input *sns.ConfirmSubscriptionInput) *SNSConfirmSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ConfirmSubscription", input)
	return &SNSConfirmSubscriptionFuture{Future: future}
}

func (a *stub) CreatePlatformApplication(ctx workflow.Context, input *sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error) {
	var output sns.CreatePlatformApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-CreatePlatformApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlatformApplicationAsync(ctx workflow.Context, input *sns.CreatePlatformApplicationInput) *SNSCreatePlatformApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-CreatePlatformApplication", input)
	return &SNSCreatePlatformApplicationFuture{Future: future}
}

func (a *stub) CreatePlatformEndpoint(ctx workflow.Context, input *sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error) {
	var output sns.CreatePlatformEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-CreatePlatformEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlatformEndpointAsync(ctx workflow.Context, input *sns.CreatePlatformEndpointInput) *SNSCreatePlatformEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-CreatePlatformEndpoint", input)
	return &SNSCreatePlatformEndpointFuture{Future: future}
}

func (a *stub) CreateTopic(ctx workflow.Context, input *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	var output sns.CreateTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-CreateTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTopicAsync(ctx workflow.Context, input *sns.CreateTopicInput) *SNSCreateTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-CreateTopic", input)
	return &SNSCreateTopicFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error) {
	var output sns.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *sns.DeleteEndpointInput) *SNSDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-DeleteEndpoint", input)
	return &SNSDeleteEndpointFuture{Future: future}
}

func (a *stub) DeletePlatformApplication(ctx workflow.Context, input *sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error) {
	var output sns.DeletePlatformApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-DeletePlatformApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlatformApplicationAsync(ctx workflow.Context, input *sns.DeletePlatformApplicationInput) *SNSDeletePlatformApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-DeletePlatformApplication", input)
	return &SNSDeletePlatformApplicationFuture{Future: future}
}

func (a *stub) DeleteTopic(ctx workflow.Context, input *sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error) {
	var output sns.DeleteTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-DeleteTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTopicAsync(ctx workflow.Context, input *sns.DeleteTopicInput) *SNSDeleteTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-DeleteTopic", input)
	return &SNSDeleteTopicFuture{Future: future}
}

func (a *stub) GetEndpointAttributes(ctx workflow.Context, input *sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error) {
	var output sns.GetEndpointAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-GetEndpointAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEndpointAttributesAsync(ctx workflow.Context, input *sns.GetEndpointAttributesInput) *SNSGetEndpointAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-GetEndpointAttributes", input)
	return &SNSGetEndpointAttributesFuture{Future: future}
}

func (a *stub) GetPlatformApplicationAttributes(ctx workflow.Context, input *sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error) {
	var output sns.GetPlatformApplicationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-GetPlatformApplicationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPlatformApplicationAttributesAsync(ctx workflow.Context, input *sns.GetPlatformApplicationAttributesInput) *SNSGetPlatformApplicationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-GetPlatformApplicationAttributes", input)
	return &SNSGetPlatformApplicationAttributesFuture{Future: future}
}

func (a *stub) GetSMSAttributes(ctx workflow.Context, input *sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error) {
	var output sns.GetSMSAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-GetSMSAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSMSAttributesAsync(ctx workflow.Context, input *sns.GetSMSAttributesInput) *SNSGetSMSAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-GetSMSAttributes", input)
	return &SNSGetSMSAttributesFuture{Future: future}
}

func (a *stub) GetSubscriptionAttributes(ctx workflow.Context, input *sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error) {
	var output sns.GetSubscriptionAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-GetSubscriptionAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSubscriptionAttributesAsync(ctx workflow.Context, input *sns.GetSubscriptionAttributesInput) *SNSGetSubscriptionAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-GetSubscriptionAttributes", input)
	return &SNSGetSubscriptionAttributesFuture{Future: future}
}

func (a *stub) GetTopicAttributes(ctx workflow.Context, input *sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error) {
	var output sns.GetTopicAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-GetTopicAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTopicAttributesAsync(ctx workflow.Context, input *sns.GetTopicAttributesInput) *SNSGetTopicAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-GetTopicAttributes", input)
	return &SNSGetTopicAttributesFuture{Future: future}
}

func (a *stub) ListEndpointsByPlatformApplication(ctx workflow.Context, input *sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	var output sns.ListEndpointsByPlatformApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListEndpointsByPlatformApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointsByPlatformApplicationAsync(ctx workflow.Context, input *sns.ListEndpointsByPlatformApplicationInput) *SNSListEndpointsByPlatformApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListEndpointsByPlatformApplication", input)
	return &SNSListEndpointsByPlatformApplicationFuture{Future: future}
}

func (a *stub) ListPhoneNumbersOptedOut(ctx workflow.Context, input *sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	var output sns.ListPhoneNumbersOptedOutOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListPhoneNumbersOptedOut", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPhoneNumbersOptedOutAsync(ctx workflow.Context, input *sns.ListPhoneNumbersOptedOutInput) *SNSListPhoneNumbersOptedOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListPhoneNumbersOptedOut", input)
	return &SNSListPhoneNumbersOptedOutFuture{Future: future}
}

func (a *stub) ListPlatformApplications(ctx workflow.Context, input *sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error) {
	var output sns.ListPlatformApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListPlatformApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlatformApplicationsAsync(ctx workflow.Context, input *sns.ListPlatformApplicationsInput) *SNSListPlatformApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListPlatformApplications", input)
	return &SNSListPlatformApplicationsFuture{Future: future}
}

func (a *stub) ListSubscriptions(ctx workflow.Context, input *sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error) {
	var output sns.ListSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionsAsync(ctx workflow.Context, input *sns.ListSubscriptionsInput) *SNSListSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListSubscriptions", input)
	return &SNSListSubscriptionsFuture{Future: future}
}

func (a *stub) ListSubscriptionsByTopic(ctx workflow.Context, input *sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error) {
	var output sns.ListSubscriptionsByTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListSubscriptionsByTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionsByTopicAsync(ctx workflow.Context, input *sns.ListSubscriptionsByTopicInput) *SNSListSubscriptionsByTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListSubscriptionsByTopic", input)
	return &SNSListSubscriptionsByTopicFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error) {
	var output sns.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *sns.ListTagsForResourceInput) *SNSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListTagsForResource", input)
	return &SNSListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTopics(ctx workflow.Context, input *sns.ListTopicsInput) (*sns.ListTopicsOutput, error) {
	var output sns.ListTopicsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-ListTopics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTopicsAsync(ctx workflow.Context, input *sns.ListTopicsInput) *SNSListTopicsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-ListTopics", input)
	return &SNSListTopicsFuture{Future: future}
}

func (a *stub) OptInPhoneNumber(ctx workflow.Context, input *sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error) {
	var output sns.OptInPhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-OptInPhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) OptInPhoneNumberAsync(ctx workflow.Context, input *sns.OptInPhoneNumberInput) *SNSOptInPhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-OptInPhoneNumber", input)
	return &SNSOptInPhoneNumberFuture{Future: future}
}

func (a *stub) Publish(ctx workflow.Context, input *sns.PublishInput) (*sns.PublishOutput, error) {
	var output sns.PublishOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-Publish", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishAsync(ctx workflow.Context, input *sns.PublishInput) *SNSPublishFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-Publish", input)
	return &SNSPublishFuture{Future: future}
}

func (a *stub) RemovePermission(ctx workflow.Context, input *sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error) {
	var output sns.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemovePermissionAsync(ctx workflow.Context, input *sns.RemovePermissionInput) *SNSRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-RemovePermission", input)
	return &SNSRemovePermissionFuture{Future: future}
}

func (a *stub) SetEndpointAttributes(ctx workflow.Context, input *sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error) {
	var output sns.SetEndpointAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-SetEndpointAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetEndpointAttributesAsync(ctx workflow.Context, input *sns.SetEndpointAttributesInput) *SNSSetEndpointAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-SetEndpointAttributes", input)
	return &SNSSetEndpointAttributesFuture{Future: future}
}

func (a *stub) SetPlatformApplicationAttributes(ctx workflow.Context, input *sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error) {
	var output sns.SetPlatformApplicationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-SetPlatformApplicationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetPlatformApplicationAttributesAsync(ctx workflow.Context, input *sns.SetPlatformApplicationAttributesInput) *SNSSetPlatformApplicationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-SetPlatformApplicationAttributes", input)
	return &SNSSetPlatformApplicationAttributesFuture{Future: future}
}

func (a *stub) SetSMSAttributes(ctx workflow.Context, input *sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error) {
	var output sns.SetSMSAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-SetSMSAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetSMSAttributesAsync(ctx workflow.Context, input *sns.SetSMSAttributesInput) *SNSSetSMSAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-SetSMSAttributes", input)
	return &SNSSetSMSAttributesFuture{Future: future}
}

func (a *stub) SetSubscriptionAttributes(ctx workflow.Context, input *sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error) {
	var output sns.SetSubscriptionAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-SetSubscriptionAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetSubscriptionAttributesAsync(ctx workflow.Context, input *sns.SetSubscriptionAttributesInput) *SNSSetSubscriptionAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-SetSubscriptionAttributes", input)
	return &SNSSetSubscriptionAttributesFuture{Future: future}
}

func (a *stub) SetTopicAttributes(ctx workflow.Context, input *sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error) {
	var output sns.SetTopicAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-SetTopicAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTopicAttributesAsync(ctx workflow.Context, input *sns.SetTopicAttributesInput) *SNSSetTopicAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-SetTopicAttributes", input)
	return &SNSSetTopicAttributesFuture{Future: future}
}

func (a *stub) Subscribe(ctx workflow.Context, input *sns.SubscribeInput) (*sns.SubscribeOutput, error) {
	var output sns.SubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-Subscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubscribeAsync(ctx workflow.Context, input *sns.SubscribeInput) *SNSSubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-Subscribe", input)
	return &SNSSubscribeFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *sns.TagResourceInput) (*sns.TagResourceOutput, error) {
	var output sns.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *sns.TagResourceInput) *SNSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-TagResource", input)
	return &SNSTagResourceFuture{Future: future}
}

func (a *stub) Unsubscribe(ctx workflow.Context, input *sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error) {
	var output sns.UnsubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-Unsubscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnsubscribeAsync(ctx workflow.Context, input *sns.UnsubscribeInput) *SNSUnsubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-Unsubscribe", input)
	return &SNSUnsubscribeFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *sns.UntagResourceInput) (*sns.UntagResourceOutput, error) {
	var output sns.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-sns-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *sns.UntagResourceInput) *SNSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sns-UntagResource", input)
	return &SNSUntagResourceFuture{Future: future}
}
