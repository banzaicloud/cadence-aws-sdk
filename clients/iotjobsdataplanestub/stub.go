// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package iotjobsdataplanestub

import (
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type IoTJobsDataPlaneDescribeJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTJobsDataPlaneDescribeJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneGetPendingJobExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTJobsDataPlaneGetPendingJobExecutionsFuture) Get(ctx workflow.Context) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneStartNextPendingJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTJobsDataPlaneStartNextPendingJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTJobsDataPlaneUpdateJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTJobsDataPlaneUpdateJobExecutionFuture) Get(ctx workflow.Context) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobExecution(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {
	var output iotjobsdataplane.DescribeJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-DescribeJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.DescribeJobExecutionInput) *IoTJobsDataPlaneDescribeJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-DescribeJobExecution", input)
	return &IoTJobsDataPlaneDescribeJobExecutionFuture{Future: future}
}

func (a *stub) GetPendingJobExecutions(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {
	var output iotjobsdataplane.GetPendingJobExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-GetPendingJobExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPendingJobExecutionsAsync(ctx workflow.Context, input *iotjobsdataplane.GetPendingJobExecutionsInput) *IoTJobsDataPlaneGetPendingJobExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-GetPendingJobExecutions", input)
	return &IoTJobsDataPlaneGetPendingJobExecutionsFuture{Future: future}
}

func (a *stub) StartNextPendingJobExecution(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {
	var output iotjobsdataplane.StartNextPendingJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-StartNextPendingJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartNextPendingJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.StartNextPendingJobExecutionInput) *IoTJobsDataPlaneStartNextPendingJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-StartNextPendingJobExecution", input)
	return &IoTJobsDataPlaneStartNextPendingJobExecutionFuture{Future: future}
}

func (a *stub) UpdateJobExecution(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {
	var output iotjobsdataplane.UpdateJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-UpdateJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobExecutionAsync(ctx workflow.Context, input *iotjobsdataplane.UpdateJobExecutionInput) *IoTJobsDataPlaneUpdateJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotjobsdataplane-UpdateJobExecution", input)
	return &IoTJobsDataPlaneUpdateJobExecutionFuture{Future: future}
}
