// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package opsworkscmstub

import (
	"github.com/aws/aws-sdk-go/service/opsworkscm"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateNodeFuture) Get(ctx workflow.Context) (*opsworkscm.AssociateNodeOutput, error) {
	var output opsworkscm.AssociateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupFuture) Get(ctx workflow.Context) (*opsworkscm.CreateBackupOutput, error) {
	var output opsworkscm.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServerFuture) Get(ctx workflow.Context) (*opsworkscm.CreateServerOutput, error) {
	var output opsworkscm.CreateServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupFuture) Get(ctx workflow.Context) (*opsworkscm.DeleteBackupOutput, error) {
	var output opsworkscm.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServerFuture) Get(ctx workflow.Context) (*opsworkscm.DeleteServerOutput, error) {
	var output opsworkscm.DeleteServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	var output opsworkscm.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupsFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeBackupsOutput, error) {
	var output opsworkscm.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeEventsOutput, error) {
	var output opsworkscm.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNodeAssociationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNodeAssociationStatusFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	var output opsworkscm.DescribeNodeAssociationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServersFuture) Get(ctx workflow.Context) (*opsworkscm.DescribeServersOutput, error) {
	var output opsworkscm.DescribeServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateNodeFuture) Get(ctx workflow.Context) (*opsworkscm.DisassociateNodeOutput, error) {
	var output opsworkscm.DisassociateNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportServerEngineAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportServerEngineAttributeFuture) Get(ctx workflow.Context) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	var output opsworkscm.ExportServerEngineAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*opsworkscm.ListTagsForResourceOutput, error) {
	var output opsworkscm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreServerFuture) Get(ctx workflow.Context) (*opsworkscm.RestoreServerOutput, error) {
	var output opsworkscm.RestoreServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMaintenanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMaintenanceFuture) Get(ctx workflow.Context) (*opsworkscm.StartMaintenanceOutput, error) {
	var output opsworkscm.StartMaintenanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*opsworkscm.TagResourceOutput, error) {
	var output opsworkscm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*opsworkscm.UntagResourceOutput, error) {
	var output opsworkscm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServerFuture) Get(ctx workflow.Context) (*opsworkscm.UpdateServerOutput, error) {
	var output opsworkscm.UpdateServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServerEngineAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServerEngineAttributesFuture) Get(ctx workflow.Context) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	var output opsworkscm.UpdateServerEngineAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateNode(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) (*opsworkscm.AssociateNodeOutput, error) {
	var output opsworkscm.AssociateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-AssociateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateNodeAsync(ctx workflow.Context, input *opsworkscm.AssociateNodeInput) *AssociateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-AssociateNode", input)
	return &AssociateNodeFuture{Future: future}
}

func (a *stub) CreateBackup(ctx workflow.Context, input *opsworkscm.CreateBackupInput) (*opsworkscm.CreateBackupOutput, error) {
	var output opsworkscm.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupAsync(ctx workflow.Context, input *opsworkscm.CreateBackupInput) *CreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-CreateBackup", input)
	return &CreateBackupFuture{Future: future}
}

func (a *stub) CreateServer(ctx workflow.Context, input *opsworkscm.CreateServerInput) (*opsworkscm.CreateServerOutput, error) {
	var output opsworkscm.CreateServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-CreateServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServerAsync(ctx workflow.Context, input *opsworkscm.CreateServerInput) *CreateServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-CreateServer", input)
	return &CreateServerFuture{Future: future}
}

func (a *stub) DeleteBackup(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) (*opsworkscm.DeleteBackupOutput, error) {
	var output opsworkscm.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupAsync(ctx workflow.Context, input *opsworkscm.DeleteBackupInput) *DeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DeleteBackup", input)
	return &DeleteBackupFuture{Future: future}
}

func (a *stub) DeleteServer(ctx workflow.Context, input *opsworkscm.DeleteServerInput) (*opsworkscm.DeleteServerOutput, error) {
	var output opsworkscm.DeleteServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DeleteServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServerAsync(ctx workflow.Context, input *opsworkscm.DeleteServerInput) *DeleteServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DeleteServer", input)
	return &DeleteServerFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	var output opsworkscm.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *opsworkscm.DescribeAccountAttributesInput) *DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeAccountAttributes", input)
	return &DescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeBackups(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) (*opsworkscm.DescribeBackupsOutput, error) {
	var output opsworkscm.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupsAsync(ctx workflow.Context, input *opsworkscm.DescribeBackupsInput) *DescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeBackups", input)
	return &DescribeBackupsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) (*opsworkscm.DescribeEventsOutput, error) {
	var output opsworkscm.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *opsworkscm.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeNodeAssociationStatus(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	var output opsworkscm.DescribeNodeAssociationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeNodeAssociationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNodeAssociationStatusAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *DescribeNodeAssociationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeNodeAssociationStatus", input)
	return &DescribeNodeAssociationStatusFuture{Future: future}
}

func (a *stub) DescribeServers(ctx workflow.Context, input *opsworkscm.DescribeServersInput) (*opsworkscm.DescribeServersOutput, error) {
	var output opsworkscm.DescribeServersOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeServers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServersAsync(ctx workflow.Context, input *opsworkscm.DescribeServersInput) *DescribeServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DescribeServers", input)
	return &DescribeServersFuture{Future: future}
}

func (a *stub) DisassociateNode(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) (*opsworkscm.DisassociateNodeOutput, error) {
	var output opsworkscm.DisassociateNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DisassociateNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateNodeAsync(ctx workflow.Context, input *opsworkscm.DisassociateNodeInput) *DisassociateNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-DisassociateNode", input)
	return &DisassociateNodeFuture{Future: future}
}

func (a *stub) ExportServerEngineAttribute(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	var output opsworkscm.ExportServerEngineAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-ExportServerEngineAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportServerEngineAttributeAsync(ctx workflow.Context, input *opsworkscm.ExportServerEngineAttributeInput) *ExportServerEngineAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-ExportServerEngineAttribute", input)
	return &ExportServerEngineAttributeFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) (*opsworkscm.ListTagsForResourceOutput, error) {
	var output opsworkscm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *opsworkscm.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RestoreServer(ctx workflow.Context, input *opsworkscm.RestoreServerInput) (*opsworkscm.RestoreServerOutput, error) {
	var output opsworkscm.RestoreServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-RestoreServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreServerAsync(ctx workflow.Context, input *opsworkscm.RestoreServerInput) *RestoreServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-RestoreServer", input)
	return &RestoreServerFuture{Future: future}
}

func (a *stub) StartMaintenance(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) (*opsworkscm.StartMaintenanceOutput, error) {
	var output opsworkscm.StartMaintenanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-StartMaintenance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMaintenanceAsync(ctx workflow.Context, input *opsworkscm.StartMaintenanceInput) *StartMaintenanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-StartMaintenance", input)
	return &StartMaintenanceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *opsworkscm.TagResourceInput) (*opsworkscm.TagResourceOutput, error) {
	var output opsworkscm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *opsworkscm.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *opsworkscm.UntagResourceInput) (*opsworkscm.UntagResourceOutput, error) {
	var output opsworkscm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *opsworkscm.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateServer(ctx workflow.Context, input *opsworkscm.UpdateServerInput) (*opsworkscm.UpdateServerOutput, error) {
	var output opsworkscm.UpdateServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UpdateServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServerAsync(ctx workflow.Context, input *opsworkscm.UpdateServerInput) *UpdateServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UpdateServer", input)
	return &UpdateServerFuture{Future: future}
}

func (a *stub) UpdateServerEngineAttributes(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	var output opsworkscm.UpdateServerEngineAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UpdateServerEngineAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServerEngineAttributesAsync(ctx workflow.Context, input *opsworkscm.UpdateServerEngineAttributesInput) *UpdateServerEngineAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-UpdateServerEngineAttributes", input)
	return &UpdateServerEngineAttributesFuture{Future: future}
}

func (a *stub) WaitUntilNodeAssociated(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworkscm-WaitUntilNodeAssociated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNodeAssociatedAsync(ctx workflow.Context, input *opsworkscm.DescribeNodeAssociationStatusInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworkscm-WaitUntilNodeAssociated", input)
	return clients.NewVoidFuture(future)
}
