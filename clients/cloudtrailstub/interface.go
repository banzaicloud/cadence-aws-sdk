// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package cloudtrailstub

import (
	"github.com/aws/aws-sdk-go/service/cloudtrail"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	AddTags(ctx workflow.Context, input *cloudtrail.AddTagsInput) (*cloudtrail.AddTagsOutput, error)
	AddTagsAsync(ctx workflow.Context, input *cloudtrail.AddTagsInput) *CloudTrailAddTagsFuture

	CreateTrail(ctx workflow.Context, input *cloudtrail.CreateTrailInput) (*cloudtrail.CreateTrailOutput, error)
	CreateTrailAsync(ctx workflow.Context, input *cloudtrail.CreateTrailInput) *CloudTrailCreateTrailFuture

	DeleteTrail(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) (*cloudtrail.DeleteTrailOutput, error)
	DeleteTrailAsync(ctx workflow.Context, input *cloudtrail.DeleteTrailInput) *CloudTrailDeleteTrailFuture

	DescribeTrails(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) (*cloudtrail.DescribeTrailsOutput, error)
	DescribeTrailsAsync(ctx workflow.Context, input *cloudtrail.DescribeTrailsInput) *CloudTrailDescribeTrailsFuture

	GetEventSelectors(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) (*cloudtrail.GetEventSelectorsOutput, error)
	GetEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetEventSelectorsInput) *CloudTrailGetEventSelectorsFuture

	GetInsightSelectors(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) (*cloudtrail.GetInsightSelectorsOutput, error)
	GetInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.GetInsightSelectorsInput) *CloudTrailGetInsightSelectorsFuture

	GetTrail(ctx workflow.Context, input *cloudtrail.GetTrailInput) (*cloudtrail.GetTrailOutput, error)
	GetTrailAsync(ctx workflow.Context, input *cloudtrail.GetTrailInput) *CloudTrailGetTrailFuture

	GetTrailStatus(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) (*cloudtrail.GetTrailStatusOutput, error)
	GetTrailStatusAsync(ctx workflow.Context, input *cloudtrail.GetTrailStatusInput) *CloudTrailGetTrailStatusFuture

	ListPublicKeys(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) (*cloudtrail.ListPublicKeysOutput, error)
	ListPublicKeysAsync(ctx workflow.Context, input *cloudtrail.ListPublicKeysInput) *CloudTrailListPublicKeysFuture

	ListTags(ctx workflow.Context, input *cloudtrail.ListTagsInput) (*cloudtrail.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *cloudtrail.ListTagsInput) *CloudTrailListTagsFuture

	ListTrails(ctx workflow.Context, input *cloudtrail.ListTrailsInput) (*cloudtrail.ListTrailsOutput, error)
	ListTrailsAsync(ctx workflow.Context, input *cloudtrail.ListTrailsInput) *CloudTrailListTrailsFuture

	LookupEvents(ctx workflow.Context, input *cloudtrail.LookupEventsInput) (*cloudtrail.LookupEventsOutput, error)
	LookupEventsAsync(ctx workflow.Context, input *cloudtrail.LookupEventsInput) *CloudTrailLookupEventsFuture

	PutEventSelectors(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) (*cloudtrail.PutEventSelectorsOutput, error)
	PutEventSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutEventSelectorsInput) *CloudTrailPutEventSelectorsFuture

	PutInsightSelectors(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) (*cloudtrail.PutInsightSelectorsOutput, error)
	PutInsightSelectorsAsync(ctx workflow.Context, input *cloudtrail.PutInsightSelectorsInput) *CloudTrailPutInsightSelectorsFuture

	RemoveTags(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) (*cloudtrail.RemoveTagsOutput, error)
	RemoveTagsAsync(ctx workflow.Context, input *cloudtrail.RemoveTagsInput) *CloudTrailRemoveTagsFuture

	StartLogging(ctx workflow.Context, input *cloudtrail.StartLoggingInput) (*cloudtrail.StartLoggingOutput, error)
	StartLoggingAsync(ctx workflow.Context, input *cloudtrail.StartLoggingInput) *CloudTrailStartLoggingFuture

	StopLogging(ctx workflow.Context, input *cloudtrail.StopLoggingInput) (*cloudtrail.StopLoggingOutput, error)
	StopLoggingAsync(ctx workflow.Context, input *cloudtrail.StopLoggingInput) *CloudTrailStopLoggingFuture

	UpdateTrail(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) (*cloudtrail.UpdateTrailOutput, error)
	UpdateTrailAsync(ctx workflow.Context, input *cloudtrail.UpdateTrailInput) *CloudTrailUpdateTrailFuture
}

func NewClient() Client {
	return &stub{}
}
