// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package codegurureviewerstub

import (
	"github.com/aws/aws-sdk-go/service/codegurureviewer"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeGuruReviewerAssociateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerAssociateRepositoryFuture) Get(ctx workflow.Context) (*codegurureviewer.AssociateRepositoryOutput, error) {
	var output codegurureviewer.AssociateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerCreateCodeReviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerCreateCodeReviewFuture) Get(ctx workflow.Context) (*codegurureviewer.CreateCodeReviewOutput, error) {
	var output codegurureviewer.CreateCodeReviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerDescribeCodeReviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerDescribeCodeReviewFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeCodeReviewOutput, error) {
	var output codegurureviewer.DescribeCodeReviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerDescribeRecommendationFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerDescribeRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeRecommendationFeedbackOutput, error) {
	var output codegurureviewer.DescribeRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerDescribeRepositoryAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerDescribeRepositoryAssociationFuture) Get(ctx workflow.Context) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	var output codegurureviewer.DescribeRepositoryAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerDisassociateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerDisassociateRepositoryFuture) Get(ctx workflow.Context) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	var output codegurureviewer.DisassociateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerListCodeReviewsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerListCodeReviewsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListCodeReviewsOutput, error) {
	var output codegurureviewer.ListCodeReviewsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerListRecommendationFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerListRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRecommendationFeedbackOutput, error) {
	var output codegurureviewer.ListRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerListRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerListRecommendationsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRecommendationsOutput, error) {
	var output codegurureviewer.ListRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerListRepositoryAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerListRepositoryAssociationsFuture) Get(ctx workflow.Context) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	var output codegurureviewer.ListRepositoryAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeGuruReviewerPutRecommendationFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeGuruReviewerPutRecommendationFeedbackFuture) Get(ctx workflow.Context) (*codegurureviewer.PutRecommendationFeedbackOutput, error) {
	var output codegurureviewer.PutRecommendationFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRepository(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) (*codegurureviewer.AssociateRepositoryOutput, error) {
	var output codegurureviewer.AssociateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-AssociateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.AssociateRepositoryInput) *CodeGuruReviewerAssociateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-AssociateRepository", input)
	return &CodeGuruReviewerAssociateRepositoryFuture{Future: future}
}

func (a *stub) CreateCodeReview(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) (*codegurureviewer.CreateCodeReviewOutput, error) {
	var output codegurureviewer.CreateCodeReviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-CreateCodeReview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.CreateCodeReviewInput) *CodeGuruReviewerCreateCodeReviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-CreateCodeReview", input)
	return &CodeGuruReviewerCreateCodeReviewFuture{Future: future}
}

func (a *stub) DescribeCodeReview(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) (*codegurureviewer.DescribeCodeReviewOutput, error) {
	var output codegurureviewer.DescribeCodeReviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeCodeReview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeReviewAsync(ctx workflow.Context, input *codegurureviewer.DescribeCodeReviewInput) *CodeGuruReviewerDescribeCodeReviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeCodeReview", input)
	return &CodeGuruReviewerDescribeCodeReviewFuture{Future: future}
}

func (a *stub) DescribeRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) (*codegurureviewer.DescribeRecommendationFeedbackOutput, error) {
	var output codegurureviewer.DescribeRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.DescribeRecommendationFeedbackInput) *CodeGuruReviewerDescribeRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeRecommendationFeedback", input)
	return &CodeGuruReviewerDescribeRecommendationFeedbackFuture{Future: future}
}

func (a *stub) DescribeRepositoryAssociation(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) (*codegurureviewer.DescribeRepositoryAssociationOutput, error) {
	var output codegurureviewer.DescribeRepositoryAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeRepositoryAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRepositoryAssociationAsync(ctx workflow.Context, input *codegurureviewer.DescribeRepositoryAssociationInput) *CodeGuruReviewerDescribeRepositoryAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DescribeRepositoryAssociation", input)
	return &CodeGuruReviewerDescribeRepositoryAssociationFuture{Future: future}
}

func (a *stub) DisassociateRepository(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) (*codegurureviewer.DisassociateRepositoryOutput, error) {
	var output codegurureviewer.DisassociateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DisassociateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRepositoryAsync(ctx workflow.Context, input *codegurureviewer.DisassociateRepositoryInput) *CodeGuruReviewerDisassociateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-DisassociateRepository", input)
	return &CodeGuruReviewerDisassociateRepositoryFuture{Future: future}
}

func (a *stub) ListCodeReviews(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) (*codegurureviewer.ListCodeReviewsOutput, error) {
	var output codegurureviewer.ListCodeReviewsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListCodeReviews", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCodeReviewsAsync(ctx workflow.Context, input *codegurureviewer.ListCodeReviewsInput) *CodeGuruReviewerListCodeReviewsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListCodeReviews", input)
	return &CodeGuruReviewerListCodeReviewsFuture{Future: future}
}

func (a *stub) ListRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) (*codegurureviewer.ListRecommendationFeedbackOutput, error) {
	var output codegurureviewer.ListRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationFeedbackInput) *CodeGuruReviewerListRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRecommendationFeedback", input)
	return &CodeGuruReviewerListRecommendationFeedbackFuture{Future: future}
}

func (a *stub) ListRecommendations(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) (*codegurureviewer.ListRecommendationsOutput, error) {
	var output codegurureviewer.ListRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecommendationsAsync(ctx workflow.Context, input *codegurureviewer.ListRecommendationsInput) *CodeGuruReviewerListRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRecommendations", input)
	return &CodeGuruReviewerListRecommendationsFuture{Future: future}
}

func (a *stub) ListRepositoryAssociations(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) (*codegurureviewer.ListRepositoryAssociationsOutput, error) {
	var output codegurureviewer.ListRepositoryAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRepositoryAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoryAssociationsAsync(ctx workflow.Context, input *codegurureviewer.ListRepositoryAssociationsInput) *CodeGuruReviewerListRepositoryAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-ListRepositoryAssociations", input)
	return &CodeGuruReviewerListRepositoryAssociationsFuture{Future: future}
}

func (a *stub) PutRecommendationFeedback(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) (*codegurureviewer.PutRecommendationFeedbackOutput, error) {
	var output codegurureviewer.PutRecommendationFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-PutRecommendationFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRecommendationFeedbackAsync(ctx workflow.Context, input *codegurureviewer.PutRecommendationFeedbackInput) *CodeGuruReviewerPutRecommendationFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codegurureviewer-PutRecommendationFeedback", input)
	return &CodeGuruReviewerPutRecommendationFeedbackFuture{Future: future}
}
