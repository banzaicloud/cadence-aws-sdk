// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elasticsearchservicestub

import (
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceAddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceAddTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceAssociatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceAssociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreateElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceCreateElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceCreatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceCreatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteElasticsearchServiceRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteElasticsearchServiceRoleFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDeletePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDeletePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchDomainsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribePackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribePackagesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceDissociatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceDissociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetUpgradeHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceGetUpgradeHistoryFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceGetUpgradeStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceGetUpgradeStatusFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListDomainNamesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListDomainsForPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListDomainsForPackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListElasticsearchInstanceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListElasticsearchInstanceTypesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListElasticsearchVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListPackagesForDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListPackagesForDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceListTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture) Get(ctx workflow.Context) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceRemoveTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceRemoveTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceUpdateElasticsearchDomainConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceUpdateElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticsearchServiceUpgradeElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticsearchServiceUpgradeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AcceptInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AcceptInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceAcceptInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *ElasticsearchServiceAddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AddTags", input)
	return &ElasticsearchServiceAddTagsFuture{Future: future}
}

func (a *stub) AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AssociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *ElasticsearchServiceAssociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AssociatePackage", input)
	return &ElasticsearchServiceAssociatePackageFuture{Future: future}
}

func (a *stub) CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CancelElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CancelElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *stub) CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *ElasticsearchServiceCreateElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateElasticsearchDomain", input)
	return &ElasticsearchServiceCreateElasticsearchDomainFuture{Future: future}
}

func (a *stub) CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceCreateOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *ElasticsearchServiceCreatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreatePackage", input)
	return &ElasticsearchServiceCreatePackageFuture{Future: future}
}

func (a *stub) DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *ElasticsearchServiceDeleteElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchDomain", input)
	return &ElasticsearchServiceDeleteElasticsearchDomainFuture{Future: future}
}

func (a *stub) DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchServiceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *ElasticsearchServiceDeleteElasticsearchServiceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchServiceRole", input)
	return &ElasticsearchServiceDeleteElasticsearchServiceRoleFuture{Future: future}
}

func (a *stub) DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceDeleteInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteOutboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeletePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *ElasticsearchServiceDeletePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeletePackage", input)
	return &ElasticsearchServiceDeletePackageFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *ElasticsearchServiceDescribeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomain", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *ElasticsearchServiceDescribeElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomainConfig", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainConfigFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *ElasticsearchServiceDescribeElasticsearchDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomains", input)
	return &ElasticsearchServiceDescribeElasticsearchDomainsFuture{Future: future}
}

func (a *stub) DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchInstanceTypeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchInstanceTypeLimits", input)
	return &ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsFuture{Future: future}
}

func (a *stub) DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeInboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeInboundCrossClusterSearchConnections", input)
	return &ElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *stub) DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeOutboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeOutboundCrossClusterSearchConnections", input)
	return &ElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *stub) DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribePackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *ElasticsearchServiceDescribePackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribePackages", input)
	return &ElasticsearchServiceDescribePackagesFuture{Future: future}
}

func (a *stub) DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstanceOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstanceOfferings", input)
	return &ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsFuture{Future: future}
}

func (a *stub) DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstances", input)
	return &ElasticsearchServiceDescribeReservedElasticsearchInstancesFuture{Future: future}
}

func (a *stub) DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DissociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *ElasticsearchServiceDissociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DissociatePackage", input)
	return &ElasticsearchServiceDissociatePackageFuture{Future: future}
}

func (a *stub) GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetCompatibleElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetCompatibleElasticsearchVersions", input)
	return &ElasticsearchServiceGetCompatibleElasticsearchVersionsFuture{Future: future}
}

func (a *stub) GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *ElasticsearchServiceGetUpgradeHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeHistory", input)
	return &ElasticsearchServiceGetUpgradeHistoryFuture{Future: future}
}

func (a *stub) GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *ElasticsearchServiceGetUpgradeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeStatus", input)
	return &ElasticsearchServiceGetUpgradeStatusFuture{Future: future}
}

func (a *stub) ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ElasticsearchServiceListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainNames", input)
	return &ElasticsearchServiceListDomainNamesFuture{Future: future}
}

func (a *stub) ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainsForPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ElasticsearchServiceListDomainsForPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainsForPackage", input)
	return &ElasticsearchServiceListDomainsForPackageFuture{Future: future}
}

func (a *stub) ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ElasticsearchServiceListElasticsearchInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchInstanceTypes", input)
	return &ElasticsearchServiceListElasticsearchInstanceTypesFuture{Future: future}
}

func (a *stub) ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ElasticsearchServiceListElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchVersions", input)
	return &ElasticsearchServiceListElasticsearchVersionsFuture{Future: future}
}

func (a *stub) ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListPackagesForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ElasticsearchServiceListPackagesForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListPackagesForDomain", input)
	return &ElasticsearchServiceListPackagesForDomainFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ElasticsearchServiceListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListTags", input)
	return &ElasticsearchServiceListTagsFuture{Future: future}
}

func (a *stub) PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-PurchaseReservedElasticsearchInstanceOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-PurchaseReservedElasticsearchInstanceOffering", input)
	return &ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingFuture{Future: future}
}

func (a *stub) RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RejectInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RejectInboundCrossClusterSearchConnection", input)
	return &ElasticsearchServiceRejectInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *ElasticsearchServiceRemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RemoveTags", input)
	return &ElasticsearchServiceRemoveTagsFuture{Future: future}
}

func (a *stub) StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-StartElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-StartElasticsearchServiceSoftwareUpdate", input)
	return &ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *stub) UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdateElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *ElasticsearchServiceUpdateElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdateElasticsearchDomainConfig", input)
	return &ElasticsearchServiceUpdateElasticsearchDomainConfigFuture{Future: future}
}

func (a *stub) UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpgradeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *ElasticsearchServiceUpgradeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpgradeElasticsearchDomain", input)
	return &ElasticsearchServiceUpgradeElasticsearchDomainFuture{Future: future}
}
