// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elasticsearchservicestub

import (
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelElasticsearchServiceSoftwareUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOutboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteElasticsearchServiceRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteElasticsearchServiceRoleFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOutboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOutboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticsearchDomainConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticsearchDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticsearchDomainsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticsearchInstanceTypeLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticsearchInstanceTypeLimitsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInboundCrossClusterSearchConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOutboundCrossClusterSearchConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOutboundCrossClusterSearchConnectionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePackagesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedElasticsearchInstanceOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedElasticsearchInstanceOfferingsFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedElasticsearchInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedElasticsearchInstancesFuture) Get(ctx workflow.Context) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DissociatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DissociatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCompatibleElasticsearchVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCompatibleElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPackageVersionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPackageVersionHistoryFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetPackageVersionHistoryOutput, error) {
	var output elasticsearchservice.GetPackageVersionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUpgradeHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUpgradeHistoryFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUpgradeStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUpgradeStatusFuture) Get(ctx workflow.Context) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainNamesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsForPackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsForPackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListElasticsearchInstanceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListElasticsearchInstanceTypesFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListElasticsearchVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListElasticsearchVersionsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackagesForDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackagesForDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseReservedElasticsearchInstanceOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseReservedElasticsearchInstanceOfferingFuture) Get(ctx workflow.Context) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectInboundCrossClusterSearchConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectInboundCrossClusterSearchConnectionFuture) Get(ctx workflow.Context) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFuture) Get(ctx workflow.Context) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartElasticsearchServiceSoftwareUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartElasticsearchServiceSoftwareUpdateFuture) Get(ctx workflow.Context) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateElasticsearchDomainConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateElasticsearchDomainConfigFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePackageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePackageFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpdatePackageOutput, error) {
	var output elasticsearchservice.UpdatePackageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpgradeElasticsearchDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpgradeElasticsearchDomainFuture) Get(ctx workflow.Context) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.AcceptInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AcceptInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.AcceptInboundCrossClusterSearchConnectionInput) *AcceptInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AcceptInboundCrossClusterSearchConnection", input)
	return &AcceptInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) AddTags(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) (*elasticsearchservice.AddTagsOutput, error) {
	var output elasticsearchservice.AddTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AddTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsAsync(ctx workflow.Context, input *elasticsearchservice.AddTagsInput) *AddTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AddTags", input)
	return &AddTagsFuture{Future: future}
}

func (a *stub) AssociatePackage(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) (*elasticsearchservice.AssociatePackageOutput, error) {
	var output elasticsearchservice.AssociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AssociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.AssociatePackageInput) *AssociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-AssociatePackage", input)
	return &AssociatePackageFuture{Future: future}
}

func (a *stub) CancelElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CancelElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) *CancelElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CancelElasticsearchServiceSoftwareUpdate", input)
	return &CancelElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *stub) CreateElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {
	var output elasticsearchservice.CreateElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.CreateElasticsearchDomainInput) *CreateElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateElasticsearchDomain", input)
	return &CreateElasticsearchDomainFuture{Future: future}
}

func (a *stub) CreateOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.CreateOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.CreateOutboundCrossClusterSearchConnectionInput) *CreateOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreateOutboundCrossClusterSearchConnection", input)
	return &CreateOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) CreatePackage(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) (*elasticsearchservice.CreatePackageOutput, error) {
	var output elasticsearchservice.CreatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePackageAsync(ctx workflow.Context, input *elasticsearchservice.CreatePackageInput) *CreatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-CreatePackage", input)
	return &CreatePackageFuture{Future: future}
}

func (a *stub) DeleteElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchDomainInput) *DeleteElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchDomain", input)
	return &DeleteElasticsearchDomainFuture{Future: future}
}

func (a *stub) DeleteElasticsearchServiceRole(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {
	var output elasticsearchservice.DeleteElasticsearchServiceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchServiceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteElasticsearchServiceRoleAsync(ctx workflow.Context, input *elasticsearchservice.DeleteElasticsearchServiceRoleInput) *DeleteElasticsearchServiceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteElasticsearchServiceRole", input)
	return &DeleteElasticsearchServiceRoleFuture{Future: future}
}

func (a *stub) DeleteInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteInboundCrossClusterSearchConnectionInput) *DeleteInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteInboundCrossClusterSearchConnection", input)
	return &DeleteInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) DeleteOutboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) (*elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteOutboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOutboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.DeleteOutboundCrossClusterSearchConnectionInput) *DeleteOutboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeleteOutboundCrossClusterSearchConnection", input)
	return &DeleteOutboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) DeletePackage(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) (*elasticsearchservice.DeletePackageOutput, error) {
	var output elasticsearchservice.DeletePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeletePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackageAsync(ctx workflow.Context, input *elasticsearchservice.DeletePackageInput) *DeletePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DeletePackage", input)
	return &DeletePackageFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainInput) *DescribeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomain", input)
	return &DescribeElasticsearchDomainFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainConfigInput) *DescribeElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomainConfig", input)
	return &DescribeElasticsearchDomainConfigFuture{Future: future}
}

func (a *stub) DescribeElasticsearchDomains(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchDomainsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchDomainsInput) *DescribeElasticsearchDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchDomains", input)
	return &DescribeElasticsearchDomainsFuture{Future: future}
}

func (a *stub) DescribeElasticsearchInstanceTypeLimits(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	var output elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchInstanceTypeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticsearchInstanceTypeLimitsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) *DescribeElasticsearchInstanceTypeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeElasticsearchInstanceTypeLimits", input)
	return &DescribeElasticsearchInstanceTypeLimitsFuture{Future: future}
}

func (a *stub) DescribeInboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeInboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput) *DescribeInboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeInboundCrossClusterSearchConnections", input)
	return &DescribeInboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *stub) DescribeOutboundCrossClusterSearchConnections(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {
	var output elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeOutboundCrossClusterSearchConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOutboundCrossClusterSearchConnectionsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput) *DescribeOutboundCrossClusterSearchConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeOutboundCrossClusterSearchConnections", input)
	return &DescribeOutboundCrossClusterSearchConnectionsFuture{Future: future}
}

func (a *stub) DescribePackages(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) (*elasticsearchservice.DescribePackagesOutput, error) {
	var output elasticsearchservice.DescribePackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribePackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackagesAsync(ctx workflow.Context, input *elasticsearchservice.DescribePackagesInput) *DescribePackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribePackages", input)
	return &DescribePackagesFuture{Future: future}
}

func (a *stub) DescribeReservedElasticsearchInstanceOfferings(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstanceOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedElasticsearchInstanceOfferingsAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) *DescribeReservedElasticsearchInstanceOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstanceOfferings", input)
	return &DescribeReservedElasticsearchInstanceOfferingsFuture{Future: future}
}

func (a *stub) DescribeReservedElasticsearchInstances(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {
	var output elasticsearchservice.DescribeReservedElasticsearchInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedElasticsearchInstancesAsync(ctx workflow.Context, input *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) *DescribeReservedElasticsearchInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DescribeReservedElasticsearchInstances", input)
	return &DescribeReservedElasticsearchInstancesFuture{Future: future}
}

func (a *stub) DissociatePackage(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) (*elasticsearchservice.DissociatePackageOutput, error) {
	var output elasticsearchservice.DissociatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DissociatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DissociatePackageAsync(ctx workflow.Context, input *elasticsearchservice.DissociatePackageInput) *DissociatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-DissociatePackage", input)
	return &DissociatePackageFuture{Future: future}
}

func (a *stub) GetCompatibleElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.GetCompatibleElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetCompatibleElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCompatibleElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) *GetCompatibleElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetCompatibleElasticsearchVersions", input)
	return &GetCompatibleElasticsearchVersionsFuture{Future: future}
}

func (a *stub) GetPackageVersionHistory(ctx workflow.Context, input *elasticsearchservice.GetPackageVersionHistoryInput) (*elasticsearchservice.GetPackageVersionHistoryOutput, error) {
	var output elasticsearchservice.GetPackageVersionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetPackageVersionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPackageVersionHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetPackageVersionHistoryInput) *GetPackageVersionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetPackageVersionHistory", input)
	return &GetPackageVersionHistoryFuture{Future: future}
}

func (a *stub) GetUpgradeHistory(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {
	var output elasticsearchservice.GetUpgradeHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUpgradeHistoryAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeHistoryInput) *GetUpgradeHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeHistory", input)
	return &GetUpgradeHistoryFuture{Future: future}
}

func (a *stub) GetUpgradeStatus(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) (*elasticsearchservice.GetUpgradeStatusOutput, error) {
	var output elasticsearchservice.GetUpgradeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUpgradeStatusAsync(ctx workflow.Context, input *elasticsearchservice.GetUpgradeStatusInput) *GetUpgradeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-GetUpgradeStatus", input)
	return &GetUpgradeStatusFuture{Future: future}
}

func (a *stub) ListDomainNames(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) (*elasticsearchservice.ListDomainNamesOutput, error) {
	var output elasticsearchservice.ListDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainNamesAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainNamesInput) *ListDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainNames", input)
	return &ListDomainNamesFuture{Future: future}
}

func (a *stub) ListDomainsForPackage(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) (*elasticsearchservice.ListDomainsForPackageOutput, error) {
	var output elasticsearchservice.ListDomainsForPackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainsForPackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsForPackageAsync(ctx workflow.Context, input *elasticsearchservice.ListDomainsForPackageInput) *ListDomainsForPackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListDomainsForPackage", input)
	return &ListDomainsForPackageFuture{Future: future}
}

func (a *stub) ListElasticsearchInstanceTypes(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {
	var output elasticsearchservice.ListElasticsearchInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListElasticsearchInstanceTypesAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchInstanceTypesInput) *ListElasticsearchInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchInstanceTypes", input)
	return &ListElasticsearchInstanceTypesFuture{Future: future}
}

func (a *stub) ListElasticsearchVersions(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {
	var output elasticsearchservice.ListElasticsearchVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListElasticsearchVersionsAsync(ctx workflow.Context, input *elasticsearchservice.ListElasticsearchVersionsInput) *ListElasticsearchVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListElasticsearchVersions", input)
	return &ListElasticsearchVersionsFuture{Future: future}
}

func (a *stub) ListPackagesForDomain(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) (*elasticsearchservice.ListPackagesForDomainOutput, error) {
	var output elasticsearchservice.ListPackagesForDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListPackagesForDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagesForDomainAsync(ctx workflow.Context, input *elasticsearchservice.ListPackagesForDomainInput) *ListPackagesForDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListPackagesForDomain", input)
	return &ListPackagesForDomainFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) (*elasticsearchservice.ListTagsOutput, error) {
	var output elasticsearchservice.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *elasticsearchservice.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) PurchaseReservedElasticsearchInstanceOffering(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {
	var output elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-PurchaseReservedElasticsearchInstanceOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedElasticsearchInstanceOfferingAsync(ctx workflow.Context, input *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) *PurchaseReservedElasticsearchInstanceOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-PurchaseReservedElasticsearchInstanceOffering", input)
	return &PurchaseReservedElasticsearchInstanceOfferingFuture{Future: future}
}

func (a *stub) RejectInboundCrossClusterSearchConnection(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) (*elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput, error) {
	var output elasticsearchservice.RejectInboundCrossClusterSearchConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RejectInboundCrossClusterSearchConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectInboundCrossClusterSearchConnectionAsync(ctx workflow.Context, input *elasticsearchservice.RejectInboundCrossClusterSearchConnectionInput) *RejectInboundCrossClusterSearchConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RejectInboundCrossClusterSearchConnection", input)
	return &RejectInboundCrossClusterSearchConnectionFuture{Future: future}
}

func (a *stub) RemoveTags(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) (*elasticsearchservice.RemoveTagsOutput, error) {
	var output elasticsearchservice.RemoveTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RemoveTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsAsync(ctx workflow.Context, input *elasticsearchservice.RemoveTagsInput) *RemoveTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-RemoveTags", input)
	return &RemoveTagsFuture{Future: future}
}

func (a *stub) StartElasticsearchServiceSoftwareUpdate(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {
	var output elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-StartElasticsearchServiceSoftwareUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartElasticsearchServiceSoftwareUpdateAsync(ctx workflow.Context, input *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) *StartElasticsearchServiceSoftwareUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-StartElasticsearchServiceSoftwareUpdate", input)
	return &StartElasticsearchServiceSoftwareUpdateFuture{Future: future}
}

func (a *stub) UpdateElasticsearchDomainConfig(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {
	var output elasticsearchservice.UpdateElasticsearchDomainConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdateElasticsearchDomainConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateElasticsearchDomainConfigAsync(ctx workflow.Context, input *elasticsearchservice.UpdateElasticsearchDomainConfigInput) *UpdateElasticsearchDomainConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdateElasticsearchDomainConfig", input)
	return &UpdateElasticsearchDomainConfigFuture{Future: future}
}

func (a *stub) UpdatePackage(ctx workflow.Context, input *elasticsearchservice.UpdatePackageInput) (*elasticsearchservice.UpdatePackageOutput, error) {
	var output elasticsearchservice.UpdatePackageOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdatePackage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePackageAsync(ctx workflow.Context, input *elasticsearchservice.UpdatePackageInput) *UpdatePackageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpdatePackage", input)
	return &UpdatePackageFuture{Future: future}
}

func (a *stub) UpgradeElasticsearchDomain(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {
	var output elasticsearchservice.UpgradeElasticsearchDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpgradeElasticsearchDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradeElasticsearchDomainAsync(ctx workflow.Context, input *elasticsearchservice.UpgradeElasticsearchDomainInput) *UpgradeElasticsearchDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticsearchservice-UpgradeElasticsearchDomain", input)
	return &UpgradeElasticsearchDomainFuture{Future: future}
}
