// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package xraystub

import (
	"github.com/aws/aws-sdk-go/service/xray"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchGetTracesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetTracesFuture) Get(ctx workflow.Context) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSamplingRuleFuture) Get(ctx workflow.Context) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupFuture) Get(ctx workflow.Context) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupsFuture) Get(ctx workflow.Context) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightFuture) Get(ctx workflow.Context) (*xray.GetInsightOutput, error) {
	var output xray.GetInsightOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightEventsFuture) Get(ctx workflow.Context) (*xray.GetInsightEventsOutput, error) {
	var output xray.GetInsightEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightImpactGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightImpactGraphFuture) Get(ctx workflow.Context) (*xray.GetInsightImpactGraphOutput, error) {
	var output xray.GetInsightImpactGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightSummariesFuture) Get(ctx workflow.Context) (*xray.GetInsightSummariesOutput, error) {
	var output xray.GetInsightSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSamplingRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSamplingRulesFuture) Get(ctx workflow.Context) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSamplingStatisticSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSamplingStatisticSummariesFuture) Get(ctx workflow.Context) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSamplingTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSamplingTargetsFuture) Get(ctx workflow.Context) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceGraphFuture) Get(ctx workflow.Context) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTimeSeriesServiceStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTimeSeriesServiceStatisticsFuture) Get(ctx workflow.Context) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTraceGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTraceGraphFuture) Get(ctx workflow.Context) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTraceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTraceSummariesFuture) Get(ctx workflow.Context) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutTelemetryRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutTelemetryRecordsFuture) Get(ctx workflow.Context) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutTraceSegmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutTraceSegmentsFuture) Get(ctx workflow.Context) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupFuture) Get(ctx workflow.Context) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetTraces(ctx workflow.Context, input *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-BatchGetTraces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetTracesAsync(ctx workflow.Context, input *xray.BatchGetTracesInput) *BatchGetTracesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-BatchGetTraces", input)
	return &BatchGetTracesFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *xray.CreateGroupInput) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *xray.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateSamplingRule(ctx workflow.Context, input *xray.CreateSamplingRuleInput) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-CreateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSamplingRuleAsync(ctx workflow.Context, input *xray.CreateSamplingRuleInput) *CreateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-CreateSamplingRule", input)
	return &CreateSamplingRuleFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *xray.DeleteGroupInput) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *xray.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteSamplingRule(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-DeleteSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSamplingRuleAsync(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) *DeleteSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-DeleteSamplingRule", input)
	return &DeleteSamplingRuleFuture{Future: future}
}

func (a *stub) GetEncryptionConfig(ctx workflow.Context, input *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEncryptionConfigAsync(ctx workflow.Context, input *xray.GetEncryptionConfigInput) *GetEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetEncryptionConfig", input)
	return &GetEncryptionConfigFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *xray.GetGroupInput) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *xray.GetGroupInput) *GetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetGroup", input)
	return &GetGroupFuture{Future: future}
}

func (a *stub) GetGroups(ctx workflow.Context, input *xray.GetGroupsInput) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupsAsync(ctx workflow.Context, input *xray.GetGroupsInput) *GetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetGroups", input)
	return &GetGroupsFuture{Future: future}
}

func (a *stub) GetInsight(ctx workflow.Context, input *xray.GetInsightInput) (*xray.GetInsightOutput, error) {
	var output xray.GetInsightOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetInsight", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightAsync(ctx workflow.Context, input *xray.GetInsightInput) *GetInsightFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetInsight", input)
	return &GetInsightFuture{Future: future}
}

func (a *stub) GetInsightEvents(ctx workflow.Context, input *xray.GetInsightEventsInput) (*xray.GetInsightEventsOutput, error) {
	var output xray.GetInsightEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightEventsAsync(ctx workflow.Context, input *xray.GetInsightEventsInput) *GetInsightEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightEvents", input)
	return &GetInsightEventsFuture{Future: future}
}

func (a *stub) GetInsightImpactGraph(ctx workflow.Context, input *xray.GetInsightImpactGraphInput) (*xray.GetInsightImpactGraphOutput, error) {
	var output xray.GetInsightImpactGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightImpactGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightImpactGraphAsync(ctx workflow.Context, input *xray.GetInsightImpactGraphInput) *GetInsightImpactGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightImpactGraph", input)
	return &GetInsightImpactGraphFuture{Future: future}
}

func (a *stub) GetInsightSummaries(ctx workflow.Context, input *xray.GetInsightSummariesInput) (*xray.GetInsightSummariesOutput, error) {
	var output xray.GetInsightSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightSummariesAsync(ctx workflow.Context, input *xray.GetInsightSummariesInput) *GetInsightSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetInsightSummaries", input)
	return &GetInsightSummariesFuture{Future: future}
}

func (a *stub) GetSamplingRules(ctx workflow.Context, input *xray.GetSamplingRulesInput) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingRulesAsync(ctx workflow.Context, input *xray.GetSamplingRulesInput) *GetSamplingRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingRules", input)
	return &GetSamplingRulesFuture{Future: future}
}

func (a *stub) GetSamplingStatisticSummaries(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingStatisticSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingStatisticSummariesAsync(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) *GetSamplingStatisticSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingStatisticSummaries", input)
	return &GetSamplingStatisticSummariesFuture{Future: future}
}

func (a *stub) GetSamplingTargets(ctx workflow.Context, input *xray.GetSamplingTargetsInput) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingTargetsAsync(ctx workflow.Context, input *xray.GetSamplingTargetsInput) *GetSamplingTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingTargets", input)
	return &GetSamplingTargetsFuture{Future: future}
}

func (a *stub) GetServiceGraph(ctx workflow.Context, input *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetServiceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceGraphAsync(ctx workflow.Context, input *xray.GetServiceGraphInput) *GetServiceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetServiceGraph", input)
	return &GetServiceGraphFuture{Future: future}
}

func (a *stub) GetTimeSeriesServiceStatistics(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTimeSeriesServiceStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTimeSeriesServiceStatisticsAsync(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) *GetTimeSeriesServiceStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTimeSeriesServiceStatistics", input)
	return &GetTimeSeriesServiceStatisticsFuture{Future: future}
}

func (a *stub) GetTraceGraph(ctx workflow.Context, input *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTraceGraphAsync(ctx workflow.Context, input *xray.GetTraceGraphInput) *GetTraceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceGraph", input)
	return &GetTraceGraphFuture{Future: future}
}

func (a *stub) GetTraceSummaries(ctx workflow.Context, input *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTraceSummariesAsync(ctx workflow.Context, input *xray.GetTraceSummariesInput) *GetTraceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceSummaries", input)
	return &GetTraceSummariesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *xray.ListTagsForResourceInput) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *xray.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutEncryptionConfig(ctx workflow.Context, input *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEncryptionConfigAsync(ctx workflow.Context, input *xray.PutEncryptionConfigInput) *PutEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutEncryptionConfig", input)
	return &PutEncryptionConfigFuture{Future: future}
}

func (a *stub) PutTelemetryRecords(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutTelemetryRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutTelemetryRecordsAsync(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) *PutTelemetryRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutTelemetryRecords", input)
	return &PutTelemetryRecordsFuture{Future: future}
}

func (a *stub) PutTraceSegments(ctx workflow.Context, input *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutTraceSegments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutTraceSegmentsAsync(ctx workflow.Context, input *xray.PutTraceSegmentsInput) *PutTraceSegmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutTraceSegments", input)
	return &PutTraceSegmentsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *xray.TagResourceInput) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *xray.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *xray.UntagResourceInput) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *xray.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *xray.UpdateGroupInput) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *xray.UpdateGroupInput) *UpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UpdateGroup", input)
	return &UpdateGroupFuture{Future: future}
}

func (a *stub) UpdateSamplingRule(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UpdateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSamplingRuleAsync(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) *UpdateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UpdateSamplingRule", input)
	return &UpdateSamplingRuleFuture{Future: future}
}
