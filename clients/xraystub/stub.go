// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package xraystub

import (
	"github.com/aws/aws-sdk-go/service/xray"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type XRayBatchGetTracesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayBatchGetTracesFuture) Get(ctx workflow.Context) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayCreateGroupFuture) Get(ctx workflow.Context) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayCreateSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayCreateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayDeleteGroupFuture) Get(ctx workflow.Context) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayDeleteSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayDeleteSamplingRuleFuture) Get(ctx workflow.Context) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetGroupFuture) Get(ctx workflow.Context) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetGroupsFuture) Get(ctx workflow.Context) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetSamplingRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetSamplingRulesFuture) Get(ctx workflow.Context) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetSamplingStatisticSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetSamplingStatisticSummariesFuture) Get(ctx workflow.Context) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetSamplingTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetSamplingTargetsFuture) Get(ctx workflow.Context) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetServiceGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetServiceGraphFuture) Get(ctx workflow.Context) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetTimeSeriesServiceStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetTimeSeriesServiceStatisticsFuture) Get(ctx workflow.Context) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetTraceGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetTraceGraphFuture) Get(ctx workflow.Context) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayGetTraceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayGetTraceSummariesFuture) Get(ctx workflow.Context) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayListTagsForResourceFuture) Get(ctx workflow.Context) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayPutEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayPutEncryptionConfigFuture) Get(ctx workflow.Context) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayPutTelemetryRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayPutTelemetryRecordsFuture) Get(ctx workflow.Context) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayPutTraceSegmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayPutTraceSegmentsFuture) Get(ctx workflow.Context) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayTagResourceFuture) Get(ctx workflow.Context) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayUntagResourceFuture) Get(ctx workflow.Context) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayUpdateGroupFuture) Get(ctx workflow.Context) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type XRayUpdateSamplingRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *XRayUpdateSamplingRuleFuture) Get(ctx workflow.Context) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetTraces(ctx workflow.Context, input *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error) {
	var output xray.BatchGetTracesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-BatchGetTraces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetTracesAsync(ctx workflow.Context, input *xray.BatchGetTracesInput) *XRayBatchGetTracesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-BatchGetTraces", input)
	return &XRayBatchGetTracesFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *xray.CreateGroupInput) (*xray.CreateGroupOutput, error) {
	var output xray.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *xray.CreateGroupInput) *XRayCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-CreateGroup", input)
	return &XRayCreateGroupFuture{Future: future}
}

func (a *stub) CreateSamplingRule(ctx workflow.Context, input *xray.CreateSamplingRuleInput) (*xray.CreateSamplingRuleOutput, error) {
	var output xray.CreateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-CreateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSamplingRuleAsync(ctx workflow.Context, input *xray.CreateSamplingRuleInput) *XRayCreateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-CreateSamplingRule", input)
	return &XRayCreateSamplingRuleFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *xray.DeleteGroupInput) (*xray.DeleteGroupOutput, error) {
	var output xray.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *xray.DeleteGroupInput) *XRayDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-DeleteGroup", input)
	return &XRayDeleteGroupFuture{Future: future}
}

func (a *stub) DeleteSamplingRule(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) (*xray.DeleteSamplingRuleOutput, error) {
	var output xray.DeleteSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-DeleteSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSamplingRuleAsync(ctx workflow.Context, input *xray.DeleteSamplingRuleInput) *XRayDeleteSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-DeleteSamplingRule", input)
	return &XRayDeleteSamplingRuleFuture{Future: future}
}

func (a *stub) GetEncryptionConfig(ctx workflow.Context, input *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error) {
	var output xray.GetEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEncryptionConfigAsync(ctx workflow.Context, input *xray.GetEncryptionConfigInput) *XRayGetEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetEncryptionConfig", input)
	return &XRayGetEncryptionConfigFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *xray.GetGroupInput) (*xray.GetGroupOutput, error) {
	var output xray.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *xray.GetGroupInput) *XRayGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetGroup", input)
	return &XRayGetGroupFuture{Future: future}
}

func (a *stub) GetGroups(ctx workflow.Context, input *xray.GetGroupsInput) (*xray.GetGroupsOutput, error) {
	var output xray.GetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupsAsync(ctx workflow.Context, input *xray.GetGroupsInput) *XRayGetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetGroups", input)
	return &XRayGetGroupsFuture{Future: future}
}

func (a *stub) GetSamplingRules(ctx workflow.Context, input *xray.GetSamplingRulesInput) (*xray.GetSamplingRulesOutput, error) {
	var output xray.GetSamplingRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingRulesAsync(ctx workflow.Context, input *xray.GetSamplingRulesInput) *XRayGetSamplingRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingRules", input)
	return &XRayGetSamplingRulesFuture{Future: future}
}

func (a *stub) GetSamplingStatisticSummaries(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) (*xray.GetSamplingStatisticSummariesOutput, error) {
	var output xray.GetSamplingStatisticSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingStatisticSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingStatisticSummariesAsync(ctx workflow.Context, input *xray.GetSamplingStatisticSummariesInput) *XRayGetSamplingStatisticSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingStatisticSummaries", input)
	return &XRayGetSamplingStatisticSummariesFuture{Future: future}
}

func (a *stub) GetSamplingTargets(ctx workflow.Context, input *xray.GetSamplingTargetsInput) (*xray.GetSamplingTargetsOutput, error) {
	var output xray.GetSamplingTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSamplingTargetsAsync(ctx workflow.Context, input *xray.GetSamplingTargetsInput) *XRayGetSamplingTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetSamplingTargets", input)
	return &XRayGetSamplingTargetsFuture{Future: future}
}

func (a *stub) GetServiceGraph(ctx workflow.Context, input *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error) {
	var output xray.GetServiceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetServiceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceGraphAsync(ctx workflow.Context, input *xray.GetServiceGraphInput) *XRayGetServiceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetServiceGraph", input)
	return &XRayGetServiceGraphFuture{Future: future}
}

func (a *stub) GetTimeSeriesServiceStatistics(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	var output xray.GetTimeSeriesServiceStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTimeSeriesServiceStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTimeSeriesServiceStatisticsAsync(ctx workflow.Context, input *xray.GetTimeSeriesServiceStatisticsInput) *XRayGetTimeSeriesServiceStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTimeSeriesServiceStatistics", input)
	return &XRayGetTimeSeriesServiceStatisticsFuture{Future: future}
}

func (a *stub) GetTraceGraph(ctx workflow.Context, input *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error) {
	var output xray.GetTraceGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTraceGraphAsync(ctx workflow.Context, input *xray.GetTraceGraphInput) *XRayGetTraceGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceGraph", input)
	return &XRayGetTraceGraphFuture{Future: future}
}

func (a *stub) GetTraceSummaries(ctx workflow.Context, input *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error) {
	var output xray.GetTraceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTraceSummariesAsync(ctx workflow.Context, input *xray.GetTraceSummariesInput) *XRayGetTraceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-GetTraceSummaries", input)
	return &XRayGetTraceSummariesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *xray.ListTagsForResourceInput) (*xray.ListTagsForResourceOutput, error) {
	var output xray.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *xray.ListTagsForResourceInput) *XRayListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-ListTagsForResource", input)
	return &XRayListTagsForResourceFuture{Future: future}
}

func (a *stub) PutEncryptionConfig(ctx workflow.Context, input *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error) {
	var output xray.PutEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEncryptionConfigAsync(ctx workflow.Context, input *xray.PutEncryptionConfigInput) *XRayPutEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutEncryptionConfig", input)
	return &XRayPutEncryptionConfigFuture{Future: future}
}

func (a *stub) PutTelemetryRecords(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error) {
	var output xray.PutTelemetryRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutTelemetryRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutTelemetryRecordsAsync(ctx workflow.Context, input *xray.PutTelemetryRecordsInput) *XRayPutTelemetryRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutTelemetryRecords", input)
	return &XRayPutTelemetryRecordsFuture{Future: future}
}

func (a *stub) PutTraceSegments(ctx workflow.Context, input *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error) {
	var output xray.PutTraceSegmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-PutTraceSegments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutTraceSegmentsAsync(ctx workflow.Context, input *xray.PutTraceSegmentsInput) *XRayPutTraceSegmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-PutTraceSegments", input)
	return &XRayPutTraceSegmentsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *xray.TagResourceInput) (*xray.TagResourceOutput, error) {
	var output xray.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *xray.TagResourceInput) *XRayTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-TagResource", input)
	return &XRayTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *xray.UntagResourceInput) (*xray.UntagResourceOutput, error) {
	var output xray.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *xray.UntagResourceInput) *XRayUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UntagResource", input)
	return &XRayUntagResourceFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *xray.UpdateGroupInput) (*xray.UpdateGroupOutput, error) {
	var output xray.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *xray.UpdateGroupInput) *XRayUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UpdateGroup", input)
	return &XRayUpdateGroupFuture{Future: future}
}

func (a *stub) UpdateSamplingRule(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) (*xray.UpdateSamplingRuleOutput, error) {
	var output xray.UpdateSamplingRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-xray-UpdateSamplingRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSamplingRuleAsync(ctx workflow.Context, input *xray.UpdateSamplingRuleInput) *XRayUpdateSamplingRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-xray-UpdateSamplingRule", input)
	return &XRayUpdateSamplingRuleFuture{Future: future}
}
