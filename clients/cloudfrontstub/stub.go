// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudfrontstub

import (
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDistributionWithTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInvalidationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.CreateKeyGroupOutput, error) {
	var output cloudfront.CreateKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamingDistributionWithTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamingDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.DeleteKeyGroupOutput, error) {
	var output cloudfront.DeleteKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCachePolicyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCachePolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCloudFrontOriginAccessIdentityConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCloudFrontOriginAccessIdentityConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFieldLevelEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFieldLevelEncryptionFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFieldLevelEncryptionProfileConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFieldLevelEncryptionProfileConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInvalidationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.GetKeyGroupOutput, error) {
	var output cloudfront.GetKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyGroupConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyGroupConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetKeyGroupConfigOutput, error) {
	var output cloudfront.GetKeyGroupConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOriginRequestPolicyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOriginRequestPolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPublicKeyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPublicKeyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStreamingDistributionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStreamingDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCachePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCachePoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCloudFrontOriginAccessIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCloudFrontOriginAccessIdentitiesFuture) Get(ctx workflow.Context) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsByCachePolicyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsByCachePolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsByKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsByKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	var output cloudfront.ListDistributionsByKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsByOriginRequestPolicyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsByOriginRequestPolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsByRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsByRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributionsByWebACLIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributionsByWebACLIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFieldLevelEncryptionConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFieldLevelEncryptionConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFieldLevelEncryptionProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFieldLevelEncryptionProfilesFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInvalidationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInvalidationsFuture) Get(ctx workflow.Context) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListKeyGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListKeyGroupsFuture) Get(ctx workflow.Context) (*cloudfront.ListKeyGroupsOutput, error) {
	var output cloudfront.ListKeyGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOriginRequestPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOriginRequestPoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPublicKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPublicKeysFuture) Get(ctx workflow.Context) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRealtimeLogConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRealtimeLogConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStreamingDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStreamingDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.UpdateKeyGroupOutput, error) {
	var output cloudfront.UpdateKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CreateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCachePolicy", input)
	return &CreateCachePolicyFuture{Future: future}
}

func (a *stub) CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CreateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCloudFrontOriginAccessIdentity", input)
	return &CreateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistribution", input)
	return &CreateDistributionFuture{Future: future}
}

func (a *stub) CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CreateDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistributionWithTags", input)
	return &CreateDistributionWithTagsFuture{Future: future}
}

func (a *stub) CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CreateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionConfig", input)
	return &CreateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CreateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionProfile", input)
	return &CreateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CreateInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateInvalidation", input)
	return &CreateInvalidationFuture{Future: future}
}

func (a *stub) CreateKeyGroup(ctx workflow.Context, input *cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error) {
	var output cloudfront.CreateKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyGroupAsync(ctx workflow.Context, input *cloudfront.CreateKeyGroupInput) *CreateKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateKeyGroup", input)
	return &CreateKeyGroupFuture{Future: future}
}

func (a *stub) CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CreateMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateMonitoringSubscription", input)
	return &CreateMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CreateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateOriginRequestPolicy", input)
	return &CreateOriginRequestPolicyFuture{Future: future}
}

func (a *stub) CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CreatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreatePublicKey", input)
	return &CreatePublicKeyFuture{Future: future}
}

func (a *stub) CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CreateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateRealtimeLogConfig", input)
	return &CreateRealtimeLogConfigFuture{Future: future}
}

func (a *stub) CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CreateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistribution", input)
	return &CreateStreamingDistributionFuture{Future: future}
}

func (a *stub) CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CreateStreamingDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistributionWithTags", input)
	return &CreateStreamingDistributionWithTagsFuture{Future: future}
}

func (a *stub) DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *DeleteCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCachePolicy", input)
	return &DeleteCachePolicyFuture{Future: future}
}

func (a *stub) DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *DeleteCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCloudFrontOriginAccessIdentity", input)
	return &DeleteCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *DeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteDistribution", input)
	return &DeleteDistributionFuture{Future: future}
}

func (a *stub) DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *DeleteFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionConfig", input)
	return &DeleteFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *DeleteFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionProfile", input)
	return &DeleteFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) DeleteKeyGroup(ctx workflow.Context, input *cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error) {
	var output cloudfront.DeleteKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKeyGroupAsync(ctx workflow.Context, input *cloudfront.DeleteKeyGroupInput) *DeleteKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteKeyGroup", input)
	return &DeleteKeyGroupFuture{Future: future}
}

func (a *stub) DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *DeleteMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteMonitoringSubscription", input)
	return &DeleteMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *DeleteOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteOriginRequestPolicy", input)
	return &DeleteOriginRequestPolicyFuture{Future: future}
}

func (a *stub) DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeletePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *DeletePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeletePublicKey", input)
	return &DeletePublicKeyFuture{Future: future}
}

func (a *stub) DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *DeleteRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteRealtimeLogConfig", input)
	return &DeleteRealtimeLogConfigFuture{Future: future}
}

func (a *stub) DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *DeleteStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteStreamingDistribution", input)
	return &DeleteStreamingDistributionFuture{Future: future}
}

func (a *stub) GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *GetCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicy", input)
	return &GetCachePolicyFuture{Future: future}
}

func (a *stub) GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *GetCachePolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicyConfig", input)
	return &GetCachePolicyConfigFuture{Future: future}
}

func (a *stub) GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *GetCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentity", input)
	return &GetCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentityConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *GetCloudFrontOriginAccessIdentityConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentityConfig", input)
	return &GetCloudFrontOriginAccessIdentityConfigFuture{Future: future}
}

func (a *stub) GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *GetDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistribution", input)
	return &GetDistributionFuture{Future: future}
}

func (a *stub) GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *GetDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistributionConfig", input)
	return &GetDistributionConfigFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *GetFieldLevelEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryption", input)
	return &GetFieldLevelEncryptionFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *GetFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionConfig", input)
	return &GetFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *GetFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfile", input)
	return &GetFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfileConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *GetFieldLevelEncryptionProfileConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfileConfig", input)
	return &GetFieldLevelEncryptionProfileConfigFuture{Future: future}
}

func (a *stub) GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *GetInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetInvalidation", input)
	return &GetInvalidationFuture{Future: future}
}

func (a *stub) GetKeyGroup(ctx workflow.Context, input *cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error) {
	var output cloudfront.GetKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyGroupAsync(ctx workflow.Context, input *cloudfront.GetKeyGroupInput) *GetKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroup", input)
	return &GetKeyGroupFuture{Future: future}
}

func (a *stub) GetKeyGroupConfig(ctx workflow.Context, input *cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error) {
	var output cloudfront.GetKeyGroupConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroupConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyGroupConfigAsync(ctx workflow.Context, input *cloudfront.GetKeyGroupConfigInput) *GetKeyGroupConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroupConfig", input)
	return &GetKeyGroupConfigFuture{Future: future}
}

func (a *stub) GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *GetMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetMonitoringSubscription", input)
	return &GetMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *GetOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicy", input)
	return &GetOriginRequestPolicyFuture{Future: future}
}

func (a *stub) GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *GetOriginRequestPolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicyConfig", input)
	return &GetOriginRequestPolicyConfigFuture{Future: future}
}

func (a *stub) GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *GetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKey", input)
	return &GetPublicKeyFuture{Future: future}
}

func (a *stub) GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKeyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *GetPublicKeyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKeyConfig", input)
	return &GetPublicKeyConfigFuture{Future: future}
}

func (a *stub) GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *GetRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetRealtimeLogConfig", input)
	return &GetRealtimeLogConfigFuture{Future: future}
}

func (a *stub) GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *GetStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistribution", input)
	return &GetStreamingDistributionFuture{Future: future}
}

func (a *stub) GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *GetStreamingDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistributionConfig", input)
	return &GetStreamingDistributionConfigFuture{Future: future}
}

func (a *stub) ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCachePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *ListCachePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCachePolicies", input)
	return &ListCachePoliciesFuture{Future: future}
}

func (a *stub) ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCloudFrontOriginAccessIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *ListCloudFrontOriginAccessIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCloudFrontOriginAccessIdentities", input)
	return &ListCloudFrontOriginAccessIdentitiesFuture{Future: future}
}

func (a *stub) ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *ListDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributions", input)
	return &ListDistributionsFuture{Future: future}
}

func (a *stub) ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByCachePolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *ListDistributionsByCachePolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByCachePolicyId", input)
	return &ListDistributionsByCachePolicyIdFuture{Future: future}
}

func (a *stub) ListDistributionsByKeyGroup(ctx workflow.Context, input *cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	var output cloudfront.ListDistributionsByKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByKeyGroupAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByKeyGroupInput) *ListDistributionsByKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByKeyGroup", input)
	return &ListDistributionsByKeyGroupFuture{Future: future}
}

func (a *stub) ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByOriginRequestPolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *ListDistributionsByOriginRequestPolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByOriginRequestPolicyId", input)
	return &ListDistributionsByOriginRequestPolicyIdFuture{Future: future}
}

func (a *stub) ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *ListDistributionsByRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByRealtimeLogConfig", input)
	return &ListDistributionsByRealtimeLogConfigFuture{Future: future}
}

func (a *stub) ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByWebACLId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *ListDistributionsByWebACLIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByWebACLId", input)
	return &ListDistributionsByWebACLIdFuture{Future: future}
}

func (a *stub) ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *ListFieldLevelEncryptionConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionConfigs", input)
	return &ListFieldLevelEncryptionConfigsFuture{Future: future}
}

func (a *stub) ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *ListFieldLevelEncryptionProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionProfiles", input)
	return &ListFieldLevelEncryptionProfilesFuture{Future: future}
}

func (a *stub) ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListInvalidations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *ListInvalidationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListInvalidations", input)
	return &ListInvalidationsFuture{Future: future}
}

func (a *stub) ListKeyGroups(ctx workflow.Context, input *cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error) {
	var output cloudfront.ListKeyGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListKeyGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeyGroupsAsync(ctx workflow.Context, input *cloudfront.ListKeyGroupsInput) *ListKeyGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListKeyGroups", input)
	return &ListKeyGroupsFuture{Future: future}
}

func (a *stub) ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListOriginRequestPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *ListOriginRequestPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListOriginRequestPolicies", input)
	return &ListOriginRequestPoliciesFuture{Future: future}
}

func (a *stub) ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *ListPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListPublicKeys", input)
	return &ListPublicKeysFuture{Future: future}
}

func (a *stub) ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListRealtimeLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *ListRealtimeLogConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListRealtimeLogConfigs", input)
	return &ListRealtimeLogConfigsFuture{Future: future}
}

func (a *stub) ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListStreamingDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *ListStreamingDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListStreamingDistributions", input)
	return &ListStreamingDistributionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *UpdateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCachePolicy", input)
	return &UpdateCachePolicyFuture{Future: future}
}

func (a *stub) UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *UpdateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCloudFrontOriginAccessIdentity", input)
	return &UpdateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *UpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateDistribution", input)
	return &UpdateDistributionFuture{Future: future}
}

func (a *stub) UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *UpdateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionConfig", input)
	return &UpdateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *UpdateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionProfile", input)
	return &UpdateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) UpdateKeyGroup(ctx workflow.Context, input *cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error) {
	var output cloudfront.UpdateKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateKeyGroupAsync(ctx workflow.Context, input *cloudfront.UpdateKeyGroupInput) *UpdateKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateKeyGroup", input)
	return &UpdateKeyGroupFuture{Future: future}
}

func (a *stub) UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *UpdateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateOriginRequestPolicy", input)
	return &UpdateOriginRequestPolicyFuture{Future: future}
}

func (a *stub) UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *UpdatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdatePublicKey", input)
	return &UpdatePublicKeyFuture{Future: future}
}

func (a *stub) UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *UpdateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateRealtimeLogConfig", input)
	return &UpdateRealtimeLogConfigFuture{Future: future}
}

func (a *stub) UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *UpdateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateStreamingDistribution", input)
	return &UpdateStreamingDistributionFuture{Future: future}
}

func (a *stub) WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilDistributionDeployed", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilDistributionDeployed", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilInvalidationCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInvalidationCompletedAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilInvalidationCompleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilStreamingDistributionDeployed", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStreamingDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilStreamingDistributionDeployed", input)
	return clients.NewVoidFuture(future)
}
