// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudfrontstub

import (
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloudFrontCreateCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateDistributionWithTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateInvalidationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.CreateKeyGroupOutput, error) {
	var output cloudfront.CreateKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreatePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontCreateStreamingDistributionWithTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontCreateStreamingDistributionWithTagsFuture) Get(ctx workflow.Context) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.DeleteKeyGroupOutput, error) {
	var output cloudfront.DeleteKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeletePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeletePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontDeleteStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontDeleteStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetCachePolicyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetCachePolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetCloudFrontOriginAccessIdentityConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetCloudFrontOriginAccessIdentityConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetDistributionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetFieldLevelEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetFieldLevelEncryptionFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetFieldLevelEncryptionProfileConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetFieldLevelEncryptionProfileConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetInvalidationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetInvalidationFuture) Get(ctx workflow.Context) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.GetKeyGroupOutput, error) {
	var output cloudfront.GetKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetKeyGroupConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetKeyGroupConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetKeyGroupConfigOutput, error) {
	var output cloudfront.GetKeyGroupConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetMonitoringSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetMonitoringSubscriptionFuture) Get(ctx workflow.Context) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetOriginRequestPolicyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetOriginRequestPolicyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetPublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetPublicKeyConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetPublicKeyConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontGetStreamingDistributionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontGetStreamingDistributionConfigFuture) Get(ctx workflow.Context) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListCachePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListCachePoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListCloudFrontOriginAccessIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListCloudFrontOriginAccessIdentitiesFuture) Get(ctx workflow.Context) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsByCachePolicyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsByCachePolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsByKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsByKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	var output cloudfront.ListDistributionsByKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsByOriginRequestPolicyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsByOriginRequestPolicyIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsByRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsByRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListDistributionsByWebACLIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListDistributionsByWebACLIdFuture) Get(ctx workflow.Context) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListFieldLevelEncryptionConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListFieldLevelEncryptionConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListFieldLevelEncryptionProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListFieldLevelEncryptionProfilesFuture) Get(ctx workflow.Context) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListInvalidationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListInvalidationsFuture) Get(ctx workflow.Context) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListKeyGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListKeyGroupsFuture) Get(ctx workflow.Context) (*cloudfront.ListKeyGroupsOutput, error) {
	var output cloudfront.ListKeyGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListOriginRequestPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListOriginRequestPoliciesFuture) Get(ctx workflow.Context) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListPublicKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListPublicKeysFuture) Get(ctx workflow.Context) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListRealtimeLogConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListRealtimeLogConfigsFuture) Get(ctx workflow.Context) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListStreamingDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListStreamingDistributionsFuture) Get(ctx workflow.Context) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontTagResourceFuture) Get(ctx workflow.Context) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUntagResourceFuture) Get(ctx workflow.Context) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateCachePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateCachePolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateCloudFrontOriginAccessIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateCloudFrontOriginAccessIdentityFuture) Get(ctx workflow.Context) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateFieldLevelEncryptionConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateFieldLevelEncryptionConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateFieldLevelEncryptionProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateFieldLevelEncryptionProfileFuture) Get(ctx workflow.Context) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateKeyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateKeyGroupFuture) Get(ctx workflow.Context) (*cloudfront.UpdateKeyGroupOutput, error) {
	var output cloudfront.UpdateKeyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateOriginRequestPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateOriginRequestPolicyFuture) Get(ctx workflow.Context) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdatePublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdatePublicKeyFuture) Get(ctx workflow.Context) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateRealtimeLogConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateRealtimeLogConfigFuture) Get(ctx workflow.Context) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudFrontUpdateStreamingDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudFrontUpdateStreamingDistributionFuture) Get(ctx workflow.Context) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachePolicy(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	var output cloudfront.CreateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachePolicyAsync(ctx workflow.Context, input *cloudfront.CreateCachePolicyInput) *CloudFrontCreateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCachePolicy", input)
	return &CloudFrontCreateCachePolicyFuture{Future: future}
}

func (a *stub) CreateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.CreateCloudFrontOriginAccessIdentityInput) *CloudFrontCreateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateCloudFrontOriginAccessIdentity", input)
	return &CloudFrontCreateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) CreateDistribution(ctx workflow.Context, input *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	var output cloudfront.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionAsync(ctx workflow.Context, input *cloudfront.CreateDistributionInput) *CloudFrontCreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistribution", input)
	return &CloudFrontCreateDistributionFuture{Future: future}
}

func (a *stub) CreateDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	var output cloudfront.CreateDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateDistributionWithTagsInput) *CloudFrontCreateDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateDistributionWithTags", input)
	return &CloudFrontCreateDistributionWithTagsFuture{Future: future}
}

func (a *stub) CreateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionConfigInput) *CloudFrontCreateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionConfig", input)
	return &CloudFrontCreateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) CreateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.CreateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.CreateFieldLevelEncryptionProfileInput) *CloudFrontCreateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateFieldLevelEncryptionProfile", input)
	return &CloudFrontCreateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) CreateInvalidation(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	var output cloudfront.CreateInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInvalidationAsync(ctx workflow.Context, input *cloudfront.CreateInvalidationInput) *CloudFrontCreateInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateInvalidation", input)
	return &CloudFrontCreateInvalidationFuture{Future: future}
}

func (a *stub) CreateKeyGroup(ctx workflow.Context, input *cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error) {
	var output cloudfront.CreateKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyGroupAsync(ctx workflow.Context, input *cloudfront.CreateKeyGroupInput) *CloudFrontCreateKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateKeyGroup", input)
	return &CloudFrontCreateKeyGroupFuture{Future: future}
}

func (a *stub) CreateMonitoringSubscription(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	var output cloudfront.CreateMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.CreateMonitoringSubscriptionInput) *CloudFrontCreateMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateMonitoringSubscription", input)
	return &CloudFrontCreateMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) CreateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	var output cloudfront.CreateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.CreateOriginRequestPolicyInput) *CloudFrontCreateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateOriginRequestPolicy", input)
	return &CloudFrontCreateOriginRequestPolicyFuture{Future: future}
}

func (a *stub) CreatePublicKey(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	var output cloudfront.CreatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicKeyAsync(ctx workflow.Context, input *cloudfront.CreatePublicKeyInput) *CloudFrontCreatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreatePublicKey", input)
	return &CloudFrontCreatePublicKeyFuture{Future: future}
}

func (a *stub) CreateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	var output cloudfront.CreateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.CreateRealtimeLogConfigInput) *CloudFrontCreateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateRealtimeLogConfig", input)
	return &CloudFrontCreateRealtimeLogConfigFuture{Future: future}
}

func (a *stub) CreateStreamingDistribution(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	var output cloudfront.CreateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionInput) *CloudFrontCreateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistribution", input)
	return &CloudFrontCreateStreamingDistributionFuture{Future: future}
}

func (a *stub) CreateStreamingDistributionWithTags(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	var output cloudfront.CreateStreamingDistributionWithTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistributionWithTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamingDistributionWithTagsAsync(ctx workflow.Context, input *cloudfront.CreateStreamingDistributionWithTagsInput) *CloudFrontCreateStreamingDistributionWithTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-CreateStreamingDistributionWithTags", input)
	return &CloudFrontCreateStreamingDistributionWithTagsFuture{Future: future}
}

func (a *stub) DeleteCachePolicy(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	var output cloudfront.DeleteCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCachePolicyAsync(ctx workflow.Context, input *cloudfront.DeleteCachePolicyInput) *CloudFrontDeleteCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCachePolicy", input)
	return &CloudFrontDeleteCachePolicyFuture{Future: future}
}

func (a *stub) DeleteCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) *CloudFrontDeleteCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteCloudFrontOriginAccessIdentity", input)
	return &CloudFrontDeleteCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) DeleteDistribution(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	var output cloudfront.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteDistributionInput) *CloudFrontDeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteDistribution", input)
	return &CloudFrontDeleteDistributionFuture{Future: future}
}

func (a *stub) DeleteFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionConfigInput) *CloudFrontDeleteFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionConfig", input)
	return &CloudFrontDeleteFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) DeleteFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.DeleteFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.DeleteFieldLevelEncryptionProfileInput) *CloudFrontDeleteFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteFieldLevelEncryptionProfile", input)
	return &CloudFrontDeleteFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) DeleteKeyGroup(ctx workflow.Context, input *cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error) {
	var output cloudfront.DeleteKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKeyGroupAsync(ctx workflow.Context, input *cloudfront.DeleteKeyGroupInput) *CloudFrontDeleteKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteKeyGroup", input)
	return &CloudFrontDeleteKeyGroupFuture{Future: future}
}

func (a *stub) DeleteMonitoringSubscription(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	var output cloudfront.DeleteMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.DeleteMonitoringSubscriptionInput) *CloudFrontDeleteMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteMonitoringSubscription", input)
	return &CloudFrontDeleteMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) DeleteOriginRequestPolicy(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	var output cloudfront.DeleteOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.DeleteOriginRequestPolicyInput) *CloudFrontDeleteOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteOriginRequestPolicy", input)
	return &CloudFrontDeleteOriginRequestPolicyFuture{Future: future}
}

func (a *stub) DeletePublicKey(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	var output cloudfront.DeletePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeletePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePublicKeyAsync(ctx workflow.Context, input *cloudfront.DeletePublicKeyInput) *CloudFrontDeletePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeletePublicKey", input)
	return &CloudFrontDeletePublicKeyFuture{Future: future}
}

func (a *stub) DeleteRealtimeLogConfig(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	var output cloudfront.DeleteRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.DeleteRealtimeLogConfigInput) *CloudFrontDeleteRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteRealtimeLogConfig", input)
	return &CloudFrontDeleteRealtimeLogConfigFuture{Future: future}
}

func (a *stub) DeleteStreamingDistribution(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	var output cloudfront.DeleteStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.DeleteStreamingDistributionInput) *CloudFrontDeleteStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-DeleteStreamingDistribution", input)
	return &CloudFrontDeleteStreamingDistributionFuture{Future: future}
}

func (a *stub) GetCachePolicy(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	var output cloudfront.GetCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCachePolicyAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyInput) *CloudFrontGetCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicy", input)
	return &CloudFrontGetCachePolicyFuture{Future: future}
}

func (a *stub) GetCachePolicyConfig(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	var output cloudfront.GetCachePolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCachePolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetCachePolicyConfigInput) *CloudFrontGetCachePolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCachePolicyConfig", input)
	return &CloudFrontGetCachePolicyConfigFuture{Future: future}
}

func (a *stub) GetCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityInput) *CloudFrontGetCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentity", input)
	return &CloudFrontGetCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) GetCloudFrontOriginAccessIdentityConfig(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	var output cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentityConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFrontOriginAccessIdentityConfigAsync(ctx workflow.Context, input *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) *CloudFrontGetCloudFrontOriginAccessIdentityConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetCloudFrontOriginAccessIdentityConfig", input)
	return &CloudFrontGetCloudFrontOriginAccessIdentityConfigFuture{Future: future}
}

func (a *stub) GetDistribution(ctx workflow.Context, input *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	var output cloudfront.GetDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *CloudFrontGetDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistribution", input)
	return &CloudFrontGetDistributionFuture{Future: future}
}

func (a *stub) GetDistributionConfig(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	var output cloudfront.GetDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetDistributionConfigInput) *CloudFrontGetDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetDistributionConfig", input)
	return &CloudFrontGetDistributionConfigFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryption(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionInput) *CloudFrontGetFieldLevelEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryption", input)
	return &CloudFrontGetFieldLevelEncryptionFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionConfigInput) *CloudFrontGetFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionConfig", input)
	return &CloudFrontGetFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileInput) *CloudFrontGetFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfile", input)
	return &CloudFrontGetFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) GetFieldLevelEncryptionProfileConfig(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	var output cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfileConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFieldLevelEncryptionProfileConfigAsync(ctx workflow.Context, input *cloudfront.GetFieldLevelEncryptionProfileConfigInput) *CloudFrontGetFieldLevelEncryptionProfileConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetFieldLevelEncryptionProfileConfig", input)
	return &CloudFrontGetFieldLevelEncryptionProfileConfigFuture{Future: future}
}

func (a *stub) GetInvalidation(ctx workflow.Context, input *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	var output cloudfront.GetInvalidationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetInvalidation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvalidationAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *CloudFrontGetInvalidationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetInvalidation", input)
	return &CloudFrontGetInvalidationFuture{Future: future}
}

func (a *stub) GetKeyGroup(ctx workflow.Context, input *cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error) {
	var output cloudfront.GetKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyGroupAsync(ctx workflow.Context, input *cloudfront.GetKeyGroupInput) *CloudFrontGetKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroup", input)
	return &CloudFrontGetKeyGroupFuture{Future: future}
}

func (a *stub) GetKeyGroupConfig(ctx workflow.Context, input *cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error) {
	var output cloudfront.GetKeyGroupConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroupConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyGroupConfigAsync(ctx workflow.Context, input *cloudfront.GetKeyGroupConfigInput) *CloudFrontGetKeyGroupConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetKeyGroupConfig", input)
	return &CloudFrontGetKeyGroupConfigFuture{Future: future}
}

func (a *stub) GetMonitoringSubscription(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	var output cloudfront.GetMonitoringSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetMonitoringSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMonitoringSubscriptionAsync(ctx workflow.Context, input *cloudfront.GetMonitoringSubscriptionInput) *CloudFrontGetMonitoringSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetMonitoringSubscription", input)
	return &CloudFrontGetMonitoringSubscriptionFuture{Future: future}
}

func (a *stub) GetOriginRequestPolicy(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	var output cloudfront.GetOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyInput) *CloudFrontGetOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicy", input)
	return &CloudFrontGetOriginRequestPolicyFuture{Future: future}
}

func (a *stub) GetOriginRequestPolicyConfig(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	var output cloudfront.GetOriginRequestPolicyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOriginRequestPolicyConfigAsync(ctx workflow.Context, input *cloudfront.GetOriginRequestPolicyConfigInput) *CloudFrontGetOriginRequestPolicyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetOriginRequestPolicyConfig", input)
	return &CloudFrontGetOriginRequestPolicyConfigFuture{Future: future}
}

func (a *stub) GetPublicKey(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	var output cloudfront.GetPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicKeyAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyInput) *CloudFrontGetPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKey", input)
	return &CloudFrontGetPublicKeyFuture{Future: future}
}

func (a *stub) GetPublicKeyConfig(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	var output cloudfront.GetPublicKeyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKeyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicKeyConfigAsync(ctx workflow.Context, input *cloudfront.GetPublicKeyConfigInput) *CloudFrontGetPublicKeyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetPublicKeyConfig", input)
	return &CloudFrontGetPublicKeyConfigFuture{Future: future}
}

func (a *stub) GetRealtimeLogConfig(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	var output cloudfront.GetRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.GetRealtimeLogConfigInput) *CloudFrontGetRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetRealtimeLogConfig", input)
	return &CloudFrontGetRealtimeLogConfigFuture{Future: future}
}

func (a *stub) GetStreamingDistribution(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	var output cloudfront.GetStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *CloudFrontGetStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistribution", input)
	return &CloudFrontGetStreamingDistributionFuture{Future: future}
}

func (a *stub) GetStreamingDistributionConfig(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	var output cloudfront.GetStreamingDistributionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistributionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStreamingDistributionConfigAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionConfigInput) *CloudFrontGetStreamingDistributionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-GetStreamingDistributionConfig", input)
	return &CloudFrontGetStreamingDistributionConfigFuture{Future: future}
}

func (a *stub) ListCachePolicies(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	var output cloudfront.ListCachePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCachePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCachePoliciesAsync(ctx workflow.Context, input *cloudfront.ListCachePoliciesInput) *CloudFrontListCachePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCachePolicies", input)
	return &CloudFrontListCachePoliciesFuture{Future: future}
}

func (a *stub) ListCloudFrontOriginAccessIdentities(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	var output cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCloudFrontOriginAccessIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCloudFrontOriginAccessIdentitiesAsync(ctx workflow.Context, input *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) *CloudFrontListCloudFrontOriginAccessIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListCloudFrontOriginAccessIdentities", input)
	return &CloudFrontListCloudFrontOriginAccessIdentitiesFuture{Future: future}
}

func (a *stub) ListDistributions(ctx workflow.Context, input *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	var output cloudfront.ListDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsAsync(ctx workflow.Context, input *cloudfront.ListDistributionsInput) *CloudFrontListDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributions", input)
	return &CloudFrontListDistributionsFuture{Future: future}
}

func (a *stub) ListDistributionsByCachePolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByCachePolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByCachePolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByCachePolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByCachePolicyIdInput) *CloudFrontListDistributionsByCachePolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByCachePolicyId", input)
	return &CloudFrontListDistributionsByCachePolicyIdFuture{Future: future}
}

func (a *stub) ListDistributionsByKeyGroup(ctx workflow.Context, input *cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	var output cloudfront.ListDistributionsByKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByKeyGroupAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByKeyGroupInput) *CloudFrontListDistributionsByKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByKeyGroup", input)
	return &CloudFrontListDistributionsByKeyGroupFuture{Future: future}
}

func (a *stub) ListDistributionsByOriginRequestPolicyId(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	var output cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByOriginRequestPolicyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByOriginRequestPolicyIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) *CloudFrontListDistributionsByOriginRequestPolicyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByOriginRequestPolicyId", input)
	return &CloudFrontListDistributionsByOriginRequestPolicyIdFuture{Future: future}
}

func (a *stub) ListDistributionsByRealtimeLogConfig(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	var output cloudfront.ListDistributionsByRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByRealtimeLogConfigInput) *CloudFrontListDistributionsByRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByRealtimeLogConfig", input)
	return &CloudFrontListDistributionsByRealtimeLogConfigFuture{Future: future}
}

func (a *stub) ListDistributionsByWebACLId(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	var output cloudfront.ListDistributionsByWebACLIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByWebACLId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributionsByWebACLIdAsync(ctx workflow.Context, input *cloudfront.ListDistributionsByWebACLIdInput) *CloudFrontListDistributionsByWebACLIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListDistributionsByWebACLId", input)
	return &CloudFrontListDistributionsByWebACLIdFuture{Future: future}
}

func (a *stub) ListFieldLevelEncryptionConfigs(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFieldLevelEncryptionConfigsAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionConfigsInput) *CloudFrontListFieldLevelEncryptionConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionConfigs", input)
	return &CloudFrontListFieldLevelEncryptionConfigsFuture{Future: future}
}

func (a *stub) ListFieldLevelEncryptionProfiles(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	var output cloudfront.ListFieldLevelEncryptionProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFieldLevelEncryptionProfilesAsync(ctx workflow.Context, input *cloudfront.ListFieldLevelEncryptionProfilesInput) *CloudFrontListFieldLevelEncryptionProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListFieldLevelEncryptionProfiles", input)
	return &CloudFrontListFieldLevelEncryptionProfilesFuture{Future: future}
}

func (a *stub) ListInvalidations(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	var output cloudfront.ListInvalidationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListInvalidations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInvalidationsAsync(ctx workflow.Context, input *cloudfront.ListInvalidationsInput) *CloudFrontListInvalidationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListInvalidations", input)
	return &CloudFrontListInvalidationsFuture{Future: future}
}

func (a *stub) ListKeyGroups(ctx workflow.Context, input *cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error) {
	var output cloudfront.ListKeyGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListKeyGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeyGroupsAsync(ctx workflow.Context, input *cloudfront.ListKeyGroupsInput) *CloudFrontListKeyGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListKeyGroups", input)
	return &CloudFrontListKeyGroupsFuture{Future: future}
}

func (a *stub) ListOriginRequestPolicies(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	var output cloudfront.ListOriginRequestPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListOriginRequestPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOriginRequestPoliciesAsync(ctx workflow.Context, input *cloudfront.ListOriginRequestPoliciesInput) *CloudFrontListOriginRequestPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListOriginRequestPolicies", input)
	return &CloudFrontListOriginRequestPoliciesFuture{Future: future}
}

func (a *stub) ListPublicKeys(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	var output cloudfront.ListPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPublicKeysAsync(ctx workflow.Context, input *cloudfront.ListPublicKeysInput) *CloudFrontListPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListPublicKeys", input)
	return &CloudFrontListPublicKeysFuture{Future: future}
}

func (a *stub) ListRealtimeLogConfigs(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	var output cloudfront.ListRealtimeLogConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListRealtimeLogConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRealtimeLogConfigsAsync(ctx workflow.Context, input *cloudfront.ListRealtimeLogConfigsInput) *CloudFrontListRealtimeLogConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListRealtimeLogConfigs", input)
	return &CloudFrontListRealtimeLogConfigsFuture{Future: future}
}

func (a *stub) ListStreamingDistributions(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	var output cloudfront.ListStreamingDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListStreamingDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamingDistributionsAsync(ctx workflow.Context, input *cloudfront.ListStreamingDistributionsInput) *CloudFrontListStreamingDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListStreamingDistributions", input)
	return &CloudFrontListStreamingDistributionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	var output cloudfront.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudfront.ListTagsForResourceInput) *CloudFrontListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-ListTagsForResource", input)
	return &CloudFrontListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	var output cloudfront.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cloudfront.TagResourceInput) *CloudFrontTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-TagResource", input)
	return &CloudFrontTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	var output cloudfront.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cloudfront.UntagResourceInput) *CloudFrontUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UntagResource", input)
	return &CloudFrontUntagResourceFuture{Future: future}
}

func (a *stub) UpdateCachePolicy(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	var output cloudfront.UpdateCachePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCachePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCachePolicyAsync(ctx workflow.Context, input *cloudfront.UpdateCachePolicyInput) *CloudFrontUpdateCachePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCachePolicy", input)
	return &CloudFrontUpdateCachePolicyFuture{Future: future}
}

func (a *stub) UpdateCloudFrontOriginAccessIdentity(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	var output cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCloudFrontOriginAccessIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCloudFrontOriginAccessIdentityAsync(ctx workflow.Context, input *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) *CloudFrontUpdateCloudFrontOriginAccessIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateCloudFrontOriginAccessIdentity", input)
	return &CloudFrontUpdateCloudFrontOriginAccessIdentityFuture{Future: future}
}

func (a *stub) UpdateDistribution(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	var output cloudfront.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateDistributionInput) *CloudFrontUpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateDistribution", input)
	return &CloudFrontUpdateDistributionFuture{Future: future}
}

func (a *stub) UpdateFieldLevelEncryptionConfig(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFieldLevelEncryptionConfigAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionConfigInput) *CloudFrontUpdateFieldLevelEncryptionConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionConfig", input)
	return &CloudFrontUpdateFieldLevelEncryptionConfigFuture{Future: future}
}

func (a *stub) UpdateFieldLevelEncryptionProfile(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	var output cloudfront.UpdateFieldLevelEncryptionProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFieldLevelEncryptionProfileAsync(ctx workflow.Context, input *cloudfront.UpdateFieldLevelEncryptionProfileInput) *CloudFrontUpdateFieldLevelEncryptionProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateFieldLevelEncryptionProfile", input)
	return &CloudFrontUpdateFieldLevelEncryptionProfileFuture{Future: future}
}

func (a *stub) UpdateKeyGroup(ctx workflow.Context, input *cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error) {
	var output cloudfront.UpdateKeyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateKeyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateKeyGroupAsync(ctx workflow.Context, input *cloudfront.UpdateKeyGroupInput) *CloudFrontUpdateKeyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateKeyGroup", input)
	return &CloudFrontUpdateKeyGroupFuture{Future: future}
}

func (a *stub) UpdateOriginRequestPolicy(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	var output cloudfront.UpdateOriginRequestPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateOriginRequestPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOriginRequestPolicyAsync(ctx workflow.Context, input *cloudfront.UpdateOriginRequestPolicyInput) *CloudFrontUpdateOriginRequestPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateOriginRequestPolicy", input)
	return &CloudFrontUpdateOriginRequestPolicyFuture{Future: future}
}

func (a *stub) UpdatePublicKey(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	var output cloudfront.UpdatePublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdatePublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePublicKeyAsync(ctx workflow.Context, input *cloudfront.UpdatePublicKeyInput) *CloudFrontUpdatePublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdatePublicKey", input)
	return &CloudFrontUpdatePublicKeyFuture{Future: future}
}

func (a *stub) UpdateRealtimeLogConfig(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	var output cloudfront.UpdateRealtimeLogConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateRealtimeLogConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRealtimeLogConfigAsync(ctx workflow.Context, input *cloudfront.UpdateRealtimeLogConfigInput) *CloudFrontUpdateRealtimeLogConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateRealtimeLogConfig", input)
	return &CloudFrontUpdateRealtimeLogConfigFuture{Future: future}
}

func (a *stub) UpdateStreamingDistribution(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	var output cloudfront.UpdateStreamingDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateStreamingDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStreamingDistributionAsync(ctx workflow.Context, input *cloudfront.UpdateStreamingDistributionInput) *CloudFrontUpdateStreamingDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-UpdateStreamingDistribution", input)
	return &CloudFrontUpdateStreamingDistributionFuture{Future: future}
}

func (a *stub) WaitUntilDistributionDeployed(ctx workflow.Context, input *cloudfront.GetDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilDistributionDeployed", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetDistributionInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilDistributionDeployed", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInvalidationCompleted(ctx workflow.Context, input *cloudfront.GetInvalidationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilInvalidationCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInvalidationCompletedAsync(ctx workflow.Context, input *cloudfront.GetInvalidationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilInvalidationCompleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilStreamingDistributionDeployed(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilStreamingDistributionDeployed", input).Get(ctx, nil)
}

func (a *stub) WaitUntilStreamingDistributionDeployedAsync(ctx workflow.Context, input *cloudfront.GetStreamingDistributionInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudfront-WaitUntilStreamingDistributionDeployed", input)
	return clients.NewVoidFuture(future)
}
