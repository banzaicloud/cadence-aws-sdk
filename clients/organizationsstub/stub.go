// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package organizationsstub

import (
	"github.com/aws/aws-sdk-go/service/organizations"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptHandshakeFuture) Get(ctx workflow.Context) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachPolicyFuture) Get(ctx workflow.Context) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelHandshakeFuture) Get(ctx workflow.Context) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccountFuture) Get(ctx workflow.Context) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGovCloudAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGovCloudAccountFuture) Get(ctx workflow.Context) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOrganizationFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePolicyFuture) Get(ctx workflow.Context) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeclineHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeclineHandshakeFuture) Get(ctx workflow.Context) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOrganizationFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePolicyFuture) Get(ctx workflow.Context) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterDelegatedAdministratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountFuture) Get(ctx workflow.Context) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCreateAccountStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEffectivePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEffectivePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHandshakeFuture) Get(ctx workflow.Context) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachPolicyFuture) Get(ctx workflow.Context) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableAWSServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisablePolicyTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableAWSServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableAllFeaturesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableAllFeaturesFuture) Get(ctx workflow.Context) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnablePolicyTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InviteAccountToOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InviteAccountToOrganizationFuture) Get(ctx workflow.Context) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LeaveOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LeaveOrganizationFuture) Get(ctx workflow.Context) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAWSServiceAccessForOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAWSServiceAccessForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountsFuture) Get(ctx workflow.Context) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountsForParentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountsForParentFuture) Get(ctx workflow.Context) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChildrenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChildrenFuture) Get(ctx workflow.Context) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCreateAccountStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDelegatedAdministratorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDelegatedAdministratorsFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDelegatedServicesForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDelegatedServicesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHandshakesForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHandshakesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHandshakesForOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHandshakesForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOrganizationalUnitsForParentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOrganizationalUnitsForParentFuture) Get(ctx workflow.Context) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListParentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListParentsFuture) Get(ctx workflow.Context) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPoliciesFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPoliciesForTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPoliciesForTargetFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRootsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRootsFuture) Get(ctx workflow.Context) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTargetsForPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTargetsForPolicyFuture) Get(ctx workflow.Context) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MoveAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MoveAccountFuture) Get(ctx workflow.Context) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterDelegatedAdministratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveAccountFromOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveAccountFromOrganizationFuture) Get(ctx workflow.Context) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePolicyFuture) Get(ctx workflow.Context) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptHandshake(ctx workflow.Context, input *organizations.AcceptHandshakeInput) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-AcceptHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptHandshakeAsync(ctx workflow.Context, input *organizations.AcceptHandshakeInput) *AcceptHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-AcceptHandshake", input)
	return &AcceptHandshakeFuture{Future: future}
}

func (a *stub) AttachPolicy(ctx workflow.Context, input *organizations.AttachPolicyInput) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPolicyAsync(ctx workflow.Context, input *organizations.AttachPolicyInput) *AttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-AttachPolicy", input)
	return &AttachPolicyFuture{Future: future}
}

func (a *stub) CancelHandshake(ctx workflow.Context, input *organizations.CancelHandshakeInput) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CancelHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelHandshakeAsync(ctx workflow.Context, input *organizations.CancelHandshakeInput) *CancelHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CancelHandshake", input)
	return &CancelHandshakeFuture{Future: future}
}

func (a *stub) CreateAccount(ctx workflow.Context, input *organizations.CreateAccountInput) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountAsync(ctx workflow.Context, input *organizations.CreateAccountInput) *CreateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateAccount", input)
	return &CreateAccountFuture{Future: future}
}

func (a *stub) CreateGovCloudAccount(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateGovCloudAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGovCloudAccountAsync(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) *CreateGovCloudAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateGovCloudAccount", input)
	return &CreateGovCloudAccountFuture{Future: future}
}

func (a *stub) CreateOrganization(ctx workflow.Context, input *organizations.CreateOrganizationInput) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationAsync(ctx workflow.Context, input *organizations.CreateOrganizationInput) *CreateOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganization", input)
	return &CreateOrganizationFuture{Future: future}
}

func (a *stub) CreateOrganizationalUnit(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) *CreateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganizationalUnit", input)
	return &CreateOrganizationalUnitFuture{Future: future}
}

func (a *stub) CreatePolicy(ctx workflow.Context, input *organizations.CreatePolicyInput) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyAsync(ctx workflow.Context, input *organizations.CreatePolicyInput) *CreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreatePolicy", input)
	return &CreatePolicyFuture{Future: future}
}

func (a *stub) DeclineHandshake(ctx workflow.Context, input *organizations.DeclineHandshakeInput) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeclineHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeclineHandshakeAsync(ctx workflow.Context, input *organizations.DeclineHandshakeInput) *DeclineHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeclineHandshake", input)
	return &DeclineHandshakeFuture{Future: future}
}

func (a *stub) DeleteOrganization(ctx workflow.Context, input *organizations.DeleteOrganizationInput) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationAsync(ctx workflow.Context, input *organizations.DeleteOrganizationInput) *DeleteOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganization", input)
	return &DeleteOrganizationFuture{Future: future}
}

func (a *stub) DeleteOrganizationalUnit(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) *DeleteOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganizationalUnit", input)
	return &DeleteOrganizationalUnitFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *organizations.DeletePolicyInput) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *organizations.DeletePolicyInput) *DeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeletePolicy", input)
	return &DeletePolicyFuture{Future: future}
}

func (a *stub) DeregisterDelegatedAdministrator(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeregisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) *DeregisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeregisterDelegatedAdministrator", input)
	return &DeregisterDelegatedAdministratorFuture{Future: future}
}

func (a *stub) DescribeAccount(ctx workflow.Context, input *organizations.DescribeAccountInput) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAsync(ctx workflow.Context, input *organizations.DescribeAccountInput) *DescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeAccount", input)
	return &DescribeAccountFuture{Future: future}
}

func (a *stub) DescribeCreateAccountStatus(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCreateAccountStatusAsync(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) *DescribeCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeCreateAccountStatus", input)
	return &DescribeCreateAccountStatusFuture{Future: future}
}

func (a *stub) DescribeEffectivePolicy(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeEffectivePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEffectivePolicyAsync(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) *DescribeEffectivePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeEffectivePolicy", input)
	return &DescribeEffectivePolicyFuture{Future: future}
}

func (a *stub) DescribeHandshake(ctx workflow.Context, input *organizations.DescribeHandshakeInput) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHandshakeAsync(ctx workflow.Context, input *organizations.DescribeHandshakeInput) *DescribeHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeHandshake", input)
	return &DescribeHandshakeFuture{Future: future}
}

func (a *stub) DescribeOrganization(ctx workflow.Context, input *organizations.DescribeOrganizationInput) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationAsync(ctx workflow.Context, input *organizations.DescribeOrganizationInput) *DescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganization", input)
	return &DescribeOrganizationFuture{Future: future}
}

func (a *stub) DescribeOrganizationalUnit(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) *DescribeOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganizationalUnit", input)
	return &DescribeOrganizationalUnitFuture{Future: future}
}

func (a *stub) DescribePolicy(ctx workflow.Context, input *organizations.DescribePolicyInput) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePolicyAsync(ctx workflow.Context, input *organizations.DescribePolicyInput) *DescribePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribePolicy", input)
	return &DescribePolicyFuture{Future: future}
}

func (a *stub) DetachPolicy(ctx workflow.Context, input *organizations.DetachPolicyInput) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPolicyAsync(ctx workflow.Context, input *organizations.DetachPolicyInput) *DetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DetachPolicy", input)
	return &DetachPolicyFuture{Future: future}
}

func (a *stub) DisableAWSServiceAccess(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DisableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) *DisableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DisableAWSServiceAccess", input)
	return &DisableAWSServiceAccessFuture{Future: future}
}

func (a *stub) DisablePolicyType(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DisablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisablePolicyTypeAsync(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) *DisablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DisablePolicyType", input)
	return &DisablePolicyTypeFuture{Future: future}
}

func (a *stub) EnableAWSServiceAccess(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) *EnableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAWSServiceAccess", input)
	return &EnableAWSServiceAccessFuture{Future: future}
}

func (a *stub) EnableAllFeatures(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAllFeatures", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAllFeaturesAsync(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) *EnableAllFeaturesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAllFeatures", input)
	return &EnableAllFeaturesFuture{Future: future}
}

func (a *stub) EnablePolicyType(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnablePolicyTypeAsync(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) *EnablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnablePolicyType", input)
	return &EnablePolicyTypeFuture{Future: future}
}

func (a *stub) InviteAccountToOrganization(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-InviteAccountToOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InviteAccountToOrganizationAsync(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) *InviteAccountToOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-InviteAccountToOrganization", input)
	return &InviteAccountToOrganizationFuture{Future: future}
}

func (a *stub) LeaveOrganization(ctx workflow.Context, input *organizations.LeaveOrganizationInput) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-LeaveOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LeaveOrganizationAsync(ctx workflow.Context, input *organizations.LeaveOrganizationInput) *LeaveOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-LeaveOrganization", input)
	return &LeaveOrganizationFuture{Future: future}
}

func (a *stub) ListAWSServiceAccessForOrganization(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAWSServiceAccessForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAWSServiceAccessForOrganizationAsync(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) *ListAWSServiceAccessForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAWSServiceAccessForOrganization", input)
	return &ListAWSServiceAccessForOrganizationFuture{Future: future}
}

func (a *stub) ListAccounts(ctx workflow.Context, input *organizations.ListAccountsInput) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsAsync(ctx workflow.Context, input *organizations.ListAccountsInput) *ListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccounts", input)
	return &ListAccountsFuture{Future: future}
}

func (a *stub) ListAccountsForParent(ctx workflow.Context, input *organizations.ListAccountsForParentInput) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccountsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsForParentAsync(ctx workflow.Context, input *organizations.ListAccountsForParentInput) *ListAccountsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccountsForParent", input)
	return &ListAccountsForParentFuture{Future: future}
}

func (a *stub) ListChildren(ctx workflow.Context, input *organizations.ListChildrenInput) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChildrenAsync(ctx workflow.Context, input *organizations.ListChildrenInput) *ListChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListChildren", input)
	return &ListChildrenFuture{Future: future}
}

func (a *stub) ListCreateAccountStatus(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCreateAccountStatusAsync(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) *ListCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListCreateAccountStatus", input)
	return &ListCreateAccountStatusFuture{Future: future}
}

func (a *stub) ListDelegatedAdministrators(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedAdministrators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDelegatedAdministratorsAsync(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) *ListDelegatedAdministratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedAdministrators", input)
	return &ListDelegatedAdministratorsFuture{Future: future}
}

func (a *stub) ListDelegatedServicesForAccount(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedServicesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDelegatedServicesForAccountAsync(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) *ListDelegatedServicesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedServicesForAccount", input)
	return &ListDelegatedServicesForAccountFuture{Future: future}
}

func (a *stub) ListHandshakesForAccount(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHandshakesForAccountAsync(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) *ListHandshakesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForAccount", input)
	return &ListHandshakesForAccountFuture{Future: future}
}

func (a *stub) ListHandshakesForOrganization(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHandshakesForOrganizationAsync(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) *ListHandshakesForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForOrganization", input)
	return &ListHandshakesForOrganizationFuture{Future: future}
}

func (a *stub) ListOrganizationalUnitsForParent(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListOrganizationalUnitsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationalUnitsForParentAsync(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) *ListOrganizationalUnitsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListOrganizationalUnitsForParent", input)
	return &ListOrganizationalUnitsForParentFuture{Future: future}
}

func (a *stub) ListParents(ctx workflow.Context, input *organizations.ListParentsInput) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListParents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListParentsAsync(ctx workflow.Context, input *organizations.ListParentsInput) *ListParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListParents", input)
	return &ListParentsFuture{Future: future}
}

func (a *stub) ListPolicies(ctx workflow.Context, input *organizations.ListPoliciesInput) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesAsync(ctx workflow.Context, input *organizations.ListPoliciesInput) *ListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListPolicies", input)
	return &ListPoliciesFuture{Future: future}
}

func (a *stub) ListPoliciesForTarget(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListPoliciesForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesForTargetAsync(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) *ListPoliciesForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListPoliciesForTarget", input)
	return &ListPoliciesForTargetFuture{Future: future}
}

func (a *stub) ListRoots(ctx workflow.Context, input *organizations.ListRootsInput) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListRoots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRootsAsync(ctx workflow.Context, input *organizations.ListRootsInput) *ListRootsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListRoots", input)
	return &ListRootsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *organizations.ListTagsForResourceInput) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *organizations.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargetsForPolicy(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListTargetsForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsForPolicyAsync(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) *ListTargetsForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListTargetsForPolicy", input)
	return &ListTargetsForPolicyFuture{Future: future}
}

func (a *stub) MoveAccount(ctx workflow.Context, input *organizations.MoveAccountInput) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-MoveAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MoveAccountAsync(ctx workflow.Context, input *organizations.MoveAccountInput) *MoveAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-MoveAccount", input)
	return &MoveAccountFuture{Future: future}
}

func (a *stub) RegisterDelegatedAdministrator(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-RegisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) *RegisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-RegisterDelegatedAdministrator", input)
	return &RegisterDelegatedAdministratorFuture{Future: future}
}

func (a *stub) RemoveAccountFromOrganization(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-RemoveAccountFromOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveAccountFromOrganizationAsync(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) *RemoveAccountFromOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-RemoveAccountFromOrganization", input)
	return &RemoveAccountFromOrganizationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *organizations.TagResourceInput) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *organizations.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *organizations.UntagResourceInput) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *organizations.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateOrganizationalUnit(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UpdateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) *UpdateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UpdateOrganizationalUnit", input)
	return &UpdateOrganizationalUnitFuture{Future: future}
}

func (a *stub) UpdatePolicy(ctx workflow.Context, input *organizations.UpdatePolicyInput) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UpdatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePolicyAsync(ctx workflow.Context, input *organizations.UpdatePolicyInput) *UpdatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UpdatePolicy", input)
	return &UpdatePolicyFuture{Future: future}
}
