// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package organizationsstub

import (
	"github.com/aws/aws-sdk-go/service/organizations"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type OrganizationsAcceptHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsAcceptHandshakeFuture) Get(ctx workflow.Context) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsAttachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsAttachPolicyFuture) Get(ctx workflow.Context) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCancelHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCancelHandshakeFuture) Get(ctx workflow.Context) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCreateAccountFuture) Get(ctx workflow.Context) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateGovCloudAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCreateGovCloudAccountFuture) Get(ctx workflow.Context) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCreateOrganizationFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreateOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCreateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsCreatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsCreatePolicyFuture) Get(ctx workflow.Context) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeclineHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDeclineHandshakeFuture) Get(ctx workflow.Context) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeleteOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDeleteOrganizationFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeleteOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDeleteOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDeletePolicyFuture) Get(ctx workflow.Context) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDeregisterDelegatedAdministratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDeregisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeAccountFuture) Get(ctx workflow.Context) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeCreateAccountStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeEffectivePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeEffectivePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeHandshakeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeHandshakeFuture) Get(ctx workflow.Context) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeOrganizationFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribeOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribeOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDescribePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDescribePolicyFuture) Get(ctx workflow.Context) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDetachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDetachPolicyFuture) Get(ctx workflow.Context) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDisableAWSServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDisableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsDisablePolicyTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsDisablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnableAWSServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsEnableAWSServiceAccessFuture) Get(ctx workflow.Context) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnableAllFeaturesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsEnableAllFeaturesFuture) Get(ctx workflow.Context) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsEnablePolicyTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsEnablePolicyTypeFuture) Get(ctx workflow.Context) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsInviteAccountToOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsInviteAccountToOrganizationFuture) Get(ctx workflow.Context) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsLeaveOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsLeaveOrganizationFuture) Get(ctx workflow.Context) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAWSServiceAccessForOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListAWSServiceAccessForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListAccountsFuture) Get(ctx workflow.Context) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListAccountsForParentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListAccountsForParentFuture) Get(ctx workflow.Context) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListChildrenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListChildrenFuture) Get(ctx workflow.Context) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListCreateAccountStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListCreateAccountStatusFuture) Get(ctx workflow.Context) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListDelegatedAdministratorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListDelegatedAdministratorsFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListDelegatedServicesForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListDelegatedServicesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListHandshakesForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListHandshakesForAccountFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListHandshakesForOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListHandshakesForOrganizationFuture) Get(ctx workflow.Context) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListOrganizationalUnitsForParentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListOrganizationalUnitsForParentFuture) Get(ctx workflow.Context) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListParentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListParentsFuture) Get(ctx workflow.Context) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListPoliciesFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListPoliciesForTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListPoliciesForTargetFuture) Get(ctx workflow.Context) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListRootsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListRootsFuture) Get(ctx workflow.Context) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListTagsForResourceFuture) Get(ctx workflow.Context) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsListTargetsForPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsListTargetsForPolicyFuture) Get(ctx workflow.Context) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsMoveAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsMoveAccountFuture) Get(ctx workflow.Context) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsRegisterDelegatedAdministratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsRegisterDelegatedAdministratorFuture) Get(ctx workflow.Context) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsRemoveAccountFromOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsRemoveAccountFromOrganizationFuture) Get(ctx workflow.Context) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsTagResourceFuture) Get(ctx workflow.Context) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsUntagResourceFuture) Get(ctx workflow.Context) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUpdateOrganizationalUnitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsUpdateOrganizationalUnitFuture) Get(ctx workflow.Context) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OrganizationsUpdatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OrganizationsUpdatePolicyFuture) Get(ctx workflow.Context) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptHandshake(ctx workflow.Context, input *organizations.AcceptHandshakeInput) (*organizations.AcceptHandshakeOutput, error) {
	var output organizations.AcceptHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-AcceptHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptHandshakeAsync(ctx workflow.Context, input *organizations.AcceptHandshakeInput) *OrganizationsAcceptHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-AcceptHandshake", input)
	return &OrganizationsAcceptHandshakeFuture{Future: future}
}

func (a *stub) AttachPolicy(ctx workflow.Context, input *organizations.AttachPolicyInput) (*organizations.AttachPolicyOutput, error) {
	var output organizations.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPolicyAsync(ctx workflow.Context, input *organizations.AttachPolicyInput) *OrganizationsAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-AttachPolicy", input)
	return &OrganizationsAttachPolicyFuture{Future: future}
}

func (a *stub) CancelHandshake(ctx workflow.Context, input *organizations.CancelHandshakeInput) (*organizations.CancelHandshakeOutput, error) {
	var output organizations.CancelHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CancelHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelHandshakeAsync(ctx workflow.Context, input *organizations.CancelHandshakeInput) *OrganizationsCancelHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CancelHandshake", input)
	return &OrganizationsCancelHandshakeFuture{Future: future}
}

func (a *stub) CreateAccount(ctx workflow.Context, input *organizations.CreateAccountInput) (*organizations.CreateAccountOutput, error) {
	var output organizations.CreateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountAsync(ctx workflow.Context, input *organizations.CreateAccountInput) *OrganizationsCreateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateAccount", input)
	return &OrganizationsCreateAccountFuture{Future: future}
}

func (a *stub) CreateGovCloudAccount(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) (*organizations.CreateGovCloudAccountOutput, error) {
	var output organizations.CreateGovCloudAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateGovCloudAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGovCloudAccountAsync(ctx workflow.Context, input *organizations.CreateGovCloudAccountInput) *OrganizationsCreateGovCloudAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateGovCloudAccount", input)
	return &OrganizationsCreateGovCloudAccountFuture{Future: future}
}

func (a *stub) CreateOrganization(ctx workflow.Context, input *organizations.CreateOrganizationInput) (*organizations.CreateOrganizationOutput, error) {
	var output organizations.CreateOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationAsync(ctx workflow.Context, input *organizations.CreateOrganizationInput) *OrganizationsCreateOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganization", input)
	return &OrganizationsCreateOrganizationFuture{Future: future}
}

func (a *stub) CreateOrganizationalUnit(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) (*organizations.CreateOrganizationalUnitOutput, error) {
	var output organizations.CreateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.CreateOrganizationalUnitInput) *OrganizationsCreateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreateOrganizationalUnit", input)
	return &OrganizationsCreateOrganizationalUnitFuture{Future: future}
}

func (a *stub) CreatePolicy(ctx workflow.Context, input *organizations.CreatePolicyInput) (*organizations.CreatePolicyOutput, error) {
	var output organizations.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyAsync(ctx workflow.Context, input *organizations.CreatePolicyInput) *OrganizationsCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-CreatePolicy", input)
	return &OrganizationsCreatePolicyFuture{Future: future}
}

func (a *stub) DeclineHandshake(ctx workflow.Context, input *organizations.DeclineHandshakeInput) (*organizations.DeclineHandshakeOutput, error) {
	var output organizations.DeclineHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeclineHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeclineHandshakeAsync(ctx workflow.Context, input *organizations.DeclineHandshakeInput) *OrganizationsDeclineHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeclineHandshake", input)
	return &OrganizationsDeclineHandshakeFuture{Future: future}
}

func (a *stub) DeleteOrganization(ctx workflow.Context, input *organizations.DeleteOrganizationInput) (*organizations.DeleteOrganizationOutput, error) {
	var output organizations.DeleteOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationAsync(ctx workflow.Context, input *organizations.DeleteOrganizationInput) *OrganizationsDeleteOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganization", input)
	return &OrganizationsDeleteOrganizationFuture{Future: future}
}

func (a *stub) DeleteOrganizationalUnit(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) (*organizations.DeleteOrganizationalUnitOutput, error) {
	var output organizations.DeleteOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DeleteOrganizationalUnitInput) *OrganizationsDeleteOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeleteOrganizationalUnit", input)
	return &OrganizationsDeleteOrganizationalUnitFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *organizations.DeletePolicyInput) (*organizations.DeletePolicyOutput, error) {
	var output organizations.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *organizations.DeletePolicyInput) *OrganizationsDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeletePolicy", input)
	return &OrganizationsDeletePolicyFuture{Future: future}
}

func (a *stub) DeregisterDelegatedAdministrator(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	var output organizations.DeregisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DeregisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.DeregisterDelegatedAdministratorInput) *OrganizationsDeregisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DeregisterDelegatedAdministrator", input)
	return &OrganizationsDeregisterDelegatedAdministratorFuture{Future: future}
}

func (a *stub) DescribeAccount(ctx workflow.Context, input *organizations.DescribeAccountInput) (*organizations.DescribeAccountOutput, error) {
	var output organizations.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAsync(ctx workflow.Context, input *organizations.DescribeAccountInput) *OrganizationsDescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeAccount", input)
	return &OrganizationsDescribeAccountFuture{Future: future}
}

func (a *stub) DescribeCreateAccountStatus(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) (*organizations.DescribeCreateAccountStatusOutput, error) {
	var output organizations.DescribeCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCreateAccountStatusAsync(ctx workflow.Context, input *organizations.DescribeCreateAccountStatusInput) *OrganizationsDescribeCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeCreateAccountStatus", input)
	return &OrganizationsDescribeCreateAccountStatusFuture{Future: future}
}

func (a *stub) DescribeEffectivePolicy(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) (*organizations.DescribeEffectivePolicyOutput, error) {
	var output organizations.DescribeEffectivePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeEffectivePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEffectivePolicyAsync(ctx workflow.Context, input *organizations.DescribeEffectivePolicyInput) *OrganizationsDescribeEffectivePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeEffectivePolicy", input)
	return &OrganizationsDescribeEffectivePolicyFuture{Future: future}
}

func (a *stub) DescribeHandshake(ctx workflow.Context, input *organizations.DescribeHandshakeInput) (*organizations.DescribeHandshakeOutput, error) {
	var output organizations.DescribeHandshakeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeHandshake", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHandshakeAsync(ctx workflow.Context, input *organizations.DescribeHandshakeInput) *OrganizationsDescribeHandshakeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeHandshake", input)
	return &OrganizationsDescribeHandshakeFuture{Future: future}
}

func (a *stub) DescribeOrganization(ctx workflow.Context, input *organizations.DescribeOrganizationInput) (*organizations.DescribeOrganizationOutput, error) {
	var output organizations.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationAsync(ctx workflow.Context, input *organizations.DescribeOrganizationInput) *OrganizationsDescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganization", input)
	return &OrganizationsDescribeOrganizationFuture{Future: future}
}

func (a *stub) DescribeOrganizationalUnit(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) (*organizations.DescribeOrganizationalUnitOutput, error) {
	var output organizations.DescribeOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationalUnitAsync(ctx workflow.Context, input *organizations.DescribeOrganizationalUnitInput) *OrganizationsDescribeOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribeOrganizationalUnit", input)
	return &OrganizationsDescribeOrganizationalUnitFuture{Future: future}
}

func (a *stub) DescribePolicy(ctx workflow.Context, input *organizations.DescribePolicyInput) (*organizations.DescribePolicyOutput, error) {
	var output organizations.DescribePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DescribePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePolicyAsync(ctx workflow.Context, input *organizations.DescribePolicyInput) *OrganizationsDescribePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DescribePolicy", input)
	return &OrganizationsDescribePolicyFuture{Future: future}
}

func (a *stub) DetachPolicy(ctx workflow.Context, input *organizations.DetachPolicyInput) (*organizations.DetachPolicyOutput, error) {
	var output organizations.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPolicyAsync(ctx workflow.Context, input *organizations.DetachPolicyInput) *OrganizationsDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DetachPolicy", input)
	return &OrganizationsDetachPolicyFuture{Future: future}
}

func (a *stub) DisableAWSServiceAccess(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) (*organizations.DisableAWSServiceAccessOutput, error) {
	var output organizations.DisableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DisableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.DisableAWSServiceAccessInput) *OrganizationsDisableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DisableAWSServiceAccess", input)
	return &OrganizationsDisableAWSServiceAccessFuture{Future: future}
}

func (a *stub) DisablePolicyType(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) (*organizations.DisablePolicyTypeOutput, error) {
	var output organizations.DisablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-DisablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisablePolicyTypeAsync(ctx workflow.Context, input *organizations.DisablePolicyTypeInput) *OrganizationsDisablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-DisablePolicyType", input)
	return &OrganizationsDisablePolicyTypeFuture{Future: future}
}

func (a *stub) EnableAWSServiceAccess(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) (*organizations.EnableAWSServiceAccessOutput, error) {
	var output organizations.EnableAWSServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAWSServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAWSServiceAccessAsync(ctx workflow.Context, input *organizations.EnableAWSServiceAccessInput) *OrganizationsEnableAWSServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAWSServiceAccess", input)
	return &OrganizationsEnableAWSServiceAccessFuture{Future: future}
}

func (a *stub) EnableAllFeatures(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) (*organizations.EnableAllFeaturesOutput, error) {
	var output organizations.EnableAllFeaturesOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAllFeatures", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAllFeaturesAsync(ctx workflow.Context, input *organizations.EnableAllFeaturesInput) *OrganizationsEnableAllFeaturesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnableAllFeatures", input)
	return &OrganizationsEnableAllFeaturesFuture{Future: future}
}

func (a *stub) EnablePolicyType(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) (*organizations.EnablePolicyTypeOutput, error) {
	var output organizations.EnablePolicyTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-EnablePolicyType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnablePolicyTypeAsync(ctx workflow.Context, input *organizations.EnablePolicyTypeInput) *OrganizationsEnablePolicyTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-EnablePolicyType", input)
	return &OrganizationsEnablePolicyTypeFuture{Future: future}
}

func (a *stub) InviteAccountToOrganization(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) (*organizations.InviteAccountToOrganizationOutput, error) {
	var output organizations.InviteAccountToOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-InviteAccountToOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InviteAccountToOrganizationAsync(ctx workflow.Context, input *organizations.InviteAccountToOrganizationInput) *OrganizationsInviteAccountToOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-InviteAccountToOrganization", input)
	return &OrganizationsInviteAccountToOrganizationFuture{Future: future}
}

func (a *stub) LeaveOrganization(ctx workflow.Context, input *organizations.LeaveOrganizationInput) (*organizations.LeaveOrganizationOutput, error) {
	var output organizations.LeaveOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-LeaveOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LeaveOrganizationAsync(ctx workflow.Context, input *organizations.LeaveOrganizationInput) *OrganizationsLeaveOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-LeaveOrganization", input)
	return &OrganizationsLeaveOrganizationFuture{Future: future}
}

func (a *stub) ListAWSServiceAccessForOrganization(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	var output organizations.ListAWSServiceAccessForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAWSServiceAccessForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAWSServiceAccessForOrganizationAsync(ctx workflow.Context, input *organizations.ListAWSServiceAccessForOrganizationInput) *OrganizationsListAWSServiceAccessForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAWSServiceAccessForOrganization", input)
	return &OrganizationsListAWSServiceAccessForOrganizationFuture{Future: future}
}

func (a *stub) ListAccounts(ctx workflow.Context, input *organizations.ListAccountsInput) (*organizations.ListAccountsOutput, error) {
	var output organizations.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsAsync(ctx workflow.Context, input *organizations.ListAccountsInput) *OrganizationsListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccounts", input)
	return &OrganizationsListAccountsFuture{Future: future}
}

func (a *stub) ListAccountsForParent(ctx workflow.Context, input *organizations.ListAccountsForParentInput) (*organizations.ListAccountsForParentOutput, error) {
	var output organizations.ListAccountsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccountsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsForParentAsync(ctx workflow.Context, input *organizations.ListAccountsForParentInput) *OrganizationsListAccountsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListAccountsForParent", input)
	return &OrganizationsListAccountsForParentFuture{Future: future}
}

func (a *stub) ListChildren(ctx workflow.Context, input *organizations.ListChildrenInput) (*organizations.ListChildrenOutput, error) {
	var output organizations.ListChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChildrenAsync(ctx workflow.Context, input *organizations.ListChildrenInput) *OrganizationsListChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListChildren", input)
	return &OrganizationsListChildrenFuture{Future: future}
}

func (a *stub) ListCreateAccountStatus(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) (*organizations.ListCreateAccountStatusOutput, error) {
	var output organizations.ListCreateAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListCreateAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCreateAccountStatusAsync(ctx workflow.Context, input *organizations.ListCreateAccountStatusInput) *OrganizationsListCreateAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListCreateAccountStatus", input)
	return &OrganizationsListCreateAccountStatusFuture{Future: future}
}

func (a *stub) ListDelegatedAdministrators(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) (*organizations.ListDelegatedAdministratorsOutput, error) {
	var output organizations.ListDelegatedAdministratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedAdministrators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDelegatedAdministratorsAsync(ctx workflow.Context, input *organizations.ListDelegatedAdministratorsInput) *OrganizationsListDelegatedAdministratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedAdministrators", input)
	return &OrganizationsListDelegatedAdministratorsFuture{Future: future}
}

func (a *stub) ListDelegatedServicesForAccount(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	var output organizations.ListDelegatedServicesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedServicesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDelegatedServicesForAccountAsync(ctx workflow.Context, input *organizations.ListDelegatedServicesForAccountInput) *OrganizationsListDelegatedServicesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListDelegatedServicesForAccount", input)
	return &OrganizationsListDelegatedServicesForAccountFuture{Future: future}
}

func (a *stub) ListHandshakesForAccount(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) (*organizations.ListHandshakesForAccountOutput, error) {
	var output organizations.ListHandshakesForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHandshakesForAccountAsync(ctx workflow.Context, input *organizations.ListHandshakesForAccountInput) *OrganizationsListHandshakesForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForAccount", input)
	return &OrganizationsListHandshakesForAccountFuture{Future: future}
}

func (a *stub) ListHandshakesForOrganization(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) (*organizations.ListHandshakesForOrganizationOutput, error) {
	var output organizations.ListHandshakesForOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHandshakesForOrganizationAsync(ctx workflow.Context, input *organizations.ListHandshakesForOrganizationInput) *OrganizationsListHandshakesForOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListHandshakesForOrganization", input)
	return &OrganizationsListHandshakesForOrganizationFuture{Future: future}
}

func (a *stub) ListOrganizationalUnitsForParent(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	var output organizations.ListOrganizationalUnitsForParentOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListOrganizationalUnitsForParent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationalUnitsForParentAsync(ctx workflow.Context, input *organizations.ListOrganizationalUnitsForParentInput) *OrganizationsListOrganizationalUnitsForParentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListOrganizationalUnitsForParent", input)
	return &OrganizationsListOrganizationalUnitsForParentFuture{Future: future}
}

func (a *stub) ListParents(ctx workflow.Context, input *organizations.ListParentsInput) (*organizations.ListParentsOutput, error) {
	var output organizations.ListParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListParents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListParentsAsync(ctx workflow.Context, input *organizations.ListParentsInput) *OrganizationsListParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListParents", input)
	return &OrganizationsListParentsFuture{Future: future}
}

func (a *stub) ListPolicies(ctx workflow.Context, input *organizations.ListPoliciesInput) (*organizations.ListPoliciesOutput, error) {
	var output organizations.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesAsync(ctx workflow.Context, input *organizations.ListPoliciesInput) *OrganizationsListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListPolicies", input)
	return &OrganizationsListPoliciesFuture{Future: future}
}

func (a *stub) ListPoliciesForTarget(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) (*organizations.ListPoliciesForTargetOutput, error) {
	var output organizations.ListPoliciesForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListPoliciesForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesForTargetAsync(ctx workflow.Context, input *organizations.ListPoliciesForTargetInput) *OrganizationsListPoliciesForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListPoliciesForTarget", input)
	return &OrganizationsListPoliciesForTargetFuture{Future: future}
}

func (a *stub) ListRoots(ctx workflow.Context, input *organizations.ListRootsInput) (*organizations.ListRootsOutput, error) {
	var output organizations.ListRootsOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListRoots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRootsAsync(ctx workflow.Context, input *organizations.ListRootsInput) *OrganizationsListRootsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListRoots", input)
	return &OrganizationsListRootsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *organizations.ListTagsForResourceInput) (*organizations.ListTagsForResourceOutput, error) {
	var output organizations.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *organizations.ListTagsForResourceInput) *OrganizationsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListTagsForResource", input)
	return &OrganizationsListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargetsForPolicy(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) (*organizations.ListTargetsForPolicyOutput, error) {
	var output organizations.ListTargetsForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-ListTargetsForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsForPolicyAsync(ctx workflow.Context, input *organizations.ListTargetsForPolicyInput) *OrganizationsListTargetsForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-ListTargetsForPolicy", input)
	return &OrganizationsListTargetsForPolicyFuture{Future: future}
}

func (a *stub) MoveAccount(ctx workflow.Context, input *organizations.MoveAccountInput) (*organizations.MoveAccountOutput, error) {
	var output organizations.MoveAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-MoveAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MoveAccountAsync(ctx workflow.Context, input *organizations.MoveAccountInput) *OrganizationsMoveAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-MoveAccount", input)
	return &OrganizationsMoveAccountFuture{Future: future}
}

func (a *stub) RegisterDelegatedAdministrator(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	var output organizations.RegisterDelegatedAdministratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-RegisterDelegatedAdministrator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDelegatedAdministratorAsync(ctx workflow.Context, input *organizations.RegisterDelegatedAdministratorInput) *OrganizationsRegisterDelegatedAdministratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-RegisterDelegatedAdministrator", input)
	return &OrganizationsRegisterDelegatedAdministratorFuture{Future: future}
}

func (a *stub) RemoveAccountFromOrganization(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	var output organizations.RemoveAccountFromOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-RemoveAccountFromOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveAccountFromOrganizationAsync(ctx workflow.Context, input *organizations.RemoveAccountFromOrganizationInput) *OrganizationsRemoveAccountFromOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-RemoveAccountFromOrganization", input)
	return &OrganizationsRemoveAccountFromOrganizationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *organizations.TagResourceInput) (*organizations.TagResourceOutput, error) {
	var output organizations.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *organizations.TagResourceInput) *OrganizationsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-TagResource", input)
	return &OrganizationsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *organizations.UntagResourceInput) (*organizations.UntagResourceOutput, error) {
	var output organizations.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *organizations.UntagResourceInput) *OrganizationsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UntagResource", input)
	return &OrganizationsUntagResourceFuture{Future: future}
}

func (a *stub) UpdateOrganizationalUnit(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) (*organizations.UpdateOrganizationalUnitOutput, error) {
	var output organizations.UpdateOrganizationalUnitOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UpdateOrganizationalUnit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOrganizationalUnitAsync(ctx workflow.Context, input *organizations.UpdateOrganizationalUnitInput) *OrganizationsUpdateOrganizationalUnitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UpdateOrganizationalUnit", input)
	return &OrganizationsUpdateOrganizationalUnitFuture{Future: future}
}

func (a *stub) UpdatePolicy(ctx workflow.Context, input *organizations.UpdatePolicyInput) (*organizations.UpdatePolicyOutput, error) {
	var output organizations.UpdatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-organizations-UpdatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePolicyAsync(ctx workflow.Context, input *organizations.UpdatePolicyInput) *OrganizationsUpdatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-organizations-UpdatePolicy", input)
	return &OrganizationsUpdatePolicyFuture{Future: future}
}
