// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lightsailstub

import (
	"github.com/aws/aws-sdk-go/service/lightsail"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AllocateStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachCertificateToDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachCertificateToDistributionFuture) Get(ctx workflow.Context) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachDiskFuture) Get(ctx workflow.Context) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachInstancesToLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachInstancesToLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloseInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloseInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopySnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopySnapshotFuture) Get(ctx workflow.Context) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCloudFormationStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCloudFormationStackFuture) Get(ctx workflow.Context) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContactMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContactMethodFuture) Get(ctx workflow.Context) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContainerServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContainerServiceFuture) Get(ctx workflow.Context) (*lightsail.CreateContainerServiceOutput, error) {
	var output lightsail.CreateContainerServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContainerServiceDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContainerServiceDeploymentFuture) Get(ctx workflow.Context) (*lightsail.CreateContainerServiceDeploymentOutput, error) {
	var output lightsail.CreateContainerServiceDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContainerServiceRegistryLoginFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContainerServiceRegistryLoginFuture) Get(ctx workflow.Context) (*lightsail.CreateContainerServiceRegistryLoginOutput, error) {
	var output lightsail.CreateContainerServiceRegistryLoginOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDiskFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDiskFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDiskFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDistributionFuture) Get(ctx workflow.Context) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstancesFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstancesFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstancesFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateKeyPairFuture) Get(ctx workflow.Context) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRelationalDatabaseFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRelationalDatabaseFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAlarmFuture) Get(ctx workflow.Context) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAutoSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAutoSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContactMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContactMethodFuture) Get(ctx workflow.Context) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContainerImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContainerImageFuture) Get(ctx workflow.Context) (*lightsail.DeleteContainerImageOutput, error) {
	var output lightsail.DeleteContainerImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContainerServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContainerServiceFuture) Get(ctx workflow.Context) (*lightsail.DeleteContainerServiceOutput, error) {
	var output lightsail.DeleteContainerServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDiskFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDistributionFuture) Get(ctx workflow.Context) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteKnownHostKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteKnownHostKeysFuture) Get(ctx workflow.Context) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachCertificateFromDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachCertificateFromDistributionFuture) Get(ctx workflow.Context) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachDiskFuture) Get(ctx workflow.Context) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachInstancesFromLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachInstancesFromLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableAddOnFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableAddOnFuture) Get(ctx workflow.Context) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DownloadDefaultKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DownloadDefaultKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableAddOnFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableAddOnFuture) Get(ctx workflow.Context) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportSnapshotFuture) Get(ctx workflow.Context) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetActiveNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetActiveNamesFuture) Get(ctx workflow.Context) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAlarmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAlarmsFuture) Get(ctx workflow.Context) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAutoSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAutoSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBlueprintsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCloudFormationStackRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCloudFormationStackRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContactMethodsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContactMethodsFuture) Get(ctx workflow.Context) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerAPIMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerAPIMetadataFuture) Get(ctx workflow.Context) (*lightsail.GetContainerAPIMetadataOutput, error) {
	var output lightsail.GetContainerAPIMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerImagesFuture) Get(ctx workflow.Context) (*lightsail.GetContainerImagesOutput, error) {
	var output lightsail.GetContainerImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerLogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerLogFuture) Get(ctx workflow.Context) (*lightsail.GetContainerLogOutput, error) {
	var output lightsail.GetContainerLogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerServiceDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerServiceDeploymentsFuture) Get(ctx workflow.Context) (*lightsail.GetContainerServiceDeploymentsOutput, error) {
	var output lightsail.GetContainerServiceDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerServiceMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerServiceMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetContainerServiceMetricDataOutput, error) {
	var output lightsail.GetContainerServiceMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerServicePowersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerServicePowersFuture) Get(ctx workflow.Context) (*lightsail.GetContainerServicePowersOutput, error) {
	var output lightsail.GetContainerServicePowersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerServicesFuture) Get(ctx workflow.Context) (*lightsail.GetContainerServicesOutput, error) {
	var output lightsail.GetContainerServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDiskFuture) Get(ctx workflow.Context) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDiskSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDiskSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDisksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDisksFuture) Get(ctx workflow.Context) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionLatestCacheResetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionLatestCacheResetFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDistributionsFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainFuture) Get(ctx workflow.Context) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainsFuture) Get(ctx workflow.Context) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetExportSnapshotRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetExportSnapshotRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceAccessDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceAccessDetailsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstancePortStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstancePortStatesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceStateFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstancesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyPairFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetKeyPairsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetKeyPairsFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoadBalancerMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoadBalancerMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoadBalancerTlsCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoadBalancerTlsCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoadBalancersFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOperationFuture) Get(ctx workflow.Context) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOperationsFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOperationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOperationsForResourceFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegionsFuture) Get(ctx workflow.Context) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseBlueprintsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseLogEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseLogStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseLogStreamsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseMasterUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseMasterUserPasswordFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabaseSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabaseSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRelationalDatabasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRelationalDatabasesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStaticIpFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStaticIpsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStaticIpsFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportKeyPairFuture) Get(ctx workflow.Context) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IsVpcPeeredFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IsVpcPeeredFuture) Get(ctx workflow.Context) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type OpenInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *OpenInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PeerVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PeerVpcFuture) Get(ctx workflow.Context) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAlarmFuture) Get(ctx workflow.Context) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootInstanceFuture) Get(ctx workflow.Context) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterContainerImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterContainerImageFuture) Get(ctx workflow.Context) (*lightsail.RegisterContainerImageOutput, error) {
	var output lightsail.RegisterContainerImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReleaseStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReleaseStaticIpFuture) Get(ctx workflow.Context) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetDistributionCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetDistributionCacheFuture) Get(ctx workflow.Context) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendContactMethodVerificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendContactMethodVerificationFuture) Get(ctx workflow.Context) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIpAddressTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIpAddressTypeFuture) Get(ctx workflow.Context) (*lightsail.SetIpAddressTypeOutput, error) {
	var output lightsail.SetIpAddressTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartInstanceFuture) Get(ctx workflow.Context) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopInstanceFuture) Get(ctx workflow.Context) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestAlarmFuture) Get(ctx workflow.Context) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnpeerVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnpeerVpcFuture) Get(ctx workflow.Context) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContainerServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContainerServiceFuture) Get(ctx workflow.Context) (*lightsail.UpdateContainerServiceOutput, error) {
	var output lightsail.UpdateContainerServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDistributionFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDistributionBundleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDistributionBundleFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLoadBalancerAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLoadBalancerAttributeFuture) Get(ctx workflow.Context) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRelationalDatabaseParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateStaticIp(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AllocateStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateStaticIpAsync(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) *AllocateStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AllocateStaticIp", input)
	return &AllocateStaticIpFuture{Future: future}
}

func (a *stub) AttachCertificateToDistribution(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachCertificateToDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachCertificateToDistributionAsync(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) *AttachCertificateToDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachCertificateToDistribution", input)
	return &AttachCertificateToDistributionFuture{Future: future}
}

func (a *stub) AttachDisk(ctx workflow.Context, input *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachDiskAsync(ctx workflow.Context, input *lightsail.AttachDiskInput) *AttachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachDisk", input)
	return &AttachDiskFuture{Future: future}
}

func (a *stub) AttachInstancesToLoadBalancer(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachInstancesToLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachInstancesToLoadBalancerAsync(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) *AttachInstancesToLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachInstancesToLoadBalancer", input)
	return &AttachInstancesToLoadBalancerFuture{Future: future}
}

func (a *stub) AttachLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) *AttachLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachLoadBalancerTlsCertificate", input)
	return &AttachLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) AttachStaticIp(ctx workflow.Context, input *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachStaticIpAsync(ctx workflow.Context, input *lightsail.AttachStaticIpInput) *AttachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachStaticIp", input)
	return &AttachStaticIpFuture{Future: future}
}

func (a *stub) CloseInstancePublicPorts(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CloseInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CloseInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) *CloseInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CloseInstancePublicPorts", input)
	return &CloseInstancePublicPortsFuture{Future: future}
}

func (a *stub) CopySnapshot(ctx workflow.Context, input *lightsail.CopySnapshotInput) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopySnapshotAsync(ctx workflow.Context, input *lightsail.CopySnapshotInput) *CopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CopySnapshot", input)
	return &CopySnapshotFuture{Future: future}
}

func (a *stub) CreateCertificate(ctx workflow.Context, input *lightsail.CreateCertificateInput) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateAsync(ctx workflow.Context, input *lightsail.CreateCertificateInput) *CreateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCertificate", input)
	return &CreateCertificateFuture{Future: future}
}

func (a *stub) CreateCloudFormationStack(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCloudFormationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFormationStackAsync(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) *CreateCloudFormationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCloudFormationStack", input)
	return &CreateCloudFormationStackFuture{Future: future}
}

func (a *stub) CreateContactMethod(ctx workflow.Context, input *lightsail.CreateContactMethodInput) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactMethodAsync(ctx workflow.Context, input *lightsail.CreateContactMethodInput) *CreateContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContactMethod", input)
	return &CreateContactMethodFuture{Future: future}
}

func (a *stub) CreateContainerService(ctx workflow.Context, input *lightsail.CreateContainerServiceInput) (*lightsail.CreateContainerServiceOutput, error) {
	var output lightsail.CreateContainerServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainerServiceAsync(ctx workflow.Context, input *lightsail.CreateContainerServiceInput) *CreateContainerServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerService", input)
	return &CreateContainerServiceFuture{Future: future}
}

func (a *stub) CreateContainerServiceDeployment(ctx workflow.Context, input *lightsail.CreateContainerServiceDeploymentInput) (*lightsail.CreateContainerServiceDeploymentOutput, error) {
	var output lightsail.CreateContainerServiceDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerServiceDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainerServiceDeploymentAsync(ctx workflow.Context, input *lightsail.CreateContainerServiceDeploymentInput) *CreateContainerServiceDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerServiceDeployment", input)
	return &CreateContainerServiceDeploymentFuture{Future: future}
}

func (a *stub) CreateContainerServiceRegistryLogin(ctx workflow.Context, input *lightsail.CreateContainerServiceRegistryLoginInput) (*lightsail.CreateContainerServiceRegistryLoginOutput, error) {
	var output lightsail.CreateContainerServiceRegistryLoginOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerServiceRegistryLogin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainerServiceRegistryLoginAsync(ctx workflow.Context, input *lightsail.CreateContainerServiceRegistryLoginInput) *CreateContainerServiceRegistryLoginFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContainerServiceRegistryLogin", input)
	return &CreateContainerServiceRegistryLoginFuture{Future: future}
}

func (a *stub) CreateDisk(ctx workflow.Context, input *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskAsync(ctx workflow.Context, input *lightsail.CreateDiskInput) *CreateDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDisk", input)
	return &CreateDiskFuture{Future: future}
}

func (a *stub) CreateDiskFromSnapshot(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) *CreateDiskFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskFromSnapshot", input)
	return &CreateDiskFromSnapshotFuture{Future: future}
}

func (a *stub) CreateDiskSnapshot(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) *CreateDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskSnapshot", input)
	return &CreateDiskSnapshotFuture{Future: future}
}

func (a *stub) CreateDistribution(ctx workflow.Context, input *lightsail.CreateDistributionInput) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionAsync(ctx workflow.Context, input *lightsail.CreateDistributionInput) *CreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDistribution", input)
	return &CreateDistributionFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *lightsail.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) CreateDomainEntry(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainEntryAsync(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) *CreateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomainEntry", input)
	return &CreateDomainEntryFuture{Future: future}
}

func (a *stub) CreateInstanceSnapshot(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) *CreateInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstanceSnapshot", input)
	return &CreateInstanceSnapshotFuture{Future: future}
}

func (a *stub) CreateInstances(ctx workflow.Context, input *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstancesAsync(ctx workflow.Context, input *lightsail.CreateInstancesInput) *CreateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstances", input)
	return &CreateInstancesFuture{Future: future}
}

func (a *stub) CreateInstancesFromSnapshot(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstancesFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstancesFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) *CreateInstancesFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstancesFromSnapshot", input)
	return &CreateInstancesFromSnapshotFuture{Future: future}
}

func (a *stub) CreateKeyPair(ctx workflow.Context, input *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyPairAsync(ctx workflow.Context, input *lightsail.CreateKeyPairInput) *CreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateKeyPair", input)
	return &CreateKeyPairFuture{Future: future}
}

func (a *stub) CreateLoadBalancer(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoadBalancerAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) *CreateLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancer", input)
	return &CreateLoadBalancerFuture{Future: future}
}

func (a *stub) CreateLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) *CreateLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancerTlsCertificate", input)
	return &CreateLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) CreateRelationalDatabase(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) *CreateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabase", input)
	return &CreateRelationalDatabaseFuture{Future: future}
}

func (a *stub) CreateRelationalDatabaseFromSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) *CreateRelationalDatabaseFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseFromSnapshot", input)
	return &CreateRelationalDatabaseFromSnapshotFuture{Future: future}
}

func (a *stub) CreateRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) *CreateRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseSnapshot", input)
	return &CreateRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) DeleteAlarm(ctx workflow.Context, input *lightsail.DeleteAlarmInput) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlarmAsync(ctx workflow.Context, input *lightsail.DeleteAlarmInput) *DeleteAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAlarm", input)
	return &DeleteAlarmFuture{Future: future}
}

func (a *stub) DeleteAutoSnapshot(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAutoSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAutoSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) *DeleteAutoSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAutoSnapshot", input)
	return &DeleteAutoSnapshotFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *lightsail.DeleteCertificateInput) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *lightsail.DeleteCertificateInput) *DeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteCertificate", input)
	return &DeleteCertificateFuture{Future: future}
}

func (a *stub) DeleteContactMethod(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContactMethodAsync(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) *DeleteContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContactMethod", input)
	return &DeleteContactMethodFuture{Future: future}
}

func (a *stub) DeleteContainerImage(ctx workflow.Context, input *lightsail.DeleteContainerImageInput) (*lightsail.DeleteContainerImageOutput, error) {
	var output lightsail.DeleteContainerImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContainerImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContainerImageAsync(ctx workflow.Context, input *lightsail.DeleteContainerImageInput) *DeleteContainerImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContainerImage", input)
	return &DeleteContainerImageFuture{Future: future}
}

func (a *stub) DeleteContainerService(ctx workflow.Context, input *lightsail.DeleteContainerServiceInput) (*lightsail.DeleteContainerServiceOutput, error) {
	var output lightsail.DeleteContainerServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContainerService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContainerServiceAsync(ctx workflow.Context, input *lightsail.DeleteContainerServiceInput) *DeleteContainerServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContainerService", input)
	return &DeleteContainerServiceFuture{Future: future}
}

func (a *stub) DeleteDisk(ctx workflow.Context, input *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDiskAsync(ctx workflow.Context, input *lightsail.DeleteDiskInput) *DeleteDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDisk", input)
	return &DeleteDiskFuture{Future: future}
}

func (a *stub) DeleteDiskSnapshot(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDiskSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) *DeleteDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDiskSnapshot", input)
	return &DeleteDiskSnapshotFuture{Future: future}
}

func (a *stub) DeleteDistribution(ctx workflow.Context, input *lightsail.DeleteDistributionInput) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionAsync(ctx workflow.Context, input *lightsail.DeleteDistributionInput) *DeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDistribution", input)
	return &DeleteDistributionFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *lightsail.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DeleteDomainEntry(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainEntryAsync(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) *DeleteDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomainEntry", input)
	return &DeleteDomainEntryFuture{Future: future}
}

func (a *stub) DeleteInstance(ctx workflow.Context, input *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceAsync(ctx workflow.Context, input *lightsail.DeleteInstanceInput) *DeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstance", input)
	return &DeleteInstanceFuture{Future: future}
}

func (a *stub) DeleteInstanceSnapshot(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) *DeleteInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstanceSnapshot", input)
	return &DeleteInstanceSnapshotFuture{Future: future}
}

func (a *stub) DeleteKeyPair(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKeyPairAsync(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) *DeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKeyPair", input)
	return &DeleteKeyPairFuture{Future: future}
}

func (a *stub) DeleteKnownHostKeys(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKnownHostKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKnownHostKeysAsync(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) *DeleteKnownHostKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKnownHostKeys", input)
	return &DeleteKnownHostKeysFuture{Future: future}
}

func (a *stub) DeleteLoadBalancer(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoadBalancerAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) *DeleteLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancer", input)
	return &DeleteLoadBalancerFuture{Future: future}
}

func (a *stub) DeleteLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) *DeleteLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancerTlsCertificate", input)
	return &DeleteLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) DeleteRelationalDatabase(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) *DeleteRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabase", input)
	return &DeleteRelationalDatabaseFuture{Future: future}
}

func (a *stub) DeleteRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) *DeleteRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabaseSnapshot", input)
	return &DeleteRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) DetachCertificateFromDistribution(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachCertificateFromDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachCertificateFromDistributionAsync(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) *DetachCertificateFromDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachCertificateFromDistribution", input)
	return &DetachCertificateFromDistributionFuture{Future: future}
}

func (a *stub) DetachDisk(ctx workflow.Context, input *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachDiskAsync(ctx workflow.Context, input *lightsail.DetachDiskInput) *DetachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachDisk", input)
	return &DetachDiskFuture{Future: future}
}

func (a *stub) DetachInstancesFromLoadBalancer(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachInstancesFromLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachInstancesFromLoadBalancerAsync(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) *DetachInstancesFromLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachInstancesFromLoadBalancer", input)
	return &DetachInstancesFromLoadBalancerFuture{Future: future}
}

func (a *stub) DetachStaticIp(ctx workflow.Context, input *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachStaticIpAsync(ctx workflow.Context, input *lightsail.DetachStaticIpInput) *DetachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachStaticIp", input)
	return &DetachStaticIpFuture{Future: future}
}

func (a *stub) DisableAddOn(ctx workflow.Context, input *lightsail.DisableAddOnInput) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DisableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAddOnAsync(ctx workflow.Context, input *lightsail.DisableAddOnInput) *DisableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DisableAddOn", input)
	return &DisableAddOnFuture{Future: future}
}

func (a *stub) DownloadDefaultKeyPair(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DownloadDefaultKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DownloadDefaultKeyPairAsync(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) *DownloadDefaultKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DownloadDefaultKeyPair", input)
	return &DownloadDefaultKeyPairFuture{Future: future}
}

func (a *stub) EnableAddOn(ctx workflow.Context, input *lightsail.EnableAddOnInput) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-EnableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAddOnAsync(ctx workflow.Context, input *lightsail.EnableAddOnInput) *EnableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-EnableAddOn", input)
	return &EnableAddOnFuture{Future: future}
}

func (a *stub) ExportSnapshot(ctx workflow.Context, input *lightsail.ExportSnapshotInput) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ExportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportSnapshotAsync(ctx workflow.Context, input *lightsail.ExportSnapshotInput) *ExportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ExportSnapshot", input)
	return &ExportSnapshotFuture{Future: future}
}

func (a *stub) GetActiveNames(ctx workflow.Context, input *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetActiveNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetActiveNamesAsync(ctx workflow.Context, input *lightsail.GetActiveNamesInput) *GetActiveNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetActiveNames", input)
	return &GetActiveNamesFuture{Future: future}
}

func (a *stub) GetAlarms(ctx workflow.Context, input *lightsail.GetAlarmsInput) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAlarms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAlarmsAsync(ctx workflow.Context, input *lightsail.GetAlarmsInput) *GetAlarmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAlarms", input)
	return &GetAlarmsFuture{Future: future}
}

func (a *stub) GetAutoSnapshots(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAutoSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAutoSnapshotsAsync(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) *GetAutoSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAutoSnapshots", input)
	return &GetAutoSnapshotsFuture{Future: future}
}

func (a *stub) GetBlueprints(ctx workflow.Context, input *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBlueprintsAsync(ctx workflow.Context, input *lightsail.GetBlueprintsInput) *GetBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBlueprints", input)
	return &GetBlueprintsFuture{Future: future}
}

func (a *stub) GetBundles(ctx workflow.Context, input *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBundlesAsync(ctx workflow.Context, input *lightsail.GetBundlesInput) *GetBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBundles", input)
	return &GetBundlesFuture{Future: future}
}

func (a *stub) GetCertificates(ctx workflow.Context, input *lightsail.GetCertificatesInput) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificatesAsync(ctx workflow.Context, input *lightsail.GetCertificatesInput) *GetCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCertificates", input)
	return &GetCertificatesFuture{Future: future}
}

func (a *stub) GetCloudFormationStackRecords(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCloudFormationStackRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFormationStackRecordsAsync(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) *GetCloudFormationStackRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCloudFormationStackRecords", input)
	return &GetCloudFormationStackRecordsFuture{Future: future}
}

func (a *stub) GetContactMethods(ctx workflow.Context, input *lightsail.GetContactMethodsInput) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContactMethods", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactMethodsAsync(ctx workflow.Context, input *lightsail.GetContactMethodsInput) *GetContactMethodsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContactMethods", input)
	return &GetContactMethodsFuture{Future: future}
}

func (a *stub) GetContainerAPIMetadata(ctx workflow.Context, input *lightsail.GetContainerAPIMetadataInput) (*lightsail.GetContainerAPIMetadataOutput, error) {
	var output lightsail.GetContainerAPIMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerAPIMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerAPIMetadataAsync(ctx workflow.Context, input *lightsail.GetContainerAPIMetadataInput) *GetContainerAPIMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerAPIMetadata", input)
	return &GetContainerAPIMetadataFuture{Future: future}
}

func (a *stub) GetContainerImages(ctx workflow.Context, input *lightsail.GetContainerImagesInput) (*lightsail.GetContainerImagesOutput, error) {
	var output lightsail.GetContainerImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerImagesAsync(ctx workflow.Context, input *lightsail.GetContainerImagesInput) *GetContainerImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerImages", input)
	return &GetContainerImagesFuture{Future: future}
}

func (a *stub) GetContainerLog(ctx workflow.Context, input *lightsail.GetContainerLogInput) (*lightsail.GetContainerLogOutput, error) {
	var output lightsail.GetContainerLogOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerLog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerLogAsync(ctx workflow.Context, input *lightsail.GetContainerLogInput) *GetContainerLogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerLog", input)
	return &GetContainerLogFuture{Future: future}
}

func (a *stub) GetContainerServiceDeployments(ctx workflow.Context, input *lightsail.GetContainerServiceDeploymentsInput) (*lightsail.GetContainerServiceDeploymentsOutput, error) {
	var output lightsail.GetContainerServiceDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServiceDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerServiceDeploymentsAsync(ctx workflow.Context, input *lightsail.GetContainerServiceDeploymentsInput) *GetContainerServiceDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServiceDeployments", input)
	return &GetContainerServiceDeploymentsFuture{Future: future}
}

func (a *stub) GetContainerServiceMetricData(ctx workflow.Context, input *lightsail.GetContainerServiceMetricDataInput) (*lightsail.GetContainerServiceMetricDataOutput, error) {
	var output lightsail.GetContainerServiceMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServiceMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerServiceMetricDataAsync(ctx workflow.Context, input *lightsail.GetContainerServiceMetricDataInput) *GetContainerServiceMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServiceMetricData", input)
	return &GetContainerServiceMetricDataFuture{Future: future}
}

func (a *stub) GetContainerServicePowers(ctx workflow.Context, input *lightsail.GetContainerServicePowersInput) (*lightsail.GetContainerServicePowersOutput, error) {
	var output lightsail.GetContainerServicePowersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServicePowers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerServicePowersAsync(ctx workflow.Context, input *lightsail.GetContainerServicePowersInput) *GetContainerServicePowersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServicePowers", input)
	return &GetContainerServicePowersFuture{Future: future}
}

func (a *stub) GetContainerServices(ctx workflow.Context, input *lightsail.GetContainerServicesInput) (*lightsail.GetContainerServicesOutput, error) {
	var output lightsail.GetContainerServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerServicesAsync(ctx workflow.Context, input *lightsail.GetContainerServicesInput) *GetContainerServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContainerServices", input)
	return &GetContainerServicesFuture{Future: future}
}

func (a *stub) GetDisk(ctx workflow.Context, input *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskAsync(ctx workflow.Context, input *lightsail.GetDiskInput) *GetDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisk", input)
	return &GetDiskFuture{Future: future}
}

func (a *stub) GetDiskSnapshot(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskSnapshotAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) *GetDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshot", input)
	return &GetDiskSnapshotFuture{Future: future}
}

func (a *stub) GetDiskSnapshots(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskSnapshotsAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) *GetDiskSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshots", input)
	return &GetDiskSnapshotsFuture{Future: future}
}

func (a *stub) GetDisks(ctx workflow.Context, input *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDisksAsync(ctx workflow.Context, input *lightsail.GetDisksInput) *GetDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisks", input)
	return &GetDisksFuture{Future: future}
}

func (a *stub) GetDistributionBundles(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionBundlesAsync(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) *GetDistributionBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionBundles", input)
	return &GetDistributionBundlesFuture{Future: future}
}

func (a *stub) GetDistributionLatestCacheReset(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionLatestCacheReset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionLatestCacheResetAsync(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) *GetDistributionLatestCacheResetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionLatestCacheReset", input)
	return &GetDistributionLatestCacheResetFuture{Future: future}
}

func (a *stub) GetDistributionMetricData(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionMetricDataAsync(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) *GetDistributionMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionMetricData", input)
	return &GetDistributionMetricDataFuture{Future: future}
}

func (a *stub) GetDistributions(ctx workflow.Context, input *lightsail.GetDistributionsInput) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionsAsync(ctx workflow.Context, input *lightsail.GetDistributionsInput) *GetDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributions", input)
	return &GetDistributionsFuture{Future: future}
}

func (a *stub) GetDomain(ctx workflow.Context, input *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainAsync(ctx workflow.Context, input *lightsail.GetDomainInput) *GetDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomain", input)
	return &GetDomainFuture{Future: future}
}

func (a *stub) GetDomains(ctx workflow.Context, input *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainsAsync(ctx workflow.Context, input *lightsail.GetDomainsInput) *GetDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomains", input)
	return &GetDomainsFuture{Future: future}
}

func (a *stub) GetExportSnapshotRecords(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetExportSnapshotRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExportSnapshotRecordsAsync(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) *GetExportSnapshotRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetExportSnapshotRecords", input)
	return &GetExportSnapshotRecordsFuture{Future: future}
}

func (a *stub) GetInstance(ctx workflow.Context, input *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAsync(ctx workflow.Context, input *lightsail.GetInstanceInput) *GetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstance", input)
	return &GetInstanceFuture{Future: future}
}

func (a *stub) GetInstanceAccessDetails(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceAccessDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAccessDetailsAsync(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) *GetInstanceAccessDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceAccessDetails", input)
	return &GetInstanceAccessDetailsFuture{Future: future}
}

func (a *stub) GetInstanceMetricData(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceMetricDataAsync(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) *GetInstanceMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceMetricData", input)
	return &GetInstanceMetricDataFuture{Future: future}
}

func (a *stub) GetInstancePortStates(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstancePortStates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancePortStatesAsync(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) *GetInstancePortStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstancePortStates", input)
	return &GetInstancePortStatesFuture{Future: future}
}

func (a *stub) GetInstanceSnapshot(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) *GetInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshot", input)
	return &GetInstanceSnapshotFuture{Future: future}
}

func (a *stub) GetInstanceSnapshots(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceSnapshotsAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) *GetInstanceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshots", input)
	return &GetInstanceSnapshotsFuture{Future: future}
}

func (a *stub) GetInstanceState(ctx workflow.Context, input *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceStateAsync(ctx workflow.Context, input *lightsail.GetInstanceStateInput) *GetInstanceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceState", input)
	return &GetInstanceStateFuture{Future: future}
}

func (a *stub) GetInstances(ctx workflow.Context, input *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancesAsync(ctx workflow.Context, input *lightsail.GetInstancesInput) *GetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstances", input)
	return &GetInstancesFuture{Future: future}
}

func (a *stub) GetKeyPair(ctx workflow.Context, input *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyPairAsync(ctx workflow.Context, input *lightsail.GetKeyPairInput) *GetKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPair", input)
	return &GetKeyPairFuture{Future: future}
}

func (a *stub) GetKeyPairs(ctx workflow.Context, input *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyPairsAsync(ctx workflow.Context, input *lightsail.GetKeyPairsInput) *GetKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPairs", input)
	return &GetKeyPairsFuture{Future: future}
}

func (a *stub) GetLoadBalancer(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) *GetLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancer", input)
	return &GetLoadBalancerFuture{Future: future}
}

func (a *stub) GetLoadBalancerMetricData(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerMetricDataAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) *GetLoadBalancerMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerMetricData", input)
	return &GetLoadBalancerMetricDataFuture{Future: future}
}

func (a *stub) GetLoadBalancerTlsCertificates(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerTlsCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerTlsCertificatesAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) *GetLoadBalancerTlsCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerTlsCertificates", input)
	return &GetLoadBalancerTlsCertificatesFuture{Future: future}
}

func (a *stub) GetLoadBalancers(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancersAsync(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) *GetLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancers", input)
	return &GetLoadBalancersFuture{Future: future}
}

func (a *stub) GetOperation(ctx workflow.Context, input *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationAsync(ctx workflow.Context, input *lightsail.GetOperationInput) *GetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperation", input)
	return &GetOperationFuture{Future: future}
}

func (a *stub) GetOperations(ctx workflow.Context, input *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationsAsync(ctx workflow.Context, input *lightsail.GetOperationsInput) *GetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperations", input)
	return &GetOperationsFuture{Future: future}
}

func (a *stub) GetOperationsForResource(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationsForResourceAsync(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) *GetOperationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperationsForResource", input)
	return &GetOperationsForResourceFuture{Future: future}
}

func (a *stub) GetRegions(ctx workflow.Context, input *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegionsAsync(ctx workflow.Context, input *lightsail.GetRegionsInput) *GetRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRegions", input)
	return &GetRegionsFuture{Future: future}
}

func (a *stub) GetRelationalDatabase(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) *GetRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabase", input)
	return &GetRelationalDatabaseFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseBlueprints(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseBlueprintsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) *GetRelationalDatabaseBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBlueprints", input)
	return &GetRelationalDatabaseBlueprintsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseBundles(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseBundlesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) *GetRelationalDatabaseBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBundles", input)
	return &GetRelationalDatabaseBundlesFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) *GetRelationalDatabaseEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseEvents", input)
	return &GetRelationalDatabaseEventsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseLogEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseLogEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) *GetRelationalDatabaseLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogEvents", input)
	return &GetRelationalDatabaseLogEventsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseLogStreams(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseLogStreamsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) *GetRelationalDatabaseLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogStreams", input)
	return &GetRelationalDatabaseLogStreamsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseMasterUserPassword(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMasterUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseMasterUserPasswordAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) *GetRelationalDatabaseMasterUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMasterUserPassword", input)
	return &GetRelationalDatabaseMasterUserPasswordFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseMetricData(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseMetricDataAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) *GetRelationalDatabaseMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMetricData", input)
	return &GetRelationalDatabaseMetricDataFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) *GetRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseParameters", input)
	return &GetRelationalDatabaseParametersFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) *GetRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshot", input)
	return &GetRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseSnapshots(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseSnapshotsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) *GetRelationalDatabaseSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshots", input)
	return &GetRelationalDatabaseSnapshotsFuture{Future: future}
}

func (a *stub) GetRelationalDatabases(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabasesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) *GetRelationalDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabases", input)
	return &GetRelationalDatabasesFuture{Future: future}
}

func (a *stub) GetStaticIp(ctx workflow.Context, input *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStaticIpAsync(ctx workflow.Context, input *lightsail.GetStaticIpInput) *GetStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIp", input)
	return &GetStaticIpFuture{Future: future}
}

func (a *stub) GetStaticIps(ctx workflow.Context, input *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStaticIpsAsync(ctx workflow.Context, input *lightsail.GetStaticIpsInput) *GetStaticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIps", input)
	return &GetStaticIpsFuture{Future: future}
}

func (a *stub) ImportKeyPair(ctx workflow.Context, input *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportKeyPairAsync(ctx workflow.Context, input *lightsail.ImportKeyPairInput) *ImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ImportKeyPair", input)
	return &ImportKeyPairFuture{Future: future}
}

func (a *stub) IsVpcPeered(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-IsVpcPeered", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IsVpcPeeredAsync(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) *IsVpcPeeredFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-IsVpcPeered", input)
	return &IsVpcPeeredFuture{Future: future}
}

func (a *stub) OpenInstancePublicPorts(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-OpenInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) OpenInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) *OpenInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-OpenInstancePublicPorts", input)
	return &OpenInstancePublicPortsFuture{Future: future}
}

func (a *stub) PeerVpc(ctx workflow.Context, input *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PeerVpcAsync(ctx workflow.Context, input *lightsail.PeerVpcInput) *PeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PeerVpc", input)
	return &PeerVpcFuture{Future: future}
}

func (a *stub) PutAlarm(ctx workflow.Context, input *lightsail.PutAlarmInput) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PutAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAlarmAsync(ctx workflow.Context, input *lightsail.PutAlarmInput) *PutAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PutAlarm", input)
	return &PutAlarmFuture{Future: future}
}

func (a *stub) PutInstancePublicPorts(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PutInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) *PutInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PutInstancePublicPorts", input)
	return &PutInstancePublicPortsFuture{Future: future}
}

func (a *stub) RebootInstance(ctx workflow.Context, input *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootInstanceAsync(ctx workflow.Context, input *lightsail.RebootInstanceInput) *RebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootInstance", input)
	return &RebootInstanceFuture{Future: future}
}

func (a *stub) RebootRelationalDatabase(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) *RebootRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootRelationalDatabase", input)
	return &RebootRelationalDatabaseFuture{Future: future}
}

func (a *stub) RegisterContainerImage(ctx workflow.Context, input *lightsail.RegisterContainerImageInput) (*lightsail.RegisterContainerImageOutput, error) {
	var output lightsail.RegisterContainerImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-RegisterContainerImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterContainerImageAsync(ctx workflow.Context, input *lightsail.RegisterContainerImageInput) *RegisterContainerImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-RegisterContainerImage", input)
	return &RegisterContainerImageFuture{Future: future}
}

func (a *stub) ReleaseStaticIp(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ReleaseStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReleaseStaticIpAsync(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) *ReleaseStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ReleaseStaticIp", input)
	return &ReleaseStaticIpFuture{Future: future}
}

func (a *stub) ResetDistributionCache(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ResetDistributionCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDistributionCacheAsync(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) *ResetDistributionCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ResetDistributionCache", input)
	return &ResetDistributionCacheFuture{Future: future}
}

func (a *stub) SendContactMethodVerification(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-SendContactMethodVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendContactMethodVerificationAsync(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) *SendContactMethodVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-SendContactMethodVerification", input)
	return &SendContactMethodVerificationFuture{Future: future}
}

func (a *stub) SetIpAddressType(ctx workflow.Context, input *lightsail.SetIpAddressTypeInput) (*lightsail.SetIpAddressTypeOutput, error) {
	var output lightsail.SetIpAddressTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-SetIpAddressType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIpAddressTypeAsync(ctx workflow.Context, input *lightsail.SetIpAddressTypeInput) *SetIpAddressTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-SetIpAddressType", input)
	return &SetIpAddressTypeFuture{Future: future}
}

func (a *stub) StartInstance(ctx workflow.Context, input *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartInstanceAsync(ctx workflow.Context, input *lightsail.StartInstanceInput) *StartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StartInstance", input)
	return &StartInstanceFuture{Future: future}
}

func (a *stub) StartRelationalDatabase(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StartRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) *StartRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StartRelationalDatabase", input)
	return &StartRelationalDatabaseFuture{Future: future}
}

func (a *stub) StopInstance(ctx workflow.Context, input *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopInstanceAsync(ctx workflow.Context, input *lightsail.StopInstanceInput) *StopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StopInstance", input)
	return &StopInstanceFuture{Future: future}
}

func (a *stub) StopRelationalDatabase(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StopRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) *StopRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StopRelationalDatabase", input)
	return &StopRelationalDatabaseFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *lightsail.TagResourceInput) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *lightsail.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TestAlarm(ctx workflow.Context, input *lightsail.TestAlarmInput) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-TestAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestAlarmAsync(ctx workflow.Context, input *lightsail.TestAlarmInput) *TestAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-TestAlarm", input)
	return &TestAlarmFuture{Future: future}
}

func (a *stub) UnpeerVpc(ctx workflow.Context, input *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UnpeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnpeerVpcAsync(ctx workflow.Context, input *lightsail.UnpeerVpcInput) *UnpeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UnpeerVpc", input)
	return &UnpeerVpcFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *lightsail.UntagResourceInput) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *lightsail.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateContainerService(ctx workflow.Context, input *lightsail.UpdateContainerServiceInput) (*lightsail.UpdateContainerServiceOutput, error) {
	var output lightsail.UpdateContainerServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateContainerService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContainerServiceAsync(ctx workflow.Context, input *lightsail.UpdateContainerServiceInput) *UpdateContainerServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateContainerService", input)
	return &UpdateContainerServiceFuture{Future: future}
}

func (a *stub) UpdateDistribution(ctx workflow.Context, input *lightsail.UpdateDistributionInput) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionAsync(ctx workflow.Context, input *lightsail.UpdateDistributionInput) *UpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistribution", input)
	return &UpdateDistributionFuture{Future: future}
}

func (a *stub) UpdateDistributionBundle(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistributionBundle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionBundleAsync(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) *UpdateDistributionBundleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistributionBundle", input)
	return &UpdateDistributionBundleFuture{Future: future}
}

func (a *stub) UpdateDomainEntry(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainEntryAsync(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) *UpdateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDomainEntry", input)
	return &UpdateDomainEntryFuture{Future: future}
}

func (a *stub) UpdateLoadBalancerAttribute(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateLoadBalancerAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoadBalancerAttributeAsync(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) *UpdateLoadBalancerAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateLoadBalancerAttribute", input)
	return &UpdateLoadBalancerAttributeFuture{Future: future}
}

func (a *stub) UpdateRelationalDatabase(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) *UpdateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabase", input)
	return &UpdateRelationalDatabaseFuture{Future: future}
}

func (a *stub) UpdateRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) *UpdateRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabaseParameters", input)
	return &UpdateRelationalDatabaseParametersFuture{Future: future}
}
