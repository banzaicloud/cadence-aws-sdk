// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package lightsailstub

import (
	"github.com/aws/aws-sdk-go/service/lightsail"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type LightsailAllocateStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAllocateStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachCertificateToDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAttachCertificateToDistributionFuture) Get(ctx workflow.Context) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAttachDiskFuture) Get(ctx workflow.Context) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachInstancesToLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAttachInstancesToLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAttachLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailAttachStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailAttachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCloseInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCloseInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCopySnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCopySnapshotFuture) Get(ctx workflow.Context) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateCloudFormationStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateCloudFormationStackFuture) Get(ctx workflow.Context) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateContactMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateContactMethodFuture) Get(ctx workflow.Context) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDiskFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDiskFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDistributionFuture) Get(ctx workflow.Context) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDomainFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateInstancesFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateInstancesFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateInstancesFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateKeyPairFuture) Get(ctx workflow.Context) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseFromSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailCreateRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailCreateRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteAlarmFuture) Get(ctx workflow.Context) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteAutoSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteAutoSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteContactMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteContactMethodFuture) Get(ctx workflow.Context) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteDiskFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteDistributionFuture) Get(ctx workflow.Context) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteDomainFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteInstanceFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteKnownHostKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteKnownHostKeysFuture) Get(ctx workflow.Context) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteLoadBalancerTlsCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteLoadBalancerTlsCertificateFuture) Get(ctx workflow.Context) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDeleteRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDeleteRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachCertificateFromDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDetachCertificateFromDistributionFuture) Get(ctx workflow.Context) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDetachDiskFuture) Get(ctx workflow.Context) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachInstancesFromLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDetachInstancesFromLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDetachStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDetachStaticIpFuture) Get(ctx workflow.Context) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDisableAddOnFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDisableAddOnFuture) Get(ctx workflow.Context) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailDownloadDefaultKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailDownloadDefaultKeyPairFuture) Get(ctx workflow.Context) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailEnableAddOnFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailEnableAddOnFuture) Get(ctx workflow.Context) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailExportSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailExportSnapshotFuture) Get(ctx workflow.Context) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetActiveNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetActiveNamesFuture) Get(ctx workflow.Context) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetAlarmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetAlarmsFuture) Get(ctx workflow.Context) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetAutoSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetAutoSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetBlueprintsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetCloudFormationStackRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetCloudFormationStackRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetContactMethodsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetContactMethodsFuture) Get(ctx workflow.Context) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDiskFuture) Get(ctx workflow.Context) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDiskSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDiskSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDiskSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDisksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDisksFuture) Get(ctx workflow.Context) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDistributionBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionLatestCacheResetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDistributionLatestCacheResetFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDistributionMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDistributionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDistributionsFuture) Get(ctx workflow.Context) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDomainFuture) Get(ctx workflow.Context) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetDomainsFuture) Get(ctx workflow.Context) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetExportSnapshotRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetExportSnapshotRecordsFuture) Get(ctx workflow.Context) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceAccessDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceAccessDetailsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstancePortStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstancePortStatesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstanceStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstanceStateFuture) Get(ctx workflow.Context) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetInstancesFuture) Get(ctx workflow.Context) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetKeyPairFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetKeyPairsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetKeyPairsFuture) Get(ctx workflow.Context) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancerTlsCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetLoadBalancerTlsCertificatesFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetLoadBalancersFuture) Get(ctx workflow.Context) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetOperationFuture) Get(ctx workflow.Context) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetOperationsFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetOperationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetOperationsForResourceFuture) Get(ctx workflow.Context) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRegionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRegionsFuture) Get(ctx workflow.Context) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseBlueprintsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseBlueprintsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseBundlesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseLogEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseLogEventsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseLogStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseLogStreamsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseMasterUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseMasterUserPasswordFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseMetricDataFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseSnapshotFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabaseSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabaseSnapshotsFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetRelationalDatabasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetRelationalDatabasesFuture) Get(ctx workflow.Context) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetStaticIpFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailGetStaticIpsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailGetStaticIpsFuture) Get(ctx workflow.Context) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailImportKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailImportKeyPairFuture) Get(ctx workflow.Context) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailIsVpcPeeredFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailIsVpcPeeredFuture) Get(ctx workflow.Context) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailOpenInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailOpenInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPeerVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailPeerVpcFuture) Get(ctx workflow.Context) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPutAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailPutAlarmFuture) Get(ctx workflow.Context) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailPutInstancePublicPortsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailPutInstancePublicPortsFuture) Get(ctx workflow.Context) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailRebootInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailRebootInstanceFuture) Get(ctx workflow.Context) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailRebootRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailRebootRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailReleaseStaticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailReleaseStaticIpFuture) Get(ctx workflow.Context) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailResetDistributionCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailResetDistributionCacheFuture) Get(ctx workflow.Context) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailSendContactMethodVerificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailSendContactMethodVerificationFuture) Get(ctx workflow.Context) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStartInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailStartInstanceFuture) Get(ctx workflow.Context) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStartRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailStartRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStopInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailStopInstanceFuture) Get(ctx workflow.Context) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailStopRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailStopRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailTagResourceFuture) Get(ctx workflow.Context) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailTestAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailTestAlarmFuture) Get(ctx workflow.Context) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUnpeerVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUnpeerVpcFuture) Get(ctx workflow.Context) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUntagResourceFuture) Get(ctx workflow.Context) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDistributionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateDistributionFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDistributionBundleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateDistributionBundleFuture) Get(ctx workflow.Context) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateDomainEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateDomainEntryFuture) Get(ctx workflow.Context) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateLoadBalancerAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateLoadBalancerAttributeFuture) Get(ctx workflow.Context) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateRelationalDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateRelationalDatabaseFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LightsailUpdateRelationalDatabaseParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LightsailUpdateRelationalDatabaseParametersFuture) Get(ctx workflow.Context) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateStaticIp(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	var output lightsail.AllocateStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AllocateStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateStaticIpAsync(ctx workflow.Context, input *lightsail.AllocateStaticIpInput) *LightsailAllocateStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AllocateStaticIp", input)
	return &LightsailAllocateStaticIpFuture{Future: future}
}

func (a *stub) AttachCertificateToDistribution(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) (*lightsail.AttachCertificateToDistributionOutput, error) {
	var output lightsail.AttachCertificateToDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachCertificateToDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachCertificateToDistributionAsync(ctx workflow.Context, input *lightsail.AttachCertificateToDistributionInput) *LightsailAttachCertificateToDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachCertificateToDistribution", input)
	return &LightsailAttachCertificateToDistributionFuture{Future: future}
}

func (a *stub) AttachDisk(ctx workflow.Context, input *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	var output lightsail.AttachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachDiskAsync(ctx workflow.Context, input *lightsail.AttachDiskInput) *LightsailAttachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachDisk", input)
	return &LightsailAttachDiskFuture{Future: future}
}

func (a *stub) AttachInstancesToLoadBalancer(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	var output lightsail.AttachInstancesToLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachInstancesToLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachInstancesToLoadBalancerAsync(ctx workflow.Context, input *lightsail.AttachInstancesToLoadBalancerInput) *LightsailAttachInstancesToLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachInstancesToLoadBalancer", input)
	return &LightsailAttachInstancesToLoadBalancerFuture{Future: future}
}

func (a *stub) AttachLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.AttachLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput) *LightsailAttachLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachLoadBalancerTlsCertificate", input)
	return &LightsailAttachLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) AttachStaticIp(ctx workflow.Context, input *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	var output lightsail.AttachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachStaticIpAsync(ctx workflow.Context, input *lightsail.AttachStaticIpInput) *LightsailAttachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-AttachStaticIp", input)
	return &LightsailAttachStaticIpFuture{Future: future}
}

func (a *stub) CloseInstancePublicPorts(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	var output lightsail.CloseInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CloseInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CloseInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.CloseInstancePublicPortsInput) *LightsailCloseInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CloseInstancePublicPorts", input)
	return &LightsailCloseInstancePublicPortsFuture{Future: future}
}

func (a *stub) CopySnapshot(ctx workflow.Context, input *lightsail.CopySnapshotInput) (*lightsail.CopySnapshotOutput, error) {
	var output lightsail.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopySnapshotAsync(ctx workflow.Context, input *lightsail.CopySnapshotInput) *LightsailCopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CopySnapshot", input)
	return &LightsailCopySnapshotFuture{Future: future}
}

func (a *stub) CreateCertificate(ctx workflow.Context, input *lightsail.CreateCertificateInput) (*lightsail.CreateCertificateOutput, error) {
	var output lightsail.CreateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateAsync(ctx workflow.Context, input *lightsail.CreateCertificateInput) *LightsailCreateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCertificate", input)
	return &LightsailCreateCertificateFuture{Future: future}
}

func (a *stub) CreateCloudFormationStack(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) (*lightsail.CreateCloudFormationStackOutput, error) {
	var output lightsail.CreateCloudFormationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCloudFormationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFormationStackAsync(ctx workflow.Context, input *lightsail.CreateCloudFormationStackInput) *LightsailCreateCloudFormationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateCloudFormationStack", input)
	return &LightsailCreateCloudFormationStackFuture{Future: future}
}

func (a *stub) CreateContactMethod(ctx workflow.Context, input *lightsail.CreateContactMethodInput) (*lightsail.CreateContactMethodOutput, error) {
	var output lightsail.CreateContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactMethodAsync(ctx workflow.Context, input *lightsail.CreateContactMethodInput) *LightsailCreateContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateContactMethod", input)
	return &LightsailCreateContactMethodFuture{Future: future}
}

func (a *stub) CreateDisk(ctx workflow.Context, input *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	var output lightsail.CreateDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskAsync(ctx workflow.Context, input *lightsail.CreateDiskInput) *LightsailCreateDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDisk", input)
	return &LightsailCreateDiskFuture{Future: future}
}

func (a *stub) CreateDiskFromSnapshot(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	var output lightsail.CreateDiskFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskFromSnapshotInput) *LightsailCreateDiskFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskFromSnapshot", input)
	return &LightsailCreateDiskFromSnapshotFuture{Future: future}
}

func (a *stub) CreateDiskSnapshot(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	var output lightsail.CreateDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDiskSnapshotAsync(ctx workflow.Context, input *lightsail.CreateDiskSnapshotInput) *LightsailCreateDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDiskSnapshot", input)
	return &LightsailCreateDiskSnapshotFuture{Future: future}
}

func (a *stub) CreateDistribution(ctx workflow.Context, input *lightsail.CreateDistributionInput) (*lightsail.CreateDistributionOutput, error) {
	var output lightsail.CreateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDistributionAsync(ctx workflow.Context, input *lightsail.CreateDistributionInput) *LightsailCreateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDistribution", input)
	return &LightsailCreateDistributionFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	var output lightsail.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *lightsail.CreateDomainInput) *LightsailCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomain", input)
	return &LightsailCreateDomainFuture{Future: future}
}

func (a *stub) CreateDomainEntry(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	var output lightsail.CreateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainEntryAsync(ctx workflow.Context, input *lightsail.CreateDomainEntryInput) *LightsailCreateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateDomainEntry", input)
	return &LightsailCreateDomainEntryFuture{Future: future}
}

func (a *stub) CreateInstanceSnapshot(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	var output lightsail.CreateInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstanceSnapshotInput) *LightsailCreateInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstanceSnapshot", input)
	return &LightsailCreateInstanceSnapshotFuture{Future: future}
}

func (a *stub) CreateInstances(ctx workflow.Context, input *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	var output lightsail.CreateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstancesAsync(ctx workflow.Context, input *lightsail.CreateInstancesInput) *LightsailCreateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstances", input)
	return &LightsailCreateInstancesFuture{Future: future}
}

func (a *stub) CreateInstancesFromSnapshot(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	var output lightsail.CreateInstancesFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstancesFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstancesFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateInstancesFromSnapshotInput) *LightsailCreateInstancesFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateInstancesFromSnapshot", input)
	return &LightsailCreateInstancesFromSnapshotFuture{Future: future}
}

func (a *stub) CreateKeyPair(ctx workflow.Context, input *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	var output lightsail.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyPairAsync(ctx workflow.Context, input *lightsail.CreateKeyPairInput) *LightsailCreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateKeyPair", input)
	return &LightsailCreateKeyPairFuture{Future: future}
}

func (a *stub) CreateLoadBalancer(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	var output lightsail.CreateLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoadBalancerAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerInput) *LightsailCreateLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancer", input)
	return &LightsailCreateLoadBalancerFuture{Future: future}
}

func (a *stub) CreateLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.CreateLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput) *LightsailCreateLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateLoadBalancerTlsCertificate", input)
	return &LightsailCreateLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) CreateRelationalDatabase(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) (*lightsail.CreateRelationalDatabaseOutput, error) {
	var output lightsail.CreateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseInput) *LightsailCreateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabase", input)
	return &LightsailCreateRelationalDatabaseFuture{Future: future}
}

func (a *stub) CreateRelationalDatabaseFromSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseFromSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseFromSnapshotInput) *LightsailCreateRelationalDatabaseFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseFromSnapshot", input)
	return &LightsailCreateRelationalDatabaseFromSnapshotFuture{Future: future}
}

func (a *stub) CreateRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.CreateRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.CreateRelationalDatabaseSnapshotInput) *LightsailCreateRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-CreateRelationalDatabaseSnapshot", input)
	return &LightsailCreateRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) DeleteAlarm(ctx workflow.Context, input *lightsail.DeleteAlarmInput) (*lightsail.DeleteAlarmOutput, error) {
	var output lightsail.DeleteAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlarmAsync(ctx workflow.Context, input *lightsail.DeleteAlarmInput) *LightsailDeleteAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAlarm", input)
	return &LightsailDeleteAlarmFuture{Future: future}
}

func (a *stub) DeleteAutoSnapshot(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) (*lightsail.DeleteAutoSnapshotOutput, error) {
	var output lightsail.DeleteAutoSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAutoSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAutoSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteAutoSnapshotInput) *LightsailDeleteAutoSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteAutoSnapshot", input)
	return &LightsailDeleteAutoSnapshotFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *lightsail.DeleteCertificateInput) (*lightsail.DeleteCertificateOutput, error) {
	var output lightsail.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *lightsail.DeleteCertificateInput) *LightsailDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteCertificate", input)
	return &LightsailDeleteCertificateFuture{Future: future}
}

func (a *stub) DeleteContactMethod(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) (*lightsail.DeleteContactMethodOutput, error) {
	var output lightsail.DeleteContactMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContactMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContactMethodAsync(ctx workflow.Context, input *lightsail.DeleteContactMethodInput) *LightsailDeleteContactMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteContactMethod", input)
	return &LightsailDeleteContactMethodFuture{Future: future}
}

func (a *stub) DeleteDisk(ctx workflow.Context, input *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	var output lightsail.DeleteDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDiskAsync(ctx workflow.Context, input *lightsail.DeleteDiskInput) *LightsailDeleteDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDisk", input)
	return &LightsailDeleteDiskFuture{Future: future}
}

func (a *stub) DeleteDiskSnapshot(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	var output lightsail.DeleteDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDiskSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteDiskSnapshotInput) *LightsailDeleteDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDiskSnapshot", input)
	return &LightsailDeleteDiskSnapshotFuture{Future: future}
}

func (a *stub) DeleteDistribution(ctx workflow.Context, input *lightsail.DeleteDistributionInput) (*lightsail.DeleteDistributionOutput, error) {
	var output lightsail.DeleteDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDistributionAsync(ctx workflow.Context, input *lightsail.DeleteDistributionInput) *LightsailDeleteDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDistribution", input)
	return &LightsailDeleteDistributionFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	var output lightsail.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *lightsail.DeleteDomainInput) *LightsailDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomain", input)
	return &LightsailDeleteDomainFuture{Future: future}
}

func (a *stub) DeleteDomainEntry(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	var output lightsail.DeleteDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainEntryAsync(ctx workflow.Context, input *lightsail.DeleteDomainEntryInput) *LightsailDeleteDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteDomainEntry", input)
	return &LightsailDeleteDomainEntryFuture{Future: future}
}

func (a *stub) DeleteInstance(ctx workflow.Context, input *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	var output lightsail.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceAsync(ctx workflow.Context, input *lightsail.DeleteInstanceInput) *LightsailDeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstance", input)
	return &LightsailDeleteInstanceFuture{Future: future}
}

func (a *stub) DeleteInstanceSnapshot(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	var output lightsail.DeleteInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteInstanceSnapshotInput) *LightsailDeleteInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteInstanceSnapshot", input)
	return &LightsailDeleteInstanceSnapshotFuture{Future: future}
}

func (a *stub) DeleteKeyPair(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	var output lightsail.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKeyPairAsync(ctx workflow.Context, input *lightsail.DeleteKeyPairInput) *LightsailDeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKeyPair", input)
	return &LightsailDeleteKeyPairFuture{Future: future}
}

func (a *stub) DeleteKnownHostKeys(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) (*lightsail.DeleteKnownHostKeysOutput, error) {
	var output lightsail.DeleteKnownHostKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKnownHostKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKnownHostKeysAsync(ctx workflow.Context, input *lightsail.DeleteKnownHostKeysInput) *LightsailDeleteKnownHostKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteKnownHostKeys", input)
	return &LightsailDeleteKnownHostKeysFuture{Future: future}
}

func (a *stub) DeleteLoadBalancer(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	var output lightsail.DeleteLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoadBalancerAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerInput) *LightsailDeleteLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancer", input)
	return &LightsailDeleteLoadBalancerFuture{Future: future}
}

func (a *stub) DeleteLoadBalancerTlsCertificate(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	var output lightsail.DeleteLoadBalancerTlsCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancerTlsCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoadBalancerTlsCertificateAsync(ctx workflow.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput) *LightsailDeleteLoadBalancerTlsCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteLoadBalancerTlsCertificate", input)
	return &LightsailDeleteLoadBalancerTlsCertificateFuture{Future: future}
}

func (a *stub) DeleteRelationalDatabase(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	var output lightsail.DeleteRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseInput) *LightsailDeleteRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabase", input)
	return &LightsailDeleteRelationalDatabaseFuture{Future: future}
}

func (a *stub) DeleteRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.DeleteRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.DeleteRelationalDatabaseSnapshotInput) *LightsailDeleteRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DeleteRelationalDatabaseSnapshot", input)
	return &LightsailDeleteRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) DetachCertificateFromDistribution(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	var output lightsail.DetachCertificateFromDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachCertificateFromDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachCertificateFromDistributionAsync(ctx workflow.Context, input *lightsail.DetachCertificateFromDistributionInput) *LightsailDetachCertificateFromDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachCertificateFromDistribution", input)
	return &LightsailDetachCertificateFromDistributionFuture{Future: future}
}

func (a *stub) DetachDisk(ctx workflow.Context, input *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	var output lightsail.DetachDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachDiskAsync(ctx workflow.Context, input *lightsail.DetachDiskInput) *LightsailDetachDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachDisk", input)
	return &LightsailDetachDiskFuture{Future: future}
}

func (a *stub) DetachInstancesFromLoadBalancer(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	var output lightsail.DetachInstancesFromLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachInstancesFromLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachInstancesFromLoadBalancerAsync(ctx workflow.Context, input *lightsail.DetachInstancesFromLoadBalancerInput) *LightsailDetachInstancesFromLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachInstancesFromLoadBalancer", input)
	return &LightsailDetachInstancesFromLoadBalancerFuture{Future: future}
}

func (a *stub) DetachStaticIp(ctx workflow.Context, input *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	var output lightsail.DetachStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachStaticIpAsync(ctx workflow.Context, input *lightsail.DetachStaticIpInput) *LightsailDetachStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DetachStaticIp", input)
	return &LightsailDetachStaticIpFuture{Future: future}
}

func (a *stub) DisableAddOn(ctx workflow.Context, input *lightsail.DisableAddOnInput) (*lightsail.DisableAddOnOutput, error) {
	var output lightsail.DisableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DisableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAddOnAsync(ctx workflow.Context, input *lightsail.DisableAddOnInput) *LightsailDisableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DisableAddOn", input)
	return &LightsailDisableAddOnFuture{Future: future}
}

func (a *stub) DownloadDefaultKeyPair(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	var output lightsail.DownloadDefaultKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-DownloadDefaultKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DownloadDefaultKeyPairAsync(ctx workflow.Context, input *lightsail.DownloadDefaultKeyPairInput) *LightsailDownloadDefaultKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-DownloadDefaultKeyPair", input)
	return &LightsailDownloadDefaultKeyPairFuture{Future: future}
}

func (a *stub) EnableAddOn(ctx workflow.Context, input *lightsail.EnableAddOnInput) (*lightsail.EnableAddOnOutput, error) {
	var output lightsail.EnableAddOnOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-EnableAddOn", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAddOnAsync(ctx workflow.Context, input *lightsail.EnableAddOnInput) *LightsailEnableAddOnFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-EnableAddOn", input)
	return &LightsailEnableAddOnFuture{Future: future}
}

func (a *stub) ExportSnapshot(ctx workflow.Context, input *lightsail.ExportSnapshotInput) (*lightsail.ExportSnapshotOutput, error) {
	var output lightsail.ExportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ExportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportSnapshotAsync(ctx workflow.Context, input *lightsail.ExportSnapshotInput) *LightsailExportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ExportSnapshot", input)
	return &LightsailExportSnapshotFuture{Future: future}
}

func (a *stub) GetActiveNames(ctx workflow.Context, input *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	var output lightsail.GetActiveNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetActiveNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetActiveNamesAsync(ctx workflow.Context, input *lightsail.GetActiveNamesInput) *LightsailGetActiveNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetActiveNames", input)
	return &LightsailGetActiveNamesFuture{Future: future}
}

func (a *stub) GetAlarms(ctx workflow.Context, input *lightsail.GetAlarmsInput) (*lightsail.GetAlarmsOutput, error) {
	var output lightsail.GetAlarmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAlarms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAlarmsAsync(ctx workflow.Context, input *lightsail.GetAlarmsInput) *LightsailGetAlarmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAlarms", input)
	return &LightsailGetAlarmsFuture{Future: future}
}

func (a *stub) GetAutoSnapshots(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) (*lightsail.GetAutoSnapshotsOutput, error) {
	var output lightsail.GetAutoSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAutoSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAutoSnapshotsAsync(ctx workflow.Context, input *lightsail.GetAutoSnapshotsInput) *LightsailGetAutoSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetAutoSnapshots", input)
	return &LightsailGetAutoSnapshotsFuture{Future: future}
}

func (a *stub) GetBlueprints(ctx workflow.Context, input *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	var output lightsail.GetBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBlueprintsAsync(ctx workflow.Context, input *lightsail.GetBlueprintsInput) *LightsailGetBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBlueprints", input)
	return &LightsailGetBlueprintsFuture{Future: future}
}

func (a *stub) GetBundles(ctx workflow.Context, input *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	var output lightsail.GetBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBundlesAsync(ctx workflow.Context, input *lightsail.GetBundlesInput) *LightsailGetBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetBundles", input)
	return &LightsailGetBundlesFuture{Future: future}
}

func (a *stub) GetCertificates(ctx workflow.Context, input *lightsail.GetCertificatesInput) (*lightsail.GetCertificatesOutput, error) {
	var output lightsail.GetCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificatesAsync(ctx workflow.Context, input *lightsail.GetCertificatesInput) *LightsailGetCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCertificates", input)
	return &LightsailGetCertificatesFuture{Future: future}
}

func (a *stub) GetCloudFormationStackRecords(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	var output lightsail.GetCloudFormationStackRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCloudFormationStackRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFormationStackRecordsAsync(ctx workflow.Context, input *lightsail.GetCloudFormationStackRecordsInput) *LightsailGetCloudFormationStackRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetCloudFormationStackRecords", input)
	return &LightsailGetCloudFormationStackRecordsFuture{Future: future}
}

func (a *stub) GetContactMethods(ctx workflow.Context, input *lightsail.GetContactMethodsInput) (*lightsail.GetContactMethodsOutput, error) {
	var output lightsail.GetContactMethodsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContactMethods", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactMethodsAsync(ctx workflow.Context, input *lightsail.GetContactMethodsInput) *LightsailGetContactMethodsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetContactMethods", input)
	return &LightsailGetContactMethodsFuture{Future: future}
}

func (a *stub) GetDisk(ctx workflow.Context, input *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	var output lightsail.GetDiskOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskAsync(ctx workflow.Context, input *lightsail.GetDiskInput) *LightsailGetDiskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisk", input)
	return &LightsailGetDiskFuture{Future: future}
}

func (a *stub) GetDiskSnapshot(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	var output lightsail.GetDiskSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskSnapshotAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotInput) *LightsailGetDiskSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshot", input)
	return &LightsailGetDiskSnapshotFuture{Future: future}
}

func (a *stub) GetDiskSnapshots(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	var output lightsail.GetDiskSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiskSnapshotsAsync(ctx workflow.Context, input *lightsail.GetDiskSnapshotsInput) *LightsailGetDiskSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDiskSnapshots", input)
	return &LightsailGetDiskSnapshotsFuture{Future: future}
}

func (a *stub) GetDisks(ctx workflow.Context, input *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	var output lightsail.GetDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDisksAsync(ctx workflow.Context, input *lightsail.GetDisksInput) *LightsailGetDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDisks", input)
	return &LightsailGetDisksFuture{Future: future}
}

func (a *stub) GetDistributionBundles(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) (*lightsail.GetDistributionBundlesOutput, error) {
	var output lightsail.GetDistributionBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionBundlesAsync(ctx workflow.Context, input *lightsail.GetDistributionBundlesInput) *LightsailGetDistributionBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionBundles", input)
	return &LightsailGetDistributionBundlesFuture{Future: future}
}

func (a *stub) GetDistributionLatestCacheReset(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	var output lightsail.GetDistributionLatestCacheResetOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionLatestCacheReset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionLatestCacheResetAsync(ctx workflow.Context, input *lightsail.GetDistributionLatestCacheResetInput) *LightsailGetDistributionLatestCacheResetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionLatestCacheReset", input)
	return &LightsailGetDistributionLatestCacheResetFuture{Future: future}
}

func (a *stub) GetDistributionMetricData(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) (*lightsail.GetDistributionMetricDataOutput, error) {
	var output lightsail.GetDistributionMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionMetricDataAsync(ctx workflow.Context, input *lightsail.GetDistributionMetricDataInput) *LightsailGetDistributionMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributionMetricData", input)
	return &LightsailGetDistributionMetricDataFuture{Future: future}
}

func (a *stub) GetDistributions(ctx workflow.Context, input *lightsail.GetDistributionsInput) (*lightsail.GetDistributionsOutput, error) {
	var output lightsail.GetDistributionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDistributionsAsync(ctx workflow.Context, input *lightsail.GetDistributionsInput) *LightsailGetDistributionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDistributions", input)
	return &LightsailGetDistributionsFuture{Future: future}
}

func (a *stub) GetDomain(ctx workflow.Context, input *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	var output lightsail.GetDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainAsync(ctx workflow.Context, input *lightsail.GetDomainInput) *LightsailGetDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomain", input)
	return &LightsailGetDomainFuture{Future: future}
}

func (a *stub) GetDomains(ctx workflow.Context, input *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	var output lightsail.GetDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainsAsync(ctx workflow.Context, input *lightsail.GetDomainsInput) *LightsailGetDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetDomains", input)
	return &LightsailGetDomainsFuture{Future: future}
}

func (a *stub) GetExportSnapshotRecords(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	var output lightsail.GetExportSnapshotRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetExportSnapshotRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExportSnapshotRecordsAsync(ctx workflow.Context, input *lightsail.GetExportSnapshotRecordsInput) *LightsailGetExportSnapshotRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetExportSnapshotRecords", input)
	return &LightsailGetExportSnapshotRecordsFuture{Future: future}
}

func (a *stub) GetInstance(ctx workflow.Context, input *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	var output lightsail.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAsync(ctx workflow.Context, input *lightsail.GetInstanceInput) *LightsailGetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstance", input)
	return &LightsailGetInstanceFuture{Future: future}
}

func (a *stub) GetInstanceAccessDetails(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	var output lightsail.GetInstanceAccessDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceAccessDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceAccessDetailsAsync(ctx workflow.Context, input *lightsail.GetInstanceAccessDetailsInput) *LightsailGetInstanceAccessDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceAccessDetails", input)
	return &LightsailGetInstanceAccessDetailsFuture{Future: future}
}

func (a *stub) GetInstanceMetricData(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	var output lightsail.GetInstanceMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceMetricDataAsync(ctx workflow.Context, input *lightsail.GetInstanceMetricDataInput) *LightsailGetInstanceMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceMetricData", input)
	return &LightsailGetInstanceMetricDataFuture{Future: future}
}

func (a *stub) GetInstancePortStates(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	var output lightsail.GetInstancePortStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstancePortStates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancePortStatesAsync(ctx workflow.Context, input *lightsail.GetInstancePortStatesInput) *LightsailGetInstancePortStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstancePortStates", input)
	return &LightsailGetInstancePortStatesFuture{Future: future}
}

func (a *stub) GetInstanceSnapshot(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	var output lightsail.GetInstanceSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceSnapshotAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotInput) *LightsailGetInstanceSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshot", input)
	return &LightsailGetInstanceSnapshotFuture{Future: future}
}

func (a *stub) GetInstanceSnapshots(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	var output lightsail.GetInstanceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceSnapshotsAsync(ctx workflow.Context, input *lightsail.GetInstanceSnapshotsInput) *LightsailGetInstanceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceSnapshots", input)
	return &LightsailGetInstanceSnapshotsFuture{Future: future}
}

func (a *stub) GetInstanceState(ctx workflow.Context, input *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	var output lightsail.GetInstanceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceStateAsync(ctx workflow.Context, input *lightsail.GetInstanceStateInput) *LightsailGetInstanceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstanceState", input)
	return &LightsailGetInstanceStateFuture{Future: future}
}

func (a *stub) GetInstances(ctx workflow.Context, input *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	var output lightsail.GetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstancesAsync(ctx workflow.Context, input *lightsail.GetInstancesInput) *LightsailGetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetInstances", input)
	return &LightsailGetInstancesFuture{Future: future}
}

func (a *stub) GetKeyPair(ctx workflow.Context, input *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	var output lightsail.GetKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyPairAsync(ctx workflow.Context, input *lightsail.GetKeyPairInput) *LightsailGetKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPair", input)
	return &LightsailGetKeyPairFuture{Future: future}
}

func (a *stub) GetKeyPairs(ctx workflow.Context, input *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	var output lightsail.GetKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetKeyPairsAsync(ctx workflow.Context, input *lightsail.GetKeyPairsInput) *LightsailGetKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetKeyPairs", input)
	return &LightsailGetKeyPairsFuture{Future: future}
}

func (a *stub) GetLoadBalancer(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	var output lightsail.GetLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerInput) *LightsailGetLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancer", input)
	return &LightsailGetLoadBalancerFuture{Future: future}
}

func (a *stub) GetLoadBalancerMetricData(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	var output lightsail.GetLoadBalancerMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerMetricDataAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerMetricDataInput) *LightsailGetLoadBalancerMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerMetricData", input)
	return &LightsailGetLoadBalancerMetricDataFuture{Future: future}
}

func (a *stub) GetLoadBalancerTlsCertificates(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	var output lightsail.GetLoadBalancerTlsCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerTlsCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancerTlsCertificatesAsync(ctx workflow.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput) *LightsailGetLoadBalancerTlsCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancerTlsCertificates", input)
	return &LightsailGetLoadBalancerTlsCertificatesFuture{Future: future}
}

func (a *stub) GetLoadBalancers(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	var output lightsail.GetLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoadBalancersAsync(ctx workflow.Context, input *lightsail.GetLoadBalancersInput) *LightsailGetLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetLoadBalancers", input)
	return &LightsailGetLoadBalancersFuture{Future: future}
}

func (a *stub) GetOperation(ctx workflow.Context, input *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	var output lightsail.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationAsync(ctx workflow.Context, input *lightsail.GetOperationInput) *LightsailGetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperation", input)
	return &LightsailGetOperationFuture{Future: future}
}

func (a *stub) GetOperations(ctx workflow.Context, input *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	var output lightsail.GetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationsAsync(ctx workflow.Context, input *lightsail.GetOperationsInput) *LightsailGetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperations", input)
	return &LightsailGetOperationsFuture{Future: future}
}

func (a *stub) GetOperationsForResource(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	var output lightsail.GetOperationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOperationsForResourceAsync(ctx workflow.Context, input *lightsail.GetOperationsForResourceInput) *LightsailGetOperationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetOperationsForResource", input)
	return &LightsailGetOperationsForResourceFuture{Future: future}
}

func (a *stub) GetRegions(ctx workflow.Context, input *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	var output lightsail.GetRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegionsAsync(ctx workflow.Context, input *lightsail.GetRegionsInput) *LightsailGetRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRegions", input)
	return &LightsailGetRegionsFuture{Future: future}
}

func (a *stub) GetRelationalDatabase(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) (*lightsail.GetRelationalDatabaseOutput, error) {
	var output lightsail.GetRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseInput) *LightsailGetRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabase", input)
	return &LightsailGetRelationalDatabaseFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseBlueprints(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	var output lightsail.GetRelationalDatabaseBlueprintsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBlueprints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseBlueprintsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBlueprintsInput) *LightsailGetRelationalDatabaseBlueprintsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBlueprints", input)
	return &LightsailGetRelationalDatabaseBlueprintsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseBundles(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	var output lightsail.GetRelationalDatabaseBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseBundlesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseBundlesInput) *LightsailGetRelationalDatabaseBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseBundles", input)
	return &LightsailGetRelationalDatabaseBundlesFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseEventsInput) *LightsailGetRelationalDatabaseEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseEvents", input)
	return &LightsailGetRelationalDatabaseEventsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseLogEvents(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseLogEventsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogEventsInput) *LightsailGetRelationalDatabaseLogEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogEvents", input)
	return &LightsailGetRelationalDatabaseLogEventsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseLogStreams(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	var output lightsail.GetRelationalDatabaseLogStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseLogStreamsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseLogStreamsInput) *LightsailGetRelationalDatabaseLogStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseLogStreams", input)
	return &LightsailGetRelationalDatabaseLogStreamsFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseMasterUserPassword(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	var output lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMasterUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseMasterUserPasswordAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMasterUserPasswordInput) *LightsailGetRelationalDatabaseMasterUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMasterUserPassword", input)
	return &LightsailGetRelationalDatabaseMasterUserPasswordFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseMetricData(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	var output lightsail.GetRelationalDatabaseMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseMetricDataAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseMetricDataInput) *LightsailGetRelationalDatabaseMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseMetricData", input)
	return &LightsailGetRelationalDatabaseMetricDataFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	var output lightsail.GetRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseParametersInput) *LightsailGetRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseParameters", input)
	return &LightsailGetRelationalDatabaseParametersFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseSnapshot(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseSnapshotAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotInput) *LightsailGetRelationalDatabaseSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshot", input)
	return &LightsailGetRelationalDatabaseSnapshotFuture{Future: future}
}

func (a *stub) GetRelationalDatabaseSnapshots(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	var output lightsail.GetRelationalDatabaseSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabaseSnapshotsAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabaseSnapshotsInput) *LightsailGetRelationalDatabaseSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabaseSnapshots", input)
	return &LightsailGetRelationalDatabaseSnapshotsFuture{Future: future}
}

func (a *stub) GetRelationalDatabases(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) (*lightsail.GetRelationalDatabasesOutput, error) {
	var output lightsail.GetRelationalDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRelationalDatabasesAsync(ctx workflow.Context, input *lightsail.GetRelationalDatabasesInput) *LightsailGetRelationalDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetRelationalDatabases", input)
	return &LightsailGetRelationalDatabasesFuture{Future: future}
}

func (a *stub) GetStaticIp(ctx workflow.Context, input *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	var output lightsail.GetStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStaticIpAsync(ctx workflow.Context, input *lightsail.GetStaticIpInput) *LightsailGetStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIp", input)
	return &LightsailGetStaticIpFuture{Future: future}
}

func (a *stub) GetStaticIps(ctx workflow.Context, input *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	var output lightsail.GetStaticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStaticIpsAsync(ctx workflow.Context, input *lightsail.GetStaticIpsInput) *LightsailGetStaticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-GetStaticIps", input)
	return &LightsailGetStaticIpsFuture{Future: future}
}

func (a *stub) ImportKeyPair(ctx workflow.Context, input *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	var output lightsail.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportKeyPairAsync(ctx workflow.Context, input *lightsail.ImportKeyPairInput) *LightsailImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ImportKeyPair", input)
	return &LightsailImportKeyPairFuture{Future: future}
}

func (a *stub) IsVpcPeered(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	var output lightsail.IsVpcPeeredOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-IsVpcPeered", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IsVpcPeeredAsync(ctx workflow.Context, input *lightsail.IsVpcPeeredInput) *LightsailIsVpcPeeredFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-IsVpcPeered", input)
	return &LightsailIsVpcPeeredFuture{Future: future}
}

func (a *stub) OpenInstancePublicPorts(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	var output lightsail.OpenInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-OpenInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) OpenInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.OpenInstancePublicPortsInput) *LightsailOpenInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-OpenInstancePublicPorts", input)
	return &LightsailOpenInstancePublicPortsFuture{Future: future}
}

func (a *stub) PeerVpc(ctx workflow.Context, input *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	var output lightsail.PeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PeerVpcAsync(ctx workflow.Context, input *lightsail.PeerVpcInput) *LightsailPeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PeerVpc", input)
	return &LightsailPeerVpcFuture{Future: future}
}

func (a *stub) PutAlarm(ctx workflow.Context, input *lightsail.PutAlarmInput) (*lightsail.PutAlarmOutput, error) {
	var output lightsail.PutAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PutAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAlarmAsync(ctx workflow.Context, input *lightsail.PutAlarmInput) *LightsailPutAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PutAlarm", input)
	return &LightsailPutAlarmFuture{Future: future}
}

func (a *stub) PutInstancePublicPorts(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	var output lightsail.PutInstancePublicPortsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-PutInstancePublicPorts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInstancePublicPortsAsync(ctx workflow.Context, input *lightsail.PutInstancePublicPortsInput) *LightsailPutInstancePublicPortsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-PutInstancePublicPorts", input)
	return &LightsailPutInstancePublicPortsFuture{Future: future}
}

func (a *stub) RebootInstance(ctx workflow.Context, input *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	var output lightsail.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootInstanceAsync(ctx workflow.Context, input *lightsail.RebootInstanceInput) *LightsailRebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootInstance", input)
	return &LightsailRebootInstanceFuture{Future: future}
}

func (a *stub) RebootRelationalDatabase(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) (*lightsail.RebootRelationalDatabaseOutput, error) {
	var output lightsail.RebootRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.RebootRelationalDatabaseInput) *LightsailRebootRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-RebootRelationalDatabase", input)
	return &LightsailRebootRelationalDatabaseFuture{Future: future}
}

func (a *stub) ReleaseStaticIp(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	var output lightsail.ReleaseStaticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ReleaseStaticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReleaseStaticIpAsync(ctx workflow.Context, input *lightsail.ReleaseStaticIpInput) *LightsailReleaseStaticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ReleaseStaticIp", input)
	return &LightsailReleaseStaticIpFuture{Future: future}
}

func (a *stub) ResetDistributionCache(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) (*lightsail.ResetDistributionCacheOutput, error) {
	var output lightsail.ResetDistributionCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-ResetDistributionCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDistributionCacheAsync(ctx workflow.Context, input *lightsail.ResetDistributionCacheInput) *LightsailResetDistributionCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-ResetDistributionCache", input)
	return &LightsailResetDistributionCacheFuture{Future: future}
}

func (a *stub) SendContactMethodVerification(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) (*lightsail.SendContactMethodVerificationOutput, error) {
	var output lightsail.SendContactMethodVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-SendContactMethodVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendContactMethodVerificationAsync(ctx workflow.Context, input *lightsail.SendContactMethodVerificationInput) *LightsailSendContactMethodVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-SendContactMethodVerification", input)
	return &LightsailSendContactMethodVerificationFuture{Future: future}
}

func (a *stub) StartInstance(ctx workflow.Context, input *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	var output lightsail.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartInstanceAsync(ctx workflow.Context, input *lightsail.StartInstanceInput) *LightsailStartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StartInstance", input)
	return &LightsailStartInstanceFuture{Future: future}
}

func (a *stub) StartRelationalDatabase(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) (*lightsail.StartRelationalDatabaseOutput, error) {
	var output lightsail.StartRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StartRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StartRelationalDatabaseInput) *LightsailStartRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StartRelationalDatabase", input)
	return &LightsailStartRelationalDatabaseFuture{Future: future}
}

func (a *stub) StopInstance(ctx workflow.Context, input *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	var output lightsail.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopInstanceAsync(ctx workflow.Context, input *lightsail.StopInstanceInput) *LightsailStopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StopInstance", input)
	return &LightsailStopInstanceFuture{Future: future}
}

func (a *stub) StopRelationalDatabase(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) (*lightsail.StopRelationalDatabaseOutput, error) {
	var output lightsail.StopRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-StopRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.StopRelationalDatabaseInput) *LightsailStopRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-StopRelationalDatabase", input)
	return &LightsailStopRelationalDatabaseFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *lightsail.TagResourceInput) (*lightsail.TagResourceOutput, error) {
	var output lightsail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *lightsail.TagResourceInput) *LightsailTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-TagResource", input)
	return &LightsailTagResourceFuture{Future: future}
}

func (a *stub) TestAlarm(ctx workflow.Context, input *lightsail.TestAlarmInput) (*lightsail.TestAlarmOutput, error) {
	var output lightsail.TestAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-TestAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestAlarmAsync(ctx workflow.Context, input *lightsail.TestAlarmInput) *LightsailTestAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-TestAlarm", input)
	return &LightsailTestAlarmFuture{Future: future}
}

func (a *stub) UnpeerVpc(ctx workflow.Context, input *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	var output lightsail.UnpeerVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UnpeerVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnpeerVpcAsync(ctx workflow.Context, input *lightsail.UnpeerVpcInput) *LightsailUnpeerVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UnpeerVpc", input)
	return &LightsailUnpeerVpcFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *lightsail.UntagResourceInput) (*lightsail.UntagResourceOutput, error) {
	var output lightsail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *lightsail.UntagResourceInput) *LightsailUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UntagResource", input)
	return &LightsailUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDistribution(ctx workflow.Context, input *lightsail.UpdateDistributionInput) (*lightsail.UpdateDistributionOutput, error) {
	var output lightsail.UpdateDistributionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistribution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionAsync(ctx workflow.Context, input *lightsail.UpdateDistributionInput) *LightsailUpdateDistributionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistribution", input)
	return &LightsailUpdateDistributionFuture{Future: future}
}

func (a *stub) UpdateDistributionBundle(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) (*lightsail.UpdateDistributionBundleOutput, error) {
	var output lightsail.UpdateDistributionBundleOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistributionBundle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDistributionBundleAsync(ctx workflow.Context, input *lightsail.UpdateDistributionBundleInput) *LightsailUpdateDistributionBundleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDistributionBundle", input)
	return &LightsailUpdateDistributionBundleFuture{Future: future}
}

func (a *stub) UpdateDomainEntry(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	var output lightsail.UpdateDomainEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDomainEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainEntryAsync(ctx workflow.Context, input *lightsail.UpdateDomainEntryInput) *LightsailUpdateDomainEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateDomainEntry", input)
	return &LightsailUpdateDomainEntryFuture{Future: future}
}

func (a *stub) UpdateLoadBalancerAttribute(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	var output lightsail.UpdateLoadBalancerAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateLoadBalancerAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoadBalancerAttributeAsync(ctx workflow.Context, input *lightsail.UpdateLoadBalancerAttributeInput) *LightsailUpdateLoadBalancerAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateLoadBalancerAttribute", input)
	return &LightsailUpdateLoadBalancerAttributeFuture{Future: future}
}

func (a *stub) UpdateRelationalDatabase(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	var output lightsail.UpdateRelationalDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRelationalDatabaseAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseInput) *LightsailUpdateRelationalDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabase", input)
	return &LightsailUpdateRelationalDatabaseFuture{Future: future}
}

func (a *stub) UpdateRelationalDatabaseParameters(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	var output lightsail.UpdateRelationalDatabaseParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabaseParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRelationalDatabaseParametersAsync(ctx workflow.Context, input *lightsail.UpdateRelationalDatabaseParametersInput) *LightsailUpdateRelationalDatabaseParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lightsail-UpdateRelationalDatabaseParameters", input)
	return &LightsailUpdateRelationalDatabaseParametersFuture{Future: future}
}
