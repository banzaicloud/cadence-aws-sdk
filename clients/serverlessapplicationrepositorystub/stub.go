// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package serverlessapplicationrepositorystub

import (
	"github.com/aws/aws-sdk-go/service/serverlessapplicationrepository"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationVersionFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCloudFormationChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCloudFormationChangeSetFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCloudFormationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCloudFormationTemplateFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	var output serverlessapplicationrepository.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	var output serverlessapplicationrepository.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationPolicyFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.GetApplicationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCloudFormationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCloudFormationTemplateFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.GetCloudFormationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationDependenciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationDependenciesFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	var output serverlessapplicationrepository.ListApplicationDependenciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationVersionsFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutApplicationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutApplicationPolicyFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.PutApplicationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnshareApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnshareApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	var output serverlessapplicationrepository.UnshareApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	var output serverlessapplicationrepository.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplication(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationRequest) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateApplicationVersion(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	var output serverlessapplicationrepository.CreateApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationVersionAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateApplicationVersionRequest) *CreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateApplicationVersion", input)
	return &CreateApplicationVersionFuture{Future: future}
}

func (a *stub) CreateCloudFormationChangeSet(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateCloudFormationChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFormationChangeSetAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) *CreateCloudFormationChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateCloudFormationChangeSet", input)
	return &CreateCloudFormationChangeSetFuture{Future: future}
}

func (a *stub) CreateCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.CreateCloudFormationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateCloudFormationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.CreateCloudFormationTemplateInput) *CreateCloudFormationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-CreateCloudFormationTemplate", input)
	return &CreateCloudFormationTemplateFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	var output serverlessapplicationrepository.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) GetApplication(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	var output serverlessapplicationrepository.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationInput) *GetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetApplication", input)
	return &GetApplicationFuture{Future: future}
}

func (a *stub) GetApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.GetApplicationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetApplicationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetApplicationPolicyInput) *GetApplicationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetApplicationPolicy", input)
	return &GetApplicationPolicyFuture{Future: future}
}

func (a *stub) GetCloudFormationTemplate(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	var output serverlessapplicationrepository.GetCloudFormationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetCloudFormationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCloudFormationTemplateAsync(ctx workflow.Context, input *serverlessapplicationrepository.GetCloudFormationTemplateInput) *GetCloudFormationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-GetCloudFormationTemplate", input)
	return &GetCloudFormationTemplateFuture{Future: future}
}

func (a *stub) ListApplicationDependencies(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	var output serverlessapplicationrepository.ListApplicationDependenciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplicationDependencies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationDependenciesAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationDependenciesInput) *ListApplicationDependenciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplicationDependencies", input)
	return &ListApplicationDependenciesFuture{Future: future}
}

func (a *stub) ListApplicationVersions(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationVersionsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationVersionsInput) *ListApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplicationVersions", input)
	return &ListApplicationVersionsFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	var output serverlessapplicationrepository.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *serverlessapplicationrepository.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) PutApplicationPolicy(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	var output serverlessapplicationrepository.PutApplicationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-PutApplicationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutApplicationPolicyAsync(ctx workflow.Context, input *serverlessapplicationrepository.PutApplicationPolicyInput) *PutApplicationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-PutApplicationPolicy", input)
	return &PutApplicationPolicyFuture{Future: future}
}

func (a *stub) UnshareApplication(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	var output serverlessapplicationrepository.UnshareApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-UnshareApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnshareApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UnshareApplicationInput) *UnshareApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-UnshareApplication", input)
	return &UnshareApplicationFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	var output serverlessapplicationrepository.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *serverlessapplicationrepository.UpdateApplicationRequest) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-serverlessapplicationrepository-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}
