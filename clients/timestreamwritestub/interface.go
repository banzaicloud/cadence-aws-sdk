// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package timestreamwritestub

import (
	"github.com/aws/aws-sdk-go/service/timestreamwrite"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CreateDatabase(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) (*timestreamwrite.CreateDatabaseOutput, error)
	CreateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) *CreateDatabaseFuture

	CreateTable(ctx workflow.Context, input *timestreamwrite.CreateTableInput) (*timestreamwrite.CreateTableOutput, error)
	CreateTableAsync(ctx workflow.Context, input *timestreamwrite.CreateTableInput) *CreateTableFuture

	DeleteDatabase(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) (*timestreamwrite.DeleteDatabaseOutput, error)
	DeleteDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) *DeleteDatabaseFuture

	DeleteTable(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) (*timestreamwrite.DeleteTableOutput, error)
	DeleteTableAsync(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) *DeleteTableFuture

	DescribeDatabase(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) (*timestreamwrite.DescribeDatabaseOutput, error)
	DescribeDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) *DescribeDatabaseFuture

	DescribeEndpoints(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) (*timestreamwrite.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) *DescribeEndpointsFuture

	DescribeTable(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) (*timestreamwrite.DescribeTableOutput, error)
	DescribeTableAsync(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) *DescribeTableFuture

	ListDatabases(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) (*timestreamwrite.ListDatabasesOutput, error)
	ListDatabasesAsync(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) *ListDatabasesFuture

	ListTables(ctx workflow.Context, input *timestreamwrite.ListTablesInput) (*timestreamwrite.ListTablesOutput, error)
	ListTablesAsync(ctx workflow.Context, input *timestreamwrite.ListTablesInput) *ListTablesFuture

	ListTagsForResource(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) (*timestreamwrite.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) *ListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *timestreamwrite.TagResourceInput) (*timestreamwrite.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *timestreamwrite.TagResourceInput) *TagResourceFuture

	UntagResource(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) (*timestreamwrite.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) *UntagResourceFuture

	UpdateDatabase(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) (*timestreamwrite.UpdateDatabaseOutput, error)
	UpdateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) *UpdateDatabaseFuture

	UpdateTable(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) (*timestreamwrite.UpdateTableOutput, error)
	UpdateTableAsync(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) *UpdateTableFuture

	WriteRecords(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) (*timestreamwrite.WriteRecordsOutput, error)
	WriteRecordsAsync(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) *WriteRecordsFuture
}

func NewClient() Client {
	return &stub{}
}
