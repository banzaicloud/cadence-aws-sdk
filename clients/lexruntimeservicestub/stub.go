// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lexruntimeservicestub

import (
	"github.com/aws/aws-sdk-go/service/lexruntimeservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DeleteSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.DeleteSessionOutput, error) {
	var output lexruntimeservice.DeleteSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.GetSessionOutput, error) {
	var output lexruntimeservice.GetSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PostContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PostContentFuture) Get(ctx workflow.Context) (*lexruntimeservice.PostContentOutput, error) {
	var output lexruntimeservice.PostContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PostTextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PostTextFuture) Get(ctx workflow.Context) (*lexruntimeservice.PostTextOutput, error) {
	var output lexruntimeservice.PostTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSessionFuture) Get(ctx workflow.Context) (*lexruntimeservice.PutSessionOutput, error) {
	var output lexruntimeservice.PutSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSession(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) (*lexruntimeservice.DeleteSessionOutput, error) {
	var output lexruntimeservice.DeleteSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-DeleteSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSessionAsync(ctx workflow.Context, input *lexruntimeservice.DeleteSessionInput) *DeleteSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-DeleteSession", input)
	return &DeleteSessionFuture{Future: future}
}

func (a *stub) GetSession(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) (*lexruntimeservice.GetSessionOutput, error) {
	var output lexruntimeservice.GetSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-GetSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSessionAsync(ctx workflow.Context, input *lexruntimeservice.GetSessionInput) *GetSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-GetSession", input)
	return &GetSessionFuture{Future: future}
}

func (a *stub) PostContent(ctx workflow.Context, input *lexruntimeservice.PostContentInput) (*lexruntimeservice.PostContentOutput, error) {
	var output lexruntimeservice.PostContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PostContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PostContentAsync(ctx workflow.Context, input *lexruntimeservice.PostContentInput) *PostContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PostContent", input)
	return &PostContentFuture{Future: future}
}

func (a *stub) PostText(ctx workflow.Context, input *lexruntimeservice.PostTextInput) (*lexruntimeservice.PostTextOutput, error) {
	var output lexruntimeservice.PostTextOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PostText", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PostTextAsync(ctx workflow.Context, input *lexruntimeservice.PostTextInput) *PostTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PostText", input)
	return &PostTextFuture{Future: future}
}

func (a *stub) PutSession(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) (*lexruntimeservice.PutSessionOutput, error) {
	var output lexruntimeservice.PutSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PutSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSessionAsync(ctx workflow.Context, input *lexruntimeservice.PutSessionInput) *PutSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimeservice-PutSession", input)
	return &PutSessionFuture{Future: future}
}
