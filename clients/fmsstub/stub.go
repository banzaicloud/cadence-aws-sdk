// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package fmsstub

import (
	"github.com/aws/aws-sdk-go/service/fms"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type FMSAssociateAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSAssociateAdminAccountFuture) Get(ctx workflow.Context) (*fms.AssociateAdminAccountOutput, error) {
	var output fms.AssociateAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSDeleteAppsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSDeleteAppsListFuture) Get(ctx workflow.Context) (*fms.DeleteAppsListOutput, error) {
	var output fms.DeleteAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSDeleteNotificationChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSDeleteNotificationChannelFuture) Get(ctx workflow.Context) (*fms.DeleteNotificationChannelOutput, error) {
	var output fms.DeleteNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSDeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSDeletePolicyFuture) Get(ctx workflow.Context) (*fms.DeletePolicyOutput, error) {
	var output fms.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSDeleteProtocolsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSDeleteProtocolsListFuture) Get(ctx workflow.Context) (*fms.DeleteProtocolsListOutput, error) {
	var output fms.DeleteProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSDisassociateAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSDisassociateAdminAccountFuture) Get(ctx workflow.Context) (*fms.DisassociateAdminAccountOutput, error) {
	var output fms.DisassociateAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetAdminAccountFuture) Get(ctx workflow.Context) (*fms.GetAdminAccountOutput, error) {
	var output fms.GetAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetAppsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetAppsListFuture) Get(ctx workflow.Context) (*fms.GetAppsListOutput, error) {
	var output fms.GetAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetComplianceDetailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetComplianceDetailFuture) Get(ctx workflow.Context) (*fms.GetComplianceDetailOutput, error) {
	var output fms.GetComplianceDetailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetNotificationChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetNotificationChannelFuture) Get(ctx workflow.Context) (*fms.GetNotificationChannelOutput, error) {
	var output fms.GetNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetPolicyFuture) Get(ctx workflow.Context) (*fms.GetPolicyOutput, error) {
	var output fms.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetProtectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetProtectionStatusFuture) Get(ctx workflow.Context) (*fms.GetProtectionStatusOutput, error) {
	var output fms.GetProtectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetProtocolsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetProtocolsListFuture) Get(ctx workflow.Context) (*fms.GetProtocolsListOutput, error) {
	var output fms.GetProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSGetViolationDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSGetViolationDetailsFuture) Get(ctx workflow.Context) (*fms.GetViolationDetailsOutput, error) {
	var output fms.GetViolationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListAppsListsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListAppsListsFuture) Get(ctx workflow.Context) (*fms.ListAppsListsOutput, error) {
	var output fms.ListAppsListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListComplianceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListComplianceStatusFuture) Get(ctx workflow.Context) (*fms.ListComplianceStatusOutput, error) {
	var output fms.ListComplianceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListMemberAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListMemberAccountsFuture) Get(ctx workflow.Context) (*fms.ListMemberAccountsOutput, error) {
	var output fms.ListMemberAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListPoliciesFuture) Get(ctx workflow.Context) (*fms.ListPoliciesOutput, error) {
	var output fms.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListProtocolsListsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListProtocolsListsFuture) Get(ctx workflow.Context) (*fms.ListProtocolsListsOutput, error) {
	var output fms.ListProtocolsListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSListTagsForResourceFuture) Get(ctx workflow.Context) (*fms.ListTagsForResourceOutput, error) {
	var output fms.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSPutAppsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSPutAppsListFuture) Get(ctx workflow.Context) (*fms.PutAppsListOutput, error) {
	var output fms.PutAppsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSPutNotificationChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSPutNotificationChannelFuture) Get(ctx workflow.Context) (*fms.PutNotificationChannelOutput, error) {
	var output fms.PutNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSPutPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSPutPolicyFuture) Get(ctx workflow.Context) (*fms.PutPolicyOutput, error) {
	var output fms.PutPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSPutProtocolsListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSPutProtocolsListFuture) Get(ctx workflow.Context) (*fms.PutProtocolsListOutput, error) {
	var output fms.PutProtocolsListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSTagResourceFuture) Get(ctx workflow.Context) (*fms.TagResourceOutput, error) {
	var output fms.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FMSUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FMSUntagResourceFuture) Get(ctx workflow.Context) (*fms.UntagResourceOutput, error) {
	var output fms.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAdminAccount(ctx workflow.Context, input *fms.AssociateAdminAccountInput) (*fms.AssociateAdminAccountOutput, error) {
	var output fms.AssociateAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-AssociateAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAdminAccountAsync(ctx workflow.Context, input *fms.AssociateAdminAccountInput) *FMSAssociateAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-AssociateAdminAccount", input)
	return &FMSAssociateAdminAccountFuture{Future: future}
}

func (a *stub) DeleteAppsList(ctx workflow.Context, input *fms.DeleteAppsListInput) (*fms.DeleteAppsListOutput, error) {
	var output fms.DeleteAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-DeleteAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppsListAsync(ctx workflow.Context, input *fms.DeleteAppsListInput) *FMSDeleteAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-DeleteAppsList", input)
	return &FMSDeleteAppsListFuture{Future: future}
}

func (a *stub) DeleteNotificationChannel(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) (*fms.DeleteNotificationChannelOutput, error) {
	var output fms.DeleteNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-DeleteNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationChannelAsync(ctx workflow.Context, input *fms.DeleteNotificationChannelInput) *FMSDeleteNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-DeleteNotificationChannel", input)
	return &FMSDeleteNotificationChannelFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *fms.DeletePolicyInput) (*fms.DeletePolicyOutput, error) {
	var output fms.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *fms.DeletePolicyInput) *FMSDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-DeletePolicy", input)
	return &FMSDeletePolicyFuture{Future: future}
}

func (a *stub) DeleteProtocolsList(ctx workflow.Context, input *fms.DeleteProtocolsListInput) (*fms.DeleteProtocolsListOutput, error) {
	var output fms.DeleteProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-DeleteProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProtocolsListAsync(ctx workflow.Context, input *fms.DeleteProtocolsListInput) *FMSDeleteProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-DeleteProtocolsList", input)
	return &FMSDeleteProtocolsListFuture{Future: future}
}

func (a *stub) DisassociateAdminAccount(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) (*fms.DisassociateAdminAccountOutput, error) {
	var output fms.DisassociateAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-DisassociateAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAdminAccountAsync(ctx workflow.Context, input *fms.DisassociateAdminAccountInput) *FMSDisassociateAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-DisassociateAdminAccount", input)
	return &FMSDisassociateAdminAccountFuture{Future: future}
}

func (a *stub) GetAdminAccount(ctx workflow.Context, input *fms.GetAdminAccountInput) (*fms.GetAdminAccountOutput, error) {
	var output fms.GetAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAdminAccountAsync(ctx workflow.Context, input *fms.GetAdminAccountInput) *FMSGetAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetAdminAccount", input)
	return &FMSGetAdminAccountFuture{Future: future}
}

func (a *stub) GetAppsList(ctx workflow.Context, input *fms.GetAppsListInput) (*fms.GetAppsListOutput, error) {
	var output fms.GetAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppsListAsync(ctx workflow.Context, input *fms.GetAppsListInput) *FMSGetAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetAppsList", input)
	return &FMSGetAppsListFuture{Future: future}
}

func (a *stub) GetComplianceDetail(ctx workflow.Context, input *fms.GetComplianceDetailInput) (*fms.GetComplianceDetailOutput, error) {
	var output fms.GetComplianceDetailOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetComplianceDetail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceDetailAsync(ctx workflow.Context, input *fms.GetComplianceDetailInput) *FMSGetComplianceDetailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetComplianceDetail", input)
	return &FMSGetComplianceDetailFuture{Future: future}
}

func (a *stub) GetNotificationChannel(ctx workflow.Context, input *fms.GetNotificationChannelInput) (*fms.GetNotificationChannelOutput, error) {
	var output fms.GetNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNotificationChannelAsync(ctx workflow.Context, input *fms.GetNotificationChannelInput) *FMSGetNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetNotificationChannel", input)
	return &FMSGetNotificationChannelFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *fms.GetPolicyInput) (*fms.GetPolicyOutput, error) {
	var output fms.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *fms.GetPolicyInput) *FMSGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetPolicy", input)
	return &FMSGetPolicyFuture{Future: future}
}

func (a *stub) GetProtectionStatus(ctx workflow.Context, input *fms.GetProtectionStatusInput) (*fms.GetProtectionStatusOutput, error) {
	var output fms.GetProtectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetProtectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProtectionStatusAsync(ctx workflow.Context, input *fms.GetProtectionStatusInput) *FMSGetProtectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetProtectionStatus", input)
	return &FMSGetProtectionStatusFuture{Future: future}
}

func (a *stub) GetProtocolsList(ctx workflow.Context, input *fms.GetProtocolsListInput) (*fms.GetProtocolsListOutput, error) {
	var output fms.GetProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProtocolsListAsync(ctx workflow.Context, input *fms.GetProtocolsListInput) *FMSGetProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetProtocolsList", input)
	return &FMSGetProtocolsListFuture{Future: future}
}

func (a *stub) GetViolationDetails(ctx workflow.Context, input *fms.GetViolationDetailsInput) (*fms.GetViolationDetailsOutput, error) {
	var output fms.GetViolationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-GetViolationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetViolationDetailsAsync(ctx workflow.Context, input *fms.GetViolationDetailsInput) *FMSGetViolationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-GetViolationDetails", input)
	return &FMSGetViolationDetailsFuture{Future: future}
}

func (a *stub) ListAppsLists(ctx workflow.Context, input *fms.ListAppsListsInput) (*fms.ListAppsListsOutput, error) {
	var output fms.ListAppsListsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListAppsLists", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppsListsAsync(ctx workflow.Context, input *fms.ListAppsListsInput) *FMSListAppsListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListAppsLists", input)
	return &FMSListAppsListsFuture{Future: future}
}

func (a *stub) ListComplianceStatus(ctx workflow.Context, input *fms.ListComplianceStatusInput) (*fms.ListComplianceStatusOutput, error) {
	var output fms.ListComplianceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListComplianceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComplianceStatusAsync(ctx workflow.Context, input *fms.ListComplianceStatusInput) *FMSListComplianceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListComplianceStatus", input)
	return &FMSListComplianceStatusFuture{Future: future}
}

func (a *stub) ListMemberAccounts(ctx workflow.Context, input *fms.ListMemberAccountsInput) (*fms.ListMemberAccountsOutput, error) {
	var output fms.ListMemberAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListMemberAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMemberAccountsAsync(ctx workflow.Context, input *fms.ListMemberAccountsInput) *FMSListMemberAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListMemberAccounts", input)
	return &FMSListMemberAccountsFuture{Future: future}
}

func (a *stub) ListPolicies(ctx workflow.Context, input *fms.ListPoliciesInput) (*fms.ListPoliciesOutput, error) {
	var output fms.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesAsync(ctx workflow.Context, input *fms.ListPoliciesInput) *FMSListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListPolicies", input)
	return &FMSListPoliciesFuture{Future: future}
}

func (a *stub) ListProtocolsLists(ctx workflow.Context, input *fms.ListProtocolsListsInput) (*fms.ListProtocolsListsOutput, error) {
	var output fms.ListProtocolsListsOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListProtocolsLists", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProtocolsListsAsync(ctx workflow.Context, input *fms.ListProtocolsListsInput) *FMSListProtocolsListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListProtocolsLists", input)
	return &FMSListProtocolsListsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *fms.ListTagsForResourceInput) (*fms.ListTagsForResourceOutput, error) {
	var output fms.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *fms.ListTagsForResourceInput) *FMSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-ListTagsForResource", input)
	return &FMSListTagsForResourceFuture{Future: future}
}

func (a *stub) PutAppsList(ctx workflow.Context, input *fms.PutAppsListInput) (*fms.PutAppsListOutput, error) {
	var output fms.PutAppsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-PutAppsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppsListAsync(ctx workflow.Context, input *fms.PutAppsListInput) *FMSPutAppsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-PutAppsList", input)
	return &FMSPutAppsListFuture{Future: future}
}

func (a *stub) PutNotificationChannel(ctx workflow.Context, input *fms.PutNotificationChannelInput) (*fms.PutNotificationChannelOutput, error) {
	var output fms.PutNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-PutNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutNotificationChannelAsync(ctx workflow.Context, input *fms.PutNotificationChannelInput) *FMSPutNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-PutNotificationChannel", input)
	return &FMSPutNotificationChannelFuture{Future: future}
}

func (a *stub) PutPolicy(ctx workflow.Context, input *fms.PutPolicyInput) (*fms.PutPolicyOutput, error) {
	var output fms.PutPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-PutPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPolicyAsync(ctx workflow.Context, input *fms.PutPolicyInput) *FMSPutPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-PutPolicy", input)
	return &FMSPutPolicyFuture{Future: future}
}

func (a *stub) PutProtocolsList(ctx workflow.Context, input *fms.PutProtocolsListInput) (*fms.PutProtocolsListOutput, error) {
	var output fms.PutProtocolsListOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-PutProtocolsList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutProtocolsListAsync(ctx workflow.Context, input *fms.PutProtocolsListInput) *FMSPutProtocolsListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-PutProtocolsList", input)
	return &FMSPutProtocolsListFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *fms.TagResourceInput) (*fms.TagResourceOutput, error) {
	var output fms.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *fms.TagResourceInput) *FMSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-TagResource", input)
	return &FMSTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *fms.UntagResourceInput) (*fms.UntagResourceOutput, error) {
	var output fms.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-fms-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *fms.UntagResourceInput) *FMSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-fms-UntagResource", input)
	return &FMSUntagResourceFuture{Future: future}
}
