// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ssmstub

import (
	"github.com/aws/aws-sdk-go/service/ssm"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelCommandFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelCommandFuture) Get(ctx workflow.Context) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelMaintenanceWindowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateActivationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateActivationFuture) Get(ctx workflow.Context) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssociationFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssociationBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssociationBatchFuture) Get(ctx workflow.Context) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDocumentFuture) Get(ctx workflow.Context) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOpsItemFuture) Get(ctx workflow.Context) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOpsMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOpsMetadataFuture) Get(ctx workflow.Context) (*ssm.CreateOpsMetadataOutput, error) {
	var output ssm.CreateOpsMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteActivationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteActivationFuture) Get(ctx workflow.Context) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssociationFuture) Get(ctx workflow.Context) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDocumentFuture) Get(ctx workflow.Context) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInventoryFuture) Get(ctx workflow.Context) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOpsMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOpsMetadataFuture) Get(ctx workflow.Context) (*ssm.DeleteOpsMetadataOutput, error) {
	var output ssm.DeleteOpsMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteParameterFuture) Get(ctx workflow.Context) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteParametersFuture) Get(ctx workflow.Context) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterManagedInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterManagedInstanceFuture) Get(ctx workflow.Context) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTargetFromMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTargetFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTaskFromMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTaskFromMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeActivationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeActivationsFuture) Get(ctx workflow.Context) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssociationFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssociationExecutionTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssociationExecutionTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAssociationExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAssociationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutomationExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutomationExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutomationStepExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutomationStepExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAvailablePatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAvailablePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDocumentFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDocumentPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEffectiveInstanceAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEffectiveInstanceAssociationsFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEffectivePatchesForPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEffectivePatchesForPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceAssociationsStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceAssociationsStatusFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceInformationFuture) Get(ctx workflow.Context) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancePatchStatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancePatchStatesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancePatchStatesForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancePatchStatesForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancePatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancePatchesFuture) Get(ctx workflow.Context) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInventoryDeletionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInventoryDeletionsFuture) Get(ctx workflow.Context) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowExecutionTaskInvocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowExecutionTaskInvocationsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowExecutionTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowExecutionTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowExecutionsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowScheduleFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowTargetsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowTasksFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowsFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceWindowsForTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceWindowsForTargetFuture) Get(ctx workflow.Context) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOpsItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOpsItemsFuture) Get(ctx workflow.Context) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeParametersFuture) Get(ctx workflow.Context) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePatchBaselinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePatchBaselinesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePatchGroupStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePatchGroupStateFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePatchGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePatchGroupsFuture) Get(ctx workflow.Context) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePatchPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePatchPropertiesFuture) Get(ctx workflow.Context) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSessionsFuture) Get(ctx workflow.Context) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCalendarStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCalendarStateFuture) Get(ctx workflow.Context) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCommandInvocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCommandInvocationFuture) Get(ctx workflow.Context) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectionStatusFuture) Get(ctx workflow.Context) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDefaultPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeployablePatchSnapshotForInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeployablePatchSnapshotForInstanceFuture) Get(ctx workflow.Context) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentFuture) Get(ctx workflow.Context) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInventoryFuture) Get(ctx workflow.Context) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInventorySchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInventorySchemaFuture) Get(ctx workflow.Context) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMaintenanceWindowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMaintenanceWindowExecutionFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMaintenanceWindowExecutionTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMaintenanceWindowExecutionTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMaintenanceWindowExecutionTaskInvocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMaintenanceWindowExecutionTaskInvocationFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMaintenanceWindowTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOpsItemFuture) Get(ctx workflow.Context) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOpsMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOpsMetadataFuture) Get(ctx workflow.Context) (*ssm.GetOpsMetadataOutput, error) {
	var output ssm.GetOpsMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOpsSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOpsSummaryFuture) Get(ctx workflow.Context) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetParameterFuture) Get(ctx workflow.Context) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetParameterHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetParameterHistoryFuture) Get(ctx workflow.Context) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetParametersFuture) Get(ctx workflow.Context) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetParametersByPathFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetParametersByPathFuture) Get(ctx workflow.Context) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LabelParameterVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LabelParameterVersionFuture) Get(ctx workflow.Context) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociationVersionsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociationsFuture) Get(ctx workflow.Context) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCommandInvocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCommandInvocationsFuture) Get(ctx workflow.Context) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCommandsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCommandsFuture) Get(ctx workflow.Context) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListComplianceItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListComplianceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDocumentMetadataHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDocumentMetadataHistoryFuture) Get(ctx workflow.Context) (*ssm.ListDocumentMetadataHistoryOutput, error) {
	var output ssm.ListDocumentMetadataHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDocumentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDocumentVersionsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDocumentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDocumentsFuture) Get(ctx workflow.Context) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInventoryEntriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInventoryEntriesFuture) Get(ctx workflow.Context) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOpsItemEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOpsItemEventsFuture) Get(ctx workflow.Context) (*ssm.ListOpsItemEventsOutput, error) {
	var output ssm.ListOpsItemEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOpsMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOpsMetadataFuture) Get(ctx workflow.Context) (*ssm.ListOpsMetadataOutput, error) {
	var output ssm.ListOpsMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceComplianceSummariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceComplianceSummariesFuture) Get(ctx workflow.Context) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDocumentPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDocumentPermissionFuture) Get(ctx workflow.Context) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutComplianceItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutComplianceItemsFuture) Get(ctx workflow.Context) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutInventoryFuture) Get(ctx workflow.Context) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutParameterFuture) Get(ctx workflow.Context) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterDefaultPatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterDefaultPatchBaselineFuture) Get(ctx workflow.Context) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterPatchBaselineForPatchGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterPatchBaselineForPatchGroupFuture) Get(ctx workflow.Context) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTargetWithMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTargetWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTaskWithMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTaskWithMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetServiceSettingFuture) Get(ctx workflow.Context) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeSessionFuture) Get(ctx workflow.Context) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendAutomationSignalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendAutomationSignalFuture) Get(ctx workflow.Context) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendCommandFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendCommandFuture) Get(ctx workflow.Context) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAssociationsOnceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAssociationsOnceFuture) Get(ctx workflow.Context) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartChangeRequestExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartChangeRequestExecutionFuture) Get(ctx workflow.Context) (*ssm.StartChangeRequestExecutionOutput, error) {
	var output ssm.StartChangeRequestExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSessionFuture) Get(ctx workflow.Context) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopAutomationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopAutomationExecutionFuture) Get(ctx workflow.Context) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateSessionFuture) Get(ctx workflow.Context) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssociationFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssociationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssociationStatusFuture) Get(ctx workflow.Context) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentDefaultVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentDefaultVersionFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentMetadataFuture) Get(ctx workflow.Context) (*ssm.UpdateDocumentMetadataOutput, error) {
	var output ssm.UpdateDocumentMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMaintenanceWindowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMaintenanceWindowFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMaintenanceWindowTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMaintenanceWindowTargetFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMaintenanceWindowTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMaintenanceWindowTaskFuture) Get(ctx workflow.Context) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateManagedInstanceRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateManagedInstanceRoleFuture) Get(ctx workflow.Context) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOpsItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOpsItemFuture) Get(ctx workflow.Context) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOpsMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOpsMetadataFuture) Get(ctx workflow.Context) (*ssm.UpdateOpsMetadataOutput, error) {
	var output ssm.UpdateOpsMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePatchBaselineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePatchBaselineFuture) Get(ctx workflow.Context) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceDataSyncFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceDataSyncFuture) Get(ctx workflow.Context) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceSettingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceSettingFuture) Get(ctx workflow.Context) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error) {
	var output ssm.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *ssm.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) CancelCommand(ctx workflow.Context, input *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error) {
	var output ssm.CancelCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CancelCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelCommandAsync(ctx workflow.Context, input *ssm.CancelCommandInput) *CancelCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CancelCommand", input)
	return &CancelCommandFuture{Future: future}
}

func (a *stub) CancelMaintenanceWindowExecution(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {
	var output ssm.CancelMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CancelMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.CancelMaintenanceWindowExecutionInput) *CancelMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CancelMaintenanceWindowExecution", input)
	return &CancelMaintenanceWindowExecutionFuture{Future: future}
}

func (a *stub) CreateActivation(ctx workflow.Context, input *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error) {
	var output ssm.CreateActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateActivationAsync(ctx workflow.Context, input *ssm.CreateActivationInput) *CreateActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateActivation", input)
	return &CreateActivationFuture{Future: future}
}

func (a *stub) CreateAssociation(ctx workflow.Context, input *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error) {
	var output ssm.CreateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssociationAsync(ctx workflow.Context, input *ssm.CreateAssociationInput) *CreateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateAssociation", input)
	return &CreateAssociationFuture{Future: future}
}

func (a *stub) CreateAssociationBatch(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error) {
	var output ssm.CreateAssociationBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateAssociationBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssociationBatchAsync(ctx workflow.Context, input *ssm.CreateAssociationBatchInput) *CreateAssociationBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateAssociationBatch", input)
	return &CreateAssociationBatchFuture{Future: future}
}

func (a *stub) CreateDocument(ctx workflow.Context, input *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error) {
	var output ssm.CreateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentAsync(ctx workflow.Context, input *ssm.CreateDocumentInput) *CreateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateDocument", input)
	return &CreateDocumentFuture{Future: future}
}

func (a *stub) CreateMaintenanceWindow(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error) {
	var output ssm.CreateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.CreateMaintenanceWindowInput) *CreateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateMaintenanceWindow", input)
	return &CreateMaintenanceWindowFuture{Future: future}
}

func (a *stub) CreateOpsItem(ctx workflow.Context, input *ssm.CreateOpsItemInput) (*ssm.CreateOpsItemOutput, error) {
	var output ssm.CreateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOpsItemAsync(ctx workflow.Context, input *ssm.CreateOpsItemInput) *CreateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateOpsItem", input)
	return &CreateOpsItemFuture{Future: future}
}

func (a *stub) CreateOpsMetadata(ctx workflow.Context, input *ssm.CreateOpsMetadataInput) (*ssm.CreateOpsMetadataOutput, error) {
	var output ssm.CreateOpsMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateOpsMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOpsMetadataAsync(ctx workflow.Context, input *ssm.CreateOpsMetadataInput) *CreateOpsMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateOpsMetadata", input)
	return &CreateOpsMetadataFuture{Future: future}
}

func (a *stub) CreatePatchBaseline(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error) {
	var output ssm.CreatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePatchBaselineAsync(ctx workflow.Context, input *ssm.CreatePatchBaselineInput) *CreatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreatePatchBaseline", input)
	return &CreatePatchBaselineFuture{Future: future}
}

func (a *stub) CreateResourceDataSync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error) {
	var output ssm.CreateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-CreateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceDataSyncAsync(ctx workflow.Context, input *ssm.CreateResourceDataSyncInput) *CreateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-CreateResourceDataSync", input)
	return &CreateResourceDataSyncFuture{Future: future}
}

func (a *stub) DeleteActivation(ctx workflow.Context, input *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error) {
	var output ssm.DeleteActivationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteActivation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteActivationAsync(ctx workflow.Context, input *ssm.DeleteActivationInput) *DeleteActivationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteActivation", input)
	return &DeleteActivationFuture{Future: future}
}

func (a *stub) DeleteAssociation(ctx workflow.Context, input *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error) {
	var output ssm.DeleteAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssociationAsync(ctx workflow.Context, input *ssm.DeleteAssociationInput) *DeleteAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteAssociation", input)
	return &DeleteAssociationFuture{Future: future}
}

func (a *stub) DeleteDocument(ctx workflow.Context, input *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error) {
	var output ssm.DeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentAsync(ctx workflow.Context, input *ssm.DeleteDocumentInput) *DeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteDocument", input)
	return &DeleteDocumentFuture{Future: future}
}

func (a *stub) DeleteInventory(ctx workflow.Context, input *ssm.DeleteInventoryInput) (*ssm.DeleteInventoryOutput, error) {
	var output ssm.DeleteInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInventoryAsync(ctx workflow.Context, input *ssm.DeleteInventoryInput) *DeleteInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteInventory", input)
	return &DeleteInventoryFuture{Future: future}
}

func (a *stub) DeleteMaintenanceWindow(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error) {
	var output ssm.DeleteMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeleteMaintenanceWindowInput) *DeleteMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteMaintenanceWindow", input)
	return &DeleteMaintenanceWindowFuture{Future: future}
}

func (a *stub) DeleteOpsMetadata(ctx workflow.Context, input *ssm.DeleteOpsMetadataInput) (*ssm.DeleteOpsMetadataOutput, error) {
	var output ssm.DeleteOpsMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteOpsMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOpsMetadataAsync(ctx workflow.Context, input *ssm.DeleteOpsMetadataInput) *DeleteOpsMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteOpsMetadata", input)
	return &DeleteOpsMetadataFuture{Future: future}
}

func (a *stub) DeleteParameter(ctx workflow.Context, input *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error) {
	var output ssm.DeleteParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteParameterAsync(ctx workflow.Context, input *ssm.DeleteParameterInput) *DeleteParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteParameter", input)
	return &DeleteParameterFuture{Future: future}
}

func (a *stub) DeleteParameters(ctx workflow.Context, input *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error) {
	var output ssm.DeleteParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteParametersAsync(ctx workflow.Context, input *ssm.DeleteParametersInput) *DeleteParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteParameters", input)
	return &DeleteParametersFuture{Future: future}
}

func (a *stub) DeletePatchBaseline(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error) {
	var output ssm.DeletePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeletePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePatchBaselineAsync(ctx workflow.Context, input *ssm.DeletePatchBaselineInput) *DeletePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeletePatchBaseline", input)
	return &DeletePatchBaselineFuture{Future: future}
}

func (a *stub) DeleteResourceDataSync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error) {
	var output ssm.DeleteResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceDataSyncAsync(ctx workflow.Context, input *ssm.DeleteResourceDataSyncInput) *DeleteResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeleteResourceDataSync", input)
	return &DeleteResourceDataSyncFuture{Future: future}
}

func (a *stub) DeregisterManagedInstance(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error) {
	var output ssm.DeregisterManagedInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterManagedInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterManagedInstanceAsync(ctx workflow.Context, input *ssm.DeregisterManagedInstanceInput) *DeregisterManagedInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterManagedInstance", input)
	return &DeregisterManagedInstanceFuture{Future: future}
}

func (a *stub) DeregisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.DeregisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.DeregisterPatchBaselineForPatchGroupInput) *DeregisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterPatchBaselineForPatchGroup", input)
	return &DeregisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *stub) DeregisterTargetFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTargetFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterTargetFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTargetFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTargetFromMaintenanceWindowInput) *DeregisterTargetFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterTargetFromMaintenanceWindow", input)
	return &DeregisterTargetFromMaintenanceWindowFuture{Future: future}
}

func (a *stub) DeregisterTaskFromMaintenanceWindow(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	var output ssm.DeregisterTaskFromMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterTaskFromMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTaskFromMaintenanceWindowAsync(ctx workflow.Context, input *ssm.DeregisterTaskFromMaintenanceWindowInput) *DeregisterTaskFromMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DeregisterTaskFromMaintenanceWindow", input)
	return &DeregisterTaskFromMaintenanceWindowFuture{Future: future}
}

func (a *stub) DescribeActivations(ctx workflow.Context, input *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error) {
	var output ssm.DescribeActivationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeActivations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeActivationsAsync(ctx workflow.Context, input *ssm.DescribeActivationsInput) *DescribeActivationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeActivations", input)
	return &DescribeActivationsFuture{Future: future}
}

func (a *stub) DescribeAssociation(ctx workflow.Context, input *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error) {
	var output ssm.DescribeAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssociationAsync(ctx workflow.Context, input *ssm.DescribeAssociationInput) *DescribeAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociation", input)
	return &DescribeAssociationFuture{Future: future}
}

func (a *stub) DescribeAssociationExecutionTargets(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {
	var output ssm.DescribeAssociationExecutionTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociationExecutionTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssociationExecutionTargetsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionTargetsInput) *DescribeAssociationExecutionTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociationExecutionTargets", input)
	return &DescribeAssociationExecutionTargetsFuture{Future: future}
}

func (a *stub) DescribeAssociationExecutions(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) (*ssm.DescribeAssociationExecutionsOutput, error) {
	var output ssm.DescribeAssociationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAssociationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAssociationExecutionsInput) *DescribeAssociationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAssociationExecutions", input)
	return &DescribeAssociationExecutionsFuture{Future: future}
}

func (a *stub) DescribeAutomationExecutions(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error) {
	var output ssm.DescribeAutomationExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAutomationExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutomationExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationExecutionsInput) *DescribeAutomationExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAutomationExecutions", input)
	return &DescribeAutomationExecutionsFuture{Future: future}
}

func (a *stub) DescribeAutomationStepExecutions(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	var output ssm.DescribeAutomationStepExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAutomationStepExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutomationStepExecutionsAsync(ctx workflow.Context, input *ssm.DescribeAutomationStepExecutionsInput) *DescribeAutomationStepExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAutomationStepExecutions", input)
	return &DescribeAutomationStepExecutionsFuture{Future: future}
}

func (a *stub) DescribeAvailablePatches(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error) {
	var output ssm.DescribeAvailablePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAvailablePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAvailablePatchesAsync(ctx workflow.Context, input *ssm.DescribeAvailablePatchesInput) *DescribeAvailablePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeAvailablePatches", input)
	return &DescribeAvailablePatchesFuture{Future: future}
}

func (a *stub) DescribeDocument(ctx workflow.Context, input *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error) {
	var output ssm.DescribeDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentAsync(ctx workflow.Context, input *ssm.DescribeDocumentInput) *DescribeDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeDocument", input)
	return &DescribeDocumentFuture{Future: future}
}

func (a *stub) DescribeDocumentPermission(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error) {
	var output ssm.DescribeDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentPermissionAsync(ctx workflow.Context, input *ssm.DescribeDocumentPermissionInput) *DescribeDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeDocumentPermission", input)
	return &DescribeDocumentPermissionFuture{Future: future}
}

func (a *stub) DescribeEffectiveInstanceAssociations(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	var output ssm.DescribeEffectiveInstanceAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeEffectiveInstanceAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEffectiveInstanceAssociationsAsync(ctx workflow.Context, input *ssm.DescribeEffectiveInstanceAssociationsInput) *DescribeEffectiveInstanceAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeEffectiveInstanceAssociations", input)
	return &DescribeEffectiveInstanceAssociationsFuture{Future: future}
}

func (a *stub) DescribeEffectivePatchesForPatchBaseline(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	var output ssm.DescribeEffectivePatchesForPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeEffectivePatchesForPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEffectivePatchesForPatchBaselineAsync(ctx workflow.Context, input *ssm.DescribeEffectivePatchesForPatchBaselineInput) *DescribeEffectivePatchesForPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeEffectivePatchesForPatchBaseline", input)
	return &DescribeEffectivePatchesForPatchBaselineFuture{Future: future}
}

func (a *stub) DescribeInstanceAssociationsStatus(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	var output ssm.DescribeInstanceAssociationsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstanceAssociationsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceAssociationsStatusAsync(ctx workflow.Context, input *ssm.DescribeInstanceAssociationsStatusInput) *DescribeInstanceAssociationsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstanceAssociationsStatus", input)
	return &DescribeInstanceAssociationsStatusFuture{Future: future}
}

func (a *stub) DescribeInstanceInformation(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error) {
	var output ssm.DescribeInstanceInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstanceInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceInformationAsync(ctx workflow.Context, input *ssm.DescribeInstanceInformationInput) *DescribeInstanceInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstanceInformation", input)
	return &DescribeInstanceInformationFuture{Future: future}
}

func (a *stub) DescribeInstancePatchStates(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error) {
	var output ssm.DescribeInstancePatchStatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatchStates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancePatchStatesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesInput) *DescribeInstancePatchStatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatchStates", input)
	return &DescribeInstancePatchStatesFuture{Future: future}
}

func (a *stub) DescribeInstancePatchStatesForPatchGroup(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	var output ssm.DescribeInstancePatchStatesForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatchStatesForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancePatchStatesForPatchGroupAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchStatesForPatchGroupInput) *DescribeInstancePatchStatesForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatchStatesForPatchGroup", input)
	return &DescribeInstancePatchStatesForPatchGroupFuture{Future: future}
}

func (a *stub) DescribeInstancePatches(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error) {
	var output ssm.DescribeInstancePatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancePatchesAsync(ctx workflow.Context, input *ssm.DescribeInstancePatchesInput) *DescribeInstancePatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInstancePatches", input)
	return &DescribeInstancePatchesFuture{Future: future}
}

func (a *stub) DescribeInventoryDeletions(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) (*ssm.DescribeInventoryDeletionsOutput, error) {
	var output ssm.DescribeInventoryDeletionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInventoryDeletions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInventoryDeletionsAsync(ctx workflow.Context, input *ssm.DescribeInventoryDeletionsInput) *DescribeInventoryDeletionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeInventoryDeletions", input)
	return &DescribeInventoryDeletionsFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowExecutionTaskInvocations(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutionTaskInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowExecutionTaskInvocationsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) *DescribeMaintenanceWindowExecutionTaskInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutionTaskInvocations", input)
	return &DescribeMaintenanceWindowExecutionTaskInvocationsFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowExecutionTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowExecutionTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionTasksInput) *DescribeMaintenanceWindowExecutionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutionTasks", input)
	return &DescribeMaintenanceWindowExecutionTasksFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowExecutions(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	var output ssm.DescribeMaintenanceWindowExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowExecutionsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowExecutionsInput) *DescribeMaintenanceWindowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowExecutions", input)
	return &DescribeMaintenanceWindowExecutionsFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowSchedule(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {
	var output ssm.DescribeMaintenanceWindowScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowScheduleAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowScheduleInput) *DescribeMaintenanceWindowScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowSchedule", input)
	return &DescribeMaintenanceWindowScheduleFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowTargets(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	var output ssm.DescribeMaintenanceWindowTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowTargetsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTargetsInput) *DescribeMaintenanceWindowTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowTargets", input)
	return &DescribeMaintenanceWindowTargetsFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowTasks(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	var output ssm.DescribeMaintenanceWindowTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowTasksAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowTasksInput) *DescribeMaintenanceWindowTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowTasks", input)
	return &DescribeMaintenanceWindowTasksFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindows(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	var output ssm.DescribeMaintenanceWindowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowsAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsInput) *DescribeMaintenanceWindowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindows", input)
	return &DescribeMaintenanceWindowsFuture{Future: future}
}

func (a *stub) DescribeMaintenanceWindowsForTarget(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {
	var output ssm.DescribeMaintenanceWindowsForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowsForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceWindowsForTargetAsync(ctx workflow.Context, input *ssm.DescribeMaintenanceWindowsForTargetInput) *DescribeMaintenanceWindowsForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeMaintenanceWindowsForTarget", input)
	return &DescribeMaintenanceWindowsForTargetFuture{Future: future}
}

func (a *stub) DescribeOpsItems(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) (*ssm.DescribeOpsItemsOutput, error) {
	var output ssm.DescribeOpsItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeOpsItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOpsItemsAsync(ctx workflow.Context, input *ssm.DescribeOpsItemsInput) *DescribeOpsItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeOpsItems", input)
	return &DescribeOpsItemsFuture{Future: future}
}

func (a *stub) DescribeParameters(ctx workflow.Context, input *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error) {
	var output ssm.DescribeParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeParametersAsync(ctx workflow.Context, input *ssm.DescribeParametersInput) *DescribeParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeParameters", input)
	return &DescribeParametersFuture{Future: future}
}

func (a *stub) DescribePatchBaselines(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error) {
	var output ssm.DescribePatchBaselinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchBaselines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePatchBaselinesAsync(ctx workflow.Context, input *ssm.DescribePatchBaselinesInput) *DescribePatchBaselinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchBaselines", input)
	return &DescribePatchBaselinesFuture{Future: future}
}

func (a *stub) DescribePatchGroupState(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error) {
	var output ssm.DescribePatchGroupStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchGroupState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePatchGroupStateAsync(ctx workflow.Context, input *ssm.DescribePatchGroupStateInput) *DescribePatchGroupStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchGroupState", input)
	return &DescribePatchGroupStateFuture{Future: future}
}

func (a *stub) DescribePatchGroups(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error) {
	var output ssm.DescribePatchGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePatchGroupsAsync(ctx workflow.Context, input *ssm.DescribePatchGroupsInput) *DescribePatchGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchGroups", input)
	return &DescribePatchGroupsFuture{Future: future}
}

func (a *stub) DescribePatchProperties(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) (*ssm.DescribePatchPropertiesOutput, error) {
	var output ssm.DescribePatchPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePatchPropertiesAsync(ctx workflow.Context, input *ssm.DescribePatchPropertiesInput) *DescribePatchPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribePatchProperties", input)
	return &DescribePatchPropertiesFuture{Future: future}
}

func (a *stub) DescribeSessions(ctx workflow.Context, input *ssm.DescribeSessionsInput) (*ssm.DescribeSessionsOutput, error) {
	var output ssm.DescribeSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSessionsAsync(ctx workflow.Context, input *ssm.DescribeSessionsInput) *DescribeSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-DescribeSessions", input)
	return &DescribeSessionsFuture{Future: future}
}

func (a *stub) GetAutomationExecution(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error) {
	var output ssm.GetAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAutomationExecutionAsync(ctx workflow.Context, input *ssm.GetAutomationExecutionInput) *GetAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetAutomationExecution", input)
	return &GetAutomationExecutionFuture{Future: future}
}

func (a *stub) GetCalendarState(ctx workflow.Context, input *ssm.GetCalendarStateInput) (*ssm.GetCalendarStateOutput, error) {
	var output ssm.GetCalendarStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetCalendarState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCalendarStateAsync(ctx workflow.Context, input *ssm.GetCalendarStateInput) *GetCalendarStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetCalendarState", input)
	return &GetCalendarStateFuture{Future: future}
}

func (a *stub) GetCommandInvocation(ctx workflow.Context, input *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error) {
	var output ssm.GetCommandInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetCommandInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCommandInvocationAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *GetCommandInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetCommandInvocation", input)
	return &GetCommandInvocationFuture{Future: future}
}

func (a *stub) GetConnectionStatus(ctx workflow.Context, input *ssm.GetConnectionStatusInput) (*ssm.GetConnectionStatusOutput, error) {
	var output ssm.GetConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectionStatusAsync(ctx workflow.Context, input *ssm.GetConnectionStatusInput) *GetConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetConnectionStatus", input)
	return &GetConnectionStatusFuture{Future: future}
}

func (a *stub) GetDefaultPatchBaseline(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error) {
	var output ssm.GetDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.GetDefaultPatchBaselineInput) *GetDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetDefaultPatchBaseline", input)
	return &GetDefaultPatchBaselineFuture{Future: future}
}

func (a *stub) GetDeployablePatchSnapshotForInstance(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	var output ssm.GetDeployablePatchSnapshotForInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetDeployablePatchSnapshotForInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeployablePatchSnapshotForInstanceAsync(ctx workflow.Context, input *ssm.GetDeployablePatchSnapshotForInstanceInput) *GetDeployablePatchSnapshotForInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetDeployablePatchSnapshotForInstance", input)
	return &GetDeployablePatchSnapshotForInstanceFuture{Future: future}
}

func (a *stub) GetDocument(ctx workflow.Context, input *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error) {
	var output ssm.GetDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentAsync(ctx workflow.Context, input *ssm.GetDocumentInput) *GetDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetDocument", input)
	return &GetDocumentFuture{Future: future}
}

func (a *stub) GetInventory(ctx workflow.Context, input *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error) {
	var output ssm.GetInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInventoryAsync(ctx workflow.Context, input *ssm.GetInventoryInput) *GetInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetInventory", input)
	return &GetInventoryFuture{Future: future}
}

func (a *stub) GetInventorySchema(ctx workflow.Context, input *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error) {
	var output ssm.GetInventorySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetInventorySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInventorySchemaAsync(ctx workflow.Context, input *ssm.GetInventorySchemaInput) *GetInventorySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetInventorySchema", input)
	return &GetInventorySchemaFuture{Future: future}
}

func (a *stub) GetMaintenanceWindow(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error) {
	var output ssm.GetMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMaintenanceWindowAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowInput) *GetMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindow", input)
	return &GetMaintenanceWindowFuture{Future: future}
}

func (a *stub) GetMaintenanceWindowExecution(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMaintenanceWindowExecutionAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionInput) *GetMaintenanceWindowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecution", input)
	return &GetMaintenanceWindowExecutionFuture{Future: future}
}

func (a *stub) GetMaintenanceWindowExecutionTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecutionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMaintenanceWindowExecutionTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInput) *GetMaintenanceWindowExecutionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecutionTask", input)
	return &GetMaintenanceWindowExecutionTaskFuture{Future: future}
}

func (a *stub) GetMaintenanceWindowExecutionTaskInvocation(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	var output ssm.GetMaintenanceWindowExecutionTaskInvocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecutionTaskInvocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMaintenanceWindowExecutionTaskInvocationAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) *GetMaintenanceWindowExecutionTaskInvocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowExecutionTaskInvocation", input)
	return &GetMaintenanceWindowExecutionTaskInvocationFuture{Future: future}
}

func (a *stub) GetMaintenanceWindowTask(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	var output ssm.GetMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.GetMaintenanceWindowTaskInput) *GetMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetMaintenanceWindowTask", input)
	return &GetMaintenanceWindowTaskFuture{Future: future}
}

func (a *stub) GetOpsItem(ctx workflow.Context, input *ssm.GetOpsItemInput) (*ssm.GetOpsItemOutput, error) {
	var output ssm.GetOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpsItemAsync(ctx workflow.Context, input *ssm.GetOpsItemInput) *GetOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsItem", input)
	return &GetOpsItemFuture{Future: future}
}

func (a *stub) GetOpsMetadata(ctx workflow.Context, input *ssm.GetOpsMetadataInput) (*ssm.GetOpsMetadataOutput, error) {
	var output ssm.GetOpsMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpsMetadataAsync(ctx workflow.Context, input *ssm.GetOpsMetadataInput) *GetOpsMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsMetadata", input)
	return &GetOpsMetadataFuture{Future: future}
}

func (a *stub) GetOpsSummary(ctx workflow.Context, input *ssm.GetOpsSummaryInput) (*ssm.GetOpsSummaryOutput, error) {
	var output ssm.GetOpsSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpsSummaryAsync(ctx workflow.Context, input *ssm.GetOpsSummaryInput) *GetOpsSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetOpsSummary", input)
	return &GetOpsSummaryFuture{Future: future}
}

func (a *stub) GetParameter(ctx workflow.Context, input *ssm.GetParameterInput) (*ssm.GetParameterOutput, error) {
	var output ssm.GetParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetParameterAsync(ctx workflow.Context, input *ssm.GetParameterInput) *GetParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameter", input)
	return &GetParameterFuture{Future: future}
}

func (a *stub) GetParameterHistory(ctx workflow.Context, input *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error) {
	var output ssm.GetParameterHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameterHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetParameterHistoryAsync(ctx workflow.Context, input *ssm.GetParameterHistoryInput) *GetParameterHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameterHistory", input)
	return &GetParameterHistoryFuture{Future: future}
}

func (a *stub) GetParameters(ctx workflow.Context, input *ssm.GetParametersInput) (*ssm.GetParametersOutput, error) {
	var output ssm.GetParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetParametersAsync(ctx workflow.Context, input *ssm.GetParametersInput) *GetParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetParameters", input)
	return &GetParametersFuture{Future: future}
}

func (a *stub) GetParametersByPath(ctx workflow.Context, input *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error) {
	var output ssm.GetParametersByPathOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetParametersByPath", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetParametersByPathAsync(ctx workflow.Context, input *ssm.GetParametersByPathInput) *GetParametersByPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetParametersByPath", input)
	return &GetParametersByPathFuture{Future: future}
}

func (a *stub) GetPatchBaseline(ctx workflow.Context, input *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error) {
	var output ssm.GetPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPatchBaselineAsync(ctx workflow.Context, input *ssm.GetPatchBaselineInput) *GetPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetPatchBaseline", input)
	return &GetPatchBaselineFuture{Future: future}
}

func (a *stub) GetPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	var output ssm.GetPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.GetPatchBaselineForPatchGroupInput) *GetPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetPatchBaselineForPatchGroup", input)
	return &GetPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *stub) GetServiceSetting(ctx workflow.Context, input *ssm.GetServiceSettingInput) (*ssm.GetServiceSettingOutput, error) {
	var output ssm.GetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-GetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceSettingAsync(ctx workflow.Context, input *ssm.GetServiceSettingInput) *GetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-GetServiceSetting", input)
	return &GetServiceSettingFuture{Future: future}
}

func (a *stub) LabelParameterVersion(ctx workflow.Context, input *ssm.LabelParameterVersionInput) (*ssm.LabelParameterVersionOutput, error) {
	var output ssm.LabelParameterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-LabelParameterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LabelParameterVersionAsync(ctx workflow.Context, input *ssm.LabelParameterVersionInput) *LabelParameterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-LabelParameterVersion", input)
	return &LabelParameterVersionFuture{Future: future}
}

func (a *stub) ListAssociationVersions(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error) {
	var output ssm.ListAssociationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListAssociationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociationVersionsAsync(ctx workflow.Context, input *ssm.ListAssociationVersionsInput) *ListAssociationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListAssociationVersions", input)
	return &ListAssociationVersionsFuture{Future: future}
}

func (a *stub) ListAssociations(ctx workflow.Context, input *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error) {
	var output ssm.ListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociationsAsync(ctx workflow.Context, input *ssm.ListAssociationsInput) *ListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListAssociations", input)
	return &ListAssociationsFuture{Future: future}
}

func (a *stub) ListCommandInvocations(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error) {
	var output ssm.ListCommandInvocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListCommandInvocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCommandInvocationsAsync(ctx workflow.Context, input *ssm.ListCommandInvocationsInput) *ListCommandInvocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListCommandInvocations", input)
	return &ListCommandInvocationsFuture{Future: future}
}

func (a *stub) ListCommands(ctx workflow.Context, input *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error) {
	var output ssm.ListCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCommandsAsync(ctx workflow.Context, input *ssm.ListCommandsInput) *ListCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListCommands", input)
	return &ListCommandsFuture{Future: future}
}

func (a *stub) ListComplianceItems(ctx workflow.Context, input *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error) {
	var output ssm.ListComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComplianceItemsAsync(ctx workflow.Context, input *ssm.ListComplianceItemsInput) *ListComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListComplianceItems", input)
	return &ListComplianceItemsFuture{Future: future}
}

func (a *stub) ListComplianceSummaries(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error) {
	var output ssm.ListComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListComplianceSummariesInput) *ListComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListComplianceSummaries", input)
	return &ListComplianceSummariesFuture{Future: future}
}

func (a *stub) ListDocumentMetadataHistory(ctx workflow.Context, input *ssm.ListDocumentMetadataHistoryInput) (*ssm.ListDocumentMetadataHistoryOutput, error) {
	var output ssm.ListDocumentMetadataHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocumentMetadataHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentMetadataHistoryAsync(ctx workflow.Context, input *ssm.ListDocumentMetadataHistoryInput) *ListDocumentMetadataHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocumentMetadataHistory", input)
	return &ListDocumentMetadataHistoryFuture{Future: future}
}

func (a *stub) ListDocumentVersions(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error) {
	var output ssm.ListDocumentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocumentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentVersionsAsync(ctx workflow.Context, input *ssm.ListDocumentVersionsInput) *ListDocumentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocumentVersions", input)
	return &ListDocumentVersionsFuture{Future: future}
}

func (a *stub) ListDocuments(ctx workflow.Context, input *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error) {
	var output ssm.ListDocumentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocuments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentsAsync(ctx workflow.Context, input *ssm.ListDocumentsInput) *ListDocumentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListDocuments", input)
	return &ListDocumentsFuture{Future: future}
}

func (a *stub) ListInventoryEntries(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error) {
	var output ssm.ListInventoryEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListInventoryEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInventoryEntriesAsync(ctx workflow.Context, input *ssm.ListInventoryEntriesInput) *ListInventoryEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListInventoryEntries", input)
	return &ListInventoryEntriesFuture{Future: future}
}

func (a *stub) ListOpsItemEvents(ctx workflow.Context, input *ssm.ListOpsItemEventsInput) (*ssm.ListOpsItemEventsOutput, error) {
	var output ssm.ListOpsItemEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListOpsItemEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOpsItemEventsAsync(ctx workflow.Context, input *ssm.ListOpsItemEventsInput) *ListOpsItemEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListOpsItemEvents", input)
	return &ListOpsItemEventsFuture{Future: future}
}

func (a *stub) ListOpsMetadata(ctx workflow.Context, input *ssm.ListOpsMetadataInput) (*ssm.ListOpsMetadataOutput, error) {
	var output ssm.ListOpsMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListOpsMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOpsMetadataAsync(ctx workflow.Context, input *ssm.ListOpsMetadataInput) *ListOpsMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListOpsMetadata", input)
	return &ListOpsMetadataFuture{Future: future}
}

func (a *stub) ListResourceComplianceSummaries(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error) {
	var output ssm.ListResourceComplianceSummariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListResourceComplianceSummaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceComplianceSummariesAsync(ctx workflow.Context, input *ssm.ListResourceComplianceSummariesInput) *ListResourceComplianceSummariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListResourceComplianceSummaries", input)
	return &ListResourceComplianceSummariesFuture{Future: future}
}

func (a *stub) ListResourceDataSync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error) {
	var output ssm.ListResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDataSyncAsync(ctx workflow.Context, input *ssm.ListResourceDataSyncInput) *ListResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListResourceDataSync", input)
	return &ListResourceDataSyncFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error) {
	var output ssm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *ssm.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyDocumentPermission(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error) {
	var output ssm.ModifyDocumentPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ModifyDocumentPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDocumentPermissionAsync(ctx workflow.Context, input *ssm.ModifyDocumentPermissionInput) *ModifyDocumentPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ModifyDocumentPermission", input)
	return &ModifyDocumentPermissionFuture{Future: future}
}

func (a *stub) PutComplianceItems(ctx workflow.Context, input *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error) {
	var output ssm.PutComplianceItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-PutComplianceItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutComplianceItemsAsync(ctx workflow.Context, input *ssm.PutComplianceItemsInput) *PutComplianceItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-PutComplianceItems", input)
	return &PutComplianceItemsFuture{Future: future}
}

func (a *stub) PutInventory(ctx workflow.Context, input *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error) {
	var output ssm.PutInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-PutInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInventoryAsync(ctx workflow.Context, input *ssm.PutInventoryInput) *PutInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-PutInventory", input)
	return &PutInventoryFuture{Future: future}
}

func (a *stub) PutParameter(ctx workflow.Context, input *ssm.PutParameterInput) (*ssm.PutParameterOutput, error) {
	var output ssm.PutParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-PutParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutParameterAsync(ctx workflow.Context, input *ssm.PutParameterInput) *PutParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-PutParameter", input)
	return &PutParameterFuture{Future: future}
}

func (a *stub) RegisterDefaultPatchBaseline(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	var output ssm.RegisterDefaultPatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterDefaultPatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDefaultPatchBaselineAsync(ctx workflow.Context, input *ssm.RegisterDefaultPatchBaselineInput) *RegisterDefaultPatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterDefaultPatchBaseline", input)
	return &RegisterDefaultPatchBaselineFuture{Future: future}
}

func (a *stub) RegisterPatchBaselineForPatchGroup(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	var output ssm.RegisterPatchBaselineForPatchGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterPatchBaselineForPatchGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterPatchBaselineForPatchGroupAsync(ctx workflow.Context, input *ssm.RegisterPatchBaselineForPatchGroupInput) *RegisterPatchBaselineForPatchGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterPatchBaselineForPatchGroup", input)
	return &RegisterPatchBaselineForPatchGroupFuture{Future: future}
}

func (a *stub) RegisterTargetWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTargetWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterTargetWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTargetWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTargetWithMaintenanceWindowInput) *RegisterTargetWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterTargetWithMaintenanceWindow", input)
	return &RegisterTargetWithMaintenanceWindowFuture{Future: future}
}

func (a *stub) RegisterTaskWithMaintenanceWindow(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	var output ssm.RegisterTaskWithMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterTaskWithMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTaskWithMaintenanceWindowAsync(ctx workflow.Context, input *ssm.RegisterTaskWithMaintenanceWindowInput) *RegisterTaskWithMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-RegisterTaskWithMaintenanceWindow", input)
	return &RegisterTaskWithMaintenanceWindowFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error) {
	var output ssm.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *ssm.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetServiceSetting(ctx workflow.Context, input *ssm.ResetServiceSettingInput) (*ssm.ResetServiceSettingOutput, error) {
	var output ssm.ResetServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ResetServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetServiceSettingAsync(ctx workflow.Context, input *ssm.ResetServiceSettingInput) *ResetServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ResetServiceSetting", input)
	return &ResetServiceSettingFuture{Future: future}
}

func (a *stub) ResumeSession(ctx workflow.Context, input *ssm.ResumeSessionInput) (*ssm.ResumeSessionOutput, error) {
	var output ssm.ResumeSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-ResumeSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeSessionAsync(ctx workflow.Context, input *ssm.ResumeSessionInput) *ResumeSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-ResumeSession", input)
	return &ResumeSessionFuture{Future: future}
}

func (a *stub) SendAutomationSignal(ctx workflow.Context, input *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error) {
	var output ssm.SendAutomationSignalOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-SendAutomationSignal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendAutomationSignalAsync(ctx workflow.Context, input *ssm.SendAutomationSignalInput) *SendAutomationSignalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-SendAutomationSignal", input)
	return &SendAutomationSignalFuture{Future: future}
}

func (a *stub) SendCommand(ctx workflow.Context, input *ssm.SendCommandInput) (*ssm.SendCommandOutput, error) {
	var output ssm.SendCommandOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-SendCommand", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendCommandAsync(ctx workflow.Context, input *ssm.SendCommandInput) *SendCommandFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-SendCommand", input)
	return &SendCommandFuture{Future: future}
}

func (a *stub) StartAssociationsOnce(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) (*ssm.StartAssociationsOnceOutput, error) {
	var output ssm.StartAssociationsOnceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-StartAssociationsOnce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAssociationsOnceAsync(ctx workflow.Context, input *ssm.StartAssociationsOnceInput) *StartAssociationsOnceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-StartAssociationsOnce", input)
	return &StartAssociationsOnceFuture{Future: future}
}

func (a *stub) StartAutomationExecution(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error) {
	var output ssm.StartAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-StartAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAutomationExecutionAsync(ctx workflow.Context, input *ssm.StartAutomationExecutionInput) *StartAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-StartAutomationExecution", input)
	return &StartAutomationExecutionFuture{Future: future}
}

func (a *stub) StartChangeRequestExecution(ctx workflow.Context, input *ssm.StartChangeRequestExecutionInput) (*ssm.StartChangeRequestExecutionOutput, error) {
	var output ssm.StartChangeRequestExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-StartChangeRequestExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartChangeRequestExecutionAsync(ctx workflow.Context, input *ssm.StartChangeRequestExecutionInput) *StartChangeRequestExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-StartChangeRequestExecution", input)
	return &StartChangeRequestExecutionFuture{Future: future}
}

func (a *stub) StartSession(ctx workflow.Context, input *ssm.StartSessionInput) (*ssm.StartSessionOutput, error) {
	var output ssm.StartSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-StartSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSessionAsync(ctx workflow.Context, input *ssm.StartSessionInput) *StartSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-StartSession", input)
	return &StartSessionFuture{Future: future}
}

func (a *stub) StopAutomationExecution(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error) {
	var output ssm.StopAutomationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-StopAutomationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAutomationExecutionAsync(ctx workflow.Context, input *ssm.StopAutomationExecutionInput) *StopAutomationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-StopAutomationExecution", input)
	return &StopAutomationExecutionFuture{Future: future}
}

func (a *stub) TerminateSession(ctx workflow.Context, input *ssm.TerminateSessionInput) (*ssm.TerminateSessionOutput, error) {
	var output ssm.TerminateSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-TerminateSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateSessionAsync(ctx workflow.Context, input *ssm.TerminateSessionInput) *TerminateSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-TerminateSession", input)
	return &TerminateSessionFuture{Future: future}
}

func (a *stub) UpdateAssociation(ctx workflow.Context, input *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error) {
	var output ssm.UpdateAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssociationAsync(ctx workflow.Context, input *ssm.UpdateAssociationInput) *UpdateAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateAssociation", input)
	return &UpdateAssociationFuture{Future: future}
}

func (a *stub) UpdateAssociationStatus(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error) {
	var output ssm.UpdateAssociationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateAssociationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssociationStatusAsync(ctx workflow.Context, input *ssm.UpdateAssociationStatusInput) *UpdateAssociationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateAssociationStatus", input)
	return &UpdateAssociationStatusFuture{Future: future}
}

func (a *stub) UpdateDocument(ctx workflow.Context, input *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error) {
	var output ssm.UpdateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentAsync(ctx workflow.Context, input *ssm.UpdateDocumentInput) *UpdateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocument", input)
	return &UpdateDocumentFuture{Future: future}
}

func (a *stub) UpdateDocumentDefaultVersion(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	var output ssm.UpdateDocumentDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocumentDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentDefaultVersionAsync(ctx workflow.Context, input *ssm.UpdateDocumentDefaultVersionInput) *UpdateDocumentDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocumentDefaultVersion", input)
	return &UpdateDocumentDefaultVersionFuture{Future: future}
}

func (a *stub) UpdateDocumentMetadata(ctx workflow.Context, input *ssm.UpdateDocumentMetadataInput) (*ssm.UpdateDocumentMetadataOutput, error) {
	var output ssm.UpdateDocumentMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocumentMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentMetadataAsync(ctx workflow.Context, input *ssm.UpdateDocumentMetadataInput) *UpdateDocumentMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateDocumentMetadata", input)
	return &UpdateDocumentMetadataFuture{Future: future}
}

func (a *stub) UpdateMaintenanceWindow(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error) {
	var output ssm.UpdateMaintenanceWindowOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMaintenanceWindowAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowInput) *UpdateMaintenanceWindowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindow", input)
	return &UpdateMaintenanceWindowFuture{Future: future}
}

func (a *stub) UpdateMaintenanceWindowTarget(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	var output ssm.UpdateMaintenanceWindowTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindowTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMaintenanceWindowTargetAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTargetInput) *UpdateMaintenanceWindowTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindowTarget", input)
	return &UpdateMaintenanceWindowTargetFuture{Future: future}
}

func (a *stub) UpdateMaintenanceWindowTask(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	var output ssm.UpdateMaintenanceWindowTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindowTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMaintenanceWindowTaskAsync(ctx workflow.Context, input *ssm.UpdateMaintenanceWindowTaskInput) *UpdateMaintenanceWindowTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateMaintenanceWindowTask", input)
	return &UpdateMaintenanceWindowTaskFuture{Future: future}
}

func (a *stub) UpdateManagedInstanceRole(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	var output ssm.UpdateManagedInstanceRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateManagedInstanceRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateManagedInstanceRoleAsync(ctx workflow.Context, input *ssm.UpdateManagedInstanceRoleInput) *UpdateManagedInstanceRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateManagedInstanceRole", input)
	return &UpdateManagedInstanceRoleFuture{Future: future}
}

func (a *stub) UpdateOpsItem(ctx workflow.Context, input *ssm.UpdateOpsItemInput) (*ssm.UpdateOpsItemOutput, error) {
	var output ssm.UpdateOpsItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateOpsItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOpsItemAsync(ctx workflow.Context, input *ssm.UpdateOpsItemInput) *UpdateOpsItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateOpsItem", input)
	return &UpdateOpsItemFuture{Future: future}
}

func (a *stub) UpdateOpsMetadata(ctx workflow.Context, input *ssm.UpdateOpsMetadataInput) (*ssm.UpdateOpsMetadataOutput, error) {
	var output ssm.UpdateOpsMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateOpsMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOpsMetadataAsync(ctx workflow.Context, input *ssm.UpdateOpsMetadataInput) *UpdateOpsMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateOpsMetadata", input)
	return &UpdateOpsMetadataFuture{Future: future}
}

func (a *stub) UpdatePatchBaseline(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error) {
	var output ssm.UpdatePatchBaselineOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdatePatchBaseline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePatchBaselineAsync(ctx workflow.Context, input *ssm.UpdatePatchBaselineInput) *UpdatePatchBaselineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdatePatchBaseline", input)
	return &UpdatePatchBaselineFuture{Future: future}
}

func (a *stub) UpdateResourceDataSync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) (*ssm.UpdateResourceDataSyncOutput, error) {
	var output ssm.UpdateResourceDataSyncOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateResourceDataSync", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceDataSyncAsync(ctx workflow.Context, input *ssm.UpdateResourceDataSyncInput) *UpdateResourceDataSyncFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateResourceDataSync", input)
	return &UpdateResourceDataSyncFuture{Future: future}
}

func (a *stub) UpdateServiceSetting(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) (*ssm.UpdateServiceSettingOutput, error) {
	var output ssm.UpdateServiceSettingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateServiceSetting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceSettingAsync(ctx workflow.Context, input *ssm.UpdateServiceSettingInput) *UpdateServiceSettingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-UpdateServiceSetting", input)
	return &UpdateServiceSettingFuture{Future: future}
}

func (a *stub) WaitUntilCommandExecuted(ctx workflow.Context, input *ssm.GetCommandInvocationInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ssm-WaitUntilCommandExecuted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCommandExecutedAsync(ctx workflow.Context, input *ssm.GetCommandInvocationInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssm-WaitUntilCommandExecuted", input)
	return clients.NewVoidFuture(future)
}
