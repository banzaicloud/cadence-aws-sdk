// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package medialivestub

import (
	"github.com/aws/aws-sdk-go/service/medialive"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type MediaLiveAcceptInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveAcceptInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.AcceptInputDeviceTransferOutput, error) {
	var output medialive.AcceptInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchDeleteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveBatchDeleteFuture) Get(ctx workflow.Context) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchStartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveBatchStartFuture) Get(ctx workflow.Context) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchStopFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveBatchStopFuture) Get(ctx workflow.Context) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveBatchUpdateScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveBatchUpdateScheduleFuture) Get(ctx workflow.Context) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCancelInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCancelInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.CancelInputDeviceTransferOutput, error) {
	var output medialive.CancelInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateChannelFuture) Get(ctx workflow.Context) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateInputFuture) Get(ctx workflow.Context) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateMultiplexFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveCreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveCreateTagsFuture) Get(ctx workflow.Context) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteChannelFuture) Get(ctx workflow.Context) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteInputFuture) Get(ctx workflow.Context) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteMultiplexFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteReservationFuture) Get(ctx workflow.Context) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteScheduleFuture) Get(ctx workflow.Context) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDeleteTagsFuture) Get(ctx workflow.Context) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeChannelFuture) Get(ctx workflow.Context) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeInputFuture) Get(ctx workflow.Context) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeInputDeviceFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputDeviceThumbnailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeInputDeviceThumbnailFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeMultiplexFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeOfferingFuture) Get(ctx workflow.Context) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeReservationFuture) Get(ctx workflow.Context) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveDescribeScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveDescribeScheduleFuture) Get(ctx workflow.Context) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListChannelsFuture) Get(ctx workflow.Context) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputDeviceTransfersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListInputDeviceTransfersFuture) Get(ctx workflow.Context) (*medialive.ListInputDeviceTransfersOutput, error) {
	var output medialive.ListInputDeviceTransfersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListInputDevicesFuture) Get(ctx workflow.Context) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListInputSecurityGroupsFuture) Get(ctx workflow.Context) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListInputsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListInputsFuture) Get(ctx workflow.Context) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListMultiplexProgramsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListMultiplexProgramsFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListMultiplexesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListMultiplexesFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListOfferingsFuture) Get(ctx workflow.Context) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListReservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListReservationsFuture) Get(ctx workflow.Context) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveListTagsForResourceFuture) Get(ctx workflow.Context) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLivePurchaseOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLivePurchaseOfferingFuture) Get(ctx workflow.Context) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveRejectInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveRejectInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.RejectInputDeviceTransferOutput, error) {
	var output medialive.RejectInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStartChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveStartChannelFuture) Get(ctx workflow.Context) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStartMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveStartMultiplexFuture) Get(ctx workflow.Context) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStopChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveStopChannelFuture) Get(ctx workflow.Context) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveStopMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveStopMultiplexFuture) Get(ctx workflow.Context) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveTransferInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveTransferInputDeviceFuture) Get(ctx workflow.Context) (*medialive.TransferInputDeviceOutput, error) {
	var output medialive.TransferInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateChannelFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateChannelClassFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateChannelClassFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateInputFuture) Get(ctx workflow.Context) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateInputDeviceFuture) Get(ctx workflow.Context) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateMultiplexFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaLiveUpdateReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaLiveUpdateReservationFuture) Get(ctx workflow.Context) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInputDeviceTransfer(ctx workflow.Context, input *medialive.AcceptInputDeviceTransferInput) (*medialive.AcceptInputDeviceTransferOutput, error) {
	var output medialive.AcceptInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-AcceptInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInputDeviceTransferAsync(ctx workflow.Context, input *medialive.AcceptInputDeviceTransferInput) *MediaLiveAcceptInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-AcceptInputDeviceTransfer", input)
	return &MediaLiveAcceptInputDeviceTransferFuture{Future: future}
}

func (a *stub) BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchDelete", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *MediaLiveBatchDeleteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchDelete", input)
	return &MediaLiveBatchDeleteFuture{Future: future}
}

func (a *stub) BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *MediaLiveBatchStartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStart", input)
	return &MediaLiveBatchStartFuture{Future: future}
}

func (a *stub) BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStop", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *MediaLiveBatchStopFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStop", input)
	return &MediaLiveBatchStopFuture{Future: future}
}

func (a *stub) BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchUpdateSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *MediaLiveBatchUpdateScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchUpdateSchedule", input)
	return &MediaLiveBatchUpdateScheduleFuture{Future: future}
}

func (a *stub) CancelInputDeviceTransfer(ctx workflow.Context, input *medialive.CancelInputDeviceTransferInput) (*medialive.CancelInputDeviceTransferOutput, error) {
	var output medialive.CancelInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CancelInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelInputDeviceTransferAsync(ctx workflow.Context, input *medialive.CancelInputDeviceTransferInput) *MediaLiveCancelInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CancelInputDeviceTransfer", input)
	return &MediaLiveCancelInputDeviceTransferFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *MediaLiveCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateChannel", input)
	return &MediaLiveCreateChannelFuture{Future: future}
}

func (a *stub) CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *MediaLiveCreateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInput", input)
	return &MediaLiveCreateInputFuture{Future: future}
}

func (a *stub) CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *MediaLiveCreateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInputSecurityGroup", input)
	return &MediaLiveCreateInputSecurityGroupFuture{Future: future}
}

func (a *stub) CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *MediaLiveCreateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplex", input)
	return &MediaLiveCreateMultiplexFuture{Future: future}
}

func (a *stub) CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *MediaLiveCreateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplexProgram", input)
	return &MediaLiveCreateMultiplexProgramFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *MediaLiveCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateTags", input)
	return &MediaLiveCreateTagsFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *MediaLiveDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteChannel", input)
	return &MediaLiveDeleteChannelFuture{Future: future}
}

func (a *stub) DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *MediaLiveDeleteInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInput", input)
	return &MediaLiveDeleteInputFuture{Future: future}
}

func (a *stub) DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *MediaLiveDeleteInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInputSecurityGroup", input)
	return &MediaLiveDeleteInputSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *MediaLiveDeleteMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplex", input)
	return &MediaLiveDeleteMultiplexFuture{Future: future}
}

func (a *stub) DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *MediaLiveDeleteMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplexProgram", input)
	return &MediaLiveDeleteMultiplexProgramFuture{Future: future}
}

func (a *stub) DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *MediaLiveDeleteReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteReservation", input)
	return &MediaLiveDeleteReservationFuture{Future: future}
}

func (a *stub) DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *MediaLiveDeleteScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteSchedule", input)
	return &MediaLiveDeleteScheduleFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *MediaLiveDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteTags", input)
	return &MediaLiveDeleteTagsFuture{Future: future}
}

func (a *stub) DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *MediaLiveDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeChannel", input)
	return &MediaLiveDescribeChannelFuture{Future: future}
}

func (a *stub) DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *MediaLiveDescribeInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInput", input)
	return &MediaLiveDescribeInputFuture{Future: future}
}

func (a *stub) DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *MediaLiveDescribeInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDevice", input)
	return &MediaLiveDescribeInputDeviceFuture{Future: future}
}

func (a *stub) DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDeviceThumbnail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *MediaLiveDescribeInputDeviceThumbnailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDeviceThumbnail", input)
	return &MediaLiveDescribeInputDeviceThumbnailFuture{Future: future}
}

func (a *stub) DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *MediaLiveDescribeInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputSecurityGroup", input)
	return &MediaLiveDescribeInputSecurityGroupFuture{Future: future}
}

func (a *stub) DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *MediaLiveDescribeMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplex", input)
	return &MediaLiveDescribeMultiplexFuture{Future: future}
}

func (a *stub) DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *MediaLiveDescribeMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplexProgram", input)
	return &MediaLiveDescribeMultiplexProgramFuture{Future: future}
}

func (a *stub) DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *MediaLiveDescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeOffering", input)
	return &MediaLiveDescribeOfferingFuture{Future: future}
}

func (a *stub) DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *MediaLiveDescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeReservation", input)
	return &MediaLiveDescribeReservationFuture{Future: future}
}

func (a *stub) DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *MediaLiveDescribeScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeSchedule", input)
	return &MediaLiveDescribeScheduleFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *MediaLiveListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListChannels", input)
	return &MediaLiveListChannelsFuture{Future: future}
}

func (a *stub) ListInputDeviceTransfers(ctx workflow.Context, input *medialive.ListInputDeviceTransfersInput) (*medialive.ListInputDeviceTransfersOutput, error) {
	var output medialive.ListInputDeviceTransfersOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDeviceTransfers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputDeviceTransfersAsync(ctx workflow.Context, input *medialive.ListInputDeviceTransfersInput) *MediaLiveListInputDeviceTransfersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDeviceTransfers", input)
	return &MediaLiveListInputDeviceTransfersFuture{Future: future}
}

func (a *stub) ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *MediaLiveListInputDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDevices", input)
	return &MediaLiveListInputDevicesFuture{Future: future}
}

func (a *stub) ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *MediaLiveListInputSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputSecurityGroups", input)
	return &MediaLiveListInputSecurityGroupsFuture{Future: future}
}

func (a *stub) ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *MediaLiveListInputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputs", input)
	return &MediaLiveListInputsFuture{Future: future}
}

func (a *stub) ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexPrograms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *MediaLiveListMultiplexProgramsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexPrograms", input)
	return &MediaLiveListMultiplexProgramsFuture{Future: future}
}

func (a *stub) ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *MediaLiveListMultiplexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexes", input)
	return &MediaLiveListMultiplexesFuture{Future: future}
}

func (a *stub) ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *MediaLiveListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListOfferings", input)
	return &MediaLiveListOfferingsFuture{Future: future}
}

func (a *stub) ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *MediaLiveListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListReservations", input)
	return &MediaLiveListReservationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *MediaLiveListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListTagsForResource", input)
	return &MediaLiveListTagsForResourceFuture{Future: future}
}

func (a *stub) PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *MediaLivePurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-PurchaseOffering", input)
	return &MediaLivePurchaseOfferingFuture{Future: future}
}

func (a *stub) RejectInputDeviceTransfer(ctx workflow.Context, input *medialive.RejectInputDeviceTransferInput) (*medialive.RejectInputDeviceTransferOutput, error) {
	var output medialive.RejectInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-RejectInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectInputDeviceTransferAsync(ctx workflow.Context, input *medialive.RejectInputDeviceTransferInput) *MediaLiveRejectInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-RejectInputDeviceTransfer", input)
	return &MediaLiveRejectInputDeviceTransferFuture{Future: future}
}

func (a *stub) StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StartChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *MediaLiveStartChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StartChannel", input)
	return &MediaLiveStartChannelFuture{Future: future}
}

func (a *stub) StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StartMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *MediaLiveStartMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StartMultiplex", input)
	return &MediaLiveStartMultiplexFuture{Future: future}
}

func (a *stub) StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StopChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *MediaLiveStopChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StopChannel", input)
	return &MediaLiveStopChannelFuture{Future: future}
}

func (a *stub) StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StopMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *MediaLiveStopMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StopMultiplex", input)
	return &MediaLiveStopMultiplexFuture{Future: future}
}

func (a *stub) TransferInputDevice(ctx workflow.Context, input *medialive.TransferInputDeviceInput) (*medialive.TransferInputDeviceOutput, error) {
	var output medialive.TransferInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-TransferInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransferInputDeviceAsync(ctx workflow.Context, input *medialive.TransferInputDeviceInput) *MediaLiveTransferInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-TransferInputDevice", input)
	return &MediaLiveTransferInputDeviceFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *MediaLiveUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannel", input)
	return &MediaLiveUpdateChannelFuture{Future: future}
}

func (a *stub) UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannelClass", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *MediaLiveUpdateChannelClassFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannelClass", input)
	return &MediaLiveUpdateChannelClassFuture{Future: future}
}

func (a *stub) UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *MediaLiveUpdateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInput", input)
	return &MediaLiveUpdateInputFuture{Future: future}
}

func (a *stub) UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *MediaLiveUpdateInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputDevice", input)
	return &MediaLiveUpdateInputDeviceFuture{Future: future}
}

func (a *stub) UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *MediaLiveUpdateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputSecurityGroup", input)
	return &MediaLiveUpdateInputSecurityGroupFuture{Future: future}
}

func (a *stub) UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *MediaLiveUpdateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplex", input)
	return &MediaLiveUpdateMultiplexFuture{Future: future}
}

func (a *stub) UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *MediaLiveUpdateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplexProgram", input)
	return &MediaLiveUpdateMultiplexProgramFuture{Future: future}
}

func (a *stub) UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *MediaLiveUpdateReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateReservation", input)
	return &MediaLiveUpdateReservationFuture{Future: future}
}

func (a *stub) WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputAttached", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputAttached", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDetached", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDetached", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexStopped", input)
	return clients.NewVoidFuture(future)
}
