// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package medialivestub

import (
	"github.com/aws/aws-sdk-go/service/medialive"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.AcceptInputDeviceTransferOutput, error) {
	var output medialive.AcceptInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteFuture) Get(ctx workflow.Context) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchStartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchStartFuture) Get(ctx workflow.Context) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchStopFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchStopFuture) Get(ctx workflow.Context) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdateScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUpdateScheduleFuture) Get(ctx workflow.Context) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.CancelInputDeviceTransferOutput, error) {
	var output medialive.CancelInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelFuture) Get(ctx workflow.Context) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInputFuture) Get(ctx workflow.Context) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMultiplexFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelFuture) Get(ctx workflow.Context) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInputFuture) Get(ctx workflow.Context) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMultiplexFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReservationFuture) Get(ctx workflow.Context) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScheduleFuture) Get(ctx workflow.Context) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelFuture) Get(ctx workflow.Context) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInputFuture) Get(ctx workflow.Context) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInputDeviceFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInputDeviceThumbnailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInputDeviceThumbnailFuture) Get(ctx workflow.Context) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMultiplexFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOfferingFuture) Get(ctx workflow.Context) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservationFuture) Get(ctx workflow.Context) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduleFuture) Get(ctx workflow.Context) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelsFuture) Get(ctx workflow.Context) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInputDeviceTransfersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInputDeviceTransfersFuture) Get(ctx workflow.Context) (*medialive.ListInputDeviceTransfersOutput, error) {
	var output medialive.ListInputDeviceTransfersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInputDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInputDevicesFuture) Get(ctx workflow.Context) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInputSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInputSecurityGroupsFuture) Get(ctx workflow.Context) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInputsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInputsFuture) Get(ctx workflow.Context) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMultiplexProgramsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMultiplexProgramsFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMultiplexesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMultiplexesFuture) Get(ctx workflow.Context) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOfferingsFuture) Get(ctx workflow.Context) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReservationsFuture) Get(ctx workflow.Context) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseOfferingFuture) Get(ctx workflow.Context) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectInputDeviceTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectInputDeviceTransferFuture) Get(ctx workflow.Context) (*medialive.RejectInputDeviceTransferOutput, error) {
	var output medialive.RejectInputDeviceTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartChannelFuture) Get(ctx workflow.Context) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMultiplexFuture) Get(ctx workflow.Context) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopChannelFuture) Get(ctx workflow.Context) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopMultiplexFuture) Get(ctx workflow.Context) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TransferInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TransferInputDeviceFuture) Get(ctx workflow.Context) (*medialive.TransferInputDeviceOutput, error) {
	var output medialive.TransferInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelClassFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelClassFuture) Get(ctx workflow.Context) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInputFuture) Get(ctx workflow.Context) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInputDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInputDeviceFuture) Get(ctx workflow.Context) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInputSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInputSecurityGroupFuture) Get(ctx workflow.Context) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMultiplexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMultiplexFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMultiplexProgramFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMultiplexProgramFuture) Get(ctx workflow.Context) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateReservationFuture) Get(ctx workflow.Context) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInputDeviceTransfer(ctx workflow.Context, input *medialive.AcceptInputDeviceTransferInput) (*medialive.AcceptInputDeviceTransferOutput, error) {
	var output medialive.AcceptInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-AcceptInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInputDeviceTransferAsync(ctx workflow.Context, input *medialive.AcceptInputDeviceTransferInput) *AcceptInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-AcceptInputDeviceTransfer", input)
	return &AcceptInputDeviceTransferFuture{Future: future}
}

func (a *stub) BatchDelete(ctx workflow.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error) {
	var output medialive.BatchDeleteOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchDelete", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteAsync(ctx workflow.Context, input *medialive.BatchDeleteInput) *BatchDeleteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchDelete", input)
	return &BatchDeleteFuture{Future: future}
}

func (a *stub) BatchStart(ctx workflow.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error) {
	var output medialive.BatchStartOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStartAsync(ctx workflow.Context, input *medialive.BatchStartInput) *BatchStartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStart", input)
	return &BatchStartFuture{Future: future}
}

func (a *stub) BatchStop(ctx workflow.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error) {
	var output medialive.BatchStopOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStop", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStopAsync(ctx workflow.Context, input *medialive.BatchStopInput) *BatchStopFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchStop", input)
	return &BatchStopFuture{Future: future}
}

func (a *stub) BatchUpdateSchedule(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	var output medialive.BatchUpdateScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-BatchUpdateSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdateScheduleAsync(ctx workflow.Context, input *medialive.BatchUpdateScheduleInput) *BatchUpdateScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-BatchUpdateSchedule", input)
	return &BatchUpdateScheduleFuture{Future: future}
}

func (a *stub) CancelInputDeviceTransfer(ctx workflow.Context, input *medialive.CancelInputDeviceTransferInput) (*medialive.CancelInputDeviceTransferOutput, error) {
	var output medialive.CancelInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CancelInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelInputDeviceTransferAsync(ctx workflow.Context, input *medialive.CancelInputDeviceTransferInput) *CancelInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CancelInputDeviceTransfer", input)
	return &CancelInputDeviceTransferFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	var output medialive.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *medialive.CreateChannelInput) *CreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateChannel", input)
	return &CreateChannelFuture{Future: future}
}

func (a *stub) CreateInput(ctx workflow.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	var output medialive.CreateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInputAsync(ctx workflow.Context, input *medialive.CreateInputInput) *CreateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInput", input)
	return &CreateInputFuture{Future: future}
}

func (a *stub) CreateInputSecurityGroup(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	var output medialive.CreateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.CreateInputSecurityGroupInput) *CreateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateInputSecurityGroup", input)
	return &CreateInputSecurityGroupFuture{Future: future}
}

func (a *stub) CreateMultiplex(ctx workflow.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error) {
	var output medialive.CreateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMultiplexAsync(ctx workflow.Context, input *medialive.CreateMultiplexInput) *CreateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplex", input)
	return &CreateMultiplexFuture{Future: future}
}

func (a *stub) CreateMultiplexProgram(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error) {
	var output medialive.CreateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMultiplexProgramAsync(ctx workflow.Context, input *medialive.CreateMultiplexProgramInput) *CreateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateMultiplexProgram", input)
	return &CreateMultiplexProgramFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	var output medialive.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *medialive.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	var output medialive.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *medialive.DeleteChannelInput) *DeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteChannel", input)
	return &DeleteChannelFuture{Future: future}
}

func (a *stub) DeleteInput(ctx workflow.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	var output medialive.DeleteInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInputAsync(ctx workflow.Context, input *medialive.DeleteInputInput) *DeleteInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInput", input)
	return &DeleteInputFuture{Future: future}
}

func (a *stub) DeleteInputSecurityGroup(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	var output medialive.DeleteInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DeleteInputSecurityGroupInput) *DeleteInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteInputSecurityGroup", input)
	return &DeleteInputSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteMultiplex(ctx workflow.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error) {
	var output medialive.DeleteMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMultiplexAsync(ctx workflow.Context, input *medialive.DeleteMultiplexInput) *DeleteMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplex", input)
	return &DeleteMultiplexFuture{Future: future}
}

func (a *stub) DeleteMultiplexProgram(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error) {
	var output medialive.DeleteMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMultiplexProgramAsync(ctx workflow.Context, input *medialive.DeleteMultiplexProgramInput) *DeleteMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteMultiplexProgram", input)
	return &DeleteMultiplexProgramFuture{Future: future}
}

func (a *stub) DeleteReservation(ctx workflow.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	var output medialive.DeleteReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReservationAsync(ctx workflow.Context, input *medialive.DeleteReservationInput) *DeleteReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteReservation", input)
	return &DeleteReservationFuture{Future: future}
}

func (a *stub) DeleteSchedule(ctx workflow.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error) {
	var output medialive.DeleteScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduleAsync(ctx workflow.Context, input *medialive.DeleteScheduleInput) *DeleteScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteSchedule", input)
	return &DeleteScheduleFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	var output medialive.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *medialive.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DescribeChannel(ctx workflow.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	var output medialive.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *DescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeChannel", input)
	return &DescribeChannelFuture{Future: future}
}

func (a *stub) DescribeInput(ctx workflow.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	var output medialive.DescribeInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *DescribeInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInput", input)
	return &DescribeInputFuture{Future: future}
}

func (a *stub) DescribeInputDevice(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error) {
	var output medialive.DescribeInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputDeviceAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceInput) *DescribeInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDevice", input)
	return &DescribeInputDeviceFuture{Future: future}
}

func (a *stub) DescribeInputDeviceThumbnail(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	var output medialive.DescribeInputDeviceThumbnailOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDeviceThumbnail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputDeviceThumbnailAsync(ctx workflow.Context, input *medialive.DescribeInputDeviceThumbnailInput) *DescribeInputDeviceThumbnailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputDeviceThumbnail", input)
	return &DescribeInputDeviceThumbnailFuture{Future: future}
}

func (a *stub) DescribeInputSecurityGroup(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	var output medialive.DescribeInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInputSecurityGroupAsync(ctx workflow.Context, input *medialive.DescribeInputSecurityGroupInput) *DescribeInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeInputSecurityGroup", input)
	return &DescribeInputSecurityGroupFuture{Future: future}
}

func (a *stub) DescribeMultiplex(ctx workflow.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error) {
	var output medialive.DescribeMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMultiplexAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *DescribeMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplex", input)
	return &DescribeMultiplexFuture{Future: future}
}

func (a *stub) DescribeMultiplexProgram(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error) {
	var output medialive.DescribeMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMultiplexProgramAsync(ctx workflow.Context, input *medialive.DescribeMultiplexProgramInput) *DescribeMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeMultiplexProgram", input)
	return &DescribeMultiplexProgramFuture{Future: future}
}

func (a *stub) DescribeOffering(ctx workflow.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	var output medialive.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOfferingAsync(ctx workflow.Context, input *medialive.DescribeOfferingInput) *DescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeOffering", input)
	return &DescribeOfferingFuture{Future: future}
}

func (a *stub) DescribeReservation(ctx workflow.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	var output medialive.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservationAsync(ctx workflow.Context, input *medialive.DescribeReservationInput) *DescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeReservation", input)
	return &DescribeReservationFuture{Future: future}
}

func (a *stub) DescribeSchedule(ctx workflow.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	var output medialive.DescribeScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduleAsync(ctx workflow.Context, input *medialive.DescribeScheduleInput) *DescribeScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-DescribeSchedule", input)
	return &DescribeScheduleFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	var output medialive.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *medialive.ListChannelsInput) *ListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListChannels", input)
	return &ListChannelsFuture{Future: future}
}

func (a *stub) ListInputDeviceTransfers(ctx workflow.Context, input *medialive.ListInputDeviceTransfersInput) (*medialive.ListInputDeviceTransfersOutput, error) {
	var output medialive.ListInputDeviceTransfersOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDeviceTransfers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputDeviceTransfersAsync(ctx workflow.Context, input *medialive.ListInputDeviceTransfersInput) *ListInputDeviceTransfersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDeviceTransfers", input)
	return &ListInputDeviceTransfersFuture{Future: future}
}

func (a *stub) ListInputDevices(ctx workflow.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error) {
	var output medialive.ListInputDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputDevicesAsync(ctx workflow.Context, input *medialive.ListInputDevicesInput) *ListInputDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputDevices", input)
	return &ListInputDevicesFuture{Future: future}
}

func (a *stub) ListInputSecurityGroups(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	var output medialive.ListInputSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputSecurityGroupsAsync(ctx workflow.Context, input *medialive.ListInputSecurityGroupsInput) *ListInputSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputSecurityGroups", input)
	return &ListInputSecurityGroupsFuture{Future: future}
}

func (a *stub) ListInputs(ctx workflow.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	var output medialive.ListInputsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInputsAsync(ctx workflow.Context, input *medialive.ListInputsInput) *ListInputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListInputs", input)
	return &ListInputsFuture{Future: future}
}

func (a *stub) ListMultiplexPrograms(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error) {
	var output medialive.ListMultiplexProgramsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexPrograms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMultiplexProgramsAsync(ctx workflow.Context, input *medialive.ListMultiplexProgramsInput) *ListMultiplexProgramsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexPrograms", input)
	return &ListMultiplexProgramsFuture{Future: future}
}

func (a *stub) ListMultiplexes(ctx workflow.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error) {
	var output medialive.ListMultiplexesOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMultiplexesAsync(ctx workflow.Context, input *medialive.ListMultiplexesInput) *ListMultiplexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListMultiplexes", input)
	return &ListMultiplexesFuture{Future: future}
}

func (a *stub) ListOfferings(ctx workflow.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	var output medialive.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingsAsync(ctx workflow.Context, input *medialive.ListOfferingsInput) *ListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListOfferings", input)
	return &ListOfferingsFuture{Future: future}
}

func (a *stub) ListReservations(ctx workflow.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	var output medialive.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReservationsAsync(ctx workflow.Context, input *medialive.ListReservationsInput) *ListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListReservations", input)
	return &ListReservationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	var output medialive.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *medialive.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PurchaseOffering(ctx workflow.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	var output medialive.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseOfferingAsync(ctx workflow.Context, input *medialive.PurchaseOfferingInput) *PurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-PurchaseOffering", input)
	return &PurchaseOfferingFuture{Future: future}
}

func (a *stub) RejectInputDeviceTransfer(ctx workflow.Context, input *medialive.RejectInputDeviceTransferInput) (*medialive.RejectInputDeviceTransferOutput, error) {
	var output medialive.RejectInputDeviceTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-RejectInputDeviceTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectInputDeviceTransferAsync(ctx workflow.Context, input *medialive.RejectInputDeviceTransferInput) *RejectInputDeviceTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-RejectInputDeviceTransfer", input)
	return &RejectInputDeviceTransferFuture{Future: future}
}

func (a *stub) StartChannel(ctx workflow.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	var output medialive.StartChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StartChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartChannelAsync(ctx workflow.Context, input *medialive.StartChannelInput) *StartChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StartChannel", input)
	return &StartChannelFuture{Future: future}
}

func (a *stub) StartMultiplex(ctx workflow.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error) {
	var output medialive.StartMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StartMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMultiplexAsync(ctx workflow.Context, input *medialive.StartMultiplexInput) *StartMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StartMultiplex", input)
	return &StartMultiplexFuture{Future: future}
}

func (a *stub) StopChannel(ctx workflow.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	var output medialive.StopChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StopChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopChannelAsync(ctx workflow.Context, input *medialive.StopChannelInput) *StopChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StopChannel", input)
	return &StopChannelFuture{Future: future}
}

func (a *stub) StopMultiplex(ctx workflow.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error) {
	var output medialive.StopMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-StopMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMultiplexAsync(ctx workflow.Context, input *medialive.StopMultiplexInput) *StopMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-StopMultiplex", input)
	return &StopMultiplexFuture{Future: future}
}

func (a *stub) TransferInputDevice(ctx workflow.Context, input *medialive.TransferInputDeviceInput) (*medialive.TransferInputDeviceOutput, error) {
	var output medialive.TransferInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-TransferInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransferInputDeviceAsync(ctx workflow.Context, input *medialive.TransferInputDeviceInput) *TransferInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-TransferInputDevice", input)
	return &TransferInputDeviceFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	var output medialive.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *medialive.UpdateChannelInput) *UpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannel", input)
	return &UpdateChannelFuture{Future: future}
}

func (a *stub) UpdateChannelClass(ctx workflow.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error) {
	var output medialive.UpdateChannelClassOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannelClass", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelClassAsync(ctx workflow.Context, input *medialive.UpdateChannelClassInput) *UpdateChannelClassFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateChannelClass", input)
	return &UpdateChannelClassFuture{Future: future}
}

func (a *stub) UpdateInput(ctx workflow.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	var output medialive.UpdateInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputAsync(ctx workflow.Context, input *medialive.UpdateInputInput) *UpdateInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInput", input)
	return &UpdateInputFuture{Future: future}
}

func (a *stub) UpdateInputDevice(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error) {
	var output medialive.UpdateInputDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputDeviceAsync(ctx workflow.Context, input *medialive.UpdateInputDeviceInput) *UpdateInputDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputDevice", input)
	return &UpdateInputDeviceFuture{Future: future}
}

func (a *stub) UpdateInputSecurityGroup(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	var output medialive.UpdateInputSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInputSecurityGroupAsync(ctx workflow.Context, input *medialive.UpdateInputSecurityGroupInput) *UpdateInputSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateInputSecurityGroup", input)
	return &UpdateInputSecurityGroupFuture{Future: future}
}

func (a *stub) UpdateMultiplex(ctx workflow.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error) {
	var output medialive.UpdateMultiplexOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMultiplexAsync(ctx workflow.Context, input *medialive.UpdateMultiplexInput) *UpdateMultiplexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplex", input)
	return &UpdateMultiplexFuture{Future: future}
}

func (a *stub) UpdateMultiplexProgram(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error) {
	var output medialive.UpdateMultiplexProgramOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplexProgram", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMultiplexProgramAsync(ctx workflow.Context, input *medialive.UpdateMultiplexProgramInput) *UpdateMultiplexProgramFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateMultiplexProgram", input)
	return &UpdateMultiplexProgramFuture{Future: future}
}

func (a *stub) UpdateReservation(ctx workflow.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error) {
	var output medialive.UpdateReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReservationAsync(ctx workflow.Context, input *medialive.UpdateReservationInput) *UpdateReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-UpdateReservation", input)
	return &UpdateReservationFuture{Future: future}
}

func (a *stub) WaitUntilChannelCreated(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelCreatedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelDeleted(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelDeletedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelRunning(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelRunningAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilChannelStopped(ctx workflow.Context, input *medialive.DescribeChannelInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilChannelStoppedAsync(ctx workflow.Context, input *medialive.DescribeChannelInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilChannelStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputAttached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputAttached", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputAttachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputAttached", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputDeleted(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputDeletedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInputDetached(ctx workflow.Context, input *medialive.DescribeInputInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDetached", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInputDetachedAsync(ctx workflow.Context, input *medialive.DescribeInputInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilInputDetached", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexCreated(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexCreatedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexDeleted(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexDeletedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexRunning(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexRunningAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilMultiplexStopped(ctx workflow.Context, input *medialive.DescribeMultiplexInput) error {
	return workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilMultiplexStoppedAsync(ctx workflow.Context, input *medialive.DescribeMultiplexInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-medialive-WaitUntilMultiplexStopped", input)
	return clients.NewVoidFuture(future)
}
