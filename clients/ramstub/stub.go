// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ramstub

import (
	"github.com/aws/aws-sdk-go/service/ram"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptResourceShareInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptResourceShareInvitationFuture) Get(ctx workflow.Context) (*ram.AcceptResourceShareInvitationOutput, error) {
	var output ram.AcceptResourceShareInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateResourceShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateResourceShareFuture) Get(ctx workflow.Context) (*ram.AssociateResourceShareOutput, error) {
	var output ram.AssociateResourceShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateResourceSharePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateResourceSharePermissionFuture) Get(ctx workflow.Context) (*ram.AssociateResourceSharePermissionOutput, error) {
	var output ram.AssociateResourceSharePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceShareFuture) Get(ctx workflow.Context) (*ram.CreateResourceShareOutput, error) {
	var output ram.CreateResourceShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceShareFuture) Get(ctx workflow.Context) (*ram.DeleteResourceShareOutput, error) {
	var output ram.DeleteResourceShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateResourceShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateResourceShareFuture) Get(ctx workflow.Context) (*ram.DisassociateResourceShareOutput, error) {
	var output ram.DisassociateResourceShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateResourceSharePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateResourceSharePermissionFuture) Get(ctx workflow.Context) (*ram.DisassociateResourceSharePermissionOutput, error) {
	var output ram.DisassociateResourceSharePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableSharingWithAwsOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableSharingWithAwsOrganizationFuture) Get(ctx workflow.Context) (*ram.EnableSharingWithAwsOrganizationOutput, error) {
	var output ram.EnableSharingWithAwsOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPermissionFuture) Get(ctx workflow.Context) (*ram.GetPermissionOutput, error) {
	var output ram.GetPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcePoliciesFuture) Get(ctx workflow.Context) (*ram.GetResourcePoliciesOutput, error) {
	var output ram.GetResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceShareAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceShareAssociationsFuture) Get(ctx workflow.Context) (*ram.GetResourceShareAssociationsOutput, error) {
	var output ram.GetResourceShareAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceShareInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceShareInvitationsFuture) Get(ctx workflow.Context) (*ram.GetResourceShareInvitationsOutput, error) {
	var output ram.GetResourceShareInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceSharesFuture) Get(ctx workflow.Context) (*ram.GetResourceSharesOutput, error) {
	var output ram.GetResourceSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPendingInvitationResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPendingInvitationResourcesFuture) Get(ctx workflow.Context) (*ram.ListPendingInvitationResourcesOutput, error) {
	var output ram.ListPendingInvitationResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionsFuture) Get(ctx workflow.Context) (*ram.ListPermissionsOutput, error) {
	var output ram.ListPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPrincipalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPrincipalsFuture) Get(ctx workflow.Context) (*ram.ListPrincipalsOutput, error) {
	var output ram.ListPrincipalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceSharePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceSharePermissionsFuture) Get(ctx workflow.Context) (*ram.ListResourceSharePermissionsOutput, error) {
	var output ram.ListResourceSharePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceTypesFuture) Get(ctx workflow.Context) (*ram.ListResourceTypesOutput, error) {
	var output ram.ListResourceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourcesFuture) Get(ctx workflow.Context) (*ram.ListResourcesOutput, error) {
	var output ram.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PromoteResourceShareCreatedFromPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PromoteResourceShareCreatedFromPolicyFuture) Get(ctx workflow.Context) (*ram.PromoteResourceShareCreatedFromPolicyOutput, error) {
	var output ram.PromoteResourceShareCreatedFromPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectResourceShareInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectResourceShareInvitationFuture) Get(ctx workflow.Context) (*ram.RejectResourceShareInvitationOutput, error) {
	var output ram.RejectResourceShareInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*ram.TagResourceOutput, error) {
	var output ram.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*ram.UntagResourceOutput, error) {
	var output ram.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceShareFuture) Get(ctx workflow.Context) (*ram.UpdateResourceShareOutput, error) {
	var output ram.UpdateResourceShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptResourceShareInvitation(ctx workflow.Context, input *ram.AcceptResourceShareInvitationInput) (*ram.AcceptResourceShareInvitationOutput, error) {
	var output ram.AcceptResourceShareInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-AcceptResourceShareInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptResourceShareInvitationAsync(ctx workflow.Context, input *ram.AcceptResourceShareInvitationInput) *AcceptResourceShareInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-AcceptResourceShareInvitation", input)
	return &AcceptResourceShareInvitationFuture{Future: future}
}

func (a *stub) AssociateResourceShare(ctx workflow.Context, input *ram.AssociateResourceShareInput) (*ram.AssociateResourceShareOutput, error) {
	var output ram.AssociateResourceShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-AssociateResourceShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResourceShareAsync(ctx workflow.Context, input *ram.AssociateResourceShareInput) *AssociateResourceShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-AssociateResourceShare", input)
	return &AssociateResourceShareFuture{Future: future}
}

func (a *stub) AssociateResourceSharePermission(ctx workflow.Context, input *ram.AssociateResourceSharePermissionInput) (*ram.AssociateResourceSharePermissionOutput, error) {
	var output ram.AssociateResourceSharePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-AssociateResourceSharePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResourceSharePermissionAsync(ctx workflow.Context, input *ram.AssociateResourceSharePermissionInput) *AssociateResourceSharePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-AssociateResourceSharePermission", input)
	return &AssociateResourceSharePermissionFuture{Future: future}
}

func (a *stub) CreateResourceShare(ctx workflow.Context, input *ram.CreateResourceShareInput) (*ram.CreateResourceShareOutput, error) {
	var output ram.CreateResourceShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-CreateResourceShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceShareAsync(ctx workflow.Context, input *ram.CreateResourceShareInput) *CreateResourceShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-CreateResourceShare", input)
	return &CreateResourceShareFuture{Future: future}
}

func (a *stub) DeleteResourceShare(ctx workflow.Context, input *ram.DeleteResourceShareInput) (*ram.DeleteResourceShareOutput, error) {
	var output ram.DeleteResourceShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-DeleteResourceShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceShareAsync(ctx workflow.Context, input *ram.DeleteResourceShareInput) *DeleteResourceShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-DeleteResourceShare", input)
	return &DeleteResourceShareFuture{Future: future}
}

func (a *stub) DisassociateResourceShare(ctx workflow.Context, input *ram.DisassociateResourceShareInput) (*ram.DisassociateResourceShareOutput, error) {
	var output ram.DisassociateResourceShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-DisassociateResourceShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResourceShareAsync(ctx workflow.Context, input *ram.DisassociateResourceShareInput) *DisassociateResourceShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-DisassociateResourceShare", input)
	return &DisassociateResourceShareFuture{Future: future}
}

func (a *stub) DisassociateResourceSharePermission(ctx workflow.Context, input *ram.DisassociateResourceSharePermissionInput) (*ram.DisassociateResourceSharePermissionOutput, error) {
	var output ram.DisassociateResourceSharePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-DisassociateResourceSharePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResourceSharePermissionAsync(ctx workflow.Context, input *ram.DisassociateResourceSharePermissionInput) *DisassociateResourceSharePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-DisassociateResourceSharePermission", input)
	return &DisassociateResourceSharePermissionFuture{Future: future}
}

func (a *stub) EnableSharingWithAwsOrganization(ctx workflow.Context, input *ram.EnableSharingWithAwsOrganizationInput) (*ram.EnableSharingWithAwsOrganizationOutput, error) {
	var output ram.EnableSharingWithAwsOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-EnableSharingWithAwsOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSharingWithAwsOrganizationAsync(ctx workflow.Context, input *ram.EnableSharingWithAwsOrganizationInput) *EnableSharingWithAwsOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-EnableSharingWithAwsOrganization", input)
	return &EnableSharingWithAwsOrganizationFuture{Future: future}
}

func (a *stub) GetPermission(ctx workflow.Context, input *ram.GetPermissionInput) (*ram.GetPermissionOutput, error) {
	var output ram.GetPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-GetPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPermissionAsync(ctx workflow.Context, input *ram.GetPermissionInput) *GetPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-GetPermission", input)
	return &GetPermissionFuture{Future: future}
}

func (a *stub) GetResourcePolicies(ctx workflow.Context, input *ram.GetResourcePoliciesInput) (*ram.GetResourcePoliciesOutput, error) {
	var output ram.GetResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-GetResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePoliciesAsync(ctx workflow.Context, input *ram.GetResourcePoliciesInput) *GetResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-GetResourcePolicies", input)
	return &GetResourcePoliciesFuture{Future: future}
}

func (a *stub) GetResourceShareAssociations(ctx workflow.Context, input *ram.GetResourceShareAssociationsInput) (*ram.GetResourceShareAssociationsOutput, error) {
	var output ram.GetResourceShareAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShareAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceShareAssociationsAsync(ctx workflow.Context, input *ram.GetResourceShareAssociationsInput) *GetResourceShareAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShareAssociations", input)
	return &GetResourceShareAssociationsFuture{Future: future}
}

func (a *stub) GetResourceShareInvitations(ctx workflow.Context, input *ram.GetResourceShareInvitationsInput) (*ram.GetResourceShareInvitationsOutput, error) {
	var output ram.GetResourceShareInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShareInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceShareInvitationsAsync(ctx workflow.Context, input *ram.GetResourceShareInvitationsInput) *GetResourceShareInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShareInvitations", input)
	return &GetResourceShareInvitationsFuture{Future: future}
}

func (a *stub) GetResourceShares(ctx workflow.Context, input *ram.GetResourceSharesInput) (*ram.GetResourceSharesOutput, error) {
	var output ram.GetResourceSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceSharesAsync(ctx workflow.Context, input *ram.GetResourceSharesInput) *GetResourceSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-GetResourceShares", input)
	return &GetResourceSharesFuture{Future: future}
}

func (a *stub) ListPendingInvitationResources(ctx workflow.Context, input *ram.ListPendingInvitationResourcesInput) (*ram.ListPendingInvitationResourcesOutput, error) {
	var output ram.ListPendingInvitationResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListPendingInvitationResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPendingInvitationResourcesAsync(ctx workflow.Context, input *ram.ListPendingInvitationResourcesInput) *ListPendingInvitationResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListPendingInvitationResources", input)
	return &ListPendingInvitationResourcesFuture{Future: future}
}

func (a *stub) ListPermissions(ctx workflow.Context, input *ram.ListPermissionsInput) (*ram.ListPermissionsOutput, error) {
	var output ram.ListPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionsAsync(ctx workflow.Context, input *ram.ListPermissionsInput) *ListPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListPermissions", input)
	return &ListPermissionsFuture{Future: future}
}

func (a *stub) ListPrincipals(ctx workflow.Context, input *ram.ListPrincipalsInput) (*ram.ListPrincipalsOutput, error) {
	var output ram.ListPrincipalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListPrincipals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPrincipalsAsync(ctx workflow.Context, input *ram.ListPrincipalsInput) *ListPrincipalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListPrincipals", input)
	return &ListPrincipalsFuture{Future: future}
}

func (a *stub) ListResourceSharePermissions(ctx workflow.Context, input *ram.ListResourceSharePermissionsInput) (*ram.ListResourceSharePermissionsOutput, error) {
	var output ram.ListResourceSharePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListResourceSharePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceSharePermissionsAsync(ctx workflow.Context, input *ram.ListResourceSharePermissionsInput) *ListResourceSharePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListResourceSharePermissions", input)
	return &ListResourceSharePermissionsFuture{Future: future}
}

func (a *stub) ListResourceTypes(ctx workflow.Context, input *ram.ListResourceTypesInput) (*ram.ListResourceTypesOutput, error) {
	var output ram.ListResourceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListResourceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceTypesAsync(ctx workflow.Context, input *ram.ListResourceTypesInput) *ListResourceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListResourceTypes", input)
	return &ListResourceTypesFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *ram.ListResourcesInput) (*ram.ListResourcesOutput, error) {
	var output ram.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *ram.ListResourcesInput) *ListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-ListResources", input)
	return &ListResourcesFuture{Future: future}
}

func (a *stub) PromoteResourceShareCreatedFromPolicy(ctx workflow.Context, input *ram.PromoteResourceShareCreatedFromPolicyInput) (*ram.PromoteResourceShareCreatedFromPolicyOutput, error) {
	var output ram.PromoteResourceShareCreatedFromPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-PromoteResourceShareCreatedFromPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PromoteResourceShareCreatedFromPolicyAsync(ctx workflow.Context, input *ram.PromoteResourceShareCreatedFromPolicyInput) *PromoteResourceShareCreatedFromPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-PromoteResourceShareCreatedFromPolicy", input)
	return &PromoteResourceShareCreatedFromPolicyFuture{Future: future}
}

func (a *stub) RejectResourceShareInvitation(ctx workflow.Context, input *ram.RejectResourceShareInvitationInput) (*ram.RejectResourceShareInvitationOutput, error) {
	var output ram.RejectResourceShareInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-RejectResourceShareInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectResourceShareInvitationAsync(ctx workflow.Context, input *ram.RejectResourceShareInvitationInput) *RejectResourceShareInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-RejectResourceShareInvitation", input)
	return &RejectResourceShareInvitationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *ram.TagResourceInput) (*ram.TagResourceOutput, error) {
	var output ram.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *ram.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *ram.UntagResourceInput) (*ram.UntagResourceOutput, error) {
	var output ram.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *ram.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateResourceShare(ctx workflow.Context, input *ram.UpdateResourceShareInput) (*ram.UpdateResourceShareOutput, error) {
	var output ram.UpdateResourceShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-ram-UpdateResourceShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceShareAsync(ctx workflow.Context, input *ram.UpdateResourceShareInput) *UpdateResourceShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ram-UpdateResourceShare", input)
	return &UpdateResourceShareFuture{Future: future}
}
