// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package worklinkstub

import (
	"github.com/aws/aws-sdk-go/service/worklink"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDomainFuture) Get(ctx workflow.Context) (*worklink.AssociateDomainOutput, error) {
	var output worklink.AssociateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateWebsiteAuthorizationProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateWebsiteAuthorizationProviderFuture) Get(ctx workflow.Context) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.AssociateWebsiteAuthorizationProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateWebsiteCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.AssociateWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFleetFuture) Get(ctx workflow.Context) (*worklink.CreateFleetOutput, error) {
	var output worklink.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFleetFuture) Get(ctx workflow.Context) (*worklink.DeleteFleetOutput, error) {
	var output worklink.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAuditStreamConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAuditStreamConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeAuditStreamConfigurationOutput, error) {
	var output worklink.DescribeAuditStreamConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCompanyNetworkConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCompanyNetworkConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {
	var output worklink.DescribeCompanyNetworkConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeviceFuture) Get(ctx workflow.Context) (*worklink.DescribeDeviceOutput, error) {
	var output worklink.DescribeDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDevicePolicyConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDevicePolicyConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {
	var output worklink.DescribeDevicePolicyConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainFuture) Get(ctx workflow.Context) (*worklink.DescribeDomainOutput, error) {
	var output worklink.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetMetadataFuture) Get(ctx workflow.Context) (*worklink.DescribeFleetMetadataOutput, error) {
	var output worklink.DescribeFleetMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdentityProviderConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdentityProviderConfigurationFuture) Get(ctx workflow.Context) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {
	var output worklink.DescribeIdentityProviderConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWebsiteCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DescribeWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateDomainFuture) Get(ctx workflow.Context) (*worklink.DisassociateDomainOutput, error) {
	var output worklink.DisassociateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateWebsiteAuthorizationProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateWebsiteAuthorizationProviderFuture) Get(ctx workflow.Context) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.DisassociateWebsiteAuthorizationProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateWebsiteCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateWebsiteCertificateAuthorityFuture) Get(ctx workflow.Context) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DisassociateWebsiteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevicesFuture) Get(ctx workflow.Context) (*worklink.ListDevicesOutput, error) {
	var output worklink.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*worklink.ListDomainsOutput, error) {
	var output worklink.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFleetsFuture) Get(ctx workflow.Context) (*worklink.ListFleetsOutput, error) {
	var output worklink.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*worklink.ListTagsForResourceOutput, error) {
	var output worklink.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWebsiteAuthorizationProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWebsiteAuthorizationProvidersFuture) Get(ctx workflow.Context) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {
	var output worklink.ListWebsiteAuthorizationProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWebsiteCertificateAuthoritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWebsiteCertificateAuthoritiesFuture) Get(ctx workflow.Context) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {
	var output worklink.ListWebsiteCertificateAuthoritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreDomainAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreDomainAccessFuture) Get(ctx workflow.Context) (*worklink.RestoreDomainAccessOutput, error) {
	var output worklink.RestoreDomainAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeDomainAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeDomainAccessFuture) Get(ctx workflow.Context) (*worklink.RevokeDomainAccessOutput, error) {
	var output worklink.RevokeDomainAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SignOutUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SignOutUserFuture) Get(ctx workflow.Context) (*worklink.SignOutUserOutput, error) {
	var output worklink.SignOutUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*worklink.TagResourceOutput, error) {
	var output worklink.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*worklink.UntagResourceOutput, error) {
	var output worklink.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAuditStreamConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAuditStreamConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateAuditStreamConfigurationOutput, error) {
	var output worklink.UpdateAuditStreamConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCompanyNetworkConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCompanyNetworkConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {
	var output worklink.UpdateCompanyNetworkConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDevicePolicyConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDevicePolicyConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {
	var output worklink.UpdateDevicePolicyConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainMetadataFuture) Get(ctx workflow.Context) (*worklink.UpdateDomainMetadataOutput, error) {
	var output worklink.UpdateDomainMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFleetMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFleetMetadataFuture) Get(ctx workflow.Context) (*worklink.UpdateFleetMetadataOutput, error) {
	var output worklink.UpdateFleetMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIdentityProviderConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIdentityProviderConfigurationFuture) Get(ctx workflow.Context) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {
	var output worklink.UpdateIdentityProviderConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDomain(ctx workflow.Context, input *worklink.AssociateDomainInput) (*worklink.AssociateDomainOutput, error) {
	var output worklink.AssociateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDomainAsync(ctx workflow.Context, input *worklink.AssociateDomainInput) *AssociateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateDomain", input)
	return &AssociateDomainFuture{Future: future}
}

func (a *stub) AssociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.AssociateWebsiteAuthorizationProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateWebsiteAuthorizationProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.AssociateWebsiteAuthorizationProviderInput) *AssociateWebsiteAuthorizationProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateWebsiteAuthorizationProvider", input)
	return &AssociateWebsiteAuthorizationProviderFuture{Future: future}
}

func (a *stub) AssociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.AssociateWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.AssociateWebsiteCertificateAuthorityInput) *AssociateWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-AssociateWebsiteCertificateAuthority", input)
	return &AssociateWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *worklink.CreateFleetInput) (*worklink.CreateFleetOutput, error) {
	var output worklink.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *worklink.CreateFleetInput) *CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-CreateFleet", input)
	return &CreateFleetFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *worklink.DeleteFleetInput) (*worklink.DeleteFleetOutput, error) {
	var output worklink.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *worklink.DeleteFleetInput) *DeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DeleteFleet", input)
	return &DeleteFleetFuture{Future: future}
}

func (a *stub) DescribeAuditStreamConfiguration(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) (*worklink.DescribeAuditStreamConfigurationOutput, error) {
	var output worklink.DescribeAuditStreamConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeAuditStreamConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.DescribeAuditStreamConfigurationInput) *DescribeAuditStreamConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeAuditStreamConfiguration", input)
	return &DescribeAuditStreamConfigurationFuture{Future: future}
}

func (a *stub) DescribeCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {
	var output worklink.DescribeCompanyNetworkConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeCompanyNetworkConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.DescribeCompanyNetworkConfigurationInput) *DescribeCompanyNetworkConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeCompanyNetworkConfiguration", input)
	return &DescribeCompanyNetworkConfigurationFuture{Future: future}
}

func (a *stub) DescribeDevice(ctx workflow.Context, input *worklink.DescribeDeviceInput) (*worklink.DescribeDeviceOutput, error) {
	var output worklink.DescribeDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeviceAsync(ctx workflow.Context, input *worklink.DescribeDeviceInput) *DescribeDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDevice", input)
	return &DescribeDeviceFuture{Future: future}
}

func (a *stub) DescribeDevicePolicyConfiguration(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {
	var output worklink.DescribeDevicePolicyConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDevicePolicyConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.DescribeDevicePolicyConfigurationInput) *DescribeDevicePolicyConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDevicePolicyConfiguration", input)
	return &DescribeDevicePolicyConfigurationFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *worklink.DescribeDomainInput) (*worklink.DescribeDomainOutput, error) {
	var output worklink.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *worklink.DescribeDomainInput) *DescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeDomain", input)
	return &DescribeDomainFuture{Future: future}
}

func (a *stub) DescribeFleetMetadata(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) (*worklink.DescribeFleetMetadataOutput, error) {
	var output worklink.DescribeFleetMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeFleetMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetMetadataAsync(ctx workflow.Context, input *worklink.DescribeFleetMetadataInput) *DescribeFleetMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeFleetMetadata", input)
	return &DescribeFleetMetadataFuture{Future: future}
}

func (a *stub) DescribeIdentityProviderConfiguration(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {
	var output worklink.DescribeIdentityProviderConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeIdentityProviderConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.DescribeIdentityProviderConfigurationInput) *DescribeIdentityProviderConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeIdentityProviderConfiguration", input)
	return &DescribeIdentityProviderConfigurationFuture{Future: future}
}

func (a *stub) DescribeWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DescribeWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DescribeWebsiteCertificateAuthorityInput) *DescribeWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DescribeWebsiteCertificateAuthority", input)
	return &DescribeWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *stub) DisassociateDomain(ctx workflow.Context, input *worklink.DisassociateDomainInput) (*worklink.DisassociateDomainOutput, error) {
	var output worklink.DisassociateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDomainAsync(ctx workflow.Context, input *worklink.DisassociateDomainInput) *DisassociateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateDomain", input)
	return &DisassociateDomainFuture{Future: future}
}

func (a *stub) DisassociateWebsiteAuthorizationProvider(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {
	var output worklink.DisassociateWebsiteAuthorizationProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateWebsiteAuthorizationProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWebsiteAuthorizationProviderAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteAuthorizationProviderInput) *DisassociateWebsiteAuthorizationProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateWebsiteAuthorizationProvider", input)
	return &DisassociateWebsiteAuthorizationProviderFuture{Future: future}
}

func (a *stub) DisassociateWebsiteCertificateAuthority(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {
	var output worklink.DisassociateWebsiteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateWebsiteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWebsiteCertificateAuthorityAsync(ctx workflow.Context, input *worklink.DisassociateWebsiteCertificateAuthorityInput) *DisassociateWebsiteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-DisassociateWebsiteCertificateAuthority", input)
	return &DisassociateWebsiteCertificateAuthorityFuture{Future: future}
}

func (a *stub) ListDevices(ctx workflow.Context, input *worklink.ListDevicesInput) (*worklink.ListDevicesOutput, error) {
	var output worklink.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicesAsync(ctx workflow.Context, input *worklink.ListDevicesInput) *ListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListDevices", input)
	return &ListDevicesFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *worklink.ListDomainsInput) (*worklink.ListDomainsOutput, error) {
	var output worklink.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *worklink.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListFleets(ctx workflow.Context, input *worklink.ListFleetsInput) (*worklink.ListFleetsOutput, error) {
	var output worklink.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFleetsAsync(ctx workflow.Context, input *worklink.ListFleetsInput) *ListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListFleets", input)
	return &ListFleetsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *worklink.ListTagsForResourceInput) (*worklink.ListTagsForResourceOutput, error) {
	var output worklink.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *worklink.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebsiteAuthorizationProviders(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {
	var output worklink.ListWebsiteAuthorizationProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListWebsiteAuthorizationProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebsiteAuthorizationProvidersAsync(ctx workflow.Context, input *worklink.ListWebsiteAuthorizationProvidersInput) *ListWebsiteAuthorizationProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListWebsiteAuthorizationProviders", input)
	return &ListWebsiteAuthorizationProvidersFuture{Future: future}
}

func (a *stub) ListWebsiteCertificateAuthorities(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {
	var output worklink.ListWebsiteCertificateAuthoritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-ListWebsiteCertificateAuthorities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebsiteCertificateAuthoritiesAsync(ctx workflow.Context, input *worklink.ListWebsiteCertificateAuthoritiesInput) *ListWebsiteCertificateAuthoritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-ListWebsiteCertificateAuthorities", input)
	return &ListWebsiteCertificateAuthoritiesFuture{Future: future}
}

func (a *stub) RestoreDomainAccess(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) (*worklink.RestoreDomainAccessOutput, error) {
	var output worklink.RestoreDomainAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-RestoreDomainAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDomainAccessAsync(ctx workflow.Context, input *worklink.RestoreDomainAccessInput) *RestoreDomainAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-RestoreDomainAccess", input)
	return &RestoreDomainAccessFuture{Future: future}
}

func (a *stub) RevokeDomainAccess(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) (*worklink.RevokeDomainAccessOutput, error) {
	var output worklink.RevokeDomainAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-RevokeDomainAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeDomainAccessAsync(ctx workflow.Context, input *worklink.RevokeDomainAccessInput) *RevokeDomainAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-RevokeDomainAccess", input)
	return &RevokeDomainAccessFuture{Future: future}
}

func (a *stub) SignOutUser(ctx workflow.Context, input *worklink.SignOutUserInput) (*worklink.SignOutUserOutput, error) {
	var output worklink.SignOutUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-SignOutUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignOutUserAsync(ctx workflow.Context, input *worklink.SignOutUserInput) *SignOutUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-SignOutUser", input)
	return &SignOutUserFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *worklink.TagResourceInput) (*worklink.TagResourceOutput, error) {
	var output worklink.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *worklink.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *worklink.UntagResourceInput) (*worklink.UntagResourceOutput, error) {
	var output worklink.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *worklink.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAuditStreamConfiguration(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) (*worklink.UpdateAuditStreamConfigurationOutput, error) {
	var output worklink.UpdateAuditStreamConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateAuditStreamConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuditStreamConfigurationAsync(ctx workflow.Context, input *worklink.UpdateAuditStreamConfigurationInput) *UpdateAuditStreamConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateAuditStreamConfiguration", input)
	return &UpdateAuditStreamConfigurationFuture{Future: future}
}

func (a *stub) UpdateCompanyNetworkConfiguration(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {
	var output worklink.UpdateCompanyNetworkConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateCompanyNetworkConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCompanyNetworkConfigurationAsync(ctx workflow.Context, input *worklink.UpdateCompanyNetworkConfigurationInput) *UpdateCompanyNetworkConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateCompanyNetworkConfiguration", input)
	return &UpdateCompanyNetworkConfigurationFuture{Future: future}
}

func (a *stub) UpdateDevicePolicyConfiguration(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {
	var output worklink.UpdateDevicePolicyConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateDevicePolicyConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDevicePolicyConfigurationAsync(ctx workflow.Context, input *worklink.UpdateDevicePolicyConfigurationInput) *UpdateDevicePolicyConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateDevicePolicyConfiguration", input)
	return &UpdateDevicePolicyConfigurationFuture{Future: future}
}

func (a *stub) UpdateDomainMetadata(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) (*worklink.UpdateDomainMetadataOutput, error) {
	var output worklink.UpdateDomainMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateDomainMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainMetadataAsync(ctx workflow.Context, input *worklink.UpdateDomainMetadataInput) *UpdateDomainMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateDomainMetadata", input)
	return &UpdateDomainMetadataFuture{Future: future}
}

func (a *stub) UpdateFleetMetadata(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) (*worklink.UpdateFleetMetadataOutput, error) {
	var output worklink.UpdateFleetMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateFleetMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFleetMetadataAsync(ctx workflow.Context, input *worklink.UpdateFleetMetadataInput) *UpdateFleetMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateFleetMetadata", input)
	return &UpdateFleetMetadataFuture{Future: future}
}

func (a *stub) UpdateIdentityProviderConfiguration(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {
	var output worklink.UpdateIdentityProviderConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateIdentityProviderConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIdentityProviderConfigurationAsync(ctx workflow.Context, input *worklink.UpdateIdentityProviderConfigurationInput) *UpdateIdentityProviderConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-worklink-UpdateIdentityProviderConfiguration", input)
	return &UpdateIdentityProviderConfigurationFuture{Future: future}
}
