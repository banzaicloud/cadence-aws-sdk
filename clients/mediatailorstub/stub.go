// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package mediatailorstub

import (
	"github.com/aws/aws-sdk-go/service/mediatailor"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type MediaTailorDeletePlaybackConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorDeletePlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	var output mediatailor.DeletePlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorGetPlaybackConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorGetPlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	var output mediatailor.GetPlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorListPlaybackConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorListPlaybackConfigurationsFuture) Get(ctx workflow.Context) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	var output mediatailor.ListPlaybackConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorListTagsForResourceFuture) Get(ctx workflow.Context) (*mediatailor.ListTagsForResourceOutput, error) {
	var output mediatailor.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorPutPlaybackConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorPutPlaybackConfigurationFuture) Get(ctx workflow.Context) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	var output mediatailor.PutPlaybackConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorTagResourceFuture) Get(ctx workflow.Context) (*mediatailor.TagResourceOutput, error) {
	var output mediatailor.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MediaTailorUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MediaTailorUntagResourceFuture) Get(ctx workflow.Context) (*mediatailor.UntagResourceOutput, error) {
	var output mediatailor.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlaybackConfiguration(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	var output mediatailor.DeletePlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-DeletePlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.DeletePlaybackConfigurationInput) *MediaTailorDeletePlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-DeletePlaybackConfiguration", input)
	return &MediaTailorDeletePlaybackConfigurationFuture{Future: future}
}

func (a *stub) GetPlaybackConfiguration(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	var output mediatailor.GetPlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-GetPlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.GetPlaybackConfigurationInput) *MediaTailorGetPlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-GetPlaybackConfiguration", input)
	return &MediaTailorGetPlaybackConfigurationFuture{Future: future}
}

func (a *stub) ListPlaybackConfigurations(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	var output mediatailor.ListPlaybackConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-ListPlaybackConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlaybackConfigurationsAsync(ctx workflow.Context, input *mediatailor.ListPlaybackConfigurationsInput) *MediaTailorListPlaybackConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-ListPlaybackConfigurations", input)
	return &MediaTailorListPlaybackConfigurationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) (*mediatailor.ListTagsForResourceOutput, error) {
	var output mediatailor.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mediatailor.ListTagsForResourceInput) *MediaTailorListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-ListTagsForResource", input)
	return &MediaTailorListTagsForResourceFuture{Future: future}
}

func (a *stub) PutPlaybackConfiguration(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	var output mediatailor.PutPlaybackConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-PutPlaybackConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPlaybackConfigurationAsync(ctx workflow.Context, input *mediatailor.PutPlaybackConfigurationInput) *MediaTailorPutPlaybackConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-PutPlaybackConfiguration", input)
	return &MediaTailorPutPlaybackConfigurationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mediatailor.TagResourceInput) (*mediatailor.TagResourceOutput, error) {
	var output mediatailor.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mediatailor.TagResourceInput) *MediaTailorTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-TagResource", input)
	return &MediaTailorTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mediatailor.UntagResourceInput) (*mediatailor.UntagResourceOutput, error) {
	var output mediatailor.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediatailor-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mediatailor.UntagResourceInput) *MediaTailorUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediatailor-UntagResource", input)
	return &MediaTailorUntagResourceFuture{Future: future}
}
