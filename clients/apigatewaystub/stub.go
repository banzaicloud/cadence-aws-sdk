// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package apigatewaystub

import (
	"github.com/aws/aws-sdk-go/service/apigateway"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApiKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeploymentFuture) Get(ctx workflow.Context) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIntegrationFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMethodFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteModelFuture) Get(ctx workflow.Context) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceFuture) Get(ctx workflow.Context) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRestApiFuture) Get(ctx workflow.Context) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStageFuture) Get(ctx workflow.Context) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FlushStageAuthorizersCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FlushStageAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FlushStageCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FlushStageCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApiKeysFuture) Get(ctx workflow.Context) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAuthorizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAuthorizersFuture) Get(ctx workflow.Context) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBasePathMappingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBasePathMappingsFuture) Get(ctx workflow.Context) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetClientCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClientCertificatesFuture) Get(ctx workflow.Context) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentsFuture) Get(ctx workflow.Context) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentationVersionsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainNamesFuture) Get(ctx workflow.Context) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetExportFuture) Get(ctx workflow.Context) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGatewayResponsesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGatewayResponsesFuture) Get(ctx workflow.Context) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetModelTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetModelTemplateFuture) Get(ctx workflow.Context) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetModelsFuture) Get(ctx workflow.Context) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRequestValidatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRequestValidatorsFuture) Get(ctx workflow.Context) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcesFuture) Get(ctx workflow.Context) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRestApisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRestApisFuture) Get(ctx workflow.Context) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSdkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSdkFuture) Get(ctx workflow.Context) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSdkTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSdkTypeFuture) Get(ctx workflow.Context) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSdkTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSdkTypesFuture) Get(ctx workflow.Context) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStagesFuture) Get(ctx workflow.Context) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTagsFuture) Get(ctx workflow.Context) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsagePlanKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsagePlanKeysFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsagePlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsagePlansFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVpcLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVpcLinksFuture) Get(ctx workflow.Context) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportApiKeysFuture) Get(ctx workflow.Context) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestInvokeAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestInvokeMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestInvokeMethodFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *CreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateApiKey", input)
	return &CreateApiKeyFuture{Future: future}
}

func (a *stub) CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *CreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateAuthorizer", input)
	return &CreateAuthorizerFuture{Future: future}
}

func (a *stub) CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *CreateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateBasePathMapping", input)
	return &CreateBasePathMappingFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDeployment", input)
	return &CreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *CreateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationPart", input)
	return &CreateDocumentationPartFuture{Future: future}
}

func (a *stub) CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *CreateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationVersion", input)
	return &CreateDocumentationVersionFuture{Future: future}
}

func (a *stub) CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *CreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDomainName", input)
	return &CreateDomainNameFuture{Future: future}
}

func (a *stub) CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *CreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateModel", input)
	return &CreateModelFuture{Future: future}
}

func (a *stub) CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *CreateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRequestValidator", input)
	return &CreateRequestValidatorFuture{Future: future}
}

func (a *stub) CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *CreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateResource", input)
	return &CreateResourceFuture{Future: future}
}

func (a *stub) CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *CreateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRestApi", input)
	return &CreateRestApiFuture{Future: future}
}

func (a *stub) CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *CreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateStage", input)
	return &CreateStageFuture{Future: future}
}

func (a *stub) CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *CreateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlan", input)
	return &CreateUsagePlanFuture{Future: future}
}

func (a *stub) CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *CreateUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlanKey", input)
	return &CreateUsagePlanKeyFuture{Future: future}
}

func (a *stub) CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *CreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateVpcLink", input)
	return &CreateVpcLinkFuture{Future: future}
}

func (a *stub) DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *DeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteApiKey", input)
	return &DeleteApiKeyFuture{Future: future}
}

func (a *stub) DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *DeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteAuthorizer", input)
	return &DeleteAuthorizerFuture{Future: future}
}

func (a *stub) DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *DeleteBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteBasePathMapping", input)
	return &DeleteBasePathMappingFuture{Future: future}
}

func (a *stub) DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *DeleteClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteClientCertificate", input)
	return &DeleteClientCertificateFuture{Future: future}
}

func (a *stub) DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *DeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDeployment", input)
	return &DeleteDeploymentFuture{Future: future}
}

func (a *stub) DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *DeleteDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationPart", input)
	return &DeleteDocumentationPartFuture{Future: future}
}

func (a *stub) DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *DeleteDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationVersion", input)
	return &DeleteDocumentationVersionFuture{Future: future}
}

func (a *stub) DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *DeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDomainName", input)
	return &DeleteDomainNameFuture{Future: future}
}

func (a *stub) DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *DeleteGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteGatewayResponse", input)
	return &DeleteGatewayResponseFuture{Future: future}
}

func (a *stub) DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *DeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegration", input)
	return &DeleteIntegrationFuture{Future: future}
}

func (a *stub) DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *DeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegrationResponse", input)
	return &DeleteIntegrationResponseFuture{Future: future}
}

func (a *stub) DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *DeleteMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethod", input)
	return &DeleteMethodFuture{Future: future}
}

func (a *stub) DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *DeleteMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethodResponse", input)
	return &DeleteMethodResponseFuture{Future: future}
}

func (a *stub) DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *DeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteModel", input)
	return &DeleteModelFuture{Future: future}
}

func (a *stub) DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *DeleteRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRequestValidator", input)
	return &DeleteRequestValidatorFuture{Future: future}
}

func (a *stub) DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *DeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteResource", input)
	return &DeleteResourceFuture{Future: future}
}

func (a *stub) DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *DeleteRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRestApi", input)
	return &DeleteRestApiFuture{Future: future}
}

func (a *stub) DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *DeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteStage", input)
	return &DeleteStageFuture{Future: future}
}

func (a *stub) DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *DeleteUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlan", input)
	return &DeleteUsagePlanFuture{Future: future}
}

func (a *stub) DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *DeleteUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlanKey", input)
	return &DeleteUsagePlanKeyFuture{Future: future}
}

func (a *stub) DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *DeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteVpcLink", input)
	return &DeleteVpcLinkFuture{Future: future}
}

func (a *stub) FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *FlushStageAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageAuthorizersCache", input)
	return &FlushStageAuthorizersCacheFuture{Future: future}
}

func (a *stub) FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *FlushStageCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageCache", input)
	return &FlushStageCacheFuture{Future: future}
}

func (a *stub) GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GenerateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *GenerateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GenerateClientCertificate", input)
	return &GenerateClientCertificateFuture{Future: future}
}

func (a *stub) GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *GetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAccount", input)
	return &GetAccountFuture{Future: future}
}

func (a *stub) GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *GetApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKey", input)
	return &GetApiKeyFuture{Future: future}
}

func (a *stub) GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *GetApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKeys", input)
	return &GetApiKeysFuture{Future: future}
}

func (a *stub) GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *GetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizer", input)
	return &GetAuthorizerFuture{Future: future}
}

func (a *stub) GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *GetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizers", input)
	return &GetAuthorizersFuture{Future: future}
}

func (a *stub) GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *GetBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMapping", input)
	return &GetBasePathMappingFuture{Future: future}
}

func (a *stub) GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *GetBasePathMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMappings", input)
	return &GetBasePathMappingsFuture{Future: future}
}

func (a *stub) GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *GetClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificate", input)
	return &GetClientCertificateFuture{Future: future}
}

func (a *stub) GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *GetClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificates", input)
	return &GetClientCertificatesFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *GetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployment", input)
	return &GetDeploymentFuture{Future: future}
}

func (a *stub) GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *GetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployments", input)
	return &GetDeploymentsFuture{Future: future}
}

func (a *stub) GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *GetDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationPart", input)
	return &GetDocumentationPartFuture{Future: future}
}

func (a *stub) GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *GetDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationParts", input)
	return &GetDocumentationPartsFuture{Future: future}
}

func (a *stub) GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *GetDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersion", input)
	return &GetDocumentationVersionFuture{Future: future}
}

func (a *stub) GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *GetDocumentationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersions", input)
	return &GetDocumentationVersionsFuture{Future: future}
}

func (a *stub) GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *GetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainName", input)
	return &GetDomainNameFuture{Future: future}
}

func (a *stub) GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *GetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainNames", input)
	return &GetDomainNamesFuture{Future: future}
}

func (a *stub) GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *GetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetExport", input)
	return &GetExportFuture{Future: future}
}

func (a *stub) GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *GetGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponse", input)
	return &GetGatewayResponseFuture{Future: future}
}

func (a *stub) GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *GetGatewayResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponses", input)
	return &GetGatewayResponsesFuture{Future: future}
}

func (a *stub) GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *GetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegration", input)
	return &GetIntegrationFuture{Future: future}
}

func (a *stub) GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *GetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegrationResponse", input)
	return &GetIntegrationResponseFuture{Future: future}
}

func (a *stub) GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *GetMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethod", input)
	return &GetMethodFuture{Future: future}
}

func (a *stub) GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *GetMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethodResponse", input)
	return &GetMethodResponseFuture{Future: future}
}

func (a *stub) GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *GetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModel", input)
	return &GetModelFuture{Future: future}
}

func (a *stub) GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *GetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModelTemplate", input)
	return &GetModelTemplateFuture{Future: future}
}

func (a *stub) GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *GetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModels", input)
	return &GetModelsFuture{Future: future}
}

func (a *stub) GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *GetRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidator", input)
	return &GetRequestValidatorFuture{Future: future}
}

func (a *stub) GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *GetRequestValidatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidators", input)
	return &GetRequestValidatorsFuture{Future: future}
}

func (a *stub) GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *GetResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResource", input)
	return &GetResourceFuture{Future: future}
}

func (a *stub) GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *GetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResources", input)
	return &GetResourcesFuture{Future: future}
}

func (a *stub) GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *GetRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApi", input)
	return &GetRestApiFuture{Future: future}
}

func (a *stub) GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *GetRestApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApis", input)
	return &GetRestApisFuture{Future: future}
}

func (a *stub) GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *GetSdkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdk", input)
	return &GetSdkFuture{Future: future}
}

func (a *stub) GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *GetSdkTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkType", input)
	return &GetSdkTypeFuture{Future: future}
}

func (a *stub) GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *GetSdkTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkTypes", input)
	return &GetSdkTypesFuture{Future: future}
}

func (a *stub) GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *GetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStage", input)
	return &GetStageFuture{Future: future}
}

func (a *stub) GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *GetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStages", input)
	return &GetStagesFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *GetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetTags", input)
	return &GetTagsFuture{Future: future}
}

func (a *stub) GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *GetUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsage", input)
	return &GetUsageFuture{Future: future}
}

func (a *stub) GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *GetUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlan", input)
	return &GetUsagePlanFuture{Future: future}
}

func (a *stub) GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *GetUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKey", input)
	return &GetUsagePlanKeyFuture{Future: future}
}

func (a *stub) GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *GetUsagePlanKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKeys", input)
	return &GetUsagePlanKeysFuture{Future: future}
}

func (a *stub) GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *GetUsagePlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlans", input)
	return &GetUsagePlansFuture{Future: future}
}

func (a *stub) GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *GetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLink", input)
	return &GetVpcLinkFuture{Future: future}
}

func (a *stub) GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *GetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLinks", input)
	return &GetVpcLinksFuture{Future: future}
}

func (a *stub) ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *ImportApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportApiKeys", input)
	return &ImportApiKeysFuture{Future: future}
}

func (a *stub) ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *ImportDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportDocumentationParts", input)
	return &ImportDocumentationPartsFuture{Future: future}
}

func (a *stub) ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *ImportRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportRestApi", input)
	return &ImportRestApiFuture{Future: future}
}

func (a *stub) PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *PutGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutGatewayResponse", input)
	return &PutGatewayResponseFuture{Future: future}
}

func (a *stub) PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *PutIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegration", input)
	return &PutIntegrationFuture{Future: future}
}

func (a *stub) PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *PutIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegrationResponse", input)
	return &PutIntegrationResponseFuture{Future: future}
}

func (a *stub) PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *PutMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethod", input)
	return &PutMethodFuture{Future: future}
}

func (a *stub) PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *PutMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethodResponse", input)
	return &PutMethodResponseFuture{Future: future}
}

func (a *stub) PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *PutRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutRestApi", input)
	return &PutRestApiFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *TestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeAuthorizer", input)
	return &TestInvokeAuthorizerFuture{Future: future}
}

func (a *stub) TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *TestInvokeMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeMethod", input)
	return &TestInvokeMethodFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *UpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAccount", input)
	return &UpdateAccountFuture{Future: future}
}

func (a *stub) UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *UpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateApiKey", input)
	return &UpdateApiKeyFuture{Future: future}
}

func (a *stub) UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *UpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAuthorizer", input)
	return &UpdateAuthorizerFuture{Future: future}
}

func (a *stub) UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *UpdateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateBasePathMapping", input)
	return &UpdateBasePathMappingFuture{Future: future}
}

func (a *stub) UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *UpdateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateClientCertificate", input)
	return &UpdateClientCertificateFuture{Future: future}
}

func (a *stub) UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *UpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDeployment", input)
	return &UpdateDeploymentFuture{Future: future}
}

func (a *stub) UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *UpdateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationPart", input)
	return &UpdateDocumentationPartFuture{Future: future}
}

func (a *stub) UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *UpdateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationVersion", input)
	return &UpdateDocumentationVersionFuture{Future: future}
}

func (a *stub) UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *UpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDomainName", input)
	return &UpdateDomainNameFuture{Future: future}
}

func (a *stub) UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *UpdateGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateGatewayResponse", input)
	return &UpdateGatewayResponseFuture{Future: future}
}

func (a *stub) UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *UpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegration", input)
	return &UpdateIntegrationFuture{Future: future}
}

func (a *stub) UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *UpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegrationResponse", input)
	return &UpdateIntegrationResponseFuture{Future: future}
}

func (a *stub) UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *UpdateMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethod", input)
	return &UpdateMethodFuture{Future: future}
}

func (a *stub) UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *UpdateMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethodResponse", input)
	return &UpdateMethodResponseFuture{Future: future}
}

func (a *stub) UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *UpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateModel", input)
	return &UpdateModelFuture{Future: future}
}

func (a *stub) UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *UpdateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRequestValidator", input)
	return &UpdateRequestValidatorFuture{Future: future}
}

func (a *stub) UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *UpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateResource", input)
	return &UpdateResourceFuture{Future: future}
}

func (a *stub) UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *UpdateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRestApi", input)
	return &UpdateRestApiFuture{Future: future}
}

func (a *stub) UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *UpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateStage", input)
	return &UpdateStageFuture{Future: future}
}

func (a *stub) UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *UpdateUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsage", input)
	return &UpdateUsageFuture{Future: future}
}

func (a *stub) UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *UpdateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsagePlan", input)
	return &UpdateUsagePlanFuture{Future: future}
}

func (a *stub) UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *UpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateVpcLink", input)
	return &UpdateVpcLinkFuture{Future: future}
}
