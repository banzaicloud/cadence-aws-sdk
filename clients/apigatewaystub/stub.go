// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package apigatewaystub

import (
	"github.com/aws/aws-sdk-go/service/apigateway"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type APIGatewayCreateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayCreateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayCreateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteApiKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDeploymentFuture) Get(ctx workflow.Context) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteIntegrationFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteMethodFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteModelFuture) Get(ctx workflow.Context) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteResourceFuture) Get(ctx workflow.Context) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteRestApiFuture) Get(ctx workflow.Context) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteStageFuture) Get(ctx workflow.Context) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayDeleteVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayDeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayFlushStageAuthorizersCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayFlushStageAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayFlushStageCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayFlushStageCacheFuture) Get(ctx workflow.Context) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGenerateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGenerateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetApiKeysFuture) Get(ctx workflow.Context) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetAuthorizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetAuthorizersFuture) Get(ctx workflow.Context) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetBasePathMappingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetBasePathMappingsFuture) Get(ctx workflow.Context) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetClientCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetClientCertificatesFuture) Get(ctx workflow.Context) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDeploymentsFuture) Get(ctx workflow.Context) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDocumentationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDocumentationVersionsFuture) Get(ctx workflow.Context) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetDomainNamesFuture) Get(ctx workflow.Context) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetExportFuture) Get(ctx workflow.Context) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetGatewayResponsesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetGatewayResponsesFuture) Get(ctx workflow.Context) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelTemplateFuture) Get(ctx workflow.Context) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetModelsFuture) Get(ctx workflow.Context) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRequestValidatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRequestValidatorsFuture) Get(ctx workflow.Context) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetResourcesFuture) Get(ctx workflow.Context) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetRestApisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetRestApisFuture) Get(ctx workflow.Context) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkFuture) Get(ctx workflow.Context) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkTypeFuture) Get(ctx workflow.Context) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetSdkTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetSdkTypesFuture) Get(ctx workflow.Context) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetStagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetStagesFuture) Get(ctx workflow.Context) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetTagsFuture) Get(ctx workflow.Context) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanKeyFuture) Get(ctx workflow.Context) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlanKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlanKeysFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetUsagePlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetUsagePlansFuture) Get(ctx workflow.Context) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayGetVpcLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayGetVpcLinksFuture) Get(ctx workflow.Context) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportApiKeysFuture) Get(ctx workflow.Context) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportDocumentationPartsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportDocumentationPartsFuture) Get(ctx workflow.Context) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayImportRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayImportRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayPutRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayPutRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTagResourceFuture) Get(ctx workflow.Context) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTestInvokeAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayTestInvokeMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayTestInvokeMethodFuture) Get(ctx workflow.Context) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUntagResourceFuture) Get(ctx workflow.Context) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateAccountFuture) Get(ctx workflow.Context) (*apigateway.Account, error) {
	var output apigateway.Account
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateApiKeyFuture) Get(ctx workflow.Context) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateBasePathMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateBasePathMappingFuture) Get(ctx workflow.Context) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateClientCertificateFuture) Get(ctx workflow.Context) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDeploymentFuture) Get(ctx workflow.Context) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDocumentationPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDocumentationPartFuture) Get(ctx workflow.Context) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDocumentationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDocumentationVersionFuture) Get(ctx workflow.Context) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateDomainNameFuture) Get(ctx workflow.Context) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateGatewayResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateGatewayResponseFuture) Get(ctx workflow.Context) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateIntegrationFuture) Get(ctx workflow.Context) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateMethodFuture) Get(ctx workflow.Context) (*apigateway.Method, error) {
	var output apigateway.Method
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateMethodResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateMethodResponseFuture) Get(ctx workflow.Context) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateModelFuture) Get(ctx workflow.Context) (*apigateway.Model, error) {
	var output apigateway.Model
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateRequestValidatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateRequestValidatorFuture) Get(ctx workflow.Context) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateResourceFuture) Get(ctx workflow.Context) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateRestApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateRestApiFuture) Get(ctx workflow.Context) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateStageFuture) Get(ctx workflow.Context) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateUsageFuture) Get(ctx workflow.Context) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateUsagePlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateUsagePlanFuture) Get(ctx workflow.Context) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type APIGatewayUpdateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *APIGatewayUpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiKey(ctx workflow.Context, input *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiKeyAsync(ctx workflow.Context, input *apigateway.CreateApiKeyInput) *APIGatewayCreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateApiKey", input)
	return &APIGatewayCreateApiKeyFuture{Future: future}
}

func (a *stub) CreateAuthorizer(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAuthorizerAsync(ctx workflow.Context, input *apigateway.CreateAuthorizerInput) *APIGatewayCreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateAuthorizer", input)
	return &APIGatewayCreateAuthorizerFuture{Future: future}
}

func (a *stub) CreateBasePathMapping(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBasePathMappingAsync(ctx workflow.Context, input *apigateway.CreateBasePathMappingInput) *APIGatewayCreateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateBasePathMapping", input)
	return &APIGatewayCreateBasePathMappingFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *apigateway.CreateDeploymentInput) *APIGatewayCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDeployment", input)
	return &APIGatewayCreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDocumentationPart(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentationPartAsync(ctx workflow.Context, input *apigateway.CreateDocumentationPartInput) *APIGatewayCreateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationPart", input)
	return &APIGatewayCreateDocumentationPartFuture{Future: future}
}

func (a *stub) CreateDocumentationVersion(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.CreateDocumentationVersionInput) *APIGatewayCreateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDocumentationVersion", input)
	return &APIGatewayCreateDocumentationVersionFuture{Future: future}
}

func (a *stub) CreateDomainName(ctx workflow.Context, input *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainNameAsync(ctx workflow.Context, input *apigateway.CreateDomainNameInput) *APIGatewayCreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateDomainName", input)
	return &APIGatewayCreateDomainNameFuture{Future: future}
}

func (a *stub) CreateModel(ctx workflow.Context, input *apigateway.CreateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelAsync(ctx workflow.Context, input *apigateway.CreateModelInput) *APIGatewayCreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateModel", input)
	return &APIGatewayCreateModelFuture{Future: future}
}

func (a *stub) CreateRequestValidator(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRequestValidatorAsync(ctx workflow.Context, input *apigateway.CreateRequestValidatorInput) *APIGatewayCreateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRequestValidator", input)
	return &APIGatewayCreateRequestValidatorFuture{Future: future}
}

func (a *stub) CreateResource(ctx workflow.Context, input *apigateway.CreateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceAsync(ctx workflow.Context, input *apigateway.CreateResourceInput) *APIGatewayCreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateResource", input)
	return &APIGatewayCreateResourceFuture{Future: future}
}

func (a *stub) CreateRestApi(ctx workflow.Context, input *apigateway.CreateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRestApiAsync(ctx workflow.Context, input *apigateway.CreateRestApiInput) *APIGatewayCreateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateRestApi", input)
	return &APIGatewayCreateRestApiFuture{Future: future}
}

func (a *stub) CreateStage(ctx workflow.Context, input *apigateway.CreateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStageAsync(ctx workflow.Context, input *apigateway.CreateStageInput) *APIGatewayCreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateStage", input)
	return &APIGatewayCreateStageFuture{Future: future}
}

func (a *stub) CreateUsagePlan(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsagePlanAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanInput) *APIGatewayCreateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlan", input)
	return &APIGatewayCreateUsagePlanFuture{Future: future}
}

func (a *stub) CreateUsagePlanKey(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.CreateUsagePlanKeyInput) *APIGatewayCreateUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateUsagePlanKey", input)
	return &APIGatewayCreateUsagePlanKeyFuture{Future: future}
}

func (a *stub) CreateVpcLink(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcLinkAsync(ctx workflow.Context, input *apigateway.CreateVpcLinkInput) *APIGatewayCreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-CreateVpcLink", input)
	return &APIGatewayCreateVpcLinkFuture{Future: future}
}

func (a *stub) DeleteApiKey(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error) {
	var output apigateway.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiKeyAsync(ctx workflow.Context, input *apigateway.DeleteApiKeyInput) *APIGatewayDeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteApiKey", input)
	return &APIGatewayDeleteApiKeyFuture{Future: future}
}

func (a *stub) DeleteAuthorizer(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error) {
	var output apigateway.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigateway.DeleteAuthorizerInput) *APIGatewayDeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteAuthorizer", input)
	return &APIGatewayDeleteAuthorizerFuture{Future: future}
}

func (a *stub) DeleteBasePathMapping(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error) {
	var output apigateway.DeleteBasePathMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBasePathMappingAsync(ctx workflow.Context, input *apigateway.DeleteBasePathMappingInput) *APIGatewayDeleteBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteBasePathMapping", input)
	return &APIGatewayDeleteBasePathMappingFuture{Future: future}
}

func (a *stub) DeleteClientCertificate(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error) {
	var output apigateway.DeleteClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClientCertificateAsync(ctx workflow.Context, input *apigateway.DeleteClientCertificateInput) *APIGatewayDeleteClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteClientCertificate", input)
	return &APIGatewayDeleteClientCertificateFuture{Future: future}
}

func (a *stub) DeleteDeployment(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error) {
	var output apigateway.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentAsync(ctx workflow.Context, input *apigateway.DeleteDeploymentInput) *APIGatewayDeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDeployment", input)
	return &APIGatewayDeleteDeploymentFuture{Future: future}
}

func (a *stub) DeleteDocumentationPart(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error) {
	var output apigateway.DeleteDocumentationPartOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentationPartAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationPartInput) *APIGatewayDeleteDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationPart", input)
	return &APIGatewayDeleteDocumentationPartFuture{Future: future}
}

func (a *stub) DeleteDocumentationVersion(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error) {
	var output apigateway.DeleteDocumentationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentationVersionAsync(ctx workflow.Context, input *apigateway.DeleteDocumentationVersionInput) *APIGatewayDeleteDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDocumentationVersion", input)
	return &APIGatewayDeleteDocumentationVersionFuture{Future: future}
}

func (a *stub) DeleteDomainName(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error) {
	var output apigateway.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainNameAsync(ctx workflow.Context, input *apigateway.DeleteDomainNameInput) *APIGatewayDeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteDomainName", input)
	return &APIGatewayDeleteDomainNameFuture{Future: future}
}

func (a *stub) DeleteGatewayResponse(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error) {
	var output apigateway.DeleteGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayResponseAsync(ctx workflow.Context, input *apigateway.DeleteGatewayResponseInput) *APIGatewayDeleteGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteGatewayResponse", input)
	return &APIGatewayDeleteGatewayResponseFuture{Future: future}
}

func (a *stub) DeleteIntegration(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error) {
	var output apigateway.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationInput) *APIGatewayDeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegration", input)
	return &APIGatewayDeleteIntegrationFuture{Future: future}
}

func (a *stub) DeleteIntegrationResponse(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error) {
	var output apigateway.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigateway.DeleteIntegrationResponseInput) *APIGatewayDeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteIntegrationResponse", input)
	return &APIGatewayDeleteIntegrationResponseFuture{Future: future}
}

func (a *stub) DeleteMethod(ctx workflow.Context, input *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error) {
	var output apigateway.DeleteMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMethodAsync(ctx workflow.Context, input *apigateway.DeleteMethodInput) *APIGatewayDeleteMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethod", input)
	return &APIGatewayDeleteMethodFuture{Future: future}
}

func (a *stub) DeleteMethodResponse(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error) {
	var output apigateway.DeleteMethodResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMethodResponseAsync(ctx workflow.Context, input *apigateway.DeleteMethodResponseInput) *APIGatewayDeleteMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteMethodResponse", input)
	return &APIGatewayDeleteMethodResponseFuture{Future: future}
}

func (a *stub) DeleteModel(ctx workflow.Context, input *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error) {
	var output apigateway.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelAsync(ctx workflow.Context, input *apigateway.DeleteModelInput) *APIGatewayDeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteModel", input)
	return &APIGatewayDeleteModelFuture{Future: future}
}

func (a *stub) DeleteRequestValidator(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error) {
	var output apigateway.DeleteRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRequestValidatorAsync(ctx workflow.Context, input *apigateway.DeleteRequestValidatorInput) *APIGatewayDeleteRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRequestValidator", input)
	return &APIGatewayDeleteRequestValidatorFuture{Future: future}
}

func (a *stub) DeleteResource(ctx workflow.Context, input *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error) {
	var output apigateway.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceAsync(ctx workflow.Context, input *apigateway.DeleteResourceInput) *APIGatewayDeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteResource", input)
	return &APIGatewayDeleteResourceFuture{Future: future}
}

func (a *stub) DeleteRestApi(ctx workflow.Context, input *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error) {
	var output apigateway.DeleteRestApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRestApiAsync(ctx workflow.Context, input *apigateway.DeleteRestApiInput) *APIGatewayDeleteRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteRestApi", input)
	return &APIGatewayDeleteRestApiFuture{Future: future}
}

func (a *stub) DeleteStage(ctx workflow.Context, input *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error) {
	var output apigateway.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStageAsync(ctx workflow.Context, input *apigateway.DeleteStageInput) *APIGatewayDeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteStage", input)
	return &APIGatewayDeleteStageFuture{Future: future}
}

func (a *stub) DeleteUsagePlan(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error) {
	var output apigateway.DeleteUsagePlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsagePlanAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanInput) *APIGatewayDeleteUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlan", input)
	return &APIGatewayDeleteUsagePlanFuture{Future: future}
}

func (a *stub) DeleteUsagePlanKey(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	var output apigateway.DeleteUsagePlanKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.DeleteUsagePlanKeyInput) *APIGatewayDeleteUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteUsagePlanKey", input)
	return &APIGatewayDeleteUsagePlanKeyFuture{Future: future}
}

func (a *stub) DeleteVpcLink(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) (*apigateway.DeleteVpcLinkOutput, error) {
	var output apigateway.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigateway.DeleteVpcLinkInput) *APIGatewayDeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-DeleteVpcLink", input)
	return &APIGatewayDeleteVpcLinkFuture{Future: future}
}

func (a *stub) FlushStageAuthorizersCache(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	var output apigateway.FlushStageAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FlushStageAuthorizersCacheAsync(ctx workflow.Context, input *apigateway.FlushStageAuthorizersCacheInput) *APIGatewayFlushStageAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageAuthorizersCache", input)
	return &APIGatewayFlushStageAuthorizersCacheFuture{Future: future}
}

func (a *stub) FlushStageCache(ctx workflow.Context, input *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error) {
	var output apigateway.FlushStageCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FlushStageCacheAsync(ctx workflow.Context, input *apigateway.FlushStageCacheInput) *APIGatewayFlushStageCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-FlushStageCache", input)
	return &APIGatewayFlushStageCacheFuture{Future: future}
}

func (a *stub) GenerateClientCertificate(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GenerateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateClientCertificateAsync(ctx workflow.Context, input *apigateway.GenerateClientCertificateInput) *APIGatewayGenerateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GenerateClientCertificate", input)
	return &APIGatewayGenerateClientCertificateFuture{Future: future}
}

func (a *stub) GetAccount(ctx workflow.Context, input *apigateway.GetAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountAsync(ctx workflow.Context, input *apigateway.GetAccountInput) *APIGatewayGetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAccount", input)
	return &APIGatewayGetAccountFuture{Future: future}
}

func (a *stub) GetApiKey(ctx workflow.Context, input *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiKeyAsync(ctx workflow.Context, input *apigateway.GetApiKeyInput) *APIGatewayGetApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKey", input)
	return &APIGatewayGetApiKeyFuture{Future: future}
}

func (a *stub) GetApiKeys(ctx workflow.Context, input *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error) {
	var output apigateway.GetApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiKeysAsync(ctx workflow.Context, input *apigateway.GetApiKeysInput) *APIGatewayGetApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetApiKeys", input)
	return &APIGatewayGetApiKeysFuture{Future: future}
}

func (a *stub) GetAuthorizer(ctx workflow.Context, input *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizerAsync(ctx workflow.Context, input *apigateway.GetAuthorizerInput) *APIGatewayGetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizer", input)
	return &APIGatewayGetAuthorizerFuture{Future: future}
}

func (a *stub) GetAuthorizers(ctx workflow.Context, input *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error) {
	var output apigateway.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizersAsync(ctx workflow.Context, input *apigateway.GetAuthorizersInput) *APIGatewayGetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetAuthorizers", input)
	return &APIGatewayGetAuthorizersFuture{Future: future}
}

func (a *stub) GetBasePathMapping(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBasePathMappingAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingInput) *APIGatewayGetBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMapping", input)
	return &APIGatewayGetBasePathMappingFuture{Future: future}
}

func (a *stub) GetBasePathMappings(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error) {
	var output apigateway.GetBasePathMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBasePathMappingsAsync(ctx workflow.Context, input *apigateway.GetBasePathMappingsInput) *APIGatewayGetBasePathMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetBasePathMappings", input)
	return &APIGatewayGetBasePathMappingsFuture{Future: future}
}

func (a *stub) GetClientCertificate(ctx workflow.Context, input *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClientCertificateAsync(ctx workflow.Context, input *apigateway.GetClientCertificateInput) *APIGatewayGetClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificate", input)
	return &APIGatewayGetClientCertificateFuture{Future: future}
}

func (a *stub) GetClientCertificates(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error) {
	var output apigateway.GetClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClientCertificatesAsync(ctx workflow.Context, input *apigateway.GetClientCertificatesInput) *APIGatewayGetClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetClientCertificates", input)
	return &APIGatewayGetClientCertificatesFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *apigateway.GetDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *apigateway.GetDeploymentInput) *APIGatewayGetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployment", input)
	return &APIGatewayGetDeploymentFuture{Future: future}
}

func (a *stub) GetDeployments(ctx workflow.Context, input *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error) {
	var output apigateway.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentsAsync(ctx workflow.Context, input *apigateway.GetDeploymentsInput) *APIGatewayGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDeployments", input)
	return &APIGatewayGetDeploymentsFuture{Future: future}
}

func (a *stub) GetDocumentationPart(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationPartAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartInput) *APIGatewayGetDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationPart", input)
	return &APIGatewayGetDocumentationPartFuture{Future: future}
}

func (a *stub) GetDocumentationParts(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error) {
	var output apigateway.GetDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationPartsAsync(ctx workflow.Context, input *apigateway.GetDocumentationPartsInput) *APIGatewayGetDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationParts", input)
	return &APIGatewayGetDocumentationPartsFuture{Future: future}
}

func (a *stub) GetDocumentationVersion(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationVersionAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionInput) *APIGatewayGetDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersion", input)
	return &APIGatewayGetDocumentationVersionFuture{Future: future}
}

func (a *stub) GetDocumentationVersions(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error) {
	var output apigateway.GetDocumentationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentationVersionsAsync(ctx workflow.Context, input *apigateway.GetDocumentationVersionsInput) *APIGatewayGetDocumentationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDocumentationVersions", input)
	return &APIGatewayGetDocumentationVersionsFuture{Future: future}
}

func (a *stub) GetDomainName(ctx workflow.Context, input *apigateway.GetDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNameAsync(ctx workflow.Context, input *apigateway.GetDomainNameInput) *APIGatewayGetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainName", input)
	return &APIGatewayGetDomainNameFuture{Future: future}
}

func (a *stub) GetDomainNames(ctx workflow.Context, input *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error) {
	var output apigateway.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNamesAsync(ctx workflow.Context, input *apigateway.GetDomainNamesInput) *APIGatewayGetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetDomainNames", input)
	return &APIGatewayGetDomainNamesFuture{Future: future}
}

func (a *stub) GetExport(ctx workflow.Context, input *apigateway.GetExportInput) (*apigateway.GetExportOutput, error) {
	var output apigateway.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExportAsync(ctx workflow.Context, input *apigateway.GetExportInput) *APIGatewayGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetExport", input)
	return &APIGatewayGetExportFuture{Future: future}
}

func (a *stub) GetGatewayResponse(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayResponseAsync(ctx workflow.Context, input *apigateway.GetGatewayResponseInput) *APIGatewayGetGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponse", input)
	return &APIGatewayGetGatewayResponseFuture{Future: future}
}

func (a *stub) GetGatewayResponses(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error) {
	var output apigateway.GetGatewayResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGatewayResponsesAsync(ctx workflow.Context, input *apigateway.GetGatewayResponsesInput) *APIGatewayGetGatewayResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetGatewayResponses", input)
	return &APIGatewayGetGatewayResponsesFuture{Future: future}
}

func (a *stub) GetIntegration(ctx workflow.Context, input *apigateway.GetIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationAsync(ctx workflow.Context, input *apigateway.GetIntegrationInput) *APIGatewayGetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegration", input)
	return &APIGatewayGetIntegrationFuture{Future: future}
}

func (a *stub) GetIntegrationResponse(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigateway.GetIntegrationResponseInput) *APIGatewayGetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetIntegrationResponse", input)
	return &APIGatewayGetIntegrationResponseFuture{Future: future}
}

func (a *stub) GetMethod(ctx workflow.Context, input *apigateway.GetMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMethodAsync(ctx workflow.Context, input *apigateway.GetMethodInput) *APIGatewayGetMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethod", input)
	return &APIGatewayGetMethodFuture{Future: future}
}

func (a *stub) GetMethodResponse(ctx workflow.Context, input *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMethodResponseAsync(ctx workflow.Context, input *apigateway.GetMethodResponseInput) *APIGatewayGetMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetMethodResponse", input)
	return &APIGatewayGetMethodResponseFuture{Future: future}
}

func (a *stub) GetModel(ctx workflow.Context, input *apigateway.GetModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelAsync(ctx workflow.Context, input *apigateway.GetModelInput) *APIGatewayGetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModel", input)
	return &APIGatewayGetModelFuture{Future: future}
}

func (a *stub) GetModelTemplate(ctx workflow.Context, input *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error) {
	var output apigateway.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelTemplateAsync(ctx workflow.Context, input *apigateway.GetModelTemplateInput) *APIGatewayGetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModelTemplate", input)
	return &APIGatewayGetModelTemplateFuture{Future: future}
}

func (a *stub) GetModels(ctx workflow.Context, input *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error) {
	var output apigateway.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelsAsync(ctx workflow.Context, input *apigateway.GetModelsInput) *APIGatewayGetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetModels", input)
	return &APIGatewayGetModelsFuture{Future: future}
}

func (a *stub) GetRequestValidator(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRequestValidatorAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorInput) *APIGatewayGetRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidator", input)
	return &APIGatewayGetRequestValidatorFuture{Future: future}
}

func (a *stub) GetRequestValidators(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error) {
	var output apigateway.GetRequestValidatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRequestValidatorsAsync(ctx workflow.Context, input *apigateway.GetRequestValidatorsInput) *APIGatewayGetRequestValidatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRequestValidators", input)
	return &APIGatewayGetRequestValidatorsFuture{Future: future}
}

func (a *stub) GetResource(ctx workflow.Context, input *apigateway.GetResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceAsync(ctx workflow.Context, input *apigateway.GetResourceInput) *APIGatewayGetResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResource", input)
	return &APIGatewayGetResourceFuture{Future: future}
}

func (a *stub) GetResources(ctx workflow.Context, input *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error) {
	var output apigateway.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcesAsync(ctx workflow.Context, input *apigateway.GetResourcesInput) *APIGatewayGetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetResources", input)
	return &APIGatewayGetResourcesFuture{Future: future}
}

func (a *stub) GetRestApi(ctx workflow.Context, input *apigateway.GetRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRestApiAsync(ctx workflow.Context, input *apigateway.GetRestApiInput) *APIGatewayGetRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApi", input)
	return &APIGatewayGetRestApiFuture{Future: future}
}

func (a *stub) GetRestApis(ctx workflow.Context, input *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error) {
	var output apigateway.GetRestApisOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRestApisAsync(ctx workflow.Context, input *apigateway.GetRestApisInput) *APIGatewayGetRestApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetRestApis", input)
	return &APIGatewayGetRestApisFuture{Future: future}
}

func (a *stub) GetSdk(ctx workflow.Context, input *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error) {
	var output apigateway.GetSdkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdk", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkAsync(ctx workflow.Context, input *apigateway.GetSdkInput) *APIGatewayGetSdkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdk", input)
	return &APIGatewayGetSdkFuture{Future: future}
}

func (a *stub) GetSdkType(ctx workflow.Context, input *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error) {
	var output apigateway.SdkType
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkTypeAsync(ctx workflow.Context, input *apigateway.GetSdkTypeInput) *APIGatewayGetSdkTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkType", input)
	return &APIGatewayGetSdkTypeFuture{Future: future}
}

func (a *stub) GetSdkTypes(ctx workflow.Context, input *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error) {
	var output apigateway.GetSdkTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSdkTypesAsync(ctx workflow.Context, input *apigateway.GetSdkTypesInput) *APIGatewayGetSdkTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetSdkTypes", input)
	return &APIGatewayGetSdkTypesFuture{Future: future}
}

func (a *stub) GetStage(ctx workflow.Context, input *apigateway.GetStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStageAsync(ctx workflow.Context, input *apigateway.GetStageInput) *APIGatewayGetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStage", input)
	return &APIGatewayGetStageFuture{Future: future}
}

func (a *stub) GetStages(ctx workflow.Context, input *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error) {
	var output apigateway.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStagesAsync(ctx workflow.Context, input *apigateway.GetStagesInput) *APIGatewayGetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetStages", input)
	return &APIGatewayGetStagesFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *apigateway.GetTagsInput) (*apigateway.GetTagsOutput, error) {
	var output apigateway.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *apigateway.GetTagsInput) *APIGatewayGetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetTags", input)
	return &APIGatewayGetTagsFuture{Future: future}
}

func (a *stub) GetUsage(ctx workflow.Context, input *apigateway.GetUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsageAsync(ctx workflow.Context, input *apigateway.GetUsageInput) *APIGatewayGetUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsage", input)
	return &APIGatewayGetUsageFuture{Future: future}
}

func (a *stub) GetUsagePlan(ctx workflow.Context, input *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanAsync(ctx workflow.Context, input *apigateway.GetUsagePlanInput) *APIGatewayGetUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlan", input)
	return &APIGatewayGetUsagePlanFuture{Future: future}
}

func (a *stub) GetUsagePlanKey(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	var output apigateway.UsagePlanKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanKeyAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeyInput) *APIGatewayGetUsagePlanKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKey", input)
	return &APIGatewayGetUsagePlanKeyFuture{Future: future}
}

func (a *stub) GetUsagePlanKeys(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error) {
	var output apigateway.GetUsagePlanKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlanKeysAsync(ctx workflow.Context, input *apigateway.GetUsagePlanKeysInput) *APIGatewayGetUsagePlanKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlanKeys", input)
	return &APIGatewayGetUsagePlanKeysFuture{Future: future}
}

func (a *stub) GetUsagePlans(ctx workflow.Context, input *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error) {
	var output apigateway.GetUsagePlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsagePlansAsync(ctx workflow.Context, input *apigateway.GetUsagePlansInput) *APIGatewayGetUsagePlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetUsagePlans", input)
	return &APIGatewayGetUsagePlansFuture{Future: future}
}

func (a *stub) GetVpcLink(ctx workflow.Context, input *apigateway.GetVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinkAsync(ctx workflow.Context, input *apigateway.GetVpcLinkInput) *APIGatewayGetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLink", input)
	return &APIGatewayGetVpcLinkFuture{Future: future}
}

func (a *stub) GetVpcLinks(ctx workflow.Context, input *apigateway.GetVpcLinksInput) (*apigateway.GetVpcLinksOutput, error) {
	var output apigateway.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinksAsync(ctx workflow.Context, input *apigateway.GetVpcLinksInput) *APIGatewayGetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-GetVpcLinks", input)
	return &APIGatewayGetVpcLinksFuture{Future: future}
}

func (a *stub) ImportApiKeys(ctx workflow.Context, input *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error) {
	var output apigateway.ImportApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportApiKeysAsync(ctx workflow.Context, input *apigateway.ImportApiKeysInput) *APIGatewayImportApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportApiKeys", input)
	return &APIGatewayImportApiKeysFuture{Future: future}
}

func (a *stub) ImportDocumentationParts(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error) {
	var output apigateway.ImportDocumentationPartsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportDocumentationParts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportDocumentationPartsAsync(ctx workflow.Context, input *apigateway.ImportDocumentationPartsInput) *APIGatewayImportDocumentationPartsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportDocumentationParts", input)
	return &APIGatewayImportDocumentationPartsFuture{Future: future}
}

func (a *stub) ImportRestApi(ctx workflow.Context, input *apigateway.ImportRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportRestApiAsync(ctx workflow.Context, input *apigateway.ImportRestApiInput) *APIGatewayImportRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-ImportRestApi", input)
	return &APIGatewayImportRestApiFuture{Future: future}
}

func (a *stub) PutGatewayResponse(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutGatewayResponseAsync(ctx workflow.Context, input *apigateway.PutGatewayResponseInput) *APIGatewayPutGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutGatewayResponse", input)
	return &APIGatewayPutGatewayResponseFuture{Future: future}
}

func (a *stub) PutIntegration(ctx workflow.Context, input *apigateway.PutIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntegrationAsync(ctx workflow.Context, input *apigateway.PutIntegrationInput) *APIGatewayPutIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegration", input)
	return &APIGatewayPutIntegrationFuture{Future: future}
}

func (a *stub) PutIntegrationResponse(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntegrationResponseAsync(ctx workflow.Context, input *apigateway.PutIntegrationResponseInput) *APIGatewayPutIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutIntegrationResponse", input)
	return &APIGatewayPutIntegrationResponseFuture{Future: future}
}

func (a *stub) PutMethod(ctx workflow.Context, input *apigateway.PutMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMethodAsync(ctx workflow.Context, input *apigateway.PutMethodInput) *APIGatewayPutMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethod", input)
	return &APIGatewayPutMethodFuture{Future: future}
}

func (a *stub) PutMethodResponse(ctx workflow.Context, input *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMethodResponseAsync(ctx workflow.Context, input *apigateway.PutMethodResponseInput) *APIGatewayPutMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutMethodResponse", input)
	return &APIGatewayPutMethodResponseFuture{Future: future}
}

func (a *stub) PutRestApi(ctx workflow.Context, input *apigateway.PutRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-PutRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRestApiAsync(ctx workflow.Context, input *apigateway.PutRestApiInput) *APIGatewayPutRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-PutRestApi", input)
	return &APIGatewayPutRestApiFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *apigateway.TagResourceInput) (*apigateway.TagResourceOutput, error) {
	var output apigateway.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *apigateway.TagResourceInput) *APIGatewayTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TagResource", input)
	return &APIGatewayTagResourceFuture{Future: future}
}

func (a *stub) TestInvokeAuthorizer(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error) {
	var output apigateway.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *apigateway.TestInvokeAuthorizerInput) *APIGatewayTestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeAuthorizer", input)
	return &APIGatewayTestInvokeAuthorizerFuture{Future: future}
}

func (a *stub) TestInvokeMethod(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error) {
	var output apigateway.TestInvokeMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestInvokeMethodAsync(ctx workflow.Context, input *apigateway.TestInvokeMethodInput) *APIGatewayTestInvokeMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-TestInvokeMethod", input)
	return &APIGatewayTestInvokeMethodFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *apigateway.UntagResourceInput) (*apigateway.UntagResourceOutput, error) {
	var output apigateway.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *apigateway.UntagResourceInput) *APIGatewayUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UntagResource", input)
	return &APIGatewayUntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccount(ctx workflow.Context, input *apigateway.UpdateAccountInput) (*apigateway.Account, error) {
	var output apigateway.Account
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountAsync(ctx workflow.Context, input *apigateway.UpdateAccountInput) *APIGatewayUpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAccount", input)
	return &APIGatewayUpdateAccountFuture{Future: future}
}

func (a *stub) UpdateApiKey(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error) {
	var output apigateway.ApiKey
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiKeyAsync(ctx workflow.Context, input *apigateway.UpdateApiKeyInput) *APIGatewayUpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateApiKey", input)
	return &APIGatewayUpdateApiKeyFuture{Future: future}
}

func (a *stub) UpdateAuthorizer(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error) {
	var output apigateway.Authorizer
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigateway.UpdateAuthorizerInput) *APIGatewayUpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateAuthorizer", input)
	return &APIGatewayUpdateAuthorizerFuture{Future: future}
}

func (a *stub) UpdateBasePathMapping(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	var output apigateway.BasePathMapping
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateBasePathMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBasePathMappingAsync(ctx workflow.Context, input *apigateway.UpdateBasePathMappingInput) *APIGatewayUpdateBasePathMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateBasePathMapping", input)
	return &APIGatewayUpdateBasePathMappingFuture{Future: future}
}

func (a *stub) UpdateClientCertificate(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	var output apigateway.ClientCertificate
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClientCertificateAsync(ctx workflow.Context, input *apigateway.UpdateClientCertificateInput) *APIGatewayUpdateClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateClientCertificate", input)
	return &APIGatewayUpdateClientCertificateFuture{Future: future}
}

func (a *stub) UpdateDeployment(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error) {
	var output apigateway.Deployment
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentAsync(ctx workflow.Context, input *apigateway.UpdateDeploymentInput) *APIGatewayUpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDeployment", input)
	return &APIGatewayUpdateDeploymentFuture{Future: future}
}

func (a *stub) UpdateDocumentationPart(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	var output apigateway.DocumentationPart
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentationPartAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationPartInput) *APIGatewayUpdateDocumentationPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationPart", input)
	return &APIGatewayUpdateDocumentationPartFuture{Future: future}
}

func (a *stub) UpdateDocumentationVersion(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	var output apigateway.DocumentationVersion
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentationVersionAsync(ctx workflow.Context, input *apigateway.UpdateDocumentationVersionInput) *APIGatewayUpdateDocumentationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDocumentationVersion", input)
	return &APIGatewayUpdateDocumentationVersionFuture{Future: future}
}

func (a *stub) UpdateDomainName(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error) {
	var output apigateway.DomainName
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainNameAsync(ctx workflow.Context, input *apigateway.UpdateDomainNameInput) *APIGatewayUpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateDomainName", input)
	return &APIGatewayUpdateDomainNameFuture{Future: future}
}

func (a *stub) UpdateGatewayResponse(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	var output apigateway.UpdateGatewayResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateGatewayResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayResponseAsync(ctx workflow.Context, input *apigateway.UpdateGatewayResponseInput) *APIGatewayUpdateGatewayResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateGatewayResponse", input)
	return &APIGatewayUpdateGatewayResponseFuture{Future: future}
}

func (a *stub) UpdateIntegration(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error) {
	var output apigateway.Integration
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationInput) *APIGatewayUpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegration", input)
	return &APIGatewayUpdateIntegrationFuture{Future: future}
}

func (a *stub) UpdateIntegrationResponse(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	var output apigateway.IntegrationResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigateway.UpdateIntegrationResponseInput) *APIGatewayUpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateIntegrationResponse", input)
	return &APIGatewayUpdateIntegrationResponseFuture{Future: future}
}

func (a *stub) UpdateMethod(ctx workflow.Context, input *apigateway.UpdateMethodInput) (*apigateway.Method, error) {
	var output apigateway.Method
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMethodAsync(ctx workflow.Context, input *apigateway.UpdateMethodInput) *APIGatewayUpdateMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethod", input)
	return &APIGatewayUpdateMethodFuture{Future: future}
}

func (a *stub) UpdateMethodResponse(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error) {
	var output apigateway.MethodResponse
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethodResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMethodResponseAsync(ctx workflow.Context, input *apigateway.UpdateMethodResponseInput) *APIGatewayUpdateMethodResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateMethodResponse", input)
	return &APIGatewayUpdateMethodResponseFuture{Future: future}
}

func (a *stub) UpdateModel(ctx workflow.Context, input *apigateway.UpdateModelInput) (*apigateway.Model, error) {
	var output apigateway.Model
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateModelAsync(ctx workflow.Context, input *apigateway.UpdateModelInput) *APIGatewayUpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateModel", input)
	return &APIGatewayUpdateModelFuture{Future: future}
}

func (a *stub) UpdateRequestValidator(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	var output apigateway.UpdateRequestValidatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRequestValidator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRequestValidatorAsync(ctx workflow.Context, input *apigateway.UpdateRequestValidatorInput) *APIGatewayUpdateRequestValidatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRequestValidator", input)
	return &APIGatewayUpdateRequestValidatorFuture{Future: future}
}

func (a *stub) UpdateResource(ctx workflow.Context, input *apigateway.UpdateResourceInput) (*apigateway.Resource, error) {
	var output apigateway.Resource
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceAsync(ctx workflow.Context, input *apigateway.UpdateResourceInput) *APIGatewayUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateResource", input)
	return &APIGatewayUpdateResourceFuture{Future: future}
}

func (a *stub) UpdateRestApi(ctx workflow.Context, input *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error) {
	var output apigateway.RestApi
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRestApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRestApiAsync(ctx workflow.Context, input *apigateway.UpdateRestApiInput) *APIGatewayUpdateRestApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateRestApi", input)
	return &APIGatewayUpdateRestApiFuture{Future: future}
}

func (a *stub) UpdateStage(ctx workflow.Context, input *apigateway.UpdateStageInput) (*apigateway.Stage, error) {
	var output apigateway.Stage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStageAsync(ctx workflow.Context, input *apigateway.UpdateStageInput) *APIGatewayUpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateStage", input)
	return &APIGatewayUpdateStageFuture{Future: future}
}

func (a *stub) UpdateUsage(ctx workflow.Context, input *apigateway.UpdateUsageInput) (*apigateway.Usage, error) {
	var output apigateway.Usage
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUsageAsync(ctx workflow.Context, input *apigateway.UpdateUsageInput) *APIGatewayUpdateUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsage", input)
	return &APIGatewayUpdateUsageFuture{Future: future}
}

func (a *stub) UpdateUsagePlan(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error) {
	var output apigateway.UsagePlan
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsagePlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUsagePlanAsync(ctx workflow.Context, input *apigateway.UpdateUsagePlanInput) *APIGatewayUpdateUsagePlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateUsagePlan", input)
	return &APIGatewayUpdateUsagePlanFuture{Future: future}
}

func (a *stub) UpdateVpcLink(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) (*apigateway.UpdateVpcLinkOutput, error) {
	var output apigateway.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigateway.UpdateVpcLinkInput) *APIGatewayUpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigateway-UpdateVpcLink", input)
	return &APIGatewayUpdateVpcLinkFuture{Future: future}
}
