// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sqsstub

import (
	"github.com/aws/aws-sdk-go/service/sqs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddPermissionFuture) Get(ctx workflow.Context) (*sqs.AddPermissionOutput, error) {
	var output sqs.AddPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChangeMessageVisibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ChangeMessageVisibilityFuture) Get(ctx workflow.Context) (*sqs.ChangeMessageVisibilityOutput, error) {
	var output sqs.ChangeMessageVisibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChangeMessageVisibilityBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ChangeMessageVisibilityBatchFuture) Get(ctx workflow.Context) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	var output sqs.ChangeMessageVisibilityBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateQueueFuture) Get(ctx workflow.Context) (*sqs.CreateQueueOutput, error) {
	var output sqs.CreateQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMessageFuture) Get(ctx workflow.Context) (*sqs.DeleteMessageOutput, error) {
	var output sqs.DeleteMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMessageBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMessageBatchFuture) Get(ctx workflow.Context) (*sqs.DeleteMessageBatchOutput, error) {
	var output sqs.DeleteMessageBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteQueueFuture) Get(ctx workflow.Context) (*sqs.DeleteQueueOutput, error) {
	var output sqs.DeleteQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueueAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueueAttributesFuture) Get(ctx workflow.Context) (*sqs.GetQueueAttributesOutput, error) {
	var output sqs.GetQueueAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueueUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueueUrlFuture) Get(ctx workflow.Context) (*sqs.GetQueueUrlOutput, error) {
	var output sqs.GetQueueUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeadLetterSourceQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeadLetterSourceQueuesFuture) Get(ctx workflow.Context) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	var output sqs.ListDeadLetterSourceQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListQueueTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListQueueTagsFuture) Get(ctx workflow.Context) (*sqs.ListQueueTagsOutput, error) {
	var output sqs.ListQueueTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListQueuesFuture) Get(ctx workflow.Context) (*sqs.ListQueuesOutput, error) {
	var output sqs.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurgeQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurgeQueueFuture) Get(ctx workflow.Context) (*sqs.PurgeQueueOutput, error) {
	var output sqs.PurgeQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReceiveMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReceiveMessageFuture) Get(ctx workflow.Context) (*sqs.ReceiveMessageOutput, error) {
	var output sqs.ReceiveMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemovePermissionFuture) Get(ctx workflow.Context) (*sqs.RemovePermissionOutput, error) {
	var output sqs.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendMessageFuture) Get(ctx workflow.Context) (*sqs.SendMessageOutput, error) {
	var output sqs.SendMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendMessageBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendMessageBatchFuture) Get(ctx workflow.Context) (*sqs.SendMessageBatchOutput, error) {
	var output sqs.SendMessageBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetQueueAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetQueueAttributesFuture) Get(ctx workflow.Context) (*sqs.SetQueueAttributesOutput, error) {
	var output sqs.SetQueueAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagQueueFuture) Get(ctx workflow.Context) (*sqs.TagQueueOutput, error) {
	var output sqs.TagQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagQueueFuture) Get(ctx workflow.Context) (*sqs.UntagQueueOutput, error) {
	var output sqs.UntagQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddPermission(ctx workflow.Context, input *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error) {
	var output sqs.AddPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-AddPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddPermissionAsync(ctx workflow.Context, input *sqs.AddPermissionInput) *AddPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-AddPermission", input)
	return &AddPermissionFuture{Future: future}
}

func (a *stub) ChangeMessageVisibility(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error) {
	var output sqs.ChangeMessageVisibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ChangeMessageVisibility", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangeMessageVisibilityAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityInput) *ChangeMessageVisibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ChangeMessageVisibility", input)
	return &ChangeMessageVisibilityFuture{Future: future}
}

func (a *stub) ChangeMessageVisibilityBatch(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	var output sqs.ChangeMessageVisibilityBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ChangeMessageVisibilityBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangeMessageVisibilityBatchAsync(ctx workflow.Context, input *sqs.ChangeMessageVisibilityBatchInput) *ChangeMessageVisibilityBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ChangeMessageVisibilityBatch", input)
	return &ChangeMessageVisibilityBatchFuture{Future: future}
}

func (a *stub) CreateQueue(ctx workflow.Context, input *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error) {
	var output sqs.CreateQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-CreateQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateQueueAsync(ctx workflow.Context, input *sqs.CreateQueueInput) *CreateQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-CreateQueue", input)
	return &CreateQueueFuture{Future: future}
}

func (a *stub) DeleteMessage(ctx workflow.Context, input *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	var output sqs.DeleteMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMessageAsync(ctx workflow.Context, input *sqs.DeleteMessageInput) *DeleteMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteMessage", input)
	return &DeleteMessageFuture{Future: future}
}

func (a *stub) DeleteMessageBatch(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error) {
	var output sqs.DeleteMessageBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteMessageBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMessageBatchAsync(ctx workflow.Context, input *sqs.DeleteMessageBatchInput) *DeleteMessageBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteMessageBatch", input)
	return &DeleteMessageBatchFuture{Future: future}
}

func (a *stub) DeleteQueue(ctx workflow.Context, input *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error) {
	var output sqs.DeleteQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteQueueAsync(ctx workflow.Context, input *sqs.DeleteQueueInput) *DeleteQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-DeleteQueue", input)
	return &DeleteQueueFuture{Future: future}
}

func (a *stub) GetQueueAttributes(ctx workflow.Context, input *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error) {
	var output sqs.GetQueueAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-GetQueueAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueueAttributesAsync(ctx workflow.Context, input *sqs.GetQueueAttributesInput) *GetQueueAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-GetQueueAttributes", input)
	return &GetQueueAttributesFuture{Future: future}
}

func (a *stub) GetQueueUrl(ctx workflow.Context, input *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
	var output sqs.GetQueueUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-GetQueueUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueueUrlAsync(ctx workflow.Context, input *sqs.GetQueueUrlInput) *GetQueueUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-GetQueueUrl", input)
	return &GetQueueUrlFuture{Future: future}
}

func (a *stub) ListDeadLetterSourceQueues(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	var output sqs.ListDeadLetterSourceQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ListDeadLetterSourceQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeadLetterSourceQueuesAsync(ctx workflow.Context, input *sqs.ListDeadLetterSourceQueuesInput) *ListDeadLetterSourceQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ListDeadLetterSourceQueues", input)
	return &ListDeadLetterSourceQueuesFuture{Future: future}
}

func (a *stub) ListQueueTags(ctx workflow.Context, input *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error) {
	var output sqs.ListQueueTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ListQueueTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueueTagsAsync(ctx workflow.Context, input *sqs.ListQueueTagsInput) *ListQueueTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ListQueueTags", input)
	return &ListQueueTagsFuture{Future: future}
}

func (a *stub) ListQueues(ctx workflow.Context, input *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error) {
	var output sqs.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueuesAsync(ctx workflow.Context, input *sqs.ListQueuesInput) *ListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ListQueues", input)
	return &ListQueuesFuture{Future: future}
}

func (a *stub) PurgeQueue(ctx workflow.Context, input *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error) {
	var output sqs.PurgeQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-PurgeQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurgeQueueAsync(ctx workflow.Context, input *sqs.PurgeQueueInput) *PurgeQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-PurgeQueue", input)
	return &PurgeQueueFuture{Future: future}
}

func (a *stub) ReceiveMessage(ctx workflow.Context, input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	var output sqs.ReceiveMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-ReceiveMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReceiveMessageAsync(ctx workflow.Context, input *sqs.ReceiveMessageInput) *ReceiveMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-ReceiveMessage", input)
	return &ReceiveMessageFuture{Future: future}
}

func (a *stub) RemovePermission(ctx workflow.Context, input *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error) {
	var output sqs.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemovePermissionAsync(ctx workflow.Context, input *sqs.RemovePermissionInput) *RemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-RemovePermission", input)
	return &RemovePermissionFuture{Future: future}
}

func (a *stub) SendMessage(ctx workflow.Context, input *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	var output sqs.SendMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-SendMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendMessageAsync(ctx workflow.Context, input *sqs.SendMessageInput) *SendMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-SendMessage", input)
	return &SendMessageFuture{Future: future}
}

func (a *stub) SendMessageBatch(ctx workflow.Context, input *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error) {
	var output sqs.SendMessageBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-SendMessageBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendMessageBatchAsync(ctx workflow.Context, input *sqs.SendMessageBatchInput) *SendMessageBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-SendMessageBatch", input)
	return &SendMessageBatchFuture{Future: future}
}

func (a *stub) SetQueueAttributes(ctx workflow.Context, input *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error) {
	var output sqs.SetQueueAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-SetQueueAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetQueueAttributesAsync(ctx workflow.Context, input *sqs.SetQueueAttributesInput) *SetQueueAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-SetQueueAttributes", input)
	return &SetQueueAttributesFuture{Future: future}
}

func (a *stub) TagQueue(ctx workflow.Context, input *sqs.TagQueueInput) (*sqs.TagQueueOutput, error) {
	var output sqs.TagQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-TagQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagQueueAsync(ctx workflow.Context, input *sqs.TagQueueInput) *TagQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-TagQueue", input)
	return &TagQueueFuture{Future: future}
}

func (a *stub) UntagQueue(ctx workflow.Context, input *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error) {
	var output sqs.UntagQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-sqs-UntagQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagQueueAsync(ctx workflow.Context, input *sqs.UntagQueueInput) *UntagQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sqs-UntagQueue", input)
	return &UntagQueueFuture{Future: future}
}
