// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appsyncstub

import (
	"github.com/aws/aws-sdk-go/service/appsync"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApiCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApiCacheFuture) Get(ctx workflow.Context) (*appsync.CreateApiCacheOutput, error) {
	var output appsync.CreateApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApiKeyFuture) Get(ctx workflow.Context) (*appsync.CreateApiKeyOutput, error) {
	var output appsync.CreateApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDataSourceFuture) Get(ctx workflow.Context) (*appsync.CreateDataSourceOutput, error) {
	var output appsync.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFunctionFuture) Get(ctx workflow.Context) (*appsync.CreateFunctionOutput, error) {
	var output appsync.CreateFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGraphqlApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.CreateGraphqlApiOutput, error) {
	var output appsync.CreateGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResolverFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResolverFuture) Get(ctx workflow.Context) (*appsync.CreateResolverOutput, error) {
	var output appsync.CreateResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTypeFuture) Get(ctx workflow.Context) (*appsync.CreateTypeOutput, error) {
	var output appsync.CreateTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApiCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApiCacheFuture) Get(ctx workflow.Context) (*appsync.DeleteApiCacheOutput, error) {
	var output appsync.DeleteApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApiKeyFuture) Get(ctx workflow.Context) (*appsync.DeleteApiKeyOutput, error) {
	var output appsync.DeleteApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDataSourceFuture) Get(ctx workflow.Context) (*appsync.DeleteDataSourceOutput, error) {
	var output appsync.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionFuture) Get(ctx workflow.Context) (*appsync.DeleteFunctionOutput, error) {
	var output appsync.DeleteFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGraphqlApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.DeleteGraphqlApiOutput, error) {
	var output appsync.DeleteGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResolverFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResolverFuture) Get(ctx workflow.Context) (*appsync.DeleteResolverOutput, error) {
	var output appsync.DeleteResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTypeFuture) Get(ctx workflow.Context) (*appsync.DeleteTypeOutput, error) {
	var output appsync.DeleteTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FlushApiCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FlushApiCacheFuture) Get(ctx workflow.Context) (*appsync.FlushApiCacheOutput, error) {
	var output appsync.FlushApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApiCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApiCacheFuture) Get(ctx workflow.Context) (*appsync.GetApiCacheOutput, error) {
	var output appsync.GetApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataSourceFuture) Get(ctx workflow.Context) (*appsync.GetDataSourceOutput, error) {
	var output appsync.GetDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionFuture) Get(ctx workflow.Context) (*appsync.GetFunctionOutput, error) {
	var output appsync.GetFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGraphqlApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.GetGraphqlApiOutput, error) {
	var output appsync.GetGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIntrospectionSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIntrospectionSchemaFuture) Get(ctx workflow.Context) (*appsync.GetIntrospectionSchemaOutput, error) {
	var output appsync.GetIntrospectionSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResolverFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResolverFuture) Get(ctx workflow.Context) (*appsync.GetResolverOutput, error) {
	var output appsync.GetResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaCreationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaCreationStatusFuture) Get(ctx workflow.Context) (*appsync.GetSchemaCreationStatusOutput, error) {
	var output appsync.GetSchemaCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTypeFuture) Get(ctx workflow.Context) (*appsync.GetTypeOutput, error) {
	var output appsync.GetTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApiKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApiKeysFuture) Get(ctx workflow.Context) (*appsync.ListApiKeysOutput, error) {
	var output appsync.ListApiKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDataSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDataSourcesFuture) Get(ctx workflow.Context) (*appsync.ListDataSourcesOutput, error) {
	var output appsync.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionsFuture) Get(ctx workflow.Context) (*appsync.ListFunctionsOutput, error) {
	var output appsync.ListFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGraphqlApisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGraphqlApisFuture) Get(ctx workflow.Context) (*appsync.ListGraphqlApisOutput, error) {
	var output appsync.ListGraphqlApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResolversFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResolversFuture) Get(ctx workflow.Context) (*appsync.ListResolversOutput, error) {
	var output appsync.ListResolversOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResolversByFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResolversByFunctionFuture) Get(ctx workflow.Context) (*appsync.ListResolversByFunctionOutput, error) {
	var output appsync.ListResolversByFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appsync.ListTagsForResourceOutput, error) {
	var output appsync.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypesFuture) Get(ctx workflow.Context) (*appsync.ListTypesOutput, error) {
	var output appsync.ListTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSchemaCreationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSchemaCreationFuture) Get(ctx workflow.Context) (*appsync.StartSchemaCreationOutput, error) {
	var output appsync.StartSchemaCreationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appsync.TagResourceOutput, error) {
	var output appsync.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appsync.UntagResourceOutput, error) {
	var output appsync.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApiCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApiCacheFuture) Get(ctx workflow.Context) (*appsync.UpdateApiCacheOutput, error) {
	var output appsync.UpdateApiCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApiKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApiKeyFuture) Get(ctx workflow.Context) (*appsync.UpdateApiKeyOutput, error) {
	var output appsync.UpdateApiKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataSourceFuture) Get(ctx workflow.Context) (*appsync.UpdateDataSourceOutput, error) {
	var output appsync.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFunctionFuture) Get(ctx workflow.Context) (*appsync.UpdateFunctionOutput, error) {
	var output appsync.UpdateFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGraphqlApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGraphqlApiFuture) Get(ctx workflow.Context) (*appsync.UpdateGraphqlApiOutput, error) {
	var output appsync.UpdateGraphqlApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResolverFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResolverFuture) Get(ctx workflow.Context) (*appsync.UpdateResolverOutput, error) {
	var output appsync.UpdateResolverOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTypeFuture) Get(ctx workflow.Context) (*appsync.UpdateTypeOutput, error) {
	var output appsync.UpdateTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiCache(ctx workflow.Context, input *appsync.CreateApiCacheInput) (*appsync.CreateApiCacheOutput, error) {
	var output appsync.CreateApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiCacheAsync(ctx workflow.Context, input *appsync.CreateApiCacheInput) *CreateApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateApiCache", input)
	return &CreateApiCacheFuture{Future: future}
}

func (a *stub) CreateApiKey(ctx workflow.Context, input *appsync.CreateApiKeyInput) (*appsync.CreateApiKeyOutput, error) {
	var output appsync.CreateApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiKeyAsync(ctx workflow.Context, input *appsync.CreateApiKeyInput) *CreateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateApiKey", input)
	return &CreateApiKeyFuture{Future: future}
}

func (a *stub) CreateDataSource(ctx workflow.Context, input *appsync.CreateDataSourceInput) (*appsync.CreateDataSourceOutput, error) {
	var output appsync.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataSourceAsync(ctx workflow.Context, input *appsync.CreateDataSourceInput) *CreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateDataSource", input)
	return &CreateDataSourceFuture{Future: future}
}

func (a *stub) CreateFunction(ctx workflow.Context, input *appsync.CreateFunctionInput) (*appsync.CreateFunctionOutput, error) {
	var output appsync.CreateFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionAsync(ctx workflow.Context, input *appsync.CreateFunctionInput) *CreateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateFunction", input)
	return &CreateFunctionFuture{Future: future}
}

func (a *stub) CreateGraphqlApi(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) (*appsync.CreateGraphqlApiOutput, error) {
	var output appsync.CreateGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGraphqlApiAsync(ctx workflow.Context, input *appsync.CreateGraphqlApiInput) *CreateGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateGraphqlApi", input)
	return &CreateGraphqlApiFuture{Future: future}
}

func (a *stub) CreateResolver(ctx workflow.Context, input *appsync.CreateResolverInput) (*appsync.CreateResolverOutput, error) {
	var output appsync.CreateResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResolverAsync(ctx workflow.Context, input *appsync.CreateResolverInput) *CreateResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateResolver", input)
	return &CreateResolverFuture{Future: future}
}

func (a *stub) CreateType(ctx workflow.Context, input *appsync.CreateTypeInput) (*appsync.CreateTypeOutput, error) {
	var output appsync.CreateTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-CreateType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTypeAsync(ctx workflow.Context, input *appsync.CreateTypeInput) *CreateTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-CreateType", input)
	return &CreateTypeFuture{Future: future}
}

func (a *stub) DeleteApiCache(ctx workflow.Context, input *appsync.DeleteApiCacheInput) (*appsync.DeleteApiCacheOutput, error) {
	var output appsync.DeleteApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiCacheAsync(ctx workflow.Context, input *appsync.DeleteApiCacheInput) *DeleteApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteApiCache", input)
	return &DeleteApiCacheFuture{Future: future}
}

func (a *stub) DeleteApiKey(ctx workflow.Context, input *appsync.DeleteApiKeyInput) (*appsync.DeleteApiKeyOutput, error) {
	var output appsync.DeleteApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiKeyAsync(ctx workflow.Context, input *appsync.DeleteApiKeyInput) *DeleteApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteApiKey", input)
	return &DeleteApiKeyFuture{Future: future}
}

func (a *stub) DeleteDataSource(ctx workflow.Context, input *appsync.DeleteDataSourceInput) (*appsync.DeleteDataSourceOutput, error) {
	var output appsync.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDataSourceAsync(ctx workflow.Context, input *appsync.DeleteDataSourceInput) *DeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteDataSource", input)
	return &DeleteDataSourceFuture{Future: future}
}

func (a *stub) DeleteFunction(ctx workflow.Context, input *appsync.DeleteFunctionInput) (*appsync.DeleteFunctionOutput, error) {
	var output appsync.DeleteFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionAsync(ctx workflow.Context, input *appsync.DeleteFunctionInput) *DeleteFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteFunction", input)
	return &DeleteFunctionFuture{Future: future}
}

func (a *stub) DeleteGraphqlApi(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) (*appsync.DeleteGraphqlApiOutput, error) {
	var output appsync.DeleteGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGraphqlApiAsync(ctx workflow.Context, input *appsync.DeleteGraphqlApiInput) *DeleteGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteGraphqlApi", input)
	return &DeleteGraphqlApiFuture{Future: future}
}

func (a *stub) DeleteResolver(ctx workflow.Context, input *appsync.DeleteResolverInput) (*appsync.DeleteResolverOutput, error) {
	var output appsync.DeleteResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResolverAsync(ctx workflow.Context, input *appsync.DeleteResolverInput) *DeleteResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteResolver", input)
	return &DeleteResolverFuture{Future: future}
}

func (a *stub) DeleteType(ctx workflow.Context, input *appsync.DeleteTypeInput) (*appsync.DeleteTypeOutput, error) {
	var output appsync.DeleteTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTypeAsync(ctx workflow.Context, input *appsync.DeleteTypeInput) *DeleteTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-DeleteType", input)
	return &DeleteTypeFuture{Future: future}
}

func (a *stub) FlushApiCache(ctx workflow.Context, input *appsync.FlushApiCacheInput) (*appsync.FlushApiCacheOutput, error) {
	var output appsync.FlushApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-FlushApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FlushApiCacheAsync(ctx workflow.Context, input *appsync.FlushApiCacheInput) *FlushApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-FlushApiCache", input)
	return &FlushApiCacheFuture{Future: future}
}

func (a *stub) GetApiCache(ctx workflow.Context, input *appsync.GetApiCacheInput) (*appsync.GetApiCacheOutput, error) {
	var output appsync.GetApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiCacheAsync(ctx workflow.Context, input *appsync.GetApiCacheInput) *GetApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetApiCache", input)
	return &GetApiCacheFuture{Future: future}
}

func (a *stub) GetDataSource(ctx workflow.Context, input *appsync.GetDataSourceInput) (*appsync.GetDataSourceOutput, error) {
	var output appsync.GetDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataSourceAsync(ctx workflow.Context, input *appsync.GetDataSourceInput) *GetDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetDataSource", input)
	return &GetDataSourceFuture{Future: future}
}

func (a *stub) GetFunction(ctx workflow.Context, input *appsync.GetFunctionInput) (*appsync.GetFunctionOutput, error) {
	var output appsync.GetFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionAsync(ctx workflow.Context, input *appsync.GetFunctionInput) *GetFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetFunction", input)
	return &GetFunctionFuture{Future: future}
}

func (a *stub) GetGraphqlApi(ctx workflow.Context, input *appsync.GetGraphqlApiInput) (*appsync.GetGraphqlApiOutput, error) {
	var output appsync.GetGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGraphqlApiAsync(ctx workflow.Context, input *appsync.GetGraphqlApiInput) *GetGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetGraphqlApi", input)
	return &GetGraphqlApiFuture{Future: future}
}

func (a *stub) GetIntrospectionSchema(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) (*appsync.GetIntrospectionSchemaOutput, error) {
	var output appsync.GetIntrospectionSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetIntrospectionSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntrospectionSchemaAsync(ctx workflow.Context, input *appsync.GetIntrospectionSchemaInput) *GetIntrospectionSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetIntrospectionSchema", input)
	return &GetIntrospectionSchemaFuture{Future: future}
}

func (a *stub) GetResolver(ctx workflow.Context, input *appsync.GetResolverInput) (*appsync.GetResolverOutput, error) {
	var output appsync.GetResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResolverAsync(ctx workflow.Context, input *appsync.GetResolverInput) *GetResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetResolver", input)
	return &GetResolverFuture{Future: future}
}

func (a *stub) GetSchemaCreationStatus(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) (*appsync.GetSchemaCreationStatusOutput, error) {
	var output appsync.GetSchemaCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetSchemaCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaCreationStatusAsync(ctx workflow.Context, input *appsync.GetSchemaCreationStatusInput) *GetSchemaCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetSchemaCreationStatus", input)
	return &GetSchemaCreationStatusFuture{Future: future}
}

func (a *stub) GetType(ctx workflow.Context, input *appsync.GetTypeInput) (*appsync.GetTypeOutput, error) {
	var output appsync.GetTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-GetType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTypeAsync(ctx workflow.Context, input *appsync.GetTypeInput) *GetTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-GetType", input)
	return &GetTypeFuture{Future: future}
}

func (a *stub) ListApiKeys(ctx workflow.Context, input *appsync.ListApiKeysInput) (*appsync.ListApiKeysOutput, error) {
	var output appsync.ListApiKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListApiKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApiKeysAsync(ctx workflow.Context, input *appsync.ListApiKeysInput) *ListApiKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListApiKeys", input)
	return &ListApiKeysFuture{Future: future}
}

func (a *stub) ListDataSources(ctx workflow.Context, input *appsync.ListDataSourcesInput) (*appsync.ListDataSourcesOutput, error) {
	var output appsync.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDataSourcesAsync(ctx workflow.Context, input *appsync.ListDataSourcesInput) *ListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListDataSources", input)
	return &ListDataSourcesFuture{Future: future}
}

func (a *stub) ListFunctions(ctx workflow.Context, input *appsync.ListFunctionsInput) (*appsync.ListFunctionsOutput, error) {
	var output appsync.ListFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionsAsync(ctx workflow.Context, input *appsync.ListFunctionsInput) *ListFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListFunctions", input)
	return &ListFunctionsFuture{Future: future}
}

func (a *stub) ListGraphqlApis(ctx workflow.Context, input *appsync.ListGraphqlApisInput) (*appsync.ListGraphqlApisOutput, error) {
	var output appsync.ListGraphqlApisOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListGraphqlApis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGraphqlApisAsync(ctx workflow.Context, input *appsync.ListGraphqlApisInput) *ListGraphqlApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListGraphqlApis", input)
	return &ListGraphqlApisFuture{Future: future}
}

func (a *stub) ListResolvers(ctx workflow.Context, input *appsync.ListResolversInput) (*appsync.ListResolversOutput, error) {
	var output appsync.ListResolversOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListResolvers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolversAsync(ctx workflow.Context, input *appsync.ListResolversInput) *ListResolversFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListResolvers", input)
	return &ListResolversFuture{Future: future}
}

func (a *stub) ListResolversByFunction(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) (*appsync.ListResolversByFunctionOutput, error) {
	var output appsync.ListResolversByFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListResolversByFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResolversByFunctionAsync(ctx workflow.Context, input *appsync.ListResolversByFunctionInput) *ListResolversByFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListResolversByFunction", input)
	return &ListResolversByFunctionFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appsync.ListTagsForResourceInput) (*appsync.ListTagsForResourceOutput, error) {
	var output appsync.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appsync.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTypes(ctx workflow.Context, input *appsync.ListTypesInput) (*appsync.ListTypesOutput, error) {
	var output appsync.ListTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-ListTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypesAsync(ctx workflow.Context, input *appsync.ListTypesInput) *ListTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-ListTypes", input)
	return &ListTypesFuture{Future: future}
}

func (a *stub) StartSchemaCreation(ctx workflow.Context, input *appsync.StartSchemaCreationInput) (*appsync.StartSchemaCreationOutput, error) {
	var output appsync.StartSchemaCreationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-StartSchemaCreation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSchemaCreationAsync(ctx workflow.Context, input *appsync.StartSchemaCreationInput) *StartSchemaCreationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-StartSchemaCreation", input)
	return &StartSchemaCreationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appsync.TagResourceInput) (*appsync.TagResourceOutput, error) {
	var output appsync.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appsync.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appsync.UntagResourceInput) (*appsync.UntagResourceOutput, error) {
	var output appsync.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appsync.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApiCache(ctx workflow.Context, input *appsync.UpdateApiCacheInput) (*appsync.UpdateApiCacheOutput, error) {
	var output appsync.UpdateApiCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateApiCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiCacheAsync(ctx workflow.Context, input *appsync.UpdateApiCacheInput) *UpdateApiCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateApiCache", input)
	return &UpdateApiCacheFuture{Future: future}
}

func (a *stub) UpdateApiKey(ctx workflow.Context, input *appsync.UpdateApiKeyInput) (*appsync.UpdateApiKeyOutput, error) {
	var output appsync.UpdateApiKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateApiKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiKeyAsync(ctx workflow.Context, input *appsync.UpdateApiKeyInput) *UpdateApiKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateApiKey", input)
	return &UpdateApiKeyFuture{Future: future}
}

func (a *stub) UpdateDataSource(ctx workflow.Context, input *appsync.UpdateDataSourceInput) (*appsync.UpdateDataSourceOutput, error) {
	var output appsync.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataSourceAsync(ctx workflow.Context, input *appsync.UpdateDataSourceInput) *UpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateDataSource", input)
	return &UpdateDataSourceFuture{Future: future}
}

func (a *stub) UpdateFunction(ctx workflow.Context, input *appsync.UpdateFunctionInput) (*appsync.UpdateFunctionOutput, error) {
	var output appsync.UpdateFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionAsync(ctx workflow.Context, input *appsync.UpdateFunctionInput) *UpdateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateFunction", input)
	return &UpdateFunctionFuture{Future: future}
}

func (a *stub) UpdateGraphqlApi(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) (*appsync.UpdateGraphqlApiOutput, error) {
	var output appsync.UpdateGraphqlApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateGraphqlApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGraphqlApiAsync(ctx workflow.Context, input *appsync.UpdateGraphqlApiInput) *UpdateGraphqlApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateGraphqlApi", input)
	return &UpdateGraphqlApiFuture{Future: future}
}

func (a *stub) UpdateResolver(ctx workflow.Context, input *appsync.UpdateResolverInput) (*appsync.UpdateResolverOutput, error) {
	var output appsync.UpdateResolverOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateResolver", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResolverAsync(ctx workflow.Context, input *appsync.UpdateResolverInput) *UpdateResolverFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateResolver", input)
	return &UpdateResolverFuture{Future: future}
}

func (a *stub) UpdateType(ctx workflow.Context, input *appsync.UpdateTypeInput) (*appsync.UpdateTypeOutput, error) {
	var output appsync.UpdateTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTypeAsync(ctx workflow.Context, input *appsync.UpdateTypeInput) *UpdateTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appsync-UpdateType", input)
	return &UpdateTypeFuture{Future: future}
}
