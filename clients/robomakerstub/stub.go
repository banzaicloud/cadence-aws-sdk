// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package robomakerstub

import (
	"github.com/aws/aws-sdk-go/service/robomaker"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchDeleteWorldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteWorldsFuture) Get(ctx workflow.Context) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDescribeSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFleetFuture) Get(ctx workflow.Context) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRobotFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRobotApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRobotApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSimulationApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSimulationApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFleetFuture) Get(ctx workflow.Context) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRobotFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterRobotFuture) Get(ctx workflow.Context) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetFuture) Get(ctx workflow.Context) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRobotFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorldFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorldTemplateBodyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorldTemplateBodyFuture) Get(ctx workflow.Context) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentJobsFuture) Get(ctx workflow.Context) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFleetsFuture) Get(ctx workflow.Context) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRobotApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRobotApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRobotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRobotsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSimulationApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSimulationApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSimulationJobBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSimulationJobBatchesFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSimulationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSimulationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorldExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorldExportJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorldGenerationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorldGenerationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorldTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorldTemplatesFuture) Get(ctx workflow.Context) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorldsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterRobotFuture) Get(ctx workflow.Context) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestartSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestartSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyncDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyncDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDeleteWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *BatchDeleteWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDeleteWorlds", input)
	return &BatchDeleteWorldsFuture{Future: future}
}

func (a *stub) BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *BatchDescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDescribeSimulationJob", input)
	return &BatchDescribeSimulationJobFuture{Future: future}
}

func (a *stub) CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *CancelDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelDeploymentJob", input)
	return &CancelDeploymentJobFuture{Future: future}
}

func (a *stub) CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *CancelSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJob", input)
	return &CancelSimulationJobFuture{Future: future}
}

func (a *stub) CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *CancelSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJobBatch", input)
	return &CancelSimulationJobBatchFuture{Future: future}
}

func (a *stub) CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *CancelWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldExportJob", input)
	return &CancelWorldExportJobFuture{Future: future}
}

func (a *stub) CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *CancelWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldGenerationJob", input)
	return &CancelWorldGenerationJobFuture{Future: future}
}

func (a *stub) CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *CreateDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateDeploymentJob", input)
	return &CreateDeploymentJobFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateFleet", input)
	return &CreateFleetFuture{Future: future}
}

func (a *stub) CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *CreateRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobot", input)
	return &CreateRobotFuture{Future: future}
}

func (a *stub) CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *CreateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplication", input)
	return &CreateRobotApplicationFuture{Future: future}
}

func (a *stub) CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *CreateRobotApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplicationVersion", input)
	return &CreateRobotApplicationVersionFuture{Future: future}
}

func (a *stub) CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *CreateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplication", input)
	return &CreateSimulationApplicationFuture{Future: future}
}

func (a *stub) CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *CreateSimulationApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplicationVersion", input)
	return &CreateSimulationApplicationVersionFuture{Future: future}
}

func (a *stub) CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *CreateSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationJob", input)
	return &CreateSimulationJobFuture{Future: future}
}

func (a *stub) CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *CreateWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldExportJob", input)
	return &CreateWorldExportJobFuture{Future: future}
}

func (a *stub) CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *CreateWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldGenerationJob", input)
	return &CreateWorldGenerationJobFuture{Future: future}
}

func (a *stub) CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *CreateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldTemplate", input)
	return &CreateWorldTemplateFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *DeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteFleet", input)
	return &DeleteFleetFuture{Future: future}
}

func (a *stub) DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *DeleteRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobot", input)
	return &DeleteRobotFuture{Future: future}
}

func (a *stub) DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *DeleteRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobotApplication", input)
	return &DeleteRobotApplicationFuture{Future: future}
}

func (a *stub) DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *DeleteSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteSimulationApplication", input)
	return &DeleteSimulationApplicationFuture{Future: future}
}

func (a *stub) DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *DeleteWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteWorldTemplate", input)
	return &DeleteWorldTemplateFuture{Future: future}
}

func (a *stub) DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeregisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *DeregisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeregisterRobot", input)
	return &DeregisterRobotFuture{Future: future}
}

func (a *stub) DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *DescribeDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeDeploymentJob", input)
	return &DescribeDeploymentJobFuture{Future: future}
}

func (a *stub) DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *DescribeFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeFleet", input)
	return &DescribeFleetFuture{Future: future}
}

func (a *stub) DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *DescribeRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobot", input)
	return &DescribeRobotFuture{Future: future}
}

func (a *stub) DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *DescribeRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobotApplication", input)
	return &DescribeRobotApplicationFuture{Future: future}
}

func (a *stub) DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *DescribeSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationApplication", input)
	return &DescribeSimulationApplicationFuture{Future: future}
}

func (a *stub) DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *DescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJob", input)
	return &DescribeSimulationJobFuture{Future: future}
}

func (a *stub) DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *DescribeSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJobBatch", input)
	return &DescribeSimulationJobBatchFuture{Future: future}
}

func (a *stub) DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorld", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *DescribeWorldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorld", input)
	return &DescribeWorldFuture{Future: future}
}

func (a *stub) DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *DescribeWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldExportJob", input)
	return &DescribeWorldExportJobFuture{Future: future}
}

func (a *stub) DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *DescribeWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldGenerationJob", input)
	return &DescribeWorldGenerationJobFuture{Future: future}
}

func (a *stub) DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *DescribeWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldTemplate", input)
	return &DescribeWorldTemplateFuture{Future: future}
}

func (a *stub) GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-GetWorldTemplateBody", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *GetWorldTemplateBodyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-GetWorldTemplateBody", input)
	return &GetWorldTemplateBodyFuture{Future: future}
}

func (a *stub) ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListDeploymentJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *ListDeploymentJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListDeploymentJobs", input)
	return &ListDeploymentJobsFuture{Future: future}
}

func (a *stub) ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *ListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListFleets", input)
	return &ListFleetsFuture{Future: future}
}

func (a *stub) ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobotApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *ListRobotApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobotApplications", input)
	return &ListRobotApplicationsFuture{Future: future}
}

func (a *stub) ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *ListRobotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobots", input)
	return &ListRobotsFuture{Future: future}
}

func (a *stub) ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *ListSimulationApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationApplications", input)
	return &ListSimulationApplicationsFuture{Future: future}
}

func (a *stub) ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *ListSimulationJobBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobBatches", input)
	return &ListSimulationJobBatchesFuture{Future: future}
}

func (a *stub) ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *ListSimulationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobs", input)
	return &ListSimulationJobsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *ListWorldExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldExportJobs", input)
	return &ListWorldExportJobsFuture{Future: future}
}

func (a *stub) ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldGenerationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *ListWorldGenerationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldGenerationJobs", input)
	return &ListWorldGenerationJobsFuture{Future: future}
}

func (a *stub) ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *ListWorldTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldTemplates", input)
	return &ListWorldTemplatesFuture{Future: future}
}

func (a *stub) ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *ListWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorlds", input)
	return &ListWorldsFuture{Future: future}
}

func (a *stub) RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-RegisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RegisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-RegisterRobot", input)
	return &RegisterRobotFuture{Future: future}
}

func (a *stub) RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-RestartSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RestartSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-RestartSimulationJob", input)
	return &RestartSimulationJobFuture{Future: future}
}

func (a *stub) StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-StartSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *StartSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-StartSimulationJobBatch", input)
	return &StartSimulationJobBatchFuture{Future: future}
}

func (a *stub) SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-SyncDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *SyncDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-SyncDeploymentJob", input)
	return &SyncDeploymentJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *UpdateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateRobotApplication", input)
	return &UpdateRobotApplicationFuture{Future: future}
}

func (a *stub) UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *UpdateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateSimulationApplication", input)
	return &UpdateSimulationApplicationFuture{Future: future}
}

func (a *stub) UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *UpdateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateWorldTemplate", input)
	return &UpdateWorldTemplateFuture{Future: future}
}
