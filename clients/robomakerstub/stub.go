// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package robomakerstub

import (
	"github.com/aws/aws-sdk-go/service/robomaker"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type RoboMakerBatchDeleteWorldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerBatchDeleteWorldsFuture) Get(ctx workflow.Context) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerBatchDescribeSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerBatchDescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCancelDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCancelDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCancelSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCancelSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCancelSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCancelSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCancelWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCancelWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCancelWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCancelWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateFleetFuture) Get(ctx workflow.Context) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateRobotFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateRobotApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateRobotApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateSimulationApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateSimulationApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerCreateWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerCreateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeleteFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeleteFleetFuture) Get(ctx workflow.Context) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeleteRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeleteRobotFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeleteRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeleteRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeleteSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeleteSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeleteWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeleteWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDeregisterRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDeregisterRobotFuture) Get(ctx workflow.Context) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeFleetFuture) Get(ctx workflow.Context) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeRobotFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeWorldFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeWorldFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeWorldExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeWorldGenerationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerDescribeWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerDescribeWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerGetWorldTemplateBodyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerGetWorldTemplateBodyFuture) Get(ctx workflow.Context) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListDeploymentJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListDeploymentJobsFuture) Get(ctx workflow.Context) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListFleetsFuture) Get(ctx workflow.Context) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListRobotApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListRobotApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListRobotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListRobotsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListSimulationApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListSimulationApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListSimulationJobBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListSimulationJobBatchesFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListSimulationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListSimulationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListTagsForResourceFuture) Get(ctx workflow.Context) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListWorldExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListWorldExportJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListWorldGenerationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListWorldGenerationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListWorldTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListWorldTemplatesFuture) Get(ctx workflow.Context) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerListWorldsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerListWorldsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerRegisterRobotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerRegisterRobotFuture) Get(ctx workflow.Context) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerRestartSimulationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerRestartSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerStartSimulationJobBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerStartSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerSyncDeploymentJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerSyncDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerTagResourceFuture) Get(ctx workflow.Context) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerUntagResourceFuture) Get(ctx workflow.Context) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerUpdateRobotApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerUpdateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerUpdateSimulationApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerUpdateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RoboMakerUpdateWorldTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RoboMakerUpdateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDeleteWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *RoboMakerBatchDeleteWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDeleteWorlds", input)
	return &RoboMakerBatchDeleteWorldsFuture{Future: future}
}

func (a *stub) BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *RoboMakerBatchDescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-BatchDescribeSimulationJob", input)
	return &RoboMakerBatchDescribeSimulationJobFuture{Future: future}
}

func (a *stub) CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *RoboMakerCancelDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelDeploymentJob", input)
	return &RoboMakerCancelDeploymentJobFuture{Future: future}
}

func (a *stub) CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *RoboMakerCancelSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJob", input)
	return &RoboMakerCancelSimulationJobFuture{Future: future}
}

func (a *stub) CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *RoboMakerCancelSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelSimulationJobBatch", input)
	return &RoboMakerCancelSimulationJobBatchFuture{Future: future}
}

func (a *stub) CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *RoboMakerCancelWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldExportJob", input)
	return &RoboMakerCancelWorldExportJobFuture{Future: future}
}

func (a *stub) CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *RoboMakerCancelWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CancelWorldGenerationJob", input)
	return &RoboMakerCancelWorldGenerationJobFuture{Future: future}
}

func (a *stub) CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *RoboMakerCreateDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateDeploymentJob", input)
	return &RoboMakerCreateDeploymentJobFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *RoboMakerCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateFleet", input)
	return &RoboMakerCreateFleetFuture{Future: future}
}

func (a *stub) CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *RoboMakerCreateRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobot", input)
	return &RoboMakerCreateRobotFuture{Future: future}
}

func (a *stub) CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *RoboMakerCreateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplication", input)
	return &RoboMakerCreateRobotApplicationFuture{Future: future}
}

func (a *stub) CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *RoboMakerCreateRobotApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateRobotApplicationVersion", input)
	return &RoboMakerCreateRobotApplicationVersionFuture{Future: future}
}

func (a *stub) CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *RoboMakerCreateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplication", input)
	return &RoboMakerCreateSimulationApplicationFuture{Future: future}
}

func (a *stub) CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *RoboMakerCreateSimulationApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationApplicationVersion", input)
	return &RoboMakerCreateSimulationApplicationVersionFuture{Future: future}
}

func (a *stub) CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *RoboMakerCreateSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateSimulationJob", input)
	return &RoboMakerCreateSimulationJobFuture{Future: future}
}

func (a *stub) CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *RoboMakerCreateWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldExportJob", input)
	return &RoboMakerCreateWorldExportJobFuture{Future: future}
}

func (a *stub) CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *RoboMakerCreateWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldGenerationJob", input)
	return &RoboMakerCreateWorldGenerationJobFuture{Future: future}
}

func (a *stub) CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *RoboMakerCreateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-CreateWorldTemplate", input)
	return &RoboMakerCreateWorldTemplateFuture{Future: future}
}

func (a *stub) DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *RoboMakerDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteFleet", input)
	return &RoboMakerDeleteFleetFuture{Future: future}
}

func (a *stub) DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *RoboMakerDeleteRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobot", input)
	return &RoboMakerDeleteRobotFuture{Future: future}
}

func (a *stub) DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *RoboMakerDeleteRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteRobotApplication", input)
	return &RoboMakerDeleteRobotApplicationFuture{Future: future}
}

func (a *stub) DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *RoboMakerDeleteSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteSimulationApplication", input)
	return &RoboMakerDeleteSimulationApplicationFuture{Future: future}
}

func (a *stub) DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *RoboMakerDeleteWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeleteWorldTemplate", input)
	return &RoboMakerDeleteWorldTemplateFuture{Future: future}
}

func (a *stub) DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DeregisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *RoboMakerDeregisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DeregisterRobot", input)
	return &RoboMakerDeregisterRobotFuture{Future: future}
}

func (a *stub) DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *RoboMakerDescribeDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeDeploymentJob", input)
	return &RoboMakerDescribeDeploymentJobFuture{Future: future}
}

func (a *stub) DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *RoboMakerDescribeFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeFleet", input)
	return &RoboMakerDescribeFleetFuture{Future: future}
}

func (a *stub) DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *RoboMakerDescribeRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobot", input)
	return &RoboMakerDescribeRobotFuture{Future: future}
}

func (a *stub) DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *RoboMakerDescribeRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeRobotApplication", input)
	return &RoboMakerDescribeRobotApplicationFuture{Future: future}
}

func (a *stub) DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *RoboMakerDescribeSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationApplication", input)
	return &RoboMakerDescribeSimulationApplicationFuture{Future: future}
}

func (a *stub) DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *RoboMakerDescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJob", input)
	return &RoboMakerDescribeSimulationJobFuture{Future: future}
}

func (a *stub) DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *RoboMakerDescribeSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeSimulationJobBatch", input)
	return &RoboMakerDescribeSimulationJobBatchFuture{Future: future}
}

func (a *stub) DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorld", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *RoboMakerDescribeWorldFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorld", input)
	return &RoboMakerDescribeWorldFuture{Future: future}
}

func (a *stub) DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *RoboMakerDescribeWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldExportJob", input)
	return &RoboMakerDescribeWorldExportJobFuture{Future: future}
}

func (a *stub) DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *RoboMakerDescribeWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldGenerationJob", input)
	return &RoboMakerDescribeWorldGenerationJobFuture{Future: future}
}

func (a *stub) DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *RoboMakerDescribeWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-DescribeWorldTemplate", input)
	return &RoboMakerDescribeWorldTemplateFuture{Future: future}
}

func (a *stub) GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-GetWorldTemplateBody", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *RoboMakerGetWorldTemplateBodyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-GetWorldTemplateBody", input)
	return &RoboMakerGetWorldTemplateBodyFuture{Future: future}
}

func (a *stub) ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListDeploymentJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *RoboMakerListDeploymentJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListDeploymentJobs", input)
	return &RoboMakerListDeploymentJobsFuture{Future: future}
}

func (a *stub) ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *RoboMakerListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListFleets", input)
	return &RoboMakerListFleetsFuture{Future: future}
}

func (a *stub) ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobotApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *RoboMakerListRobotApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobotApplications", input)
	return &RoboMakerListRobotApplicationsFuture{Future: future}
}

func (a *stub) ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *RoboMakerListRobotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListRobots", input)
	return &RoboMakerListRobotsFuture{Future: future}
}

func (a *stub) ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *RoboMakerListSimulationApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationApplications", input)
	return &RoboMakerListSimulationApplicationsFuture{Future: future}
}

func (a *stub) ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *RoboMakerListSimulationJobBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobBatches", input)
	return &RoboMakerListSimulationJobBatchesFuture{Future: future}
}

func (a *stub) ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *RoboMakerListSimulationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListSimulationJobs", input)
	return &RoboMakerListSimulationJobsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *RoboMakerListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListTagsForResource", input)
	return &RoboMakerListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *RoboMakerListWorldExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldExportJobs", input)
	return &RoboMakerListWorldExportJobsFuture{Future: future}
}

func (a *stub) ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldGenerationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *RoboMakerListWorldGenerationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldGenerationJobs", input)
	return &RoboMakerListWorldGenerationJobsFuture{Future: future}
}

func (a *stub) ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *RoboMakerListWorldTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorldTemplates", input)
	return &RoboMakerListWorldTemplatesFuture{Future: future}
}

func (a *stub) ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *RoboMakerListWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-ListWorlds", input)
	return &RoboMakerListWorldsFuture{Future: future}
}

func (a *stub) RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-RegisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RoboMakerRegisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-RegisterRobot", input)
	return &RoboMakerRegisterRobotFuture{Future: future}
}

func (a *stub) RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-RestartSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RoboMakerRestartSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-RestartSimulationJob", input)
	return &RoboMakerRestartSimulationJobFuture{Future: future}
}

func (a *stub) StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-StartSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *RoboMakerStartSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-StartSimulationJobBatch", input)
	return &RoboMakerStartSimulationJobBatchFuture{Future: future}
}

func (a *stub) SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-SyncDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *RoboMakerSyncDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-SyncDeploymentJob", input)
	return &RoboMakerSyncDeploymentJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *RoboMakerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-TagResource", input)
	return &RoboMakerTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *RoboMakerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UntagResource", input)
	return &RoboMakerUntagResourceFuture{Future: future}
}

func (a *stub) UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *RoboMakerUpdateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateRobotApplication", input)
	return &RoboMakerUpdateRobotApplicationFuture{Future: future}
}

func (a *stub) UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *RoboMakerUpdateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateSimulationApplication", input)
	return &RoboMakerUpdateSimulationApplicationFuture{Future: future}
}

func (a *stub) UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *RoboMakerUpdateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-robomaker-UpdateWorldTemplate", input)
	return &RoboMakerUpdateWorldTemplateFuture{Future: future}
}
