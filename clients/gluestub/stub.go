// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package gluestub

import (
	"github.com/aws/aws-sdk-go/service/glue"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchCreatePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCreatePartitionFuture) Get(ctx workflow.Context) (*glue.BatchCreatePartitionOutput, error) {
	var output glue.BatchCreatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteConnectionFuture) Get(ctx workflow.Context) (*glue.BatchDeleteConnectionOutput, error) {
	var output glue.BatchDeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeletePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeletePartitionFuture) Get(ctx workflow.Context) (*glue.BatchDeletePartitionOutput, error) {
	var output glue.BatchDeletePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteTableFuture) Get(ctx workflow.Context) (*glue.BatchDeleteTableOutput, error) {
	var output glue.BatchDeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteTableVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteTableVersionFuture) Get(ctx workflow.Context) (*glue.BatchDeleteTableVersionOutput, error) {
	var output glue.BatchDeleteTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetCrawlersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetCrawlersFuture) Get(ctx workflow.Context) (*glue.BatchGetCrawlersOutput, error) {
	var output glue.BatchGetCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetDevEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetDevEndpointsFuture) Get(ctx workflow.Context) (*glue.BatchGetDevEndpointsOutput, error) {
	var output glue.BatchGetDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetJobsFuture) Get(ctx workflow.Context) (*glue.BatchGetJobsOutput, error) {
	var output glue.BatchGetJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetPartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetPartitionFuture) Get(ctx workflow.Context) (*glue.BatchGetPartitionOutput, error) {
	var output glue.BatchGetPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetTriggersFuture) Get(ctx workflow.Context) (*glue.BatchGetTriggersOutput, error) {
	var output glue.BatchGetTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetWorkflowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetWorkflowsFuture) Get(ctx workflow.Context) (*glue.BatchGetWorkflowsOutput, error) {
	var output glue.BatchGetWorkflowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchStopJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchStopJobRunFuture) Get(ctx workflow.Context) (*glue.BatchStopJobRunOutput, error) {
	var output glue.BatchStopJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdatePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUpdatePartitionFuture) Get(ctx workflow.Context) (*glue.BatchUpdatePartitionOutput, error) {
	var output glue.BatchUpdatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelMLTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelMLTaskRunFuture) Get(ctx workflow.Context) (*glue.CancelMLTaskRunOutput, error) {
	var output glue.CancelMLTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckSchemaVersionValidityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckSchemaVersionValidityFuture) Get(ctx workflow.Context) (*glue.CheckSchemaVersionValidityOutput, error) {
	var output glue.CheckSchemaVersionValidityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClassifierFuture) Get(ctx workflow.Context) (*glue.CreateClassifierOutput, error) {
	var output glue.CreateClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectionFuture) Get(ctx workflow.Context) (*glue.CreateConnectionOutput, error) {
	var output glue.CreateConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCrawlerFuture) Get(ctx workflow.Context) (*glue.CreateCrawlerOutput, error) {
	var output glue.CreateCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatabaseFuture) Get(ctx workflow.Context) (*glue.CreateDatabaseOutput, error) {
	var output glue.CreateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDevEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDevEndpointFuture) Get(ctx workflow.Context) (*glue.CreateDevEndpointOutput, error) {
	var output glue.CreateDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateJobFuture) Get(ctx workflow.Context) (*glue.CreateJobOutput, error) {
	var output glue.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMLTransformFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMLTransformFuture) Get(ctx workflow.Context) (*glue.CreateMLTransformOutput, error) {
	var output glue.CreateMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePartitionFuture) Get(ctx workflow.Context) (*glue.CreatePartitionOutput, error) {
	var output glue.CreatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePartitionIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePartitionIndexFuture) Get(ctx workflow.Context) (*glue.CreatePartitionIndexOutput, error) {
	var output glue.CreatePartitionIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRegistryFuture) Get(ctx workflow.Context) (*glue.CreateRegistryOutput, error) {
	var output glue.CreateRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSchemaFuture) Get(ctx workflow.Context) (*glue.CreateSchemaOutput, error) {
	var output glue.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateScriptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateScriptFuture) Get(ctx workflow.Context) (*glue.CreateScriptOutput, error) {
	var output glue.CreateScriptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.CreateSecurityConfigurationOutput, error) {
	var output glue.CreateSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTableFuture) Get(ctx workflow.Context) (*glue.CreateTableOutput, error) {
	var output glue.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTriggerFuture) Get(ctx workflow.Context) (*glue.CreateTriggerOutput, error) {
	var output glue.CreateTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserDefinedFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.CreateUserDefinedFunctionOutput, error) {
	var output glue.CreateUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorkflowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorkflowFuture) Get(ctx workflow.Context) (*glue.CreateWorkflowOutput, error) {
	var output glue.CreateWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClassifierFuture) Get(ctx workflow.Context) (*glue.DeleteClassifierOutput, error) {
	var output glue.DeleteClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteColumnStatisticsForPartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	var output glue.DeleteColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteColumnStatisticsForTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	var output glue.DeleteColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectionFuture) Get(ctx workflow.Context) (*glue.DeleteConnectionOutput, error) {
	var output glue.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCrawlerFuture) Get(ctx workflow.Context) (*glue.DeleteCrawlerOutput, error) {
	var output glue.DeleteCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatabaseFuture) Get(ctx workflow.Context) (*glue.DeleteDatabaseOutput, error) {
	var output glue.DeleteDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDevEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDevEndpointFuture) Get(ctx workflow.Context) (*glue.DeleteDevEndpointOutput, error) {
	var output glue.DeleteDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteJobFuture) Get(ctx workflow.Context) (*glue.DeleteJobOutput, error) {
	var output glue.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMLTransformFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMLTransformFuture) Get(ctx workflow.Context) (*glue.DeleteMLTransformOutput, error) {
	var output glue.DeleteMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePartitionFuture) Get(ctx workflow.Context) (*glue.DeletePartitionOutput, error) {
	var output glue.DeletePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePartitionIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePartitionIndexFuture) Get(ctx workflow.Context) (*glue.DeletePartitionIndexOutput, error) {
	var output glue.DeletePartitionIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRegistryFuture) Get(ctx workflow.Context) (*glue.DeleteRegistryOutput, error) {
	var output glue.DeleteRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcePolicyFuture) Get(ctx workflow.Context) (*glue.DeleteResourcePolicyOutput, error) {
	var output glue.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSchemaFuture) Get(ctx workflow.Context) (*glue.DeleteSchemaOutput, error) {
	var output glue.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSchemaVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSchemaVersionsFuture) Get(ctx workflow.Context) (*glue.DeleteSchemaVersionsOutput, error) {
	var output glue.DeleteSchemaVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.DeleteSecurityConfigurationOutput, error) {
	var output glue.DeleteSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTableFuture) Get(ctx workflow.Context) (*glue.DeleteTableOutput, error) {
	var output glue.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTableVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTableVersionFuture) Get(ctx workflow.Context) (*glue.DeleteTableVersionOutput, error) {
	var output glue.DeleteTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTriggerFuture) Get(ctx workflow.Context) (*glue.DeleteTriggerOutput, error) {
	var output glue.DeleteTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserDefinedFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.DeleteUserDefinedFunctionOutput, error) {
	var output glue.DeleteUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorkflowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorkflowFuture) Get(ctx workflow.Context) (*glue.DeleteWorkflowOutput, error) {
	var output glue.DeleteWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCatalogImportStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCatalogImportStatusFuture) Get(ctx workflow.Context) (*glue.GetCatalogImportStatusOutput, error) {
	var output glue.GetCatalogImportStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClassifierFuture) Get(ctx workflow.Context) (*glue.GetClassifierOutput, error) {
	var output glue.GetClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetClassifiersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClassifiersFuture) Get(ctx workflow.Context) (*glue.GetClassifiersOutput, error) {
	var output glue.GetClassifiersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetColumnStatisticsForPartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	var output glue.GetColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetColumnStatisticsForTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.GetColumnStatisticsForTableOutput, error) {
	var output glue.GetColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectionFuture) Get(ctx workflow.Context) (*glue.GetConnectionOutput, error) {
	var output glue.GetConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectionsFuture) Get(ctx workflow.Context) (*glue.GetConnectionsOutput, error) {
	var output glue.GetConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCrawlerFuture) Get(ctx workflow.Context) (*glue.GetCrawlerOutput, error) {
	var output glue.GetCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCrawlerMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCrawlerMetricsFuture) Get(ctx workflow.Context) (*glue.GetCrawlerMetricsOutput, error) {
	var output glue.GetCrawlerMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCrawlersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCrawlersFuture) Get(ctx workflow.Context) (*glue.GetCrawlersOutput, error) {
	var output glue.GetCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataCatalogEncryptionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataCatalogEncryptionSettingsFuture) Get(ctx workflow.Context) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	var output glue.GetDataCatalogEncryptionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDatabaseFuture) Get(ctx workflow.Context) (*glue.GetDatabaseOutput, error) {
	var output glue.GetDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDatabasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDatabasesFuture) Get(ctx workflow.Context) (*glue.GetDatabasesOutput, error) {
	var output glue.GetDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataflowGraphFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataflowGraphFuture) Get(ctx workflow.Context) (*glue.GetDataflowGraphOutput, error) {
	var output glue.GetDataflowGraphOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDevEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDevEndpointFuture) Get(ctx workflow.Context) (*glue.GetDevEndpointOutput, error) {
	var output glue.GetDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDevEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDevEndpointsFuture) Get(ctx workflow.Context) (*glue.GetDevEndpointsOutput, error) {
	var output glue.GetDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobFuture) Get(ctx workflow.Context) (*glue.GetJobOutput, error) {
	var output glue.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobBookmarkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobBookmarkFuture) Get(ctx workflow.Context) (*glue.GetJobBookmarkOutput, error) {
	var output glue.GetJobBookmarkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobRunFuture) Get(ctx workflow.Context) (*glue.GetJobRunOutput, error) {
	var output glue.GetJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobRunsFuture) Get(ctx workflow.Context) (*glue.GetJobRunsOutput, error) {
	var output glue.GetJobRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobsFuture) Get(ctx workflow.Context) (*glue.GetJobsOutput, error) {
	var output glue.GetJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMLTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMLTaskRunFuture) Get(ctx workflow.Context) (*glue.GetMLTaskRunOutput, error) {
	var output glue.GetMLTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMLTaskRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMLTaskRunsFuture) Get(ctx workflow.Context) (*glue.GetMLTaskRunsOutput, error) {
	var output glue.GetMLTaskRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMLTransformFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMLTransformFuture) Get(ctx workflow.Context) (*glue.GetMLTransformOutput, error) {
	var output glue.GetMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMLTransformsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMLTransformsFuture) Get(ctx workflow.Context) (*glue.GetMLTransformsOutput, error) {
	var output glue.GetMLTransformsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMappingFuture) Get(ctx workflow.Context) (*glue.GetMappingOutput, error) {
	var output glue.GetMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPartitionFuture) Get(ctx workflow.Context) (*glue.GetPartitionOutput, error) {
	var output glue.GetPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPartitionIndexesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPartitionIndexesFuture) Get(ctx workflow.Context) (*glue.GetPartitionIndexesOutput, error) {
	var output glue.GetPartitionIndexesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPartitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPartitionsFuture) Get(ctx workflow.Context) (*glue.GetPartitionsOutput, error) {
	var output glue.GetPartitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPlanFuture) Get(ctx workflow.Context) (*glue.GetPlanOutput, error) {
	var output glue.GetPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegistryFuture) Get(ctx workflow.Context) (*glue.GetRegistryOutput, error) {
	var output glue.GetRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcePoliciesFuture) Get(ctx workflow.Context) (*glue.GetResourcePoliciesOutput, error) {
	var output glue.GetResourcePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcePolicyFuture) Get(ctx workflow.Context) (*glue.GetResourcePolicyOutput, error) {
	var output glue.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaFuture) Get(ctx workflow.Context) (*glue.GetSchemaOutput, error) {
	var output glue.GetSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaByDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaByDefinitionFuture) Get(ctx workflow.Context) (*glue.GetSchemaByDefinitionOutput, error) {
	var output glue.GetSchemaByDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaVersionFuture) Get(ctx workflow.Context) (*glue.GetSchemaVersionOutput, error) {
	var output glue.GetSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaVersionsDiffFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaVersionsDiffFuture) Get(ctx workflow.Context) (*glue.GetSchemaVersionsDiffOutput, error) {
	var output glue.GetSchemaVersionsDiffOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSecurityConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSecurityConfigurationFuture) Get(ctx workflow.Context) (*glue.GetSecurityConfigurationOutput, error) {
	var output glue.GetSecurityConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSecurityConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSecurityConfigurationsFuture) Get(ctx workflow.Context) (*glue.GetSecurityConfigurationsOutput, error) {
	var output glue.GetSecurityConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTableFuture) Get(ctx workflow.Context) (*glue.GetTableOutput, error) {
	var output glue.GetTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTableVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTableVersionFuture) Get(ctx workflow.Context) (*glue.GetTableVersionOutput, error) {
	var output glue.GetTableVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTableVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTableVersionsFuture) Get(ctx workflow.Context) (*glue.GetTableVersionsOutput, error) {
	var output glue.GetTableVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTablesFuture) Get(ctx workflow.Context) (*glue.GetTablesOutput, error) {
	var output glue.GetTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTagsFuture) Get(ctx workflow.Context) (*glue.GetTagsOutput, error) {
	var output glue.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTriggerFuture) Get(ctx workflow.Context) (*glue.GetTriggerOutput, error) {
	var output glue.GetTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTriggersFuture) Get(ctx workflow.Context) (*glue.GetTriggersOutput, error) {
	var output glue.GetTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserDefinedFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.GetUserDefinedFunctionOutput, error) {
	var output glue.GetUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserDefinedFunctionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserDefinedFunctionsFuture) Get(ctx workflow.Context) (*glue.GetUserDefinedFunctionsOutput, error) {
	var output glue.GetUserDefinedFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkflowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkflowFuture) Get(ctx workflow.Context) (*glue.GetWorkflowOutput, error) {
	var output glue.GetWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkflowRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkflowRunFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunOutput, error) {
	var output glue.GetWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkflowRunPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkflowRunPropertiesFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunPropertiesOutput, error) {
	var output glue.GetWorkflowRunPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkflowRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkflowRunsFuture) Get(ctx workflow.Context) (*glue.GetWorkflowRunsOutput, error) {
	var output glue.GetWorkflowRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportCatalogToGlueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportCatalogToGlueFuture) Get(ctx workflow.Context) (*glue.ImportCatalogToGlueOutput, error) {
	var output glue.ImportCatalogToGlueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCrawlersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCrawlersFuture) Get(ctx workflow.Context) (*glue.ListCrawlersOutput, error) {
	var output glue.ListCrawlersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevEndpointsFuture) Get(ctx workflow.Context) (*glue.ListDevEndpointsOutput, error) {
	var output glue.ListDevEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobsFuture) Get(ctx workflow.Context) (*glue.ListJobsOutput, error) {
	var output glue.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMLTransformsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMLTransformsFuture) Get(ctx workflow.Context) (*glue.ListMLTransformsOutput, error) {
	var output glue.ListMLTransformsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRegistriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRegistriesFuture) Get(ctx workflow.Context) (*glue.ListRegistriesOutput, error) {
	var output glue.ListRegistriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSchemaVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSchemaVersionsFuture) Get(ctx workflow.Context) (*glue.ListSchemaVersionsOutput, error) {
	var output glue.ListSchemaVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSchemasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSchemasFuture) Get(ctx workflow.Context) (*glue.ListSchemasOutput, error) {
	var output glue.ListSchemasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTriggersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTriggersFuture) Get(ctx workflow.Context) (*glue.ListTriggersOutput, error) {
	var output glue.ListTriggersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorkflowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorkflowsFuture) Get(ctx workflow.Context) (*glue.ListWorkflowsOutput, error) {
	var output glue.ListWorkflowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDataCatalogEncryptionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDataCatalogEncryptionSettingsFuture) Get(ctx workflow.Context) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	var output glue.PutDataCatalogEncryptionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourcePolicyFuture) Get(ctx workflow.Context) (*glue.PutResourcePolicyOutput, error) {
	var output glue.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSchemaVersionMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSchemaVersionMetadataFuture) Get(ctx workflow.Context) (*glue.PutSchemaVersionMetadataOutput, error) {
	var output glue.PutSchemaVersionMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutWorkflowRunPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutWorkflowRunPropertiesFuture) Get(ctx workflow.Context) (*glue.PutWorkflowRunPropertiesOutput, error) {
	var output glue.PutWorkflowRunPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QuerySchemaVersionMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QuerySchemaVersionMetadataFuture) Get(ctx workflow.Context) (*glue.QuerySchemaVersionMetadataOutput, error) {
	var output glue.QuerySchemaVersionMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterSchemaVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterSchemaVersionFuture) Get(ctx workflow.Context) (*glue.RegisterSchemaVersionOutput, error) {
	var output glue.RegisterSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveSchemaVersionMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveSchemaVersionMetadataFuture) Get(ctx workflow.Context) (*glue.RemoveSchemaVersionMetadataOutput, error) {
	var output glue.RemoveSchemaVersionMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetJobBookmarkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetJobBookmarkFuture) Get(ctx workflow.Context) (*glue.ResetJobBookmarkOutput, error) {
	var output glue.ResetJobBookmarkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeWorkflowRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeWorkflowRunFuture) Get(ctx workflow.Context) (*glue.ResumeWorkflowRunOutput, error) {
	var output glue.ResumeWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchTablesFuture) Get(ctx workflow.Context) (*glue.SearchTablesOutput, error) {
	var output glue.SearchTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartCrawlerFuture) Get(ctx workflow.Context) (*glue.StartCrawlerOutput, error) {
	var output glue.StartCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartCrawlerScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.StartCrawlerScheduleOutput, error) {
	var output glue.StartCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartExportLabelsTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartExportLabelsTaskRunFuture) Get(ctx workflow.Context) (*glue.StartExportLabelsTaskRunOutput, error) {
	var output glue.StartExportLabelsTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartImportLabelsTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartImportLabelsTaskRunFuture) Get(ctx workflow.Context) (*glue.StartImportLabelsTaskRunOutput, error) {
	var output glue.StartImportLabelsTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartJobRunFuture) Get(ctx workflow.Context) (*glue.StartJobRunOutput, error) {
	var output glue.StartJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMLEvaluationTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMLEvaluationTaskRunFuture) Get(ctx workflow.Context) (*glue.StartMLEvaluationTaskRunOutput, error) {
	var output glue.StartMLEvaluationTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMLLabelingSetGenerationTaskRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMLLabelingSetGenerationTaskRunFuture) Get(ctx workflow.Context) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	var output glue.StartMLLabelingSetGenerationTaskRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTriggerFuture) Get(ctx workflow.Context) (*glue.StartTriggerOutput, error) {
	var output glue.StartTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartWorkflowRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartWorkflowRunFuture) Get(ctx workflow.Context) (*glue.StartWorkflowRunOutput, error) {
	var output glue.StartWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopCrawlerFuture) Get(ctx workflow.Context) (*glue.StopCrawlerOutput, error) {
	var output glue.StopCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopCrawlerScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.StopCrawlerScheduleOutput, error) {
	var output glue.StopCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTriggerFuture) Get(ctx workflow.Context) (*glue.StopTriggerOutput, error) {
	var output glue.StopTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopWorkflowRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopWorkflowRunFuture) Get(ctx workflow.Context) (*glue.StopWorkflowRunOutput, error) {
	var output glue.StopWorkflowRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*glue.TagResourceOutput, error) {
	var output glue.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*glue.UntagResourceOutput, error) {
	var output glue.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClassifierFuture) Get(ctx workflow.Context) (*glue.UpdateClassifierOutput, error) {
	var output glue.UpdateClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateColumnStatisticsForPartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateColumnStatisticsForPartitionFuture) Get(ctx workflow.Context) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	var output glue.UpdateColumnStatisticsForPartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateColumnStatisticsForTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateColumnStatisticsForTableFuture) Get(ctx workflow.Context) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	var output glue.UpdateColumnStatisticsForTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConnectionFuture) Get(ctx workflow.Context) (*glue.UpdateConnectionOutput, error) {
	var output glue.UpdateConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCrawlerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCrawlerFuture) Get(ctx workflow.Context) (*glue.UpdateCrawlerOutput, error) {
	var output glue.UpdateCrawlerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCrawlerScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCrawlerScheduleFuture) Get(ctx workflow.Context) (*glue.UpdateCrawlerScheduleOutput, error) {
	var output glue.UpdateCrawlerScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDatabaseFuture) Get(ctx workflow.Context) (*glue.UpdateDatabaseOutput, error) {
	var output glue.UpdateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDevEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDevEndpointFuture) Get(ctx workflow.Context) (*glue.UpdateDevEndpointOutput, error) {
	var output glue.UpdateDevEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobFuture) Get(ctx workflow.Context) (*glue.UpdateJobOutput, error) {
	var output glue.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMLTransformFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMLTransformFuture) Get(ctx workflow.Context) (*glue.UpdateMLTransformOutput, error) {
	var output glue.UpdateMLTransformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePartitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePartitionFuture) Get(ctx workflow.Context) (*glue.UpdatePartitionOutput, error) {
	var output glue.UpdatePartitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRegistryFuture) Get(ctx workflow.Context) (*glue.UpdateRegistryOutput, error) {
	var output glue.UpdateRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSchemaFuture) Get(ctx workflow.Context) (*glue.UpdateSchemaOutput, error) {
	var output glue.UpdateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTableFuture) Get(ctx workflow.Context) (*glue.UpdateTableOutput, error) {
	var output glue.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTriggerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTriggerFuture) Get(ctx workflow.Context) (*glue.UpdateTriggerOutput, error) {
	var output glue.UpdateTriggerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserDefinedFunctionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserDefinedFunctionFuture) Get(ctx workflow.Context) (*glue.UpdateUserDefinedFunctionOutput, error) {
	var output glue.UpdateUserDefinedFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorkflowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorkflowFuture) Get(ctx workflow.Context) (*glue.UpdateWorkflowOutput, error) {
	var output glue.UpdateWorkflowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCreatePartition(ctx workflow.Context, input *glue.BatchCreatePartitionInput) (*glue.BatchCreatePartitionOutput, error) {
	var output glue.BatchCreatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchCreatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCreatePartitionAsync(ctx workflow.Context, input *glue.BatchCreatePartitionInput) *BatchCreatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchCreatePartition", input)
	return &BatchCreatePartitionFuture{Future: future}
}

func (a *stub) BatchDeleteConnection(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) (*glue.BatchDeleteConnectionOutput, error) {
	var output glue.BatchDeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteConnectionAsync(ctx workflow.Context, input *glue.BatchDeleteConnectionInput) *BatchDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteConnection", input)
	return &BatchDeleteConnectionFuture{Future: future}
}

func (a *stub) BatchDeletePartition(ctx workflow.Context, input *glue.BatchDeletePartitionInput) (*glue.BatchDeletePartitionOutput, error) {
	var output glue.BatchDeletePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeletePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeletePartitionAsync(ctx workflow.Context, input *glue.BatchDeletePartitionInput) *BatchDeletePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeletePartition", input)
	return &BatchDeletePartitionFuture{Future: future}
}

func (a *stub) BatchDeleteTable(ctx workflow.Context, input *glue.BatchDeleteTableInput) (*glue.BatchDeleteTableOutput, error) {
	var output glue.BatchDeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteTableAsync(ctx workflow.Context, input *glue.BatchDeleteTableInput) *BatchDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteTable", input)
	return &BatchDeleteTableFuture{Future: future}
}

func (a *stub) BatchDeleteTableVersion(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) (*glue.BatchDeleteTableVersionOutput, error) {
	var output glue.BatchDeleteTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteTableVersionAsync(ctx workflow.Context, input *glue.BatchDeleteTableVersionInput) *BatchDeleteTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchDeleteTableVersion", input)
	return &BatchDeleteTableVersionFuture{Future: future}
}

func (a *stub) BatchGetCrawlers(ctx workflow.Context, input *glue.BatchGetCrawlersInput) (*glue.BatchGetCrawlersOutput, error) {
	var output glue.BatchGetCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetCrawlersAsync(ctx workflow.Context, input *glue.BatchGetCrawlersInput) *BatchGetCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetCrawlers", input)
	return &BatchGetCrawlersFuture{Future: future}
}

func (a *stub) BatchGetDevEndpoints(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) (*glue.BatchGetDevEndpointsOutput, error) {
	var output glue.BatchGetDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDevEndpointsAsync(ctx workflow.Context, input *glue.BatchGetDevEndpointsInput) *BatchGetDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetDevEndpoints", input)
	return &BatchGetDevEndpointsFuture{Future: future}
}

func (a *stub) BatchGetJobs(ctx workflow.Context, input *glue.BatchGetJobsInput) (*glue.BatchGetJobsOutput, error) {
	var output glue.BatchGetJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetJobsAsync(ctx workflow.Context, input *glue.BatchGetJobsInput) *BatchGetJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetJobs", input)
	return &BatchGetJobsFuture{Future: future}
}

func (a *stub) BatchGetPartition(ctx workflow.Context, input *glue.BatchGetPartitionInput) (*glue.BatchGetPartitionOutput, error) {
	var output glue.BatchGetPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetPartitionAsync(ctx workflow.Context, input *glue.BatchGetPartitionInput) *BatchGetPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetPartition", input)
	return &BatchGetPartitionFuture{Future: future}
}

func (a *stub) BatchGetTriggers(ctx workflow.Context, input *glue.BatchGetTriggersInput) (*glue.BatchGetTriggersOutput, error) {
	var output glue.BatchGetTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetTriggersAsync(ctx workflow.Context, input *glue.BatchGetTriggersInput) *BatchGetTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetTriggers", input)
	return &BatchGetTriggersFuture{Future: future}
}

func (a *stub) BatchGetWorkflows(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) (*glue.BatchGetWorkflowsOutput, error) {
	var output glue.BatchGetWorkflowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetWorkflows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetWorkflowsAsync(ctx workflow.Context, input *glue.BatchGetWorkflowsInput) *BatchGetWorkflowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchGetWorkflows", input)
	return &BatchGetWorkflowsFuture{Future: future}
}

func (a *stub) BatchStopJobRun(ctx workflow.Context, input *glue.BatchStopJobRunInput) (*glue.BatchStopJobRunOutput, error) {
	var output glue.BatchStopJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchStopJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchStopJobRunAsync(ctx workflow.Context, input *glue.BatchStopJobRunInput) *BatchStopJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchStopJobRun", input)
	return &BatchStopJobRunFuture{Future: future}
}

func (a *stub) BatchUpdatePartition(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) (*glue.BatchUpdatePartitionOutput, error) {
	var output glue.BatchUpdatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-BatchUpdatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdatePartitionAsync(ctx workflow.Context, input *glue.BatchUpdatePartitionInput) *BatchUpdatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-BatchUpdatePartition", input)
	return &BatchUpdatePartitionFuture{Future: future}
}

func (a *stub) CancelMLTaskRun(ctx workflow.Context, input *glue.CancelMLTaskRunInput) (*glue.CancelMLTaskRunOutput, error) {
	var output glue.CancelMLTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CancelMLTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelMLTaskRunAsync(ctx workflow.Context, input *glue.CancelMLTaskRunInput) *CancelMLTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CancelMLTaskRun", input)
	return &CancelMLTaskRunFuture{Future: future}
}

func (a *stub) CheckSchemaVersionValidity(ctx workflow.Context, input *glue.CheckSchemaVersionValidityInput) (*glue.CheckSchemaVersionValidityOutput, error) {
	var output glue.CheckSchemaVersionValidityOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CheckSchemaVersionValidity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckSchemaVersionValidityAsync(ctx workflow.Context, input *glue.CheckSchemaVersionValidityInput) *CheckSchemaVersionValidityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CheckSchemaVersionValidity", input)
	return &CheckSchemaVersionValidityFuture{Future: future}
}

func (a *stub) CreateClassifier(ctx workflow.Context, input *glue.CreateClassifierInput) (*glue.CreateClassifierOutput, error) {
	var output glue.CreateClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClassifierAsync(ctx workflow.Context, input *glue.CreateClassifierInput) *CreateClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateClassifier", input)
	return &CreateClassifierFuture{Future: future}
}

func (a *stub) CreateConnection(ctx workflow.Context, input *glue.CreateConnectionInput) (*glue.CreateConnectionOutput, error) {
	var output glue.CreateConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAsync(ctx workflow.Context, input *glue.CreateConnectionInput) *CreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateConnection", input)
	return &CreateConnectionFuture{Future: future}
}

func (a *stub) CreateCrawler(ctx workflow.Context, input *glue.CreateCrawlerInput) (*glue.CreateCrawlerOutput, error) {
	var output glue.CreateCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCrawlerAsync(ctx workflow.Context, input *glue.CreateCrawlerInput) *CreateCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateCrawler", input)
	return &CreateCrawlerFuture{Future: future}
}

func (a *stub) CreateDatabase(ctx workflow.Context, input *glue.CreateDatabaseInput) (*glue.CreateDatabaseOutput, error) {
	var output glue.CreateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatabaseAsync(ctx workflow.Context, input *glue.CreateDatabaseInput) *CreateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateDatabase", input)
	return &CreateDatabaseFuture{Future: future}
}

func (a *stub) CreateDevEndpoint(ctx workflow.Context, input *glue.CreateDevEndpointInput) (*glue.CreateDevEndpointOutput, error) {
	var output glue.CreateDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDevEndpointAsync(ctx workflow.Context, input *glue.CreateDevEndpointInput) *CreateDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateDevEndpoint", input)
	return &CreateDevEndpointFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *glue.CreateJobInput) (*glue.CreateJobOutput, error) {
	var output glue.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *glue.CreateJobInput) *CreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateJob", input)
	return &CreateJobFuture{Future: future}
}

func (a *stub) CreateMLTransform(ctx workflow.Context, input *glue.CreateMLTransformInput) (*glue.CreateMLTransformOutput, error) {
	var output glue.CreateMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMLTransformAsync(ctx workflow.Context, input *glue.CreateMLTransformInput) *CreateMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateMLTransform", input)
	return &CreateMLTransformFuture{Future: future}
}

func (a *stub) CreatePartition(ctx workflow.Context, input *glue.CreatePartitionInput) (*glue.CreatePartitionOutput, error) {
	var output glue.CreatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePartitionAsync(ctx workflow.Context, input *glue.CreatePartitionInput) *CreatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreatePartition", input)
	return &CreatePartitionFuture{Future: future}
}

func (a *stub) CreatePartitionIndex(ctx workflow.Context, input *glue.CreatePartitionIndexInput) (*glue.CreatePartitionIndexOutput, error) {
	var output glue.CreatePartitionIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreatePartitionIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePartitionIndexAsync(ctx workflow.Context, input *glue.CreatePartitionIndexInput) *CreatePartitionIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreatePartitionIndex", input)
	return &CreatePartitionIndexFuture{Future: future}
}

func (a *stub) CreateRegistry(ctx workflow.Context, input *glue.CreateRegistryInput) (*glue.CreateRegistryOutput, error) {
	var output glue.CreateRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegistryAsync(ctx workflow.Context, input *glue.CreateRegistryInput) *CreateRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateRegistry", input)
	return &CreateRegistryFuture{Future: future}
}

func (a *stub) CreateSchema(ctx workflow.Context, input *glue.CreateSchemaInput) (*glue.CreateSchemaOutput, error) {
	var output glue.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSchemaAsync(ctx workflow.Context, input *glue.CreateSchemaInput) *CreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateSchema", input)
	return &CreateSchemaFuture{Future: future}
}

func (a *stub) CreateScript(ctx workflow.Context, input *glue.CreateScriptInput) (*glue.CreateScriptOutput, error) {
	var output glue.CreateScriptOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateScript", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScriptAsync(ctx workflow.Context, input *glue.CreateScriptInput) *CreateScriptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateScript", input)
	return &CreateScriptFuture{Future: future}
}

func (a *stub) CreateSecurityConfiguration(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) (*glue.CreateSecurityConfigurationOutput, error) {
	var output glue.CreateSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSecurityConfigurationAsync(ctx workflow.Context, input *glue.CreateSecurityConfigurationInput) *CreateSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateSecurityConfiguration", input)
	return &CreateSecurityConfigurationFuture{Future: future}
}

func (a *stub) CreateTable(ctx workflow.Context, input *glue.CreateTableInput) (*glue.CreateTableOutput, error) {
	var output glue.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTableAsync(ctx workflow.Context, input *glue.CreateTableInput) *CreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateTable", input)
	return &CreateTableFuture{Future: future}
}

func (a *stub) CreateTrigger(ctx workflow.Context, input *glue.CreateTriggerInput) (*glue.CreateTriggerOutput, error) {
	var output glue.CreateTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTriggerAsync(ctx workflow.Context, input *glue.CreateTriggerInput) *CreateTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateTrigger", input)
	return &CreateTriggerFuture{Future: future}
}

func (a *stub) CreateUserDefinedFunction(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) (*glue.CreateUserDefinedFunctionOutput, error) {
	var output glue.CreateUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.CreateUserDefinedFunctionInput) *CreateUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateUserDefinedFunction", input)
	return &CreateUserDefinedFunctionFuture{Future: future}
}

func (a *stub) CreateWorkflow(ctx workflow.Context, input *glue.CreateWorkflowInput) (*glue.CreateWorkflowOutput, error) {
	var output glue.CreateWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-CreateWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkflowAsync(ctx workflow.Context, input *glue.CreateWorkflowInput) *CreateWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-CreateWorkflow", input)
	return &CreateWorkflowFuture{Future: future}
}

func (a *stub) DeleteClassifier(ctx workflow.Context, input *glue.DeleteClassifierInput) (*glue.DeleteClassifierOutput, error) {
	var output glue.DeleteClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClassifierAsync(ctx workflow.Context, input *glue.DeleteClassifierInput) *DeleteClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteClassifier", input)
	return &DeleteClassifierFuture{Future: future}
}

func (a *stub) DeleteColumnStatisticsForPartition(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	var output glue.DeleteColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForPartitionInput) *DeleteColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteColumnStatisticsForPartition", input)
	return &DeleteColumnStatisticsForPartitionFuture{Future: future}
}

func (a *stub) DeleteColumnStatisticsForTable(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	var output glue.DeleteColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.DeleteColumnStatisticsForTableInput) *DeleteColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteColumnStatisticsForTable", input)
	return &DeleteColumnStatisticsForTableFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *glue.DeleteConnectionInput) (*glue.DeleteConnectionOutput, error) {
	var output glue.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *glue.DeleteConnectionInput) *DeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteConnection", input)
	return &DeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteCrawler(ctx workflow.Context, input *glue.DeleteCrawlerInput) (*glue.DeleteCrawlerOutput, error) {
	var output glue.DeleteCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCrawlerAsync(ctx workflow.Context, input *glue.DeleteCrawlerInput) *DeleteCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteCrawler", input)
	return &DeleteCrawlerFuture{Future: future}
}

func (a *stub) DeleteDatabase(ctx workflow.Context, input *glue.DeleteDatabaseInput) (*glue.DeleteDatabaseOutput, error) {
	var output glue.DeleteDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatabaseAsync(ctx workflow.Context, input *glue.DeleteDatabaseInput) *DeleteDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteDatabase", input)
	return &DeleteDatabaseFuture{Future: future}
}

func (a *stub) DeleteDevEndpoint(ctx workflow.Context, input *glue.DeleteDevEndpointInput) (*glue.DeleteDevEndpointOutput, error) {
	var output glue.DeleteDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDevEndpointAsync(ctx workflow.Context, input *glue.DeleteDevEndpointInput) *DeleteDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteDevEndpoint", input)
	return &DeleteDevEndpointFuture{Future: future}
}

func (a *stub) DeleteJob(ctx workflow.Context, input *glue.DeleteJobInput) (*glue.DeleteJobOutput, error) {
	var output glue.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobAsync(ctx workflow.Context, input *glue.DeleteJobInput) *DeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteJob", input)
	return &DeleteJobFuture{Future: future}
}

func (a *stub) DeleteMLTransform(ctx workflow.Context, input *glue.DeleteMLTransformInput) (*glue.DeleteMLTransformOutput, error) {
	var output glue.DeleteMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMLTransformAsync(ctx workflow.Context, input *glue.DeleteMLTransformInput) *DeleteMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteMLTransform", input)
	return &DeleteMLTransformFuture{Future: future}
}

func (a *stub) DeletePartition(ctx workflow.Context, input *glue.DeletePartitionInput) (*glue.DeletePartitionOutput, error) {
	var output glue.DeletePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeletePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePartitionAsync(ctx workflow.Context, input *glue.DeletePartitionInput) *DeletePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeletePartition", input)
	return &DeletePartitionFuture{Future: future}
}

func (a *stub) DeletePartitionIndex(ctx workflow.Context, input *glue.DeletePartitionIndexInput) (*glue.DeletePartitionIndexOutput, error) {
	var output glue.DeletePartitionIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeletePartitionIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePartitionIndexAsync(ctx workflow.Context, input *glue.DeletePartitionIndexInput) *DeletePartitionIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeletePartitionIndex", input)
	return &DeletePartitionIndexFuture{Future: future}
}

func (a *stub) DeleteRegistry(ctx workflow.Context, input *glue.DeleteRegistryInput) (*glue.DeleteRegistryOutput, error) {
	var output glue.DeleteRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegistryAsync(ctx workflow.Context, input *glue.DeleteRegistryInput) *DeleteRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteRegistry", input)
	return &DeleteRegistryFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) (*glue.DeleteResourcePolicyOutput, error) {
	var output glue.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *glue.DeleteResourcePolicyInput) *DeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteResourcePolicy", input)
	return &DeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteSchema(ctx workflow.Context, input *glue.DeleteSchemaInput) (*glue.DeleteSchemaOutput, error) {
	var output glue.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaAsync(ctx workflow.Context, input *glue.DeleteSchemaInput) *DeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSchema", input)
	return &DeleteSchemaFuture{Future: future}
}

func (a *stub) DeleteSchemaVersions(ctx workflow.Context, input *glue.DeleteSchemaVersionsInput) (*glue.DeleteSchemaVersionsOutput, error) {
	var output glue.DeleteSchemaVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSchemaVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaVersionsAsync(ctx workflow.Context, input *glue.DeleteSchemaVersionsInput) *DeleteSchemaVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSchemaVersions", input)
	return &DeleteSchemaVersionsFuture{Future: future}
}

func (a *stub) DeleteSecurityConfiguration(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) (*glue.DeleteSecurityConfigurationOutput, error) {
	var output glue.DeleteSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSecurityConfigurationAsync(ctx workflow.Context, input *glue.DeleteSecurityConfigurationInput) *DeleteSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteSecurityConfiguration", input)
	return &DeleteSecurityConfigurationFuture{Future: future}
}

func (a *stub) DeleteTable(ctx workflow.Context, input *glue.DeleteTableInput) (*glue.DeleteTableOutput, error) {
	var output glue.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTableAsync(ctx workflow.Context, input *glue.DeleteTableInput) *DeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTable", input)
	return &DeleteTableFuture{Future: future}
}

func (a *stub) DeleteTableVersion(ctx workflow.Context, input *glue.DeleteTableVersionInput) (*glue.DeleteTableVersionOutput, error) {
	var output glue.DeleteTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTableVersionAsync(ctx workflow.Context, input *glue.DeleteTableVersionInput) *DeleteTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTableVersion", input)
	return &DeleteTableVersionFuture{Future: future}
}

func (a *stub) DeleteTrigger(ctx workflow.Context, input *glue.DeleteTriggerInput) (*glue.DeleteTriggerOutput, error) {
	var output glue.DeleteTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTriggerAsync(ctx workflow.Context, input *glue.DeleteTriggerInput) *DeleteTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteTrigger", input)
	return &DeleteTriggerFuture{Future: future}
}

func (a *stub) DeleteUserDefinedFunction(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) (*glue.DeleteUserDefinedFunctionOutput, error) {
	var output glue.DeleteUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserDefinedFunctionAsync(ctx workflow.Context, input *glue.DeleteUserDefinedFunctionInput) *DeleteUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteUserDefinedFunction", input)
	return &DeleteUserDefinedFunctionFuture{Future: future}
}

func (a *stub) DeleteWorkflow(ctx workflow.Context, input *glue.DeleteWorkflowInput) (*glue.DeleteWorkflowOutput, error) {
	var output glue.DeleteWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-DeleteWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkflowAsync(ctx workflow.Context, input *glue.DeleteWorkflowInput) *DeleteWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-DeleteWorkflow", input)
	return &DeleteWorkflowFuture{Future: future}
}

func (a *stub) GetCatalogImportStatus(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) (*glue.GetCatalogImportStatusOutput, error) {
	var output glue.GetCatalogImportStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetCatalogImportStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCatalogImportStatusAsync(ctx workflow.Context, input *glue.GetCatalogImportStatusInput) *GetCatalogImportStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetCatalogImportStatus", input)
	return &GetCatalogImportStatusFuture{Future: future}
}

func (a *stub) GetClassifier(ctx workflow.Context, input *glue.GetClassifierInput) (*glue.GetClassifierOutput, error) {
	var output glue.GetClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClassifierAsync(ctx workflow.Context, input *glue.GetClassifierInput) *GetClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetClassifier", input)
	return &GetClassifierFuture{Future: future}
}

func (a *stub) GetClassifiers(ctx workflow.Context, input *glue.GetClassifiersInput) (*glue.GetClassifiersOutput, error) {
	var output glue.GetClassifiersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetClassifiers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClassifiersAsync(ctx workflow.Context, input *glue.GetClassifiersInput) *GetClassifiersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetClassifiers", input)
	return &GetClassifiersFuture{Future: future}
}

func (a *stub) GetColumnStatisticsForPartition(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	var output glue.GetColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForPartitionInput) *GetColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetColumnStatisticsForPartition", input)
	return &GetColumnStatisticsForPartitionFuture{Future: future}
}

func (a *stub) GetColumnStatisticsForTable(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) (*glue.GetColumnStatisticsForTableOutput, error) {
	var output glue.GetColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.GetColumnStatisticsForTableInput) *GetColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetColumnStatisticsForTable", input)
	return &GetColumnStatisticsForTableFuture{Future: future}
}

func (a *stub) GetConnection(ctx workflow.Context, input *glue.GetConnectionInput) (*glue.GetConnectionOutput, error) {
	var output glue.GetConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectionAsync(ctx workflow.Context, input *glue.GetConnectionInput) *GetConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetConnection", input)
	return &GetConnectionFuture{Future: future}
}

func (a *stub) GetConnections(ctx workflow.Context, input *glue.GetConnectionsInput) (*glue.GetConnectionsOutput, error) {
	var output glue.GetConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectionsAsync(ctx workflow.Context, input *glue.GetConnectionsInput) *GetConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetConnections", input)
	return &GetConnectionsFuture{Future: future}
}

func (a *stub) GetCrawler(ctx workflow.Context, input *glue.GetCrawlerInput) (*glue.GetCrawlerOutput, error) {
	var output glue.GetCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCrawlerAsync(ctx workflow.Context, input *glue.GetCrawlerInput) *GetCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawler", input)
	return &GetCrawlerFuture{Future: future}
}

func (a *stub) GetCrawlerMetrics(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) (*glue.GetCrawlerMetricsOutput, error) {
	var output glue.GetCrawlerMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawlerMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCrawlerMetricsAsync(ctx workflow.Context, input *glue.GetCrawlerMetricsInput) *GetCrawlerMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawlerMetrics", input)
	return &GetCrawlerMetricsFuture{Future: future}
}

func (a *stub) GetCrawlers(ctx workflow.Context, input *glue.GetCrawlersInput) (*glue.GetCrawlersOutput, error) {
	var output glue.GetCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCrawlersAsync(ctx workflow.Context, input *glue.GetCrawlersInput) *GetCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetCrawlers", input)
	return &GetCrawlersFuture{Future: future}
}

func (a *stub) GetDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	var output glue.GetDataCatalogEncryptionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDataCatalogEncryptionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.GetDataCatalogEncryptionSettingsInput) *GetDataCatalogEncryptionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDataCatalogEncryptionSettings", input)
	return &GetDataCatalogEncryptionSettingsFuture{Future: future}
}

func (a *stub) GetDatabase(ctx workflow.Context, input *glue.GetDatabaseInput) (*glue.GetDatabaseOutput, error) {
	var output glue.GetDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDatabaseAsync(ctx workflow.Context, input *glue.GetDatabaseInput) *GetDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDatabase", input)
	return &GetDatabaseFuture{Future: future}
}

func (a *stub) GetDatabases(ctx workflow.Context, input *glue.GetDatabasesInput) (*glue.GetDatabasesOutput, error) {
	var output glue.GetDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDatabasesAsync(ctx workflow.Context, input *glue.GetDatabasesInput) *GetDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDatabases", input)
	return &GetDatabasesFuture{Future: future}
}

func (a *stub) GetDataflowGraph(ctx workflow.Context, input *glue.GetDataflowGraphInput) (*glue.GetDataflowGraphOutput, error) {
	var output glue.GetDataflowGraphOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDataflowGraph", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataflowGraphAsync(ctx workflow.Context, input *glue.GetDataflowGraphInput) *GetDataflowGraphFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDataflowGraph", input)
	return &GetDataflowGraphFuture{Future: future}
}

func (a *stub) GetDevEndpoint(ctx workflow.Context, input *glue.GetDevEndpointInput) (*glue.GetDevEndpointOutput, error) {
	var output glue.GetDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevEndpointAsync(ctx workflow.Context, input *glue.GetDevEndpointInput) *GetDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDevEndpoint", input)
	return &GetDevEndpointFuture{Future: future}
}

func (a *stub) GetDevEndpoints(ctx workflow.Context, input *glue.GetDevEndpointsInput) (*glue.GetDevEndpointsOutput, error) {
	var output glue.GetDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevEndpointsAsync(ctx workflow.Context, input *glue.GetDevEndpointsInput) *GetDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetDevEndpoints", input)
	return &GetDevEndpointsFuture{Future: future}
}

func (a *stub) GetJob(ctx workflow.Context, input *glue.GetJobInput) (*glue.GetJobOutput, error) {
	var output glue.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobAsync(ctx workflow.Context, input *glue.GetJobInput) *GetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetJob", input)
	return &GetJobFuture{Future: future}
}

func (a *stub) GetJobBookmark(ctx workflow.Context, input *glue.GetJobBookmarkInput) (*glue.GetJobBookmarkOutput, error) {
	var output glue.GetJobBookmarkOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetJobBookmark", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobBookmarkAsync(ctx workflow.Context, input *glue.GetJobBookmarkInput) *GetJobBookmarkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetJobBookmark", input)
	return &GetJobBookmarkFuture{Future: future}
}

func (a *stub) GetJobRun(ctx workflow.Context, input *glue.GetJobRunInput) (*glue.GetJobRunOutput, error) {
	var output glue.GetJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobRunAsync(ctx workflow.Context, input *glue.GetJobRunInput) *GetJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetJobRun", input)
	return &GetJobRunFuture{Future: future}
}

func (a *stub) GetJobRuns(ctx workflow.Context, input *glue.GetJobRunsInput) (*glue.GetJobRunsOutput, error) {
	var output glue.GetJobRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetJobRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobRunsAsync(ctx workflow.Context, input *glue.GetJobRunsInput) *GetJobRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetJobRuns", input)
	return &GetJobRunsFuture{Future: future}
}

func (a *stub) GetJobs(ctx workflow.Context, input *glue.GetJobsInput) (*glue.GetJobsOutput, error) {
	var output glue.GetJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobsAsync(ctx workflow.Context, input *glue.GetJobsInput) *GetJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetJobs", input)
	return &GetJobsFuture{Future: future}
}

func (a *stub) GetMLTaskRun(ctx workflow.Context, input *glue.GetMLTaskRunInput) (*glue.GetMLTaskRunOutput, error) {
	var output glue.GetMLTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMLTaskRunAsync(ctx workflow.Context, input *glue.GetMLTaskRunInput) *GetMLTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTaskRun", input)
	return &GetMLTaskRunFuture{Future: future}
}

func (a *stub) GetMLTaskRuns(ctx workflow.Context, input *glue.GetMLTaskRunsInput) (*glue.GetMLTaskRunsOutput, error) {
	var output glue.GetMLTaskRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTaskRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMLTaskRunsAsync(ctx workflow.Context, input *glue.GetMLTaskRunsInput) *GetMLTaskRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTaskRuns", input)
	return &GetMLTaskRunsFuture{Future: future}
}

func (a *stub) GetMLTransform(ctx workflow.Context, input *glue.GetMLTransformInput) (*glue.GetMLTransformOutput, error) {
	var output glue.GetMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMLTransformAsync(ctx workflow.Context, input *glue.GetMLTransformInput) *GetMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTransform", input)
	return &GetMLTransformFuture{Future: future}
}

func (a *stub) GetMLTransforms(ctx workflow.Context, input *glue.GetMLTransformsInput) (*glue.GetMLTransformsOutput, error) {
	var output glue.GetMLTransformsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTransforms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMLTransformsAsync(ctx workflow.Context, input *glue.GetMLTransformsInput) *GetMLTransformsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetMLTransforms", input)
	return &GetMLTransformsFuture{Future: future}
}

func (a *stub) GetMapping(ctx workflow.Context, input *glue.GetMappingInput) (*glue.GetMappingOutput, error) {
	var output glue.GetMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMappingAsync(ctx workflow.Context, input *glue.GetMappingInput) *GetMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetMapping", input)
	return &GetMappingFuture{Future: future}
}

func (a *stub) GetPartition(ctx workflow.Context, input *glue.GetPartitionInput) (*glue.GetPartitionOutput, error) {
	var output glue.GetPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPartitionAsync(ctx workflow.Context, input *glue.GetPartitionInput) *GetPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetPartition", input)
	return &GetPartitionFuture{Future: future}
}

func (a *stub) GetPartitionIndexes(ctx workflow.Context, input *glue.GetPartitionIndexesInput) (*glue.GetPartitionIndexesOutput, error) {
	var output glue.GetPartitionIndexesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetPartitionIndexes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPartitionIndexesAsync(ctx workflow.Context, input *glue.GetPartitionIndexesInput) *GetPartitionIndexesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetPartitionIndexes", input)
	return &GetPartitionIndexesFuture{Future: future}
}

func (a *stub) GetPartitions(ctx workflow.Context, input *glue.GetPartitionsInput) (*glue.GetPartitionsOutput, error) {
	var output glue.GetPartitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetPartitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPartitionsAsync(ctx workflow.Context, input *glue.GetPartitionsInput) *GetPartitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetPartitions", input)
	return &GetPartitionsFuture{Future: future}
}

func (a *stub) GetPlan(ctx workflow.Context, input *glue.GetPlanInput) (*glue.GetPlanOutput, error) {
	var output glue.GetPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPlanAsync(ctx workflow.Context, input *glue.GetPlanInput) *GetPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetPlan", input)
	return &GetPlanFuture{Future: future}
}

func (a *stub) GetRegistry(ctx workflow.Context, input *glue.GetRegistryInput) (*glue.GetRegistryOutput, error) {
	var output glue.GetRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegistryAsync(ctx workflow.Context, input *glue.GetRegistryInput) *GetRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetRegistry", input)
	return &GetRegistryFuture{Future: future}
}

func (a *stub) GetResourcePolicies(ctx workflow.Context, input *glue.GetResourcePoliciesInput) (*glue.GetResourcePoliciesOutput, error) {
	var output glue.GetResourcePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetResourcePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePoliciesAsync(ctx workflow.Context, input *glue.GetResourcePoliciesInput) *GetResourcePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetResourcePolicies", input)
	return &GetResourcePoliciesFuture{Future: future}
}

func (a *stub) GetResourcePolicy(ctx workflow.Context, input *glue.GetResourcePolicyInput) (*glue.GetResourcePolicyOutput, error) {
	var output glue.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePolicyAsync(ctx workflow.Context, input *glue.GetResourcePolicyInput) *GetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetResourcePolicy", input)
	return &GetResourcePolicyFuture{Future: future}
}

func (a *stub) GetSchema(ctx workflow.Context, input *glue.GetSchemaInput) (*glue.GetSchemaOutput, error) {
	var output glue.GetSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaAsync(ctx workflow.Context, input *glue.GetSchemaInput) *GetSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSchema", input)
	return &GetSchemaFuture{Future: future}
}

func (a *stub) GetSchemaByDefinition(ctx workflow.Context, input *glue.GetSchemaByDefinitionInput) (*glue.GetSchemaByDefinitionOutput, error) {
	var output glue.GetSchemaByDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaByDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaByDefinitionAsync(ctx workflow.Context, input *glue.GetSchemaByDefinitionInput) *GetSchemaByDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaByDefinition", input)
	return &GetSchemaByDefinitionFuture{Future: future}
}

func (a *stub) GetSchemaVersion(ctx workflow.Context, input *glue.GetSchemaVersionInput) (*glue.GetSchemaVersionOutput, error) {
	var output glue.GetSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaVersionAsync(ctx workflow.Context, input *glue.GetSchemaVersionInput) *GetSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaVersion", input)
	return &GetSchemaVersionFuture{Future: future}
}

func (a *stub) GetSchemaVersionsDiff(ctx workflow.Context, input *glue.GetSchemaVersionsDiffInput) (*glue.GetSchemaVersionsDiffOutput, error) {
	var output glue.GetSchemaVersionsDiffOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaVersionsDiff", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaVersionsDiffAsync(ctx workflow.Context, input *glue.GetSchemaVersionsDiffInput) *GetSchemaVersionsDiffFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSchemaVersionsDiff", input)
	return &GetSchemaVersionsDiffFuture{Future: future}
}

func (a *stub) GetSecurityConfiguration(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) (*glue.GetSecurityConfigurationOutput, error) {
	var output glue.GetSecurityConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSecurityConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSecurityConfigurationAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationInput) *GetSecurityConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSecurityConfiguration", input)
	return &GetSecurityConfigurationFuture{Future: future}
}

func (a *stub) GetSecurityConfigurations(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) (*glue.GetSecurityConfigurationsOutput, error) {
	var output glue.GetSecurityConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetSecurityConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSecurityConfigurationsAsync(ctx workflow.Context, input *glue.GetSecurityConfigurationsInput) *GetSecurityConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetSecurityConfigurations", input)
	return &GetSecurityConfigurationsFuture{Future: future}
}

func (a *stub) GetTable(ctx workflow.Context, input *glue.GetTableInput) (*glue.GetTableOutput, error) {
	var output glue.GetTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTableAsync(ctx workflow.Context, input *glue.GetTableInput) *GetTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTable", input)
	return &GetTableFuture{Future: future}
}

func (a *stub) GetTableVersion(ctx workflow.Context, input *glue.GetTableVersionInput) (*glue.GetTableVersionOutput, error) {
	var output glue.GetTableVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTableVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTableVersionAsync(ctx workflow.Context, input *glue.GetTableVersionInput) *GetTableVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTableVersion", input)
	return &GetTableVersionFuture{Future: future}
}

func (a *stub) GetTableVersions(ctx workflow.Context, input *glue.GetTableVersionsInput) (*glue.GetTableVersionsOutput, error) {
	var output glue.GetTableVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTableVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTableVersionsAsync(ctx workflow.Context, input *glue.GetTableVersionsInput) *GetTableVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTableVersions", input)
	return &GetTableVersionsFuture{Future: future}
}

func (a *stub) GetTables(ctx workflow.Context, input *glue.GetTablesInput) (*glue.GetTablesOutput, error) {
	var output glue.GetTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTablesAsync(ctx workflow.Context, input *glue.GetTablesInput) *GetTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTables", input)
	return &GetTablesFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *glue.GetTagsInput) (*glue.GetTagsOutput, error) {
	var output glue.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *glue.GetTagsInput) *GetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTags", input)
	return &GetTagsFuture{Future: future}
}

func (a *stub) GetTrigger(ctx workflow.Context, input *glue.GetTriggerInput) (*glue.GetTriggerOutput, error) {
	var output glue.GetTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTriggerAsync(ctx workflow.Context, input *glue.GetTriggerInput) *GetTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTrigger", input)
	return &GetTriggerFuture{Future: future}
}

func (a *stub) GetTriggers(ctx workflow.Context, input *glue.GetTriggersInput) (*glue.GetTriggersOutput, error) {
	var output glue.GetTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTriggersAsync(ctx workflow.Context, input *glue.GetTriggersInput) *GetTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetTriggers", input)
	return &GetTriggersFuture{Future: future}
}

func (a *stub) GetUserDefinedFunction(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) (*glue.GetUserDefinedFunctionOutput, error) {
	var output glue.GetUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserDefinedFunctionAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionInput) *GetUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetUserDefinedFunction", input)
	return &GetUserDefinedFunctionFuture{Future: future}
}

func (a *stub) GetUserDefinedFunctions(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) (*glue.GetUserDefinedFunctionsOutput, error) {
	var output glue.GetUserDefinedFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetUserDefinedFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserDefinedFunctionsAsync(ctx workflow.Context, input *glue.GetUserDefinedFunctionsInput) *GetUserDefinedFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetUserDefinedFunctions", input)
	return &GetUserDefinedFunctionsFuture{Future: future}
}

func (a *stub) GetWorkflow(ctx workflow.Context, input *glue.GetWorkflowInput) (*glue.GetWorkflowOutput, error) {
	var output glue.GetWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkflowAsync(ctx workflow.Context, input *glue.GetWorkflowInput) *GetWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflow", input)
	return &GetWorkflowFuture{Future: future}
}

func (a *stub) GetWorkflowRun(ctx workflow.Context, input *glue.GetWorkflowRunInput) (*glue.GetWorkflowRunOutput, error) {
	var output glue.GetWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkflowRunAsync(ctx workflow.Context, input *glue.GetWorkflowRunInput) *GetWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRun", input)
	return &GetWorkflowRunFuture{Future: future}
}

func (a *stub) GetWorkflowRunProperties(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) (*glue.GetWorkflowRunPropertiesOutput, error) {
	var output glue.GetWorkflowRunPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRunProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.GetWorkflowRunPropertiesInput) *GetWorkflowRunPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRunProperties", input)
	return &GetWorkflowRunPropertiesFuture{Future: future}
}

func (a *stub) GetWorkflowRuns(ctx workflow.Context, input *glue.GetWorkflowRunsInput) (*glue.GetWorkflowRunsOutput, error) {
	var output glue.GetWorkflowRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkflowRunsAsync(ctx workflow.Context, input *glue.GetWorkflowRunsInput) *GetWorkflowRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-GetWorkflowRuns", input)
	return &GetWorkflowRunsFuture{Future: future}
}

func (a *stub) ImportCatalogToGlue(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) (*glue.ImportCatalogToGlueOutput, error) {
	var output glue.ImportCatalogToGlueOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ImportCatalogToGlue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportCatalogToGlueAsync(ctx workflow.Context, input *glue.ImportCatalogToGlueInput) *ImportCatalogToGlueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ImportCatalogToGlue", input)
	return &ImportCatalogToGlueFuture{Future: future}
}

func (a *stub) ListCrawlers(ctx workflow.Context, input *glue.ListCrawlersInput) (*glue.ListCrawlersOutput, error) {
	var output glue.ListCrawlersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListCrawlers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCrawlersAsync(ctx workflow.Context, input *glue.ListCrawlersInput) *ListCrawlersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListCrawlers", input)
	return &ListCrawlersFuture{Future: future}
}

func (a *stub) ListDevEndpoints(ctx workflow.Context, input *glue.ListDevEndpointsInput) (*glue.ListDevEndpointsOutput, error) {
	var output glue.ListDevEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListDevEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevEndpointsAsync(ctx workflow.Context, input *glue.ListDevEndpointsInput) *ListDevEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListDevEndpoints", input)
	return &ListDevEndpointsFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *glue.ListJobsInput) (*glue.ListJobsOutput, error) {
	var output glue.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *glue.ListJobsInput) *ListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListJobs", input)
	return &ListJobsFuture{Future: future}
}

func (a *stub) ListMLTransforms(ctx workflow.Context, input *glue.ListMLTransformsInput) (*glue.ListMLTransformsOutput, error) {
	var output glue.ListMLTransformsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListMLTransforms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMLTransformsAsync(ctx workflow.Context, input *glue.ListMLTransformsInput) *ListMLTransformsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListMLTransforms", input)
	return &ListMLTransformsFuture{Future: future}
}

func (a *stub) ListRegistries(ctx workflow.Context, input *glue.ListRegistriesInput) (*glue.ListRegistriesOutput, error) {
	var output glue.ListRegistriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListRegistries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegistriesAsync(ctx workflow.Context, input *glue.ListRegistriesInput) *ListRegistriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListRegistries", input)
	return &ListRegistriesFuture{Future: future}
}

func (a *stub) ListSchemaVersions(ctx workflow.Context, input *glue.ListSchemaVersionsInput) (*glue.ListSchemaVersionsOutput, error) {
	var output glue.ListSchemaVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListSchemaVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemaVersionsAsync(ctx workflow.Context, input *glue.ListSchemaVersionsInput) *ListSchemaVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListSchemaVersions", input)
	return &ListSchemaVersionsFuture{Future: future}
}

func (a *stub) ListSchemas(ctx workflow.Context, input *glue.ListSchemasInput) (*glue.ListSchemasOutput, error) {
	var output glue.ListSchemasOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListSchemas", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemasAsync(ctx workflow.Context, input *glue.ListSchemasInput) *ListSchemasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListSchemas", input)
	return &ListSchemasFuture{Future: future}
}

func (a *stub) ListTriggers(ctx workflow.Context, input *glue.ListTriggersInput) (*glue.ListTriggersOutput, error) {
	var output glue.ListTriggersOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListTriggers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTriggersAsync(ctx workflow.Context, input *glue.ListTriggersInput) *ListTriggersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListTriggers", input)
	return &ListTriggersFuture{Future: future}
}

func (a *stub) ListWorkflows(ctx workflow.Context, input *glue.ListWorkflowsInput) (*glue.ListWorkflowsOutput, error) {
	var output glue.ListWorkflowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ListWorkflows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkflowsAsync(ctx workflow.Context, input *glue.ListWorkflowsInput) *ListWorkflowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ListWorkflows", input)
	return &ListWorkflowsFuture{Future: future}
}

func (a *stub) PutDataCatalogEncryptionSettings(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	var output glue.PutDataCatalogEncryptionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-PutDataCatalogEncryptionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDataCatalogEncryptionSettingsAsync(ctx workflow.Context, input *glue.PutDataCatalogEncryptionSettingsInput) *PutDataCatalogEncryptionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-PutDataCatalogEncryptionSettings", input)
	return &PutDataCatalogEncryptionSettingsFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *glue.PutResourcePolicyInput) (*glue.PutResourcePolicyOutput, error) {
	var output glue.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *glue.PutResourcePolicyInput) *PutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-PutResourcePolicy", input)
	return &PutResourcePolicyFuture{Future: future}
}

func (a *stub) PutSchemaVersionMetadata(ctx workflow.Context, input *glue.PutSchemaVersionMetadataInput) (*glue.PutSchemaVersionMetadataOutput, error) {
	var output glue.PutSchemaVersionMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-PutSchemaVersionMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSchemaVersionMetadataAsync(ctx workflow.Context, input *glue.PutSchemaVersionMetadataInput) *PutSchemaVersionMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-PutSchemaVersionMetadata", input)
	return &PutSchemaVersionMetadataFuture{Future: future}
}

func (a *stub) PutWorkflowRunProperties(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) (*glue.PutWorkflowRunPropertiesOutput, error) {
	var output glue.PutWorkflowRunPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-PutWorkflowRunProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutWorkflowRunPropertiesAsync(ctx workflow.Context, input *glue.PutWorkflowRunPropertiesInput) *PutWorkflowRunPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-PutWorkflowRunProperties", input)
	return &PutWorkflowRunPropertiesFuture{Future: future}
}

func (a *stub) QuerySchemaVersionMetadata(ctx workflow.Context, input *glue.QuerySchemaVersionMetadataInput) (*glue.QuerySchemaVersionMetadataOutput, error) {
	var output glue.QuerySchemaVersionMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-QuerySchemaVersionMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) QuerySchemaVersionMetadataAsync(ctx workflow.Context, input *glue.QuerySchemaVersionMetadataInput) *QuerySchemaVersionMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-QuerySchemaVersionMetadata", input)
	return &QuerySchemaVersionMetadataFuture{Future: future}
}

func (a *stub) RegisterSchemaVersion(ctx workflow.Context, input *glue.RegisterSchemaVersionInput) (*glue.RegisterSchemaVersionOutput, error) {
	var output glue.RegisterSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-RegisterSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterSchemaVersionAsync(ctx workflow.Context, input *glue.RegisterSchemaVersionInput) *RegisterSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-RegisterSchemaVersion", input)
	return &RegisterSchemaVersionFuture{Future: future}
}

func (a *stub) RemoveSchemaVersionMetadata(ctx workflow.Context, input *glue.RemoveSchemaVersionMetadataInput) (*glue.RemoveSchemaVersionMetadataOutput, error) {
	var output glue.RemoveSchemaVersionMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-RemoveSchemaVersionMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveSchemaVersionMetadataAsync(ctx workflow.Context, input *glue.RemoveSchemaVersionMetadataInput) *RemoveSchemaVersionMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-RemoveSchemaVersionMetadata", input)
	return &RemoveSchemaVersionMetadataFuture{Future: future}
}

func (a *stub) ResetJobBookmark(ctx workflow.Context, input *glue.ResetJobBookmarkInput) (*glue.ResetJobBookmarkOutput, error) {
	var output glue.ResetJobBookmarkOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ResetJobBookmark", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetJobBookmarkAsync(ctx workflow.Context, input *glue.ResetJobBookmarkInput) *ResetJobBookmarkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ResetJobBookmark", input)
	return &ResetJobBookmarkFuture{Future: future}
}

func (a *stub) ResumeWorkflowRun(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) (*glue.ResumeWorkflowRunOutput, error) {
	var output glue.ResumeWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-ResumeWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeWorkflowRunAsync(ctx workflow.Context, input *glue.ResumeWorkflowRunInput) *ResumeWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-ResumeWorkflowRun", input)
	return &ResumeWorkflowRunFuture{Future: future}
}

func (a *stub) SearchTables(ctx workflow.Context, input *glue.SearchTablesInput) (*glue.SearchTablesOutput, error) {
	var output glue.SearchTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-SearchTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchTablesAsync(ctx workflow.Context, input *glue.SearchTablesInput) *SearchTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-SearchTables", input)
	return &SearchTablesFuture{Future: future}
}

func (a *stub) StartCrawler(ctx workflow.Context, input *glue.StartCrawlerInput) (*glue.StartCrawlerOutput, error) {
	var output glue.StartCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCrawlerAsync(ctx workflow.Context, input *glue.StartCrawlerInput) *StartCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartCrawler", input)
	return &StartCrawlerFuture{Future: future}
}

func (a *stub) StartCrawlerSchedule(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) (*glue.StartCrawlerScheduleOutput, error) {
	var output glue.StartCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCrawlerScheduleAsync(ctx workflow.Context, input *glue.StartCrawlerScheduleInput) *StartCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartCrawlerSchedule", input)
	return &StartCrawlerScheduleFuture{Future: future}
}

func (a *stub) StartExportLabelsTaskRun(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) (*glue.StartExportLabelsTaskRunOutput, error) {
	var output glue.StartExportLabelsTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartExportLabelsTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartExportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartExportLabelsTaskRunInput) *StartExportLabelsTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartExportLabelsTaskRun", input)
	return &StartExportLabelsTaskRunFuture{Future: future}
}

func (a *stub) StartImportLabelsTaskRun(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) (*glue.StartImportLabelsTaskRunOutput, error) {
	var output glue.StartImportLabelsTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartImportLabelsTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImportLabelsTaskRunAsync(ctx workflow.Context, input *glue.StartImportLabelsTaskRunInput) *StartImportLabelsTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartImportLabelsTaskRun", input)
	return &StartImportLabelsTaskRunFuture{Future: future}
}

func (a *stub) StartJobRun(ctx workflow.Context, input *glue.StartJobRunInput) (*glue.StartJobRunOutput, error) {
	var output glue.StartJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartJobRunAsync(ctx workflow.Context, input *glue.StartJobRunInput) *StartJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartJobRun", input)
	return &StartJobRunFuture{Future: future}
}

func (a *stub) StartMLEvaluationTaskRun(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) (*glue.StartMLEvaluationTaskRunOutput, error) {
	var output glue.StartMLEvaluationTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartMLEvaluationTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMLEvaluationTaskRunAsync(ctx workflow.Context, input *glue.StartMLEvaluationTaskRunInput) *StartMLEvaluationTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartMLEvaluationTaskRun", input)
	return &StartMLEvaluationTaskRunFuture{Future: future}
}

func (a *stub) StartMLLabelingSetGenerationTaskRun(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	var output glue.StartMLLabelingSetGenerationTaskRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartMLLabelingSetGenerationTaskRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMLLabelingSetGenerationTaskRunAsync(ctx workflow.Context, input *glue.StartMLLabelingSetGenerationTaskRunInput) *StartMLLabelingSetGenerationTaskRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartMLLabelingSetGenerationTaskRun", input)
	return &StartMLLabelingSetGenerationTaskRunFuture{Future: future}
}

func (a *stub) StartTrigger(ctx workflow.Context, input *glue.StartTriggerInput) (*glue.StartTriggerOutput, error) {
	var output glue.StartTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTriggerAsync(ctx workflow.Context, input *glue.StartTriggerInput) *StartTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartTrigger", input)
	return &StartTriggerFuture{Future: future}
}

func (a *stub) StartWorkflowRun(ctx workflow.Context, input *glue.StartWorkflowRunInput) (*glue.StartWorkflowRunOutput, error) {
	var output glue.StartWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StartWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartWorkflowRunAsync(ctx workflow.Context, input *glue.StartWorkflowRunInput) *StartWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StartWorkflowRun", input)
	return &StartWorkflowRunFuture{Future: future}
}

func (a *stub) StopCrawler(ctx workflow.Context, input *glue.StopCrawlerInput) (*glue.StopCrawlerOutput, error) {
	var output glue.StopCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StopCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopCrawlerAsync(ctx workflow.Context, input *glue.StopCrawlerInput) *StopCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StopCrawler", input)
	return &StopCrawlerFuture{Future: future}
}

func (a *stub) StopCrawlerSchedule(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) (*glue.StopCrawlerScheduleOutput, error) {
	var output glue.StopCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StopCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopCrawlerScheduleAsync(ctx workflow.Context, input *glue.StopCrawlerScheduleInput) *StopCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StopCrawlerSchedule", input)
	return &StopCrawlerScheduleFuture{Future: future}
}

func (a *stub) StopTrigger(ctx workflow.Context, input *glue.StopTriggerInput) (*glue.StopTriggerOutput, error) {
	var output glue.StopTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StopTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTriggerAsync(ctx workflow.Context, input *glue.StopTriggerInput) *StopTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StopTrigger", input)
	return &StopTriggerFuture{Future: future}
}

func (a *stub) StopWorkflowRun(ctx workflow.Context, input *glue.StopWorkflowRunInput) (*glue.StopWorkflowRunOutput, error) {
	var output glue.StopWorkflowRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-StopWorkflowRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopWorkflowRunAsync(ctx workflow.Context, input *glue.StopWorkflowRunInput) *StopWorkflowRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-StopWorkflowRun", input)
	return &StopWorkflowRunFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *glue.TagResourceInput) (*glue.TagResourceOutput, error) {
	var output glue.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *glue.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *glue.UntagResourceInput) (*glue.UntagResourceOutput, error) {
	var output glue.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *glue.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateClassifier(ctx workflow.Context, input *glue.UpdateClassifierInput) (*glue.UpdateClassifierOutput, error) {
	var output glue.UpdateClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClassifierAsync(ctx workflow.Context, input *glue.UpdateClassifierInput) *UpdateClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateClassifier", input)
	return &UpdateClassifierFuture{Future: future}
}

func (a *stub) UpdateColumnStatisticsForPartition(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	var output glue.UpdateColumnStatisticsForPartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateColumnStatisticsForPartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateColumnStatisticsForPartitionAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForPartitionInput) *UpdateColumnStatisticsForPartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateColumnStatisticsForPartition", input)
	return &UpdateColumnStatisticsForPartitionFuture{Future: future}
}

func (a *stub) UpdateColumnStatisticsForTable(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	var output glue.UpdateColumnStatisticsForTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateColumnStatisticsForTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateColumnStatisticsForTableAsync(ctx workflow.Context, input *glue.UpdateColumnStatisticsForTableInput) *UpdateColumnStatisticsForTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateColumnStatisticsForTable", input)
	return &UpdateColumnStatisticsForTableFuture{Future: future}
}

func (a *stub) UpdateConnection(ctx workflow.Context, input *glue.UpdateConnectionInput) (*glue.UpdateConnectionOutput, error) {
	var output glue.UpdateConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectionAsync(ctx workflow.Context, input *glue.UpdateConnectionInput) *UpdateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateConnection", input)
	return &UpdateConnectionFuture{Future: future}
}

func (a *stub) UpdateCrawler(ctx workflow.Context, input *glue.UpdateCrawlerInput) (*glue.UpdateCrawlerOutput, error) {
	var output glue.UpdateCrawlerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateCrawler", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCrawlerAsync(ctx workflow.Context, input *glue.UpdateCrawlerInput) *UpdateCrawlerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateCrawler", input)
	return &UpdateCrawlerFuture{Future: future}
}

func (a *stub) UpdateCrawlerSchedule(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) (*glue.UpdateCrawlerScheduleOutput, error) {
	var output glue.UpdateCrawlerScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateCrawlerSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCrawlerScheduleAsync(ctx workflow.Context, input *glue.UpdateCrawlerScheduleInput) *UpdateCrawlerScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateCrawlerSchedule", input)
	return &UpdateCrawlerScheduleFuture{Future: future}
}

func (a *stub) UpdateDatabase(ctx workflow.Context, input *glue.UpdateDatabaseInput) (*glue.UpdateDatabaseOutput, error) {
	var output glue.UpdateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatabaseAsync(ctx workflow.Context, input *glue.UpdateDatabaseInput) *UpdateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateDatabase", input)
	return &UpdateDatabaseFuture{Future: future}
}

func (a *stub) UpdateDevEndpoint(ctx workflow.Context, input *glue.UpdateDevEndpointInput) (*glue.UpdateDevEndpointOutput, error) {
	var output glue.UpdateDevEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateDevEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDevEndpointAsync(ctx workflow.Context, input *glue.UpdateDevEndpointInput) *UpdateDevEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateDevEndpoint", input)
	return &UpdateDevEndpointFuture{Future: future}
}

func (a *stub) UpdateJob(ctx workflow.Context, input *glue.UpdateJobInput) (*glue.UpdateJobOutput, error) {
	var output glue.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobAsync(ctx workflow.Context, input *glue.UpdateJobInput) *UpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateJob", input)
	return &UpdateJobFuture{Future: future}
}

func (a *stub) UpdateMLTransform(ctx workflow.Context, input *glue.UpdateMLTransformInput) (*glue.UpdateMLTransformOutput, error) {
	var output glue.UpdateMLTransformOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateMLTransform", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMLTransformAsync(ctx workflow.Context, input *glue.UpdateMLTransformInput) *UpdateMLTransformFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateMLTransform", input)
	return &UpdateMLTransformFuture{Future: future}
}

func (a *stub) UpdatePartition(ctx workflow.Context, input *glue.UpdatePartitionInput) (*glue.UpdatePartitionOutput, error) {
	var output glue.UpdatePartitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdatePartition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePartitionAsync(ctx workflow.Context, input *glue.UpdatePartitionInput) *UpdatePartitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdatePartition", input)
	return &UpdatePartitionFuture{Future: future}
}

func (a *stub) UpdateRegistry(ctx workflow.Context, input *glue.UpdateRegistryInput) (*glue.UpdateRegistryOutput, error) {
	var output glue.UpdateRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegistryAsync(ctx workflow.Context, input *glue.UpdateRegistryInput) *UpdateRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateRegistry", input)
	return &UpdateRegistryFuture{Future: future}
}

func (a *stub) UpdateSchema(ctx workflow.Context, input *glue.UpdateSchemaInput) (*glue.UpdateSchemaOutput, error) {
	var output glue.UpdateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSchemaAsync(ctx workflow.Context, input *glue.UpdateSchemaInput) *UpdateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateSchema", input)
	return &UpdateSchemaFuture{Future: future}
}

func (a *stub) UpdateTable(ctx workflow.Context, input *glue.UpdateTableInput) (*glue.UpdateTableOutput, error) {
	var output glue.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTableAsync(ctx workflow.Context, input *glue.UpdateTableInput) *UpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateTable", input)
	return &UpdateTableFuture{Future: future}
}

func (a *stub) UpdateTrigger(ctx workflow.Context, input *glue.UpdateTriggerInput) (*glue.UpdateTriggerOutput, error) {
	var output glue.UpdateTriggerOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateTrigger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTriggerAsync(ctx workflow.Context, input *glue.UpdateTriggerInput) *UpdateTriggerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateTrigger", input)
	return &UpdateTriggerFuture{Future: future}
}

func (a *stub) UpdateUserDefinedFunction(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) (*glue.UpdateUserDefinedFunctionOutput, error) {
	var output glue.UpdateUserDefinedFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateUserDefinedFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserDefinedFunctionAsync(ctx workflow.Context, input *glue.UpdateUserDefinedFunctionInput) *UpdateUserDefinedFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateUserDefinedFunction", input)
	return &UpdateUserDefinedFunctionFuture{Future: future}
}

func (a *stub) UpdateWorkflow(ctx workflow.Context, input *glue.UpdateWorkflowInput) (*glue.UpdateWorkflowOutput, error) {
	var output glue.UpdateWorkflowOutput
	err := workflow.ExecuteActivity(ctx, "aws-glue-UpdateWorkflow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkflowAsync(ctx workflow.Context, input *glue.UpdateWorkflowInput) *UpdateWorkflowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-glue-UpdateWorkflow", input)
	return &UpdateWorkflowFuture{Future: future}
}
