// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lexmodelbuildingservicestub

import (
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type LexModelBuildingServiceCreateBotVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceCreateIntentVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceCreateSlotTypeVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceCreateSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotChannelAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteBotVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteBotVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteIntentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteIntentVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteIntentVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteSlotTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteSlotTypeVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteSlotTypeVersionFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceDeleteUtterancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceDeleteUtterancesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotAliasesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotChannelAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotChannelAssociationFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotChannelAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotChannelAssociationsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBotsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinIntentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinIntentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetBuiltinSlotTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetBuiltinSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetExportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetImportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetIntentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetIntentsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypeVersionsFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetSlotTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetSlotTypesFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceGetUtterancesViewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceGetUtterancesViewFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServicePutBotFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutBotAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServicePutBotAliasFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutIntentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServicePutIntentFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServicePutSlotTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServicePutSlotTypeFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceStartImportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceStartImportFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceTagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LexModelBuildingServiceUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LexModelBuildingServiceUntagResourceFuture) Get(ctx workflow.Context) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	var output lexmodelbuildingservice.CreateBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateBotVersionInput) *LexModelBuildingServiceCreateBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateBotVersion", input)
	return &LexModelBuildingServiceCreateBotVersionFuture{Future: future}
}

func (a *stub) CreateIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	var output lexmodelbuildingservice.CreateIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateIntentVersionInput) *LexModelBuildingServiceCreateIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateIntentVersion", input)
	return &LexModelBuildingServiceCreateIntentVersionFuture{Future: future}
}

func (a *stub) CreateSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.CreateSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.CreateSlotTypeVersionInput) *LexModelBuildingServiceCreateSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-CreateSlotTypeVersion", input)
	return &LexModelBuildingServiceCreateSlotTypeVersionFuture{Future: future}
}

func (a *stub) DeleteBot(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	var output lexmodelbuildingservice.DeleteBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotInput) *LexModelBuildingServiceDeleteBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBot", input)
	return &LexModelBuildingServiceDeleteBotFuture{Future: future}
}

func (a *stub) DeleteBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	var output lexmodelbuildingservice.DeleteBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotAliasInput) *LexModelBuildingServiceDeleteBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotAlias", input)
	return &LexModelBuildingServiceDeleteBotAliasFuture{Future: future}
}

func (a *stub) DeleteBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotChannelAssociationInput) *LexModelBuildingServiceDeleteBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotChannelAssociation", input)
	return &LexModelBuildingServiceDeleteBotChannelAssociationFuture{Future: future}
}

func (a *stub) DeleteBotVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteBotVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBotVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteBotVersionInput) *LexModelBuildingServiceDeleteBotVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteBotVersion", input)
	return &LexModelBuildingServiceDeleteBotVersionFuture{Future: future}
}

func (a *stub) DeleteIntent(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentInput) *LexModelBuildingServiceDeleteIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteIntent", input)
	return &LexModelBuildingServiceDeleteIntentFuture{Future: future}
}

func (a *stub) DeleteIntentVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteIntentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteIntentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntentVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteIntentVersionInput) *LexModelBuildingServiceDeleteIntentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteIntentVersion", input)
	return &LexModelBuildingServiceDeleteIntentVersionFuture{Future: future}
}

func (a *stub) DeleteSlotType(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeInput) *LexModelBuildingServiceDeleteSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteSlotType", input)
	return &LexModelBuildingServiceDeleteSlotTypeFuture{Future: future}
}

func (a *stub) DeleteSlotTypeVersion(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	var output lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteSlotTypeVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSlotTypeVersionAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteSlotTypeVersionInput) *LexModelBuildingServiceDeleteSlotTypeVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteSlotTypeVersion", input)
	return &LexModelBuildingServiceDeleteSlotTypeVersionFuture{Future: future}
}

func (a *stub) DeleteUtterances(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	var output lexmodelbuildingservice.DeleteUtterancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteUtterances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUtterancesAsync(ctx workflow.Context, input *lexmodelbuildingservice.DeleteUtterancesInput) *LexModelBuildingServiceDeleteUtterancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-DeleteUtterances", input)
	return &LexModelBuildingServiceDeleteUtterancesFuture{Future: future}
}

func (a *stub) GetBot(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) (*lexmodelbuildingservice.GetBotOutput, error) {
	var output lexmodelbuildingservice.GetBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotInput) *LexModelBuildingServiceGetBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBot", input)
	return &LexModelBuildingServiceGetBotFuture{Future: future}
}

func (a *stub) GetBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasInput) *LexModelBuildingServiceGetBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotAlias", input)
	return &LexModelBuildingServiceGetBotAliasFuture{Future: future}
}

func (a *stub) GetBotAliases(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	var output lexmodelbuildingservice.GetBotAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotAliasesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotAliasesInput) *LexModelBuildingServiceGetBotAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotAliases", input)
	return &LexModelBuildingServiceGetBotAliasesFuture{Future: future}
}

func (a *stub) GetBotChannelAssociation(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotChannelAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotChannelAssociationAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationInput) *LexModelBuildingServiceGetBotChannelAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotChannelAssociation", input)
	return &LexModelBuildingServiceGetBotChannelAssociationFuture{Future: future}
}

func (a *stub) GetBotChannelAssociations(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	var output lexmodelbuildingservice.GetBotChannelAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotChannelAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotChannelAssociationsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotChannelAssociationsInput) *LexModelBuildingServiceGetBotChannelAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotChannelAssociations", input)
	return &LexModelBuildingServiceGetBotChannelAssociationsFuture{Future: future}
}

func (a *stub) GetBotVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	var output lexmodelbuildingservice.GetBotVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotVersionsInput) *LexModelBuildingServiceGetBotVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBotVersions", input)
	return &LexModelBuildingServiceGetBotVersionsFuture{Future: future}
}

func (a *stub) GetBots(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) (*lexmodelbuildingservice.GetBotsOutput, error) {
	var output lexmodelbuildingservice.GetBotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBotsInput) *LexModelBuildingServiceGetBotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBots", input)
	return &LexModelBuildingServiceGetBotsFuture{Future: future}
}

func (a *stub) GetBuiltinIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBuiltinIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentInput) *LexModelBuildingServiceGetBuiltinIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinIntent", input)
	return &LexModelBuildingServiceGetBuiltinIntentFuture{Future: future}
}

func (a *stub) GetBuiltinIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBuiltinIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinIntentsInput) *LexModelBuildingServiceGetBuiltinIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinIntents", input)
	return &LexModelBuildingServiceGetBuiltinIntentsFuture{Future: future}
}

func (a *stub) GetBuiltinSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBuiltinSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetBuiltinSlotTypesInput) *LexModelBuildingServiceGetBuiltinSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetBuiltinSlotTypes", input)
	return &LexModelBuildingServiceGetBuiltinSlotTypesFuture{Future: future}
}

func (a *stub) GetExport(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) (*lexmodelbuildingservice.GetExportOutput, error) {
	var output lexmodelbuildingservice.GetExportOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetExport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetExportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetExportInput) *LexModelBuildingServiceGetExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetExport", input)
	return &LexModelBuildingServiceGetExportFuture{Future: future}
}

func (a *stub) GetImport(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) (*lexmodelbuildingservice.GetImportOutput, error) {
	var output lexmodelbuildingservice.GetImportOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetImport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetImportInput) *LexModelBuildingServiceGetImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetImport", input)
	return &LexModelBuildingServiceGetImportFuture{Future: future}
}

func (a *stub) GetIntent(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) (*lexmodelbuildingservice.GetIntentOutput, error) {
	var output lexmodelbuildingservice.GetIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentInput) *LexModelBuildingServiceGetIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntent", input)
	return &LexModelBuildingServiceGetIntentFuture{Future: future}
}

func (a *stub) GetIntentVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	var output lexmodelbuildingservice.GetIntentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntentVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentVersionsInput) *LexModelBuildingServiceGetIntentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntentVersions", input)
	return &LexModelBuildingServiceGetIntentVersionsFuture{Future: future}
}

func (a *stub) GetIntents(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	var output lexmodelbuildingservice.GetIntentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntentsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetIntentsInput) *LexModelBuildingServiceGetIntentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetIntents", input)
	return &LexModelBuildingServiceGetIntentsFuture{Future: future}
}

func (a *stub) GetSlotType(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeInput) *LexModelBuildingServiceGetSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotType", input)
	return &LexModelBuildingServiceGetSlotTypeFuture{Future: future}
}

func (a *stub) GetSlotTypeVersions(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSlotTypeVersionsAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypeVersionsInput) *LexModelBuildingServiceGetSlotTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotTypeVersions", input)
	return &LexModelBuildingServiceGetSlotTypeVersionsFuture{Future: future}
}

func (a *stub) GetSlotTypes(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	var output lexmodelbuildingservice.GetSlotTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSlotTypesAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetSlotTypesInput) *LexModelBuildingServiceGetSlotTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetSlotTypes", input)
	return &LexModelBuildingServiceGetSlotTypesFuture{Future: future}
}

func (a *stub) GetUtterancesView(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	var output lexmodelbuildingservice.GetUtterancesViewOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetUtterancesView", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUtterancesViewAsync(ctx workflow.Context, input *lexmodelbuildingservice.GetUtterancesViewInput) *LexModelBuildingServiceGetUtterancesViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-GetUtterancesView", input)
	return &LexModelBuildingServiceGetUtterancesViewFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	var output lexmodelbuildingservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.ListTagsForResourceInput) *LexModelBuildingServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-ListTagsForResource", input)
	return &LexModelBuildingServiceListTagsForResourceFuture{Future: future}
}

func (a *stub) PutBot(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) (*lexmodelbuildingservice.PutBotOutput, error) {
	var output lexmodelbuildingservice.PutBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBotAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotInput) *LexModelBuildingServicePutBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutBot", input)
	return &LexModelBuildingServicePutBotFuture{Future: future}
}

func (a *stub) PutBotAlias(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	var output lexmodelbuildingservice.PutBotAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutBotAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBotAliasAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutBotAliasInput) *LexModelBuildingServicePutBotAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutBotAlias", input)
	return &LexModelBuildingServicePutBotAliasFuture{Future: future}
}

func (a *stub) PutIntent(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) (*lexmodelbuildingservice.PutIntentOutput, error) {
	var output lexmodelbuildingservice.PutIntentOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutIntent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntentAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutIntentInput) *LexModelBuildingServicePutIntentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutIntent", input)
	return &LexModelBuildingServicePutIntentFuture{Future: future}
}

func (a *stub) PutSlotType(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	var output lexmodelbuildingservice.PutSlotTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutSlotType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSlotTypeAsync(ctx workflow.Context, input *lexmodelbuildingservice.PutSlotTypeInput) *LexModelBuildingServicePutSlotTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-PutSlotType", input)
	return &LexModelBuildingServicePutSlotTypeFuture{Future: future}
}

func (a *stub) StartImport(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) (*lexmodelbuildingservice.StartImportOutput, error) {
	var output lexmodelbuildingservice.StartImportOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-StartImport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImportAsync(ctx workflow.Context, input *lexmodelbuildingservice.StartImportInput) *LexModelBuildingServiceStartImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-StartImport", input)
	return &LexModelBuildingServiceStartImportFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) (*lexmodelbuildingservice.TagResourceOutput, error) {
	var output lexmodelbuildingservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.TagResourceInput) *LexModelBuildingServiceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-TagResource", input)
	return &LexModelBuildingServiceTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	var output lexmodelbuildingservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *lexmodelbuildingservice.UntagResourceInput) *LexModelBuildingServiceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexmodelbuildingservice-UntagResource", input)
	return &LexModelBuildingServiceUntagResourceFuture{Future: future}
}
