// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package securityhubstub

import (
	"github.com/aws/aws-sdk-go/service/securityhub"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptInvitationFuture) Get(ctx workflow.Context) (*securityhub.AcceptInvitationOutput, error) {
	var output securityhub.AcceptInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisableStandardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisableStandardsFuture) Get(ctx workflow.Context) (*securityhub.BatchDisableStandardsOutput, error) {
	var output securityhub.BatchDisableStandardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchEnableStandardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchEnableStandardsFuture) Get(ctx workflow.Context) (*securityhub.BatchEnableStandardsOutput, error) {
	var output securityhub.BatchEnableStandardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchImportFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchImportFindingsFuture) Get(ctx workflow.Context) (*securityhub.BatchImportFindingsOutput, error) {
	var output securityhub.BatchImportFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdateFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUpdateFindingsFuture) Get(ctx workflow.Context) (*securityhub.BatchUpdateFindingsOutput, error) {
	var output securityhub.BatchUpdateFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateActionTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateActionTargetFuture) Get(ctx workflow.Context) (*securityhub.CreateActionTargetOutput, error) {
	var output securityhub.CreateActionTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInsightFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInsightFuture) Get(ctx workflow.Context) (*securityhub.CreateInsightOutput, error) {
	var output securityhub.CreateInsightOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMembersFuture) Get(ctx workflow.Context) (*securityhub.CreateMembersOutput, error) {
	var output securityhub.CreateMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeclineInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeclineInvitationsFuture) Get(ctx workflow.Context) (*securityhub.DeclineInvitationsOutput, error) {
	var output securityhub.DeclineInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteActionTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteActionTargetFuture) Get(ctx workflow.Context) (*securityhub.DeleteActionTargetOutput, error) {
	var output securityhub.DeleteActionTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInsightFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInsightFuture) Get(ctx workflow.Context) (*securityhub.DeleteInsightOutput, error) {
	var output securityhub.DeleteInsightOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInvitationsFuture) Get(ctx workflow.Context) (*securityhub.DeleteInvitationsOutput, error) {
	var output securityhub.DeleteInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMembersFuture) Get(ctx workflow.Context) (*securityhub.DeleteMembersOutput, error) {
	var output securityhub.DeleteMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeActionTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeActionTargetsFuture) Get(ctx workflow.Context) (*securityhub.DescribeActionTargetsOutput, error) {
	var output securityhub.DescribeActionTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHubFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHubFuture) Get(ctx workflow.Context) (*securityhub.DescribeHubOutput, error) {
	var output securityhub.DescribeHubOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConfigurationFuture) Get(ctx workflow.Context) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	var output securityhub.DescribeOrganizationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProductsFuture) Get(ctx workflow.Context) (*securityhub.DescribeProductsOutput, error) {
	var output securityhub.DescribeProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStandardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStandardsFuture) Get(ctx workflow.Context) (*securityhub.DescribeStandardsOutput, error) {
	var output securityhub.DescribeStandardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStandardsControlsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStandardsControlsFuture) Get(ctx workflow.Context) (*securityhub.DescribeStandardsControlsOutput, error) {
	var output securityhub.DescribeStandardsControlsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableImportFindingsForProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableImportFindingsForProductFuture) Get(ctx workflow.Context) (*securityhub.DisableImportFindingsForProductOutput, error) {
	var output securityhub.DisableImportFindingsForProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	var output securityhub.DisableOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableSecurityHubFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableSecurityHubFuture) Get(ctx workflow.Context) (*securityhub.DisableSecurityHubOutput, error) {
	var output securityhub.DisableSecurityHubOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateFromMasterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateFromMasterAccountFuture) Get(ctx workflow.Context) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	var output securityhub.DisassociateFromMasterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateMembersFuture) Get(ctx workflow.Context) (*securityhub.DisassociateMembersOutput, error) {
	var output securityhub.DisassociateMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableImportFindingsForProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableImportFindingsForProductFuture) Get(ctx workflow.Context) (*securityhub.EnableImportFindingsForProductOutput, error) {
	var output securityhub.EnableImportFindingsForProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	var output securityhub.EnableOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableSecurityHubFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableSecurityHubFuture) Get(ctx workflow.Context) (*securityhub.EnableSecurityHubOutput, error) {
	var output securityhub.EnableSecurityHubOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEnabledStandardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEnabledStandardsFuture) Get(ctx workflow.Context) (*securityhub.GetEnabledStandardsOutput, error) {
	var output securityhub.GetEnabledStandardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFindingsFuture) Get(ctx workflow.Context) (*securityhub.GetFindingsOutput, error) {
	var output securityhub.GetFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightResultsFuture) Get(ctx workflow.Context) (*securityhub.GetInsightResultsOutput, error) {
	var output securityhub.GetInsightResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInsightsFuture) Get(ctx workflow.Context) (*securityhub.GetInsightsOutput, error) {
	var output securityhub.GetInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInvitationsCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInvitationsCountFuture) Get(ctx workflow.Context) (*securityhub.GetInvitationsCountOutput, error) {
	var output securityhub.GetInvitationsCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMasterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMasterAccountFuture) Get(ctx workflow.Context) (*securityhub.GetMasterAccountOutput, error) {
	var output securityhub.GetMasterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMembersFuture) Get(ctx workflow.Context) (*securityhub.GetMembersOutput, error) {
	var output securityhub.GetMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InviteMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InviteMembersFuture) Get(ctx workflow.Context) (*securityhub.InviteMembersOutput, error) {
	var output securityhub.InviteMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEnabledProductsForImportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEnabledProductsForImportFuture) Get(ctx workflow.Context) (*securityhub.ListEnabledProductsForImportOutput, error) {
	var output securityhub.ListEnabledProductsForImportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInvitationsFuture) Get(ctx workflow.Context) (*securityhub.ListInvitationsOutput, error) {
	var output securityhub.ListInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMembersFuture) Get(ctx workflow.Context) (*securityhub.ListMembersOutput, error) {
	var output securityhub.ListMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOrganizationAdminAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOrganizationAdminAccountsFuture) Get(ctx workflow.Context) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	var output securityhub.ListOrganizationAdminAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*securityhub.ListTagsForResourceOutput, error) {
	var output securityhub.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*securityhub.TagResourceOutput, error) {
	var output securityhub.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*securityhub.UntagResourceOutput, error) {
	var output securityhub.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateActionTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateActionTargetFuture) Get(ctx workflow.Context) (*securityhub.UpdateActionTargetOutput, error) {
	var output securityhub.UpdateActionTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFindingsFuture) Get(ctx workflow.Context) (*securityhub.UpdateFindingsOutput, error) {
	var output securityhub.UpdateFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInsightFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInsightFuture) Get(ctx workflow.Context) (*securityhub.UpdateInsightOutput, error) {
	var output securityhub.UpdateInsightOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOrganizationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOrganizationConfigurationFuture) Get(ctx workflow.Context) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	var output securityhub.UpdateOrganizationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSecurityHubConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSecurityHubConfigurationFuture) Get(ctx workflow.Context) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	var output securityhub.UpdateSecurityHubConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStandardsControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStandardsControlFuture) Get(ctx workflow.Context) (*securityhub.UpdateStandardsControlOutput, error) {
	var output securityhub.UpdateStandardsControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInvitation(ctx workflow.Context, input *securityhub.AcceptInvitationInput) (*securityhub.AcceptInvitationOutput, error) {
	var output securityhub.AcceptInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-AcceptInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInvitationAsync(ctx workflow.Context, input *securityhub.AcceptInvitationInput) *AcceptInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-AcceptInvitation", input)
	return &AcceptInvitationFuture{Future: future}
}

func (a *stub) BatchDisableStandards(ctx workflow.Context, input *securityhub.BatchDisableStandardsInput) (*securityhub.BatchDisableStandardsOutput, error) {
	var output securityhub.BatchDisableStandardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchDisableStandards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisableStandardsAsync(ctx workflow.Context, input *securityhub.BatchDisableStandardsInput) *BatchDisableStandardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchDisableStandards", input)
	return &BatchDisableStandardsFuture{Future: future}
}

func (a *stub) BatchEnableStandards(ctx workflow.Context, input *securityhub.BatchEnableStandardsInput) (*securityhub.BatchEnableStandardsOutput, error) {
	var output securityhub.BatchEnableStandardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchEnableStandards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchEnableStandardsAsync(ctx workflow.Context, input *securityhub.BatchEnableStandardsInput) *BatchEnableStandardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchEnableStandards", input)
	return &BatchEnableStandardsFuture{Future: future}
}

func (a *stub) BatchImportFindings(ctx workflow.Context, input *securityhub.BatchImportFindingsInput) (*securityhub.BatchImportFindingsOutput, error) {
	var output securityhub.BatchImportFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchImportFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchImportFindingsAsync(ctx workflow.Context, input *securityhub.BatchImportFindingsInput) *BatchImportFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchImportFindings", input)
	return &BatchImportFindingsFuture{Future: future}
}

func (a *stub) BatchUpdateFindings(ctx workflow.Context, input *securityhub.BatchUpdateFindingsInput) (*securityhub.BatchUpdateFindingsOutput, error) {
	var output securityhub.BatchUpdateFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchUpdateFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdateFindingsAsync(ctx workflow.Context, input *securityhub.BatchUpdateFindingsInput) *BatchUpdateFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-BatchUpdateFindings", input)
	return &BatchUpdateFindingsFuture{Future: future}
}

func (a *stub) CreateActionTarget(ctx workflow.Context, input *securityhub.CreateActionTargetInput) (*securityhub.CreateActionTargetOutput, error) {
	var output securityhub.CreateActionTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateActionTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateActionTargetAsync(ctx workflow.Context, input *securityhub.CreateActionTargetInput) *CreateActionTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateActionTarget", input)
	return &CreateActionTargetFuture{Future: future}
}

func (a *stub) CreateInsight(ctx workflow.Context, input *securityhub.CreateInsightInput) (*securityhub.CreateInsightOutput, error) {
	var output securityhub.CreateInsightOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateInsight", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInsightAsync(ctx workflow.Context, input *securityhub.CreateInsightInput) *CreateInsightFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateInsight", input)
	return &CreateInsightFuture{Future: future}
}

func (a *stub) CreateMembers(ctx workflow.Context, input *securityhub.CreateMembersInput) (*securityhub.CreateMembersOutput, error) {
	var output securityhub.CreateMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMembersAsync(ctx workflow.Context, input *securityhub.CreateMembersInput) *CreateMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-CreateMembers", input)
	return &CreateMembersFuture{Future: future}
}

func (a *stub) DeclineInvitations(ctx workflow.Context, input *securityhub.DeclineInvitationsInput) (*securityhub.DeclineInvitationsOutput, error) {
	var output securityhub.DeclineInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DeclineInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeclineInvitationsAsync(ctx workflow.Context, input *securityhub.DeclineInvitationsInput) *DeclineInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DeclineInvitations", input)
	return &DeclineInvitationsFuture{Future: future}
}

func (a *stub) DeleteActionTarget(ctx workflow.Context, input *securityhub.DeleteActionTargetInput) (*securityhub.DeleteActionTargetOutput, error) {
	var output securityhub.DeleteActionTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteActionTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteActionTargetAsync(ctx workflow.Context, input *securityhub.DeleteActionTargetInput) *DeleteActionTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteActionTarget", input)
	return &DeleteActionTargetFuture{Future: future}
}

func (a *stub) DeleteInsight(ctx workflow.Context, input *securityhub.DeleteInsightInput) (*securityhub.DeleteInsightOutput, error) {
	var output securityhub.DeleteInsightOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteInsight", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInsightAsync(ctx workflow.Context, input *securityhub.DeleteInsightInput) *DeleteInsightFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteInsight", input)
	return &DeleteInsightFuture{Future: future}
}

func (a *stub) DeleteInvitations(ctx workflow.Context, input *securityhub.DeleteInvitationsInput) (*securityhub.DeleteInvitationsOutput, error) {
	var output securityhub.DeleteInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInvitationsAsync(ctx workflow.Context, input *securityhub.DeleteInvitationsInput) *DeleteInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteInvitations", input)
	return &DeleteInvitationsFuture{Future: future}
}

func (a *stub) DeleteMembers(ctx workflow.Context, input *securityhub.DeleteMembersInput) (*securityhub.DeleteMembersOutput, error) {
	var output securityhub.DeleteMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMembersAsync(ctx workflow.Context, input *securityhub.DeleteMembersInput) *DeleteMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DeleteMembers", input)
	return &DeleteMembersFuture{Future: future}
}

func (a *stub) DescribeActionTargets(ctx workflow.Context, input *securityhub.DescribeActionTargetsInput) (*securityhub.DescribeActionTargetsOutput, error) {
	var output securityhub.DescribeActionTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeActionTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeActionTargetsAsync(ctx workflow.Context, input *securityhub.DescribeActionTargetsInput) *DescribeActionTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeActionTargets", input)
	return &DescribeActionTargetsFuture{Future: future}
}

func (a *stub) DescribeHub(ctx workflow.Context, input *securityhub.DescribeHubInput) (*securityhub.DescribeHubOutput, error) {
	var output securityhub.DescribeHubOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeHub", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHubAsync(ctx workflow.Context, input *securityhub.DescribeHubInput) *DescribeHubFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeHub", input)
	return &DescribeHubFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfiguration(ctx workflow.Context, input *securityhub.DescribeOrganizationConfigurationInput) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	var output securityhub.DescribeOrganizationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeOrganizationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigurationAsync(ctx workflow.Context, input *securityhub.DescribeOrganizationConfigurationInput) *DescribeOrganizationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeOrganizationConfiguration", input)
	return &DescribeOrganizationConfigurationFuture{Future: future}
}

func (a *stub) DescribeProducts(ctx workflow.Context, input *securityhub.DescribeProductsInput) (*securityhub.DescribeProductsOutput, error) {
	var output securityhub.DescribeProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductsAsync(ctx workflow.Context, input *securityhub.DescribeProductsInput) *DescribeProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeProducts", input)
	return &DescribeProductsFuture{Future: future}
}

func (a *stub) DescribeStandards(ctx workflow.Context, input *securityhub.DescribeStandardsInput) (*securityhub.DescribeStandardsOutput, error) {
	var output securityhub.DescribeStandardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeStandards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStandardsAsync(ctx workflow.Context, input *securityhub.DescribeStandardsInput) *DescribeStandardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeStandards", input)
	return &DescribeStandardsFuture{Future: future}
}

func (a *stub) DescribeStandardsControls(ctx workflow.Context, input *securityhub.DescribeStandardsControlsInput) (*securityhub.DescribeStandardsControlsOutput, error) {
	var output securityhub.DescribeStandardsControlsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeStandardsControls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStandardsControlsAsync(ctx workflow.Context, input *securityhub.DescribeStandardsControlsInput) *DescribeStandardsControlsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DescribeStandardsControls", input)
	return &DescribeStandardsControlsFuture{Future: future}
}

func (a *stub) DisableImportFindingsForProduct(ctx workflow.Context, input *securityhub.DisableImportFindingsForProductInput) (*securityhub.DisableImportFindingsForProductOutput, error) {
	var output securityhub.DisableImportFindingsForProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableImportFindingsForProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableImportFindingsForProductAsync(ctx workflow.Context, input *securityhub.DisableImportFindingsForProductInput) *DisableImportFindingsForProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableImportFindingsForProduct", input)
	return &DisableImportFindingsForProductFuture{Future: future}
}

func (a *stub) DisableOrganizationAdminAccount(ctx workflow.Context, input *securityhub.DisableOrganizationAdminAccountInput) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	var output securityhub.DisableOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableOrganizationAdminAccountAsync(ctx workflow.Context, input *securityhub.DisableOrganizationAdminAccountInput) *DisableOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableOrganizationAdminAccount", input)
	return &DisableOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) DisableSecurityHub(ctx workflow.Context, input *securityhub.DisableSecurityHubInput) (*securityhub.DisableSecurityHubOutput, error) {
	var output securityhub.DisableSecurityHubOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableSecurityHub", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableSecurityHubAsync(ctx workflow.Context, input *securityhub.DisableSecurityHubInput) *DisableSecurityHubFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DisableSecurityHub", input)
	return &DisableSecurityHubFuture{Future: future}
}

func (a *stub) DisassociateFromMasterAccount(ctx workflow.Context, input *securityhub.DisassociateFromMasterAccountInput) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	var output securityhub.DisassociateFromMasterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DisassociateFromMasterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateFromMasterAccountAsync(ctx workflow.Context, input *securityhub.DisassociateFromMasterAccountInput) *DisassociateFromMasterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DisassociateFromMasterAccount", input)
	return &DisassociateFromMasterAccountFuture{Future: future}
}

func (a *stub) DisassociateMembers(ctx workflow.Context, input *securityhub.DisassociateMembersInput) (*securityhub.DisassociateMembersOutput, error) {
	var output securityhub.DisassociateMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-DisassociateMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateMembersAsync(ctx workflow.Context, input *securityhub.DisassociateMembersInput) *DisassociateMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-DisassociateMembers", input)
	return &DisassociateMembersFuture{Future: future}
}

func (a *stub) EnableImportFindingsForProduct(ctx workflow.Context, input *securityhub.EnableImportFindingsForProductInput) (*securityhub.EnableImportFindingsForProductOutput, error) {
	var output securityhub.EnableImportFindingsForProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableImportFindingsForProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableImportFindingsForProductAsync(ctx workflow.Context, input *securityhub.EnableImportFindingsForProductInput) *EnableImportFindingsForProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableImportFindingsForProduct", input)
	return &EnableImportFindingsForProductFuture{Future: future}
}

func (a *stub) EnableOrganizationAdminAccount(ctx workflow.Context, input *securityhub.EnableOrganizationAdminAccountInput) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	var output securityhub.EnableOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableOrganizationAdminAccountAsync(ctx workflow.Context, input *securityhub.EnableOrganizationAdminAccountInput) *EnableOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableOrganizationAdminAccount", input)
	return &EnableOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) EnableSecurityHub(ctx workflow.Context, input *securityhub.EnableSecurityHubInput) (*securityhub.EnableSecurityHubOutput, error) {
	var output securityhub.EnableSecurityHubOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableSecurityHub", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSecurityHubAsync(ctx workflow.Context, input *securityhub.EnableSecurityHubInput) *EnableSecurityHubFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-EnableSecurityHub", input)
	return &EnableSecurityHubFuture{Future: future}
}

func (a *stub) GetEnabledStandards(ctx workflow.Context, input *securityhub.GetEnabledStandardsInput) (*securityhub.GetEnabledStandardsOutput, error) {
	var output securityhub.GetEnabledStandardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetEnabledStandards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEnabledStandardsAsync(ctx workflow.Context, input *securityhub.GetEnabledStandardsInput) *GetEnabledStandardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetEnabledStandards", input)
	return &GetEnabledStandardsFuture{Future: future}
}

func (a *stub) GetFindings(ctx workflow.Context, input *securityhub.GetFindingsInput) (*securityhub.GetFindingsOutput, error) {
	var output securityhub.GetFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFindingsAsync(ctx workflow.Context, input *securityhub.GetFindingsInput) *GetFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetFindings", input)
	return &GetFindingsFuture{Future: future}
}

func (a *stub) GetInsightResults(ctx workflow.Context, input *securityhub.GetInsightResultsInput) (*securityhub.GetInsightResultsOutput, error) {
	var output securityhub.GetInsightResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInsightResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightResultsAsync(ctx workflow.Context, input *securityhub.GetInsightResultsInput) *GetInsightResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInsightResults", input)
	return &GetInsightResultsFuture{Future: future}
}

func (a *stub) GetInsights(ctx workflow.Context, input *securityhub.GetInsightsInput) (*securityhub.GetInsightsOutput, error) {
	var output securityhub.GetInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightsAsync(ctx workflow.Context, input *securityhub.GetInsightsInput) *GetInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInsights", input)
	return &GetInsightsFuture{Future: future}
}

func (a *stub) GetInvitationsCount(ctx workflow.Context, input *securityhub.GetInvitationsCountInput) (*securityhub.GetInvitationsCountOutput, error) {
	var output securityhub.GetInvitationsCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInvitationsCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvitationsCountAsync(ctx workflow.Context, input *securityhub.GetInvitationsCountInput) *GetInvitationsCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetInvitationsCount", input)
	return &GetInvitationsCountFuture{Future: future}
}

func (a *stub) GetMasterAccount(ctx workflow.Context, input *securityhub.GetMasterAccountInput) (*securityhub.GetMasterAccountOutput, error) {
	var output securityhub.GetMasterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetMasterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMasterAccountAsync(ctx workflow.Context, input *securityhub.GetMasterAccountInput) *GetMasterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetMasterAccount", input)
	return &GetMasterAccountFuture{Future: future}
}

func (a *stub) GetMembers(ctx workflow.Context, input *securityhub.GetMembersInput) (*securityhub.GetMembersOutput, error) {
	var output securityhub.GetMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-GetMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMembersAsync(ctx workflow.Context, input *securityhub.GetMembersInput) *GetMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-GetMembers", input)
	return &GetMembersFuture{Future: future}
}

func (a *stub) InviteMembers(ctx workflow.Context, input *securityhub.InviteMembersInput) (*securityhub.InviteMembersOutput, error) {
	var output securityhub.InviteMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-InviteMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InviteMembersAsync(ctx workflow.Context, input *securityhub.InviteMembersInput) *InviteMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-InviteMembers", input)
	return &InviteMembersFuture{Future: future}
}

func (a *stub) ListEnabledProductsForImport(ctx workflow.Context, input *securityhub.ListEnabledProductsForImportInput) (*securityhub.ListEnabledProductsForImportOutput, error) {
	var output securityhub.ListEnabledProductsForImportOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-ListEnabledProductsForImport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEnabledProductsForImportAsync(ctx workflow.Context, input *securityhub.ListEnabledProductsForImportInput) *ListEnabledProductsForImportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-ListEnabledProductsForImport", input)
	return &ListEnabledProductsForImportFuture{Future: future}
}

func (a *stub) ListInvitations(ctx workflow.Context, input *securityhub.ListInvitationsInput) (*securityhub.ListInvitationsOutput, error) {
	var output securityhub.ListInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-ListInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInvitationsAsync(ctx workflow.Context, input *securityhub.ListInvitationsInput) *ListInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-ListInvitations", input)
	return &ListInvitationsFuture{Future: future}
}

func (a *stub) ListMembers(ctx workflow.Context, input *securityhub.ListMembersInput) (*securityhub.ListMembersOutput, error) {
	var output securityhub.ListMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-ListMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMembersAsync(ctx workflow.Context, input *securityhub.ListMembersInput) *ListMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-ListMembers", input)
	return &ListMembersFuture{Future: future}
}

func (a *stub) ListOrganizationAdminAccounts(ctx workflow.Context, input *securityhub.ListOrganizationAdminAccountsInput) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	var output securityhub.ListOrganizationAdminAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-ListOrganizationAdminAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationAdminAccountsAsync(ctx workflow.Context, input *securityhub.ListOrganizationAdminAccountsInput) *ListOrganizationAdminAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-ListOrganizationAdminAccounts", input)
	return &ListOrganizationAdminAccountsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *securityhub.ListTagsForResourceInput) (*securityhub.ListTagsForResourceOutput, error) {
	var output securityhub.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *securityhub.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *securityhub.TagResourceInput) (*securityhub.TagResourceOutput, error) {
	var output securityhub.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *securityhub.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *securityhub.UntagResourceInput) (*securityhub.UntagResourceOutput, error) {
	var output securityhub.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *securityhub.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateActionTarget(ctx workflow.Context, input *securityhub.UpdateActionTargetInput) (*securityhub.UpdateActionTargetOutput, error) {
	var output securityhub.UpdateActionTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateActionTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateActionTargetAsync(ctx workflow.Context, input *securityhub.UpdateActionTargetInput) *UpdateActionTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateActionTarget", input)
	return &UpdateActionTargetFuture{Future: future}
}

func (a *stub) UpdateFindings(ctx workflow.Context, input *securityhub.UpdateFindingsInput) (*securityhub.UpdateFindingsOutput, error) {
	var output securityhub.UpdateFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFindingsAsync(ctx workflow.Context, input *securityhub.UpdateFindingsInput) *UpdateFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateFindings", input)
	return &UpdateFindingsFuture{Future: future}
}

func (a *stub) UpdateInsight(ctx workflow.Context, input *securityhub.UpdateInsightInput) (*securityhub.UpdateInsightOutput, error) {
	var output securityhub.UpdateInsightOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateInsight", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInsightAsync(ctx workflow.Context, input *securityhub.UpdateInsightInput) *UpdateInsightFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateInsight", input)
	return &UpdateInsightFuture{Future: future}
}

func (a *stub) UpdateOrganizationConfiguration(ctx workflow.Context, input *securityhub.UpdateOrganizationConfigurationInput) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	var output securityhub.UpdateOrganizationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateOrganizationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOrganizationConfigurationAsync(ctx workflow.Context, input *securityhub.UpdateOrganizationConfigurationInput) *UpdateOrganizationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateOrganizationConfiguration", input)
	return &UpdateOrganizationConfigurationFuture{Future: future}
}

func (a *stub) UpdateSecurityHubConfiguration(ctx workflow.Context, input *securityhub.UpdateSecurityHubConfigurationInput) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	var output securityhub.UpdateSecurityHubConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateSecurityHubConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecurityHubConfigurationAsync(ctx workflow.Context, input *securityhub.UpdateSecurityHubConfigurationInput) *UpdateSecurityHubConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateSecurityHubConfiguration", input)
	return &UpdateSecurityHubConfigurationFuture{Future: future}
}

func (a *stub) UpdateStandardsControl(ctx workflow.Context, input *securityhub.UpdateStandardsControlInput) (*securityhub.UpdateStandardsControlOutput, error) {
	var output securityhub.UpdateStandardsControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateStandardsControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStandardsControlAsync(ctx workflow.Context, input *securityhub.UpdateStandardsControlInput) *UpdateStandardsControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-securityhub-UpdateStandardsControl", input)
	return &UpdateStandardsControlFuture{Future: future}
}
