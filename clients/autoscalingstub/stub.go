// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package autoscalingstub

import (
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AttachInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchPutScheduledUpdateGroupActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchPutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelInstanceRefreshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CompleteLifecycleActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteLifecycleActionFuture) Get(ctx workflow.Context) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOrUpdateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOrUpdateTagsFuture) Get(ctx workflow.Context) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLaunchConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLifecycleHookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePolicyFuture) Get(ctx workflow.Context) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScheduledActionFuture) Get(ctx workflow.Context) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountLimitsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAdjustmentTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAdjustmentTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutoScalingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutoScalingGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutoScalingInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutoScalingInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAutoScalingNotificationTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAutoScalingNotificationTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceRefreshesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceRefreshesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLaunchConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLaunchConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLifecycleHookTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLifecycleHookTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLifecycleHooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLifecycleHooksFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMetricCollectionTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMetricCollectionTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotificationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotificationConfigurationsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePoliciesFuture) Get(ctx workflow.Context) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingActivitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingActivitiesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingProcessTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingProcessTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduledActionsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTerminationPolicyTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTerminationPolicyTypesFuture) Get(ctx workflow.Context) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachInstancesFuture) Get(ctx workflow.Context) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachLoadBalancerTargetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachLoadBalancerTargetGroupsFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachLoadBalancersFuture) Get(ctx workflow.Context) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableMetricsCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableMetricsCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableMetricsCollectionFuture) Get(ctx workflow.Context) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnterStandbyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnterStandbyFuture) Get(ctx workflow.Context) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecutePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecutePolicyFuture) Get(ctx workflow.Context) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExitStandbyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExitStandbyFuture) Get(ctx workflow.Context) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLifecycleHookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLifecycleHookFuture) Get(ctx workflow.Context) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutNotificationConfigurationFuture) Get(ctx workflow.Context) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutScalingPolicyFuture) Get(ctx workflow.Context) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutScheduledUpdateGroupActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutScheduledUpdateGroupActionFuture) Get(ctx workflow.Context) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecordLifecycleActionHeartbeatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecordLifecycleActionHeartbeatFuture) Get(ctx workflow.Context) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeProcessesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeProcessesFuture) Get(ctx workflow.Context) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetDesiredCapacityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetDesiredCapacityFuture) Get(ctx workflow.Context) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetInstanceHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetInstanceHealthFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetInstanceProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetInstanceProtectionFuture) Get(ctx workflow.Context) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartInstanceRefreshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartInstanceRefreshFuture) Get(ctx workflow.Context) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SuspendProcessesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SuspendProcessesFuture) Get(ctx workflow.Context) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateInstanceInAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateInstanceInAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAutoScalingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAutoScalingGroupFuture) Get(ctx workflow.Context) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachInstances(ctx workflow.Context, input *autoscaling.AttachInstancesInput) (*autoscaling.AttachInstancesOutput, error) {
	var output autoscaling.AttachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachInstancesAsync(ctx workflow.Context, input *autoscaling.AttachInstancesInput) *AttachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachInstances", input)
	return &AttachInstancesFuture{Future: future}
}

func (a *stub) AttachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.AttachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancerTargetGroupsInput) *AttachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachLoadBalancerTargetGroups", input)
	return &AttachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *stub) AttachLoadBalancers(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) (*autoscaling.AttachLoadBalancersOutput, error) {
	var output autoscaling.AttachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.AttachLoadBalancersInput) *AttachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-AttachLoadBalancers", input)
	return &AttachLoadBalancersFuture{Future: future}
}

func (a *stub) BatchDeleteScheduledAction(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) (*autoscaling.BatchDeleteScheduledActionOutput, error) {
	var output autoscaling.BatchDeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-BatchDeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.BatchDeleteScheduledActionInput) *BatchDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-BatchDeleteScheduledAction", input)
	return &BatchDeleteScheduledActionFuture{Future: future}
}

func (a *stub) BatchPutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.BatchPutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-BatchPutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.BatchPutScheduledUpdateGroupActionInput) *BatchPutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-BatchPutScheduledUpdateGroupAction", input)
	return &BatchPutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *stub) CancelInstanceRefresh(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) (*autoscaling.CancelInstanceRefreshOutput, error) {
	var output autoscaling.CancelInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-CancelInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.CancelInstanceRefreshInput) *CancelInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-CancelInstanceRefresh", input)
	return &CancelInstanceRefreshFuture{Future: future}
}

func (a *stub) CompleteLifecycleAction(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) (*autoscaling.CompleteLifecycleActionOutput, error) {
	var output autoscaling.CompleteLifecycleActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-CompleteLifecycleAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteLifecycleActionAsync(ctx workflow.Context, input *autoscaling.CompleteLifecycleActionInput) *CompleteLifecycleActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-CompleteLifecycleAction", input)
	return &CompleteLifecycleActionFuture{Future: future}
}

func (a *stub) CreateAutoScalingGroup(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) (*autoscaling.CreateAutoScalingGroupOutput, error) {
	var output autoscaling.CreateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.CreateAutoScalingGroupInput) *CreateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateAutoScalingGroup", input)
	return &CreateAutoScalingGroupFuture{Future: future}
}

func (a *stub) CreateLaunchConfiguration(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) (*autoscaling.CreateLaunchConfigurationOutput, error) {
	var output autoscaling.CreateLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.CreateLaunchConfigurationInput) *CreateLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateLaunchConfiguration", input)
	return &CreateLaunchConfigurationFuture{Future: future}
}

func (a *stub) CreateOrUpdateTags(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) (*autoscaling.CreateOrUpdateTagsOutput, error) {
	var output autoscaling.CreateOrUpdateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateOrUpdateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrUpdateTagsAsync(ctx workflow.Context, input *autoscaling.CreateOrUpdateTagsInput) *CreateOrUpdateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-CreateOrUpdateTags", input)
	return &CreateOrUpdateTagsFuture{Future: future}
}

func (a *stub) DeleteAutoScalingGroup(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) (*autoscaling.DeleteAutoScalingGroupOutput, error) {
	var output autoscaling.DeleteAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.DeleteAutoScalingGroupInput) *DeleteAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteAutoScalingGroup", input)
	return &DeleteAutoScalingGroupFuture{Future: future}
}

func (a *stub) DeleteLaunchConfiguration(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) (*autoscaling.DeleteLaunchConfigurationOutput, error) {
	var output autoscaling.DeleteLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLaunchConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteLaunchConfigurationInput) *DeleteLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteLaunchConfiguration", input)
	return &DeleteLaunchConfigurationFuture{Future: future}
}

func (a *stub) DeleteLifecycleHook(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) (*autoscaling.DeleteLifecycleHookOutput, error) {
	var output autoscaling.DeleteLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLifecycleHookAsync(ctx workflow.Context, input *autoscaling.DeleteLifecycleHookInput) *DeleteLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteLifecycleHook", input)
	return &DeleteLifecycleHookFuture{Future: future}
}

func (a *stub) DeleteNotificationConfiguration(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) (*autoscaling.DeleteNotificationConfigurationOutput, error) {
	var output autoscaling.DeleteNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.DeleteNotificationConfigurationInput) *DeleteNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteNotificationConfiguration", input)
	return &DeleteNotificationConfigurationFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *autoscaling.DeletePolicyInput) (*autoscaling.DeletePolicyOutput, error) {
	var output autoscaling.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *autoscaling.DeletePolicyInput) *DeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeletePolicy", input)
	return &DeletePolicyFuture{Future: future}
}

func (a *stub) DeleteScheduledAction(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) (*autoscaling.DeleteScheduledActionOutput, error) {
	var output autoscaling.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledActionAsync(ctx workflow.Context, input *autoscaling.DeleteScheduledActionInput) *DeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteScheduledAction", input)
	return &DeleteScheduledActionFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *autoscaling.DeleteTagsInput) (*autoscaling.DeleteTagsOutput, error) {
	var output autoscaling.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *autoscaling.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DescribeAccountLimits(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) (*autoscaling.DescribeAccountLimitsOutput, error) {
	var output autoscaling.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountLimitsAsync(ctx workflow.Context, input *autoscaling.DescribeAccountLimitsInput) *DescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAccountLimits", input)
	return &DescribeAccountLimitsFuture{Future: future}
}

func (a *stub) DescribeAdjustmentTypes(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) (*autoscaling.DescribeAdjustmentTypesOutput, error) {
	var output autoscaling.DescribeAdjustmentTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAdjustmentTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAdjustmentTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAdjustmentTypesInput) *DescribeAdjustmentTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAdjustmentTypes", input)
	return &DescribeAdjustmentTypesFuture{Future: future}
}

func (a *stub) DescribeAutoScalingGroups(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {
	var output autoscaling.DescribeAutoScalingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutoScalingGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *DescribeAutoScalingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingGroups", input)
	return &DescribeAutoScalingGroupsFuture{Future: future}
}

func (a *stub) DescribeAutoScalingInstances(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {
	var output autoscaling.DescribeAutoScalingInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutoScalingInstancesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingInstancesInput) *DescribeAutoScalingInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingInstances", input)
	return &DescribeAutoScalingInstancesFuture{Future: future}
}

func (a *stub) DescribeAutoScalingNotificationTypes(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {
	var output autoscaling.DescribeAutoScalingNotificationTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingNotificationTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAutoScalingNotificationTypesAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingNotificationTypesInput) *DescribeAutoScalingNotificationTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeAutoScalingNotificationTypes", input)
	return &DescribeAutoScalingNotificationTypesFuture{Future: future}
}

func (a *stub) DescribeInstanceRefreshes(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) (*autoscaling.DescribeInstanceRefreshesOutput, error) {
	var output autoscaling.DescribeInstanceRefreshesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeInstanceRefreshes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceRefreshesAsync(ctx workflow.Context, input *autoscaling.DescribeInstanceRefreshesInput) *DescribeInstanceRefreshesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeInstanceRefreshes", input)
	return &DescribeInstanceRefreshesFuture{Future: future}
}

func (a *stub) DescribeLaunchConfigurations(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {
	var output autoscaling.DescribeLaunchConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLaunchConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLaunchConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeLaunchConfigurationsInput) *DescribeLaunchConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLaunchConfigurations", input)
	return &DescribeLaunchConfigurationsFuture{Future: future}
}

func (a *stub) DescribeLifecycleHookTypes(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {
	var output autoscaling.DescribeLifecycleHookTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLifecycleHookTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLifecycleHookTypesAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHookTypesInput) *DescribeLifecycleHookTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLifecycleHookTypes", input)
	return &DescribeLifecycleHookTypesFuture{Future: future}
}

func (a *stub) DescribeLifecycleHooks(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) (*autoscaling.DescribeLifecycleHooksOutput, error) {
	var output autoscaling.DescribeLifecycleHooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLifecycleHooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLifecycleHooksAsync(ctx workflow.Context, input *autoscaling.DescribeLifecycleHooksInput) *DescribeLifecycleHooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLifecycleHooks", input)
	return &DescribeLifecycleHooksFuture{Future: future}
}

func (a *stub) DescribeLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DescribeLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancerTargetGroupsInput) *DescribeLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLoadBalancerTargetGroups", input)
	return &DescribeLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *stub) DescribeLoadBalancers(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) (*autoscaling.DescribeLoadBalancersOutput, error) {
	var output autoscaling.DescribeLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DescribeLoadBalancersInput) *DescribeLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeLoadBalancers", input)
	return &DescribeLoadBalancersFuture{Future: future}
}

func (a *stub) DescribeMetricCollectionTypes(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {
	var output autoscaling.DescribeMetricCollectionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeMetricCollectionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMetricCollectionTypesAsync(ctx workflow.Context, input *autoscaling.DescribeMetricCollectionTypesInput) *DescribeMetricCollectionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeMetricCollectionTypes", input)
	return &DescribeMetricCollectionTypesFuture{Future: future}
}

func (a *stub) DescribeNotificationConfigurations(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {
	var output autoscaling.DescribeNotificationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeNotificationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotificationConfigurationsAsync(ctx workflow.Context, input *autoscaling.DescribeNotificationConfigurationsInput) *DescribeNotificationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeNotificationConfigurations", input)
	return &DescribeNotificationConfigurationsFuture{Future: future}
}

func (a *stub) DescribePolicies(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) (*autoscaling.DescribePoliciesOutput, error) {
	var output autoscaling.DescribePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePoliciesAsync(ctx workflow.Context, input *autoscaling.DescribePoliciesInput) *DescribePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribePolicies", input)
	return &DescribePoliciesFuture{Future: future}
}

func (a *stub) DescribeScalingActivities(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) (*autoscaling.DescribeScalingActivitiesOutput, error) {
	var output autoscaling.DescribeScalingActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScalingActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingActivitiesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingActivitiesInput) *DescribeScalingActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScalingActivities", input)
	return &DescribeScalingActivitiesFuture{Future: future}
}

func (a *stub) DescribeScalingProcessTypes(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) (*autoscaling.DescribeScalingProcessTypesOutput, error) {
	var output autoscaling.DescribeScalingProcessTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScalingProcessTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingProcessTypesAsync(ctx workflow.Context, input *autoscaling.DescribeScalingProcessTypesInput) *DescribeScalingProcessTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScalingProcessTypes", input)
	return &DescribeScalingProcessTypesFuture{Future: future}
}

func (a *stub) DescribeScheduledActions(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) (*autoscaling.DescribeScheduledActionsOutput, error) {
	var output autoscaling.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledActionsAsync(ctx workflow.Context, input *autoscaling.DescribeScheduledActionsInput) *DescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeScheduledActions", input)
	return &DescribeScheduledActionsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *autoscaling.DescribeTagsInput) (*autoscaling.DescribeTagsOutput, error) {
	var output autoscaling.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *autoscaling.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) DescribeTerminationPolicyTypes(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {
	var output autoscaling.DescribeTerminationPolicyTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeTerminationPolicyTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTerminationPolicyTypesAsync(ctx workflow.Context, input *autoscaling.DescribeTerminationPolicyTypesInput) *DescribeTerminationPolicyTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DescribeTerminationPolicyTypes", input)
	return &DescribeTerminationPolicyTypesFuture{Future: future}
}

func (a *stub) DetachInstances(ctx workflow.Context, input *autoscaling.DetachInstancesInput) (*autoscaling.DetachInstancesOutput, error) {
	var output autoscaling.DetachInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachInstancesAsync(ctx workflow.Context, input *autoscaling.DetachInstancesInput) *DetachInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachInstances", input)
	return &DetachInstancesFuture{Future: future}
}

func (a *stub) DetachLoadBalancerTargetGroups(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {
	var output autoscaling.DetachLoadBalancerTargetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachLoadBalancerTargetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachLoadBalancerTargetGroupsAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancerTargetGroupsInput) *DetachLoadBalancerTargetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachLoadBalancerTargetGroups", input)
	return &DetachLoadBalancerTargetGroupsFuture{Future: future}
}

func (a *stub) DetachLoadBalancers(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) (*autoscaling.DetachLoadBalancersOutput, error) {
	var output autoscaling.DetachLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachLoadBalancersAsync(ctx workflow.Context, input *autoscaling.DetachLoadBalancersInput) *DetachLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DetachLoadBalancers", input)
	return &DetachLoadBalancersFuture{Future: future}
}

func (a *stub) DisableMetricsCollection(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) (*autoscaling.DisableMetricsCollectionOutput, error) {
	var output autoscaling.DisableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-DisableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.DisableMetricsCollectionInput) *DisableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-DisableMetricsCollection", input)
	return &DisableMetricsCollectionFuture{Future: future}
}

func (a *stub) EnableMetricsCollection(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) (*autoscaling.EnableMetricsCollectionOutput, error) {
	var output autoscaling.EnableMetricsCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-EnableMetricsCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableMetricsCollectionAsync(ctx workflow.Context, input *autoscaling.EnableMetricsCollectionInput) *EnableMetricsCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-EnableMetricsCollection", input)
	return &EnableMetricsCollectionFuture{Future: future}
}

func (a *stub) EnterStandby(ctx workflow.Context, input *autoscaling.EnterStandbyInput) (*autoscaling.EnterStandbyOutput, error) {
	var output autoscaling.EnterStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-EnterStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnterStandbyAsync(ctx workflow.Context, input *autoscaling.EnterStandbyInput) *EnterStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-EnterStandby", input)
	return &EnterStandbyFuture{Future: future}
}

func (a *stub) ExecutePolicy(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) (*autoscaling.ExecutePolicyOutput, error) {
	var output autoscaling.ExecutePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-ExecutePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecutePolicyAsync(ctx workflow.Context, input *autoscaling.ExecutePolicyInput) *ExecutePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-ExecutePolicy", input)
	return &ExecutePolicyFuture{Future: future}
}

func (a *stub) ExitStandby(ctx workflow.Context, input *autoscaling.ExitStandbyInput) (*autoscaling.ExitStandbyOutput, error) {
	var output autoscaling.ExitStandbyOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-ExitStandby", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExitStandbyAsync(ctx workflow.Context, input *autoscaling.ExitStandbyInput) *ExitStandbyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-ExitStandby", input)
	return &ExitStandbyFuture{Future: future}
}

func (a *stub) PutLifecycleHook(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) (*autoscaling.PutLifecycleHookOutput, error) {
	var output autoscaling.PutLifecycleHookOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutLifecycleHook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecycleHookAsync(ctx workflow.Context, input *autoscaling.PutLifecycleHookInput) *PutLifecycleHookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutLifecycleHook", input)
	return &PutLifecycleHookFuture{Future: future}
}

func (a *stub) PutNotificationConfiguration(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) (*autoscaling.PutNotificationConfigurationOutput, error) {
	var output autoscaling.PutNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutNotificationConfigurationAsync(ctx workflow.Context, input *autoscaling.PutNotificationConfigurationInput) *PutNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutNotificationConfiguration", input)
	return &PutNotificationConfigurationFuture{Future: future}
}

func (a *stub) PutScalingPolicy(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) (*autoscaling.PutScalingPolicyOutput, error) {
	var output autoscaling.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScalingPolicyAsync(ctx workflow.Context, input *autoscaling.PutScalingPolicyInput) *PutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutScalingPolicy", input)
	return &PutScalingPolicyFuture{Future: future}
}

func (a *stub) PutScheduledUpdateGroupAction(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {
	var output autoscaling.PutScheduledUpdateGroupActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutScheduledUpdateGroupAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScheduledUpdateGroupActionAsync(ctx workflow.Context, input *autoscaling.PutScheduledUpdateGroupActionInput) *PutScheduledUpdateGroupActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-PutScheduledUpdateGroupAction", input)
	return &PutScheduledUpdateGroupActionFuture{Future: future}
}

func (a *stub) RecordLifecycleActionHeartbeat(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {
	var output autoscaling.RecordLifecycleActionHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-RecordLifecycleActionHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecordLifecycleActionHeartbeatAsync(ctx workflow.Context, input *autoscaling.RecordLifecycleActionHeartbeatInput) *RecordLifecycleActionHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-RecordLifecycleActionHeartbeat", input)
	return &RecordLifecycleActionHeartbeatFuture{Future: future}
}

func (a *stub) ResumeProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.ResumeProcessesOutput, error) {
	var output autoscaling.ResumeProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-ResumeProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *ResumeProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-ResumeProcesses", input)
	return &ResumeProcessesFuture{Future: future}
}

func (a *stub) SetDesiredCapacity(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) (*autoscaling.SetDesiredCapacityOutput, error) {
	var output autoscaling.SetDesiredCapacityOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetDesiredCapacity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetDesiredCapacityAsync(ctx workflow.Context, input *autoscaling.SetDesiredCapacityInput) *SetDesiredCapacityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetDesiredCapacity", input)
	return &SetDesiredCapacityFuture{Future: future}
}

func (a *stub) SetInstanceHealth(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) (*autoscaling.SetInstanceHealthOutput, error) {
	var output autoscaling.SetInstanceHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetInstanceHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetInstanceHealthAsync(ctx workflow.Context, input *autoscaling.SetInstanceHealthInput) *SetInstanceHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetInstanceHealth", input)
	return &SetInstanceHealthFuture{Future: future}
}

func (a *stub) SetInstanceProtection(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) (*autoscaling.SetInstanceProtectionOutput, error) {
	var output autoscaling.SetInstanceProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetInstanceProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetInstanceProtectionAsync(ctx workflow.Context, input *autoscaling.SetInstanceProtectionInput) *SetInstanceProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-SetInstanceProtection", input)
	return &SetInstanceProtectionFuture{Future: future}
}

func (a *stub) StartInstanceRefresh(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) (*autoscaling.StartInstanceRefreshOutput, error) {
	var output autoscaling.StartInstanceRefreshOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-StartInstanceRefresh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartInstanceRefreshAsync(ctx workflow.Context, input *autoscaling.StartInstanceRefreshInput) *StartInstanceRefreshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-StartInstanceRefresh", input)
	return &StartInstanceRefreshFuture{Future: future}
}

func (a *stub) SuspendProcesses(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) (*autoscaling.SuspendProcessesOutput, error) {
	var output autoscaling.SuspendProcessesOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-SuspendProcesses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SuspendProcessesAsync(ctx workflow.Context, input *autoscaling.ScalingProcessQuery) *SuspendProcessesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-SuspendProcesses", input)
	return &SuspendProcessesFuture{Future: future}
}

func (a *stub) TerminateInstanceInAutoScalingGroup(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {
	var output autoscaling.TerminateInstanceInAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-TerminateInstanceInAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateInstanceInAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.TerminateInstanceInAutoScalingGroupInput) *TerminateInstanceInAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-TerminateInstanceInAutoScalingGroup", input)
	return &TerminateInstanceInAutoScalingGroupFuture{Future: future}
}

func (a *stub) UpdateAutoScalingGroup(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) (*autoscaling.UpdateAutoScalingGroupOutput, error) {
	var output autoscaling.UpdateAutoScalingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-autoscaling-UpdateAutoScalingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAutoScalingGroupAsync(ctx workflow.Context, input *autoscaling.UpdateAutoScalingGroupInput) *UpdateAutoScalingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-UpdateAutoScalingGroup", input)
	return &UpdateAutoScalingGroupFuture{Future: future}
}

func (a *stub) WaitUntilGroupExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilGroupExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilGroupInService(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupInService", input).Get(ctx, nil)
}

func (a *stub) WaitUntilGroupInServiceAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupInService", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilGroupNotExists(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilGroupNotExistsAsync(ctx workflow.Context, input *autoscaling.DescribeAutoScalingGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-autoscaling-WaitUntilGroupNotExists", input)
	return clients.NewVoidFuture(future)
}
