// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package pollystub

import (
	"github.com/aws/aws-sdk-go/service/polly"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type PollyDeleteLexiconFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyDeleteLexiconFuture) Get(ctx workflow.Context) (*polly.DeleteLexiconOutput, error) {
	var output polly.DeleteLexiconOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyDescribeVoicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyDescribeVoicesFuture) Get(ctx workflow.Context) (*polly.DescribeVoicesOutput, error) {
	var output polly.DescribeVoicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyGetLexiconFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyGetLexiconFuture) Get(ctx workflow.Context) (*polly.GetLexiconOutput, error) {
	var output polly.GetLexiconOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyGetSpeechSynthesisTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyGetSpeechSynthesisTaskFuture) Get(ctx workflow.Context) (*polly.GetSpeechSynthesisTaskOutput, error) {
	var output polly.GetSpeechSynthesisTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyListLexiconsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyListLexiconsFuture) Get(ctx workflow.Context) (*polly.ListLexiconsOutput, error) {
	var output polly.ListLexiconsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyListSpeechSynthesisTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyListSpeechSynthesisTasksFuture) Get(ctx workflow.Context) (*polly.ListSpeechSynthesisTasksOutput, error) {
	var output polly.ListSpeechSynthesisTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyPutLexiconFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyPutLexiconFuture) Get(ctx workflow.Context) (*polly.PutLexiconOutput, error) {
	var output polly.PutLexiconOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollyStartSpeechSynthesisTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollyStartSpeechSynthesisTaskFuture) Get(ctx workflow.Context) (*polly.StartSpeechSynthesisTaskOutput, error) {
	var output polly.StartSpeechSynthesisTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollySynthesizeSpeechFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollySynthesizeSpeechFuture) Get(ctx workflow.Context) (*polly.SynthesizeSpeechOutput, error) {
	var output polly.SynthesizeSpeechOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLexicon(ctx workflow.Context, input *polly.DeleteLexiconInput) (*polly.DeleteLexiconOutput, error) {
	var output polly.DeleteLexiconOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-DeleteLexicon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLexiconAsync(ctx workflow.Context, input *polly.DeleteLexiconInput) *PollyDeleteLexiconFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-DeleteLexicon", input)
	return &PollyDeleteLexiconFuture{Future: future}
}

func (a *stub) DescribeVoices(ctx workflow.Context, input *polly.DescribeVoicesInput) (*polly.DescribeVoicesOutput, error) {
	var output polly.DescribeVoicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-DescribeVoices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVoicesAsync(ctx workflow.Context, input *polly.DescribeVoicesInput) *PollyDescribeVoicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-DescribeVoices", input)
	return &PollyDescribeVoicesFuture{Future: future}
}

func (a *stub) GetLexicon(ctx workflow.Context, input *polly.GetLexiconInput) (*polly.GetLexiconOutput, error) {
	var output polly.GetLexiconOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-GetLexicon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLexiconAsync(ctx workflow.Context, input *polly.GetLexiconInput) *PollyGetLexiconFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-GetLexicon", input)
	return &PollyGetLexiconFuture{Future: future}
}

func (a *stub) GetSpeechSynthesisTask(ctx workflow.Context, input *polly.GetSpeechSynthesisTaskInput) (*polly.GetSpeechSynthesisTaskOutput, error) {
	var output polly.GetSpeechSynthesisTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-GetSpeechSynthesisTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSpeechSynthesisTaskAsync(ctx workflow.Context, input *polly.GetSpeechSynthesisTaskInput) *PollyGetSpeechSynthesisTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-GetSpeechSynthesisTask", input)
	return &PollyGetSpeechSynthesisTaskFuture{Future: future}
}

func (a *stub) ListLexicons(ctx workflow.Context, input *polly.ListLexiconsInput) (*polly.ListLexiconsOutput, error) {
	var output polly.ListLexiconsOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-ListLexicons", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLexiconsAsync(ctx workflow.Context, input *polly.ListLexiconsInput) *PollyListLexiconsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-ListLexicons", input)
	return &PollyListLexiconsFuture{Future: future}
}

func (a *stub) ListSpeechSynthesisTasks(ctx workflow.Context, input *polly.ListSpeechSynthesisTasksInput) (*polly.ListSpeechSynthesisTasksOutput, error) {
	var output polly.ListSpeechSynthesisTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-ListSpeechSynthesisTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSpeechSynthesisTasksAsync(ctx workflow.Context, input *polly.ListSpeechSynthesisTasksInput) *PollyListSpeechSynthesisTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-ListSpeechSynthesisTasks", input)
	return &PollyListSpeechSynthesisTasksFuture{Future: future}
}

func (a *stub) PutLexicon(ctx workflow.Context, input *polly.PutLexiconInput) (*polly.PutLexiconOutput, error) {
	var output polly.PutLexiconOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-PutLexicon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLexiconAsync(ctx workflow.Context, input *polly.PutLexiconInput) *PollyPutLexiconFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-PutLexicon", input)
	return &PollyPutLexiconFuture{Future: future}
}

func (a *stub) StartSpeechSynthesisTask(ctx workflow.Context, input *polly.StartSpeechSynthesisTaskInput) (*polly.StartSpeechSynthesisTaskOutput, error) {
	var output polly.StartSpeechSynthesisTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-StartSpeechSynthesisTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSpeechSynthesisTaskAsync(ctx workflow.Context, input *polly.StartSpeechSynthesisTaskInput) *PollyStartSpeechSynthesisTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-StartSpeechSynthesisTask", input)
	return &PollyStartSpeechSynthesisTaskFuture{Future: future}
}

func (a *stub) SynthesizeSpeech(ctx workflow.Context, input *polly.SynthesizeSpeechInput) (*polly.SynthesizeSpeechOutput, error) {
	var output polly.SynthesizeSpeechOutput
	err := workflow.ExecuteActivity(ctx, "aws-polly-SynthesizeSpeech", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SynthesizeSpeechAsync(ctx workflow.Context, input *polly.SynthesizeSpeechInput) *PollySynthesizeSpeechFuture {
	future := workflow.ExecuteActivity(ctx, "aws-polly-SynthesizeSpeech", input)
	return &PollySynthesizeSpeechFuture{Future: future}
}
