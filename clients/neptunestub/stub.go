// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package neptunestub

import (
	"github.com/aws/aws-sdk-go/service/neptune"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddRoleToDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddRoleToDBClusterFuture) Get(ctx workflow.Context) (*neptune.AddRoleToDBClusterOutput, error) {
	var output neptune.AddRoleToDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddSourceIdentifierToSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddSourceIdentifierToSubscriptionFuture) Get(ctx workflow.Context) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	var output neptune.AddSourceIdentifierToSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*neptune.AddTagsToResourceOutput, error) {
	var output neptune.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	var output neptune.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	var output neptune.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.CopyDBClusterSnapshotOutput, error) {
	var output neptune.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CopyDBParameterGroupOutput, error) {
	var output neptune.CopyDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterOutput, error) {
	var output neptune.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterEndpointFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterEndpointOutput, error) {
	var output neptune.CreateDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	var output neptune.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.CreateDBClusterSnapshotOutput, error) {
	var output neptune.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBInstanceFuture) Get(ctx workflow.Context) (*neptune.CreateDBInstanceOutput, error) {
	var output neptune.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBParameterGroupOutput, error) {
	var output neptune.CreateDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.CreateDBSubnetGroupOutput, error) {
	var output neptune.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.CreateEventSubscriptionOutput, error) {
	var output neptune.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterOutput, error) {
	var output neptune.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterEndpointFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterEndpointOutput, error) {
	var output neptune.DeleteDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	var output neptune.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	var output neptune.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBInstanceFuture) Get(ctx workflow.Context) (*neptune.DeleteDBInstanceOutput, error) {
	var output neptune.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBParameterGroupOutput, error) {
	var output neptune.DeleteDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.DeleteDBSubnetGroupOutput, error) {
	var output neptune.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.DeleteEventSubscriptionOutput, error) {
	var output neptune.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterEndpointsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterEndpointsOutput, error) {
	var output neptune.DescribeDBClusterEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	var output neptune.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterParametersOutput, error) {
	var output neptune.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterSnapshotAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output neptune.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	var output neptune.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClustersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBClustersOutput, error) {
	var output neptune.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBEngineVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBEngineVersionsOutput, error) {
	var output neptune.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBInstancesFuture) Get(ctx workflow.Context) (*neptune.DescribeDBInstancesOutput, error) {
	var output neptune.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBParameterGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBParameterGroupsOutput, error) {
	var output neptune.DescribeDBParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeDBParametersOutput, error) {
	var output neptune.DescribeDBParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	var output neptune.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEngineDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	var output neptune.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEngineDefaultParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEngineDefaultParametersFuture) Get(ctx workflow.Context) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	var output neptune.DescribeEngineDefaultParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventCategoriesFuture) Get(ctx workflow.Context) (*neptune.DescribeEventCategoriesOutput, error) {
	var output neptune.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*neptune.DescribeEventSubscriptionsOutput, error) {
	var output neptune.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*neptune.DescribeEventsOutput, error) {
	var output neptune.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrderableDBInstanceOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output neptune.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	var output neptune.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeValidDBInstanceModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeValidDBInstanceModificationsFuture) Get(ctx workflow.Context) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	var output neptune.DescribeValidDBInstanceModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FailoverDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FailoverDBClusterFuture) Get(ctx workflow.Context) (*neptune.FailoverDBClusterOutput, error) {
	var output neptune.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*neptune.ListTagsForResourceOutput, error) {
	var output neptune.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterFuture) Get(ctx workflow.Context) (*neptune.ModifyDBClusterOutput, error) {
	var output neptune.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterEndpointFuture) Get(ctx workflow.Context) (*neptune.ModifyDBClusterEndpointOutput, error) {
	var output neptune.ModifyDBClusterEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output neptune.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBInstanceFuture) Get(ctx workflow.Context) (*neptune.ModifyDBInstanceOutput, error) {
	var output neptune.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*neptune.ModifyDBSubnetGroupOutput, error) {
	var output neptune.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*neptune.ModifyEventSubscriptionOutput, error) {
	var output neptune.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PromoteReadReplicaDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PromoteReadReplicaDBClusterFuture) Get(ctx workflow.Context) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	var output neptune.PromoteReadReplicaDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootDBInstanceFuture) Get(ctx workflow.Context) (*neptune.RebootDBInstanceOutput, error) {
	var output neptune.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveRoleFromDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveRoleFromDBClusterFuture) Get(ctx workflow.Context) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	var output neptune.RemoveRoleFromDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveSourceIdentifierFromSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveSourceIdentifierFromSubscriptionFuture) Get(ctx workflow.Context) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output neptune.RemoveSourceIdentifierFromSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*neptune.RemoveTagsFromResourceOutput, error) {
	var output neptune.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetDBParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetDBParameterGroupFuture) Get(ctx workflow.Context) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreDBClusterFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	var output neptune.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreDBClusterToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	var output neptune.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDBClusterFuture) Get(ctx workflow.Context) (*neptune.StartDBClusterOutput, error) {
	var output neptune.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDBClusterFuture) Get(ctx workflow.Context) (*neptune.StopDBClusterOutput, error) {
	var output neptune.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToDBCluster(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) (*neptune.AddRoleToDBClusterOutput, error) {
	var output neptune.AddRoleToDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-AddRoleToDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToDBClusterAsync(ctx workflow.Context, input *neptune.AddRoleToDBClusterInput) *AddRoleToDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-AddRoleToDBCluster", input)
	return &AddRoleToDBClusterFuture{Future: future}
}

func (a *stub) AddSourceIdentifierToSubscription(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	var output neptune.AddSourceIdentifierToSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-AddSourceIdentifierToSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddSourceIdentifierToSubscriptionAsync(ctx workflow.Context, input *neptune.AddSourceIdentifierToSubscriptionInput) *AddSourceIdentifierToSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-AddSourceIdentifierToSubscription", input)
	return &AddSourceIdentifierToSubscriptionFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *neptune.AddTagsToResourceInput) (*neptune.AddTagsToResourceOutput, error) {
	var output neptune.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *neptune.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	var output neptune.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *neptune.ApplyPendingMaintenanceActionInput) *ApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ApplyPendingMaintenanceAction", input)
	return &ApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) CopyDBClusterParameterGroup(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	var output neptune.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBClusterParameterGroupInput) *CopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBClusterParameterGroup", input)
	return &CopyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CopyDBClusterSnapshot(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) (*neptune.CopyDBClusterSnapshotOutput, error) {
	var output neptune.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CopyDBClusterSnapshotInput) *CopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBClusterSnapshot", input)
	return &CopyDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CopyDBParameterGroup(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) (*neptune.CopyDBParameterGroupOutput, error) {
	var output neptune.CopyDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBParameterGroupAsync(ctx workflow.Context, input *neptune.CopyDBParameterGroupInput) *CopyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CopyDBParameterGroup", input)
	return &CopyDBParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBCluster(ctx workflow.Context, input *neptune.CreateDBClusterInput) (*neptune.CreateDBClusterOutput, error) {
	var output neptune.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterAsync(ctx workflow.Context, input *neptune.CreateDBClusterInput) *CreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBCluster", input)
	return &CreateDBClusterFuture{Future: future}
}

func (a *stub) CreateDBClusterEndpoint(ctx workflow.Context, input *neptune.CreateDBClusterEndpointInput) (*neptune.CreateDBClusterEndpointOutput, error) {
	var output neptune.CreateDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterEndpointAsync(ctx workflow.Context, input *neptune.CreateDBClusterEndpointInput) *CreateDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterEndpoint", input)
	return &CreateDBClusterEndpointFuture{Future: future}
}

func (a *stub) CreateDBClusterParameterGroup(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	var output neptune.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBClusterParameterGroupInput) *CreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterParameterGroup", input)
	return &CreateDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBClusterSnapshot(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) (*neptune.CreateDBClusterSnapshotOutput, error) {
	var output neptune.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.CreateDBClusterSnapshotInput) *CreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBClusterSnapshot", input)
	return &CreateDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBInstance(ctx workflow.Context, input *neptune.CreateDBInstanceInput) (*neptune.CreateDBInstanceOutput, error) {
	var output neptune.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBInstanceAsync(ctx workflow.Context, input *neptune.CreateDBInstanceInput) *CreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBInstance", input)
	return &CreateDBInstanceFuture{Future: future}
}

func (a *stub) CreateDBParameterGroup(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) (*neptune.CreateDBParameterGroupOutput, error) {
	var output neptune.CreateDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBParameterGroupAsync(ctx workflow.Context, input *neptune.CreateDBParameterGroupInput) *CreateDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBParameterGroup", input)
	return &CreateDBParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBSubnetGroup(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) (*neptune.CreateDBSubnetGroupOutput, error) {
	var output neptune.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *neptune.CreateDBSubnetGroupInput) *CreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateDBSubnetGroup", input)
	return &CreateDBSubnetGroupFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) (*neptune.CreateEventSubscriptionOutput, error) {
	var output neptune.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *neptune.CreateEventSubscriptionInput) *CreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-CreateEventSubscription", input)
	return &CreateEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteDBCluster(ctx workflow.Context, input *neptune.DeleteDBClusterInput) (*neptune.DeleteDBClusterOutput, error) {
	var output neptune.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterAsync(ctx workflow.Context, input *neptune.DeleteDBClusterInput) *DeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBCluster", input)
	return &DeleteDBClusterFuture{Future: future}
}

func (a *stub) DeleteDBClusterEndpoint(ctx workflow.Context, input *neptune.DeleteDBClusterEndpointInput) (*neptune.DeleteDBClusterEndpointOutput, error) {
	var output neptune.DeleteDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterEndpointAsync(ctx workflow.Context, input *neptune.DeleteDBClusterEndpointInput) *DeleteDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterEndpoint", input)
	return &DeleteDBClusterEndpointFuture{Future: future}
}

func (a *stub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	var output neptune.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBClusterParameterGroupInput) *DeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterParameterGroup", input)
	return &DeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBClusterSnapshot(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	var output neptune.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *neptune.DeleteDBClusterSnapshotInput) *DeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBClusterSnapshot", input)
	return &DeleteDBClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteDBInstance(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) (*neptune.DeleteDBInstanceOutput, error) {
	var output neptune.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBInstanceAsync(ctx workflow.Context, input *neptune.DeleteDBInstanceInput) *DeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBInstance", input)
	return &DeleteDBInstanceFuture{Future: future}
}

func (a *stub) DeleteDBParameterGroup(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) (*neptune.DeleteDBParameterGroupOutput, error) {
	var output neptune.DeleteDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBParameterGroupAsync(ctx workflow.Context, input *neptune.DeleteDBParameterGroupInput) *DeleteDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBParameterGroup", input)
	return &DeleteDBParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBSubnetGroup(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) (*neptune.DeleteDBSubnetGroupOutput, error) {
	var output neptune.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *neptune.DeleteDBSubnetGroupInput) *DeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteDBSubnetGroup", input)
	return &DeleteDBSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) (*neptune.DeleteEventSubscriptionOutput, error) {
	var output neptune.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *neptune.DeleteEventSubscriptionInput) *DeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DeleteEventSubscription", input)
	return &DeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DescribeDBClusterEndpoints(ctx workflow.Context, input *neptune.DescribeDBClusterEndpointsInput) (*neptune.DescribeDBClusterEndpointsOutput, error) {
	var output neptune.DescribeDBClusterEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterEndpointsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterEndpointsInput) *DescribeDBClusterEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterEndpoints", input)
	return &DescribeDBClusterEndpointsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	var output neptune.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParameterGroupsInput) *DescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterParameterGroups", input)
	return &DescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameters(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) (*neptune.DescribeDBClusterParametersOutput, error) {
	var output neptune.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeDBClusterParametersInput) *DescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterParameters", input)
	return &DescribeDBClusterParametersFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output neptune.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotAttributesInput) *DescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterSnapshotAttributes", input)
	return &DescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshots(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	var output neptune.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *neptune.DescribeDBClusterSnapshotsInput) *DescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusterSnapshots", input)
	return &DescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeDBClusters(ctx workflow.Context, input *neptune.DescribeDBClustersInput) (*neptune.DescribeDBClustersOutput, error) {
	var output neptune.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClustersAsync(ctx workflow.Context, input *neptune.DescribeDBClustersInput) *DescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBClusters", input)
	return &DescribeDBClustersFuture{Future: future}
}

func (a *stub) DescribeDBEngineVersions(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) (*neptune.DescribeDBEngineVersionsOutput, error) {
	var output neptune.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *neptune.DescribeDBEngineVersionsInput) *DescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBEngineVersions", input)
	return &DescribeDBEngineVersionsFuture{Future: future}
}

func (a *stub) DescribeDBInstances(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) (*neptune.DescribeDBInstancesOutput, error) {
	var output neptune.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBInstancesAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) *DescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBInstances", input)
	return &DescribeDBInstancesFuture{Future: future}
}

func (a *stub) DescribeDBParameterGroups(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) (*neptune.DescribeDBParameterGroupsOutput, error) {
	var output neptune.DescribeDBParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBParameterGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBParameterGroupsInput) *DescribeDBParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBParameterGroups", input)
	return &DescribeDBParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBParameters(ctx workflow.Context, input *neptune.DescribeDBParametersInput) (*neptune.DescribeDBParametersOutput, error) {
	var output neptune.DescribeDBParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBParametersAsync(ctx workflow.Context, input *neptune.DescribeDBParametersInput) *DescribeDBParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBParameters", input)
	return &DescribeDBParametersFuture{Future: future}
}

func (a *stub) DescribeDBSubnetGroups(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	var output neptune.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *neptune.DescribeDBSubnetGroupsInput) *DescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeDBSubnetGroups", input)
	return &DescribeDBSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	var output neptune.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultClusterParametersInput) *DescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEngineDefaultClusterParameters", input)
	return &DescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultParameters(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	var output neptune.DescribeEngineDefaultParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEngineDefaultParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultParametersAsync(ctx workflow.Context, input *neptune.DescribeEngineDefaultParametersInput) *DescribeEngineDefaultParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEngineDefaultParameters", input)
	return &DescribeEngineDefaultParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) (*neptune.DescribeEventCategoriesOutput, error) {
	var output neptune.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *neptune.DescribeEventCategoriesInput) *DescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEventCategories", input)
	return &DescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) (*neptune.DescribeEventSubscriptionsOutput, error) {
	var output neptune.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *neptune.DescribeEventSubscriptionsInput) *DescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEventSubscriptions", input)
	return &DescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *neptune.DescribeEventsInput) (*neptune.DescribeEventsOutput, error) {
	var output neptune.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *neptune.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output neptune.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *neptune.DescribeOrderableDBInstanceOptionsInput) *DescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeOrderableDBInstanceOptions", input)
	return &DescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	var output neptune.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *neptune.DescribePendingMaintenanceActionsInput) *DescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribePendingMaintenanceActions", input)
	return &DescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) DescribeValidDBInstanceModifications(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	var output neptune.DescribeValidDBInstanceModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeValidDBInstanceModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeValidDBInstanceModificationsAsync(ctx workflow.Context, input *neptune.DescribeValidDBInstanceModificationsInput) *DescribeValidDBInstanceModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-DescribeValidDBInstanceModifications", input)
	return &DescribeValidDBInstanceModificationsFuture{Future: future}
}

func (a *stub) FailoverDBCluster(ctx workflow.Context, input *neptune.FailoverDBClusterInput) (*neptune.FailoverDBClusterOutput, error) {
	var output neptune.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FailoverDBClusterAsync(ctx workflow.Context, input *neptune.FailoverDBClusterInput) *FailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-FailoverDBCluster", input)
	return &FailoverDBClusterFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *neptune.ListTagsForResourceInput) (*neptune.ListTagsForResourceOutput, error) {
	var output neptune.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *neptune.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyDBCluster(ctx workflow.Context, input *neptune.ModifyDBClusterInput) (*neptune.ModifyDBClusterOutput, error) {
	var output neptune.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterAsync(ctx workflow.Context, input *neptune.ModifyDBClusterInput) *ModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBCluster", input)
	return &ModifyDBClusterFuture{Future: future}
}

func (a *stub) ModifyDBClusterEndpoint(ctx workflow.Context, input *neptune.ModifyDBClusterEndpointInput) (*neptune.ModifyDBClusterEndpointOutput, error) {
	var output neptune.ModifyDBClusterEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterEndpointAsync(ctx workflow.Context, input *neptune.ModifyDBClusterEndpointInput) *ModifyDBClusterEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterEndpoint", input)
	return &ModifyDBClusterEndpointFuture{Future: future}
}

func (a *stub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBClusterParameterGroupInput) *ModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterParameterGroup", input)
	return &ModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output neptune.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *neptune.ModifyDBClusterSnapshotAttributeInput) *ModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBClusterSnapshotAttribute", input)
	return &ModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifyDBInstance(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) (*neptune.ModifyDBInstanceOutput, error) {
	var output neptune.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBInstanceAsync(ctx workflow.Context, input *neptune.ModifyDBInstanceInput) *ModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBInstance", input)
	return &ModifyDBInstanceFuture{Future: future}
}

func (a *stub) ModifyDBParameterGroup(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBParameterGroupAsync(ctx workflow.Context, input *neptune.ModifyDBParameterGroupInput) *ModifyDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBParameterGroup", input)
	return &ModifyDBParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBSubnetGroup(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) (*neptune.ModifyDBSubnetGroupOutput, error) {
	var output neptune.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *neptune.ModifyDBSubnetGroupInput) *ModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyDBSubnetGroup", input)
	return &ModifyDBSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) (*neptune.ModifyEventSubscriptionOutput, error) {
	var output neptune.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *neptune.ModifyEventSubscriptionInput) *ModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ModifyEventSubscription", input)
	return &ModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) PromoteReadReplicaDBCluster(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	var output neptune.PromoteReadReplicaDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-PromoteReadReplicaDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PromoteReadReplicaDBClusterAsync(ctx workflow.Context, input *neptune.PromoteReadReplicaDBClusterInput) *PromoteReadReplicaDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-PromoteReadReplicaDBCluster", input)
	return &PromoteReadReplicaDBClusterFuture{Future: future}
}

func (a *stub) RebootDBInstance(ctx workflow.Context, input *neptune.RebootDBInstanceInput) (*neptune.RebootDBInstanceOutput, error) {
	var output neptune.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootDBInstanceAsync(ctx workflow.Context, input *neptune.RebootDBInstanceInput) *RebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RebootDBInstance", input)
	return &RebootDBInstanceFuture{Future: future}
}

func (a *stub) RemoveRoleFromDBCluster(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	var output neptune.RemoveRoleFromDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveRoleFromDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveRoleFromDBClusterAsync(ctx workflow.Context, input *neptune.RemoveRoleFromDBClusterInput) *RemoveRoleFromDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveRoleFromDBCluster", input)
	return &RemoveRoleFromDBClusterFuture{Future: future}
}

func (a *stub) RemoveSourceIdentifierFromSubscription(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	var output neptune.RemoveSourceIdentifierFromSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveSourceIdentifierFromSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveSourceIdentifierFromSubscriptionAsync(ctx workflow.Context, input *neptune.RemoveSourceIdentifierFromSubscriptionInput) *RemoveSourceIdentifierFromSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveSourceIdentifierFromSubscription", input)
	return &RemoveSourceIdentifierFromSubscriptionFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) (*neptune.RemoveTagsFromResourceOutput, error) {
	var output neptune.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *neptune.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetDBClusterParameterGroup(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	var output neptune.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBClusterParameterGroupInput) *ResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ResetDBClusterParameterGroup", input)
	return &ResetDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ResetDBParameterGroup(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	var output neptune.ResetDBParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-ResetDBParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBParameterGroupAsync(ctx workflow.Context, input *neptune.ResetDBParameterGroupInput) *ResetDBParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-ResetDBParameterGroup", input)
	return &ResetDBParameterGroupFuture{Future: future}
}

func (a *stub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	var output neptune.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *neptune.RestoreDBClusterFromSnapshotInput) *RestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RestoreDBClusterFromSnapshot", input)
	return &RestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *stub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	var output neptune.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *neptune.RestoreDBClusterToPointInTimeInput) *RestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-RestoreDBClusterToPointInTime", input)
	return &RestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *stub) StartDBCluster(ctx workflow.Context, input *neptune.StartDBClusterInput) (*neptune.StartDBClusterOutput, error) {
	var output neptune.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDBClusterAsync(ctx workflow.Context, input *neptune.StartDBClusterInput) *StartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-StartDBCluster", input)
	return &StartDBClusterFuture{Future: future}
}

func (a *stub) StopDBCluster(ctx workflow.Context, input *neptune.StopDBClusterInput) (*neptune.StopDBClusterOutput, error) {
	var output neptune.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-neptune-StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDBClusterAsync(ctx workflow.Context, input *neptune.StopDBClusterInput) *StopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-StopDBCluster", input)
	return &StopDBClusterFuture{Future: future}
}

func (a *stub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-neptune-WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-WaitUntilDBInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-neptune-WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *neptune.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-neptune-WaitUntilDBInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}
