// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package stsstub

import (
	"github.com/aws/aws-sdk-go/service/sts"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type STSAssumeRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSAssumeRoleFuture) Get(ctx workflow.Context) (*sts.AssumeRoleOutput, error) {
	var output sts.AssumeRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSAssumeRoleWithSAMLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSAssumeRoleWithSAMLFuture) Get(ctx workflow.Context) (*sts.AssumeRoleWithSAMLOutput, error) {
	var output sts.AssumeRoleWithSAMLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSAssumeRoleWithWebIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSAssumeRoleWithWebIdentityFuture) Get(ctx workflow.Context) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	var output sts.AssumeRoleWithWebIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSDecodeAuthorizationMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSDecodeAuthorizationMessageFuture) Get(ctx workflow.Context) (*sts.DecodeAuthorizationMessageOutput, error) {
	var output sts.DecodeAuthorizationMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSGetAccessKeyInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSGetAccessKeyInfoFuture) Get(ctx workflow.Context) (*sts.GetAccessKeyInfoOutput, error) {
	var output sts.GetAccessKeyInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSGetCallerIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSGetCallerIdentityFuture) Get(ctx workflow.Context) (*sts.GetCallerIdentityOutput, error) {
	var output sts.GetCallerIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSGetFederationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSGetFederationTokenFuture) Get(ctx workflow.Context) (*sts.GetFederationTokenOutput, error) {
	var output sts.GetFederationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type STSGetSessionTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *STSGetSessionTokenFuture) Get(ctx workflow.Context) (*sts.GetSessionTokenOutput, error) {
	var output sts.GetSessionTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssumeRole(ctx workflow.Context, input *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	var output sts.AssumeRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssumeRoleAsync(ctx workflow.Context, input *sts.AssumeRoleInput) *STSAssumeRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRole", input)
	return &STSAssumeRoleFuture{Future: future}
}

func (a *stub) AssumeRoleWithSAML(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
	var output sts.AssumeRoleWithSAMLOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRoleWithSAML", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssumeRoleWithSAMLAsync(ctx workflow.Context, input *sts.AssumeRoleWithSAMLInput) *STSAssumeRoleWithSAMLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRoleWithSAML", input)
	return &STSAssumeRoleWithSAMLFuture{Future: future}
}

func (a *stub) AssumeRoleWithWebIdentity(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	var output sts.AssumeRoleWithWebIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRoleWithWebIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssumeRoleWithWebIdentityAsync(ctx workflow.Context, input *sts.AssumeRoleWithWebIdentityInput) *STSAssumeRoleWithWebIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-AssumeRoleWithWebIdentity", input)
	return &STSAssumeRoleWithWebIdentityFuture{Future: future}
}

func (a *stub) DecodeAuthorizationMessage(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
	var output sts.DecodeAuthorizationMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-DecodeAuthorizationMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DecodeAuthorizationMessageAsync(ctx workflow.Context, input *sts.DecodeAuthorizationMessageInput) *STSDecodeAuthorizationMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-DecodeAuthorizationMessage", input)
	return &STSDecodeAuthorizationMessageFuture{Future: future}
}

func (a *stub) GetAccessKeyInfo(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) (*sts.GetAccessKeyInfoOutput, error) {
	var output sts.GetAccessKeyInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-GetAccessKeyInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessKeyInfoAsync(ctx workflow.Context, input *sts.GetAccessKeyInfoInput) *STSGetAccessKeyInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-GetAccessKeyInfo", input)
	return &STSGetAccessKeyInfoFuture{Future: future}
}

func (a *stub) GetCallerIdentity(ctx workflow.Context, input *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	var output sts.GetCallerIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-GetCallerIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCallerIdentityAsync(ctx workflow.Context, input *sts.GetCallerIdentityInput) *STSGetCallerIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-GetCallerIdentity", input)
	return &STSGetCallerIdentityFuture{Future: future}
}

func (a *stub) GetFederationToken(ctx workflow.Context, input *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
	var output sts.GetFederationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-GetFederationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFederationTokenAsync(ctx workflow.Context, input *sts.GetFederationTokenInput) *STSGetFederationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-GetFederationToken", input)
	return &STSGetFederationTokenFuture{Future: future}
}

func (a *stub) GetSessionToken(ctx workflow.Context, input *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
	var output sts.GetSessionTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-sts-GetSessionToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSessionTokenAsync(ctx workflow.Context, input *sts.GetSessionTokenInput) *STSGetSessionTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sts-GetSessionToken", input)
	return &STSGetSessionTokenFuture{Future: future}
}
