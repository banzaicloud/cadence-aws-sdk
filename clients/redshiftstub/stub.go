// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package redshiftstub

import (
	"github.com/aws/aws-sdk-go/service/redshift"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptReservedNodeExchangeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptReservedNodeExchangeFuture) Get(ctx workflow.Context) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	var output redshift.AcceptReservedNodeExchangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeClusterSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeClusterSecurityGroupIngressFuture) Get(ctx workflow.Context) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	var output redshift.AuthorizeClusterSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeSnapshotAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeSnapshotAccessFuture) Get(ctx workflow.Context) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	var output redshift.AuthorizeSnapshotAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	var output redshift.BatchDeleteClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchModifyClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchModifyClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	var output redshift.BatchModifyClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelResizeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelResizeFuture) Get(ctx workflow.Context) (*redshift.CancelResizeOutput, error) {
	var output redshift.CancelResizeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.CopyClusterSnapshotOutput, error) {
	var output redshift.CopyClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterFuture) Get(ctx workflow.Context) (*redshift.CreateClusterOutput, error) {
	var output redshift.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterParameterGroupOutput, error) {
	var output redshift.CreateClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterSecurityGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSecurityGroupOutput, error) {
	var output redshift.CreateClusterSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSnapshotOutput, error) {
	var output redshift.CreateClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSubnetGroupOutput, error) {
	var output redshift.CreateClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.CreateEventSubscriptionOutput, error) {
	var output redshift.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateHsmClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHsmClientCertificateFuture) Get(ctx workflow.Context) (*redshift.CreateHsmClientCertificateOutput, error) {
	var output redshift.CreateHsmClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateHsmConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHsmConfigurationFuture) Get(ctx workflow.Context) (*redshift.CreateHsmConfigurationOutput, error) {
	var output redshift.CreateHsmConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateScheduledActionFuture) Get(ctx workflow.Context) (*redshift.CreateScheduledActionOutput, error) {
	var output redshift.CreateScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotCopyGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotCopyGrantFuture) Get(ctx workflow.Context) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	var output redshift.CreateSnapshotCopyGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.CreateSnapshotScheduleOutput, error) {
	var output redshift.CreateSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*redshift.CreateTagsOutput, error) {
	var output redshift.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUsageLimitFuture) Get(ctx workflow.Context) (*redshift.CreateUsageLimitOutput, error) {
	var output redshift.CreateUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterOutput, error) {
	var output redshift.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterParameterGroupOutput, error) {
	var output redshift.DeleteClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterSecurityGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	var output redshift.DeleteClusterSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSnapshotOutput, error) {
	var output redshift.DeleteClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	var output redshift.DeleteClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.DeleteEventSubscriptionOutput, error) {
	var output redshift.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteHsmClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteHsmClientCertificateFuture) Get(ctx workflow.Context) (*redshift.DeleteHsmClientCertificateOutput, error) {
	var output redshift.DeleteHsmClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteHsmConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteHsmConfigurationFuture) Get(ctx workflow.Context) (*redshift.DeleteHsmConfigurationOutput, error) {
	var output redshift.DeleteHsmConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScheduledActionFuture) Get(ctx workflow.Context) (*redshift.DeleteScheduledActionOutput, error) {
	var output redshift.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotCopyGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotCopyGrantFuture) Get(ctx workflow.Context) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	var output redshift.DeleteSnapshotCopyGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.DeleteSnapshotScheduleOutput, error) {
	var output redshift.DeleteSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*redshift.DeleteTagsOutput, error) {
	var output redshift.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUsageLimitFuture) Get(ctx workflow.Context) (*redshift.DeleteUsageLimitOutput, error) {
	var output redshift.DeleteUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*redshift.DescribeAccountAttributesOutput, error) {
	var output redshift.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterDbRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterDbRevisionsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	var output redshift.DescribeClusterDbRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterParameterGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	var output redshift.DescribeClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterParametersFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterParametersOutput, error) {
	var output redshift.DescribeClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterSecurityGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	var output redshift.DescribeClusterSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSnapshotsOutput, error) {
	var output redshift.DescribeClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterSubnetGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	var output redshift.DescribeClusterSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterTracksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterTracksFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterTracksOutput, error) {
	var output redshift.DescribeClusterTracksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterVersionsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterVersionsOutput, error) {
	var output redshift.DescribeClusterVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClustersFuture) Get(ctx workflow.Context) (*redshift.DescribeClustersOutput, error) {
	var output redshift.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDefaultClusterParametersFuture) Get(ctx workflow.Context) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	var output redshift.DescribeDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventCategoriesFuture) Get(ctx workflow.Context) (*redshift.DescribeEventCategoriesOutput, error) {
	var output redshift.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeEventSubscriptionsOutput, error) {
	var output redshift.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*redshift.DescribeEventsOutput, error) {
	var output redshift.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHsmClientCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHsmClientCertificatesFuture) Get(ctx workflow.Context) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	var output redshift.DescribeHsmClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHsmConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHsmConfigurationsFuture) Get(ctx workflow.Context) (*redshift.DescribeHsmConfigurationsOutput, error) {
	var output redshift.DescribeHsmConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoggingStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoggingStatusFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNodeConfigurationOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNodeConfigurationOptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {
	var output redshift.DescribeNodeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrderableClusterOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrderableClusterOptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	var output redshift.DescribeOrderableClusterOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedNodeOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedNodeOfferingsFuture) Get(ctx workflow.Context) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	var output redshift.DescribeReservedNodeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedNodesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedNodesFuture) Get(ctx workflow.Context) (*redshift.DescribeReservedNodesOutput, error) {
	var output redshift.DescribeReservedNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResizeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResizeFuture) Get(ctx workflow.Context) (*redshift.DescribeResizeOutput, error) {
	var output redshift.DescribeResizeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduledActionsFuture) Get(ctx workflow.Context) (*redshift.DescribeScheduledActionsOutput, error) {
	var output redshift.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotCopyGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotCopyGrantsFuture) Get(ctx workflow.Context) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	var output redshift.DescribeSnapshotCopyGrantsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotSchedulesFuture) Get(ctx workflow.Context) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	var output redshift.DescribeSnapshotSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStorageFuture) Get(ctx workflow.Context) (*redshift.DescribeStorageOutput, error) {
	var output redshift.DescribeStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTableRestoreStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTableRestoreStatusFuture) Get(ctx workflow.Context) (*redshift.DescribeTableRestoreStatusOutput, error) {
	var output redshift.DescribeTableRestoreStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*redshift.DescribeTagsOutput, error) {
	var output redshift.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUsageLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUsageLimitsFuture) Get(ctx workflow.Context) (*redshift.DescribeUsageLimitsOutput, error) {
	var output redshift.DescribeUsageLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableLoggingFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableSnapshotCopyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableSnapshotCopyFuture) Get(ctx workflow.Context) (*redshift.DisableSnapshotCopyOutput, error) {
	var output redshift.DisableSnapshotCopyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableLoggingFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableSnapshotCopyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableSnapshotCopyFuture) Get(ctx workflow.Context) (*redshift.EnableSnapshotCopyOutput, error) {
	var output redshift.EnableSnapshotCopyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetClusterCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClusterCredentialsFuture) Get(ctx workflow.Context) (*redshift.GetClusterCredentialsOutput, error) {
	var output redshift.GetClusterCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReservedNodeExchangeOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReservedNodeExchangeOfferingsFuture) Get(ctx workflow.Context) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	var output redshift.GetReservedNodeExchangeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterOutput, error) {
	var output redshift.ModifyClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterDbRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterDbRevisionFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterDbRevisionOutput, error) {
	var output redshift.ModifyClusterDbRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterIamRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterIamRolesFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterIamRolesOutput, error) {
	var output redshift.ModifyClusterIamRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterMaintenanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterMaintenanceFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterMaintenanceOutput, error) {
	var output redshift.ModifyClusterMaintenanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSnapshotOutput, error) {
	var output redshift.ModifyClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	var output redshift.ModifyClusterSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	var output redshift.ModifyClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.ModifyEventSubscriptionOutput, error) {
	var output redshift.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyScheduledActionFuture) Get(ctx workflow.Context) (*redshift.ModifyScheduledActionOutput, error) {
	var output redshift.ModifyScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifySnapshotCopyRetentionPeriodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifySnapshotCopyRetentionPeriodFuture) Get(ctx workflow.Context) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	var output redshift.ModifySnapshotCopyRetentionPeriodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifySnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifySnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.ModifySnapshotScheduleOutput, error) {
	var output redshift.ModifySnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyUsageLimitFuture) Get(ctx workflow.Context) (*redshift.ModifyUsageLimitOutput, error) {
	var output redshift.ModifyUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PauseClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PauseClusterFuture) Get(ctx workflow.Context) (*redshift.PauseClusterOutput, error) {
	var output redshift.PauseClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseReservedNodeOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseReservedNodeOfferingFuture) Get(ctx workflow.Context) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	var output redshift.PurchaseReservedNodeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootClusterFuture) Get(ctx workflow.Context) (*redshift.RebootClusterOutput, error) {
	var output redshift.RebootClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResizeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResizeClusterFuture) Get(ctx workflow.Context) (*redshift.ResizeClusterOutput, error) {
	var output redshift.ResizeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreFromClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreFromClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	var output redshift.RestoreFromClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreTableFromClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreTableFromClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	var output redshift.RestoreTableFromClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeClusterFuture) Get(ctx workflow.Context) (*redshift.ResumeClusterOutput, error) {
	var output redshift.ResumeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeClusterSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeClusterSecurityGroupIngressFuture) Get(ctx workflow.Context) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	var output redshift.RevokeClusterSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeSnapshotAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeSnapshotAccessFuture) Get(ctx workflow.Context) (*redshift.RevokeSnapshotAccessOutput, error) {
	var output redshift.RevokeSnapshotAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RotateEncryptionKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RotateEncryptionKeyFuture) Get(ctx workflow.Context) (*redshift.RotateEncryptionKeyOutput, error) {
	var output redshift.RotateEncryptionKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedNodeExchange(ctx workflow.Context, input *redshift.AcceptReservedNodeExchangeInput) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	var output redshift.AcceptReservedNodeExchangeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AcceptReservedNodeExchange", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedNodeExchangeAsync(ctx workflow.Context, input *redshift.AcceptReservedNodeExchangeInput) *AcceptReservedNodeExchangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AcceptReservedNodeExchange", input)
	return &AcceptReservedNodeExchangeFuture{Future: future}
}

func (a *stub) AuthorizeClusterSecurityGroupIngress(ctx workflow.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	var output redshift.AuthorizeClusterSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeClusterSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeClusterSecurityGroupIngressAsync(ctx workflow.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput) *AuthorizeClusterSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeClusterSecurityGroupIngress", input)
	return &AuthorizeClusterSecurityGroupIngressFuture{Future: future}
}

func (a *stub) AuthorizeSnapshotAccess(ctx workflow.Context, input *redshift.AuthorizeSnapshotAccessInput) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	var output redshift.AuthorizeSnapshotAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeSnapshotAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeSnapshotAccessAsync(ctx workflow.Context, input *redshift.AuthorizeSnapshotAccessInput) *AuthorizeSnapshotAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeSnapshotAccess", input)
	return &AuthorizeSnapshotAccessFuture{Future: future}
}

func (a *stub) BatchDeleteClusterSnapshots(ctx workflow.Context, input *redshift.BatchDeleteClusterSnapshotsInput) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	var output redshift.BatchDeleteClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-BatchDeleteClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteClusterSnapshotsAsync(ctx workflow.Context, input *redshift.BatchDeleteClusterSnapshotsInput) *BatchDeleteClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-BatchDeleteClusterSnapshots", input)
	return &BatchDeleteClusterSnapshotsFuture{Future: future}
}

func (a *stub) BatchModifyClusterSnapshots(ctx workflow.Context, input *redshift.BatchModifyClusterSnapshotsInput) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	var output redshift.BatchModifyClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-BatchModifyClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchModifyClusterSnapshotsAsync(ctx workflow.Context, input *redshift.BatchModifyClusterSnapshotsInput) *BatchModifyClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-BatchModifyClusterSnapshots", input)
	return &BatchModifyClusterSnapshotsFuture{Future: future}
}

func (a *stub) CancelResize(ctx workflow.Context, input *redshift.CancelResizeInput) (*redshift.CancelResizeOutput, error) {
	var output redshift.CancelResizeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CancelResize", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelResizeAsync(ctx workflow.Context, input *redshift.CancelResizeInput) *CancelResizeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CancelResize", input)
	return &CancelResizeFuture{Future: future}
}

func (a *stub) CopyClusterSnapshot(ctx workflow.Context, input *redshift.CopyClusterSnapshotInput) (*redshift.CopyClusterSnapshotOutput, error) {
	var output redshift.CopyClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CopyClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyClusterSnapshotAsync(ctx workflow.Context, input *redshift.CopyClusterSnapshotInput) *CopyClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CopyClusterSnapshot", input)
	return &CopyClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *redshift.CreateClusterInput) (*redshift.CreateClusterOutput, error) {
	var output redshift.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *redshift.CreateClusterInput) *CreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateCluster", input)
	return &CreateClusterFuture{Future: future}
}

func (a *stub) CreateClusterParameterGroup(ctx workflow.Context, input *redshift.CreateClusterParameterGroupInput) (*redshift.CreateClusterParameterGroupOutput, error) {
	var output redshift.CreateClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterParameterGroupAsync(ctx workflow.Context, input *redshift.CreateClusterParameterGroupInput) *CreateClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterParameterGroup", input)
	return &CreateClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateClusterSecurityGroup(ctx workflow.Context, input *redshift.CreateClusterSecurityGroupInput) (*redshift.CreateClusterSecurityGroupOutput, error) {
	var output redshift.CreateClusterSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSecurityGroupAsync(ctx workflow.Context, input *redshift.CreateClusterSecurityGroupInput) *CreateClusterSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSecurityGroup", input)
	return &CreateClusterSecurityGroupFuture{Future: future}
}

func (a *stub) CreateClusterSnapshot(ctx workflow.Context, input *redshift.CreateClusterSnapshotInput) (*redshift.CreateClusterSnapshotOutput, error) {
	var output redshift.CreateClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSnapshotAsync(ctx workflow.Context, input *redshift.CreateClusterSnapshotInput) *CreateClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSnapshot", input)
	return &CreateClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateClusterSubnetGroup(ctx workflow.Context, input *redshift.CreateClusterSubnetGroupInput) (*redshift.CreateClusterSubnetGroupOutput, error) {
	var output redshift.CreateClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.CreateClusterSubnetGroupInput) *CreateClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSubnetGroup", input)
	return &CreateClusterSubnetGroupFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *redshift.CreateEventSubscriptionInput) (*redshift.CreateEventSubscriptionOutput, error) {
	var output redshift.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *redshift.CreateEventSubscriptionInput) *CreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateEventSubscription", input)
	return &CreateEventSubscriptionFuture{Future: future}
}

func (a *stub) CreateHsmClientCertificate(ctx workflow.Context, input *redshift.CreateHsmClientCertificateInput) (*redshift.CreateHsmClientCertificateOutput, error) {
	var output redshift.CreateHsmClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHsmClientCertificateAsync(ctx workflow.Context, input *redshift.CreateHsmClientCertificateInput) *CreateHsmClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmClientCertificate", input)
	return &CreateHsmClientCertificateFuture{Future: future}
}

func (a *stub) CreateHsmConfiguration(ctx workflow.Context, input *redshift.CreateHsmConfigurationInput) (*redshift.CreateHsmConfigurationOutput, error) {
	var output redshift.CreateHsmConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHsmConfigurationAsync(ctx workflow.Context, input *redshift.CreateHsmConfigurationInput) *CreateHsmConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmConfiguration", input)
	return &CreateHsmConfigurationFuture{Future: future}
}

func (a *stub) CreateScheduledAction(ctx workflow.Context, input *redshift.CreateScheduledActionInput) (*redshift.CreateScheduledActionOutput, error) {
	var output redshift.CreateScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScheduledActionAsync(ctx workflow.Context, input *redshift.CreateScheduledActionInput) *CreateScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateScheduledAction", input)
	return &CreateScheduledActionFuture{Future: future}
}

func (a *stub) CreateSnapshotCopyGrant(ctx workflow.Context, input *redshift.CreateSnapshotCopyGrantInput) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	var output redshift.CreateSnapshotCopyGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotCopyGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotCopyGrantAsync(ctx workflow.Context, input *redshift.CreateSnapshotCopyGrantInput) *CreateSnapshotCopyGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotCopyGrant", input)
	return &CreateSnapshotCopyGrantFuture{Future: future}
}

func (a *stub) CreateSnapshotSchedule(ctx workflow.Context, input *redshift.CreateSnapshotScheduleInput) (*redshift.CreateSnapshotScheduleOutput, error) {
	var output redshift.CreateSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotScheduleAsync(ctx workflow.Context, input *redshift.CreateSnapshotScheduleInput) *CreateSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotSchedule", input)
	return &CreateSnapshotScheduleFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *redshift.CreateTagsInput) (*redshift.CreateTagsOutput, error) {
	var output redshift.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *redshift.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) CreateUsageLimit(ctx workflow.Context, input *redshift.CreateUsageLimitInput) (*redshift.CreateUsageLimitOutput, error) {
	var output redshift.CreateUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsageLimitAsync(ctx workflow.Context, input *redshift.CreateUsageLimitInput) *CreateUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateUsageLimit", input)
	return &CreateUsageLimitFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *redshift.DeleteClusterInput) (*redshift.DeleteClusterOutput, error) {
	var output redshift.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *redshift.DeleteClusterInput) *DeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteCluster", input)
	return &DeleteClusterFuture{Future: future}
}

func (a *stub) DeleteClusterParameterGroup(ctx workflow.Context, input *redshift.DeleteClusterParameterGroupInput) (*redshift.DeleteClusterParameterGroupOutput, error) {
	var output redshift.DeleteClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterParameterGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterParameterGroupInput) *DeleteClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterParameterGroup", input)
	return &DeleteClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteClusterSecurityGroup(ctx workflow.Context, input *redshift.DeleteClusterSecurityGroupInput) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	var output redshift.DeleteClusterSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSecurityGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterSecurityGroupInput) *DeleteClusterSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSecurityGroup", input)
	return &DeleteClusterSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteClusterSnapshot(ctx workflow.Context, input *redshift.DeleteClusterSnapshotInput) (*redshift.DeleteClusterSnapshotOutput, error) {
	var output redshift.DeleteClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSnapshotAsync(ctx workflow.Context, input *redshift.DeleteClusterSnapshotInput) *DeleteClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSnapshot", input)
	return &DeleteClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteClusterSubnetGroup(ctx workflow.Context, input *redshift.DeleteClusterSubnetGroupInput) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	var output redshift.DeleteClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterSubnetGroupInput) *DeleteClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSubnetGroup", input)
	return &DeleteClusterSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *redshift.DeleteEventSubscriptionInput) (*redshift.DeleteEventSubscriptionOutput, error) {
	var output redshift.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *redshift.DeleteEventSubscriptionInput) *DeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteEventSubscription", input)
	return &DeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteHsmClientCertificate(ctx workflow.Context, input *redshift.DeleteHsmClientCertificateInput) (*redshift.DeleteHsmClientCertificateOutput, error) {
	var output redshift.DeleteHsmClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHsmClientCertificateAsync(ctx workflow.Context, input *redshift.DeleteHsmClientCertificateInput) *DeleteHsmClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmClientCertificate", input)
	return &DeleteHsmClientCertificateFuture{Future: future}
}

func (a *stub) DeleteHsmConfiguration(ctx workflow.Context, input *redshift.DeleteHsmConfigurationInput) (*redshift.DeleteHsmConfigurationOutput, error) {
	var output redshift.DeleteHsmConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHsmConfigurationAsync(ctx workflow.Context, input *redshift.DeleteHsmConfigurationInput) *DeleteHsmConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmConfiguration", input)
	return &DeleteHsmConfigurationFuture{Future: future}
}

func (a *stub) DeleteScheduledAction(ctx workflow.Context, input *redshift.DeleteScheduledActionInput) (*redshift.DeleteScheduledActionOutput, error) {
	var output redshift.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledActionAsync(ctx workflow.Context, input *redshift.DeleteScheduledActionInput) *DeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteScheduledAction", input)
	return &DeleteScheduledActionFuture{Future: future}
}

func (a *stub) DeleteSnapshotCopyGrant(ctx workflow.Context, input *redshift.DeleteSnapshotCopyGrantInput) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	var output redshift.DeleteSnapshotCopyGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotCopyGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotCopyGrantAsync(ctx workflow.Context, input *redshift.DeleteSnapshotCopyGrantInput) *DeleteSnapshotCopyGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotCopyGrant", input)
	return &DeleteSnapshotCopyGrantFuture{Future: future}
}

func (a *stub) DeleteSnapshotSchedule(ctx workflow.Context, input *redshift.DeleteSnapshotScheduleInput) (*redshift.DeleteSnapshotScheduleOutput, error) {
	var output redshift.DeleteSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotScheduleAsync(ctx workflow.Context, input *redshift.DeleteSnapshotScheduleInput) *DeleteSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotSchedule", input)
	return &DeleteSnapshotScheduleFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *redshift.DeleteTagsInput) (*redshift.DeleteTagsOutput, error) {
	var output redshift.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *redshift.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DeleteUsageLimit(ctx workflow.Context, input *redshift.DeleteUsageLimitInput) (*redshift.DeleteUsageLimitOutput, error) {
	var output redshift.DeleteUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsageLimitAsync(ctx workflow.Context, input *redshift.DeleteUsageLimitInput) *DeleteUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteUsageLimit", input)
	return &DeleteUsageLimitFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *redshift.DescribeAccountAttributesInput) (*redshift.DescribeAccountAttributesOutput, error) {
	var output redshift.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *redshift.DescribeAccountAttributesInput) *DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeAccountAttributes", input)
	return &DescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeClusterDbRevisions(ctx workflow.Context, input *redshift.DescribeClusterDbRevisionsInput) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	var output redshift.DescribeClusterDbRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterDbRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterDbRevisionsAsync(ctx workflow.Context, input *redshift.DescribeClusterDbRevisionsInput) *DescribeClusterDbRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterDbRevisions", input)
	return &DescribeClusterDbRevisionsFuture{Future: future}
}

func (a *stub) DescribeClusterParameterGroups(ctx workflow.Context, input *redshift.DescribeClusterParameterGroupsInput) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	var output redshift.DescribeClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterParameterGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterParameterGroupsInput) *DescribeClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameterGroups", input)
	return &DescribeClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterParameters(ctx workflow.Context, input *redshift.DescribeClusterParametersInput) (*redshift.DescribeClusterParametersOutput, error) {
	var output redshift.DescribeClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterParametersAsync(ctx workflow.Context, input *redshift.DescribeClusterParametersInput) *DescribeClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameters", input)
	return &DescribeClusterParametersFuture{Future: future}
}

func (a *stub) DescribeClusterSecurityGroups(ctx workflow.Context, input *redshift.DescribeClusterSecurityGroupsInput) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	var output redshift.DescribeClusterSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSecurityGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterSecurityGroupsInput) *DescribeClusterSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSecurityGroups", input)
	return &DescribeClusterSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterSnapshots(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) (*redshift.DescribeClusterSnapshotsOutput, error) {
	var output redshift.DescribeClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSnapshotsAsync(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) *DescribeClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSnapshots", input)
	return &DescribeClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeClusterSubnetGroups(ctx workflow.Context, input *redshift.DescribeClusterSubnetGroupsInput) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	var output redshift.DescribeClusterSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSubnetGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterSubnetGroupsInput) *DescribeClusterSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSubnetGroups", input)
	return &DescribeClusterSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterTracks(ctx workflow.Context, input *redshift.DescribeClusterTracksInput) (*redshift.DescribeClusterTracksOutput, error) {
	var output redshift.DescribeClusterTracksOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterTracks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterTracksAsync(ctx workflow.Context, input *redshift.DescribeClusterTracksInput) *DescribeClusterTracksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterTracks", input)
	return &DescribeClusterTracksFuture{Future: future}
}

func (a *stub) DescribeClusterVersions(ctx workflow.Context, input *redshift.DescribeClusterVersionsInput) (*redshift.DescribeClusterVersionsOutput, error) {
	var output redshift.DescribeClusterVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterVersionsAsync(ctx workflow.Context, input *redshift.DescribeClusterVersionsInput) *DescribeClusterVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterVersions", input)
	return &DescribeClusterVersionsFuture{Future: future}
}

func (a *stub) DescribeClusters(ctx workflow.Context, input *redshift.DescribeClustersInput) (*redshift.DescribeClustersOutput, error) {
	var output redshift.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClustersAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *DescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusters", input)
	return &DescribeClustersFuture{Future: future}
}

func (a *stub) DescribeDefaultClusterParameters(ctx workflow.Context, input *redshift.DescribeDefaultClusterParametersInput) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	var output redshift.DescribeDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDefaultClusterParametersAsync(ctx workflow.Context, input *redshift.DescribeDefaultClusterParametersInput) *DescribeDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeDefaultClusterParameters", input)
	return &DescribeDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *redshift.DescribeEventCategoriesInput) (*redshift.DescribeEventCategoriesOutput, error) {
	var output redshift.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *redshift.DescribeEventCategoriesInput) *DescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventCategories", input)
	return &DescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *redshift.DescribeEventSubscriptionsInput) (*redshift.DescribeEventSubscriptionsOutput, error) {
	var output redshift.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *redshift.DescribeEventSubscriptionsInput) *DescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventSubscriptions", input)
	return &DescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *redshift.DescribeEventsInput) (*redshift.DescribeEventsOutput, error) {
	var output redshift.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *redshift.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeHsmClientCertificates(ctx workflow.Context, input *redshift.DescribeHsmClientCertificatesInput) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	var output redshift.DescribeHsmClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHsmClientCertificatesAsync(ctx workflow.Context, input *redshift.DescribeHsmClientCertificatesInput) *DescribeHsmClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmClientCertificates", input)
	return &DescribeHsmClientCertificatesFuture{Future: future}
}

func (a *stub) DescribeHsmConfigurations(ctx workflow.Context, input *redshift.DescribeHsmConfigurationsInput) (*redshift.DescribeHsmConfigurationsOutput, error) {
	var output redshift.DescribeHsmConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHsmConfigurationsAsync(ctx workflow.Context, input *redshift.DescribeHsmConfigurationsInput) *DescribeHsmConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmConfigurations", input)
	return &DescribeHsmConfigurationsFuture{Future: future}
}

func (a *stub) DescribeLoggingStatus(ctx workflow.Context, input *redshift.DescribeLoggingStatusInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeLoggingStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingStatusAsync(ctx workflow.Context, input *redshift.DescribeLoggingStatusInput) *DescribeLoggingStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeLoggingStatus", input)
	return &DescribeLoggingStatusFuture{Future: future}
}

func (a *stub) DescribeNodeConfigurationOptions(ctx workflow.Context, input *redshift.DescribeNodeConfigurationOptionsInput) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {
	var output redshift.DescribeNodeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeNodeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNodeConfigurationOptionsAsync(ctx workflow.Context, input *redshift.DescribeNodeConfigurationOptionsInput) *DescribeNodeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeNodeConfigurationOptions", input)
	return &DescribeNodeConfigurationOptionsFuture{Future: future}
}

func (a *stub) DescribeOrderableClusterOptions(ctx workflow.Context, input *redshift.DescribeOrderableClusterOptionsInput) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	var output redshift.DescribeOrderableClusterOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeOrderableClusterOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableClusterOptionsAsync(ctx workflow.Context, input *redshift.DescribeOrderableClusterOptionsInput) *DescribeOrderableClusterOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeOrderableClusterOptions", input)
	return &DescribeOrderableClusterOptionsFuture{Future: future}
}

func (a *stub) DescribeReservedNodeOfferings(ctx workflow.Context, input *redshift.DescribeReservedNodeOfferingsInput) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	var output redshift.DescribeReservedNodeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedNodeOfferingsAsync(ctx workflow.Context, input *redshift.DescribeReservedNodeOfferingsInput) *DescribeReservedNodeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodeOfferings", input)
	return &DescribeReservedNodeOfferingsFuture{Future: future}
}

func (a *stub) DescribeReservedNodes(ctx workflow.Context, input *redshift.DescribeReservedNodesInput) (*redshift.DescribeReservedNodesOutput, error) {
	var output redshift.DescribeReservedNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedNodesAsync(ctx workflow.Context, input *redshift.DescribeReservedNodesInput) *DescribeReservedNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodes", input)
	return &DescribeReservedNodesFuture{Future: future}
}

func (a *stub) DescribeResize(ctx workflow.Context, input *redshift.DescribeResizeInput) (*redshift.DescribeResizeOutput, error) {
	var output redshift.DescribeResizeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeResize", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResizeAsync(ctx workflow.Context, input *redshift.DescribeResizeInput) *DescribeResizeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeResize", input)
	return &DescribeResizeFuture{Future: future}
}

func (a *stub) DescribeScheduledActions(ctx workflow.Context, input *redshift.DescribeScheduledActionsInput) (*redshift.DescribeScheduledActionsOutput, error) {
	var output redshift.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledActionsAsync(ctx workflow.Context, input *redshift.DescribeScheduledActionsInput) *DescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeScheduledActions", input)
	return &DescribeScheduledActionsFuture{Future: future}
}

func (a *stub) DescribeSnapshotCopyGrants(ctx workflow.Context, input *redshift.DescribeSnapshotCopyGrantsInput) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	var output redshift.DescribeSnapshotCopyGrantsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotCopyGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotCopyGrantsAsync(ctx workflow.Context, input *redshift.DescribeSnapshotCopyGrantsInput) *DescribeSnapshotCopyGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotCopyGrants", input)
	return &DescribeSnapshotCopyGrantsFuture{Future: future}
}

func (a *stub) DescribeSnapshotSchedules(ctx workflow.Context, input *redshift.DescribeSnapshotSchedulesInput) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	var output redshift.DescribeSnapshotSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotSchedulesAsync(ctx workflow.Context, input *redshift.DescribeSnapshotSchedulesInput) *DescribeSnapshotSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotSchedules", input)
	return &DescribeSnapshotSchedulesFuture{Future: future}
}

func (a *stub) DescribeStorage(ctx workflow.Context, input *redshift.DescribeStorageInput) (*redshift.DescribeStorageOutput, error) {
	var output redshift.DescribeStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStorageAsync(ctx workflow.Context, input *redshift.DescribeStorageInput) *DescribeStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeStorage", input)
	return &DescribeStorageFuture{Future: future}
}

func (a *stub) DescribeTableRestoreStatus(ctx workflow.Context, input *redshift.DescribeTableRestoreStatusInput) (*redshift.DescribeTableRestoreStatusOutput, error) {
	var output redshift.DescribeTableRestoreStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTableRestoreStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableRestoreStatusAsync(ctx workflow.Context, input *redshift.DescribeTableRestoreStatusInput) *DescribeTableRestoreStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTableRestoreStatus", input)
	return &DescribeTableRestoreStatusFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *redshift.DescribeTagsInput) (*redshift.DescribeTagsOutput, error) {
	var output redshift.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *redshift.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) DescribeUsageLimits(ctx workflow.Context, input *redshift.DescribeUsageLimitsInput) (*redshift.DescribeUsageLimitsOutput, error) {
	var output redshift.DescribeUsageLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeUsageLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsageLimitsAsync(ctx workflow.Context, input *redshift.DescribeUsageLimitsInput) *DescribeUsageLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeUsageLimits", input)
	return &DescribeUsageLimitsFuture{Future: future}
}

func (a *stub) DisableLogging(ctx workflow.Context, input *redshift.DisableLoggingInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DisableLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableLoggingAsync(ctx workflow.Context, input *redshift.DisableLoggingInput) *DisableLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DisableLogging", input)
	return &DisableLoggingFuture{Future: future}
}

func (a *stub) DisableSnapshotCopy(ctx workflow.Context, input *redshift.DisableSnapshotCopyInput) (*redshift.DisableSnapshotCopyOutput, error) {
	var output redshift.DisableSnapshotCopyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DisableSnapshotCopy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableSnapshotCopyAsync(ctx workflow.Context, input *redshift.DisableSnapshotCopyInput) *DisableSnapshotCopyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DisableSnapshotCopy", input)
	return &DisableSnapshotCopyFuture{Future: future}
}

func (a *stub) EnableLogging(ctx workflow.Context, input *redshift.EnableLoggingInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-EnableLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableLoggingAsync(ctx workflow.Context, input *redshift.EnableLoggingInput) *EnableLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-EnableLogging", input)
	return &EnableLoggingFuture{Future: future}
}

func (a *stub) EnableSnapshotCopy(ctx workflow.Context, input *redshift.EnableSnapshotCopyInput) (*redshift.EnableSnapshotCopyOutput, error) {
	var output redshift.EnableSnapshotCopyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-EnableSnapshotCopy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSnapshotCopyAsync(ctx workflow.Context, input *redshift.EnableSnapshotCopyInput) *EnableSnapshotCopyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-EnableSnapshotCopy", input)
	return &EnableSnapshotCopyFuture{Future: future}
}

func (a *stub) GetClusterCredentials(ctx workflow.Context, input *redshift.GetClusterCredentialsInput) (*redshift.GetClusterCredentialsOutput, error) {
	var output redshift.GetClusterCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-GetClusterCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClusterCredentialsAsync(ctx workflow.Context, input *redshift.GetClusterCredentialsInput) *GetClusterCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-GetClusterCredentials", input)
	return &GetClusterCredentialsFuture{Future: future}
}

func (a *stub) GetReservedNodeExchangeOfferings(ctx workflow.Context, input *redshift.GetReservedNodeExchangeOfferingsInput) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	var output redshift.GetReservedNodeExchangeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-GetReservedNodeExchangeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservedNodeExchangeOfferingsAsync(ctx workflow.Context, input *redshift.GetReservedNodeExchangeOfferingsInput) *GetReservedNodeExchangeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-GetReservedNodeExchangeOfferings", input)
	return &GetReservedNodeExchangeOfferingsFuture{Future: future}
}

func (a *stub) ModifyCluster(ctx workflow.Context, input *redshift.ModifyClusterInput) (*redshift.ModifyClusterOutput, error) {
	var output redshift.ModifyClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterAsync(ctx workflow.Context, input *redshift.ModifyClusterInput) *ModifyClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyCluster", input)
	return &ModifyClusterFuture{Future: future}
}

func (a *stub) ModifyClusterDbRevision(ctx workflow.Context, input *redshift.ModifyClusterDbRevisionInput) (*redshift.ModifyClusterDbRevisionOutput, error) {
	var output redshift.ModifyClusterDbRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterDbRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterDbRevisionAsync(ctx workflow.Context, input *redshift.ModifyClusterDbRevisionInput) *ModifyClusterDbRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterDbRevision", input)
	return &ModifyClusterDbRevisionFuture{Future: future}
}

func (a *stub) ModifyClusterIamRoles(ctx workflow.Context, input *redshift.ModifyClusterIamRolesInput) (*redshift.ModifyClusterIamRolesOutput, error) {
	var output redshift.ModifyClusterIamRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterIamRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterIamRolesAsync(ctx workflow.Context, input *redshift.ModifyClusterIamRolesInput) *ModifyClusterIamRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterIamRoles", input)
	return &ModifyClusterIamRolesFuture{Future: future}
}

func (a *stub) ModifyClusterMaintenance(ctx workflow.Context, input *redshift.ModifyClusterMaintenanceInput) (*redshift.ModifyClusterMaintenanceOutput, error) {
	var output redshift.ModifyClusterMaintenanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterMaintenance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterMaintenanceAsync(ctx workflow.Context, input *redshift.ModifyClusterMaintenanceInput) *ModifyClusterMaintenanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterMaintenance", input)
	return &ModifyClusterMaintenanceFuture{Future: future}
}

func (a *stub) ModifyClusterParameterGroup(ctx workflow.Context, input *redshift.ModifyClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterParameterGroupAsync(ctx workflow.Context, input *redshift.ModifyClusterParameterGroupInput) *ModifyClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterParameterGroup", input)
	return &ModifyClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyClusterSnapshot(ctx workflow.Context, input *redshift.ModifyClusterSnapshotInput) (*redshift.ModifyClusterSnapshotOutput, error) {
	var output redshift.ModifyClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSnapshotAsync(ctx workflow.Context, input *redshift.ModifyClusterSnapshotInput) *ModifyClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshot", input)
	return &ModifyClusterSnapshotFuture{Future: future}
}

func (a *stub) ModifyClusterSnapshotSchedule(ctx workflow.Context, input *redshift.ModifyClusterSnapshotScheduleInput) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	var output redshift.ModifyClusterSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSnapshotScheduleAsync(ctx workflow.Context, input *redshift.ModifyClusterSnapshotScheduleInput) *ModifyClusterSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshotSchedule", input)
	return &ModifyClusterSnapshotScheduleFuture{Future: future}
}

func (a *stub) ModifyClusterSubnetGroup(ctx workflow.Context, input *redshift.ModifyClusterSubnetGroupInput) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	var output redshift.ModifyClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.ModifyClusterSubnetGroupInput) *ModifyClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSubnetGroup", input)
	return &ModifyClusterSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *redshift.ModifyEventSubscriptionInput) (*redshift.ModifyEventSubscriptionOutput, error) {
	var output redshift.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *redshift.ModifyEventSubscriptionInput) *ModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyEventSubscription", input)
	return &ModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) ModifyScheduledAction(ctx workflow.Context, input *redshift.ModifyScheduledActionInput) (*redshift.ModifyScheduledActionOutput, error) {
	var output redshift.ModifyScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyScheduledActionAsync(ctx workflow.Context, input *redshift.ModifyScheduledActionInput) *ModifyScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyScheduledAction", input)
	return &ModifyScheduledActionFuture{Future: future}
}

func (a *stub) ModifySnapshotCopyRetentionPeriod(ctx workflow.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	var output redshift.ModifySnapshotCopyRetentionPeriodOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotCopyRetentionPeriod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySnapshotCopyRetentionPeriodAsync(ctx workflow.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput) *ModifySnapshotCopyRetentionPeriodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotCopyRetentionPeriod", input)
	return &ModifySnapshotCopyRetentionPeriodFuture{Future: future}
}

func (a *stub) ModifySnapshotSchedule(ctx workflow.Context, input *redshift.ModifySnapshotScheduleInput) (*redshift.ModifySnapshotScheduleOutput, error) {
	var output redshift.ModifySnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySnapshotScheduleAsync(ctx workflow.Context, input *redshift.ModifySnapshotScheduleInput) *ModifySnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotSchedule", input)
	return &ModifySnapshotScheduleFuture{Future: future}
}

func (a *stub) ModifyUsageLimit(ctx workflow.Context, input *redshift.ModifyUsageLimitInput) (*redshift.ModifyUsageLimitOutput, error) {
	var output redshift.ModifyUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyUsageLimitAsync(ctx workflow.Context, input *redshift.ModifyUsageLimitInput) *ModifyUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyUsageLimit", input)
	return &ModifyUsageLimitFuture{Future: future}
}

func (a *stub) PauseCluster(ctx workflow.Context, input *redshift.PauseClusterInput) (*redshift.PauseClusterOutput, error) {
	var output redshift.PauseClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-PauseCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PauseClusterAsync(ctx workflow.Context, input *redshift.PauseClusterInput) *PauseClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-PauseCluster", input)
	return &PauseClusterFuture{Future: future}
}

func (a *stub) PurchaseReservedNodeOffering(ctx workflow.Context, input *redshift.PurchaseReservedNodeOfferingInput) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	var output redshift.PurchaseReservedNodeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-PurchaseReservedNodeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedNodeOfferingAsync(ctx workflow.Context, input *redshift.PurchaseReservedNodeOfferingInput) *PurchaseReservedNodeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-PurchaseReservedNodeOffering", input)
	return &PurchaseReservedNodeOfferingFuture{Future: future}
}

func (a *stub) RebootCluster(ctx workflow.Context, input *redshift.RebootClusterInput) (*redshift.RebootClusterOutput, error) {
	var output redshift.RebootClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RebootCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootClusterAsync(ctx workflow.Context, input *redshift.RebootClusterInput) *RebootClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RebootCluster", input)
	return &RebootClusterFuture{Future: future}
}

func (a *stub) ResetClusterParameterGroup(ctx workflow.Context, input *redshift.ResetClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResetClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetClusterParameterGroupAsync(ctx workflow.Context, input *redshift.ResetClusterParameterGroupInput) *ResetClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResetClusterParameterGroup", input)
	return &ResetClusterParameterGroupFuture{Future: future}
}

func (a *stub) ResizeCluster(ctx workflow.Context, input *redshift.ResizeClusterInput) (*redshift.ResizeClusterOutput, error) {
	var output redshift.ResizeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResizeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResizeClusterAsync(ctx workflow.Context, input *redshift.ResizeClusterInput) *ResizeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResizeCluster", input)
	return &ResizeClusterFuture{Future: future}
}

func (a *stub) RestoreFromClusterSnapshot(ctx workflow.Context, input *redshift.RestoreFromClusterSnapshotInput) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	var output redshift.RestoreFromClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreFromClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreFromClusterSnapshotAsync(ctx workflow.Context, input *redshift.RestoreFromClusterSnapshotInput) *RestoreFromClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreFromClusterSnapshot", input)
	return &RestoreFromClusterSnapshotFuture{Future: future}
}

func (a *stub) RestoreTableFromClusterSnapshot(ctx workflow.Context, input *redshift.RestoreTableFromClusterSnapshotInput) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	var output redshift.RestoreTableFromClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreTableFromClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableFromClusterSnapshotAsync(ctx workflow.Context, input *redshift.RestoreTableFromClusterSnapshotInput) *RestoreTableFromClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreTableFromClusterSnapshot", input)
	return &RestoreTableFromClusterSnapshotFuture{Future: future}
}

func (a *stub) ResumeCluster(ctx workflow.Context, input *redshift.ResumeClusterInput) (*redshift.ResumeClusterOutput, error) {
	var output redshift.ResumeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResumeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeClusterAsync(ctx workflow.Context, input *redshift.ResumeClusterInput) *ResumeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResumeCluster", input)
	return &ResumeClusterFuture{Future: future}
}

func (a *stub) RevokeClusterSecurityGroupIngress(ctx workflow.Context, input *redshift.RevokeClusterSecurityGroupIngressInput) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	var output redshift.RevokeClusterSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeClusterSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeClusterSecurityGroupIngressAsync(ctx workflow.Context, input *redshift.RevokeClusterSecurityGroupIngressInput) *RevokeClusterSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeClusterSecurityGroupIngress", input)
	return &RevokeClusterSecurityGroupIngressFuture{Future: future}
}

func (a *stub) RevokeSnapshotAccess(ctx workflow.Context, input *redshift.RevokeSnapshotAccessInput) (*redshift.RevokeSnapshotAccessOutput, error) {
	var output redshift.RevokeSnapshotAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeSnapshotAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeSnapshotAccessAsync(ctx workflow.Context, input *redshift.RevokeSnapshotAccessInput) *RevokeSnapshotAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeSnapshotAccess", input)
	return &RevokeSnapshotAccessFuture{Future: future}
}

func (a *stub) RotateEncryptionKey(ctx workflow.Context, input *redshift.RotateEncryptionKeyInput) (*redshift.RotateEncryptionKeyOutput, error) {
	var output redshift.RotateEncryptionKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RotateEncryptionKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RotateEncryptionKeyAsync(ctx workflow.Context, input *redshift.RotateEncryptionKeyInput) *RotateEncryptionKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RotateEncryptionKey", input)
	return &RotateEncryptionKeyFuture{Future: future}
}

func (a *stub) WaitUntilClusterAvailable(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterAvailableAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterDeleted(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterDeletedAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterRestored(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterRestored", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterRestoredAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterRestored", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSnapshotAvailable(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilSnapshotAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSnapshotAvailableAsync(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilSnapshotAvailable", input)
	return clients.NewVoidFuture(future)
}
