// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package redshiftstub

import (
	"github.com/aws/aws-sdk-go/service/redshift"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type RedshiftAcceptReservedNodeExchangeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftAcceptReservedNodeExchangeFuture) Get(ctx workflow.Context) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	var output redshift.AcceptReservedNodeExchangeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftAuthorizeClusterSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftAuthorizeClusterSecurityGroupIngressFuture) Get(ctx workflow.Context) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	var output redshift.AuthorizeClusterSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftAuthorizeSnapshotAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftAuthorizeSnapshotAccessFuture) Get(ctx workflow.Context) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	var output redshift.AuthorizeSnapshotAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftBatchDeleteClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftBatchDeleteClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	var output redshift.BatchDeleteClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftBatchModifyClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftBatchModifyClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	var output redshift.BatchModifyClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCancelResizeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCancelResizeFuture) Get(ctx workflow.Context) (*redshift.CancelResizeOutput, error) {
	var output redshift.CancelResizeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCopyClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCopyClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.CopyClusterSnapshotOutput, error) {
	var output redshift.CopyClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateClusterFuture) Get(ctx workflow.Context) (*redshift.CreateClusterOutput, error) {
	var output redshift.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterParameterGroupOutput, error) {
	var output redshift.CreateClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateClusterSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateClusterSecurityGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSecurityGroupOutput, error) {
	var output redshift.CreateClusterSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSnapshotOutput, error) {
	var output redshift.CreateClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.CreateClusterSubnetGroupOutput, error) {
	var output redshift.CreateClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.CreateEventSubscriptionOutput, error) {
	var output redshift.CreateEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateHsmClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateHsmClientCertificateFuture) Get(ctx workflow.Context) (*redshift.CreateHsmClientCertificateOutput, error) {
	var output redshift.CreateHsmClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateHsmConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateHsmConfigurationFuture) Get(ctx workflow.Context) (*redshift.CreateHsmConfigurationOutput, error) {
	var output redshift.CreateHsmConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateScheduledActionFuture) Get(ctx workflow.Context) (*redshift.CreateScheduledActionOutput, error) {
	var output redshift.CreateScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateSnapshotCopyGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateSnapshotCopyGrantFuture) Get(ctx workflow.Context) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	var output redshift.CreateSnapshotCopyGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.CreateSnapshotScheduleOutput, error) {
	var output redshift.CreateSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateTagsFuture) Get(ctx workflow.Context) (*redshift.CreateTagsOutput, error) {
	var output redshift.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftCreateUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftCreateUsageLimitFuture) Get(ctx workflow.Context) (*redshift.CreateUsageLimitOutput, error) {
	var output redshift.CreateUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteClusterFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterOutput, error) {
	var output redshift.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterParameterGroupOutput, error) {
	var output redshift.DeleteClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteClusterSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteClusterSecurityGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	var output redshift.DeleteClusterSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSnapshotOutput, error) {
	var output redshift.DeleteClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	var output redshift.DeleteClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.DeleteEventSubscriptionOutput, error) {
	var output redshift.DeleteEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteHsmClientCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteHsmClientCertificateFuture) Get(ctx workflow.Context) (*redshift.DeleteHsmClientCertificateOutput, error) {
	var output redshift.DeleteHsmClientCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteHsmConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteHsmConfigurationFuture) Get(ctx workflow.Context) (*redshift.DeleteHsmConfigurationOutput, error) {
	var output redshift.DeleteHsmConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteScheduledActionFuture) Get(ctx workflow.Context) (*redshift.DeleteScheduledActionOutput, error) {
	var output redshift.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteSnapshotCopyGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteSnapshotCopyGrantFuture) Get(ctx workflow.Context) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	var output redshift.DeleteSnapshotCopyGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.DeleteSnapshotScheduleOutput, error) {
	var output redshift.DeleteSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteTagsFuture) Get(ctx workflow.Context) (*redshift.DeleteTagsOutput, error) {
	var output redshift.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDeleteUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDeleteUsageLimitFuture) Get(ctx workflow.Context) (*redshift.DeleteUsageLimitOutput, error) {
	var output redshift.DeleteUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*redshift.DescribeAccountAttributesOutput, error) {
	var output redshift.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterDbRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterDbRevisionsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	var output redshift.DescribeClusterDbRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterParameterGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	var output redshift.DescribeClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterParametersFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterParametersOutput, error) {
	var output redshift.DescribeClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterSecurityGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	var output redshift.DescribeClusterSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterSnapshotsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSnapshotsOutput, error) {
	var output redshift.DescribeClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterSubnetGroupsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	var output redshift.DescribeClusterSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterTracksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterTracksFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterTracksOutput, error) {
	var output redshift.DescribeClusterTracksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClusterVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClusterVersionsFuture) Get(ctx workflow.Context) (*redshift.DescribeClusterVersionsOutput, error) {
	var output redshift.DescribeClusterVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeClustersFuture) Get(ctx workflow.Context) (*redshift.DescribeClustersOutput, error) {
	var output redshift.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeDefaultClusterParametersFuture) Get(ctx workflow.Context) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	var output redshift.DescribeDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*redshift.DescribeEventCategoriesOutput, error) {
	var output redshift.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeEventSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeEventSubscriptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeEventSubscriptionsOutput, error) {
	var output redshift.DescribeEventSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeEventsFuture) Get(ctx workflow.Context) (*redshift.DescribeEventsOutput, error) {
	var output redshift.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeHsmClientCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeHsmClientCertificatesFuture) Get(ctx workflow.Context) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	var output redshift.DescribeHsmClientCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeHsmConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeHsmConfigurationsFuture) Get(ctx workflow.Context) (*redshift.DescribeHsmConfigurationsOutput, error) {
	var output redshift.DescribeHsmConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeLoggingStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeLoggingStatusFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeNodeConfigurationOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeNodeConfigurationOptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {
	var output redshift.DescribeNodeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeOrderableClusterOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeOrderableClusterOptionsFuture) Get(ctx workflow.Context) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	var output redshift.DescribeOrderableClusterOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeReservedNodeOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeReservedNodeOfferingsFuture) Get(ctx workflow.Context) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	var output redshift.DescribeReservedNodeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeReservedNodesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeReservedNodesFuture) Get(ctx workflow.Context) (*redshift.DescribeReservedNodesOutput, error) {
	var output redshift.DescribeReservedNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeResizeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeResizeFuture) Get(ctx workflow.Context) (*redshift.DescribeResizeOutput, error) {
	var output redshift.DescribeResizeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeScheduledActionsFuture) Get(ctx workflow.Context) (*redshift.DescribeScheduledActionsOutput, error) {
	var output redshift.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeSnapshotCopyGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeSnapshotCopyGrantsFuture) Get(ctx workflow.Context) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	var output redshift.DescribeSnapshotCopyGrantsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeSnapshotSchedulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeSnapshotSchedulesFuture) Get(ctx workflow.Context) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	var output redshift.DescribeSnapshotSchedulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeStorageFuture) Get(ctx workflow.Context) (*redshift.DescribeStorageOutput, error) {
	var output redshift.DescribeStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeTableRestoreStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeTableRestoreStatusFuture) Get(ctx workflow.Context) (*redshift.DescribeTableRestoreStatusOutput, error) {
	var output redshift.DescribeTableRestoreStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeTagsFuture) Get(ctx workflow.Context) (*redshift.DescribeTagsOutput, error) {
	var output redshift.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDescribeUsageLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDescribeUsageLimitsFuture) Get(ctx workflow.Context) (*redshift.DescribeUsageLimitsOutput, error) {
	var output redshift.DescribeUsageLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDisableLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDisableLoggingFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftDisableSnapshotCopyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftDisableSnapshotCopyFuture) Get(ctx workflow.Context) (*redshift.DisableSnapshotCopyOutput, error) {
	var output redshift.DisableSnapshotCopyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftEnableLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftEnableLoggingFuture) Get(ctx workflow.Context) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftEnableSnapshotCopyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftEnableSnapshotCopyFuture) Get(ctx workflow.Context) (*redshift.EnableSnapshotCopyOutput, error) {
	var output redshift.EnableSnapshotCopyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftGetClusterCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftGetClusterCredentialsFuture) Get(ctx workflow.Context) (*redshift.GetClusterCredentialsOutput, error) {
	var output redshift.GetClusterCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftGetReservedNodeExchangeOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftGetReservedNodeExchangeOfferingsFuture) Get(ctx workflow.Context) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	var output redshift.GetReservedNodeExchangeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterOutput, error) {
	var output redshift.ModifyClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterDbRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterDbRevisionFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterDbRevisionOutput, error) {
	var output redshift.ModifyClusterDbRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterIamRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterIamRolesFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterIamRolesOutput, error) {
	var output redshift.ModifyClusterIamRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterMaintenanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterMaintenanceFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterMaintenanceOutput, error) {
	var output redshift.ModifyClusterMaintenanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSnapshotOutput, error) {
	var output redshift.ModifyClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterSnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	var output redshift.ModifyClusterSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyClusterSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyClusterSubnetGroupFuture) Get(ctx workflow.Context) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	var output redshift.ModifyClusterSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyEventSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyEventSubscriptionFuture) Get(ctx workflow.Context) (*redshift.ModifyEventSubscriptionOutput, error) {
	var output redshift.ModifyEventSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyScheduledActionFuture) Get(ctx workflow.Context) (*redshift.ModifyScheduledActionOutput, error) {
	var output redshift.ModifyScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifySnapshotCopyRetentionPeriodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifySnapshotCopyRetentionPeriodFuture) Get(ctx workflow.Context) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	var output redshift.ModifySnapshotCopyRetentionPeriodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifySnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifySnapshotScheduleFuture) Get(ctx workflow.Context) (*redshift.ModifySnapshotScheduleOutput, error) {
	var output redshift.ModifySnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftModifyUsageLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftModifyUsageLimitFuture) Get(ctx workflow.Context) (*redshift.ModifyUsageLimitOutput, error) {
	var output redshift.ModifyUsageLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftPauseClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftPauseClusterFuture) Get(ctx workflow.Context) (*redshift.PauseClusterOutput, error) {
	var output redshift.PauseClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftPurchaseReservedNodeOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftPurchaseReservedNodeOfferingFuture) Get(ctx workflow.Context) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	var output redshift.PurchaseReservedNodeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRebootClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRebootClusterFuture) Get(ctx workflow.Context) (*redshift.RebootClusterOutput, error) {
	var output redshift.RebootClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftResetClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftResetClusterParameterGroupFuture) Get(ctx workflow.Context) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftResizeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftResizeClusterFuture) Get(ctx workflow.Context) (*redshift.ResizeClusterOutput, error) {
	var output redshift.ResizeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRestoreFromClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRestoreFromClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	var output redshift.RestoreFromClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRestoreTableFromClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRestoreTableFromClusterSnapshotFuture) Get(ctx workflow.Context) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	var output redshift.RestoreTableFromClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftResumeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftResumeClusterFuture) Get(ctx workflow.Context) (*redshift.ResumeClusterOutput, error) {
	var output redshift.ResumeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRevokeClusterSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRevokeClusterSecurityGroupIngressFuture) Get(ctx workflow.Context) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	var output redshift.RevokeClusterSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRevokeSnapshotAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRevokeSnapshotAccessFuture) Get(ctx workflow.Context) (*redshift.RevokeSnapshotAccessOutput, error) {
	var output redshift.RevokeSnapshotAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedshiftRotateEncryptionKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedshiftRotateEncryptionKeyFuture) Get(ctx workflow.Context) (*redshift.RotateEncryptionKeyOutput, error) {
	var output redshift.RotateEncryptionKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedNodeExchange(ctx workflow.Context, input *redshift.AcceptReservedNodeExchangeInput) (*redshift.AcceptReservedNodeExchangeOutput, error) {
	var output redshift.AcceptReservedNodeExchangeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AcceptReservedNodeExchange", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedNodeExchangeAsync(ctx workflow.Context, input *redshift.AcceptReservedNodeExchangeInput) *RedshiftAcceptReservedNodeExchangeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AcceptReservedNodeExchange", input)
	return &RedshiftAcceptReservedNodeExchangeFuture{Future: future}
}

func (a *stub) AuthorizeClusterSecurityGroupIngress(ctx workflow.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	var output redshift.AuthorizeClusterSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeClusterSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeClusterSecurityGroupIngressAsync(ctx workflow.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput) *RedshiftAuthorizeClusterSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeClusterSecurityGroupIngress", input)
	return &RedshiftAuthorizeClusterSecurityGroupIngressFuture{Future: future}
}

func (a *stub) AuthorizeSnapshotAccess(ctx workflow.Context, input *redshift.AuthorizeSnapshotAccessInput) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	var output redshift.AuthorizeSnapshotAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeSnapshotAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeSnapshotAccessAsync(ctx workflow.Context, input *redshift.AuthorizeSnapshotAccessInput) *RedshiftAuthorizeSnapshotAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-AuthorizeSnapshotAccess", input)
	return &RedshiftAuthorizeSnapshotAccessFuture{Future: future}
}

func (a *stub) BatchDeleteClusterSnapshots(ctx workflow.Context, input *redshift.BatchDeleteClusterSnapshotsInput) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {
	var output redshift.BatchDeleteClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-BatchDeleteClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteClusterSnapshotsAsync(ctx workflow.Context, input *redshift.BatchDeleteClusterSnapshotsInput) *RedshiftBatchDeleteClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-BatchDeleteClusterSnapshots", input)
	return &RedshiftBatchDeleteClusterSnapshotsFuture{Future: future}
}

func (a *stub) BatchModifyClusterSnapshots(ctx workflow.Context, input *redshift.BatchModifyClusterSnapshotsInput) (*redshift.BatchModifyClusterSnapshotsOutput, error) {
	var output redshift.BatchModifyClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-BatchModifyClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchModifyClusterSnapshotsAsync(ctx workflow.Context, input *redshift.BatchModifyClusterSnapshotsInput) *RedshiftBatchModifyClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-BatchModifyClusterSnapshots", input)
	return &RedshiftBatchModifyClusterSnapshotsFuture{Future: future}
}

func (a *stub) CancelResize(ctx workflow.Context, input *redshift.CancelResizeInput) (*redshift.CancelResizeOutput, error) {
	var output redshift.CancelResizeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CancelResize", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelResizeAsync(ctx workflow.Context, input *redshift.CancelResizeInput) *RedshiftCancelResizeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CancelResize", input)
	return &RedshiftCancelResizeFuture{Future: future}
}

func (a *stub) CopyClusterSnapshot(ctx workflow.Context, input *redshift.CopyClusterSnapshotInput) (*redshift.CopyClusterSnapshotOutput, error) {
	var output redshift.CopyClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CopyClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyClusterSnapshotAsync(ctx workflow.Context, input *redshift.CopyClusterSnapshotInput) *RedshiftCopyClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CopyClusterSnapshot", input)
	return &RedshiftCopyClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *redshift.CreateClusterInput) (*redshift.CreateClusterOutput, error) {
	var output redshift.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *redshift.CreateClusterInput) *RedshiftCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateCluster", input)
	return &RedshiftCreateClusterFuture{Future: future}
}

func (a *stub) CreateClusterParameterGroup(ctx workflow.Context, input *redshift.CreateClusterParameterGroupInput) (*redshift.CreateClusterParameterGroupOutput, error) {
	var output redshift.CreateClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterParameterGroupAsync(ctx workflow.Context, input *redshift.CreateClusterParameterGroupInput) *RedshiftCreateClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterParameterGroup", input)
	return &RedshiftCreateClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateClusterSecurityGroup(ctx workflow.Context, input *redshift.CreateClusterSecurityGroupInput) (*redshift.CreateClusterSecurityGroupOutput, error) {
	var output redshift.CreateClusterSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSecurityGroupAsync(ctx workflow.Context, input *redshift.CreateClusterSecurityGroupInput) *RedshiftCreateClusterSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSecurityGroup", input)
	return &RedshiftCreateClusterSecurityGroupFuture{Future: future}
}

func (a *stub) CreateClusterSnapshot(ctx workflow.Context, input *redshift.CreateClusterSnapshotInput) (*redshift.CreateClusterSnapshotOutput, error) {
	var output redshift.CreateClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSnapshotAsync(ctx workflow.Context, input *redshift.CreateClusterSnapshotInput) *RedshiftCreateClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSnapshot", input)
	return &RedshiftCreateClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateClusterSubnetGroup(ctx workflow.Context, input *redshift.CreateClusterSubnetGroupInput) (*redshift.CreateClusterSubnetGroupOutput, error) {
	var output redshift.CreateClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.CreateClusterSubnetGroupInput) *RedshiftCreateClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateClusterSubnetGroup", input)
	return &RedshiftCreateClusterSubnetGroupFuture{Future: future}
}

func (a *stub) CreateEventSubscription(ctx workflow.Context, input *redshift.CreateEventSubscriptionInput) (*redshift.CreateEventSubscriptionOutput, error) {
	var output redshift.CreateEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventSubscriptionAsync(ctx workflow.Context, input *redshift.CreateEventSubscriptionInput) *RedshiftCreateEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateEventSubscription", input)
	return &RedshiftCreateEventSubscriptionFuture{Future: future}
}

func (a *stub) CreateHsmClientCertificate(ctx workflow.Context, input *redshift.CreateHsmClientCertificateInput) (*redshift.CreateHsmClientCertificateOutput, error) {
	var output redshift.CreateHsmClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHsmClientCertificateAsync(ctx workflow.Context, input *redshift.CreateHsmClientCertificateInput) *RedshiftCreateHsmClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmClientCertificate", input)
	return &RedshiftCreateHsmClientCertificateFuture{Future: future}
}

func (a *stub) CreateHsmConfiguration(ctx workflow.Context, input *redshift.CreateHsmConfigurationInput) (*redshift.CreateHsmConfigurationOutput, error) {
	var output redshift.CreateHsmConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHsmConfigurationAsync(ctx workflow.Context, input *redshift.CreateHsmConfigurationInput) *RedshiftCreateHsmConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateHsmConfiguration", input)
	return &RedshiftCreateHsmConfigurationFuture{Future: future}
}

func (a *stub) CreateScheduledAction(ctx workflow.Context, input *redshift.CreateScheduledActionInput) (*redshift.CreateScheduledActionOutput, error) {
	var output redshift.CreateScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScheduledActionAsync(ctx workflow.Context, input *redshift.CreateScheduledActionInput) *RedshiftCreateScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateScheduledAction", input)
	return &RedshiftCreateScheduledActionFuture{Future: future}
}

func (a *stub) CreateSnapshotCopyGrant(ctx workflow.Context, input *redshift.CreateSnapshotCopyGrantInput) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	var output redshift.CreateSnapshotCopyGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotCopyGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotCopyGrantAsync(ctx workflow.Context, input *redshift.CreateSnapshotCopyGrantInput) *RedshiftCreateSnapshotCopyGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotCopyGrant", input)
	return &RedshiftCreateSnapshotCopyGrantFuture{Future: future}
}

func (a *stub) CreateSnapshotSchedule(ctx workflow.Context, input *redshift.CreateSnapshotScheduleInput) (*redshift.CreateSnapshotScheduleOutput, error) {
	var output redshift.CreateSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotScheduleAsync(ctx workflow.Context, input *redshift.CreateSnapshotScheduleInput) *RedshiftCreateSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateSnapshotSchedule", input)
	return &RedshiftCreateSnapshotScheduleFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *redshift.CreateTagsInput) (*redshift.CreateTagsOutput, error) {
	var output redshift.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *redshift.CreateTagsInput) *RedshiftCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateTags", input)
	return &RedshiftCreateTagsFuture{Future: future}
}

func (a *stub) CreateUsageLimit(ctx workflow.Context, input *redshift.CreateUsageLimitInput) (*redshift.CreateUsageLimitOutput, error) {
	var output redshift.CreateUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-CreateUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUsageLimitAsync(ctx workflow.Context, input *redshift.CreateUsageLimitInput) *RedshiftCreateUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-CreateUsageLimit", input)
	return &RedshiftCreateUsageLimitFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *redshift.DeleteClusterInput) (*redshift.DeleteClusterOutput, error) {
	var output redshift.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *redshift.DeleteClusterInput) *RedshiftDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteCluster", input)
	return &RedshiftDeleteClusterFuture{Future: future}
}

func (a *stub) DeleteClusterParameterGroup(ctx workflow.Context, input *redshift.DeleteClusterParameterGroupInput) (*redshift.DeleteClusterParameterGroupOutput, error) {
	var output redshift.DeleteClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterParameterGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterParameterGroupInput) *RedshiftDeleteClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterParameterGroup", input)
	return &RedshiftDeleteClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteClusterSecurityGroup(ctx workflow.Context, input *redshift.DeleteClusterSecurityGroupInput) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	var output redshift.DeleteClusterSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSecurityGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterSecurityGroupInput) *RedshiftDeleteClusterSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSecurityGroup", input)
	return &RedshiftDeleteClusterSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteClusterSnapshot(ctx workflow.Context, input *redshift.DeleteClusterSnapshotInput) (*redshift.DeleteClusterSnapshotOutput, error) {
	var output redshift.DeleteClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSnapshotAsync(ctx workflow.Context, input *redshift.DeleteClusterSnapshotInput) *RedshiftDeleteClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSnapshot", input)
	return &RedshiftDeleteClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteClusterSubnetGroup(ctx workflow.Context, input *redshift.DeleteClusterSubnetGroupInput) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	var output redshift.DeleteClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.DeleteClusterSubnetGroupInput) *RedshiftDeleteClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteClusterSubnetGroup", input)
	return &RedshiftDeleteClusterSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteEventSubscription(ctx workflow.Context, input *redshift.DeleteEventSubscriptionInput) (*redshift.DeleteEventSubscriptionOutput, error) {
	var output redshift.DeleteEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventSubscriptionAsync(ctx workflow.Context, input *redshift.DeleteEventSubscriptionInput) *RedshiftDeleteEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteEventSubscription", input)
	return &RedshiftDeleteEventSubscriptionFuture{Future: future}
}

func (a *stub) DeleteHsmClientCertificate(ctx workflow.Context, input *redshift.DeleteHsmClientCertificateInput) (*redshift.DeleteHsmClientCertificateOutput, error) {
	var output redshift.DeleteHsmClientCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmClientCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHsmClientCertificateAsync(ctx workflow.Context, input *redshift.DeleteHsmClientCertificateInput) *RedshiftDeleteHsmClientCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmClientCertificate", input)
	return &RedshiftDeleteHsmClientCertificateFuture{Future: future}
}

func (a *stub) DeleteHsmConfiguration(ctx workflow.Context, input *redshift.DeleteHsmConfigurationInput) (*redshift.DeleteHsmConfigurationOutput, error) {
	var output redshift.DeleteHsmConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHsmConfigurationAsync(ctx workflow.Context, input *redshift.DeleteHsmConfigurationInput) *RedshiftDeleteHsmConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteHsmConfiguration", input)
	return &RedshiftDeleteHsmConfigurationFuture{Future: future}
}

func (a *stub) DeleteScheduledAction(ctx workflow.Context, input *redshift.DeleteScheduledActionInput) (*redshift.DeleteScheduledActionOutput, error) {
	var output redshift.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledActionAsync(ctx workflow.Context, input *redshift.DeleteScheduledActionInput) *RedshiftDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteScheduledAction", input)
	return &RedshiftDeleteScheduledActionFuture{Future: future}
}

func (a *stub) DeleteSnapshotCopyGrant(ctx workflow.Context, input *redshift.DeleteSnapshotCopyGrantInput) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	var output redshift.DeleteSnapshotCopyGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotCopyGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotCopyGrantAsync(ctx workflow.Context, input *redshift.DeleteSnapshotCopyGrantInput) *RedshiftDeleteSnapshotCopyGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotCopyGrant", input)
	return &RedshiftDeleteSnapshotCopyGrantFuture{Future: future}
}

func (a *stub) DeleteSnapshotSchedule(ctx workflow.Context, input *redshift.DeleteSnapshotScheduleInput) (*redshift.DeleteSnapshotScheduleOutput, error) {
	var output redshift.DeleteSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotScheduleAsync(ctx workflow.Context, input *redshift.DeleteSnapshotScheduleInput) *RedshiftDeleteSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteSnapshotSchedule", input)
	return &RedshiftDeleteSnapshotScheduleFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *redshift.DeleteTagsInput) (*redshift.DeleteTagsOutput, error) {
	var output redshift.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *redshift.DeleteTagsInput) *RedshiftDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteTags", input)
	return &RedshiftDeleteTagsFuture{Future: future}
}

func (a *stub) DeleteUsageLimit(ctx workflow.Context, input *redshift.DeleteUsageLimitInput) (*redshift.DeleteUsageLimitOutput, error) {
	var output redshift.DeleteUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUsageLimitAsync(ctx workflow.Context, input *redshift.DeleteUsageLimitInput) *RedshiftDeleteUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DeleteUsageLimit", input)
	return &RedshiftDeleteUsageLimitFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *redshift.DescribeAccountAttributesInput) (*redshift.DescribeAccountAttributesOutput, error) {
	var output redshift.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *redshift.DescribeAccountAttributesInput) *RedshiftDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeAccountAttributes", input)
	return &RedshiftDescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeClusterDbRevisions(ctx workflow.Context, input *redshift.DescribeClusterDbRevisionsInput) (*redshift.DescribeClusterDbRevisionsOutput, error) {
	var output redshift.DescribeClusterDbRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterDbRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterDbRevisionsAsync(ctx workflow.Context, input *redshift.DescribeClusterDbRevisionsInput) *RedshiftDescribeClusterDbRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterDbRevisions", input)
	return &RedshiftDescribeClusterDbRevisionsFuture{Future: future}
}

func (a *stub) DescribeClusterParameterGroups(ctx workflow.Context, input *redshift.DescribeClusterParameterGroupsInput) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	var output redshift.DescribeClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterParameterGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterParameterGroupsInput) *RedshiftDescribeClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameterGroups", input)
	return &RedshiftDescribeClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterParameters(ctx workflow.Context, input *redshift.DescribeClusterParametersInput) (*redshift.DescribeClusterParametersOutput, error) {
	var output redshift.DescribeClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterParametersAsync(ctx workflow.Context, input *redshift.DescribeClusterParametersInput) *RedshiftDescribeClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterParameters", input)
	return &RedshiftDescribeClusterParametersFuture{Future: future}
}

func (a *stub) DescribeClusterSecurityGroups(ctx workflow.Context, input *redshift.DescribeClusterSecurityGroupsInput) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	var output redshift.DescribeClusterSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSecurityGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterSecurityGroupsInput) *RedshiftDescribeClusterSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSecurityGroups", input)
	return &RedshiftDescribeClusterSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterSnapshots(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) (*redshift.DescribeClusterSnapshotsOutput, error) {
	var output redshift.DescribeClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSnapshotsAsync(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) *RedshiftDescribeClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSnapshots", input)
	return &RedshiftDescribeClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeClusterSubnetGroups(ctx workflow.Context, input *redshift.DescribeClusterSubnetGroupsInput) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	var output redshift.DescribeClusterSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterSubnetGroupsAsync(ctx workflow.Context, input *redshift.DescribeClusterSubnetGroupsInput) *RedshiftDescribeClusterSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterSubnetGroups", input)
	return &RedshiftDescribeClusterSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeClusterTracks(ctx workflow.Context, input *redshift.DescribeClusterTracksInput) (*redshift.DescribeClusterTracksOutput, error) {
	var output redshift.DescribeClusterTracksOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterTracks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterTracksAsync(ctx workflow.Context, input *redshift.DescribeClusterTracksInput) *RedshiftDescribeClusterTracksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterTracks", input)
	return &RedshiftDescribeClusterTracksFuture{Future: future}
}

func (a *stub) DescribeClusterVersions(ctx workflow.Context, input *redshift.DescribeClusterVersionsInput) (*redshift.DescribeClusterVersionsOutput, error) {
	var output redshift.DescribeClusterVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterVersionsAsync(ctx workflow.Context, input *redshift.DescribeClusterVersionsInput) *RedshiftDescribeClusterVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusterVersions", input)
	return &RedshiftDescribeClusterVersionsFuture{Future: future}
}

func (a *stub) DescribeClusters(ctx workflow.Context, input *redshift.DescribeClustersInput) (*redshift.DescribeClustersOutput, error) {
	var output redshift.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClustersAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *RedshiftDescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeClusters", input)
	return &RedshiftDescribeClustersFuture{Future: future}
}

func (a *stub) DescribeDefaultClusterParameters(ctx workflow.Context, input *redshift.DescribeDefaultClusterParametersInput) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	var output redshift.DescribeDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDefaultClusterParametersAsync(ctx workflow.Context, input *redshift.DescribeDefaultClusterParametersInput) *RedshiftDescribeDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeDefaultClusterParameters", input)
	return &RedshiftDescribeDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *redshift.DescribeEventCategoriesInput) (*redshift.DescribeEventCategoriesOutput, error) {
	var output redshift.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *redshift.DescribeEventCategoriesInput) *RedshiftDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventCategories", input)
	return &RedshiftDescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEventSubscriptions(ctx workflow.Context, input *redshift.DescribeEventSubscriptionsInput) (*redshift.DescribeEventSubscriptionsOutput, error) {
	var output redshift.DescribeEventSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventSubscriptionsAsync(ctx workflow.Context, input *redshift.DescribeEventSubscriptionsInput) *RedshiftDescribeEventSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEventSubscriptions", input)
	return &RedshiftDescribeEventSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *redshift.DescribeEventsInput) (*redshift.DescribeEventsOutput, error) {
	var output redshift.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *redshift.DescribeEventsInput) *RedshiftDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeEvents", input)
	return &RedshiftDescribeEventsFuture{Future: future}
}

func (a *stub) DescribeHsmClientCertificates(ctx workflow.Context, input *redshift.DescribeHsmClientCertificatesInput) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	var output redshift.DescribeHsmClientCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmClientCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHsmClientCertificatesAsync(ctx workflow.Context, input *redshift.DescribeHsmClientCertificatesInput) *RedshiftDescribeHsmClientCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmClientCertificates", input)
	return &RedshiftDescribeHsmClientCertificatesFuture{Future: future}
}

func (a *stub) DescribeHsmConfigurations(ctx workflow.Context, input *redshift.DescribeHsmConfigurationsInput) (*redshift.DescribeHsmConfigurationsOutput, error) {
	var output redshift.DescribeHsmConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHsmConfigurationsAsync(ctx workflow.Context, input *redshift.DescribeHsmConfigurationsInput) *RedshiftDescribeHsmConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeHsmConfigurations", input)
	return &RedshiftDescribeHsmConfigurationsFuture{Future: future}
}

func (a *stub) DescribeLoggingStatus(ctx workflow.Context, input *redshift.DescribeLoggingStatusInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeLoggingStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingStatusAsync(ctx workflow.Context, input *redshift.DescribeLoggingStatusInput) *RedshiftDescribeLoggingStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeLoggingStatus", input)
	return &RedshiftDescribeLoggingStatusFuture{Future: future}
}

func (a *stub) DescribeNodeConfigurationOptions(ctx workflow.Context, input *redshift.DescribeNodeConfigurationOptionsInput) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {
	var output redshift.DescribeNodeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeNodeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNodeConfigurationOptionsAsync(ctx workflow.Context, input *redshift.DescribeNodeConfigurationOptionsInput) *RedshiftDescribeNodeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeNodeConfigurationOptions", input)
	return &RedshiftDescribeNodeConfigurationOptionsFuture{Future: future}
}

func (a *stub) DescribeOrderableClusterOptions(ctx workflow.Context, input *redshift.DescribeOrderableClusterOptionsInput) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	var output redshift.DescribeOrderableClusterOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeOrderableClusterOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableClusterOptionsAsync(ctx workflow.Context, input *redshift.DescribeOrderableClusterOptionsInput) *RedshiftDescribeOrderableClusterOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeOrderableClusterOptions", input)
	return &RedshiftDescribeOrderableClusterOptionsFuture{Future: future}
}

func (a *stub) DescribeReservedNodeOfferings(ctx workflow.Context, input *redshift.DescribeReservedNodeOfferingsInput) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	var output redshift.DescribeReservedNodeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedNodeOfferingsAsync(ctx workflow.Context, input *redshift.DescribeReservedNodeOfferingsInput) *RedshiftDescribeReservedNodeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodeOfferings", input)
	return &RedshiftDescribeReservedNodeOfferingsFuture{Future: future}
}

func (a *stub) DescribeReservedNodes(ctx workflow.Context, input *redshift.DescribeReservedNodesInput) (*redshift.DescribeReservedNodesOutput, error) {
	var output redshift.DescribeReservedNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedNodesAsync(ctx workflow.Context, input *redshift.DescribeReservedNodesInput) *RedshiftDescribeReservedNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeReservedNodes", input)
	return &RedshiftDescribeReservedNodesFuture{Future: future}
}

func (a *stub) DescribeResize(ctx workflow.Context, input *redshift.DescribeResizeInput) (*redshift.DescribeResizeOutput, error) {
	var output redshift.DescribeResizeOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeResize", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResizeAsync(ctx workflow.Context, input *redshift.DescribeResizeInput) *RedshiftDescribeResizeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeResize", input)
	return &RedshiftDescribeResizeFuture{Future: future}
}

func (a *stub) DescribeScheduledActions(ctx workflow.Context, input *redshift.DescribeScheduledActionsInput) (*redshift.DescribeScheduledActionsOutput, error) {
	var output redshift.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledActionsAsync(ctx workflow.Context, input *redshift.DescribeScheduledActionsInput) *RedshiftDescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeScheduledActions", input)
	return &RedshiftDescribeScheduledActionsFuture{Future: future}
}

func (a *stub) DescribeSnapshotCopyGrants(ctx workflow.Context, input *redshift.DescribeSnapshotCopyGrantsInput) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	var output redshift.DescribeSnapshotCopyGrantsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotCopyGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotCopyGrantsAsync(ctx workflow.Context, input *redshift.DescribeSnapshotCopyGrantsInput) *RedshiftDescribeSnapshotCopyGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotCopyGrants", input)
	return &RedshiftDescribeSnapshotCopyGrantsFuture{Future: future}
}

func (a *stub) DescribeSnapshotSchedules(ctx workflow.Context, input *redshift.DescribeSnapshotSchedulesInput) (*redshift.DescribeSnapshotSchedulesOutput, error) {
	var output redshift.DescribeSnapshotSchedulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotSchedules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotSchedulesAsync(ctx workflow.Context, input *redshift.DescribeSnapshotSchedulesInput) *RedshiftDescribeSnapshotSchedulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeSnapshotSchedules", input)
	return &RedshiftDescribeSnapshotSchedulesFuture{Future: future}
}

func (a *stub) DescribeStorage(ctx workflow.Context, input *redshift.DescribeStorageInput) (*redshift.DescribeStorageOutput, error) {
	var output redshift.DescribeStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStorageAsync(ctx workflow.Context, input *redshift.DescribeStorageInput) *RedshiftDescribeStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeStorage", input)
	return &RedshiftDescribeStorageFuture{Future: future}
}

func (a *stub) DescribeTableRestoreStatus(ctx workflow.Context, input *redshift.DescribeTableRestoreStatusInput) (*redshift.DescribeTableRestoreStatusOutput, error) {
	var output redshift.DescribeTableRestoreStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTableRestoreStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableRestoreStatusAsync(ctx workflow.Context, input *redshift.DescribeTableRestoreStatusInput) *RedshiftDescribeTableRestoreStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTableRestoreStatus", input)
	return &RedshiftDescribeTableRestoreStatusFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *redshift.DescribeTagsInput) (*redshift.DescribeTagsOutput, error) {
	var output redshift.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *redshift.DescribeTagsInput) *RedshiftDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeTags", input)
	return &RedshiftDescribeTagsFuture{Future: future}
}

func (a *stub) DescribeUsageLimits(ctx workflow.Context, input *redshift.DescribeUsageLimitsInput) (*redshift.DescribeUsageLimitsOutput, error) {
	var output redshift.DescribeUsageLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeUsageLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsageLimitsAsync(ctx workflow.Context, input *redshift.DescribeUsageLimitsInput) *RedshiftDescribeUsageLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DescribeUsageLimits", input)
	return &RedshiftDescribeUsageLimitsFuture{Future: future}
}

func (a *stub) DisableLogging(ctx workflow.Context, input *redshift.DisableLoggingInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DisableLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableLoggingAsync(ctx workflow.Context, input *redshift.DisableLoggingInput) *RedshiftDisableLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DisableLogging", input)
	return &RedshiftDisableLoggingFuture{Future: future}
}

func (a *stub) DisableSnapshotCopy(ctx workflow.Context, input *redshift.DisableSnapshotCopyInput) (*redshift.DisableSnapshotCopyOutput, error) {
	var output redshift.DisableSnapshotCopyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-DisableSnapshotCopy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableSnapshotCopyAsync(ctx workflow.Context, input *redshift.DisableSnapshotCopyInput) *RedshiftDisableSnapshotCopyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-DisableSnapshotCopy", input)
	return &RedshiftDisableSnapshotCopyFuture{Future: future}
}

func (a *stub) EnableLogging(ctx workflow.Context, input *redshift.EnableLoggingInput) (*redshift.LoggingStatus, error) {
	var output redshift.LoggingStatus
	err := workflow.ExecuteActivity(ctx, "aws-redshift-EnableLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableLoggingAsync(ctx workflow.Context, input *redshift.EnableLoggingInput) *RedshiftEnableLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-EnableLogging", input)
	return &RedshiftEnableLoggingFuture{Future: future}
}

func (a *stub) EnableSnapshotCopy(ctx workflow.Context, input *redshift.EnableSnapshotCopyInput) (*redshift.EnableSnapshotCopyOutput, error) {
	var output redshift.EnableSnapshotCopyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-EnableSnapshotCopy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSnapshotCopyAsync(ctx workflow.Context, input *redshift.EnableSnapshotCopyInput) *RedshiftEnableSnapshotCopyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-EnableSnapshotCopy", input)
	return &RedshiftEnableSnapshotCopyFuture{Future: future}
}

func (a *stub) GetClusterCredentials(ctx workflow.Context, input *redshift.GetClusterCredentialsInput) (*redshift.GetClusterCredentialsOutput, error) {
	var output redshift.GetClusterCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-GetClusterCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClusterCredentialsAsync(ctx workflow.Context, input *redshift.GetClusterCredentialsInput) *RedshiftGetClusterCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-GetClusterCredentials", input)
	return &RedshiftGetClusterCredentialsFuture{Future: future}
}

func (a *stub) GetReservedNodeExchangeOfferings(ctx workflow.Context, input *redshift.GetReservedNodeExchangeOfferingsInput) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {
	var output redshift.GetReservedNodeExchangeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-GetReservedNodeExchangeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservedNodeExchangeOfferingsAsync(ctx workflow.Context, input *redshift.GetReservedNodeExchangeOfferingsInput) *RedshiftGetReservedNodeExchangeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-GetReservedNodeExchangeOfferings", input)
	return &RedshiftGetReservedNodeExchangeOfferingsFuture{Future: future}
}

func (a *stub) ModifyCluster(ctx workflow.Context, input *redshift.ModifyClusterInput) (*redshift.ModifyClusterOutput, error) {
	var output redshift.ModifyClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterAsync(ctx workflow.Context, input *redshift.ModifyClusterInput) *RedshiftModifyClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyCluster", input)
	return &RedshiftModifyClusterFuture{Future: future}
}

func (a *stub) ModifyClusterDbRevision(ctx workflow.Context, input *redshift.ModifyClusterDbRevisionInput) (*redshift.ModifyClusterDbRevisionOutput, error) {
	var output redshift.ModifyClusterDbRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterDbRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterDbRevisionAsync(ctx workflow.Context, input *redshift.ModifyClusterDbRevisionInput) *RedshiftModifyClusterDbRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterDbRevision", input)
	return &RedshiftModifyClusterDbRevisionFuture{Future: future}
}

func (a *stub) ModifyClusterIamRoles(ctx workflow.Context, input *redshift.ModifyClusterIamRolesInput) (*redshift.ModifyClusterIamRolesOutput, error) {
	var output redshift.ModifyClusterIamRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterIamRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterIamRolesAsync(ctx workflow.Context, input *redshift.ModifyClusterIamRolesInput) *RedshiftModifyClusterIamRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterIamRoles", input)
	return &RedshiftModifyClusterIamRolesFuture{Future: future}
}

func (a *stub) ModifyClusterMaintenance(ctx workflow.Context, input *redshift.ModifyClusterMaintenanceInput) (*redshift.ModifyClusterMaintenanceOutput, error) {
	var output redshift.ModifyClusterMaintenanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterMaintenance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterMaintenanceAsync(ctx workflow.Context, input *redshift.ModifyClusterMaintenanceInput) *RedshiftModifyClusterMaintenanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterMaintenance", input)
	return &RedshiftModifyClusterMaintenanceFuture{Future: future}
}

func (a *stub) ModifyClusterParameterGroup(ctx workflow.Context, input *redshift.ModifyClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterParameterGroupAsync(ctx workflow.Context, input *redshift.ModifyClusterParameterGroupInput) *RedshiftModifyClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterParameterGroup", input)
	return &RedshiftModifyClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyClusterSnapshot(ctx workflow.Context, input *redshift.ModifyClusterSnapshotInput) (*redshift.ModifyClusterSnapshotOutput, error) {
	var output redshift.ModifyClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSnapshotAsync(ctx workflow.Context, input *redshift.ModifyClusterSnapshotInput) *RedshiftModifyClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshot", input)
	return &RedshiftModifyClusterSnapshotFuture{Future: future}
}

func (a *stub) ModifyClusterSnapshotSchedule(ctx workflow.Context, input *redshift.ModifyClusterSnapshotScheduleInput) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {
	var output redshift.ModifyClusterSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSnapshotScheduleAsync(ctx workflow.Context, input *redshift.ModifyClusterSnapshotScheduleInput) *RedshiftModifyClusterSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSnapshotSchedule", input)
	return &RedshiftModifyClusterSnapshotScheduleFuture{Future: future}
}

func (a *stub) ModifyClusterSubnetGroup(ctx workflow.Context, input *redshift.ModifyClusterSubnetGroupInput) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	var output redshift.ModifyClusterSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClusterSubnetGroupAsync(ctx workflow.Context, input *redshift.ModifyClusterSubnetGroupInput) *RedshiftModifyClusterSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyClusterSubnetGroup", input)
	return &RedshiftModifyClusterSubnetGroupFuture{Future: future}
}

func (a *stub) ModifyEventSubscription(ctx workflow.Context, input *redshift.ModifyEventSubscriptionInput) (*redshift.ModifyEventSubscriptionOutput, error) {
	var output redshift.ModifyEventSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyEventSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEventSubscriptionAsync(ctx workflow.Context, input *redshift.ModifyEventSubscriptionInput) *RedshiftModifyEventSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyEventSubscription", input)
	return &RedshiftModifyEventSubscriptionFuture{Future: future}
}

func (a *stub) ModifyScheduledAction(ctx workflow.Context, input *redshift.ModifyScheduledActionInput) (*redshift.ModifyScheduledActionOutput, error) {
	var output redshift.ModifyScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyScheduledActionAsync(ctx workflow.Context, input *redshift.ModifyScheduledActionInput) *RedshiftModifyScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyScheduledAction", input)
	return &RedshiftModifyScheduledActionFuture{Future: future}
}

func (a *stub) ModifySnapshotCopyRetentionPeriod(ctx workflow.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	var output redshift.ModifySnapshotCopyRetentionPeriodOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotCopyRetentionPeriod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySnapshotCopyRetentionPeriodAsync(ctx workflow.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput) *RedshiftModifySnapshotCopyRetentionPeriodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotCopyRetentionPeriod", input)
	return &RedshiftModifySnapshotCopyRetentionPeriodFuture{Future: future}
}

func (a *stub) ModifySnapshotSchedule(ctx workflow.Context, input *redshift.ModifySnapshotScheduleInput) (*redshift.ModifySnapshotScheduleOutput, error) {
	var output redshift.ModifySnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySnapshotScheduleAsync(ctx workflow.Context, input *redshift.ModifySnapshotScheduleInput) *RedshiftModifySnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifySnapshotSchedule", input)
	return &RedshiftModifySnapshotScheduleFuture{Future: future}
}

func (a *stub) ModifyUsageLimit(ctx workflow.Context, input *redshift.ModifyUsageLimitInput) (*redshift.ModifyUsageLimitOutput, error) {
	var output redshift.ModifyUsageLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyUsageLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyUsageLimitAsync(ctx workflow.Context, input *redshift.ModifyUsageLimitInput) *RedshiftModifyUsageLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ModifyUsageLimit", input)
	return &RedshiftModifyUsageLimitFuture{Future: future}
}

func (a *stub) PauseCluster(ctx workflow.Context, input *redshift.PauseClusterInput) (*redshift.PauseClusterOutput, error) {
	var output redshift.PauseClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-PauseCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PauseClusterAsync(ctx workflow.Context, input *redshift.PauseClusterInput) *RedshiftPauseClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-PauseCluster", input)
	return &RedshiftPauseClusterFuture{Future: future}
}

func (a *stub) PurchaseReservedNodeOffering(ctx workflow.Context, input *redshift.PurchaseReservedNodeOfferingInput) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	var output redshift.PurchaseReservedNodeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-PurchaseReservedNodeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedNodeOfferingAsync(ctx workflow.Context, input *redshift.PurchaseReservedNodeOfferingInput) *RedshiftPurchaseReservedNodeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-PurchaseReservedNodeOffering", input)
	return &RedshiftPurchaseReservedNodeOfferingFuture{Future: future}
}

func (a *stub) RebootCluster(ctx workflow.Context, input *redshift.RebootClusterInput) (*redshift.RebootClusterOutput, error) {
	var output redshift.RebootClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RebootCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootClusterAsync(ctx workflow.Context, input *redshift.RebootClusterInput) *RedshiftRebootClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RebootCluster", input)
	return &RedshiftRebootClusterFuture{Future: future}
}

func (a *stub) ResetClusterParameterGroup(ctx workflow.Context, input *redshift.ResetClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	var output redshift.ClusterParameterGroupNameMessage
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResetClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetClusterParameterGroupAsync(ctx workflow.Context, input *redshift.ResetClusterParameterGroupInput) *RedshiftResetClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResetClusterParameterGroup", input)
	return &RedshiftResetClusterParameterGroupFuture{Future: future}
}

func (a *stub) ResizeCluster(ctx workflow.Context, input *redshift.ResizeClusterInput) (*redshift.ResizeClusterOutput, error) {
	var output redshift.ResizeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResizeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResizeClusterAsync(ctx workflow.Context, input *redshift.ResizeClusterInput) *RedshiftResizeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResizeCluster", input)
	return &RedshiftResizeClusterFuture{Future: future}
}

func (a *stub) RestoreFromClusterSnapshot(ctx workflow.Context, input *redshift.RestoreFromClusterSnapshotInput) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	var output redshift.RestoreFromClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreFromClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreFromClusterSnapshotAsync(ctx workflow.Context, input *redshift.RestoreFromClusterSnapshotInput) *RedshiftRestoreFromClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreFromClusterSnapshot", input)
	return &RedshiftRestoreFromClusterSnapshotFuture{Future: future}
}

func (a *stub) RestoreTableFromClusterSnapshot(ctx workflow.Context, input *redshift.RestoreTableFromClusterSnapshotInput) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	var output redshift.RestoreTableFromClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreTableFromClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableFromClusterSnapshotAsync(ctx workflow.Context, input *redshift.RestoreTableFromClusterSnapshotInput) *RedshiftRestoreTableFromClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RestoreTableFromClusterSnapshot", input)
	return &RedshiftRestoreTableFromClusterSnapshotFuture{Future: future}
}

func (a *stub) ResumeCluster(ctx workflow.Context, input *redshift.ResumeClusterInput) (*redshift.ResumeClusterOutput, error) {
	var output redshift.ResumeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-ResumeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeClusterAsync(ctx workflow.Context, input *redshift.ResumeClusterInput) *RedshiftResumeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-ResumeCluster", input)
	return &RedshiftResumeClusterFuture{Future: future}
}

func (a *stub) RevokeClusterSecurityGroupIngress(ctx workflow.Context, input *redshift.RevokeClusterSecurityGroupIngressInput) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	var output redshift.RevokeClusterSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeClusterSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeClusterSecurityGroupIngressAsync(ctx workflow.Context, input *redshift.RevokeClusterSecurityGroupIngressInput) *RedshiftRevokeClusterSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeClusterSecurityGroupIngress", input)
	return &RedshiftRevokeClusterSecurityGroupIngressFuture{Future: future}
}

func (a *stub) RevokeSnapshotAccess(ctx workflow.Context, input *redshift.RevokeSnapshotAccessInput) (*redshift.RevokeSnapshotAccessOutput, error) {
	var output redshift.RevokeSnapshotAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeSnapshotAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeSnapshotAccessAsync(ctx workflow.Context, input *redshift.RevokeSnapshotAccessInput) *RedshiftRevokeSnapshotAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RevokeSnapshotAccess", input)
	return &RedshiftRevokeSnapshotAccessFuture{Future: future}
}

func (a *stub) RotateEncryptionKey(ctx workflow.Context, input *redshift.RotateEncryptionKeyInput) (*redshift.RotateEncryptionKeyOutput, error) {
	var output redshift.RotateEncryptionKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-redshift-RotateEncryptionKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RotateEncryptionKeyAsync(ctx workflow.Context, input *redshift.RotateEncryptionKeyInput) *RedshiftRotateEncryptionKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-RotateEncryptionKey", input)
	return &RedshiftRotateEncryptionKeyFuture{Future: future}
}

func (a *stub) WaitUntilClusterAvailable(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterAvailableAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterDeleted(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterDeletedAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterRestored(ctx workflow.Context, input *redshift.DescribeClustersInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterRestored", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterRestoredAsync(ctx workflow.Context, input *redshift.DescribeClustersInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilClusterRestored", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSnapshotAvailable(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilSnapshotAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSnapshotAvailableAsync(ctx workflow.Context, input *redshift.DescribeClusterSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-redshift-WaitUntilSnapshotAvailable", input)
	return clients.NewVoidFuture(future)
}
