// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package chimestub

import (
	"github.com/aws/aws-sdk-go/service/chime"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociatePhoneNumberWithUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociatePhoneNumberWithUserFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	var output chime.AssociatePhoneNumberWithUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociatePhoneNumbersWithVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociatePhoneNumbersWithVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociatePhoneNumbersWithVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociatePhoneNumbersWithVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSigninDelegateGroupsWithAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSigninDelegateGroupsWithAccountFuture) Get(ctx workflow.Context) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	var output chime.AssociateSigninDelegateGroupsWithAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchCreateAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCreateAttendeeFuture) Get(ctx workflow.Context) (*chime.BatchCreateAttendeeOutput, error) {
	var output chime.BatchCreateAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchCreateRoomMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCreateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.BatchCreateRoomMembershipOutput, error) {
	var output chime.BatchCreateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeletePhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeletePhoneNumberFuture) Get(ctx workflow.Context) (*chime.BatchDeletePhoneNumberOutput, error) {
	var output chime.BatchDeletePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchSuspendUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchSuspendUserFuture) Get(ctx workflow.Context) (*chime.BatchSuspendUserOutput, error) {
	var output chime.BatchSuspendUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUnsuspendUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUnsuspendUserFuture) Get(ctx workflow.Context) (*chime.BatchUnsuspendUserOutput, error) {
	var output chime.BatchUnsuspendUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdatePhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUpdatePhoneNumberFuture) Get(ctx workflow.Context) (*chime.BatchUpdatePhoneNumberOutput, error) {
	var output chime.BatchUpdatePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchUpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchUpdateUserFuture) Get(ctx workflow.Context) (*chime.BatchUpdateUserOutput, error) {
	var output chime.BatchUpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccountFuture) Get(ctx workflow.Context) (*chime.CreateAccountOutput, error) {
	var output chime.CreateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppInstanceFuture) Get(ctx workflow.Context) (*chime.CreateAppInstanceOutput, error) {
	var output chime.CreateAppInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppInstanceAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppInstanceAdminFuture) Get(ctx workflow.Context) (*chime.CreateAppInstanceAdminOutput, error) {
	var output chime.CreateAppInstanceAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.CreateAppInstanceUserOutput, error) {
	var output chime.CreateAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAttendeeFuture) Get(ctx workflow.Context) (*chime.CreateAttendeeOutput, error) {
	var output chime.CreateAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBotFuture) Get(ctx workflow.Context) (*chime.CreateBotOutput, error) {
	var output chime.CreateBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelFuture) Get(ctx workflow.Context) (*chime.CreateChannelOutput, error) {
	var output chime.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelBanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelBanFuture) Get(ctx workflow.Context) (*chime.CreateChannelBanOutput, error) {
	var output chime.CreateChannelBanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelMembershipFuture) Get(ctx workflow.Context) (*chime.CreateChannelMembershipOutput, error) {
	var output chime.CreateChannelMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelModeratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelModeratorFuture) Get(ctx workflow.Context) (*chime.CreateChannelModeratorOutput, error) {
	var output chime.CreateChannelModeratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMeetingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMeetingFuture) Get(ctx workflow.Context) (*chime.CreateMeetingOutput, error) {
	var output chime.CreateMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMeetingDialOutFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMeetingDialOutFuture) Get(ctx workflow.Context) (*chime.CreateMeetingDialOutOutput, error) {
	var output chime.CreateMeetingDialOutOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMeetingWithAttendeesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMeetingWithAttendeesFuture) Get(ctx workflow.Context) (*chime.CreateMeetingWithAttendeesOutput, error) {
	var output chime.CreateMeetingWithAttendeesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePhoneNumberOrderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePhoneNumberOrderFuture) Get(ctx workflow.Context) (*chime.CreatePhoneNumberOrderOutput, error) {
	var output chime.CreatePhoneNumberOrderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProxySessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProxySessionFuture) Get(ctx workflow.Context) (*chime.CreateProxySessionOutput, error) {
	var output chime.CreateProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRoomFuture) Get(ctx workflow.Context) (*chime.CreateRoomOutput, error) {
	var output chime.CreateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRoomMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.CreateRoomMembershipOutput, error) {
	var output chime.CreateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSipMediaApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSipMediaApplicationFuture) Get(ctx workflow.Context) (*chime.CreateSipMediaApplicationOutput, error) {
	var output chime.CreateSipMediaApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSipMediaApplicationCallFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSipMediaApplicationCallFuture) Get(ctx workflow.Context) (*chime.CreateSipMediaApplicationCallOutput, error) {
	var output chime.CreateSipMediaApplicationCallOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSipRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSipRuleFuture) Get(ctx workflow.Context) (*chime.CreateSipRuleOutput, error) {
	var output chime.CreateSipRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*chime.CreateUserOutput, error) {
	var output chime.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.CreateVoiceConnectorOutput, error) {
	var output chime.CreateVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.CreateVoiceConnectorGroupOutput, error) {
	var output chime.CreateVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountFuture) Get(ctx workflow.Context) (*chime.DeleteAccountOutput, error) {
	var output chime.DeleteAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppInstanceFuture) Get(ctx workflow.Context) (*chime.DeleteAppInstanceOutput, error) {
	var output chime.DeleteAppInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppInstanceAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppInstanceAdminFuture) Get(ctx workflow.Context) (*chime.DeleteAppInstanceAdminOutput, error) {
	var output chime.DeleteAppInstanceAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppInstanceStreamingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppInstanceStreamingConfigurationsFuture) Get(ctx workflow.Context) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.DeleteAppInstanceStreamingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.DeleteAppInstanceUserOutput, error) {
	var output chime.DeleteAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAttendeeFuture) Get(ctx workflow.Context) (*chime.DeleteAttendeeOutput, error) {
	var output chime.DeleteAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelFuture) Get(ctx workflow.Context) (*chime.DeleteChannelOutput, error) {
	var output chime.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelBanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelBanFuture) Get(ctx workflow.Context) (*chime.DeleteChannelBanOutput, error) {
	var output chime.DeleteChannelBanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelMembershipFuture) Get(ctx workflow.Context) (*chime.DeleteChannelMembershipOutput, error) {
	var output chime.DeleteChannelMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelMessageFuture) Get(ctx workflow.Context) (*chime.DeleteChannelMessageOutput, error) {
	var output chime.DeleteChannelMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelModeratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelModeratorFuture) Get(ctx workflow.Context) (*chime.DeleteChannelModeratorOutput, error) {
	var output chime.DeleteChannelModeratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteEventsConfigurationOutput, error) {
	var output chime.DeleteEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMeetingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMeetingFuture) Get(ctx workflow.Context) (*chime.DeleteMeetingOutput, error) {
	var output chime.DeleteMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePhoneNumberFuture) Get(ctx workflow.Context) (*chime.DeletePhoneNumberOutput, error) {
	var output chime.DeletePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProxySessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProxySessionFuture) Get(ctx workflow.Context) (*chime.DeleteProxySessionOutput, error) {
	var output chime.DeleteProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRoomFuture) Get(ctx workflow.Context) (*chime.DeleteRoomOutput, error) {
	var output chime.DeleteRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRoomMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRoomMembershipFuture) Get(ctx workflow.Context) (*chime.DeleteRoomMembershipOutput, error) {
	var output chime.DeleteRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSipMediaApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSipMediaApplicationFuture) Get(ctx workflow.Context) (*chime.DeleteSipMediaApplicationOutput, error) {
	var output chime.DeleteSipMediaApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSipRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSipRuleFuture) Get(ctx workflow.Context) (*chime.DeleteSipRuleOutput, error) {
	var output chime.DeleteSipRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorOutput, error) {
	var output chime.DeleteVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorEmergencyCallingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	var output chime.DeleteVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorOriginationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	var output chime.DeleteVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	var output chime.DeleteVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorStreamingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorTerminationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVoiceConnectorTerminationCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppInstanceFuture) Get(ctx workflow.Context) (*chime.DescribeAppInstanceOutput, error) {
	var output chime.DescribeAppInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppInstanceAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppInstanceAdminFuture) Get(ctx workflow.Context) (*chime.DescribeAppInstanceAdminOutput, error) {
	var output chime.DescribeAppInstanceAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.DescribeAppInstanceUserOutput, error) {
	var output chime.DescribeAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelFuture) Get(ctx workflow.Context) (*chime.DescribeChannelOutput, error) {
	var output chime.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelBanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelBanFuture) Get(ctx workflow.Context) (*chime.DescribeChannelBanOutput, error) {
	var output chime.DescribeChannelBanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelMembershipFuture) Get(ctx workflow.Context) (*chime.DescribeChannelMembershipOutput, error) {
	var output chime.DescribeChannelMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelMembershipForAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelMembershipForAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	var output chime.DescribeChannelMembershipForAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelModeratedByAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelModeratedByAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	var output chime.DescribeChannelModeratedByAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelModeratorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelModeratorFuture) Get(ctx workflow.Context) (*chime.DescribeChannelModeratorOutput, error) {
	var output chime.DescribeChannelModeratorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociatePhoneNumberFromUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociatePhoneNumberFromUserFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	var output chime.DisassociatePhoneNumberFromUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociatePhoneNumbersFromVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociatePhoneNumbersFromVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociatePhoneNumbersFromVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociatePhoneNumbersFromVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSigninDelegateGroupsFromAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSigninDelegateGroupsFromAccountFuture) Get(ctx workflow.Context) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	var output chime.DisassociateSigninDelegateGroupsFromAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountFuture) Get(ctx workflow.Context) (*chime.GetAccountOutput, error) {
	var output chime.GetAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountSettingsFuture) Get(ctx workflow.Context) (*chime.GetAccountSettingsOutput, error) {
	var output chime.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppInstanceRetentionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppInstanceRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.GetAppInstanceRetentionSettingsOutput, error) {
	var output chime.GetAppInstanceRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppInstanceStreamingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppInstanceStreamingConfigurationsFuture) Get(ctx workflow.Context) (*chime.GetAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.GetAppInstanceStreamingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAttendeeFuture) Get(ctx workflow.Context) (*chime.GetAttendeeOutput, error) {
	var output chime.GetAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBotFuture) Get(ctx workflow.Context) (*chime.GetBotOutput, error) {
	var output chime.GetBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetChannelMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetChannelMessageFuture) Get(ctx workflow.Context) (*chime.GetChannelMessageOutput, error) {
	var output chime.GetChannelMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEventsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.GetEventsConfigurationOutput, error) {
	var output chime.GetEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGlobalSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGlobalSettingsFuture) Get(ctx workflow.Context) (*chime.GetGlobalSettingsOutput, error) {
	var output chime.GetGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMeetingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMeetingFuture) Get(ctx workflow.Context) (*chime.GetMeetingOutput, error) {
	var output chime.GetMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMessagingSessionEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMessagingSessionEndpointFuture) Get(ctx workflow.Context) (*chime.GetMessagingSessionEndpointOutput, error) {
	var output chime.GetMessagingSessionEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPhoneNumberFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberOutput, error) {
	var output chime.GetPhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPhoneNumberOrderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPhoneNumberOrderFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberOrderOutput, error) {
	var output chime.GetPhoneNumberOrderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPhoneNumberSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPhoneNumberSettingsFuture) Get(ctx workflow.Context) (*chime.GetPhoneNumberSettingsOutput, error) {
	var output chime.GetPhoneNumberSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProxySessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProxySessionFuture) Get(ctx workflow.Context) (*chime.GetProxySessionOutput, error) {
	var output chime.GetProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRetentionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.GetRetentionSettingsOutput, error) {
	var output chime.GetRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRoomFuture) Get(ctx workflow.Context) (*chime.GetRoomOutput, error) {
	var output chime.GetRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSipMediaApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSipMediaApplicationFuture) Get(ctx workflow.Context) (*chime.GetSipMediaApplicationOutput, error) {
	var output chime.GetSipMediaApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSipMediaApplicationLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSipMediaApplicationLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	var output chime.GetSipMediaApplicationLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSipRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSipRuleFuture) Get(ctx workflow.Context) (*chime.GetSipRuleOutput, error) {
	var output chime.GetSipRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserFuture) Get(ctx workflow.Context) (*chime.GetUserOutput, error) {
	var output chime.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserSettingsFuture) Get(ctx workflow.Context) (*chime.GetUserSettingsOutput, error) {
	var output chime.GetUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorOutput, error) {
	var output chime.GetVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorEmergencyCallingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorGroupOutput, error) {
	var output chime.GetVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorOriginationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorOriginationOutput, error) {
	var output chime.GetVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorProxyOutput, error) {
	var output chime.GetVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorStreamingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorTerminationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorTerminationOutput, error) {
	var output chime.GetVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVoiceConnectorTerminationHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVoiceConnectorTerminationHealthFuture) Get(ctx workflow.Context) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	var output chime.GetVoiceConnectorTerminationHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InviteUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InviteUsersFuture) Get(ctx workflow.Context) (*chime.InviteUsersOutput, error) {
	var output chime.InviteUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountsFuture) Get(ctx workflow.Context) (*chime.ListAccountsOutput, error) {
	var output chime.ListAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppInstanceAdminsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppInstanceAdminsFuture) Get(ctx workflow.Context) (*chime.ListAppInstanceAdminsOutput, error) {
	var output chime.ListAppInstanceAdminsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppInstanceUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppInstanceUsersFuture) Get(ctx workflow.Context) (*chime.ListAppInstanceUsersOutput, error) {
	var output chime.ListAppInstanceUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppInstancesFuture) Get(ctx workflow.Context) (*chime.ListAppInstancesOutput, error) {
	var output chime.ListAppInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttendeeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttendeeTagsFuture) Get(ctx workflow.Context) (*chime.ListAttendeeTagsOutput, error) {
	var output chime.ListAttendeeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttendeesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttendeesFuture) Get(ctx workflow.Context) (*chime.ListAttendeesOutput, error) {
	var output chime.ListAttendeesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBotsFuture) Get(ctx workflow.Context) (*chime.ListBotsOutput, error) {
	var output chime.ListBotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelBansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelBansFuture) Get(ctx workflow.Context) (*chime.ListChannelBansOutput, error) {
	var output chime.ListChannelBansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelMembershipsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelMembershipsFuture) Get(ctx workflow.Context) (*chime.ListChannelMembershipsOutput, error) {
	var output chime.ListChannelMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelMembershipsForAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelMembershipsForAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error) {
	var output chime.ListChannelMembershipsForAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelMessagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelMessagesFuture) Get(ctx workflow.Context) (*chime.ListChannelMessagesOutput, error) {
	var output chime.ListChannelMessagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelModeratorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelModeratorsFuture) Get(ctx workflow.Context) (*chime.ListChannelModeratorsOutput, error) {
	var output chime.ListChannelModeratorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelsFuture) Get(ctx workflow.Context) (*chime.ListChannelsOutput, error) {
	var output chime.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelsModeratedByAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelsModeratedByAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error) {
	var output chime.ListChannelsModeratedByAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMeetingTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMeetingTagsFuture) Get(ctx workflow.Context) (*chime.ListMeetingTagsOutput, error) {
	var output chime.ListMeetingTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMeetingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMeetingsFuture) Get(ctx workflow.Context) (*chime.ListMeetingsOutput, error) {
	var output chime.ListMeetingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPhoneNumberOrdersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPhoneNumberOrdersFuture) Get(ctx workflow.Context) (*chime.ListPhoneNumberOrdersOutput, error) {
	var output chime.ListPhoneNumberOrdersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPhoneNumbersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPhoneNumbersFuture) Get(ctx workflow.Context) (*chime.ListPhoneNumbersOutput, error) {
	var output chime.ListPhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProxySessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProxySessionsFuture) Get(ctx workflow.Context) (*chime.ListProxySessionsOutput, error) {
	var output chime.ListProxySessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoomMembershipsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoomMembershipsFuture) Get(ctx workflow.Context) (*chime.ListRoomMembershipsOutput, error) {
	var output chime.ListRoomMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoomsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoomsFuture) Get(ctx workflow.Context) (*chime.ListRoomsOutput, error) {
	var output chime.ListRoomsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSipMediaApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSipMediaApplicationsFuture) Get(ctx workflow.Context) (*chime.ListSipMediaApplicationsOutput, error) {
	var output chime.ListSipMediaApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSipRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSipRulesFuture) Get(ctx workflow.Context) (*chime.ListSipRulesOutput, error) {
	var output chime.ListSipRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*chime.ListTagsForResourceOutput, error) {
	var output chime.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*chime.ListUsersOutput, error) {
	var output chime.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVoiceConnectorGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVoiceConnectorGroupsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorGroupsOutput, error) {
	var output chime.ListVoiceConnectorGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVoiceConnectorTerminationCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.ListVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVoiceConnectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVoiceConnectorsFuture) Get(ctx workflow.Context) (*chime.ListVoiceConnectorsOutput, error) {
	var output chime.ListVoiceConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LogoutUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LogoutUserFuture) Get(ctx workflow.Context) (*chime.LogoutUserOutput, error) {
	var output chime.LogoutUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAppInstanceRetentionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAppInstanceRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.PutAppInstanceRetentionSettingsOutput, error) {
	var output chime.PutAppInstanceRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAppInstanceStreamingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAppInstanceStreamingConfigurationsFuture) Get(ctx workflow.Context) (*chime.PutAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.PutAppInstanceStreamingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutEventsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutEventsConfigurationFuture) Get(ctx workflow.Context) (*chime.PutEventsConfigurationOutput, error) {
	var output chime.PutEventsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRetentionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRetentionSettingsFuture) Get(ctx workflow.Context) (*chime.PutRetentionSettingsOutput, error) {
	var output chime.PutRetentionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSipMediaApplicationLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSipMediaApplicationLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	var output chime.PutSipMediaApplicationLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorEmergencyCallingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorEmergencyCallingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorEmergencyCallingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorLoggingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorOriginationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorOriginationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorOriginationOutput, error) {
	var output chime.PutVoiceConnectorOriginationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorProxyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorProxyFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorProxyOutput, error) {
	var output chime.PutVoiceConnectorProxyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorStreamingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorStreamingConfigurationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorStreamingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorTerminationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorTerminationFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorTerminationOutput, error) {
	var output chime.PutVoiceConnectorTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutVoiceConnectorTerminationCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutVoiceConnectorTerminationCredentialsFuture) Get(ctx workflow.Context) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.PutVoiceConnectorTerminationCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedactChannelMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedactChannelMessageFuture) Get(ctx workflow.Context) (*chime.RedactChannelMessageOutput, error) {
	var output chime.RedactChannelMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedactConversationMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedactConversationMessageFuture) Get(ctx workflow.Context) (*chime.RedactConversationMessageOutput, error) {
	var output chime.RedactConversationMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RedactRoomMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RedactRoomMessageFuture) Get(ctx workflow.Context) (*chime.RedactRoomMessageOutput, error) {
	var output chime.RedactRoomMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegenerateSecurityTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegenerateSecurityTokenFuture) Get(ctx workflow.Context) (*chime.RegenerateSecurityTokenOutput, error) {
	var output chime.RegenerateSecurityTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetPersonalPINFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetPersonalPINFuture) Get(ctx workflow.Context) (*chime.ResetPersonalPINOutput, error) {
	var output chime.ResetPersonalPINOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestorePhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestorePhoneNumberFuture) Get(ctx workflow.Context) (*chime.RestorePhoneNumberOutput, error) {
	var output chime.RestorePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchAvailablePhoneNumbersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchAvailablePhoneNumbersFuture) Get(ctx workflow.Context) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	var output chime.SearchAvailablePhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendChannelMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendChannelMessageFuture) Get(ctx workflow.Context) (*chime.SendChannelMessageOutput, error) {
	var output chime.SendChannelMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagAttendeeFuture) Get(ctx workflow.Context) (*chime.TagAttendeeOutput, error) {
	var output chime.TagAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagMeetingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagMeetingFuture) Get(ctx workflow.Context) (*chime.TagMeetingOutput, error) {
	var output chime.TagMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*chime.TagResourceOutput, error) {
	var output chime.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagAttendeeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagAttendeeFuture) Get(ctx workflow.Context) (*chime.UntagAttendeeOutput, error) {
	var output chime.UntagAttendeeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagMeetingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagMeetingFuture) Get(ctx workflow.Context) (*chime.UntagMeetingOutput, error) {
	var output chime.UntagMeetingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*chime.UntagResourceOutput, error) {
	var output chime.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountFuture) Get(ctx workflow.Context) (*chime.UpdateAccountOutput, error) {
	var output chime.UpdateAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateAccountSettingsOutput, error) {
	var output chime.UpdateAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAppInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAppInstanceFuture) Get(ctx workflow.Context) (*chime.UpdateAppInstanceOutput, error) {
	var output chime.UpdateAppInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAppInstanceUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAppInstanceUserFuture) Get(ctx workflow.Context) (*chime.UpdateAppInstanceUserOutput, error) {
	var output chime.UpdateAppInstanceUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBotFuture) Get(ctx workflow.Context) (*chime.UpdateBotOutput, error) {
	var output chime.UpdateBotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelFuture) Get(ctx workflow.Context) (*chime.UpdateChannelOutput, error) {
	var output chime.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelMessageFuture) Get(ctx workflow.Context) (*chime.UpdateChannelMessageOutput, error) {
	var output chime.UpdateChannelMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelReadMarkerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelReadMarkerFuture) Get(ctx workflow.Context) (*chime.UpdateChannelReadMarkerOutput, error) {
	var output chime.UpdateChannelReadMarkerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGlobalSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGlobalSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateGlobalSettingsOutput, error) {
	var output chime.UpdateGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePhoneNumberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePhoneNumberFuture) Get(ctx workflow.Context) (*chime.UpdatePhoneNumberOutput, error) {
	var output chime.UpdatePhoneNumberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePhoneNumberSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePhoneNumberSettingsFuture) Get(ctx workflow.Context) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	var output chime.UpdatePhoneNumberSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProxySessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProxySessionFuture) Get(ctx workflow.Context) (*chime.UpdateProxySessionOutput, error) {
	var output chime.UpdateProxySessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoomFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoomFuture) Get(ctx workflow.Context) (*chime.UpdateRoomOutput, error) {
	var output chime.UpdateRoomOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoomMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoomMembershipFuture) Get(ctx workflow.Context) (*chime.UpdateRoomMembershipOutput, error) {
	var output chime.UpdateRoomMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSipMediaApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSipMediaApplicationFuture) Get(ctx workflow.Context) (*chime.UpdateSipMediaApplicationOutput, error) {
	var output chime.UpdateSipMediaApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSipRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSipRuleFuture) Get(ctx workflow.Context) (*chime.UpdateSipRuleOutput, error) {
	var output chime.UpdateSipRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserFuture) Get(ctx workflow.Context) (*chime.UpdateUserOutput, error) {
	var output chime.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserSettingsFuture) Get(ctx workflow.Context) (*chime.UpdateUserSettingsOutput, error) {
	var output chime.UpdateUserSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVoiceConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVoiceConnectorFuture) Get(ctx workflow.Context) (*chime.UpdateVoiceConnectorOutput, error) {
	var output chime.UpdateVoiceConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVoiceConnectorGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVoiceConnectorGroupFuture) Get(ctx workflow.Context) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	var output chime.UpdateVoiceConnectorGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePhoneNumberWithUser(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	var output chime.AssociatePhoneNumberWithUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumberWithUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePhoneNumberWithUserAsync(ctx workflow.Context, input *chime.AssociatePhoneNumberWithUserInput) *AssociatePhoneNumberWithUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumberWithUser", input)
	return &AssociatePhoneNumberWithUserFuture{Future: future}
}

func (a *stub) AssociatePhoneNumbersWithVoiceConnector(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumbersWithVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePhoneNumbersWithVoiceConnectorAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorInput) *AssociatePhoneNumbersWithVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumbersWithVoiceConnector", input)
	return &AssociatePhoneNumbersWithVoiceConnectorFuture{Future: future}
}

func (a *stub) AssociatePhoneNumbersWithVoiceConnectorGroup(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	var output chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumbersWithVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePhoneNumbersWithVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput) *AssociatePhoneNumbersWithVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-AssociatePhoneNumbersWithVoiceConnectorGroup", input)
	return &AssociatePhoneNumbersWithVoiceConnectorGroupFuture{Future: future}
}

func (a *stub) AssociateSigninDelegateGroupsWithAccount(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	var output chime.AssociateSigninDelegateGroupsWithAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-AssociateSigninDelegateGroupsWithAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSigninDelegateGroupsWithAccountAsync(ctx workflow.Context, input *chime.AssociateSigninDelegateGroupsWithAccountInput) *AssociateSigninDelegateGroupsWithAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-AssociateSigninDelegateGroupsWithAccount", input)
	return &AssociateSigninDelegateGroupsWithAccountFuture{Future: future}
}

func (a *stub) BatchCreateAttendee(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) (*chime.BatchCreateAttendeeOutput, error) {
	var output chime.BatchCreateAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchCreateAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCreateAttendeeAsync(ctx workflow.Context, input *chime.BatchCreateAttendeeInput) *BatchCreateAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchCreateAttendee", input)
	return &BatchCreateAttendeeFuture{Future: future}
}

func (a *stub) BatchCreateRoomMembership(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) (*chime.BatchCreateRoomMembershipOutput, error) {
	var output chime.BatchCreateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchCreateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCreateRoomMembershipAsync(ctx workflow.Context, input *chime.BatchCreateRoomMembershipInput) *BatchCreateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchCreateRoomMembership", input)
	return &BatchCreateRoomMembershipFuture{Future: future}
}

func (a *stub) BatchDeletePhoneNumber(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) (*chime.BatchDeletePhoneNumberOutput, error) {
	var output chime.BatchDeletePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchDeletePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeletePhoneNumberAsync(ctx workflow.Context, input *chime.BatchDeletePhoneNumberInput) *BatchDeletePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchDeletePhoneNumber", input)
	return &BatchDeletePhoneNumberFuture{Future: future}
}

func (a *stub) BatchSuspendUser(ctx workflow.Context, input *chime.BatchSuspendUserInput) (*chime.BatchSuspendUserOutput, error) {
	var output chime.BatchSuspendUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchSuspendUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchSuspendUserAsync(ctx workflow.Context, input *chime.BatchSuspendUserInput) *BatchSuspendUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchSuspendUser", input)
	return &BatchSuspendUserFuture{Future: future}
}

func (a *stub) BatchUnsuspendUser(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) (*chime.BatchUnsuspendUserOutput, error) {
	var output chime.BatchUnsuspendUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchUnsuspendUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUnsuspendUserAsync(ctx workflow.Context, input *chime.BatchUnsuspendUserInput) *BatchUnsuspendUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchUnsuspendUser", input)
	return &BatchUnsuspendUserFuture{Future: future}
}

func (a *stub) BatchUpdatePhoneNumber(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) (*chime.BatchUpdatePhoneNumberOutput, error) {
	var output chime.BatchUpdatePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchUpdatePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdatePhoneNumberAsync(ctx workflow.Context, input *chime.BatchUpdatePhoneNumberInput) *BatchUpdatePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchUpdatePhoneNumber", input)
	return &BatchUpdatePhoneNumberFuture{Future: future}
}

func (a *stub) BatchUpdateUser(ctx workflow.Context, input *chime.BatchUpdateUserInput) (*chime.BatchUpdateUserOutput, error) {
	var output chime.BatchUpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-BatchUpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchUpdateUserAsync(ctx workflow.Context, input *chime.BatchUpdateUserInput) *BatchUpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-BatchUpdateUser", input)
	return &BatchUpdateUserFuture{Future: future}
}

func (a *stub) CreateAccount(ctx workflow.Context, input *chime.CreateAccountInput) (*chime.CreateAccountOutput, error) {
	var output chime.CreateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountAsync(ctx workflow.Context, input *chime.CreateAccountInput) *CreateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateAccount", input)
	return &CreateAccountFuture{Future: future}
}

func (a *stub) CreateAppInstance(ctx workflow.Context, input *chime.CreateAppInstanceInput) (*chime.CreateAppInstanceOutput, error) {
	var output chime.CreateAppInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppInstanceAsync(ctx workflow.Context, input *chime.CreateAppInstanceInput) *CreateAppInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstance", input)
	return &CreateAppInstanceFuture{Future: future}
}

func (a *stub) CreateAppInstanceAdmin(ctx workflow.Context, input *chime.CreateAppInstanceAdminInput) (*chime.CreateAppInstanceAdminOutput, error) {
	var output chime.CreateAppInstanceAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstanceAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppInstanceAdminAsync(ctx workflow.Context, input *chime.CreateAppInstanceAdminInput) *CreateAppInstanceAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstanceAdmin", input)
	return &CreateAppInstanceAdminFuture{Future: future}
}

func (a *stub) CreateAppInstanceUser(ctx workflow.Context, input *chime.CreateAppInstanceUserInput) (*chime.CreateAppInstanceUserOutput, error) {
	var output chime.CreateAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppInstanceUserAsync(ctx workflow.Context, input *chime.CreateAppInstanceUserInput) *CreateAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateAppInstanceUser", input)
	return &CreateAppInstanceUserFuture{Future: future}
}

func (a *stub) CreateAttendee(ctx workflow.Context, input *chime.CreateAttendeeInput) (*chime.CreateAttendeeOutput, error) {
	var output chime.CreateAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAttendeeAsync(ctx workflow.Context, input *chime.CreateAttendeeInput) *CreateAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateAttendee", input)
	return &CreateAttendeeFuture{Future: future}
}

func (a *stub) CreateBot(ctx workflow.Context, input *chime.CreateBotInput) (*chime.CreateBotOutput, error) {
	var output chime.CreateBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBotAsync(ctx workflow.Context, input *chime.CreateBotInput) *CreateBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateBot", input)
	return &CreateBotFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *chime.CreateChannelInput) (*chime.CreateChannelOutput, error) {
	var output chime.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *chime.CreateChannelInput) *CreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannel", input)
	return &CreateChannelFuture{Future: future}
}

func (a *stub) CreateChannelBan(ctx workflow.Context, input *chime.CreateChannelBanInput) (*chime.CreateChannelBanOutput, error) {
	var output chime.CreateChannelBanOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelBan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelBanAsync(ctx workflow.Context, input *chime.CreateChannelBanInput) *CreateChannelBanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelBan", input)
	return &CreateChannelBanFuture{Future: future}
}

func (a *stub) CreateChannelMembership(ctx workflow.Context, input *chime.CreateChannelMembershipInput) (*chime.CreateChannelMembershipOutput, error) {
	var output chime.CreateChannelMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelMembershipAsync(ctx workflow.Context, input *chime.CreateChannelMembershipInput) *CreateChannelMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelMembership", input)
	return &CreateChannelMembershipFuture{Future: future}
}

func (a *stub) CreateChannelModerator(ctx workflow.Context, input *chime.CreateChannelModeratorInput) (*chime.CreateChannelModeratorOutput, error) {
	var output chime.CreateChannelModeratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelModerator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelModeratorAsync(ctx workflow.Context, input *chime.CreateChannelModeratorInput) *CreateChannelModeratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateChannelModerator", input)
	return &CreateChannelModeratorFuture{Future: future}
}

func (a *stub) CreateMeeting(ctx workflow.Context, input *chime.CreateMeetingInput) (*chime.CreateMeetingOutput, error) {
	var output chime.CreateMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMeetingAsync(ctx workflow.Context, input *chime.CreateMeetingInput) *CreateMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeeting", input)
	return &CreateMeetingFuture{Future: future}
}

func (a *stub) CreateMeetingDialOut(ctx workflow.Context, input *chime.CreateMeetingDialOutInput) (*chime.CreateMeetingDialOutOutput, error) {
	var output chime.CreateMeetingDialOutOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeetingDialOut", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMeetingDialOutAsync(ctx workflow.Context, input *chime.CreateMeetingDialOutInput) *CreateMeetingDialOutFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeetingDialOut", input)
	return &CreateMeetingDialOutFuture{Future: future}
}

func (a *stub) CreateMeetingWithAttendees(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) (*chime.CreateMeetingWithAttendeesOutput, error) {
	var output chime.CreateMeetingWithAttendeesOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeetingWithAttendees", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMeetingWithAttendeesAsync(ctx workflow.Context, input *chime.CreateMeetingWithAttendeesInput) *CreateMeetingWithAttendeesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateMeetingWithAttendees", input)
	return &CreateMeetingWithAttendeesFuture{Future: future}
}

func (a *stub) CreatePhoneNumberOrder(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) (*chime.CreatePhoneNumberOrderOutput, error) {
	var output chime.CreatePhoneNumberOrderOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreatePhoneNumberOrder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePhoneNumberOrderAsync(ctx workflow.Context, input *chime.CreatePhoneNumberOrderInput) *CreatePhoneNumberOrderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreatePhoneNumberOrder", input)
	return &CreatePhoneNumberOrderFuture{Future: future}
}

func (a *stub) CreateProxySession(ctx workflow.Context, input *chime.CreateProxySessionInput) (*chime.CreateProxySessionOutput, error) {
	var output chime.CreateProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProxySessionAsync(ctx workflow.Context, input *chime.CreateProxySessionInput) *CreateProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateProxySession", input)
	return &CreateProxySessionFuture{Future: future}
}

func (a *stub) CreateRoom(ctx workflow.Context, input *chime.CreateRoomInput) (*chime.CreateRoomOutput, error) {
	var output chime.CreateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoomAsync(ctx workflow.Context, input *chime.CreateRoomInput) *CreateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateRoom", input)
	return &CreateRoomFuture{Future: future}
}

func (a *stub) CreateRoomMembership(ctx workflow.Context, input *chime.CreateRoomMembershipInput) (*chime.CreateRoomMembershipOutput, error) {
	var output chime.CreateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoomMembershipAsync(ctx workflow.Context, input *chime.CreateRoomMembershipInput) *CreateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateRoomMembership", input)
	return &CreateRoomMembershipFuture{Future: future}
}

func (a *stub) CreateSipMediaApplication(ctx workflow.Context, input *chime.CreateSipMediaApplicationInput) (*chime.CreateSipMediaApplicationOutput, error) {
	var output chime.CreateSipMediaApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipMediaApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSipMediaApplicationAsync(ctx workflow.Context, input *chime.CreateSipMediaApplicationInput) *CreateSipMediaApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipMediaApplication", input)
	return &CreateSipMediaApplicationFuture{Future: future}
}

func (a *stub) CreateSipMediaApplicationCall(ctx workflow.Context, input *chime.CreateSipMediaApplicationCallInput) (*chime.CreateSipMediaApplicationCallOutput, error) {
	var output chime.CreateSipMediaApplicationCallOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipMediaApplicationCall", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSipMediaApplicationCallAsync(ctx workflow.Context, input *chime.CreateSipMediaApplicationCallInput) *CreateSipMediaApplicationCallFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipMediaApplicationCall", input)
	return &CreateSipMediaApplicationCallFuture{Future: future}
}

func (a *stub) CreateSipRule(ctx workflow.Context, input *chime.CreateSipRuleInput) (*chime.CreateSipRuleOutput, error) {
	var output chime.CreateSipRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSipRuleAsync(ctx workflow.Context, input *chime.CreateSipRuleInput) *CreateSipRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateSipRule", input)
	return &CreateSipRuleFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *chime.CreateUserInput) (*chime.CreateUserOutput, error) {
	var output chime.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *chime.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) CreateVoiceConnector(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) (*chime.CreateVoiceConnectorOutput, error) {
	var output chime.CreateVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVoiceConnectorAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorInput) *CreateVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateVoiceConnector", input)
	return &CreateVoiceConnectorFuture{Future: future}
}

func (a *stub) CreateVoiceConnectorGroup(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) (*chime.CreateVoiceConnectorGroupOutput, error) {
	var output chime.CreateVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-CreateVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.CreateVoiceConnectorGroupInput) *CreateVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-CreateVoiceConnectorGroup", input)
	return &CreateVoiceConnectorGroupFuture{Future: future}
}

func (a *stub) DeleteAccount(ctx workflow.Context, input *chime.DeleteAccountInput) (*chime.DeleteAccountOutput, error) {
	var output chime.DeleteAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountAsync(ctx workflow.Context, input *chime.DeleteAccountInput) *DeleteAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAccount", input)
	return &DeleteAccountFuture{Future: future}
}

func (a *stub) DeleteAppInstance(ctx workflow.Context, input *chime.DeleteAppInstanceInput) (*chime.DeleteAppInstanceOutput, error) {
	var output chime.DeleteAppInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppInstanceAsync(ctx workflow.Context, input *chime.DeleteAppInstanceInput) *DeleteAppInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstance", input)
	return &DeleteAppInstanceFuture{Future: future}
}

func (a *stub) DeleteAppInstanceAdmin(ctx workflow.Context, input *chime.DeleteAppInstanceAdminInput) (*chime.DeleteAppInstanceAdminOutput, error) {
	var output chime.DeleteAppInstanceAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppInstanceAdminAsync(ctx workflow.Context, input *chime.DeleteAppInstanceAdminInput) *DeleteAppInstanceAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceAdmin", input)
	return &DeleteAppInstanceAdminFuture{Future: future}
}

func (a *stub) DeleteAppInstanceStreamingConfigurations(ctx workflow.Context, input *chime.DeleteAppInstanceStreamingConfigurationsInput) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.DeleteAppInstanceStreamingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceStreamingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppInstanceStreamingConfigurationsAsync(ctx workflow.Context, input *chime.DeleteAppInstanceStreamingConfigurationsInput) *DeleteAppInstanceStreamingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceStreamingConfigurations", input)
	return &DeleteAppInstanceStreamingConfigurationsFuture{Future: future}
}

func (a *stub) DeleteAppInstanceUser(ctx workflow.Context, input *chime.DeleteAppInstanceUserInput) (*chime.DeleteAppInstanceUserOutput, error) {
	var output chime.DeleteAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppInstanceUserAsync(ctx workflow.Context, input *chime.DeleteAppInstanceUserInput) *DeleteAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAppInstanceUser", input)
	return &DeleteAppInstanceUserFuture{Future: future}
}

func (a *stub) DeleteAttendee(ctx workflow.Context, input *chime.DeleteAttendeeInput) (*chime.DeleteAttendeeOutput, error) {
	var output chime.DeleteAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAttendeeAsync(ctx workflow.Context, input *chime.DeleteAttendeeInput) *DeleteAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteAttendee", input)
	return &DeleteAttendeeFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *chime.DeleteChannelInput) (*chime.DeleteChannelOutput, error) {
	var output chime.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *chime.DeleteChannelInput) *DeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannel", input)
	return &DeleteChannelFuture{Future: future}
}

func (a *stub) DeleteChannelBan(ctx workflow.Context, input *chime.DeleteChannelBanInput) (*chime.DeleteChannelBanOutput, error) {
	var output chime.DeleteChannelBanOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelBan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelBanAsync(ctx workflow.Context, input *chime.DeleteChannelBanInput) *DeleteChannelBanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelBan", input)
	return &DeleteChannelBanFuture{Future: future}
}

func (a *stub) DeleteChannelMembership(ctx workflow.Context, input *chime.DeleteChannelMembershipInput) (*chime.DeleteChannelMembershipOutput, error) {
	var output chime.DeleteChannelMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelMembershipAsync(ctx workflow.Context, input *chime.DeleteChannelMembershipInput) *DeleteChannelMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelMembership", input)
	return &DeleteChannelMembershipFuture{Future: future}
}

func (a *stub) DeleteChannelMessage(ctx workflow.Context, input *chime.DeleteChannelMessageInput) (*chime.DeleteChannelMessageOutput, error) {
	var output chime.DeleteChannelMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelMessageAsync(ctx workflow.Context, input *chime.DeleteChannelMessageInput) *DeleteChannelMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelMessage", input)
	return &DeleteChannelMessageFuture{Future: future}
}

func (a *stub) DeleteChannelModerator(ctx workflow.Context, input *chime.DeleteChannelModeratorInput) (*chime.DeleteChannelModeratorOutput, error) {
	var output chime.DeleteChannelModeratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelModerator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelModeratorAsync(ctx workflow.Context, input *chime.DeleteChannelModeratorInput) *DeleteChannelModeratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteChannelModerator", input)
	return &DeleteChannelModeratorFuture{Future: future}
}

func (a *stub) DeleteEventsConfiguration(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) (*chime.DeleteEventsConfigurationOutput, error) {
	var output chime.DeleteEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventsConfigurationAsync(ctx workflow.Context, input *chime.DeleteEventsConfigurationInput) *DeleteEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteEventsConfiguration", input)
	return &DeleteEventsConfigurationFuture{Future: future}
}

func (a *stub) DeleteMeeting(ctx workflow.Context, input *chime.DeleteMeetingInput) (*chime.DeleteMeetingOutput, error) {
	var output chime.DeleteMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMeetingAsync(ctx workflow.Context, input *chime.DeleteMeetingInput) *DeleteMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteMeeting", input)
	return &DeleteMeetingFuture{Future: future}
}

func (a *stub) DeletePhoneNumber(ctx workflow.Context, input *chime.DeletePhoneNumberInput) (*chime.DeletePhoneNumberOutput, error) {
	var output chime.DeletePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeletePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePhoneNumberAsync(ctx workflow.Context, input *chime.DeletePhoneNumberInput) *DeletePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeletePhoneNumber", input)
	return &DeletePhoneNumberFuture{Future: future}
}

func (a *stub) DeleteProxySession(ctx workflow.Context, input *chime.DeleteProxySessionInput) (*chime.DeleteProxySessionOutput, error) {
	var output chime.DeleteProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProxySessionAsync(ctx workflow.Context, input *chime.DeleteProxySessionInput) *DeleteProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteProxySession", input)
	return &DeleteProxySessionFuture{Future: future}
}

func (a *stub) DeleteRoom(ctx workflow.Context, input *chime.DeleteRoomInput) (*chime.DeleteRoomOutput, error) {
	var output chime.DeleteRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomAsync(ctx workflow.Context, input *chime.DeleteRoomInput) *DeleteRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteRoom", input)
	return &DeleteRoomFuture{Future: future}
}

func (a *stub) DeleteRoomMembership(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) (*chime.DeleteRoomMembershipOutput, error) {
	var output chime.DeleteRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoomMembershipAsync(ctx workflow.Context, input *chime.DeleteRoomMembershipInput) *DeleteRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteRoomMembership", input)
	return &DeleteRoomMembershipFuture{Future: future}
}

func (a *stub) DeleteSipMediaApplication(ctx workflow.Context, input *chime.DeleteSipMediaApplicationInput) (*chime.DeleteSipMediaApplicationOutput, error) {
	var output chime.DeleteSipMediaApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteSipMediaApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSipMediaApplicationAsync(ctx workflow.Context, input *chime.DeleteSipMediaApplicationInput) *DeleteSipMediaApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteSipMediaApplication", input)
	return &DeleteSipMediaApplicationFuture{Future: future}
}

func (a *stub) DeleteSipRule(ctx workflow.Context, input *chime.DeleteSipRuleInput) (*chime.DeleteSipRuleOutput, error) {
	var output chime.DeleteSipRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteSipRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSipRuleAsync(ctx workflow.Context, input *chime.DeleteSipRuleInput) *DeleteSipRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteSipRule", input)
	return &DeleteSipRuleFuture{Future: future}
}

func (a *stub) DeleteVoiceConnector(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) (*chime.DeleteVoiceConnectorOutput, error) {
	var output chime.DeleteVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorInput) *DeleteVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnector", input)
	return &DeleteVoiceConnectorFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput) *DeleteVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorEmergencyCallingConfiguration", input)
	return &DeleteVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorGroup(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	var output chime.DeleteVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorGroupInput) *DeleteVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorGroup", input)
	return &DeleteVoiceConnectorGroupFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorOrigination(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	var output chime.DeleteVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorOriginationInput) *DeleteVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorOrigination", input)
	return &DeleteVoiceConnectorOriginationFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorProxy(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	var output chime.DeleteVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorProxyInput) *DeleteVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorProxy", input)
	return &DeleteVoiceConnectorProxyFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.DeleteVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorStreamingConfigurationInput) *DeleteVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorStreamingConfiguration", input)
	return &DeleteVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorTermination(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationInput) *DeleteVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorTermination", input)
	return &DeleteVoiceConnectorTerminationFuture{Future: future}
}

func (a *stub) DeleteVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.DeleteVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.DeleteVoiceConnectorTerminationCredentialsInput) *DeleteVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DeleteVoiceConnectorTerminationCredentials", input)
	return &DeleteVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *stub) DescribeAppInstance(ctx workflow.Context, input *chime.DescribeAppInstanceInput) (*chime.DescribeAppInstanceOutput, error) {
	var output chime.DescribeAppInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppInstanceAsync(ctx workflow.Context, input *chime.DescribeAppInstanceInput) *DescribeAppInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstance", input)
	return &DescribeAppInstanceFuture{Future: future}
}

func (a *stub) DescribeAppInstanceAdmin(ctx workflow.Context, input *chime.DescribeAppInstanceAdminInput) (*chime.DescribeAppInstanceAdminOutput, error) {
	var output chime.DescribeAppInstanceAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstanceAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppInstanceAdminAsync(ctx workflow.Context, input *chime.DescribeAppInstanceAdminInput) *DescribeAppInstanceAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstanceAdmin", input)
	return &DescribeAppInstanceAdminFuture{Future: future}
}

func (a *stub) DescribeAppInstanceUser(ctx workflow.Context, input *chime.DescribeAppInstanceUserInput) (*chime.DescribeAppInstanceUserOutput, error) {
	var output chime.DescribeAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppInstanceUserAsync(ctx workflow.Context, input *chime.DescribeAppInstanceUserInput) *DescribeAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeAppInstanceUser", input)
	return &DescribeAppInstanceUserFuture{Future: future}
}

func (a *stub) DescribeChannel(ctx workflow.Context, input *chime.DescribeChannelInput) (*chime.DescribeChannelOutput, error) {
	var output chime.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelAsync(ctx workflow.Context, input *chime.DescribeChannelInput) *DescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannel", input)
	return &DescribeChannelFuture{Future: future}
}

func (a *stub) DescribeChannelBan(ctx workflow.Context, input *chime.DescribeChannelBanInput) (*chime.DescribeChannelBanOutput, error) {
	var output chime.DescribeChannelBanOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelBan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelBanAsync(ctx workflow.Context, input *chime.DescribeChannelBanInput) *DescribeChannelBanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelBan", input)
	return &DescribeChannelBanFuture{Future: future}
}

func (a *stub) DescribeChannelMembership(ctx workflow.Context, input *chime.DescribeChannelMembershipInput) (*chime.DescribeChannelMembershipOutput, error) {
	var output chime.DescribeChannelMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelMembershipAsync(ctx workflow.Context, input *chime.DescribeChannelMembershipInput) *DescribeChannelMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelMembership", input)
	return &DescribeChannelMembershipFuture{Future: future}
}

func (a *stub) DescribeChannelMembershipForAppInstanceUser(ctx workflow.Context, input *chime.DescribeChannelMembershipForAppInstanceUserInput) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	var output chime.DescribeChannelMembershipForAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelMembershipForAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelMembershipForAppInstanceUserAsync(ctx workflow.Context, input *chime.DescribeChannelMembershipForAppInstanceUserInput) *DescribeChannelMembershipForAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelMembershipForAppInstanceUser", input)
	return &DescribeChannelMembershipForAppInstanceUserFuture{Future: future}
}

func (a *stub) DescribeChannelModeratedByAppInstanceUser(ctx workflow.Context, input *chime.DescribeChannelModeratedByAppInstanceUserInput) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	var output chime.DescribeChannelModeratedByAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelModeratedByAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelModeratedByAppInstanceUserAsync(ctx workflow.Context, input *chime.DescribeChannelModeratedByAppInstanceUserInput) *DescribeChannelModeratedByAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelModeratedByAppInstanceUser", input)
	return &DescribeChannelModeratedByAppInstanceUserFuture{Future: future}
}

func (a *stub) DescribeChannelModerator(ctx workflow.Context, input *chime.DescribeChannelModeratorInput) (*chime.DescribeChannelModeratorOutput, error) {
	var output chime.DescribeChannelModeratorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelModerator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelModeratorAsync(ctx workflow.Context, input *chime.DescribeChannelModeratorInput) *DescribeChannelModeratorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DescribeChannelModerator", input)
	return &DescribeChannelModeratorFuture{Future: future}
}

func (a *stub) DisassociatePhoneNumberFromUser(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	var output chime.DisassociatePhoneNumberFromUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumberFromUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociatePhoneNumberFromUserAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumberFromUserInput) *DisassociatePhoneNumberFromUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumberFromUser", input)
	return &DisassociatePhoneNumberFromUserFuture{Future: future}
}

func (a *stub) DisassociatePhoneNumbersFromVoiceConnector(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumbersFromVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociatePhoneNumbersFromVoiceConnectorAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorInput) *DisassociatePhoneNumbersFromVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumbersFromVoiceConnector", input)
	return &DisassociatePhoneNumbersFromVoiceConnectorFuture{Future: future}
}

func (a *stub) DisassociatePhoneNumbersFromVoiceConnectorGroup(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	var output chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumbersFromVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociatePhoneNumbersFromVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput) *DisassociatePhoneNumbersFromVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DisassociatePhoneNumbersFromVoiceConnectorGroup", input)
	return &DisassociatePhoneNumbersFromVoiceConnectorGroupFuture{Future: future}
}

func (a *stub) DisassociateSigninDelegateGroupsFromAccount(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	var output chime.DisassociateSigninDelegateGroupsFromAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-DisassociateSigninDelegateGroupsFromAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSigninDelegateGroupsFromAccountAsync(ctx workflow.Context, input *chime.DisassociateSigninDelegateGroupsFromAccountInput) *DisassociateSigninDelegateGroupsFromAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-DisassociateSigninDelegateGroupsFromAccount", input)
	return &DisassociateSigninDelegateGroupsFromAccountFuture{Future: future}
}

func (a *stub) GetAccount(ctx workflow.Context, input *chime.GetAccountInput) (*chime.GetAccountOutput, error) {
	var output chime.GetAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountAsync(ctx workflow.Context, input *chime.GetAccountInput) *GetAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetAccount", input)
	return &GetAccountFuture{Future: future}
}

func (a *stub) GetAccountSettings(ctx workflow.Context, input *chime.GetAccountSettingsInput) (*chime.GetAccountSettingsOutput, error) {
	var output chime.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSettingsAsync(ctx workflow.Context, input *chime.GetAccountSettingsInput) *GetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetAccountSettings", input)
	return &GetAccountSettingsFuture{Future: future}
}

func (a *stub) GetAppInstanceRetentionSettings(ctx workflow.Context, input *chime.GetAppInstanceRetentionSettingsInput) (*chime.GetAppInstanceRetentionSettingsOutput, error) {
	var output chime.GetAppInstanceRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetAppInstanceRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppInstanceRetentionSettingsAsync(ctx workflow.Context, input *chime.GetAppInstanceRetentionSettingsInput) *GetAppInstanceRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetAppInstanceRetentionSettings", input)
	return &GetAppInstanceRetentionSettingsFuture{Future: future}
}

func (a *stub) GetAppInstanceStreamingConfigurations(ctx workflow.Context, input *chime.GetAppInstanceStreamingConfigurationsInput) (*chime.GetAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.GetAppInstanceStreamingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetAppInstanceStreamingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppInstanceStreamingConfigurationsAsync(ctx workflow.Context, input *chime.GetAppInstanceStreamingConfigurationsInput) *GetAppInstanceStreamingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetAppInstanceStreamingConfigurations", input)
	return &GetAppInstanceStreamingConfigurationsFuture{Future: future}
}

func (a *stub) GetAttendee(ctx workflow.Context, input *chime.GetAttendeeInput) (*chime.GetAttendeeOutput, error) {
	var output chime.GetAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAttendeeAsync(ctx workflow.Context, input *chime.GetAttendeeInput) *GetAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetAttendee", input)
	return &GetAttendeeFuture{Future: future}
}

func (a *stub) GetBot(ctx workflow.Context, input *chime.GetBotInput) (*chime.GetBotOutput, error) {
	var output chime.GetBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBotAsync(ctx workflow.Context, input *chime.GetBotInput) *GetBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetBot", input)
	return &GetBotFuture{Future: future}
}

func (a *stub) GetChannelMessage(ctx workflow.Context, input *chime.GetChannelMessageInput) (*chime.GetChannelMessageOutput, error) {
	var output chime.GetChannelMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetChannelMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChannelMessageAsync(ctx workflow.Context, input *chime.GetChannelMessageInput) *GetChannelMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetChannelMessage", input)
	return &GetChannelMessageFuture{Future: future}
}

func (a *stub) GetEventsConfiguration(ctx workflow.Context, input *chime.GetEventsConfigurationInput) (*chime.GetEventsConfigurationOutput, error) {
	var output chime.GetEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEventsConfigurationAsync(ctx workflow.Context, input *chime.GetEventsConfigurationInput) *GetEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetEventsConfiguration", input)
	return &GetEventsConfigurationFuture{Future: future}
}

func (a *stub) GetGlobalSettings(ctx workflow.Context, input *chime.GetGlobalSettingsInput) (*chime.GetGlobalSettingsOutput, error) {
	var output chime.GetGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGlobalSettingsAsync(ctx workflow.Context, input *chime.GetGlobalSettingsInput) *GetGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetGlobalSettings", input)
	return &GetGlobalSettingsFuture{Future: future}
}

func (a *stub) GetMeeting(ctx workflow.Context, input *chime.GetMeetingInput) (*chime.GetMeetingOutput, error) {
	var output chime.GetMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMeetingAsync(ctx workflow.Context, input *chime.GetMeetingInput) *GetMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetMeeting", input)
	return &GetMeetingFuture{Future: future}
}

func (a *stub) GetMessagingSessionEndpoint(ctx workflow.Context, input *chime.GetMessagingSessionEndpointInput) (*chime.GetMessagingSessionEndpointOutput, error) {
	var output chime.GetMessagingSessionEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetMessagingSessionEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMessagingSessionEndpointAsync(ctx workflow.Context, input *chime.GetMessagingSessionEndpointInput) *GetMessagingSessionEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetMessagingSessionEndpoint", input)
	return &GetMessagingSessionEndpointFuture{Future: future}
}

func (a *stub) GetPhoneNumber(ctx workflow.Context, input *chime.GetPhoneNumberInput) (*chime.GetPhoneNumberOutput, error) {
	var output chime.GetPhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPhoneNumberAsync(ctx workflow.Context, input *chime.GetPhoneNumberInput) *GetPhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumber", input)
	return &GetPhoneNumberFuture{Future: future}
}

func (a *stub) GetPhoneNumberOrder(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) (*chime.GetPhoneNumberOrderOutput, error) {
	var output chime.GetPhoneNumberOrderOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumberOrder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPhoneNumberOrderAsync(ctx workflow.Context, input *chime.GetPhoneNumberOrderInput) *GetPhoneNumberOrderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumberOrder", input)
	return &GetPhoneNumberOrderFuture{Future: future}
}

func (a *stub) GetPhoneNumberSettings(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) (*chime.GetPhoneNumberSettingsOutput, error) {
	var output chime.GetPhoneNumberSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumberSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPhoneNumberSettingsAsync(ctx workflow.Context, input *chime.GetPhoneNumberSettingsInput) *GetPhoneNumberSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetPhoneNumberSettings", input)
	return &GetPhoneNumberSettingsFuture{Future: future}
}

func (a *stub) GetProxySession(ctx workflow.Context, input *chime.GetProxySessionInput) (*chime.GetProxySessionOutput, error) {
	var output chime.GetProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProxySessionAsync(ctx workflow.Context, input *chime.GetProxySessionInput) *GetProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetProxySession", input)
	return &GetProxySessionFuture{Future: future}
}

func (a *stub) GetRetentionSettings(ctx workflow.Context, input *chime.GetRetentionSettingsInput) (*chime.GetRetentionSettingsOutput, error) {
	var output chime.GetRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRetentionSettingsAsync(ctx workflow.Context, input *chime.GetRetentionSettingsInput) *GetRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetRetentionSettings", input)
	return &GetRetentionSettingsFuture{Future: future}
}

func (a *stub) GetRoom(ctx workflow.Context, input *chime.GetRoomInput) (*chime.GetRoomOutput, error) {
	var output chime.GetRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoomAsync(ctx workflow.Context, input *chime.GetRoomInput) *GetRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetRoom", input)
	return &GetRoomFuture{Future: future}
}

func (a *stub) GetSipMediaApplication(ctx workflow.Context, input *chime.GetSipMediaApplicationInput) (*chime.GetSipMediaApplicationOutput, error) {
	var output chime.GetSipMediaApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetSipMediaApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSipMediaApplicationAsync(ctx workflow.Context, input *chime.GetSipMediaApplicationInput) *GetSipMediaApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetSipMediaApplication", input)
	return &GetSipMediaApplicationFuture{Future: future}
}

func (a *stub) GetSipMediaApplicationLoggingConfiguration(ctx workflow.Context, input *chime.GetSipMediaApplicationLoggingConfigurationInput) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	var output chime.GetSipMediaApplicationLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetSipMediaApplicationLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSipMediaApplicationLoggingConfigurationAsync(ctx workflow.Context, input *chime.GetSipMediaApplicationLoggingConfigurationInput) *GetSipMediaApplicationLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetSipMediaApplicationLoggingConfiguration", input)
	return &GetSipMediaApplicationLoggingConfigurationFuture{Future: future}
}

func (a *stub) GetSipRule(ctx workflow.Context, input *chime.GetSipRuleInput) (*chime.GetSipRuleOutput, error) {
	var output chime.GetSipRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetSipRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSipRuleAsync(ctx workflow.Context, input *chime.GetSipRuleInput) *GetSipRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetSipRule", input)
	return &GetSipRuleFuture{Future: future}
}

func (a *stub) GetUser(ctx workflow.Context, input *chime.GetUserInput) (*chime.GetUserOutput, error) {
	var output chime.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserAsync(ctx workflow.Context, input *chime.GetUserInput) *GetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetUser", input)
	return &GetUserFuture{Future: future}
}

func (a *stub) GetUserSettings(ctx workflow.Context, input *chime.GetUserSettingsInput) (*chime.GetUserSettingsOutput, error) {
	var output chime.GetUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserSettingsAsync(ctx workflow.Context, input *chime.GetUserSettingsInput) *GetUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetUserSettings", input)
	return &GetUserSettingsFuture{Future: future}
}

func (a *stub) GetVoiceConnector(ctx workflow.Context, input *chime.GetVoiceConnectorInput) (*chime.GetVoiceConnectorOutput, error) {
	var output chime.GetVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorAsync(ctx workflow.Context, input *chime.GetVoiceConnectorInput) *GetVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnector", input)
	return &GetVoiceConnectorFuture{Future: future}
}

func (a *stub) GetVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorEmergencyCallingConfigurationInput) *GetVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorEmergencyCallingConfiguration", input)
	return &GetVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *stub) GetVoiceConnectorGroup(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) (*chime.GetVoiceConnectorGroupOutput, error) {
	var output chime.GetVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.GetVoiceConnectorGroupInput) *GetVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorGroup", input)
	return &GetVoiceConnectorGroupFuture{Future: future}
}

func (a *stub) GetVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorLoggingConfigurationInput) *GetVoiceConnectorLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorLoggingConfiguration", input)
	return &GetVoiceConnectorLoggingConfigurationFuture{Future: future}
}

func (a *stub) GetVoiceConnectorOrigination(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) (*chime.GetVoiceConnectorOriginationOutput, error) {
	var output chime.GetVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorOriginationInput) *GetVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorOrigination", input)
	return &GetVoiceConnectorOriginationFuture{Future: future}
}

func (a *stub) GetVoiceConnectorProxy(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) (*chime.GetVoiceConnectorProxyOutput, error) {
	var output chime.GetVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.GetVoiceConnectorProxyInput) *GetVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorProxy", input)
	return &GetVoiceConnectorProxyFuture{Future: future}
}

func (a *stub) GetVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.GetVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorStreamingConfigurationInput) *GetVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorStreamingConfiguration", input)
	return &GetVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *stub) GetVoiceConnectorTermination(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) (*chime.GetVoiceConnectorTerminationOutput, error) {
	var output chime.GetVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationInput) *GetVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorTermination", input)
	return &GetVoiceConnectorTerminationFuture{Future: future}
}

func (a *stub) GetVoiceConnectorTerminationHealth(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	var output chime.GetVoiceConnectorTerminationHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorTerminationHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVoiceConnectorTerminationHealthAsync(ctx workflow.Context, input *chime.GetVoiceConnectorTerminationHealthInput) *GetVoiceConnectorTerminationHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-GetVoiceConnectorTerminationHealth", input)
	return &GetVoiceConnectorTerminationHealthFuture{Future: future}
}

func (a *stub) InviteUsers(ctx workflow.Context, input *chime.InviteUsersInput) (*chime.InviteUsersOutput, error) {
	var output chime.InviteUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-InviteUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InviteUsersAsync(ctx workflow.Context, input *chime.InviteUsersInput) *InviteUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-InviteUsers", input)
	return &InviteUsersFuture{Future: future}
}

func (a *stub) ListAccounts(ctx workflow.Context, input *chime.ListAccountsInput) (*chime.ListAccountsOutput, error) {
	var output chime.ListAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsAsync(ctx workflow.Context, input *chime.ListAccountsInput) *ListAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAccounts", input)
	return &ListAccountsFuture{Future: future}
}

func (a *stub) ListAppInstanceAdmins(ctx workflow.Context, input *chime.ListAppInstanceAdminsInput) (*chime.ListAppInstanceAdminsOutput, error) {
	var output chime.ListAppInstanceAdminsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstanceAdmins", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppInstanceAdminsAsync(ctx workflow.Context, input *chime.ListAppInstanceAdminsInput) *ListAppInstanceAdminsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstanceAdmins", input)
	return &ListAppInstanceAdminsFuture{Future: future}
}

func (a *stub) ListAppInstanceUsers(ctx workflow.Context, input *chime.ListAppInstanceUsersInput) (*chime.ListAppInstanceUsersOutput, error) {
	var output chime.ListAppInstanceUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstanceUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppInstanceUsersAsync(ctx workflow.Context, input *chime.ListAppInstanceUsersInput) *ListAppInstanceUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstanceUsers", input)
	return &ListAppInstanceUsersFuture{Future: future}
}

func (a *stub) ListAppInstances(ctx workflow.Context, input *chime.ListAppInstancesInput) (*chime.ListAppInstancesOutput, error) {
	var output chime.ListAppInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppInstancesAsync(ctx workflow.Context, input *chime.ListAppInstancesInput) *ListAppInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAppInstances", input)
	return &ListAppInstancesFuture{Future: future}
}

func (a *stub) ListAttendeeTags(ctx workflow.Context, input *chime.ListAttendeeTagsInput) (*chime.ListAttendeeTagsOutput, error) {
	var output chime.ListAttendeeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAttendeeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttendeeTagsAsync(ctx workflow.Context, input *chime.ListAttendeeTagsInput) *ListAttendeeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAttendeeTags", input)
	return &ListAttendeeTagsFuture{Future: future}
}

func (a *stub) ListAttendees(ctx workflow.Context, input *chime.ListAttendeesInput) (*chime.ListAttendeesOutput, error) {
	var output chime.ListAttendeesOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListAttendees", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttendeesAsync(ctx workflow.Context, input *chime.ListAttendeesInput) *ListAttendeesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListAttendees", input)
	return &ListAttendeesFuture{Future: future}
}

func (a *stub) ListBots(ctx workflow.Context, input *chime.ListBotsInput) (*chime.ListBotsOutput, error) {
	var output chime.ListBotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListBots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBotsAsync(ctx workflow.Context, input *chime.ListBotsInput) *ListBotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListBots", input)
	return &ListBotsFuture{Future: future}
}

func (a *stub) ListChannelBans(ctx workflow.Context, input *chime.ListChannelBansInput) (*chime.ListChannelBansOutput, error) {
	var output chime.ListChannelBansOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelBans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelBansAsync(ctx workflow.Context, input *chime.ListChannelBansInput) *ListChannelBansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelBans", input)
	return &ListChannelBansFuture{Future: future}
}

func (a *stub) ListChannelMemberships(ctx workflow.Context, input *chime.ListChannelMembershipsInput) (*chime.ListChannelMembershipsOutput, error) {
	var output chime.ListChannelMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelMembershipsAsync(ctx workflow.Context, input *chime.ListChannelMembershipsInput) *ListChannelMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMemberships", input)
	return &ListChannelMembershipsFuture{Future: future}
}

func (a *stub) ListChannelMembershipsForAppInstanceUser(ctx workflow.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error) {
	var output chime.ListChannelMembershipsForAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMembershipsForAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelMembershipsForAppInstanceUserAsync(ctx workflow.Context, input *chime.ListChannelMembershipsForAppInstanceUserInput) *ListChannelMembershipsForAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMembershipsForAppInstanceUser", input)
	return &ListChannelMembershipsForAppInstanceUserFuture{Future: future}
}

func (a *stub) ListChannelMessages(ctx workflow.Context, input *chime.ListChannelMessagesInput) (*chime.ListChannelMessagesOutput, error) {
	var output chime.ListChannelMessagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMessages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelMessagesAsync(ctx workflow.Context, input *chime.ListChannelMessagesInput) *ListChannelMessagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelMessages", input)
	return &ListChannelMessagesFuture{Future: future}
}

func (a *stub) ListChannelModerators(ctx workflow.Context, input *chime.ListChannelModeratorsInput) (*chime.ListChannelModeratorsOutput, error) {
	var output chime.ListChannelModeratorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelModerators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelModeratorsAsync(ctx workflow.Context, input *chime.ListChannelModeratorsInput) *ListChannelModeratorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelModerators", input)
	return &ListChannelModeratorsFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *chime.ListChannelsInput) (*chime.ListChannelsOutput, error) {
	var output chime.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *chime.ListChannelsInput) *ListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannels", input)
	return &ListChannelsFuture{Future: future}
}

func (a *stub) ListChannelsModeratedByAppInstanceUser(ctx workflow.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error) {
	var output chime.ListChannelsModeratedByAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelsModeratedByAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsModeratedByAppInstanceUserAsync(ctx workflow.Context, input *chime.ListChannelsModeratedByAppInstanceUserInput) *ListChannelsModeratedByAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListChannelsModeratedByAppInstanceUser", input)
	return &ListChannelsModeratedByAppInstanceUserFuture{Future: future}
}

func (a *stub) ListMeetingTags(ctx workflow.Context, input *chime.ListMeetingTagsInput) (*chime.ListMeetingTagsOutput, error) {
	var output chime.ListMeetingTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListMeetingTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMeetingTagsAsync(ctx workflow.Context, input *chime.ListMeetingTagsInput) *ListMeetingTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListMeetingTags", input)
	return &ListMeetingTagsFuture{Future: future}
}

func (a *stub) ListMeetings(ctx workflow.Context, input *chime.ListMeetingsInput) (*chime.ListMeetingsOutput, error) {
	var output chime.ListMeetingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListMeetings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMeetingsAsync(ctx workflow.Context, input *chime.ListMeetingsInput) *ListMeetingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListMeetings", input)
	return &ListMeetingsFuture{Future: future}
}

func (a *stub) ListPhoneNumberOrders(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) (*chime.ListPhoneNumberOrdersOutput, error) {
	var output chime.ListPhoneNumberOrdersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListPhoneNumberOrders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPhoneNumberOrdersAsync(ctx workflow.Context, input *chime.ListPhoneNumberOrdersInput) *ListPhoneNumberOrdersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListPhoneNumberOrders", input)
	return &ListPhoneNumberOrdersFuture{Future: future}
}

func (a *stub) ListPhoneNumbers(ctx workflow.Context, input *chime.ListPhoneNumbersInput) (*chime.ListPhoneNumbersOutput, error) {
	var output chime.ListPhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListPhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPhoneNumbersAsync(ctx workflow.Context, input *chime.ListPhoneNumbersInput) *ListPhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListPhoneNumbers", input)
	return &ListPhoneNumbersFuture{Future: future}
}

func (a *stub) ListProxySessions(ctx workflow.Context, input *chime.ListProxySessionsInput) (*chime.ListProxySessionsOutput, error) {
	var output chime.ListProxySessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListProxySessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProxySessionsAsync(ctx workflow.Context, input *chime.ListProxySessionsInput) *ListProxySessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListProxySessions", input)
	return &ListProxySessionsFuture{Future: future}
}

func (a *stub) ListRoomMemberships(ctx workflow.Context, input *chime.ListRoomMembershipsInput) (*chime.ListRoomMembershipsOutput, error) {
	var output chime.ListRoomMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListRoomMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoomMembershipsAsync(ctx workflow.Context, input *chime.ListRoomMembershipsInput) *ListRoomMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListRoomMemberships", input)
	return &ListRoomMembershipsFuture{Future: future}
}

func (a *stub) ListRooms(ctx workflow.Context, input *chime.ListRoomsInput) (*chime.ListRoomsOutput, error) {
	var output chime.ListRoomsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListRooms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoomsAsync(ctx workflow.Context, input *chime.ListRoomsInput) *ListRoomsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListRooms", input)
	return &ListRoomsFuture{Future: future}
}

func (a *stub) ListSipMediaApplications(ctx workflow.Context, input *chime.ListSipMediaApplicationsInput) (*chime.ListSipMediaApplicationsOutput, error) {
	var output chime.ListSipMediaApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListSipMediaApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSipMediaApplicationsAsync(ctx workflow.Context, input *chime.ListSipMediaApplicationsInput) *ListSipMediaApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListSipMediaApplications", input)
	return &ListSipMediaApplicationsFuture{Future: future}
}

func (a *stub) ListSipRules(ctx workflow.Context, input *chime.ListSipRulesInput) (*chime.ListSipRulesOutput, error) {
	var output chime.ListSipRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListSipRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSipRulesAsync(ctx workflow.Context, input *chime.ListSipRulesInput) *ListSipRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListSipRules", input)
	return &ListSipRulesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *chime.ListTagsForResourceInput) (*chime.ListTagsForResourceOutput, error) {
	var output chime.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *chime.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *chime.ListUsersInput) (*chime.ListUsersOutput, error) {
	var output chime.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *chime.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) ListVoiceConnectorGroups(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) (*chime.ListVoiceConnectorGroupsOutput, error) {
	var output chime.ListVoiceConnectorGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectorGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVoiceConnectorGroupsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorGroupsInput) *ListVoiceConnectorGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectorGroups", input)
	return &ListVoiceConnectorGroupsFuture{Future: future}
}

func (a *stub) ListVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.ListVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorTerminationCredentialsInput) *ListVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectorTerminationCredentials", input)
	return &ListVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *stub) ListVoiceConnectors(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) (*chime.ListVoiceConnectorsOutput, error) {
	var output chime.ListVoiceConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVoiceConnectorsAsync(ctx workflow.Context, input *chime.ListVoiceConnectorsInput) *ListVoiceConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ListVoiceConnectors", input)
	return &ListVoiceConnectorsFuture{Future: future}
}

func (a *stub) LogoutUser(ctx workflow.Context, input *chime.LogoutUserInput) (*chime.LogoutUserOutput, error) {
	var output chime.LogoutUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-LogoutUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LogoutUserAsync(ctx workflow.Context, input *chime.LogoutUserInput) *LogoutUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-LogoutUser", input)
	return &LogoutUserFuture{Future: future}
}

func (a *stub) PutAppInstanceRetentionSettings(ctx workflow.Context, input *chime.PutAppInstanceRetentionSettingsInput) (*chime.PutAppInstanceRetentionSettingsOutput, error) {
	var output chime.PutAppInstanceRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutAppInstanceRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppInstanceRetentionSettingsAsync(ctx workflow.Context, input *chime.PutAppInstanceRetentionSettingsInput) *PutAppInstanceRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutAppInstanceRetentionSettings", input)
	return &PutAppInstanceRetentionSettingsFuture{Future: future}
}

func (a *stub) PutAppInstanceStreamingConfigurations(ctx workflow.Context, input *chime.PutAppInstanceStreamingConfigurationsInput) (*chime.PutAppInstanceStreamingConfigurationsOutput, error) {
	var output chime.PutAppInstanceStreamingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutAppInstanceStreamingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppInstanceStreamingConfigurationsAsync(ctx workflow.Context, input *chime.PutAppInstanceStreamingConfigurationsInput) *PutAppInstanceStreamingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutAppInstanceStreamingConfigurations", input)
	return &PutAppInstanceStreamingConfigurationsFuture{Future: future}
}

func (a *stub) PutEventsConfiguration(ctx workflow.Context, input *chime.PutEventsConfigurationInput) (*chime.PutEventsConfigurationOutput, error) {
	var output chime.PutEventsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutEventsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEventsConfigurationAsync(ctx workflow.Context, input *chime.PutEventsConfigurationInput) *PutEventsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutEventsConfiguration", input)
	return &PutEventsConfigurationFuture{Future: future}
}

func (a *stub) PutRetentionSettings(ctx workflow.Context, input *chime.PutRetentionSettingsInput) (*chime.PutRetentionSettingsOutput, error) {
	var output chime.PutRetentionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutRetentionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionSettingsAsync(ctx workflow.Context, input *chime.PutRetentionSettingsInput) *PutRetentionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutRetentionSettings", input)
	return &PutRetentionSettingsFuture{Future: future}
}

func (a *stub) PutSipMediaApplicationLoggingConfiguration(ctx workflow.Context, input *chime.PutSipMediaApplicationLoggingConfigurationInput) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	var output chime.PutSipMediaApplicationLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutSipMediaApplicationLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSipMediaApplicationLoggingConfigurationAsync(ctx workflow.Context, input *chime.PutSipMediaApplicationLoggingConfigurationInput) *PutSipMediaApplicationLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutSipMediaApplicationLoggingConfiguration", input)
	return &PutSipMediaApplicationLoggingConfigurationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorEmergencyCallingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorEmergencyCallingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorEmergencyCallingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorEmergencyCallingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorEmergencyCallingConfigurationInput) *PutVoiceConnectorEmergencyCallingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorEmergencyCallingConfiguration", input)
	return &PutVoiceConnectorEmergencyCallingConfigurationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorLoggingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorLoggingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorLoggingConfigurationInput) *PutVoiceConnectorLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorLoggingConfiguration", input)
	return &PutVoiceConnectorLoggingConfigurationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorOrigination(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) (*chime.PutVoiceConnectorOriginationOutput, error) {
	var output chime.PutVoiceConnectorOriginationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorOrigination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorOriginationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorOriginationInput) *PutVoiceConnectorOriginationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorOrigination", input)
	return &PutVoiceConnectorOriginationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorProxy(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) (*chime.PutVoiceConnectorProxyOutput, error) {
	var output chime.PutVoiceConnectorProxyOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorProxy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorProxyAsync(ctx workflow.Context, input *chime.PutVoiceConnectorProxyInput) *PutVoiceConnectorProxyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorProxy", input)
	return &PutVoiceConnectorProxyFuture{Future: future}
}

func (a *stub) PutVoiceConnectorStreamingConfiguration(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	var output chime.PutVoiceConnectorStreamingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorStreamingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorStreamingConfigurationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorStreamingConfigurationInput) *PutVoiceConnectorStreamingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorStreamingConfiguration", input)
	return &PutVoiceConnectorStreamingConfigurationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorTermination(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) (*chime.PutVoiceConnectorTerminationOutput, error) {
	var output chime.PutVoiceConnectorTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorTerminationAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationInput) *PutVoiceConnectorTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorTermination", input)
	return &PutVoiceConnectorTerminationFuture{Future: future}
}

func (a *stub) PutVoiceConnectorTerminationCredentials(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	var output chime.PutVoiceConnectorTerminationCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorTerminationCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutVoiceConnectorTerminationCredentialsAsync(ctx workflow.Context, input *chime.PutVoiceConnectorTerminationCredentialsInput) *PutVoiceConnectorTerminationCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-PutVoiceConnectorTerminationCredentials", input)
	return &PutVoiceConnectorTerminationCredentialsFuture{Future: future}
}

func (a *stub) RedactChannelMessage(ctx workflow.Context, input *chime.RedactChannelMessageInput) (*chime.RedactChannelMessageOutput, error) {
	var output chime.RedactChannelMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-RedactChannelMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RedactChannelMessageAsync(ctx workflow.Context, input *chime.RedactChannelMessageInput) *RedactChannelMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-RedactChannelMessage", input)
	return &RedactChannelMessageFuture{Future: future}
}

func (a *stub) RedactConversationMessage(ctx workflow.Context, input *chime.RedactConversationMessageInput) (*chime.RedactConversationMessageOutput, error) {
	var output chime.RedactConversationMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-RedactConversationMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RedactConversationMessageAsync(ctx workflow.Context, input *chime.RedactConversationMessageInput) *RedactConversationMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-RedactConversationMessage", input)
	return &RedactConversationMessageFuture{Future: future}
}

func (a *stub) RedactRoomMessage(ctx workflow.Context, input *chime.RedactRoomMessageInput) (*chime.RedactRoomMessageOutput, error) {
	var output chime.RedactRoomMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-RedactRoomMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RedactRoomMessageAsync(ctx workflow.Context, input *chime.RedactRoomMessageInput) *RedactRoomMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-RedactRoomMessage", input)
	return &RedactRoomMessageFuture{Future: future}
}

func (a *stub) RegenerateSecurityToken(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) (*chime.RegenerateSecurityTokenOutput, error) {
	var output chime.RegenerateSecurityTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-RegenerateSecurityToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegenerateSecurityTokenAsync(ctx workflow.Context, input *chime.RegenerateSecurityTokenInput) *RegenerateSecurityTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-RegenerateSecurityToken", input)
	return &RegenerateSecurityTokenFuture{Future: future}
}

func (a *stub) ResetPersonalPIN(ctx workflow.Context, input *chime.ResetPersonalPINInput) (*chime.ResetPersonalPINOutput, error) {
	var output chime.ResetPersonalPINOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-ResetPersonalPIN", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetPersonalPINAsync(ctx workflow.Context, input *chime.ResetPersonalPINInput) *ResetPersonalPINFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-ResetPersonalPIN", input)
	return &ResetPersonalPINFuture{Future: future}
}

func (a *stub) RestorePhoneNumber(ctx workflow.Context, input *chime.RestorePhoneNumberInput) (*chime.RestorePhoneNumberOutput, error) {
	var output chime.RestorePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-RestorePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestorePhoneNumberAsync(ctx workflow.Context, input *chime.RestorePhoneNumberInput) *RestorePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-RestorePhoneNumber", input)
	return &RestorePhoneNumberFuture{Future: future}
}

func (a *stub) SearchAvailablePhoneNumbers(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	var output chime.SearchAvailablePhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-SearchAvailablePhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAvailablePhoneNumbersAsync(ctx workflow.Context, input *chime.SearchAvailablePhoneNumbersInput) *SearchAvailablePhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-SearchAvailablePhoneNumbers", input)
	return &SearchAvailablePhoneNumbersFuture{Future: future}
}

func (a *stub) SendChannelMessage(ctx workflow.Context, input *chime.SendChannelMessageInput) (*chime.SendChannelMessageOutput, error) {
	var output chime.SendChannelMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-SendChannelMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendChannelMessageAsync(ctx workflow.Context, input *chime.SendChannelMessageInput) *SendChannelMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-SendChannelMessage", input)
	return &SendChannelMessageFuture{Future: future}
}

func (a *stub) TagAttendee(ctx workflow.Context, input *chime.TagAttendeeInput) (*chime.TagAttendeeOutput, error) {
	var output chime.TagAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-TagAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagAttendeeAsync(ctx workflow.Context, input *chime.TagAttendeeInput) *TagAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-TagAttendee", input)
	return &TagAttendeeFuture{Future: future}
}

func (a *stub) TagMeeting(ctx workflow.Context, input *chime.TagMeetingInput) (*chime.TagMeetingOutput, error) {
	var output chime.TagMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-TagMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagMeetingAsync(ctx workflow.Context, input *chime.TagMeetingInput) *TagMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-TagMeeting", input)
	return &TagMeetingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *chime.TagResourceInput) (*chime.TagResourceOutput, error) {
	var output chime.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *chime.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagAttendee(ctx workflow.Context, input *chime.UntagAttendeeInput) (*chime.UntagAttendeeOutput, error) {
	var output chime.UntagAttendeeOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UntagAttendee", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagAttendeeAsync(ctx workflow.Context, input *chime.UntagAttendeeInput) *UntagAttendeeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UntagAttendee", input)
	return &UntagAttendeeFuture{Future: future}
}

func (a *stub) UntagMeeting(ctx workflow.Context, input *chime.UntagMeetingInput) (*chime.UntagMeetingOutput, error) {
	var output chime.UntagMeetingOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UntagMeeting", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagMeetingAsync(ctx workflow.Context, input *chime.UntagMeetingInput) *UntagMeetingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UntagMeeting", input)
	return &UntagMeetingFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *chime.UntagResourceInput) (*chime.UntagResourceOutput, error) {
	var output chime.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *chime.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccount(ctx workflow.Context, input *chime.UpdateAccountInput) (*chime.UpdateAccountOutput, error) {
	var output chime.UpdateAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountAsync(ctx workflow.Context, input *chime.UpdateAccountInput) *UpdateAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAccount", input)
	return &UpdateAccountFuture{Future: future}
}

func (a *stub) UpdateAccountSettings(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) (*chime.UpdateAccountSettingsOutput, error) {
	var output chime.UpdateAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountSettingsAsync(ctx workflow.Context, input *chime.UpdateAccountSettingsInput) *UpdateAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAccountSettings", input)
	return &UpdateAccountSettingsFuture{Future: future}
}

func (a *stub) UpdateAppInstance(ctx workflow.Context, input *chime.UpdateAppInstanceInput) (*chime.UpdateAppInstanceOutput, error) {
	var output chime.UpdateAppInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAppInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppInstanceAsync(ctx workflow.Context, input *chime.UpdateAppInstanceInput) *UpdateAppInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAppInstance", input)
	return &UpdateAppInstanceFuture{Future: future}
}

func (a *stub) UpdateAppInstanceUser(ctx workflow.Context, input *chime.UpdateAppInstanceUserInput) (*chime.UpdateAppInstanceUserOutput, error) {
	var output chime.UpdateAppInstanceUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAppInstanceUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppInstanceUserAsync(ctx workflow.Context, input *chime.UpdateAppInstanceUserInput) *UpdateAppInstanceUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateAppInstanceUser", input)
	return &UpdateAppInstanceUserFuture{Future: future}
}

func (a *stub) UpdateBot(ctx workflow.Context, input *chime.UpdateBotInput) (*chime.UpdateBotOutput, error) {
	var output chime.UpdateBotOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateBot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBotAsync(ctx workflow.Context, input *chime.UpdateBotInput) *UpdateBotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateBot", input)
	return &UpdateBotFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *chime.UpdateChannelInput) (*chime.UpdateChannelOutput, error) {
	var output chime.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *chime.UpdateChannelInput) *UpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannel", input)
	return &UpdateChannelFuture{Future: future}
}

func (a *stub) UpdateChannelMessage(ctx workflow.Context, input *chime.UpdateChannelMessageInput) (*chime.UpdateChannelMessageOutput, error) {
	var output chime.UpdateChannelMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannelMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelMessageAsync(ctx workflow.Context, input *chime.UpdateChannelMessageInput) *UpdateChannelMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannelMessage", input)
	return &UpdateChannelMessageFuture{Future: future}
}

func (a *stub) UpdateChannelReadMarker(ctx workflow.Context, input *chime.UpdateChannelReadMarkerInput) (*chime.UpdateChannelReadMarkerOutput, error) {
	var output chime.UpdateChannelReadMarkerOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannelReadMarker", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelReadMarkerAsync(ctx workflow.Context, input *chime.UpdateChannelReadMarkerInput) *UpdateChannelReadMarkerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateChannelReadMarker", input)
	return &UpdateChannelReadMarkerFuture{Future: future}
}

func (a *stub) UpdateGlobalSettings(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) (*chime.UpdateGlobalSettingsOutput, error) {
	var output chime.UpdateGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalSettingsAsync(ctx workflow.Context, input *chime.UpdateGlobalSettingsInput) *UpdateGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateGlobalSettings", input)
	return &UpdateGlobalSettingsFuture{Future: future}
}

func (a *stub) UpdatePhoneNumber(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) (*chime.UpdatePhoneNumberOutput, error) {
	var output chime.UpdatePhoneNumberOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdatePhoneNumber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePhoneNumberAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberInput) *UpdatePhoneNumberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdatePhoneNumber", input)
	return &UpdatePhoneNumberFuture{Future: future}
}

func (a *stub) UpdatePhoneNumberSettings(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	var output chime.UpdatePhoneNumberSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdatePhoneNumberSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePhoneNumberSettingsAsync(ctx workflow.Context, input *chime.UpdatePhoneNumberSettingsInput) *UpdatePhoneNumberSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdatePhoneNumberSettings", input)
	return &UpdatePhoneNumberSettingsFuture{Future: future}
}

func (a *stub) UpdateProxySession(ctx workflow.Context, input *chime.UpdateProxySessionInput) (*chime.UpdateProxySessionOutput, error) {
	var output chime.UpdateProxySessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateProxySession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProxySessionAsync(ctx workflow.Context, input *chime.UpdateProxySessionInput) *UpdateProxySessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateProxySession", input)
	return &UpdateProxySessionFuture{Future: future}
}

func (a *stub) UpdateRoom(ctx workflow.Context, input *chime.UpdateRoomInput) (*chime.UpdateRoomOutput, error) {
	var output chime.UpdateRoomOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateRoom", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoomAsync(ctx workflow.Context, input *chime.UpdateRoomInput) *UpdateRoomFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateRoom", input)
	return &UpdateRoomFuture{Future: future}
}

func (a *stub) UpdateRoomMembership(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) (*chime.UpdateRoomMembershipOutput, error) {
	var output chime.UpdateRoomMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateRoomMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoomMembershipAsync(ctx workflow.Context, input *chime.UpdateRoomMembershipInput) *UpdateRoomMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateRoomMembership", input)
	return &UpdateRoomMembershipFuture{Future: future}
}

func (a *stub) UpdateSipMediaApplication(ctx workflow.Context, input *chime.UpdateSipMediaApplicationInput) (*chime.UpdateSipMediaApplicationOutput, error) {
	var output chime.UpdateSipMediaApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateSipMediaApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSipMediaApplicationAsync(ctx workflow.Context, input *chime.UpdateSipMediaApplicationInput) *UpdateSipMediaApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateSipMediaApplication", input)
	return &UpdateSipMediaApplicationFuture{Future: future}
}

func (a *stub) UpdateSipRule(ctx workflow.Context, input *chime.UpdateSipRuleInput) (*chime.UpdateSipRuleOutput, error) {
	var output chime.UpdateSipRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateSipRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSipRuleAsync(ctx workflow.Context, input *chime.UpdateSipRuleInput) *UpdateSipRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateSipRule", input)
	return &UpdateSipRuleFuture{Future: future}
}

func (a *stub) UpdateUser(ctx workflow.Context, input *chime.UpdateUserInput) (*chime.UpdateUserOutput, error) {
	var output chime.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAsync(ctx workflow.Context, input *chime.UpdateUserInput) *UpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateUser", input)
	return &UpdateUserFuture{Future: future}
}

func (a *stub) UpdateUserSettings(ctx workflow.Context, input *chime.UpdateUserSettingsInput) (*chime.UpdateUserSettingsOutput, error) {
	var output chime.UpdateUserSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateUserSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserSettingsAsync(ctx workflow.Context, input *chime.UpdateUserSettingsInput) *UpdateUserSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateUserSettings", input)
	return &UpdateUserSettingsFuture{Future: future}
}

func (a *stub) UpdateVoiceConnector(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) (*chime.UpdateVoiceConnectorOutput, error) {
	var output chime.UpdateVoiceConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateVoiceConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVoiceConnectorAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorInput) *UpdateVoiceConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateVoiceConnector", input)
	return &UpdateVoiceConnectorFuture{Future: future}
}

func (a *stub) UpdateVoiceConnectorGroup(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	var output chime.UpdateVoiceConnectorGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-chime-UpdateVoiceConnectorGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVoiceConnectorGroupAsync(ctx workflow.Context, input *chime.UpdateVoiceConnectorGroupInput) *UpdateVoiceConnectorGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-chime-UpdateVoiceConnectorGroup", input)
	return &UpdateVoiceConnectorGroupFuture{Future: future}
}
