// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cloudwatchstub

import (
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloudWatchDeleteAlarmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDeleteAlarmsFuture) Get(ctx workflow.Context) (*cloudwatch.DeleteAlarmsOutput, error) {
	var output cloudwatch.DeleteAlarmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDeleteAnomalyDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDeleteAnomalyDetectorFuture) Get(ctx workflow.Context) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	var output cloudwatch.DeleteAnomalyDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDeleteDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDeleteDashboardsFuture) Get(ctx workflow.Context) (*cloudwatch.DeleteDashboardsOutput, error) {
	var output cloudwatch.DeleteDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDeleteInsightRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDeleteInsightRulesFuture) Get(ctx workflow.Context) (*cloudwatch.DeleteInsightRulesOutput, error) {
	var output cloudwatch.DeleteInsightRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDescribeAlarmHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDescribeAlarmHistoryFuture) Get(ctx workflow.Context) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	var output cloudwatch.DescribeAlarmHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDescribeAlarmsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDescribeAlarmsFuture) Get(ctx workflow.Context) (*cloudwatch.DescribeAlarmsOutput, error) {
	var output cloudwatch.DescribeAlarmsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDescribeAlarmsForMetricFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDescribeAlarmsForMetricFuture) Get(ctx workflow.Context) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	var output cloudwatch.DescribeAlarmsForMetricOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDescribeAnomalyDetectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDescribeAnomalyDetectorsFuture) Get(ctx workflow.Context) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	var output cloudwatch.DescribeAnomalyDetectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDescribeInsightRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDescribeInsightRulesFuture) Get(ctx workflow.Context) (*cloudwatch.DescribeInsightRulesOutput, error) {
	var output cloudwatch.DescribeInsightRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDisableAlarmActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDisableAlarmActionsFuture) Get(ctx workflow.Context) (*cloudwatch.DisableAlarmActionsOutput, error) {
	var output cloudwatch.DisableAlarmActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchDisableInsightRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchDisableInsightRulesFuture) Get(ctx workflow.Context) (*cloudwatch.DisableInsightRulesOutput, error) {
	var output cloudwatch.DisableInsightRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchEnableAlarmActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchEnableAlarmActionsFuture) Get(ctx workflow.Context) (*cloudwatch.EnableAlarmActionsOutput, error) {
	var output cloudwatch.EnableAlarmActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchEnableInsightRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchEnableInsightRulesFuture) Get(ctx workflow.Context) (*cloudwatch.EnableInsightRulesOutput, error) {
	var output cloudwatch.EnableInsightRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchGetDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchGetDashboardFuture) Get(ctx workflow.Context) (*cloudwatch.GetDashboardOutput, error) {
	var output cloudwatch.GetDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchGetInsightRuleReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchGetInsightRuleReportFuture) Get(ctx workflow.Context) (*cloudwatch.GetInsightRuleReportOutput, error) {
	var output cloudwatch.GetInsightRuleReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchGetMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchGetMetricDataFuture) Get(ctx workflow.Context) (*cloudwatch.GetMetricDataOutput, error) {
	var output cloudwatch.GetMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchGetMetricStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchGetMetricStatisticsFuture) Get(ctx workflow.Context) (*cloudwatch.GetMetricStatisticsOutput, error) {
	var output cloudwatch.GetMetricStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchGetMetricWidgetImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchGetMetricWidgetImageFuture) Get(ctx workflow.Context) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	var output cloudwatch.GetMetricWidgetImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchListDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchListDashboardsFuture) Get(ctx workflow.Context) (*cloudwatch.ListDashboardsOutput, error) {
	var output cloudwatch.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchListMetricsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchListMetricsFuture) Get(ctx workflow.Context) (*cloudwatch.ListMetricsOutput, error) {
	var output cloudwatch.ListMetricsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudwatch.ListTagsForResourceOutput, error) {
	var output cloudwatch.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutAnomalyDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutAnomalyDetectorFuture) Get(ctx workflow.Context) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	var output cloudwatch.PutAnomalyDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutCompositeAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutCompositeAlarmFuture) Get(ctx workflow.Context) (*cloudwatch.PutCompositeAlarmOutput, error) {
	var output cloudwatch.PutCompositeAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutDashboardFuture) Get(ctx workflow.Context) (*cloudwatch.PutDashboardOutput, error) {
	var output cloudwatch.PutDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutInsightRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutInsightRuleFuture) Get(ctx workflow.Context) (*cloudwatch.PutInsightRuleOutput, error) {
	var output cloudwatch.PutInsightRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutMetricAlarmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutMetricAlarmFuture) Get(ctx workflow.Context) (*cloudwatch.PutMetricAlarmOutput, error) {
	var output cloudwatch.PutMetricAlarmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchPutMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchPutMetricDataFuture) Get(ctx workflow.Context) (*cloudwatch.PutMetricDataOutput, error) {
	var output cloudwatch.PutMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchSetAlarmStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchSetAlarmStateFuture) Get(ctx workflow.Context) (*cloudwatch.SetAlarmStateOutput, error) {
	var output cloudwatch.SetAlarmStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchTagResourceFuture) Get(ctx workflow.Context) (*cloudwatch.TagResourceOutput, error) {
	var output cloudwatch.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudWatchUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudWatchUntagResourceFuture) Get(ctx workflow.Context) (*cloudwatch.UntagResourceOutput, error) {
	var output cloudwatch.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlarms(ctx workflow.Context, input *cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error) {
	var output cloudwatch.DeleteAlarmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteAlarms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAlarmsAsync(ctx workflow.Context, input *cloudwatch.DeleteAlarmsInput) *CloudWatchDeleteAlarmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteAlarms", input)
	return &CloudWatchDeleteAlarmsFuture{Future: future}
}

func (a *stub) DeleteAnomalyDetector(ctx workflow.Context, input *cloudwatch.DeleteAnomalyDetectorInput) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	var output cloudwatch.DeleteAnomalyDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteAnomalyDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnomalyDetectorAsync(ctx workflow.Context, input *cloudwatch.DeleteAnomalyDetectorInput) *CloudWatchDeleteAnomalyDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteAnomalyDetector", input)
	return &CloudWatchDeleteAnomalyDetectorFuture{Future: future}
}

func (a *stub) DeleteDashboards(ctx workflow.Context, input *cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error) {
	var output cloudwatch.DeleteDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDashboardsAsync(ctx workflow.Context, input *cloudwatch.DeleteDashboardsInput) *CloudWatchDeleteDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteDashboards", input)
	return &CloudWatchDeleteDashboardsFuture{Future: future}
}

func (a *stub) DeleteInsightRules(ctx workflow.Context, input *cloudwatch.DeleteInsightRulesInput) (*cloudwatch.DeleteInsightRulesOutput, error) {
	var output cloudwatch.DeleteInsightRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteInsightRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInsightRulesAsync(ctx workflow.Context, input *cloudwatch.DeleteInsightRulesInput) *CloudWatchDeleteInsightRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DeleteInsightRules", input)
	return &CloudWatchDeleteInsightRulesFuture{Future: future}
}

func (a *stub) DescribeAlarmHistory(ctx workflow.Context, input *cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	var output cloudwatch.DescribeAlarmHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarmHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlarmHistoryAsync(ctx workflow.Context, input *cloudwatch.DescribeAlarmHistoryInput) *CloudWatchDescribeAlarmHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarmHistory", input)
	return &CloudWatchDescribeAlarmHistoryFuture{Future: future}
}

func (a *stub) DescribeAlarms(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error) {
	var output cloudwatch.DescribeAlarmsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlarmsAsync(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) *CloudWatchDescribeAlarmsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarms", input)
	return &CloudWatchDescribeAlarmsFuture{Future: future}
}

func (a *stub) DescribeAlarmsForMetric(ctx workflow.Context, input *cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	var output cloudwatch.DescribeAlarmsForMetricOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarmsForMetric", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAlarmsForMetricAsync(ctx workflow.Context, input *cloudwatch.DescribeAlarmsForMetricInput) *CloudWatchDescribeAlarmsForMetricFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAlarmsForMetric", input)
	return &CloudWatchDescribeAlarmsForMetricFuture{Future: future}
}

func (a *stub) DescribeAnomalyDetectors(ctx workflow.Context, input *cloudwatch.DescribeAnomalyDetectorsInput) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	var output cloudwatch.DescribeAnomalyDetectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAnomalyDetectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAnomalyDetectorsAsync(ctx workflow.Context, input *cloudwatch.DescribeAnomalyDetectorsInput) *CloudWatchDescribeAnomalyDetectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeAnomalyDetectors", input)
	return &CloudWatchDescribeAnomalyDetectorsFuture{Future: future}
}

func (a *stub) DescribeInsightRules(ctx workflow.Context, input *cloudwatch.DescribeInsightRulesInput) (*cloudwatch.DescribeInsightRulesOutput, error) {
	var output cloudwatch.DescribeInsightRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeInsightRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInsightRulesAsync(ctx workflow.Context, input *cloudwatch.DescribeInsightRulesInput) *CloudWatchDescribeInsightRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DescribeInsightRules", input)
	return &CloudWatchDescribeInsightRulesFuture{Future: future}
}

func (a *stub) DisableAlarmActions(ctx workflow.Context, input *cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error) {
	var output cloudwatch.DisableAlarmActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DisableAlarmActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAlarmActionsAsync(ctx workflow.Context, input *cloudwatch.DisableAlarmActionsInput) *CloudWatchDisableAlarmActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DisableAlarmActions", input)
	return &CloudWatchDisableAlarmActionsFuture{Future: future}
}

func (a *stub) DisableInsightRules(ctx workflow.Context, input *cloudwatch.DisableInsightRulesInput) (*cloudwatch.DisableInsightRulesOutput, error) {
	var output cloudwatch.DisableInsightRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DisableInsightRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableInsightRulesAsync(ctx workflow.Context, input *cloudwatch.DisableInsightRulesInput) *CloudWatchDisableInsightRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-DisableInsightRules", input)
	return &CloudWatchDisableInsightRulesFuture{Future: future}
}

func (a *stub) EnableAlarmActions(ctx workflow.Context, input *cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error) {
	var output cloudwatch.EnableAlarmActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-EnableAlarmActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAlarmActionsAsync(ctx workflow.Context, input *cloudwatch.EnableAlarmActionsInput) *CloudWatchEnableAlarmActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-EnableAlarmActions", input)
	return &CloudWatchEnableAlarmActionsFuture{Future: future}
}

func (a *stub) EnableInsightRules(ctx workflow.Context, input *cloudwatch.EnableInsightRulesInput) (*cloudwatch.EnableInsightRulesOutput, error) {
	var output cloudwatch.EnableInsightRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-EnableInsightRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableInsightRulesAsync(ctx workflow.Context, input *cloudwatch.EnableInsightRulesInput) *CloudWatchEnableInsightRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-EnableInsightRules", input)
	return &CloudWatchEnableInsightRulesFuture{Future: future}
}

func (a *stub) GetDashboard(ctx workflow.Context, input *cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error) {
	var output cloudwatch.GetDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDashboardAsync(ctx workflow.Context, input *cloudwatch.GetDashboardInput) *CloudWatchGetDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetDashboard", input)
	return &CloudWatchGetDashboardFuture{Future: future}
}

func (a *stub) GetInsightRuleReport(ctx workflow.Context, input *cloudwatch.GetInsightRuleReportInput) (*cloudwatch.GetInsightRuleReportOutput, error) {
	var output cloudwatch.GetInsightRuleReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetInsightRuleReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInsightRuleReportAsync(ctx workflow.Context, input *cloudwatch.GetInsightRuleReportInput) *CloudWatchGetInsightRuleReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetInsightRuleReport", input)
	return &CloudWatchGetInsightRuleReportFuture{Future: future}
}

func (a *stub) GetMetricData(ctx workflow.Context, input *cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error) {
	var output cloudwatch.GetMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricDataAsync(ctx workflow.Context, input *cloudwatch.GetMetricDataInput) *CloudWatchGetMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricData", input)
	return &CloudWatchGetMetricDataFuture{Future: future}
}

func (a *stub) GetMetricStatistics(ctx workflow.Context, input *cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error) {
	var output cloudwatch.GetMetricStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricStatisticsAsync(ctx workflow.Context, input *cloudwatch.GetMetricStatisticsInput) *CloudWatchGetMetricStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricStatistics", input)
	return &CloudWatchGetMetricStatisticsFuture{Future: future}
}

func (a *stub) GetMetricWidgetImage(ctx workflow.Context, input *cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	var output cloudwatch.GetMetricWidgetImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricWidgetImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricWidgetImageAsync(ctx workflow.Context, input *cloudwatch.GetMetricWidgetImageInput) *CloudWatchGetMetricWidgetImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-GetMetricWidgetImage", input)
	return &CloudWatchGetMetricWidgetImageFuture{Future: future}
}

func (a *stub) ListDashboards(ctx workflow.Context, input *cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error) {
	var output cloudwatch.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDashboardsAsync(ctx workflow.Context, input *cloudwatch.ListDashboardsInput) *CloudWatchListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListDashboards", input)
	return &CloudWatchListDashboardsFuture{Future: future}
}

func (a *stub) ListMetrics(ctx workflow.Context, input *cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error) {
	var output cloudwatch.ListMetricsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListMetrics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMetricsAsync(ctx workflow.Context, input *cloudwatch.ListMetricsInput) *CloudWatchListMetricsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListMetrics", input)
	return &CloudWatchListMetricsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *cloudwatch.ListTagsForResourceInput) (*cloudwatch.ListTagsForResourceOutput, error) {
	var output cloudwatch.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudwatch.ListTagsForResourceInput) *CloudWatchListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-ListTagsForResource", input)
	return &CloudWatchListTagsForResourceFuture{Future: future}
}

func (a *stub) PutAnomalyDetector(ctx workflow.Context, input *cloudwatch.PutAnomalyDetectorInput) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	var output cloudwatch.PutAnomalyDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutAnomalyDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAnomalyDetectorAsync(ctx workflow.Context, input *cloudwatch.PutAnomalyDetectorInput) *CloudWatchPutAnomalyDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutAnomalyDetector", input)
	return &CloudWatchPutAnomalyDetectorFuture{Future: future}
}

func (a *stub) PutCompositeAlarm(ctx workflow.Context, input *cloudwatch.PutCompositeAlarmInput) (*cloudwatch.PutCompositeAlarmOutput, error) {
	var output cloudwatch.PutCompositeAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutCompositeAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutCompositeAlarmAsync(ctx workflow.Context, input *cloudwatch.PutCompositeAlarmInput) *CloudWatchPutCompositeAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutCompositeAlarm", input)
	return &CloudWatchPutCompositeAlarmFuture{Future: future}
}

func (a *stub) PutDashboard(ctx workflow.Context, input *cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error) {
	var output cloudwatch.PutDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDashboardAsync(ctx workflow.Context, input *cloudwatch.PutDashboardInput) *CloudWatchPutDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutDashboard", input)
	return &CloudWatchPutDashboardFuture{Future: future}
}

func (a *stub) PutInsightRule(ctx workflow.Context, input *cloudwatch.PutInsightRuleInput) (*cloudwatch.PutInsightRuleOutput, error) {
	var output cloudwatch.PutInsightRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutInsightRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInsightRuleAsync(ctx workflow.Context, input *cloudwatch.PutInsightRuleInput) *CloudWatchPutInsightRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutInsightRule", input)
	return &CloudWatchPutInsightRuleFuture{Future: future}
}

func (a *stub) PutMetricAlarm(ctx workflow.Context, input *cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error) {
	var output cloudwatch.PutMetricAlarmOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutMetricAlarm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMetricAlarmAsync(ctx workflow.Context, input *cloudwatch.PutMetricAlarmInput) *CloudWatchPutMetricAlarmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutMetricAlarm", input)
	return &CloudWatchPutMetricAlarmFuture{Future: future}
}

func (a *stub) PutMetricData(ctx workflow.Context, input *cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error) {
	var output cloudwatch.PutMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMetricDataAsync(ctx workflow.Context, input *cloudwatch.PutMetricDataInput) *CloudWatchPutMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-PutMetricData", input)
	return &CloudWatchPutMetricDataFuture{Future: future}
}

func (a *stub) SetAlarmState(ctx workflow.Context, input *cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error) {
	var output cloudwatch.SetAlarmStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-SetAlarmState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetAlarmStateAsync(ctx workflow.Context, input *cloudwatch.SetAlarmStateInput) *CloudWatchSetAlarmStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-SetAlarmState", input)
	return &CloudWatchSetAlarmStateFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cloudwatch.TagResourceInput) (*cloudwatch.TagResourceOutput, error) {
	var output cloudwatch.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cloudwatch.TagResourceInput) *CloudWatchTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-TagResource", input)
	return &CloudWatchTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cloudwatch.UntagResourceInput) (*cloudwatch.UntagResourceOutput, error) {
	var output cloudwatch.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudwatch-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cloudwatch.UntagResourceInput) *CloudWatchUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-UntagResource", input)
	return &CloudWatchUntagResourceFuture{Future: future}
}

func (a *stub) WaitUntilAlarmExists(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudwatch-WaitUntilAlarmExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAlarmExistsAsync(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-WaitUntilAlarmExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilCompositeAlarmExists(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-cloudwatch-WaitUntilCompositeAlarmExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCompositeAlarmExistsAsync(ctx workflow.Context, input *cloudwatch.DescribeAlarmsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudwatch-WaitUntilCompositeAlarmExists", input)
	return clients.NewVoidFuture(future)
}
