// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appintegrationsservicestub

import (
	"github.com/aws/aws-sdk-go/service/appintegrationsservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CreateEventIntegration(ctx workflow.Context, input *appintegrationsservice.CreateEventIntegrationInput) (*appintegrationsservice.CreateEventIntegrationOutput, error)
	CreateEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.CreateEventIntegrationInput) *CreateEventIntegrationFuture

	DeleteEventIntegration(ctx workflow.Context, input *appintegrationsservice.DeleteEventIntegrationInput) (*appintegrationsservice.DeleteEventIntegrationOutput, error)
	DeleteEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.DeleteEventIntegrationInput) *DeleteEventIntegrationFuture

	GetEventIntegration(ctx workflow.Context, input *appintegrationsservice.GetEventIntegrationInput) (*appintegrationsservice.GetEventIntegrationOutput, error)
	GetEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.GetEventIntegrationInput) *GetEventIntegrationFuture

	ListEventIntegrationAssociations(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationAssociationsInput) (*appintegrationsservice.ListEventIntegrationAssociationsOutput, error)
	ListEventIntegrationAssociationsAsync(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationAssociationsInput) *ListEventIntegrationAssociationsFuture

	ListEventIntegrations(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationsInput) (*appintegrationsservice.ListEventIntegrationsOutput, error)
	ListEventIntegrationsAsync(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationsInput) *ListEventIntegrationsFuture

	ListTagsForResource(ctx workflow.Context, input *appintegrationsservice.ListTagsForResourceInput) (*appintegrationsservice.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *appintegrationsservice.ListTagsForResourceInput) *ListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *appintegrationsservice.TagResourceInput) (*appintegrationsservice.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *appintegrationsservice.TagResourceInput) *TagResourceFuture

	UntagResource(ctx workflow.Context, input *appintegrationsservice.UntagResourceInput) (*appintegrationsservice.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *appintegrationsservice.UntagResourceInput) *UntagResourceFuture

	UpdateEventIntegration(ctx workflow.Context, input *appintegrationsservice.UpdateEventIntegrationInput) (*appintegrationsservice.UpdateEventIntegrationOutput, error)
	UpdateEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.UpdateEventIntegrationInput) *UpdateEventIntegrationFuture
}

func NewClient() Client {
	return &stub{}
}
