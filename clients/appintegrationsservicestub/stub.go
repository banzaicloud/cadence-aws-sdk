// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appintegrationsservicestub

import (
	"github.com/aws/aws-sdk-go/service/appintegrationsservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateEventIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEventIntegrationFuture) Get(ctx workflow.Context) (*appintegrationsservice.CreateEventIntegrationOutput, error) {
	var output appintegrationsservice.CreateEventIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEventIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEventIntegrationFuture) Get(ctx workflow.Context) (*appintegrationsservice.DeleteEventIntegrationOutput, error) {
	var output appintegrationsservice.DeleteEventIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEventIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEventIntegrationFuture) Get(ctx workflow.Context) (*appintegrationsservice.GetEventIntegrationOutput, error) {
	var output appintegrationsservice.GetEventIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventIntegrationAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventIntegrationAssociationsFuture) Get(ctx workflow.Context) (*appintegrationsservice.ListEventIntegrationAssociationsOutput, error) {
	var output appintegrationsservice.ListEventIntegrationAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventIntegrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventIntegrationsFuture) Get(ctx workflow.Context) (*appintegrationsservice.ListEventIntegrationsOutput, error) {
	var output appintegrationsservice.ListEventIntegrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appintegrationsservice.ListTagsForResourceOutput, error) {
	var output appintegrationsservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appintegrationsservice.TagResourceOutput, error) {
	var output appintegrationsservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appintegrationsservice.UntagResourceOutput, error) {
	var output appintegrationsservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEventIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEventIntegrationFuture) Get(ctx workflow.Context) (*appintegrationsservice.UpdateEventIntegrationOutput, error) {
	var output appintegrationsservice.UpdateEventIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventIntegration(ctx workflow.Context, input *appintegrationsservice.CreateEventIntegrationInput) (*appintegrationsservice.CreateEventIntegrationOutput, error) {
	var output appintegrationsservice.CreateEventIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-CreateEventIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.CreateEventIntegrationInput) *CreateEventIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-CreateEventIntegration", input)
	return &CreateEventIntegrationFuture{Future: future}
}

func (a *stub) DeleteEventIntegration(ctx workflow.Context, input *appintegrationsservice.DeleteEventIntegrationInput) (*appintegrationsservice.DeleteEventIntegrationOutput, error) {
	var output appintegrationsservice.DeleteEventIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-DeleteEventIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.DeleteEventIntegrationInput) *DeleteEventIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-DeleteEventIntegration", input)
	return &DeleteEventIntegrationFuture{Future: future}
}

func (a *stub) GetEventIntegration(ctx workflow.Context, input *appintegrationsservice.GetEventIntegrationInput) (*appintegrationsservice.GetEventIntegrationOutput, error) {
	var output appintegrationsservice.GetEventIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-GetEventIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.GetEventIntegrationInput) *GetEventIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-GetEventIntegration", input)
	return &GetEventIntegrationFuture{Future: future}
}

func (a *stub) ListEventIntegrationAssociations(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationAssociationsInput) (*appintegrationsservice.ListEventIntegrationAssociationsOutput, error) {
	var output appintegrationsservice.ListEventIntegrationAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListEventIntegrationAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventIntegrationAssociationsAsync(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationAssociationsInput) *ListEventIntegrationAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListEventIntegrationAssociations", input)
	return &ListEventIntegrationAssociationsFuture{Future: future}
}

func (a *stub) ListEventIntegrations(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationsInput) (*appintegrationsservice.ListEventIntegrationsOutput, error) {
	var output appintegrationsservice.ListEventIntegrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListEventIntegrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventIntegrationsAsync(ctx workflow.Context, input *appintegrationsservice.ListEventIntegrationsInput) *ListEventIntegrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListEventIntegrations", input)
	return &ListEventIntegrationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appintegrationsservice.ListTagsForResourceInput) (*appintegrationsservice.ListTagsForResourceOutput, error) {
	var output appintegrationsservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appintegrationsservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appintegrationsservice.TagResourceInput) (*appintegrationsservice.TagResourceOutput, error) {
	var output appintegrationsservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appintegrationsservice.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appintegrationsservice.UntagResourceInput) (*appintegrationsservice.UntagResourceOutput, error) {
	var output appintegrationsservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appintegrationsservice.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateEventIntegration(ctx workflow.Context, input *appintegrationsservice.UpdateEventIntegrationInput) (*appintegrationsservice.UpdateEventIntegrationOutput, error) {
	var output appintegrationsservice.UpdateEventIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-UpdateEventIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEventIntegrationAsync(ctx workflow.Context, input *appintegrationsservice.UpdateEventIntegrationInput) *UpdateEventIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appintegrationsservice-UpdateEventIntegration", input)
	return &UpdateEventIntegrationFuture{Future: future}
}
