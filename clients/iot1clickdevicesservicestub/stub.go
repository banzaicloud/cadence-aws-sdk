// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iot1clickdevicesservicestub

import (
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ClaimDevicesByClaimCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ClaimDevicesByClaimCodeFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error) {
	var output iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeviceFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.DescribeDeviceOutput, error) {
	var output iot1clickdevicesservice.DescribeDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FinalizeDeviceClaimFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FinalizeDeviceClaimFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error) {
	var output iot1clickdevicesservice.FinalizeDeviceClaimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceMethodsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceMethodsFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error) {
	var output iot1clickdevicesservice.GetDeviceMethodsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InitiateDeviceClaimFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InitiateDeviceClaimFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error) {
	var output iot1clickdevicesservice.InitiateDeviceClaimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InvokeDeviceMethodFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InvokeDeviceMethodFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error) {
	var output iot1clickdevicesservice.InvokeDeviceMethodOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceEventsFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.ListDeviceEventsOutput, error) {
	var output iot1clickdevicesservice.ListDeviceEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevicesFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.ListDevicesOutput, error) {
	var output iot1clickdevicesservice.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.ListTagsForResourceOutput, error) {
	var output iot1clickdevicesservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.TagResourceOutput, error) {
	var output iot1clickdevicesservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnclaimDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnclaimDeviceFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.UnclaimDeviceOutput, error) {
	var output iot1clickdevicesservice.UnclaimDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.UntagResourceOutput, error) {
	var output iot1clickdevicesservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeviceStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeviceStateFuture) Get(ctx workflow.Context) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error) {
	var output iot1clickdevicesservice.UpdateDeviceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ClaimDevicesByClaimCode(ctx workflow.Context, input *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error) {
	var output iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ClaimDevicesByClaimCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClaimDevicesByClaimCodeAsync(ctx workflow.Context, input *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput) *ClaimDevicesByClaimCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ClaimDevicesByClaimCode", input)
	return &ClaimDevicesByClaimCodeFuture{Future: future}
}

func (a *stub) DescribeDevice(ctx workflow.Context, input *iot1clickdevicesservice.DescribeDeviceInput) (*iot1clickdevicesservice.DescribeDeviceOutput, error) {
	var output iot1clickdevicesservice.DescribeDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-DescribeDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeviceAsync(ctx workflow.Context, input *iot1clickdevicesservice.DescribeDeviceInput) *DescribeDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-DescribeDevice", input)
	return &DescribeDeviceFuture{Future: future}
}

func (a *stub) FinalizeDeviceClaim(ctx workflow.Context, input *iot1clickdevicesservice.FinalizeDeviceClaimInput) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error) {
	var output iot1clickdevicesservice.FinalizeDeviceClaimOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-FinalizeDeviceClaim", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FinalizeDeviceClaimAsync(ctx workflow.Context, input *iot1clickdevicesservice.FinalizeDeviceClaimInput) *FinalizeDeviceClaimFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-FinalizeDeviceClaim", input)
	return &FinalizeDeviceClaimFuture{Future: future}
}

func (a *stub) GetDeviceMethods(ctx workflow.Context, input *iot1clickdevicesservice.GetDeviceMethodsInput) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error) {
	var output iot1clickdevicesservice.GetDeviceMethodsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-GetDeviceMethods", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceMethodsAsync(ctx workflow.Context, input *iot1clickdevicesservice.GetDeviceMethodsInput) *GetDeviceMethodsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-GetDeviceMethods", input)
	return &GetDeviceMethodsFuture{Future: future}
}

func (a *stub) InitiateDeviceClaim(ctx workflow.Context, input *iot1clickdevicesservice.InitiateDeviceClaimInput) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error) {
	var output iot1clickdevicesservice.InitiateDeviceClaimOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-InitiateDeviceClaim", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitiateDeviceClaimAsync(ctx workflow.Context, input *iot1clickdevicesservice.InitiateDeviceClaimInput) *InitiateDeviceClaimFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-InitiateDeviceClaim", input)
	return &InitiateDeviceClaimFuture{Future: future}
}

func (a *stub) InvokeDeviceMethod(ctx workflow.Context, input *iot1clickdevicesservice.InvokeDeviceMethodInput) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error) {
	var output iot1clickdevicesservice.InvokeDeviceMethodOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-InvokeDeviceMethod", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InvokeDeviceMethodAsync(ctx workflow.Context, input *iot1clickdevicesservice.InvokeDeviceMethodInput) *InvokeDeviceMethodFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-InvokeDeviceMethod", input)
	return &InvokeDeviceMethodFuture{Future: future}
}

func (a *stub) ListDeviceEvents(ctx workflow.Context, input *iot1clickdevicesservice.ListDeviceEventsInput) (*iot1clickdevicesservice.ListDeviceEventsOutput, error) {
	var output iot1clickdevicesservice.ListDeviceEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListDeviceEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceEventsAsync(ctx workflow.Context, input *iot1clickdevicesservice.ListDeviceEventsInput) *ListDeviceEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListDeviceEvents", input)
	return &ListDeviceEventsFuture{Future: future}
}

func (a *stub) ListDevices(ctx workflow.Context, input *iot1clickdevicesservice.ListDevicesInput) (*iot1clickdevicesservice.ListDevicesOutput, error) {
	var output iot1clickdevicesservice.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicesAsync(ctx workflow.Context, input *iot1clickdevicesservice.ListDevicesInput) *ListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListDevices", input)
	return &ListDevicesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iot1clickdevicesservice.ListTagsForResourceInput) (*iot1clickdevicesservice.ListTagsForResourceOutput, error) {
	var output iot1clickdevicesservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iot1clickdevicesservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iot1clickdevicesservice.TagResourceInput) (*iot1clickdevicesservice.TagResourceOutput, error) {
	var output iot1clickdevicesservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iot1clickdevicesservice.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UnclaimDevice(ctx workflow.Context, input *iot1clickdevicesservice.UnclaimDeviceInput) (*iot1clickdevicesservice.UnclaimDeviceOutput, error) {
	var output iot1clickdevicesservice.UnclaimDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UnclaimDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnclaimDeviceAsync(ctx workflow.Context, input *iot1clickdevicesservice.UnclaimDeviceInput) *UnclaimDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UnclaimDevice", input)
	return &UnclaimDeviceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iot1clickdevicesservice.UntagResourceInput) (*iot1clickdevicesservice.UntagResourceOutput, error) {
	var output iot1clickdevicesservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iot1clickdevicesservice.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDeviceState(ctx workflow.Context, input *iot1clickdevicesservice.UpdateDeviceStateInput) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error) {
	var output iot1clickdevicesservice.UpdateDeviceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UpdateDeviceState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceStateAsync(ctx workflow.Context, input *iot1clickdevicesservice.UpdateDeviceStateInput) *UpdateDeviceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickdevicesservice-UpdateDeviceState", input)
	return &UpdateDeviceStateFuture{Future: future}
}
