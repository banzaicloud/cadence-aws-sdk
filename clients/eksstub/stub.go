// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package eksstub

import (
	"github.com/aws/aws-sdk-go/service/eks"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAddonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAddonFuture) Get(ctx workflow.Context) (*eks.CreateAddonOutput, error) {
	var output eks.CreateAddonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClusterFuture) Get(ctx workflow.Context) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFargateProfileFuture) Get(ctx workflow.Context) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNodegroupFuture) Get(ctx workflow.Context) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAddonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAddonFuture) Get(ctx workflow.Context) (*eks.DeleteAddonOutput, error) {
	var output eks.DeleteAddonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClusterFuture) Get(ctx workflow.Context) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFargateProfileFuture) Get(ctx workflow.Context) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNodegroupFuture) Get(ctx workflow.Context) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAddonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAddonFuture) Get(ctx workflow.Context) (*eks.DescribeAddonOutput, error) {
	var output eks.DescribeAddonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAddonVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAddonVersionsFuture) Get(ctx workflow.Context) (*eks.DescribeAddonVersionsOutput, error) {
	var output eks.DescribeAddonVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClusterFuture) Get(ctx workflow.Context) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFargateProfileFuture) Get(ctx workflow.Context) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNodegroupFuture) Get(ctx workflow.Context) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUpdateFuture) Get(ctx workflow.Context) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAddonsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAddonsFuture) Get(ctx workflow.Context) (*eks.ListAddonsOutput, error) {
	var output eks.ListAddonsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListClustersFuture) Get(ctx workflow.Context) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFargateProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFargateProfilesFuture) Get(ctx workflow.Context) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNodegroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNodegroupsFuture) Get(ctx workflow.Context) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUpdatesFuture) Get(ctx workflow.Context) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAddonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAddonFuture) Get(ctx workflow.Context) (*eks.UpdateAddonOutput, error) {
	var output eks.UpdateAddonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClusterConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClusterConfigFuture) Get(ctx workflow.Context) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateClusterVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateClusterVersionFuture) Get(ctx workflow.Context) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNodegroupConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNodegroupConfigFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNodegroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNodegroupVersionFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAddon(ctx workflow.Context, input *eks.CreateAddonInput) (*eks.CreateAddonOutput, error) {
	var output eks.CreateAddonOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateAddon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAddonAsync(ctx workflow.Context, input *eks.CreateAddonInput) *CreateAddonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateAddon", input)
	return &CreateAddonFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *eks.CreateClusterInput) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *eks.CreateClusterInput) *CreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateCluster", input)
	return &CreateClusterFuture{Future: future}
}

func (a *stub) CreateFargateProfile(ctx workflow.Context, input *eks.CreateFargateProfileInput) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFargateProfileAsync(ctx workflow.Context, input *eks.CreateFargateProfileInput) *CreateFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateFargateProfile", input)
	return &CreateFargateProfileFuture{Future: future}
}

func (a *stub) CreateNodegroup(ctx workflow.Context, input *eks.CreateNodegroupInput) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNodegroupAsync(ctx workflow.Context, input *eks.CreateNodegroupInput) *CreateNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateNodegroup", input)
	return &CreateNodegroupFuture{Future: future}
}

func (a *stub) DeleteAddon(ctx workflow.Context, input *eks.DeleteAddonInput) (*eks.DeleteAddonOutput, error) {
	var output eks.DeleteAddonOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteAddon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAddonAsync(ctx workflow.Context, input *eks.DeleteAddonInput) *DeleteAddonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteAddon", input)
	return &DeleteAddonFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *eks.DeleteClusterInput) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *eks.DeleteClusterInput) *DeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteCluster", input)
	return &DeleteClusterFuture{Future: future}
}

func (a *stub) DeleteFargateProfile(ctx workflow.Context, input *eks.DeleteFargateProfileInput) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFargateProfileAsync(ctx workflow.Context, input *eks.DeleteFargateProfileInput) *DeleteFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteFargateProfile", input)
	return &DeleteFargateProfileFuture{Future: future}
}

func (a *stub) DeleteNodegroup(ctx workflow.Context, input *eks.DeleteNodegroupInput) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNodegroupAsync(ctx workflow.Context, input *eks.DeleteNodegroupInput) *DeleteNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteNodegroup", input)
	return &DeleteNodegroupFuture{Future: future}
}

func (a *stub) DescribeAddon(ctx workflow.Context, input *eks.DescribeAddonInput) (*eks.DescribeAddonOutput, error) {
	var output eks.DescribeAddonOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeAddon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAddonAsync(ctx workflow.Context, input *eks.DescribeAddonInput) *DescribeAddonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeAddon", input)
	return &DescribeAddonFuture{Future: future}
}

func (a *stub) DescribeAddonVersions(ctx workflow.Context, input *eks.DescribeAddonVersionsInput) (*eks.DescribeAddonVersionsOutput, error) {
	var output eks.DescribeAddonVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeAddonVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAddonVersionsAsync(ctx workflow.Context, input *eks.DescribeAddonVersionsInput) *DescribeAddonVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeAddonVersions", input)
	return &DescribeAddonVersionsFuture{Future: future}
}

func (a *stub) DescribeCluster(ctx workflow.Context, input *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *DescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeCluster", input)
	return &DescribeClusterFuture{Future: future}
}

func (a *stub) DescribeFargateProfile(ctx workflow.Context, input *eks.DescribeFargateProfileInput) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFargateProfileAsync(ctx workflow.Context, input *eks.DescribeFargateProfileInput) *DescribeFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeFargateProfile", input)
	return &DescribeFargateProfileFuture{Future: future}
}

func (a *stub) DescribeNodegroup(ctx workflow.Context, input *eks.DescribeNodegroupInput) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNodegroupAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *DescribeNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeNodegroup", input)
	return &DescribeNodegroupFuture{Future: future}
}

func (a *stub) DescribeUpdate(ctx workflow.Context, input *eks.DescribeUpdateInput) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUpdateAsync(ctx workflow.Context, input *eks.DescribeUpdateInput) *DescribeUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeUpdate", input)
	return &DescribeUpdateFuture{Future: future}
}

func (a *stub) ListAddons(ctx workflow.Context, input *eks.ListAddonsInput) (*eks.ListAddonsOutput, error) {
	var output eks.ListAddonsOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListAddons", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAddonsAsync(ctx workflow.Context, input *eks.ListAddonsInput) *ListAddonsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListAddons", input)
	return &ListAddonsFuture{Future: future}
}

func (a *stub) ListClusters(ctx workflow.Context, input *eks.ListClustersInput) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClustersAsync(ctx workflow.Context, input *eks.ListClustersInput) *ListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListClusters", input)
	return &ListClustersFuture{Future: future}
}

func (a *stub) ListFargateProfiles(ctx workflow.Context, input *eks.ListFargateProfilesInput) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListFargateProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFargateProfilesAsync(ctx workflow.Context, input *eks.ListFargateProfilesInput) *ListFargateProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListFargateProfiles", input)
	return &ListFargateProfilesFuture{Future: future}
}

func (a *stub) ListNodegroups(ctx workflow.Context, input *eks.ListNodegroupsInput) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListNodegroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNodegroupsAsync(ctx workflow.Context, input *eks.ListNodegroupsInput) *ListNodegroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListNodegroups", input)
	return &ListNodegroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *eks.ListTagsForResourceInput) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *eks.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUpdates(ctx workflow.Context, input *eks.ListUpdatesInput) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUpdatesAsync(ctx workflow.Context, input *eks.ListUpdatesInput) *ListUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListUpdates", input)
	return &ListUpdatesFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *eks.TagResourceInput) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *eks.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *eks.UntagResourceInput) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *eks.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAddon(ctx workflow.Context, input *eks.UpdateAddonInput) (*eks.UpdateAddonOutput, error) {
	var output eks.UpdateAddonOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateAddon", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAddonAsync(ctx workflow.Context, input *eks.UpdateAddonInput) *UpdateAddonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateAddon", input)
	return &UpdateAddonFuture{Future: future}
}

func (a *stub) UpdateClusterConfig(ctx workflow.Context, input *eks.UpdateClusterConfigInput) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterConfigAsync(ctx workflow.Context, input *eks.UpdateClusterConfigInput) *UpdateClusterConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterConfig", input)
	return &UpdateClusterConfigFuture{Future: future}
}

func (a *stub) UpdateClusterVersion(ctx workflow.Context, input *eks.UpdateClusterVersionInput) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterVersionAsync(ctx workflow.Context, input *eks.UpdateClusterVersionInput) *UpdateClusterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterVersion", input)
	return &UpdateClusterVersionFuture{Future: future}
}

func (a *stub) UpdateNodegroupConfig(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNodegroupConfigAsync(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) *UpdateNodegroupConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupConfig", input)
	return &UpdateNodegroupConfigFuture{Future: future}
}

func (a *stub) UpdateNodegroupVersion(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNodegroupVersionAsync(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) *UpdateNodegroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupVersion", input)
	return &UpdateNodegroupVersionFuture{Future: future}
}

func (a *stub) WaitUntilAddonActive(ctx workflow.Context, input *eks.DescribeAddonInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilAddonActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAddonActiveAsync(ctx workflow.Context, input *eks.DescribeAddonInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilAddonActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilAddonDeleted(ctx workflow.Context, input *eks.DescribeAddonInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilAddonDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAddonDeletedAsync(ctx workflow.Context, input *eks.DescribeAddonInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilAddonDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterActive(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterActiveAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterDeleted(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterDeletedAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNodegroupActive(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNodegroupActiveAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNodegroupDeleted(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNodegroupDeletedAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupDeleted", input)
	return clients.NewVoidFuture(future)
}
