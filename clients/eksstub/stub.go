// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package eksstub

import (
	"github.com/aws/aws-sdk-go/service/eks"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type EKSCreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSCreateClusterFuture) Get(ctx workflow.Context) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSCreateFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSCreateFargateProfileFuture) Get(ctx workflow.Context) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSCreateNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSCreateNodegroupFuture) Get(ctx workflow.Context) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDeleteClusterFuture) Get(ctx workflow.Context) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDeleteFargateProfileFuture) Get(ctx workflow.Context) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDeleteNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDeleteNodegroupFuture) Get(ctx workflow.Context) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDescribeClusterFuture) Get(ctx workflow.Context) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeFargateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDescribeFargateProfileFuture) Get(ctx workflow.Context) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeNodegroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDescribeNodegroupFuture) Get(ctx workflow.Context) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSDescribeUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSDescribeUpdateFuture) Get(ctx workflow.Context) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSListClustersFuture) Get(ctx workflow.Context) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListFargateProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSListFargateProfilesFuture) Get(ctx workflow.Context) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListNodegroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSListNodegroupsFuture) Get(ctx workflow.Context) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSListTagsForResourceFuture) Get(ctx workflow.Context) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSListUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSListUpdatesFuture) Get(ctx workflow.Context) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSTagResourceFuture) Get(ctx workflow.Context) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSUntagResourceFuture) Get(ctx workflow.Context) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateClusterConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSUpdateClusterConfigFuture) Get(ctx workflow.Context) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateClusterVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSUpdateClusterVersionFuture) Get(ctx workflow.Context) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateNodegroupConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSUpdateNodegroupConfigFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EKSUpdateNodegroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EKSUpdateNodegroupVersionFuture) Get(ctx workflow.Context) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCluster(ctx workflow.Context, input *eks.CreateClusterInput) (*eks.CreateClusterOutput, error) {
	var output eks.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *eks.CreateClusterInput) *EKSCreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateCluster", input)
	return &EKSCreateClusterFuture{Future: future}
}

func (a *stub) CreateFargateProfile(ctx workflow.Context, input *eks.CreateFargateProfileInput) (*eks.CreateFargateProfileOutput, error) {
	var output eks.CreateFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFargateProfileAsync(ctx workflow.Context, input *eks.CreateFargateProfileInput) *EKSCreateFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateFargateProfile", input)
	return &EKSCreateFargateProfileFuture{Future: future}
}

func (a *stub) CreateNodegroup(ctx workflow.Context, input *eks.CreateNodegroupInput) (*eks.CreateNodegroupOutput, error) {
	var output eks.CreateNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-CreateNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNodegroupAsync(ctx workflow.Context, input *eks.CreateNodegroupInput) *EKSCreateNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-CreateNodegroup", input)
	return &EKSCreateNodegroupFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *eks.DeleteClusterInput) (*eks.DeleteClusterOutput, error) {
	var output eks.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *eks.DeleteClusterInput) *EKSDeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteCluster", input)
	return &EKSDeleteClusterFuture{Future: future}
}

func (a *stub) DeleteFargateProfile(ctx workflow.Context, input *eks.DeleteFargateProfileInput) (*eks.DeleteFargateProfileOutput, error) {
	var output eks.DeleteFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFargateProfileAsync(ctx workflow.Context, input *eks.DeleteFargateProfileInput) *EKSDeleteFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteFargateProfile", input)
	return &EKSDeleteFargateProfileFuture{Future: future}
}

func (a *stub) DeleteNodegroup(ctx workflow.Context, input *eks.DeleteNodegroupInput) (*eks.DeleteNodegroupOutput, error) {
	var output eks.DeleteNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DeleteNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNodegroupAsync(ctx workflow.Context, input *eks.DeleteNodegroupInput) *EKSDeleteNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DeleteNodegroup", input)
	return &EKSDeleteNodegroupFuture{Future: future}
}

func (a *stub) DescribeCluster(ctx workflow.Context, input *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error) {
	var output eks.DescribeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClusterAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *EKSDescribeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeCluster", input)
	return &EKSDescribeClusterFuture{Future: future}
}

func (a *stub) DescribeFargateProfile(ctx workflow.Context, input *eks.DescribeFargateProfileInput) (*eks.DescribeFargateProfileOutput, error) {
	var output eks.DescribeFargateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeFargateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFargateProfileAsync(ctx workflow.Context, input *eks.DescribeFargateProfileInput) *EKSDescribeFargateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeFargateProfile", input)
	return &EKSDescribeFargateProfileFuture{Future: future}
}

func (a *stub) DescribeNodegroup(ctx workflow.Context, input *eks.DescribeNodegroupInput) (*eks.DescribeNodegroupOutput, error) {
	var output eks.DescribeNodegroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeNodegroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNodegroupAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *EKSDescribeNodegroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeNodegroup", input)
	return &EKSDescribeNodegroupFuture{Future: future}
}

func (a *stub) DescribeUpdate(ctx workflow.Context, input *eks.DescribeUpdateInput) (*eks.DescribeUpdateOutput, error) {
	var output eks.DescribeUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-DescribeUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUpdateAsync(ctx workflow.Context, input *eks.DescribeUpdateInput) *EKSDescribeUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-DescribeUpdate", input)
	return &EKSDescribeUpdateFuture{Future: future}
}

func (a *stub) ListClusters(ctx workflow.Context, input *eks.ListClustersInput) (*eks.ListClustersOutput, error) {
	var output eks.ListClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClustersAsync(ctx workflow.Context, input *eks.ListClustersInput) *EKSListClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListClusters", input)
	return &EKSListClustersFuture{Future: future}
}

func (a *stub) ListFargateProfiles(ctx workflow.Context, input *eks.ListFargateProfilesInput) (*eks.ListFargateProfilesOutput, error) {
	var output eks.ListFargateProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListFargateProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFargateProfilesAsync(ctx workflow.Context, input *eks.ListFargateProfilesInput) *EKSListFargateProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListFargateProfiles", input)
	return &EKSListFargateProfilesFuture{Future: future}
}

func (a *stub) ListNodegroups(ctx workflow.Context, input *eks.ListNodegroupsInput) (*eks.ListNodegroupsOutput, error) {
	var output eks.ListNodegroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListNodegroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNodegroupsAsync(ctx workflow.Context, input *eks.ListNodegroupsInput) *EKSListNodegroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListNodegroups", input)
	return &EKSListNodegroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *eks.ListTagsForResourceInput) (*eks.ListTagsForResourceOutput, error) {
	var output eks.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *eks.ListTagsForResourceInput) *EKSListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListTagsForResource", input)
	return &EKSListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUpdates(ctx workflow.Context, input *eks.ListUpdatesInput) (*eks.ListUpdatesOutput, error) {
	var output eks.ListUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-ListUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUpdatesAsync(ctx workflow.Context, input *eks.ListUpdatesInput) *EKSListUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-ListUpdates", input)
	return &EKSListUpdatesFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *eks.TagResourceInput) (*eks.TagResourceOutput, error) {
	var output eks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *eks.TagResourceInput) *EKSTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-TagResource", input)
	return &EKSTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *eks.UntagResourceInput) (*eks.UntagResourceOutput, error) {
	var output eks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *eks.UntagResourceInput) *EKSUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UntagResource", input)
	return &EKSUntagResourceFuture{Future: future}
}

func (a *stub) UpdateClusterConfig(ctx workflow.Context, input *eks.UpdateClusterConfigInput) (*eks.UpdateClusterConfigOutput, error) {
	var output eks.UpdateClusterConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterConfigAsync(ctx workflow.Context, input *eks.UpdateClusterConfigInput) *EKSUpdateClusterConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterConfig", input)
	return &EKSUpdateClusterConfigFuture{Future: future}
}

func (a *stub) UpdateClusterVersion(ctx workflow.Context, input *eks.UpdateClusterVersionInput) (*eks.UpdateClusterVersionOutput, error) {
	var output eks.UpdateClusterVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateClusterVersionAsync(ctx workflow.Context, input *eks.UpdateClusterVersionInput) *EKSUpdateClusterVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateClusterVersion", input)
	return &EKSUpdateClusterVersionFuture{Future: future}
}

func (a *stub) UpdateNodegroupConfig(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) (*eks.UpdateNodegroupConfigOutput, error) {
	var output eks.UpdateNodegroupConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNodegroupConfigAsync(ctx workflow.Context, input *eks.UpdateNodegroupConfigInput) *EKSUpdateNodegroupConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupConfig", input)
	return &EKSUpdateNodegroupConfigFuture{Future: future}
}

func (a *stub) UpdateNodegroupVersion(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) (*eks.UpdateNodegroupVersionOutput, error) {
	var output eks.UpdateNodegroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNodegroupVersionAsync(ctx workflow.Context, input *eks.UpdateNodegroupVersionInput) *EKSUpdateNodegroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-UpdateNodegroupVersion", input)
	return &EKSUpdateNodegroupVersionFuture{Future: future}
}

func (a *stub) WaitUntilClusterActive(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterActiveAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilClusterDeleted(ctx workflow.Context, input *eks.DescribeClusterInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilClusterDeletedAsync(ctx workflow.Context, input *eks.DescribeClusterInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilClusterDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNodegroupActive(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupActive", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNodegroupActiveAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupActive", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNodegroupDeleted(ctx workflow.Context, input *eks.DescribeNodegroupInput) error {
	return workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNodegroupDeletedAsync(ctx workflow.Context, input *eks.DescribeNodegroupInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-eks-WaitUntilNodegroupDeleted", input)
	return clients.NewVoidFuture(future)
}
