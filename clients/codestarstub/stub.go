// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package codestarstub

import (
	"github.com/aws/aws-sdk-go/service/codestar"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeStarAssociateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarAssociateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.AssociateTeamMemberOutput, error) {
	var output codestar.AssociateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarCreateProjectFuture) Get(ctx workflow.Context) (*codestar.CreateProjectOutput, error) {
	var output codestar.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarCreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarCreateUserProfileFuture) Get(ctx workflow.Context) (*codestar.CreateUserProfileOutput, error) {
	var output codestar.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarDeleteProjectFuture) Get(ctx workflow.Context) (*codestar.DeleteProjectOutput, error) {
	var output codestar.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarDeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarDeleteUserProfileFuture) Get(ctx workflow.Context) (*codestar.DeleteUserProfileOutput, error) {
	var output codestar.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarDescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarDescribeProjectFuture) Get(ctx workflow.Context) (*codestar.DescribeProjectOutput, error) {
	var output codestar.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarDescribeUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarDescribeUserProfileFuture) Get(ctx workflow.Context) (*codestar.DescribeUserProfileOutput, error) {
	var output codestar.DescribeUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarDisassociateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarDisassociateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.DisassociateTeamMemberOutput, error) {
	var output codestar.DisassociateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarListProjectsFuture) Get(ctx workflow.Context) (*codestar.ListProjectsOutput, error) {
	var output codestar.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarListResourcesFuture) Get(ctx workflow.Context) (*codestar.ListResourcesOutput, error) {
	var output codestar.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarListTagsForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarListTagsForProjectFuture) Get(ctx workflow.Context) (*codestar.ListTagsForProjectOutput, error) {
	var output codestar.ListTagsForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarListTeamMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarListTeamMembersFuture) Get(ctx workflow.Context) (*codestar.ListTeamMembersOutput, error) {
	var output codestar.ListTeamMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarListUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarListUserProfilesFuture) Get(ctx workflow.Context) (*codestar.ListUserProfilesOutput, error) {
	var output codestar.ListUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarTagProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarTagProjectFuture) Get(ctx workflow.Context) (*codestar.TagProjectOutput, error) {
	var output codestar.TagProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarUntagProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarUntagProjectFuture) Get(ctx workflow.Context) (*codestar.UntagProjectOutput, error) {
	var output codestar.UntagProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarUpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarUpdateProjectFuture) Get(ctx workflow.Context) (*codestar.UpdateProjectOutput, error) {
	var output codestar.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarUpdateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarUpdateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.UpdateTeamMemberOutput, error) {
	var output codestar.UpdateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarUpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarUpdateUserProfileFuture) Get(ctx workflow.Context) (*codestar.UpdateUserProfileOutput, error) {
	var output codestar.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTeamMember(ctx workflow.Context, input *codestar.AssociateTeamMemberInput) (*codestar.AssociateTeamMemberOutput, error) {
	var output codestar.AssociateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-AssociateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTeamMemberAsync(ctx workflow.Context, input *codestar.AssociateTeamMemberInput) *CodeStarAssociateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-AssociateTeamMember", input)
	return &CodeStarAssociateTeamMemberFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *codestar.CreateProjectInput) (*codestar.CreateProjectOutput, error) {
	var output codestar.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *codestar.CreateProjectInput) *CodeStarCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-CreateProject", input)
	return &CodeStarCreateProjectFuture{Future: future}
}

func (a *stub) CreateUserProfile(ctx workflow.Context, input *codestar.CreateUserProfileInput) (*codestar.CreateUserProfileOutput, error) {
	var output codestar.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserProfileAsync(ctx workflow.Context, input *codestar.CreateUserProfileInput) *CodeStarCreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-CreateUserProfile", input)
	return &CodeStarCreateUserProfileFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *codestar.DeleteProjectInput) (*codestar.DeleteProjectOutput, error) {
	var output codestar.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *codestar.DeleteProjectInput) *CodeStarDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteProject", input)
	return &CodeStarDeleteProjectFuture{Future: future}
}

func (a *stub) DeleteUserProfile(ctx workflow.Context, input *codestar.DeleteUserProfileInput) (*codestar.DeleteUserProfileOutput, error) {
	var output codestar.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserProfileAsync(ctx workflow.Context, input *codestar.DeleteUserProfileInput) *CodeStarDeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteUserProfile", input)
	return &CodeStarDeleteUserProfileFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *codestar.DescribeProjectInput) (*codestar.DescribeProjectOutput, error) {
	var output codestar.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *codestar.DescribeProjectInput) *CodeStarDescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeProject", input)
	return &CodeStarDescribeProjectFuture{Future: future}
}

func (a *stub) DescribeUserProfile(ctx workflow.Context, input *codestar.DescribeUserProfileInput) (*codestar.DescribeUserProfileOutput, error) {
	var output codestar.DescribeUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserProfileAsync(ctx workflow.Context, input *codestar.DescribeUserProfileInput) *CodeStarDescribeUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeUserProfile", input)
	return &CodeStarDescribeUserProfileFuture{Future: future}
}

func (a *stub) DisassociateTeamMember(ctx workflow.Context, input *codestar.DisassociateTeamMemberInput) (*codestar.DisassociateTeamMemberOutput, error) {
	var output codestar.DisassociateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DisassociateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTeamMemberAsync(ctx workflow.Context, input *codestar.DisassociateTeamMemberInput) *CodeStarDisassociateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DisassociateTeamMember", input)
	return &CodeStarDisassociateTeamMemberFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *codestar.ListProjectsInput) (*codestar.ListProjectsOutput, error) {
	var output codestar.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *codestar.ListProjectsInput) *CodeStarListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListProjects", input)
	return &CodeStarListProjectsFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *codestar.ListResourcesInput) (*codestar.ListResourcesOutput, error) {
	var output codestar.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *codestar.ListResourcesInput) *CodeStarListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListResources", input)
	return &CodeStarListResourcesFuture{Future: future}
}

func (a *stub) ListTagsForProject(ctx workflow.Context, input *codestar.ListTagsForProjectInput) (*codestar.ListTagsForProjectOutput, error) {
	var output codestar.ListTagsForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListTagsForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForProjectAsync(ctx workflow.Context, input *codestar.ListTagsForProjectInput) *CodeStarListTagsForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListTagsForProject", input)
	return &CodeStarListTagsForProjectFuture{Future: future}
}

func (a *stub) ListTeamMembers(ctx workflow.Context, input *codestar.ListTeamMembersInput) (*codestar.ListTeamMembersOutput, error) {
	var output codestar.ListTeamMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListTeamMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTeamMembersAsync(ctx workflow.Context, input *codestar.ListTeamMembersInput) *CodeStarListTeamMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListTeamMembers", input)
	return &CodeStarListTeamMembersFuture{Future: future}
}

func (a *stub) ListUserProfiles(ctx workflow.Context, input *codestar.ListUserProfilesInput) (*codestar.ListUserProfilesOutput, error) {
	var output codestar.ListUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserProfilesAsync(ctx workflow.Context, input *codestar.ListUserProfilesInput) *CodeStarListUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListUserProfiles", input)
	return &CodeStarListUserProfilesFuture{Future: future}
}

func (a *stub) TagProject(ctx workflow.Context, input *codestar.TagProjectInput) (*codestar.TagProjectOutput, error) {
	var output codestar.TagProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-TagProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagProjectAsync(ctx workflow.Context, input *codestar.TagProjectInput) *CodeStarTagProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-TagProject", input)
	return &CodeStarTagProjectFuture{Future: future}
}

func (a *stub) UntagProject(ctx workflow.Context, input *codestar.UntagProjectInput) (*codestar.UntagProjectOutput, error) {
	var output codestar.UntagProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UntagProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagProjectAsync(ctx workflow.Context, input *codestar.UntagProjectInput) *CodeStarUntagProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UntagProject", input)
	return &CodeStarUntagProjectFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *codestar.UpdateProjectInput) (*codestar.UpdateProjectOutput, error) {
	var output codestar.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *codestar.UpdateProjectInput) *CodeStarUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateProject", input)
	return &CodeStarUpdateProjectFuture{Future: future}
}

func (a *stub) UpdateTeamMember(ctx workflow.Context, input *codestar.UpdateTeamMemberInput) (*codestar.UpdateTeamMemberOutput, error) {
	var output codestar.UpdateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTeamMemberAsync(ctx workflow.Context, input *codestar.UpdateTeamMemberInput) *CodeStarUpdateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateTeamMember", input)
	return &CodeStarUpdateTeamMemberFuture{Future: future}
}

func (a *stub) UpdateUserProfile(ctx workflow.Context, input *codestar.UpdateUserProfileInput) (*codestar.UpdateUserProfileOutput, error) {
	var output codestar.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserProfileAsync(ctx workflow.Context, input *codestar.UpdateUserProfileInput) *CodeStarUpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateUserProfile", input)
	return &CodeStarUpdateUserProfileFuture{Future: future}
}
