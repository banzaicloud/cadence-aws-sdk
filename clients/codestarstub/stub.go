// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codestarstub

import (
	"github.com/aws/aws-sdk-go/service/codestar"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.AssociateTeamMemberOutput, error) {
	var output codestar.AssociateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*codestar.CreateProjectOutput, error) {
	var output codestar.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserProfileFuture) Get(ctx workflow.Context) (*codestar.CreateUserProfileOutput, error) {
	var output codestar.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*codestar.DeleteProjectOutput, error) {
	var output codestar.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserProfileFuture) Get(ctx workflow.Context) (*codestar.DeleteUserProfileOutput, error) {
	var output codestar.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProjectFuture) Get(ctx workflow.Context) (*codestar.DescribeProjectOutput, error) {
	var output codestar.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserProfileFuture) Get(ctx workflow.Context) (*codestar.DescribeUserProfileOutput, error) {
	var output codestar.DescribeUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.DisassociateTeamMemberOutput, error) {
	var output codestar.DisassociateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectsFuture) Get(ctx workflow.Context) (*codestar.ListProjectsOutput, error) {
	var output codestar.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourcesFuture) Get(ctx workflow.Context) (*codestar.ListResourcesOutput, error) {
	var output codestar.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForProjectFuture) Get(ctx workflow.Context) (*codestar.ListTagsForProjectOutput, error) {
	var output codestar.ListTagsForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTeamMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTeamMembersFuture) Get(ctx workflow.Context) (*codestar.ListTeamMembersOutput, error) {
	var output codestar.ListTeamMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserProfilesFuture) Get(ctx workflow.Context) (*codestar.ListUserProfilesOutput, error) {
	var output codestar.ListUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagProjectFuture) Get(ctx workflow.Context) (*codestar.TagProjectOutput, error) {
	var output codestar.TagProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagProjectFuture) Get(ctx workflow.Context) (*codestar.UntagProjectOutput, error) {
	var output codestar.UntagProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProjectFuture) Get(ctx workflow.Context) (*codestar.UpdateProjectOutput, error) {
	var output codestar.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTeamMemberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTeamMemberFuture) Get(ctx workflow.Context) (*codestar.UpdateTeamMemberOutput, error) {
	var output codestar.UpdateTeamMemberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserProfileFuture) Get(ctx workflow.Context) (*codestar.UpdateUserProfileOutput, error) {
	var output codestar.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTeamMember(ctx workflow.Context, input *codestar.AssociateTeamMemberInput) (*codestar.AssociateTeamMemberOutput, error) {
	var output codestar.AssociateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-AssociateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTeamMemberAsync(ctx workflow.Context, input *codestar.AssociateTeamMemberInput) *AssociateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-AssociateTeamMember", input)
	return &AssociateTeamMemberFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *codestar.CreateProjectInput) (*codestar.CreateProjectOutput, error) {
	var output codestar.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *codestar.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) CreateUserProfile(ctx workflow.Context, input *codestar.CreateUserProfileInput) (*codestar.CreateUserProfileOutput, error) {
	var output codestar.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserProfileAsync(ctx workflow.Context, input *codestar.CreateUserProfileInput) *CreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-CreateUserProfile", input)
	return &CreateUserProfileFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *codestar.DeleteProjectInput) (*codestar.DeleteProjectOutput, error) {
	var output codestar.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *codestar.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DeleteUserProfile(ctx workflow.Context, input *codestar.DeleteUserProfileInput) (*codestar.DeleteUserProfileOutput, error) {
	var output codestar.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserProfileAsync(ctx workflow.Context, input *codestar.DeleteUserProfileInput) *DeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DeleteUserProfile", input)
	return &DeleteUserProfileFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *codestar.DescribeProjectInput) (*codestar.DescribeProjectOutput, error) {
	var output codestar.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *codestar.DescribeProjectInput) *DescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeProject", input)
	return &DescribeProjectFuture{Future: future}
}

func (a *stub) DescribeUserProfile(ctx workflow.Context, input *codestar.DescribeUserProfileInput) (*codestar.DescribeUserProfileOutput, error) {
	var output codestar.DescribeUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserProfileAsync(ctx workflow.Context, input *codestar.DescribeUserProfileInput) *DescribeUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DescribeUserProfile", input)
	return &DescribeUserProfileFuture{Future: future}
}

func (a *stub) DisassociateTeamMember(ctx workflow.Context, input *codestar.DisassociateTeamMemberInput) (*codestar.DisassociateTeamMemberOutput, error) {
	var output codestar.DisassociateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-DisassociateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTeamMemberAsync(ctx workflow.Context, input *codestar.DisassociateTeamMemberInput) *DisassociateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-DisassociateTeamMember", input)
	return &DisassociateTeamMemberFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *codestar.ListProjectsInput) (*codestar.ListProjectsOutput, error) {
	var output codestar.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *codestar.ListProjectsInput) *ListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListProjects", input)
	return &ListProjectsFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *codestar.ListResourcesInput) (*codestar.ListResourcesOutput, error) {
	var output codestar.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *codestar.ListResourcesInput) *ListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListResources", input)
	return &ListResourcesFuture{Future: future}
}

func (a *stub) ListTagsForProject(ctx workflow.Context, input *codestar.ListTagsForProjectInput) (*codestar.ListTagsForProjectOutput, error) {
	var output codestar.ListTagsForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListTagsForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForProjectAsync(ctx workflow.Context, input *codestar.ListTagsForProjectInput) *ListTagsForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListTagsForProject", input)
	return &ListTagsForProjectFuture{Future: future}
}

func (a *stub) ListTeamMembers(ctx workflow.Context, input *codestar.ListTeamMembersInput) (*codestar.ListTeamMembersOutput, error) {
	var output codestar.ListTeamMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListTeamMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTeamMembersAsync(ctx workflow.Context, input *codestar.ListTeamMembersInput) *ListTeamMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListTeamMembers", input)
	return &ListTeamMembersFuture{Future: future}
}

func (a *stub) ListUserProfiles(ctx workflow.Context, input *codestar.ListUserProfilesInput) (*codestar.ListUserProfilesOutput, error) {
	var output codestar.ListUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-ListUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserProfilesAsync(ctx workflow.Context, input *codestar.ListUserProfilesInput) *ListUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-ListUserProfiles", input)
	return &ListUserProfilesFuture{Future: future}
}

func (a *stub) TagProject(ctx workflow.Context, input *codestar.TagProjectInput) (*codestar.TagProjectOutput, error) {
	var output codestar.TagProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-TagProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagProjectAsync(ctx workflow.Context, input *codestar.TagProjectInput) *TagProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-TagProject", input)
	return &TagProjectFuture{Future: future}
}

func (a *stub) UntagProject(ctx workflow.Context, input *codestar.UntagProjectInput) (*codestar.UntagProjectOutput, error) {
	var output codestar.UntagProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UntagProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagProjectAsync(ctx workflow.Context, input *codestar.UntagProjectInput) *UntagProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UntagProject", input)
	return &UntagProjectFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *codestar.UpdateProjectInput) (*codestar.UpdateProjectOutput, error) {
	var output codestar.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *codestar.UpdateProjectInput) *UpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateProject", input)
	return &UpdateProjectFuture{Future: future}
}

func (a *stub) UpdateTeamMember(ctx workflow.Context, input *codestar.UpdateTeamMemberInput) (*codestar.UpdateTeamMemberOutput, error) {
	var output codestar.UpdateTeamMemberOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateTeamMember", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTeamMemberAsync(ctx workflow.Context, input *codestar.UpdateTeamMemberInput) *UpdateTeamMemberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateTeamMember", input)
	return &UpdateTeamMemberFuture{Future: future}
}

func (a *stub) UpdateUserProfile(ctx workflow.Context, input *codestar.UpdateUserProfileInput) (*codestar.UpdateUserProfileOutput, error) {
	var output codestar.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserProfileAsync(ctx workflow.Context, input *codestar.UpdateUserProfileInput) *UpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestar-UpdateUserProfile", input)
	return &UpdateUserProfileFuture{Future: future}
}
