// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package athenastub

import (
	"github.com/aws/aws-sdk-go/service/athena"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchGetNamedQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetNamedQueryFuture) Get(ctx workflow.Context) (*athena.BatchGetNamedQueryOutput, error) {
	var output athena.BatchGetNamedQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetQueryExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetQueryExecutionFuture) Get(ctx workflow.Context) (*athena.BatchGetQueryExecutionOutput, error) {
	var output athena.BatchGetQueryExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDataCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDataCatalogFuture) Get(ctx workflow.Context) (*athena.CreateDataCatalogOutput, error) {
	var output athena.CreateDataCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNamedQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNamedQueryFuture) Get(ctx workflow.Context) (*athena.CreateNamedQueryOutput, error) {
	var output athena.CreateNamedQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorkGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorkGroupFuture) Get(ctx workflow.Context) (*athena.CreateWorkGroupOutput, error) {
	var output athena.CreateWorkGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDataCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDataCatalogFuture) Get(ctx workflow.Context) (*athena.DeleteDataCatalogOutput, error) {
	var output athena.DeleteDataCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNamedQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNamedQueryFuture) Get(ctx workflow.Context) (*athena.DeleteNamedQueryOutput, error) {
	var output athena.DeleteNamedQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorkGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorkGroupFuture) Get(ctx workflow.Context) (*athena.DeleteWorkGroupOutput, error) {
	var output athena.DeleteWorkGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataCatalogFuture) Get(ctx workflow.Context) (*athena.GetDataCatalogOutput, error) {
	var output athena.GetDataCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDatabaseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDatabaseFuture) Get(ctx workflow.Context) (*athena.GetDatabaseOutput, error) {
	var output athena.GetDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNamedQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNamedQueryFuture) Get(ctx workflow.Context) (*athena.GetNamedQueryOutput, error) {
	var output athena.GetNamedQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueryExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueryExecutionFuture) Get(ctx workflow.Context) (*athena.GetQueryExecutionOutput, error) {
	var output athena.GetQueryExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetQueryResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetQueryResultsFuture) Get(ctx workflow.Context) (*athena.GetQueryResultsOutput, error) {
	var output athena.GetQueryResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTableMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTableMetadataFuture) Get(ctx workflow.Context) (*athena.GetTableMetadataOutput, error) {
	var output athena.GetTableMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkGroupFuture) Get(ctx workflow.Context) (*athena.GetWorkGroupOutput, error) {
	var output athena.GetWorkGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDataCatalogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDataCatalogsFuture) Get(ctx workflow.Context) (*athena.ListDataCatalogsOutput, error) {
	var output athena.ListDataCatalogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatabasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatabasesFuture) Get(ctx workflow.Context) (*athena.ListDatabasesOutput, error) {
	var output athena.ListDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNamedQueriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNamedQueriesFuture) Get(ctx workflow.Context) (*athena.ListNamedQueriesOutput, error) {
	var output athena.ListNamedQueriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListQueryExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListQueryExecutionsFuture) Get(ctx workflow.Context) (*athena.ListQueryExecutionsOutput, error) {
	var output athena.ListQueryExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTableMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTableMetadataFuture) Get(ctx workflow.Context) (*athena.ListTableMetadataOutput, error) {
	var output athena.ListTableMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*athena.ListTagsForResourceOutput, error) {
	var output athena.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorkGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorkGroupsFuture) Get(ctx workflow.Context) (*athena.ListWorkGroupsOutput, error) {
	var output athena.ListWorkGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartQueryExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartQueryExecutionFuture) Get(ctx workflow.Context) (*athena.StartQueryExecutionOutput, error) {
	var output athena.StartQueryExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopQueryExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopQueryExecutionFuture) Get(ctx workflow.Context) (*athena.StopQueryExecutionOutput, error) {
	var output athena.StopQueryExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*athena.TagResourceOutput, error) {
	var output athena.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*athena.UntagResourceOutput, error) {
	var output athena.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataCatalogFuture) Get(ctx workflow.Context) (*athena.UpdateDataCatalogOutput, error) {
	var output athena.UpdateDataCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorkGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorkGroupFuture) Get(ctx workflow.Context) (*athena.UpdateWorkGroupOutput, error) {
	var output athena.UpdateWorkGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetNamedQuery(ctx workflow.Context, input *athena.BatchGetNamedQueryInput) (*athena.BatchGetNamedQueryOutput, error) {
	var output athena.BatchGetNamedQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-BatchGetNamedQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetNamedQueryAsync(ctx workflow.Context, input *athena.BatchGetNamedQueryInput) *BatchGetNamedQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-BatchGetNamedQuery", input)
	return &BatchGetNamedQueryFuture{Future: future}
}

func (a *stub) BatchGetQueryExecution(ctx workflow.Context, input *athena.BatchGetQueryExecutionInput) (*athena.BatchGetQueryExecutionOutput, error) {
	var output athena.BatchGetQueryExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-BatchGetQueryExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetQueryExecutionAsync(ctx workflow.Context, input *athena.BatchGetQueryExecutionInput) *BatchGetQueryExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-BatchGetQueryExecution", input)
	return &BatchGetQueryExecutionFuture{Future: future}
}

func (a *stub) CreateDataCatalog(ctx workflow.Context, input *athena.CreateDataCatalogInput) (*athena.CreateDataCatalogOutput, error) {
	var output athena.CreateDataCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-CreateDataCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataCatalogAsync(ctx workflow.Context, input *athena.CreateDataCatalogInput) *CreateDataCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-CreateDataCatalog", input)
	return &CreateDataCatalogFuture{Future: future}
}

func (a *stub) CreateNamedQuery(ctx workflow.Context, input *athena.CreateNamedQueryInput) (*athena.CreateNamedQueryOutput, error) {
	var output athena.CreateNamedQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-CreateNamedQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNamedQueryAsync(ctx workflow.Context, input *athena.CreateNamedQueryInput) *CreateNamedQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-CreateNamedQuery", input)
	return &CreateNamedQueryFuture{Future: future}
}

func (a *stub) CreateWorkGroup(ctx workflow.Context, input *athena.CreateWorkGroupInput) (*athena.CreateWorkGroupOutput, error) {
	var output athena.CreateWorkGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-CreateWorkGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkGroupAsync(ctx workflow.Context, input *athena.CreateWorkGroupInput) *CreateWorkGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-CreateWorkGroup", input)
	return &CreateWorkGroupFuture{Future: future}
}

func (a *stub) DeleteDataCatalog(ctx workflow.Context, input *athena.DeleteDataCatalogInput) (*athena.DeleteDataCatalogOutput, error) {
	var output athena.DeleteDataCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-DeleteDataCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDataCatalogAsync(ctx workflow.Context, input *athena.DeleteDataCatalogInput) *DeleteDataCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-DeleteDataCatalog", input)
	return &DeleteDataCatalogFuture{Future: future}
}

func (a *stub) DeleteNamedQuery(ctx workflow.Context, input *athena.DeleteNamedQueryInput) (*athena.DeleteNamedQueryOutput, error) {
	var output athena.DeleteNamedQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-DeleteNamedQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNamedQueryAsync(ctx workflow.Context, input *athena.DeleteNamedQueryInput) *DeleteNamedQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-DeleteNamedQuery", input)
	return &DeleteNamedQueryFuture{Future: future}
}

func (a *stub) DeleteWorkGroup(ctx workflow.Context, input *athena.DeleteWorkGroupInput) (*athena.DeleteWorkGroupOutput, error) {
	var output athena.DeleteWorkGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-DeleteWorkGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkGroupAsync(ctx workflow.Context, input *athena.DeleteWorkGroupInput) *DeleteWorkGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-DeleteWorkGroup", input)
	return &DeleteWorkGroupFuture{Future: future}
}

func (a *stub) GetDataCatalog(ctx workflow.Context, input *athena.GetDataCatalogInput) (*athena.GetDataCatalogOutput, error) {
	var output athena.GetDataCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetDataCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataCatalogAsync(ctx workflow.Context, input *athena.GetDataCatalogInput) *GetDataCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetDataCatalog", input)
	return &GetDataCatalogFuture{Future: future}
}

func (a *stub) GetDatabase(ctx workflow.Context, input *athena.GetDatabaseInput) (*athena.GetDatabaseOutput, error) {
	var output athena.GetDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDatabaseAsync(ctx workflow.Context, input *athena.GetDatabaseInput) *GetDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetDatabase", input)
	return &GetDatabaseFuture{Future: future}
}

func (a *stub) GetNamedQuery(ctx workflow.Context, input *athena.GetNamedQueryInput) (*athena.GetNamedQueryOutput, error) {
	var output athena.GetNamedQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetNamedQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNamedQueryAsync(ctx workflow.Context, input *athena.GetNamedQueryInput) *GetNamedQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetNamedQuery", input)
	return &GetNamedQueryFuture{Future: future}
}

func (a *stub) GetQueryExecution(ctx workflow.Context, input *athena.GetQueryExecutionInput) (*athena.GetQueryExecutionOutput, error) {
	var output athena.GetQueryExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetQueryExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueryExecutionAsync(ctx workflow.Context, input *athena.GetQueryExecutionInput) *GetQueryExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetQueryExecution", input)
	return &GetQueryExecutionFuture{Future: future}
}

func (a *stub) GetQueryResults(ctx workflow.Context, input *athena.GetQueryResultsInput) (*athena.GetQueryResultsOutput, error) {
	var output athena.GetQueryResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetQueryResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetQueryResultsAsync(ctx workflow.Context, input *athena.GetQueryResultsInput) *GetQueryResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetQueryResults", input)
	return &GetQueryResultsFuture{Future: future}
}

func (a *stub) GetTableMetadata(ctx workflow.Context, input *athena.GetTableMetadataInput) (*athena.GetTableMetadataOutput, error) {
	var output athena.GetTableMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetTableMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTableMetadataAsync(ctx workflow.Context, input *athena.GetTableMetadataInput) *GetTableMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetTableMetadata", input)
	return &GetTableMetadataFuture{Future: future}
}

func (a *stub) GetWorkGroup(ctx workflow.Context, input *athena.GetWorkGroupInput) (*athena.GetWorkGroupOutput, error) {
	var output athena.GetWorkGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-GetWorkGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkGroupAsync(ctx workflow.Context, input *athena.GetWorkGroupInput) *GetWorkGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-GetWorkGroup", input)
	return &GetWorkGroupFuture{Future: future}
}

func (a *stub) ListDataCatalogs(ctx workflow.Context, input *athena.ListDataCatalogsInput) (*athena.ListDataCatalogsOutput, error) {
	var output athena.ListDataCatalogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListDataCatalogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDataCatalogsAsync(ctx workflow.Context, input *athena.ListDataCatalogsInput) *ListDataCatalogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListDataCatalogs", input)
	return &ListDataCatalogsFuture{Future: future}
}

func (a *stub) ListDatabases(ctx workflow.Context, input *athena.ListDatabasesInput) (*athena.ListDatabasesOutput, error) {
	var output athena.ListDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatabasesAsync(ctx workflow.Context, input *athena.ListDatabasesInput) *ListDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListDatabases", input)
	return &ListDatabasesFuture{Future: future}
}

func (a *stub) ListNamedQueries(ctx workflow.Context, input *athena.ListNamedQueriesInput) (*athena.ListNamedQueriesOutput, error) {
	var output athena.ListNamedQueriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListNamedQueries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNamedQueriesAsync(ctx workflow.Context, input *athena.ListNamedQueriesInput) *ListNamedQueriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListNamedQueries", input)
	return &ListNamedQueriesFuture{Future: future}
}

func (a *stub) ListQueryExecutions(ctx workflow.Context, input *athena.ListQueryExecutionsInput) (*athena.ListQueryExecutionsOutput, error) {
	var output athena.ListQueryExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListQueryExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueryExecutionsAsync(ctx workflow.Context, input *athena.ListQueryExecutionsInput) *ListQueryExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListQueryExecutions", input)
	return &ListQueryExecutionsFuture{Future: future}
}

func (a *stub) ListTableMetadata(ctx workflow.Context, input *athena.ListTableMetadataInput) (*athena.ListTableMetadataOutput, error) {
	var output athena.ListTableMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListTableMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTableMetadataAsync(ctx workflow.Context, input *athena.ListTableMetadataInput) *ListTableMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListTableMetadata", input)
	return &ListTableMetadataFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *athena.ListTagsForResourceInput) (*athena.ListTagsForResourceOutput, error) {
	var output athena.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *athena.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWorkGroups(ctx workflow.Context, input *athena.ListWorkGroupsInput) (*athena.ListWorkGroupsOutput, error) {
	var output athena.ListWorkGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-ListWorkGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkGroupsAsync(ctx workflow.Context, input *athena.ListWorkGroupsInput) *ListWorkGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-ListWorkGroups", input)
	return &ListWorkGroupsFuture{Future: future}
}

func (a *stub) StartQueryExecution(ctx workflow.Context, input *athena.StartQueryExecutionInput) (*athena.StartQueryExecutionOutput, error) {
	var output athena.StartQueryExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-StartQueryExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartQueryExecutionAsync(ctx workflow.Context, input *athena.StartQueryExecutionInput) *StartQueryExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-StartQueryExecution", input)
	return &StartQueryExecutionFuture{Future: future}
}

func (a *stub) StopQueryExecution(ctx workflow.Context, input *athena.StopQueryExecutionInput) (*athena.StopQueryExecutionOutput, error) {
	var output athena.StopQueryExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-StopQueryExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopQueryExecutionAsync(ctx workflow.Context, input *athena.StopQueryExecutionInput) *StopQueryExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-StopQueryExecution", input)
	return &StopQueryExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *athena.TagResourceInput) (*athena.TagResourceOutput, error) {
	var output athena.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *athena.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *athena.UntagResourceInput) (*athena.UntagResourceOutput, error) {
	var output athena.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *athena.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDataCatalog(ctx workflow.Context, input *athena.UpdateDataCatalogInput) (*athena.UpdateDataCatalogOutput, error) {
	var output athena.UpdateDataCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-UpdateDataCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataCatalogAsync(ctx workflow.Context, input *athena.UpdateDataCatalogInput) *UpdateDataCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-UpdateDataCatalog", input)
	return &UpdateDataCatalogFuture{Future: future}
}

func (a *stub) UpdateWorkGroup(ctx workflow.Context, input *athena.UpdateWorkGroupInput) (*athena.UpdateWorkGroupOutput, error) {
	var output athena.UpdateWorkGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-athena-UpdateWorkGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkGroupAsync(ctx workflow.Context, input *athena.UpdateWorkGroupInput) *UpdateWorkGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-athena-UpdateWorkGroup", input)
	return &UpdateWorkGroupFuture{Future: future}
}
