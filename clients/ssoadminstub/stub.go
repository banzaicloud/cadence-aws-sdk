// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ssoadminstub

import (
	"github.com/aws/aws-sdk-go/service/ssoadmin"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AttachManagedPolicyToPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachManagedPolicyToPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	var output ssoadmin.AttachManagedPolicyToPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccountAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccountAssignmentFuture) Get(ctx workflow.Context) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	var output ssoadmin.CreateAccountAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceAccessControlAttributeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceAccessControlAttributeConfigurationFuture) Get(ctx workflow.Context) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.CreatePermissionSetOutput, error) {
	var output ssoadmin.CreatePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountAssignmentFuture) Get(ctx workflow.Context) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	var output ssoadmin.DeleteAccountAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInlinePolicyFromPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInlinePolicyFromPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DeleteInlinePolicyFromPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceAccessControlAttributeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceAccessControlAttributeConfigurationFuture) Get(ctx workflow.Context) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DeletePermissionSetOutput, error) {
	var output ssoadmin.DeletePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAssignmentCreationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAssignmentCreationStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAssignmentDeletionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAssignmentDeletionStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceAccessControlAttributeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceAccessControlAttributeConfigurationFuture) Get(ctx workflow.Context) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DescribePermissionSetOutput, error) {
	var output ssoadmin.DescribePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePermissionSetProvisioningStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePermissionSetProvisioningStatusFuture) Get(ctx workflow.Context) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.DescribePermissionSetProvisioningStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachManagedPolicyFromPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachManagedPolicyFromPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DetachManagedPolicyFromPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInlinePolicyForPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInlinePolicyForPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	var output ssoadmin.GetInlinePolicyForPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountAssignmentCreationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountAssignmentCreationStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentCreationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountAssignmentDeletionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountAssignmentDeletionStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountAssignmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountAssignmentsFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	var output ssoadmin.ListAccountAssignmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountsForProvisionedPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountsForProvisionedPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	var output ssoadmin.ListAccountsForProvisionedPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInstancesFuture) Get(ctx workflow.Context) (*ssoadmin.ListInstancesOutput, error) {
	var output ssoadmin.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListManagedPoliciesInPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListManagedPoliciesInPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	var output ssoadmin.ListManagedPoliciesInPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionSetProvisioningStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionSetProvisioningStatusFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.ListPermissionSetProvisioningStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionSetsFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetsOutput, error) {
	var output ssoadmin.ListPermissionSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionSetsProvisionedToAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionSetsProvisionedToAccountFuture) Get(ctx workflow.Context) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	var output ssoadmin.ListPermissionSetsProvisionedToAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*ssoadmin.ListTagsForResourceOutput, error) {
	var output ssoadmin.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ProvisionPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ProvisionPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	var output ssoadmin.ProvisionPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutInlinePolicyToPermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutInlinePolicyToPermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	var output ssoadmin.PutInlinePolicyToPermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*ssoadmin.TagResourceOutput, error) {
	var output ssoadmin.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*ssoadmin.UntagResourceOutput, error) {
	var output ssoadmin.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInstanceAccessControlAttributeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInstanceAccessControlAttributeConfigurationFuture) Get(ctx workflow.Context) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePermissionSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePermissionSetFuture) Get(ctx workflow.Context) (*ssoadmin.UpdatePermissionSetOutput, error) {
	var output ssoadmin.UpdatePermissionSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachManagedPolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	var output ssoadmin.AttachManagedPolicyToPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-AttachManagedPolicyToPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachManagedPolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.AttachManagedPolicyToPermissionSetInput) *AttachManagedPolicyToPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-AttachManagedPolicyToPermissionSet", input)
	return &AttachManagedPolicyToPermissionSetFuture{Future: future}
}

func (a *stub) CreateAccountAssignment(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	var output ssoadmin.CreateAccountAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreateAccountAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.CreateAccountAssignmentInput) *CreateAccountAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreateAccountAssignment", input)
	return &CreateAccountAssignmentFuture{Future: future}
}

func (a *stub) CreateInstanceAccessControlAttributeConfiguration(ctx workflow.Context, input *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreateInstanceAccessControlAttributeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceAccessControlAttributeConfigurationAsync(ctx workflow.Context, input *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput) *CreateInstanceAccessControlAttributeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreateInstanceAccessControlAttributeConfiguration", input)
	return &CreateInstanceAccessControlAttributeConfigurationFuture{Future: future}
}

func (a *stub) CreatePermissionSet(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) (*ssoadmin.CreatePermissionSetOutput, error) {
	var output ssoadmin.CreatePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreatePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.CreatePermissionSetInput) *CreatePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-CreatePermissionSet", input)
	return &CreatePermissionSetFuture{Future: future}
}

func (a *stub) DeleteAccountAssignment(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	var output ssoadmin.DeleteAccountAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteAccountAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountAssignmentAsync(ctx workflow.Context, input *ssoadmin.DeleteAccountAssignmentInput) *DeleteAccountAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteAccountAssignment", input)
	return &DeleteAccountAssignmentFuture{Future: future}
}

func (a *stub) DeleteInlinePolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DeleteInlinePolicyFromPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteInlinePolicyFromPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInlinePolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeleteInlinePolicyFromPermissionSetInput) *DeleteInlinePolicyFromPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteInlinePolicyFromPermissionSet", input)
	return &DeleteInlinePolicyFromPermissionSetFuture{Future: future}
}

func (a *stub) DeleteInstanceAccessControlAttributeConfiguration(ctx workflow.Context, input *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteInstanceAccessControlAttributeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceAccessControlAttributeConfigurationAsync(ctx workflow.Context, input *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput) *DeleteInstanceAccessControlAttributeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeleteInstanceAccessControlAttributeConfiguration", input)
	return &DeleteInstanceAccessControlAttributeConfigurationFuture{Future: future}
}

func (a *stub) DeletePermissionSet(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) (*ssoadmin.DeletePermissionSetOutput, error) {
	var output ssoadmin.DeletePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeletePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DeletePermissionSetInput) *DeletePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DeletePermissionSet", input)
	return &DeletePermissionSetFuture{Future: future}
}

func (a *stub) DescribeAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeAccountAssignmentCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentCreationStatusInput) *DescribeAccountAssignmentCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeAccountAssignmentCreationStatus", input)
	return &DescribeAccountAssignmentCreationStatusFuture{Future: future}
}

func (a *stub) DescribeAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.DescribeAccountAssignmentDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeAccountAssignmentDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.DescribeAccountAssignmentDeletionStatusInput) *DescribeAccountAssignmentDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeAccountAssignmentDeletionStatus", input)
	return &DescribeAccountAssignmentDeletionStatusFuture{Future: future}
}

func (a *stub) DescribeInstanceAccessControlAttributeConfiguration(ctx workflow.Context, input *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeInstanceAccessControlAttributeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceAccessControlAttributeConfigurationAsync(ctx workflow.Context, input *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput) *DescribeInstanceAccessControlAttributeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribeInstanceAccessControlAttributeConfiguration", input)
	return &DescribeInstanceAccessControlAttributeConfigurationFuture{Future: future}
}

func (a *stub) DescribePermissionSet(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) (*ssoadmin.DescribePermissionSetOutput, error) {
	var output ssoadmin.DescribePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePermissionSetAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetInput) *DescribePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribePermissionSet", input)
	return &DescribePermissionSetFuture{Future: future}
}

func (a *stub) DescribePermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.DescribePermissionSetProvisioningStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribePermissionSetProvisioningStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.DescribePermissionSetProvisioningStatusInput) *DescribePermissionSetProvisioningStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DescribePermissionSetProvisioningStatus", input)
	return &DescribePermissionSetProvisioningStatusFuture{Future: future}
}

func (a *stub) DetachManagedPolicyFromPermissionSet(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	var output ssoadmin.DetachManagedPolicyFromPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DetachManagedPolicyFromPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachManagedPolicyFromPermissionSetAsync(ctx workflow.Context, input *ssoadmin.DetachManagedPolicyFromPermissionSetInput) *DetachManagedPolicyFromPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-DetachManagedPolicyFromPermissionSet", input)
	return &DetachManagedPolicyFromPermissionSetFuture{Future: future}
}

func (a *stub) GetInlinePolicyForPermissionSet(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	var output ssoadmin.GetInlinePolicyForPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-GetInlinePolicyForPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInlinePolicyForPermissionSetAsync(ctx workflow.Context, input *ssoadmin.GetInlinePolicyForPermissionSetInput) *GetInlinePolicyForPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-GetInlinePolicyForPermissionSet", input)
	return &GetInlinePolicyForPermissionSetFuture{Future: future}
}

func (a *stub) ListAccountAssignmentCreationStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentCreationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignmentCreationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountAssignmentCreationStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentCreationStatusInput) *ListAccountAssignmentCreationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignmentCreationStatus", input)
	return &ListAccountAssignmentCreationStatusFuture{Future: future}
}

func (a *stub) ListAccountAssignmentDeletionStatus(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	var output ssoadmin.ListAccountAssignmentDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignmentDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountAssignmentDeletionStatusAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentDeletionStatusInput) *ListAccountAssignmentDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignmentDeletionStatus", input)
	return &ListAccountAssignmentDeletionStatusFuture{Future: future}
}

func (a *stub) ListAccountAssignments(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	var output ssoadmin.ListAccountAssignmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountAssignmentsAsync(ctx workflow.Context, input *ssoadmin.ListAccountAssignmentsInput) *ListAccountAssignmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountAssignments", input)
	return &ListAccountAssignmentsFuture{Future: future}
}

func (a *stub) ListAccountsForProvisionedPermissionSet(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	var output ssoadmin.ListAccountsForProvisionedPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountsForProvisionedPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountsForProvisionedPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListAccountsForProvisionedPermissionSetInput) *ListAccountsForProvisionedPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListAccountsForProvisionedPermissionSet", input)
	return &ListAccountsForProvisionedPermissionSetFuture{Future: future}
}

func (a *stub) ListInstances(ctx workflow.Context, input *ssoadmin.ListInstancesInput) (*ssoadmin.ListInstancesOutput, error) {
	var output ssoadmin.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstancesAsync(ctx workflow.Context, input *ssoadmin.ListInstancesInput) *ListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListInstances", input)
	return &ListInstancesFuture{Future: future}
}

func (a *stub) ListManagedPoliciesInPermissionSet(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	var output ssoadmin.ListManagedPoliciesInPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListManagedPoliciesInPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListManagedPoliciesInPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ListManagedPoliciesInPermissionSetInput) *ListManagedPoliciesInPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListManagedPoliciesInPermissionSet", input)
	return &ListManagedPoliciesInPermissionSetFuture{Future: future}
}

func (a *stub) ListPermissionSetProvisioningStatus(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	var output ssoadmin.ListPermissionSetProvisioningStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSetProvisioningStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionSetProvisioningStatusAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetProvisioningStatusInput) *ListPermissionSetProvisioningStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSetProvisioningStatus", input)
	return &ListPermissionSetProvisioningStatusFuture{Future: future}
}

func (a *stub) ListPermissionSets(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) (*ssoadmin.ListPermissionSetsOutput, error) {
	var output ssoadmin.ListPermissionSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionSetsAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsInput) *ListPermissionSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSets", input)
	return &ListPermissionSetsFuture{Future: future}
}

func (a *stub) ListPermissionSetsProvisionedToAccount(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	var output ssoadmin.ListPermissionSetsProvisionedToAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSetsProvisionedToAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionSetsProvisionedToAccountAsync(ctx workflow.Context, input *ssoadmin.ListPermissionSetsProvisionedToAccountInput) *ListPermissionSetsProvisionedToAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListPermissionSetsProvisionedToAccount", input)
	return &ListPermissionSetsProvisionedToAccountFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) (*ssoadmin.ListTagsForResourceOutput, error) {
	var output ssoadmin.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *ssoadmin.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ProvisionPermissionSet(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	var output ssoadmin.ProvisionPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ProvisionPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ProvisionPermissionSetAsync(ctx workflow.Context, input *ssoadmin.ProvisionPermissionSetInput) *ProvisionPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-ProvisionPermissionSet", input)
	return &ProvisionPermissionSetFuture{Future: future}
}

func (a *stub) PutInlinePolicyToPermissionSet(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	var output ssoadmin.PutInlinePolicyToPermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-PutInlinePolicyToPermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutInlinePolicyToPermissionSetAsync(ctx workflow.Context, input *ssoadmin.PutInlinePolicyToPermissionSetInput) *PutInlinePolicyToPermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-PutInlinePolicyToPermissionSet", input)
	return &PutInlinePolicyToPermissionSetFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *ssoadmin.TagResourceInput) (*ssoadmin.TagResourceOutput, error) {
	var output ssoadmin.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *ssoadmin.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *ssoadmin.UntagResourceInput) (*ssoadmin.UntagResourceOutput, error) {
	var output ssoadmin.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *ssoadmin.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateInstanceAccessControlAttributeConfiguration(ctx workflow.Context, input *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error) {
	var output ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UpdateInstanceAccessControlAttributeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceAccessControlAttributeConfigurationAsync(ctx workflow.Context, input *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput) *UpdateInstanceAccessControlAttributeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UpdateInstanceAccessControlAttributeConfiguration", input)
	return &UpdateInstanceAccessControlAttributeConfigurationFuture{Future: future}
}

func (a *stub) UpdatePermissionSet(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) (*ssoadmin.UpdatePermissionSetOutput, error) {
	var output ssoadmin.UpdatePermissionSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UpdatePermissionSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePermissionSetAsync(ctx workflow.Context, input *ssoadmin.UpdatePermissionSetInput) *UpdatePermissionSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ssoadmin-UpdatePermissionSet", input)
	return &UpdatePermissionSetFuture{Future: future}
}
