// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package codestarconnectionsstub

import (
	"github.com/aws/aws-sdk-go/service/codestarconnections"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeStarConnectionsCreateConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsCreateConnectionFuture) Get(ctx workflow.Context) (*codestarconnections.CreateConnectionOutput, error) {
	var output codestarconnections.CreateConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsCreateHostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsCreateHostFuture) Get(ctx workflow.Context) (*codestarconnections.CreateHostOutput, error) {
	var output codestarconnections.CreateHostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsDeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsDeleteConnectionFuture) Get(ctx workflow.Context) (*codestarconnections.DeleteConnectionOutput, error) {
	var output codestarconnections.DeleteConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsDeleteHostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsDeleteHostFuture) Get(ctx workflow.Context) (*codestarconnections.DeleteHostOutput, error) {
	var output codestarconnections.DeleteHostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsGetConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsGetConnectionFuture) Get(ctx workflow.Context) (*codestarconnections.GetConnectionOutput, error) {
	var output codestarconnections.GetConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsGetHostFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsGetHostFuture) Get(ctx workflow.Context) (*codestarconnections.GetHostOutput, error) {
	var output codestarconnections.GetHostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsListConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsListConnectionsFuture) Get(ctx workflow.Context) (*codestarconnections.ListConnectionsOutput, error) {
	var output codestarconnections.ListConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsListHostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsListHostsFuture) Get(ctx workflow.Context) (*codestarconnections.ListHostsOutput, error) {
	var output codestarconnections.ListHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsListTagsForResourceFuture) Get(ctx workflow.Context) (*codestarconnections.ListTagsForResourceOutput, error) {
	var output codestarconnections.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsTagResourceFuture) Get(ctx workflow.Context) (*codestarconnections.TagResourceOutput, error) {
	var output codestarconnections.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarConnectionsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarConnectionsUntagResourceFuture) Get(ctx workflow.Context) (*codestarconnections.UntagResourceOutput, error) {
	var output codestarconnections.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnection(ctx workflow.Context, input *codestarconnections.CreateConnectionInput) (*codestarconnections.CreateConnectionOutput, error) {
	var output codestarconnections.CreateConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAsync(ctx workflow.Context, input *codestarconnections.CreateConnectionInput) *CodeStarConnectionsCreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-CreateConnection", input)
	return &CodeStarConnectionsCreateConnectionFuture{Future: future}
}

func (a *stub) CreateHost(ctx workflow.Context, input *codestarconnections.CreateHostInput) (*codestarconnections.CreateHostOutput, error) {
	var output codestarconnections.CreateHostOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-CreateHost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHostAsync(ctx workflow.Context, input *codestarconnections.CreateHostInput) *CodeStarConnectionsCreateHostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-CreateHost", input)
	return &CodeStarConnectionsCreateHostFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *codestarconnections.DeleteConnectionInput) (*codestarconnections.DeleteConnectionOutput, error) {
	var output codestarconnections.DeleteConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *codestarconnections.DeleteConnectionInput) *CodeStarConnectionsDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-DeleteConnection", input)
	return &CodeStarConnectionsDeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteHost(ctx workflow.Context, input *codestarconnections.DeleteHostInput) (*codestarconnections.DeleteHostOutput, error) {
	var output codestarconnections.DeleteHostOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-DeleteHost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHostAsync(ctx workflow.Context, input *codestarconnections.DeleteHostInput) *CodeStarConnectionsDeleteHostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-DeleteHost", input)
	return &CodeStarConnectionsDeleteHostFuture{Future: future}
}

func (a *stub) GetConnection(ctx workflow.Context, input *codestarconnections.GetConnectionInput) (*codestarconnections.GetConnectionOutput, error) {
	var output codestarconnections.GetConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-GetConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectionAsync(ctx workflow.Context, input *codestarconnections.GetConnectionInput) *CodeStarConnectionsGetConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-GetConnection", input)
	return &CodeStarConnectionsGetConnectionFuture{Future: future}
}

func (a *stub) GetHost(ctx workflow.Context, input *codestarconnections.GetHostInput) (*codestarconnections.GetHostOutput, error) {
	var output codestarconnections.GetHostOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-GetHost", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostAsync(ctx workflow.Context, input *codestarconnections.GetHostInput) *CodeStarConnectionsGetHostFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-GetHost", input)
	return &CodeStarConnectionsGetHostFuture{Future: future}
}

func (a *stub) ListConnections(ctx workflow.Context, input *codestarconnections.ListConnectionsInput) (*codestarconnections.ListConnectionsOutput, error) {
	var output codestarconnections.ListConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectionsAsync(ctx workflow.Context, input *codestarconnections.ListConnectionsInput) *CodeStarConnectionsListConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListConnections", input)
	return &CodeStarConnectionsListConnectionsFuture{Future: future}
}

func (a *stub) ListHosts(ctx workflow.Context, input *codestarconnections.ListHostsInput) (*codestarconnections.ListHostsOutput, error) {
	var output codestarconnections.ListHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHostsAsync(ctx workflow.Context, input *codestarconnections.ListHostsInput) *CodeStarConnectionsListHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListHosts", input)
	return &CodeStarConnectionsListHostsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codestarconnections.ListTagsForResourceInput) (*codestarconnections.ListTagsForResourceOutput, error) {
	var output codestarconnections.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codestarconnections.ListTagsForResourceInput) *CodeStarConnectionsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-ListTagsForResource", input)
	return &CodeStarConnectionsListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codestarconnections.TagResourceInput) (*codestarconnections.TagResourceOutput, error) {
	var output codestarconnections.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codestarconnections.TagResourceInput) *CodeStarConnectionsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-TagResource", input)
	return &CodeStarConnectionsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codestarconnections.UntagResourceInput) (*codestarconnections.UntagResourceOutput, error) {
	var output codestarconnections.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarconnections-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codestarconnections.UntagResourceInput) *CodeStarConnectionsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarconnections-UntagResource", input)
	return &CodeStarConnectionsUntagResourceFuture{Future: future}
}
