// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kinesisvideoarchivedmediastub

import (
	"github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type GetClipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetClipFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetClipOutput, error) {
	var output kinesisvideoarchivedmedia.GetClipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDASHStreamingSessionURLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDASHStreamingSessionURLFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetHLSStreamingSessionURLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetHLSStreamingSessionURLFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMediaForFragmentListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMediaForFragmentListFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	var output kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFragmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFragmentsFuture) Get(ctx workflow.Context) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	var output kinesisvideoarchivedmedia.ListFragmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClip(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) (*kinesisvideoarchivedmedia.GetClipOutput, error) {
	var output kinesisvideoarchivedmedia.GetClipOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetClip", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetClipAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetClipInput) *GetClipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetClip", input)
	return &GetClipFuture{Future: future}
}

func (a *stub) GetDASHStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetDASHStreamingSessionURL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDASHStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) *GetDASHStreamingSessionURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetDASHStreamingSessionURL", input)
	return &GetDASHStreamingSessionURLFuture{Future: future}
}

func (a *stub) GetHLSStreamingSessionURL(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {
	var output kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetHLSStreamingSessionURL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHLSStreamingSessionURLAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) *GetHLSStreamingSessionURLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetHLSStreamingSessionURL", input)
	return &GetHLSStreamingSessionURLFuture{Future: future}
}

func (a *stub) GetMediaForFragmentList(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	var output kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetMediaForFragmentList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMediaForFragmentListAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) *GetMediaForFragmentListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-GetMediaForFragmentList", input)
	return &GetMediaForFragmentListFuture{Future: future}
}

func (a *stub) ListFragments(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	var output kinesisvideoarchivedmedia.ListFragmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-ListFragments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFragmentsAsync(ctx workflow.Context, input *kinesisvideoarchivedmedia.ListFragmentsInput) *ListFragmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideoarchivedmedia-ListFragments", input)
	return &ListFragmentsFuture{Future: future}
}
