// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package s3controlstub

import (
	"github.com/aws/aws-sdk-go/service/s3control"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccessPointFuture) Get(ctx workflow.Context) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBucketFuture) Get(ctx workflow.Context) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateJobFuture) Get(ctx workflow.Context) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessPointFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteJobTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStorageLensConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStorageLensConfigurationFuture) Get(ctx workflow.Context) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	var output s3control.DeleteStorageLensConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStorageLensConfigurationTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStorageLensConfigurationTaggingFuture) Get(ctx workflow.Context) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	var output s3control.DeleteStorageLensConfigurationTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeJobFuture) Get(ctx workflow.Context) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessPointFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessPointPolicyStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessPointPolicyStatusFuture) Get(ctx workflow.Context) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketFuture) Get(ctx workflow.Context) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobTaggingFuture) Get(ctx workflow.Context) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStorageLensConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStorageLensConfigurationFuture) Get(ctx workflow.Context) (*s3control.GetStorageLensConfigurationOutput, error) {
	var output s3control.GetStorageLensConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStorageLensConfigurationTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStorageLensConfigurationTaggingFuture) Get(ctx workflow.Context) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	var output s3control.GetStorageLensConfigurationTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccessPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccessPointsFuture) Get(ctx workflow.Context) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobsFuture) Get(ctx workflow.Context) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRegionalBucketsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRegionalBucketsFuture) Get(ctx workflow.Context) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStorageLensConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStorageLensConfigurationsFuture) Get(ctx workflow.Context) (*s3control.ListStorageLensConfigurationsOutput, error) {
	var output s3control.ListStorageLensConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAccessPointPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAccessPointPolicyFuture) Get(ctx workflow.Context) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketLifecycleConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketLifecycleConfigurationFuture) Get(ctx workflow.Context) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketPolicyFuture) Get(ctx workflow.Context) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBucketTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBucketTaggingFuture) Get(ctx workflow.Context) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutJobTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutJobTaggingFuture) Get(ctx workflow.Context) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPublicAccessBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPublicAccessBlockFuture) Get(ctx workflow.Context) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutStorageLensConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutStorageLensConfigurationFuture) Get(ctx workflow.Context) (*s3control.PutStorageLensConfigurationOutput, error) {
	var output s3control.PutStorageLensConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutStorageLensConfigurationTaggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutStorageLensConfigurationTaggingFuture) Get(ctx workflow.Context) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	var output s3control.PutStorageLensConfigurationTaggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobPriorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobPriorityFuture) Get(ctx workflow.Context) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateJobStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateJobStatusFuture) Get(ctx workflow.Context) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPoint(ctx workflow.Context, input *s3control.CreateAccessPointInput) (*s3control.CreateAccessPointOutput, error) {
	var output s3control.CreateAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-CreateAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessPointAsync(ctx workflow.Context, input *s3control.CreateAccessPointInput) *CreateAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-CreateAccessPoint", input)
	return &CreateAccessPointFuture{Future: future}
}

func (a *stub) CreateBucket(ctx workflow.Context, input *s3control.CreateBucketInput) (*s3control.CreateBucketOutput, error) {
	var output s3control.CreateBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-CreateBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBucketAsync(ctx workflow.Context, input *s3control.CreateBucketInput) *CreateBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-CreateBucket", input)
	return &CreateBucketFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *s3control.CreateJobInput) (*s3control.CreateJobOutput, error) {
	var output s3control.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *s3control.CreateJobInput) *CreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-CreateJob", input)
	return &CreateJobFuture{Future: future}
}

func (a *stub) DeleteAccessPoint(ctx workflow.Context, input *s3control.DeleteAccessPointInput) (*s3control.DeleteAccessPointOutput, error) {
	var output s3control.DeleteAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessPointAsync(ctx workflow.Context, input *s3control.DeleteAccessPointInput) *DeleteAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteAccessPoint", input)
	return &DeleteAccessPointFuture{Future: future}
}

func (a *stub) DeleteAccessPointPolicy(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) (*s3control.DeleteAccessPointPolicyOutput, error) {
	var output s3control.DeleteAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessPointPolicyAsync(ctx workflow.Context, input *s3control.DeleteAccessPointPolicyInput) *DeleteAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteAccessPointPolicy", input)
	return &DeleteAccessPointPolicyFuture{Future: future}
}

func (a *stub) DeleteBucket(ctx workflow.Context, input *s3control.DeleteBucketInput) (*s3control.DeleteBucketOutput, error) {
	var output s3control.DeleteBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketAsync(ctx workflow.Context, input *s3control.DeleteBucketInput) *DeleteBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucket", input)
	return &DeleteBucketFuture{Future: future}
}

func (a *stub) DeleteBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	var output s3control.DeleteBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.DeleteBucketLifecycleConfigurationInput) *DeleteBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketLifecycleConfiguration", input)
	return &DeleteBucketLifecycleConfigurationFuture{Future: future}
}

func (a *stub) DeleteBucketPolicy(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) (*s3control.DeleteBucketPolicyOutput, error) {
	var output s3control.DeleteBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketPolicyAsync(ctx workflow.Context, input *s3control.DeleteBucketPolicyInput) *DeleteBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketPolicy", input)
	return &DeleteBucketPolicyFuture{Future: future}
}

func (a *stub) DeleteBucketTagging(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) (*s3control.DeleteBucketTaggingOutput, error) {
	var output s3control.DeleteBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBucketTaggingAsync(ctx workflow.Context, input *s3control.DeleteBucketTaggingInput) *DeleteBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteBucketTagging", input)
	return &DeleteBucketTaggingFuture{Future: future}
}

func (a *stub) DeleteJobTagging(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) (*s3control.DeleteJobTaggingOutput, error) {
	var output s3control.DeleteJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobTaggingAsync(ctx workflow.Context, input *s3control.DeleteJobTaggingInput) *DeleteJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteJobTagging", input)
	return &DeleteJobTaggingFuture{Future: future}
}

func (a *stub) DeletePublicAccessBlock(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) (*s3control.DeletePublicAccessBlockOutput, error) {
	var output s3control.DeletePublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeletePublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePublicAccessBlockAsync(ctx workflow.Context, input *s3control.DeletePublicAccessBlockInput) *DeletePublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeletePublicAccessBlock", input)
	return &DeletePublicAccessBlockFuture{Future: future}
}

func (a *stub) DeleteStorageLensConfiguration(ctx workflow.Context, input *s3control.DeleteStorageLensConfigurationInput) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	var output s3control.DeleteStorageLensConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteStorageLensConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStorageLensConfigurationAsync(ctx workflow.Context, input *s3control.DeleteStorageLensConfigurationInput) *DeleteStorageLensConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteStorageLensConfiguration", input)
	return &DeleteStorageLensConfigurationFuture{Future: future}
}

func (a *stub) DeleteStorageLensConfigurationTagging(ctx workflow.Context, input *s3control.DeleteStorageLensConfigurationTaggingInput) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	var output s3control.DeleteStorageLensConfigurationTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteStorageLensConfigurationTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStorageLensConfigurationTaggingAsync(ctx workflow.Context, input *s3control.DeleteStorageLensConfigurationTaggingInput) *DeleteStorageLensConfigurationTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DeleteStorageLensConfigurationTagging", input)
	return &DeleteStorageLensConfigurationTaggingFuture{Future: future}
}

func (a *stub) DescribeJob(ctx workflow.Context, input *s3control.DescribeJobInput) (*s3control.DescribeJobOutput, error) {
	var output s3control.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobAsync(ctx workflow.Context, input *s3control.DescribeJobInput) *DescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-DescribeJob", input)
	return &DescribeJobFuture{Future: future}
}

func (a *stub) GetAccessPoint(ctx workflow.Context, input *s3control.GetAccessPointInput) (*s3control.GetAccessPointOutput, error) {
	var output s3control.GetAccessPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessPointAsync(ctx workflow.Context, input *s3control.GetAccessPointInput) *GetAccessPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPoint", input)
	return &GetAccessPointFuture{Future: future}
}

func (a *stub) GetAccessPointPolicy(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) (*s3control.GetAccessPointPolicyOutput, error) {
	var output s3control.GetAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessPointPolicyAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyInput) *GetAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPointPolicy", input)
	return &GetAccessPointPolicyFuture{Future: future}
}

func (a *stub) GetAccessPointPolicyStatus(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	var output s3control.GetAccessPointPolicyStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPointPolicyStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessPointPolicyStatusAsync(ctx workflow.Context, input *s3control.GetAccessPointPolicyStatusInput) *GetAccessPointPolicyStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetAccessPointPolicyStatus", input)
	return &GetAccessPointPolicyStatusFuture{Future: future}
}

func (a *stub) GetBucket(ctx workflow.Context, input *s3control.GetBucketInput) (*s3control.GetBucketOutput, error) {
	var output s3control.GetBucketOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucket", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketAsync(ctx workflow.Context, input *s3control.GetBucketInput) *GetBucketFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucket", input)
	return &GetBucketFuture{Future: future}
}

func (a *stub) GetBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	var output s3control.GetBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.GetBucketLifecycleConfigurationInput) *GetBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketLifecycleConfiguration", input)
	return &GetBucketLifecycleConfigurationFuture{Future: future}
}

func (a *stub) GetBucketPolicy(ctx workflow.Context, input *s3control.GetBucketPolicyInput) (*s3control.GetBucketPolicyOutput, error) {
	var output s3control.GetBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketPolicyAsync(ctx workflow.Context, input *s3control.GetBucketPolicyInput) *GetBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketPolicy", input)
	return &GetBucketPolicyFuture{Future: future}
}

func (a *stub) GetBucketTagging(ctx workflow.Context, input *s3control.GetBucketTaggingInput) (*s3control.GetBucketTaggingOutput, error) {
	var output s3control.GetBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBucketTaggingAsync(ctx workflow.Context, input *s3control.GetBucketTaggingInput) *GetBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetBucketTagging", input)
	return &GetBucketTaggingFuture{Future: future}
}

func (a *stub) GetJobTagging(ctx workflow.Context, input *s3control.GetJobTaggingInput) (*s3control.GetJobTaggingOutput, error) {
	var output s3control.GetJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobTaggingAsync(ctx workflow.Context, input *s3control.GetJobTaggingInput) *GetJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetJobTagging", input)
	return &GetJobTaggingFuture{Future: future}
}

func (a *stub) GetPublicAccessBlock(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) (*s3control.GetPublicAccessBlockOutput, error) {
	var output s3control.GetPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPublicAccessBlockAsync(ctx workflow.Context, input *s3control.GetPublicAccessBlockInput) *GetPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetPublicAccessBlock", input)
	return &GetPublicAccessBlockFuture{Future: future}
}

func (a *stub) GetStorageLensConfiguration(ctx workflow.Context, input *s3control.GetStorageLensConfigurationInput) (*s3control.GetStorageLensConfigurationOutput, error) {
	var output s3control.GetStorageLensConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetStorageLensConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStorageLensConfigurationAsync(ctx workflow.Context, input *s3control.GetStorageLensConfigurationInput) *GetStorageLensConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetStorageLensConfiguration", input)
	return &GetStorageLensConfigurationFuture{Future: future}
}

func (a *stub) GetStorageLensConfigurationTagging(ctx workflow.Context, input *s3control.GetStorageLensConfigurationTaggingInput) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	var output s3control.GetStorageLensConfigurationTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-GetStorageLensConfigurationTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStorageLensConfigurationTaggingAsync(ctx workflow.Context, input *s3control.GetStorageLensConfigurationTaggingInput) *GetStorageLensConfigurationTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-GetStorageLensConfigurationTagging", input)
	return &GetStorageLensConfigurationTaggingFuture{Future: future}
}

func (a *stub) ListAccessPoints(ctx workflow.Context, input *s3control.ListAccessPointsInput) (*s3control.ListAccessPointsOutput, error) {
	var output s3control.ListAccessPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-ListAccessPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessPointsAsync(ctx workflow.Context, input *s3control.ListAccessPointsInput) *ListAccessPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-ListAccessPoints", input)
	return &ListAccessPointsFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *s3control.ListJobsInput) (*s3control.ListJobsOutput, error) {
	var output s3control.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *s3control.ListJobsInput) *ListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-ListJobs", input)
	return &ListJobsFuture{Future: future}
}

func (a *stub) ListRegionalBuckets(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) (*s3control.ListRegionalBucketsOutput, error) {
	var output s3control.ListRegionalBucketsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-ListRegionalBuckets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegionalBucketsAsync(ctx workflow.Context, input *s3control.ListRegionalBucketsInput) *ListRegionalBucketsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-ListRegionalBuckets", input)
	return &ListRegionalBucketsFuture{Future: future}
}

func (a *stub) ListStorageLensConfigurations(ctx workflow.Context, input *s3control.ListStorageLensConfigurationsInput) (*s3control.ListStorageLensConfigurationsOutput, error) {
	var output s3control.ListStorageLensConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-ListStorageLensConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStorageLensConfigurationsAsync(ctx workflow.Context, input *s3control.ListStorageLensConfigurationsInput) *ListStorageLensConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-ListStorageLensConfigurations", input)
	return &ListStorageLensConfigurationsFuture{Future: future}
}

func (a *stub) PutAccessPointPolicy(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) (*s3control.PutAccessPointPolicyOutput, error) {
	var output s3control.PutAccessPointPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutAccessPointPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAccessPointPolicyAsync(ctx workflow.Context, input *s3control.PutAccessPointPolicyInput) *PutAccessPointPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutAccessPointPolicy", input)
	return &PutAccessPointPolicyFuture{Future: future}
}

func (a *stub) PutBucketLifecycleConfiguration(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	var output s3control.PutBucketLifecycleConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketLifecycleConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketLifecycleConfigurationAsync(ctx workflow.Context, input *s3control.PutBucketLifecycleConfigurationInput) *PutBucketLifecycleConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketLifecycleConfiguration", input)
	return &PutBucketLifecycleConfigurationFuture{Future: future}
}

func (a *stub) PutBucketPolicy(ctx workflow.Context, input *s3control.PutBucketPolicyInput) (*s3control.PutBucketPolicyOutput, error) {
	var output s3control.PutBucketPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketPolicyAsync(ctx workflow.Context, input *s3control.PutBucketPolicyInput) *PutBucketPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketPolicy", input)
	return &PutBucketPolicyFuture{Future: future}
}

func (a *stub) PutBucketTagging(ctx workflow.Context, input *s3control.PutBucketTaggingInput) (*s3control.PutBucketTaggingOutput, error) {
	var output s3control.PutBucketTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBucketTaggingAsync(ctx workflow.Context, input *s3control.PutBucketTaggingInput) *PutBucketTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutBucketTagging", input)
	return &PutBucketTaggingFuture{Future: future}
}

func (a *stub) PutJobTagging(ctx workflow.Context, input *s3control.PutJobTaggingInput) (*s3control.PutJobTaggingOutput, error) {
	var output s3control.PutJobTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutJobTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutJobTaggingAsync(ctx workflow.Context, input *s3control.PutJobTaggingInput) *PutJobTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutJobTagging", input)
	return &PutJobTaggingFuture{Future: future}
}

func (a *stub) PutPublicAccessBlock(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) (*s3control.PutPublicAccessBlockOutput, error) {
	var output s3control.PutPublicAccessBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutPublicAccessBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPublicAccessBlockAsync(ctx workflow.Context, input *s3control.PutPublicAccessBlockInput) *PutPublicAccessBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutPublicAccessBlock", input)
	return &PutPublicAccessBlockFuture{Future: future}
}

func (a *stub) PutStorageLensConfiguration(ctx workflow.Context, input *s3control.PutStorageLensConfigurationInput) (*s3control.PutStorageLensConfigurationOutput, error) {
	var output s3control.PutStorageLensConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutStorageLensConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutStorageLensConfigurationAsync(ctx workflow.Context, input *s3control.PutStorageLensConfigurationInput) *PutStorageLensConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutStorageLensConfiguration", input)
	return &PutStorageLensConfigurationFuture{Future: future}
}

func (a *stub) PutStorageLensConfigurationTagging(ctx workflow.Context, input *s3control.PutStorageLensConfigurationTaggingInput) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	var output s3control.PutStorageLensConfigurationTaggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-PutStorageLensConfigurationTagging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutStorageLensConfigurationTaggingAsync(ctx workflow.Context, input *s3control.PutStorageLensConfigurationTaggingInput) *PutStorageLensConfigurationTaggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-PutStorageLensConfigurationTagging", input)
	return &PutStorageLensConfigurationTaggingFuture{Future: future}
}

func (a *stub) UpdateJobPriority(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) (*s3control.UpdateJobPriorityOutput, error) {
	var output s3control.UpdateJobPriorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-UpdateJobPriority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobPriorityAsync(ctx workflow.Context, input *s3control.UpdateJobPriorityInput) *UpdateJobPriorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-UpdateJobPriority", input)
	return &UpdateJobPriorityFuture{Future: future}
}

func (a *stub) UpdateJobStatus(ctx workflow.Context, input *s3control.UpdateJobStatusInput) (*s3control.UpdateJobStatusOutput, error) {
	var output s3control.UpdateJobStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-s3control-UpdateJobStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobStatusAsync(ctx workflow.Context, input *s3control.UpdateJobStatusInput) *UpdateJobStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-s3control-UpdateJobStatus", input)
	return &UpdateJobStatusFuture{Future: future}
}
