// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workspacesstub

import (
	"github.com/aws/aws-sdk-go/service/workspaces"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type WorkSpacesAssociateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesAssociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesAssociateIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesAssociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesAuthorizeIpRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesAuthorizeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesCopyWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesCopyWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesCreateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesCreateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesCreateIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesCreateIpGroupFuture) Get(ctx workflow.Context) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesCreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesCreateTagsFuture) Get(ctx workflow.Context) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesCreateWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesCreateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDeleteConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDeleteConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDeleteIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDeleteIpGroupFuture) Get(ctx workflow.Context) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDeleteTagsFuture) Get(ctx workflow.Context) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDeleteWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDeleteWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDeregisterWorkspaceDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDeregisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeAccountFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeAccountModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeAccountModificationsFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeClientPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeConnectionAliasPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeConnectionAliasPermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeConnectionAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeConnectionAliasesFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeTagsFuture) Get(ctx workflow.Context) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspaceBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspaceBundlesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspaceDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspaceDirectoriesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspaceImagePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspaceImagePermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspaceImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspaceImagesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspaceSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspaceSnapshotsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDescribeWorkspacesConnectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDescribeWorkspacesConnectionStatusFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDisassociateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDisassociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesDisassociateIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesDisassociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesImportWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesImportWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesListAvailableManagementCidrRangesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesListAvailableManagementCidrRangesFuture) Get(ctx workflow.Context) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesMigrateWorkspaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesMigrateWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyAccountFuture) Get(ctx workflow.Context) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyClientPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifySelfservicePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifySelfservicePermissionsFuture) Get(ctx workflow.Context) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyWorkspaceAccessPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyWorkspaceAccessPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyWorkspaceCreationPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyWorkspaceCreationPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyWorkspacePropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyWorkspacePropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesModifyWorkspaceStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesModifyWorkspaceStateFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesRebootWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesRebootWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesRebuildWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesRebuildWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesRegisterWorkspaceDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesRegisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesRestoreWorkspaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesRestoreWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesRevokeIpRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesRevokeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesStartWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesStartWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesStopWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesStopWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesTerminateWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesTerminateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesUpdateConnectionAliasPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesUpdateConnectionAliasPermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesUpdateRulesOfIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesUpdateRulesOfIpGroupFuture) Get(ctx workflow.Context) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkSpacesUpdateWorkspaceImagePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkSpacesUpdateWorkspaceImagePermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionAlias(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) *WorkSpacesAssociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateConnectionAlias", input)
	return &WorkSpacesAssociateConnectionAliasFuture{Future: future}
}

func (a *stub) AssociateIpGroups(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateIpGroupsAsync(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) *WorkSpacesAssociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateIpGroups", input)
	return &WorkSpacesAssociateIpGroupsFuture{Future: future}
}

func (a *stub) AuthorizeIpRules(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AuthorizeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeIpRulesAsync(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) *WorkSpacesAuthorizeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AuthorizeIpRules", input)
	return &WorkSpacesAuthorizeIpRulesFuture{Future: future}
}

func (a *stub) CopyWorkspaceImage(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CopyWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyWorkspaceImageAsync(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) *WorkSpacesCopyWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CopyWorkspaceImage", input)
	return &WorkSpacesCopyWorkspaceImageFuture{Future: future}
}

func (a *stub) CreateConnectionAlias(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAliasAsync(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) *WorkSpacesCreateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateConnectionAlias", input)
	return &WorkSpacesCreateConnectionAliasFuture{Future: future}
}

func (a *stub) CreateIpGroup(ctx workflow.Context, input *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIpGroupAsync(ctx workflow.Context, input *workspaces.CreateIpGroupInput) *WorkSpacesCreateIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateIpGroup", input)
	return &WorkSpacesCreateIpGroupFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *workspaces.CreateTagsInput) *WorkSpacesCreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateTags", input)
	return &WorkSpacesCreateTagsFuture{Future: future}
}

func (a *stub) CreateWorkspaces(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkspacesAsync(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) *WorkSpacesCreateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateWorkspaces", input)
	return &WorkSpacesCreateWorkspacesFuture{Future: future}
}

func (a *stub) DeleteConnectionAlias(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAliasAsync(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) *WorkSpacesDeleteConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteConnectionAlias", input)
	return &WorkSpacesDeleteConnectionAliasFuture{Future: future}
}

func (a *stub) DeleteIpGroup(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIpGroupAsync(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) *WorkSpacesDeleteIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteIpGroup", input)
	return &WorkSpacesDeleteIpGroupFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *workspaces.DeleteTagsInput) *WorkSpacesDeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteTags", input)
	return &WorkSpacesDeleteTagsFuture{Future: future}
}

func (a *stub) DeleteWorkspaceImage(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkspaceImageAsync(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) *WorkSpacesDeleteWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteWorkspaceImage", input)
	return &WorkSpacesDeleteWorkspaceImageFuture{Future: future}
}

func (a *stub) DeregisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeregisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) *WorkSpacesDeregisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeregisterWorkspaceDirectory", input)
	return &WorkSpacesDeregisterWorkspaceDirectoryFuture{Future: future}
}

func (a *stub) DescribeAccount(ctx workflow.Context, input *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAsync(ctx workflow.Context, input *workspaces.DescribeAccountInput) *WorkSpacesDescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccount", input)
	return &WorkSpacesDescribeAccountFuture{Future: future}
}

func (a *stub) DescribeAccountModifications(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccountModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountModificationsAsync(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) *WorkSpacesDescribeAccountModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccountModifications", input)
	return &WorkSpacesDescribeAccountModificationsFuture{Future: future}
}

func (a *stub) DescribeClientProperties(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientPropertiesAsync(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) *WorkSpacesDescribeClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeClientProperties", input)
	return &WorkSpacesDescribeClientPropertiesFuture{Future: future}
}

func (a *stub) DescribeConnectionAliasPermissions(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliasPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionAliasPermissionsAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) *WorkSpacesDescribeConnectionAliasPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliasPermissions", input)
	return &WorkSpacesDescribeConnectionAliasPermissionsFuture{Future: future}
}

func (a *stub) DescribeConnectionAliases(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionAliasesAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) *WorkSpacesDescribeConnectionAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliases", input)
	return &WorkSpacesDescribeConnectionAliasesFuture{Future: future}
}

func (a *stub) DescribeIpGroups(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIpGroupsAsync(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) *WorkSpacesDescribeIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeIpGroups", input)
	return &WorkSpacesDescribeIpGroupsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *workspaces.DescribeTagsInput) *WorkSpacesDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeTags", input)
	return &WorkSpacesDescribeTagsFuture{Future: future}
}

func (a *stub) DescribeWorkspaceBundles(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceBundlesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) *WorkSpacesDescribeWorkspaceBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceBundles", input)
	return &WorkSpacesDescribeWorkspaceBundlesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceDirectories(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceDirectoriesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) *WorkSpacesDescribeWorkspaceDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceDirectories", input)
	return &WorkSpacesDescribeWorkspaceDirectoriesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceImagePermissions(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceImagePermissionsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) *WorkSpacesDescribeWorkspaceImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImagePermissions", input)
	return &WorkSpacesDescribeWorkspaceImagePermissionsFuture{Future: future}
}

func (a *stub) DescribeWorkspaceImages(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceImagesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) *WorkSpacesDescribeWorkspaceImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImages", input)
	return &WorkSpacesDescribeWorkspaceImagesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceSnapshots(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceSnapshotsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) *WorkSpacesDescribeWorkspaceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceSnapshots", input)
	return &WorkSpacesDescribeWorkspaceSnapshotsFuture{Future: future}
}

func (a *stub) DescribeWorkspaces(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspacesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) *WorkSpacesDescribeWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaces", input)
	return &WorkSpacesDescribeWorkspacesFuture{Future: future}
}

func (a *stub) DescribeWorkspacesConnectionStatus(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspacesConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspacesConnectionStatusAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) *WorkSpacesDescribeWorkspacesConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspacesConnectionStatus", input)
	return &WorkSpacesDescribeWorkspacesConnectionStatusFuture{Future: future}
}

func (a *stub) DisassociateConnectionAlias(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) *WorkSpacesDisassociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateConnectionAlias", input)
	return &WorkSpacesDisassociateConnectionAliasFuture{Future: future}
}

func (a *stub) DisassociateIpGroups(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateIpGroupsAsync(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) *WorkSpacesDisassociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateIpGroups", input)
	return &WorkSpacesDisassociateIpGroupsFuture{Future: future}
}

func (a *stub) ImportWorkspaceImage(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ImportWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportWorkspaceImageAsync(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) *WorkSpacesImportWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ImportWorkspaceImage", input)
	return &WorkSpacesImportWorkspaceImageFuture{Future: future}
}

func (a *stub) ListAvailableManagementCidrRanges(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ListAvailableManagementCidrRanges", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAvailableManagementCidrRangesAsync(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) *WorkSpacesListAvailableManagementCidrRangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ListAvailableManagementCidrRanges", input)
	return &WorkSpacesListAvailableManagementCidrRangesFuture{Future: future}
}

func (a *stub) MigrateWorkspace(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-MigrateWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MigrateWorkspaceAsync(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) *WorkSpacesMigrateWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-MigrateWorkspace", input)
	return &WorkSpacesMigrateWorkspaceFuture{Future: future}
}

func (a *stub) ModifyAccount(ctx workflow.Context, input *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyAccountAsync(ctx workflow.Context, input *workspaces.ModifyAccountInput) *WorkSpacesModifyAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyAccount", input)
	return &WorkSpacesModifyAccountFuture{Future: future}
}

func (a *stub) ModifyClientProperties(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClientPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) *WorkSpacesModifyClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyClientProperties", input)
	return &WorkSpacesModifyClientPropertiesFuture{Future: future}
}

func (a *stub) ModifySelfservicePermissions(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifySelfservicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySelfservicePermissionsAsync(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) *WorkSpacesModifySelfservicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifySelfservicePermissions", input)
	return &WorkSpacesModifySelfservicePermissionsFuture{Future: future}
}

func (a *stub) ModifyWorkspaceAccessProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceAccessProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceAccessPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) *WorkSpacesModifyWorkspaceAccessPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceAccessProperties", input)
	return &WorkSpacesModifyWorkspaceAccessPropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceCreationProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceCreationProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceCreationPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) *WorkSpacesModifyWorkspaceCreationPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceCreationProperties", input)
	return &WorkSpacesModifyWorkspaceCreationPropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceProperties(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspacePropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) *WorkSpacesModifyWorkspacePropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceProperties", input)
	return &WorkSpacesModifyWorkspacePropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceState(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceStateAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) *WorkSpacesModifyWorkspaceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceState", input)
	return &WorkSpacesModifyWorkspaceStateFuture{Future: future}
}

func (a *stub) RebootWorkspaces(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RebootWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootWorkspacesAsync(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) *WorkSpacesRebootWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RebootWorkspaces", input)
	return &WorkSpacesRebootWorkspacesFuture{Future: future}
}

func (a *stub) RebuildWorkspaces(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RebuildWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebuildWorkspacesAsync(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) *WorkSpacesRebuildWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RebuildWorkspaces", input)
	return &WorkSpacesRebuildWorkspacesFuture{Future: future}
}

func (a *stub) RegisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RegisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) *WorkSpacesRegisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RegisterWorkspaceDirectory", input)
	return &WorkSpacesRegisterWorkspaceDirectoryFuture{Future: future}
}

func (a *stub) RestoreWorkspace(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RestoreWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreWorkspaceAsync(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) *WorkSpacesRestoreWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RestoreWorkspace", input)
	return &WorkSpacesRestoreWorkspaceFuture{Future: future}
}

func (a *stub) RevokeIpRules(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RevokeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeIpRulesAsync(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) *WorkSpacesRevokeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RevokeIpRules", input)
	return &WorkSpacesRevokeIpRulesFuture{Future: future}
}

func (a *stub) StartWorkspaces(ctx workflow.Context, input *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-StartWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartWorkspacesAsync(ctx workflow.Context, input *workspaces.StartWorkspacesInput) *WorkSpacesStartWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-StartWorkspaces", input)
	return &WorkSpacesStartWorkspacesFuture{Future: future}
}

func (a *stub) StopWorkspaces(ctx workflow.Context, input *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-StopWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopWorkspacesAsync(ctx workflow.Context, input *workspaces.StopWorkspacesInput) *WorkSpacesStopWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-StopWorkspaces", input)
	return &WorkSpacesStopWorkspacesFuture{Future: future}
}

func (a *stub) TerminateWorkspaces(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-TerminateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateWorkspacesAsync(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) *WorkSpacesTerminateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-TerminateWorkspaces", input)
	return &WorkSpacesTerminateWorkspacesFuture{Future: future}
}

func (a *stub) UpdateConnectionAliasPermission(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateConnectionAliasPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectionAliasPermissionAsync(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) *WorkSpacesUpdateConnectionAliasPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateConnectionAliasPermission", input)
	return &WorkSpacesUpdateConnectionAliasPermissionFuture{Future: future}
}

func (a *stub) UpdateRulesOfIpGroup(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateRulesOfIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRulesOfIpGroupAsync(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) *WorkSpacesUpdateRulesOfIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateRulesOfIpGroup", input)
	return &WorkSpacesUpdateRulesOfIpGroupFuture{Future: future}
}

func (a *stub) UpdateWorkspaceImagePermission(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateWorkspaceImagePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkspaceImagePermissionAsync(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) *WorkSpacesUpdateWorkspaceImagePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateWorkspaceImagePermission", input)
	return &WorkSpacesUpdateWorkspaceImagePermissionFuture{Future: future}
}
