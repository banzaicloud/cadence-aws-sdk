// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workspacesstub

import (
	"github.com/aws/aws-sdk-go/service/workspaces"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeIpRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIpGroupFuture) Get(ctx workflow.Context) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIpGroupFuture) Get(ctx workflow.Context) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterWorkspaceDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountModificationsFuture) Get(ctx workflow.Context) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionAliasPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionAliasPermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionAliasesFuture) Get(ctx workflow.Context) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspaceBundlesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspaceBundlesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspaceDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspaceDirectoriesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspaceImagePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspaceImagePermissionsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspaceImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspaceImagesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspaceSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspaceSnapshotsFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkspacesConnectionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkspacesConnectionStatusFuture) Get(ctx workflow.Context) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateConnectionAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateConnectionAliasFuture) Get(ctx workflow.Context) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateIpGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateIpGroupsFuture) Get(ctx workflow.Context) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportWorkspaceImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportWorkspaceImageFuture) Get(ctx workflow.Context) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAvailableManagementCidrRangesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAvailableManagementCidrRangesFuture) Get(ctx workflow.Context) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MigrateWorkspaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MigrateWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyAccountFuture) Get(ctx workflow.Context) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClientPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClientPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifySelfservicePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifySelfservicePermissionsFuture) Get(ctx workflow.Context) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyWorkspaceAccessPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyWorkspaceAccessPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyWorkspaceCreationPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyWorkspaceCreationPropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyWorkspacePropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyWorkspacePropertiesFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyWorkspaceStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyWorkspaceStateFuture) Get(ctx workflow.Context) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebuildWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebuildWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterWorkspaceDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterWorkspaceDirectoryFuture) Get(ctx workflow.Context) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreWorkspaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreWorkspaceFuture) Get(ctx workflow.Context) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeIpRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeIpRulesFuture) Get(ctx workflow.Context) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateWorkspacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateWorkspacesFuture) Get(ctx workflow.Context) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConnectionAliasPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConnectionAliasPermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRulesOfIpGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRulesOfIpGroupFuture) Get(ctx workflow.Context) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWorkspaceImagePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWorkspaceImagePermissionFuture) Get(ctx workflow.Context) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionAlias(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error) {
	var output workspaces.AssociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.AssociateConnectionAliasInput) *AssociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateConnectionAlias", input)
	return &AssociateConnectionAliasFuture{Future: future}
}

func (a *stub) AssociateIpGroups(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	var output workspaces.AssociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateIpGroupsAsync(ctx workflow.Context, input *workspaces.AssociateIpGroupsInput) *AssociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AssociateIpGroups", input)
	return &AssociateIpGroupsFuture{Future: future}
}

func (a *stub) AuthorizeIpRules(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	var output workspaces.AuthorizeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-AuthorizeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeIpRulesAsync(ctx workflow.Context, input *workspaces.AuthorizeIpRulesInput) *AuthorizeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-AuthorizeIpRules", input)
	return &AuthorizeIpRulesFuture{Future: future}
}

func (a *stub) CopyWorkspaceImage(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error) {
	var output workspaces.CopyWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CopyWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyWorkspaceImageAsync(ctx workflow.Context, input *workspaces.CopyWorkspaceImageInput) *CopyWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CopyWorkspaceImage", input)
	return &CopyWorkspaceImageFuture{Future: future}
}

func (a *stub) CreateConnectionAlias(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error) {
	var output workspaces.CreateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAliasAsync(ctx workflow.Context, input *workspaces.CreateConnectionAliasInput) *CreateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateConnectionAlias", input)
	return &CreateConnectionAliasFuture{Future: future}
}

func (a *stub) CreateIpGroup(ctx workflow.Context, input *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	var output workspaces.CreateIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIpGroupAsync(ctx workflow.Context, input *workspaces.CreateIpGroupInput) *CreateIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateIpGroup", input)
	return &CreateIpGroupFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	var output workspaces.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *workspaces.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) CreateWorkspaces(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	var output workspaces.CreateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWorkspacesAsync(ctx workflow.Context, input *workspaces.CreateWorkspacesInput) *CreateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-CreateWorkspaces", input)
	return &CreateWorkspacesFuture{Future: future}
}

func (a *stub) DeleteConnectionAlias(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error) {
	var output workspaces.DeleteConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAliasAsync(ctx workflow.Context, input *workspaces.DeleteConnectionAliasInput) *DeleteConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteConnectionAlias", input)
	return &DeleteConnectionAliasFuture{Future: future}
}

func (a *stub) DeleteIpGroup(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	var output workspaces.DeleteIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIpGroupAsync(ctx workflow.Context, input *workspaces.DeleteIpGroupInput) *DeleteIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteIpGroup", input)
	return &DeleteIpGroupFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	var output workspaces.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *workspaces.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DeleteWorkspaceImage(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	var output workspaces.DeleteWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWorkspaceImageAsync(ctx workflow.Context, input *workspaces.DeleteWorkspaceImageInput) *DeleteWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeleteWorkspaceImage", input)
	return &DeleteWorkspaceImageFuture{Future: future}
}

func (a *stub) DeregisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	var output workspaces.DeregisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DeregisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) *DeregisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DeregisterWorkspaceDirectory", input)
	return &DeregisterWorkspaceDirectoryFuture{Future: future}
}

func (a *stub) DescribeAccount(ctx workflow.Context, input *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	var output workspaces.DescribeAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAsync(ctx workflow.Context, input *workspaces.DescribeAccountInput) *DescribeAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccount", input)
	return &DescribeAccountFuture{Future: future}
}

func (a *stub) DescribeAccountModifications(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	var output workspaces.DescribeAccountModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccountModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountModificationsAsync(ctx workflow.Context, input *workspaces.DescribeAccountModificationsInput) *DescribeAccountModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeAccountModifications", input)
	return &DescribeAccountModificationsFuture{Future: future}
}

func (a *stub) DescribeClientProperties(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error) {
	var output workspaces.DescribeClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientPropertiesAsync(ctx workflow.Context, input *workspaces.DescribeClientPropertiesInput) *DescribeClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeClientProperties", input)
	return &DescribeClientPropertiesFuture{Future: future}
}

func (a *stub) DescribeConnectionAliasPermissions(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	var output workspaces.DescribeConnectionAliasPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliasPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionAliasPermissionsAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) *DescribeConnectionAliasPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliasPermissions", input)
	return &DescribeConnectionAliasPermissionsFuture{Future: future}
}

func (a *stub) DescribeConnectionAliases(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error) {
	var output workspaces.DescribeConnectionAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionAliasesAsync(ctx workflow.Context, input *workspaces.DescribeConnectionAliasesInput) *DescribeConnectionAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeConnectionAliases", input)
	return &DescribeConnectionAliasesFuture{Future: future}
}

func (a *stub) DescribeIpGroups(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	var output workspaces.DescribeIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIpGroupsAsync(ctx workflow.Context, input *workspaces.DescribeIpGroupsInput) *DescribeIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeIpGroups", input)
	return &DescribeIpGroupsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	var output workspaces.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *workspaces.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) DescribeWorkspaceBundles(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	var output workspaces.DescribeWorkspaceBundlesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceBundles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceBundlesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceBundlesInput) *DescribeWorkspaceBundlesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceBundles", input)
	return &DescribeWorkspaceBundlesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceDirectories(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	var output workspaces.DescribeWorkspaceDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceDirectoriesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) *DescribeWorkspaceDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceDirectories", input)
	return &DescribeWorkspaceDirectoriesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceImagePermissions(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	var output workspaces.DescribeWorkspaceImagePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImagePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceImagePermissionsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) *DescribeWorkspaceImagePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImagePermissions", input)
	return &DescribeWorkspaceImagePermissionsFuture{Future: future}
}

func (a *stub) DescribeWorkspaceImages(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	var output workspaces.DescribeWorkspaceImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceImagesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceImagesInput) *DescribeWorkspaceImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceImages", input)
	return &DescribeWorkspaceImagesFuture{Future: future}
}

func (a *stub) DescribeWorkspaceSnapshots(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	var output workspaces.DescribeWorkspaceSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspaceSnapshotsAsync(ctx workflow.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) *DescribeWorkspaceSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaceSnapshots", input)
	return &DescribeWorkspaceSnapshotsFuture{Future: future}
}

func (a *stub) DescribeWorkspaces(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	var output workspaces.DescribeWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspacesAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesInput) *DescribeWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspaces", input)
	return &DescribeWorkspacesFuture{Future: future}
}

func (a *stub) DescribeWorkspacesConnectionStatus(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	var output workspaces.DescribeWorkspacesConnectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspacesConnectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkspacesConnectionStatusAsync(ctx workflow.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) *DescribeWorkspacesConnectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DescribeWorkspacesConnectionStatus", input)
	return &DescribeWorkspacesConnectionStatusFuture{Future: future}
}

func (a *stub) DisassociateConnectionAlias(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error) {
	var output workspaces.DisassociateConnectionAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateConnectionAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateConnectionAliasAsync(ctx workflow.Context, input *workspaces.DisassociateConnectionAliasInput) *DisassociateConnectionAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateConnectionAlias", input)
	return &DisassociateConnectionAliasFuture{Future: future}
}

func (a *stub) DisassociateIpGroups(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	var output workspaces.DisassociateIpGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateIpGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateIpGroupsAsync(ctx workflow.Context, input *workspaces.DisassociateIpGroupsInput) *DisassociateIpGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-DisassociateIpGroups", input)
	return &DisassociateIpGroupsFuture{Future: future}
}

func (a *stub) ImportWorkspaceImage(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	var output workspaces.ImportWorkspaceImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ImportWorkspaceImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportWorkspaceImageAsync(ctx workflow.Context, input *workspaces.ImportWorkspaceImageInput) *ImportWorkspaceImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ImportWorkspaceImage", input)
	return &ImportWorkspaceImageFuture{Future: future}
}

func (a *stub) ListAvailableManagementCidrRanges(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	var output workspaces.ListAvailableManagementCidrRangesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ListAvailableManagementCidrRanges", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAvailableManagementCidrRangesAsync(ctx workflow.Context, input *workspaces.ListAvailableManagementCidrRangesInput) *ListAvailableManagementCidrRangesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ListAvailableManagementCidrRanges", input)
	return &ListAvailableManagementCidrRangesFuture{Future: future}
}

func (a *stub) MigrateWorkspace(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error) {
	var output workspaces.MigrateWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-MigrateWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MigrateWorkspaceAsync(ctx workflow.Context, input *workspaces.MigrateWorkspaceInput) *MigrateWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-MigrateWorkspace", input)
	return &MigrateWorkspaceFuture{Future: future}
}

func (a *stub) ModifyAccount(ctx workflow.Context, input *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	var output workspaces.ModifyAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyAccountAsync(ctx workflow.Context, input *workspaces.ModifyAccountInput) *ModifyAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyAccount", input)
	return &ModifyAccountFuture{Future: future}
}

func (a *stub) ModifyClientProperties(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error) {
	var output workspaces.ModifyClientPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyClientProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClientPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyClientPropertiesInput) *ModifyClientPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyClientProperties", input)
	return &ModifyClientPropertiesFuture{Future: future}
}

func (a *stub) ModifySelfservicePermissions(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	var output workspaces.ModifySelfservicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifySelfservicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySelfservicePermissionsAsync(ctx workflow.Context, input *workspaces.ModifySelfservicePermissionsInput) *ModifySelfservicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifySelfservicePermissions", input)
	return &ModifySelfservicePermissionsFuture{Future: future}
}

func (a *stub) ModifyWorkspaceAccessProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceAccessPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceAccessProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceAccessPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) *ModifyWorkspaceAccessPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceAccessProperties", input)
	return &ModifyWorkspaceAccessPropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceCreationProperties(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	var output workspaces.ModifyWorkspaceCreationPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceCreationProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceCreationPropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) *ModifyWorkspaceCreationPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceCreationProperties", input)
	return &ModifyWorkspaceCreationPropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceProperties(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	var output workspaces.ModifyWorkspacePropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspacePropertiesAsync(ctx workflow.Context, input *workspaces.ModifyWorkspacePropertiesInput) *ModifyWorkspacePropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceProperties", input)
	return &ModifyWorkspacePropertiesFuture{Future: future}
}

func (a *stub) ModifyWorkspaceState(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	var output workspaces.ModifyWorkspaceStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyWorkspaceStateAsync(ctx workflow.Context, input *workspaces.ModifyWorkspaceStateInput) *ModifyWorkspaceStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-ModifyWorkspaceState", input)
	return &ModifyWorkspaceStateFuture{Future: future}
}

func (a *stub) RebootWorkspaces(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	var output workspaces.RebootWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RebootWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootWorkspacesAsync(ctx workflow.Context, input *workspaces.RebootWorkspacesInput) *RebootWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RebootWorkspaces", input)
	return &RebootWorkspacesFuture{Future: future}
}

func (a *stub) RebuildWorkspaces(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	var output workspaces.RebuildWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RebuildWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebuildWorkspacesAsync(ctx workflow.Context, input *workspaces.RebuildWorkspacesInput) *RebuildWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RebuildWorkspaces", input)
	return &RebuildWorkspacesFuture{Future: future}
}

func (a *stub) RegisterWorkspaceDirectory(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	var output workspaces.RegisterWorkspaceDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RegisterWorkspaceDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterWorkspaceDirectoryAsync(ctx workflow.Context, input *workspaces.RegisterWorkspaceDirectoryInput) *RegisterWorkspaceDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RegisterWorkspaceDirectory", input)
	return &RegisterWorkspaceDirectoryFuture{Future: future}
}

func (a *stub) RestoreWorkspace(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error) {
	var output workspaces.RestoreWorkspaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RestoreWorkspace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreWorkspaceAsync(ctx workflow.Context, input *workspaces.RestoreWorkspaceInput) *RestoreWorkspaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RestoreWorkspace", input)
	return &RestoreWorkspaceFuture{Future: future}
}

func (a *stub) RevokeIpRules(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	var output workspaces.RevokeIpRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-RevokeIpRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeIpRulesAsync(ctx workflow.Context, input *workspaces.RevokeIpRulesInput) *RevokeIpRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-RevokeIpRules", input)
	return &RevokeIpRulesFuture{Future: future}
}

func (a *stub) StartWorkspaces(ctx workflow.Context, input *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	var output workspaces.StartWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-StartWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartWorkspacesAsync(ctx workflow.Context, input *workspaces.StartWorkspacesInput) *StartWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-StartWorkspaces", input)
	return &StartWorkspacesFuture{Future: future}
}

func (a *stub) StopWorkspaces(ctx workflow.Context, input *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	var output workspaces.StopWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-StopWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopWorkspacesAsync(ctx workflow.Context, input *workspaces.StopWorkspacesInput) *StopWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-StopWorkspaces", input)
	return &StopWorkspacesFuture{Future: future}
}

func (a *stub) TerminateWorkspaces(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	var output workspaces.TerminateWorkspacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-TerminateWorkspaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateWorkspacesAsync(ctx workflow.Context, input *workspaces.TerminateWorkspacesInput) *TerminateWorkspacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-TerminateWorkspaces", input)
	return &TerminateWorkspacesFuture{Future: future}
}

func (a *stub) UpdateConnectionAliasPermission(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	var output workspaces.UpdateConnectionAliasPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateConnectionAliasPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectionAliasPermissionAsync(ctx workflow.Context, input *workspaces.UpdateConnectionAliasPermissionInput) *UpdateConnectionAliasPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateConnectionAliasPermission", input)
	return &UpdateConnectionAliasPermissionFuture{Future: future}
}

func (a *stub) UpdateRulesOfIpGroup(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	var output workspaces.UpdateRulesOfIpGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateRulesOfIpGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRulesOfIpGroupAsync(ctx workflow.Context, input *workspaces.UpdateRulesOfIpGroupInput) *UpdateRulesOfIpGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateRulesOfIpGroup", input)
	return &UpdateRulesOfIpGroupFuture{Future: future}
}

func (a *stub) UpdateWorkspaceImagePermission(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	var output workspaces.UpdateWorkspaceImagePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateWorkspaceImagePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWorkspaceImagePermissionAsync(ctx workflow.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) *UpdateWorkspaceImagePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workspaces-UpdateWorkspaceImagePermission", input)
	return &UpdateWorkspaceImagePermissionFuture{Future: future}
}
