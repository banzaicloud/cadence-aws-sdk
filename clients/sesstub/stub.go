// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sesstub

import (
	"github.com/aws/aws-sdk-go/service/ses"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloneReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloneReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationSetFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationSetEventDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationSetTrackingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCustomVerificationEmailTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReceiptFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReceiptFilterFuture) Get(ctx workflow.Context) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReceiptRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTemplateFuture) Get(ctx workflow.Context) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationSetEventDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationSetTrackingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCustomVerificationEmailTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIdentityFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIdentityPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReceiptFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReceiptFilterFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReceiptRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTemplateFuture) Get(ctx workflow.Context) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVerifiedEmailAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVerifiedEmailAddressFuture) Get(ctx workflow.Context) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeActiveReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationSetFuture) Get(ctx workflow.Context) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReceiptRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReceiptRuleFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountSendingEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCustomVerificationEmailTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityDkimAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityDkimAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityMailFromDomainAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityMailFromDomainAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityNotificationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityNotificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityVerificationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityVerificationAttributesFuture) Get(ctx workflow.Context) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSendQuotaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSendQuotaFuture) Get(ctx workflow.Context) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSendStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSendStatisticsFuture) Get(ctx workflow.Context) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTemplateFuture) Get(ctx workflow.Context) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConfigurationSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConfigurationSetsFuture) Get(ctx workflow.Context) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCustomVerificationEmailTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCustomVerificationEmailTemplatesFuture) Get(ctx workflow.Context) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIdentitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIdentitiesFuture) Get(ctx workflow.Context) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIdentityPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIdentityPoliciesFuture) Get(ctx workflow.Context) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReceiptFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReceiptFiltersFuture) Get(ctx workflow.Context) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReceiptRuleSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReceiptRuleSetsFuture) Get(ctx workflow.Context) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTemplatesFuture) Get(ctx workflow.Context) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVerifiedEmailAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVerifiedEmailAddressesFuture) Get(ctx workflow.Context) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConfigurationSetDeliveryOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConfigurationSetDeliveryOptionsFuture) Get(ctx workflow.Context) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutIdentityPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutIdentityPolicyFuture) Get(ctx workflow.Context) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReorderReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReorderReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendBounceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendBounceFuture) Get(ctx workflow.Context) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendBulkTemplatedEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendBulkTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendCustomVerificationEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendCustomVerificationEmailFuture) Get(ctx workflow.Context) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendEmailFuture) Get(ctx workflow.Context) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendRawEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendRawEmailFuture) Get(ctx workflow.Context) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendTemplatedEmailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendTemplatedEmailFuture) Get(ctx workflow.Context) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetActiveReceiptRuleSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetActiveReceiptRuleSetFuture) Get(ctx workflow.Context) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityDkimEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityDkimEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityFeedbackForwardingEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityFeedbackForwardingEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityHeadersInNotificationsEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityHeadersInNotificationsEnabledFuture) Get(ctx workflow.Context) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityMailFromDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityMailFromDomainFuture) Get(ctx workflow.Context) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityNotificationTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityNotificationTopicFuture) Get(ctx workflow.Context) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetReceiptRulePositionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetReceiptRulePositionFuture) Get(ctx workflow.Context) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TestRenderTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TestRenderTemplateFuture) Get(ctx workflow.Context) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountSendingEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationSetEventDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationSetEventDestinationFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationSetReputationMetricsEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationSetReputationMetricsEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationSetSendingEnabledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationSetSendingEnabledFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationSetTrackingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationSetTrackingOptionsFuture) Get(ctx workflow.Context) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCustomVerificationEmailTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCustomVerificationEmailTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateReceiptRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateReceiptRuleFuture) Get(ctx workflow.Context) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTemplateFuture) Get(ctx workflow.Context) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyDomainDkimFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyDomainDkimFuture) Get(ctx workflow.Context) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyDomainIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyDomainIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyEmailAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyEmailAddressFuture) Get(ctx workflow.Context) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyEmailIdentityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyEmailIdentityFuture) Get(ctx workflow.Context) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CloneReceiptRuleSet(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error) {
	var output ses.CloneReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CloneReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CloneReceiptRuleSetAsync(ctx workflow.Context, input *ses.CloneReceiptRuleSetInput) *CloneReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CloneReceiptRuleSet", input)
	return &CloneReceiptRuleSetFuture{Future: future}
}

func (a *stub) CreateConfigurationSet(ctx workflow.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error) {
	var output ses.CreateConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationSetAsync(ctx workflow.Context, input *ses.CreateConfigurationSetInput) *CreateConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSet", input)
	return &CreateConfigurationSetFuture{Future: future}
}

func (a *stub) CreateConfigurationSetEventDestination(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	var output ses.CreateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.CreateConfigurationSetEventDestinationInput) *CreateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSetEventDestination", input)
	return &CreateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *stub) CreateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.CreateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) *CreateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateConfigurationSetTrackingOptions", input)
	return &CreateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *stub) CreateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	var output ses.CreateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.CreateCustomVerificationEmailTemplateInput) *CreateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateCustomVerificationEmailTemplate", input)
	return &CreateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *stub) CreateReceiptFilter(ctx workflow.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error) {
	var output ses.CreateReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReceiptFilterAsync(ctx workflow.Context, input *ses.CreateReceiptFilterInput) *CreateReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptFilter", input)
	return &CreateReceiptFilterFuture{Future: future}
}

func (a *stub) CreateReceiptRule(ctx workflow.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error) {
	var output ses.CreateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReceiptRuleAsync(ctx workflow.Context, input *ses.CreateReceiptRuleInput) *CreateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptRule", input)
	return &CreateReceiptRuleFuture{Future: future}
}

func (a *stub) CreateReceiptRuleSet(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error) {
	var output ses.CreateReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReceiptRuleSetAsync(ctx workflow.Context, input *ses.CreateReceiptRuleSetInput) *CreateReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateReceiptRuleSet", input)
	return &CreateReceiptRuleSetFuture{Future: future}
}

func (a *stub) CreateTemplate(ctx workflow.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error) {
	var output ses.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTemplateAsync(ctx workflow.Context, input *ses.CreateTemplateInput) *CreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-CreateTemplate", input)
	return &CreateTemplateFuture{Future: future}
}

func (a *stub) DeleteConfigurationSet(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error) {
	var output ses.DeleteConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationSetAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetInput) *DeleteConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSet", input)
	return &DeleteConfigurationSetFuture{Future: future}
}

func (a *stub) DeleteConfigurationSetEventDestination(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	var output ses.DeleteConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetEventDestinationInput) *DeleteConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSetEventDestination", input)
	return &DeleteConfigurationSetEventDestinationFuture{Future: future}
}

func (a *stub) DeleteConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	var output ses.DeleteConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) *DeleteConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteConfigurationSetTrackingOptions", input)
	return &DeleteConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *stub) DeleteCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	var output ses.DeleteCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) *DeleteCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteCustomVerificationEmailTemplate", input)
	return &DeleteCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *stub) DeleteIdentity(ctx workflow.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error) {
	var output ses.DeleteIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIdentityAsync(ctx workflow.Context, input *ses.DeleteIdentityInput) *DeleteIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteIdentity", input)
	return &DeleteIdentityFuture{Future: future}
}

func (a *stub) DeleteIdentityPolicy(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error) {
	var output ses.DeleteIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIdentityPolicyAsync(ctx workflow.Context, input *ses.DeleteIdentityPolicyInput) *DeleteIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteIdentityPolicy", input)
	return &DeleteIdentityPolicyFuture{Future: future}
}

func (a *stub) DeleteReceiptFilter(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error) {
	var output ses.DeleteReceiptFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReceiptFilterAsync(ctx workflow.Context, input *ses.DeleteReceiptFilterInput) *DeleteReceiptFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptFilter", input)
	return &DeleteReceiptFilterFuture{Future: future}
}

func (a *stub) DeleteReceiptRule(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error) {
	var output ses.DeleteReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReceiptRuleAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleInput) *DeleteReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptRule", input)
	return &DeleteReceiptRuleFuture{Future: future}
}

func (a *stub) DeleteReceiptRuleSet(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error) {
	var output ses.DeleteReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReceiptRuleSetAsync(ctx workflow.Context, input *ses.DeleteReceiptRuleSetInput) *DeleteReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteReceiptRuleSet", input)
	return &DeleteReceiptRuleSetFuture{Future: future}
}

func (a *stub) DeleteTemplate(ctx workflow.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error) {
	var output ses.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTemplateAsync(ctx workflow.Context, input *ses.DeleteTemplateInput) *DeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteTemplate", input)
	return &DeleteTemplateFuture{Future: future}
}

func (a *stub) DeleteVerifiedEmailAddress(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	var output ses.DeleteVerifiedEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DeleteVerifiedEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVerifiedEmailAddressAsync(ctx workflow.Context, input *ses.DeleteVerifiedEmailAddressInput) *DeleteVerifiedEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DeleteVerifiedEmailAddress", input)
	return &DeleteVerifiedEmailAddressFuture{Future: future}
}

func (a *stub) DescribeActiveReceiptRuleSet(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	var output ses.DescribeActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DescribeActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeActiveReceiptRuleSetInput) *DescribeActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DescribeActiveReceiptRuleSet", input)
	return &DescribeActiveReceiptRuleSetFuture{Future: future}
}

func (a *stub) DescribeConfigurationSet(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error) {
	var output ses.DescribeConfigurationSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DescribeConfigurationSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationSetAsync(ctx workflow.Context, input *ses.DescribeConfigurationSetInput) *DescribeConfigurationSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DescribeConfigurationSet", input)
	return &DescribeConfigurationSetFuture{Future: future}
}

func (a *stub) DescribeReceiptRule(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error) {
	var output ses.DescribeReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DescribeReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReceiptRuleAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleInput) *DescribeReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DescribeReceiptRule", input)
	return &DescribeReceiptRuleFuture{Future: future}
}

func (a *stub) DescribeReceiptRuleSet(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error) {
	var output ses.DescribeReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-DescribeReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReceiptRuleSetAsync(ctx workflow.Context, input *ses.DescribeReceiptRuleSetInput) *DescribeReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-DescribeReceiptRuleSet", input)
	return &DescribeReceiptRuleSetFuture{Future: future}
}

func (a *stub) GetAccountSendingEnabled(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error) {
	var output ses.GetAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSendingEnabledAsync(ctx workflow.Context, input *ses.GetAccountSendingEnabledInput) *GetAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetAccountSendingEnabled", input)
	return &GetAccountSendingEnabledFuture{Future: future}
}

func (a *stub) GetCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	var output ses.GetCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.GetCustomVerificationEmailTemplateInput) *GetCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetCustomVerificationEmailTemplate", input)
	return &GetCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *stub) GetIdentityDkimAttributes(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error) {
	var output ses.GetIdentityDkimAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityDkimAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityDkimAttributesAsync(ctx workflow.Context, input *ses.GetIdentityDkimAttributesInput) *GetIdentityDkimAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityDkimAttributes", input)
	return &GetIdentityDkimAttributesFuture{Future: future}
}

func (a *stub) GetIdentityMailFromDomainAttributes(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	var output ses.GetIdentityMailFromDomainAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityMailFromDomainAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityMailFromDomainAttributesAsync(ctx workflow.Context, input *ses.GetIdentityMailFromDomainAttributesInput) *GetIdentityMailFromDomainAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityMailFromDomainAttributes", input)
	return &GetIdentityMailFromDomainAttributesFuture{Future: future}
}

func (a *stub) GetIdentityNotificationAttributes(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error) {
	var output ses.GetIdentityNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityNotificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityNotificationAttributesInput) *GetIdentityNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityNotificationAttributes", input)
	return &GetIdentityNotificationAttributesFuture{Future: future}
}

func (a *stub) GetIdentityPolicies(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error) {
	var output ses.GetIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityPoliciesAsync(ctx workflow.Context, input *ses.GetIdentityPoliciesInput) *GetIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityPolicies", input)
	return &GetIdentityPoliciesFuture{Future: future}
}

func (a *stub) GetIdentityVerificationAttributes(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error) {
	var output ses.GetIdentityVerificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityVerificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityVerificationAttributesAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *GetIdentityVerificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetIdentityVerificationAttributes", input)
	return &GetIdentityVerificationAttributesFuture{Future: future}
}

func (a *stub) GetSendQuota(ctx workflow.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error) {
	var output ses.GetSendQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetSendQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSendQuotaAsync(ctx workflow.Context, input *ses.GetSendQuotaInput) *GetSendQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetSendQuota", input)
	return &GetSendQuotaFuture{Future: future}
}

func (a *stub) GetSendStatistics(ctx workflow.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error) {
	var output ses.GetSendStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetSendStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSendStatisticsAsync(ctx workflow.Context, input *ses.GetSendStatisticsInput) *GetSendStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetSendStatistics", input)
	return &GetSendStatisticsFuture{Future: future}
}

func (a *stub) GetTemplate(ctx workflow.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error) {
	var output ses.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTemplateAsync(ctx workflow.Context, input *ses.GetTemplateInput) *GetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-GetTemplate", input)
	return &GetTemplateFuture{Future: future}
}

func (a *stub) ListConfigurationSets(ctx workflow.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error) {
	var output ses.ListConfigurationSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListConfigurationSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConfigurationSetsAsync(ctx workflow.Context, input *ses.ListConfigurationSetsInput) *ListConfigurationSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListConfigurationSets", input)
	return &ListConfigurationSetsFuture{Future: future}
}

func (a *stub) ListCustomVerificationEmailTemplates(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	var output ses.ListCustomVerificationEmailTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListCustomVerificationEmailTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCustomVerificationEmailTemplatesAsync(ctx workflow.Context, input *ses.ListCustomVerificationEmailTemplatesInput) *ListCustomVerificationEmailTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListCustomVerificationEmailTemplates", input)
	return &ListCustomVerificationEmailTemplatesFuture{Future: future}
}

func (a *stub) ListIdentities(ctx workflow.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error) {
	var output ses.ListIdentitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListIdentities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentitiesAsync(ctx workflow.Context, input *ses.ListIdentitiesInput) *ListIdentitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListIdentities", input)
	return &ListIdentitiesFuture{Future: future}
}

func (a *stub) ListIdentityPolicies(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error) {
	var output ses.ListIdentityPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListIdentityPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentityPoliciesAsync(ctx workflow.Context, input *ses.ListIdentityPoliciesInput) *ListIdentityPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListIdentityPolicies", input)
	return &ListIdentityPoliciesFuture{Future: future}
}

func (a *stub) ListReceiptFilters(ctx workflow.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error) {
	var output ses.ListReceiptFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListReceiptFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReceiptFiltersAsync(ctx workflow.Context, input *ses.ListReceiptFiltersInput) *ListReceiptFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListReceiptFilters", input)
	return &ListReceiptFiltersFuture{Future: future}
}

func (a *stub) ListReceiptRuleSets(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error) {
	var output ses.ListReceiptRuleSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListReceiptRuleSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReceiptRuleSetsAsync(ctx workflow.Context, input *ses.ListReceiptRuleSetsInput) *ListReceiptRuleSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListReceiptRuleSets", input)
	return &ListReceiptRuleSetsFuture{Future: future}
}

func (a *stub) ListTemplates(ctx workflow.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error) {
	var output ses.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTemplatesAsync(ctx workflow.Context, input *ses.ListTemplatesInput) *ListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListTemplates", input)
	return &ListTemplatesFuture{Future: future}
}

func (a *stub) ListVerifiedEmailAddresses(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error) {
	var output ses.ListVerifiedEmailAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ListVerifiedEmailAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVerifiedEmailAddressesAsync(ctx workflow.Context, input *ses.ListVerifiedEmailAddressesInput) *ListVerifiedEmailAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ListVerifiedEmailAddresses", input)
	return &ListVerifiedEmailAddressesFuture{Future: future}
}

func (a *stub) PutConfigurationSetDeliveryOptions(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	var output ses.PutConfigurationSetDeliveryOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-PutConfigurationSetDeliveryOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigurationSetDeliveryOptionsAsync(ctx workflow.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) *PutConfigurationSetDeliveryOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-PutConfigurationSetDeliveryOptions", input)
	return &PutConfigurationSetDeliveryOptionsFuture{Future: future}
}

func (a *stub) PutIdentityPolicy(ctx workflow.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error) {
	var output ses.PutIdentityPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-PutIdentityPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIdentityPolicyAsync(ctx workflow.Context, input *ses.PutIdentityPolicyInput) *PutIdentityPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-PutIdentityPolicy", input)
	return &PutIdentityPolicyFuture{Future: future}
}

func (a *stub) ReorderReceiptRuleSet(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error) {
	var output ses.ReorderReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-ReorderReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReorderReceiptRuleSetAsync(ctx workflow.Context, input *ses.ReorderReceiptRuleSetInput) *ReorderReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-ReorderReceiptRuleSet", input)
	return &ReorderReceiptRuleSetFuture{Future: future}
}

func (a *stub) SendBounce(ctx workflow.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error) {
	var output ses.SendBounceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendBounce", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendBounceAsync(ctx workflow.Context, input *ses.SendBounceInput) *SendBounceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendBounce", input)
	return &SendBounceFuture{Future: future}
}

func (a *stub) SendBulkTemplatedEmail(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error) {
	var output ses.SendBulkTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendBulkTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendBulkTemplatedEmailAsync(ctx workflow.Context, input *ses.SendBulkTemplatedEmailInput) *SendBulkTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendBulkTemplatedEmail", input)
	return &SendBulkTemplatedEmailFuture{Future: future}
}

func (a *stub) SendCustomVerificationEmail(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error) {
	var output ses.SendCustomVerificationEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendCustomVerificationEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendCustomVerificationEmailAsync(ctx workflow.Context, input *ses.SendCustomVerificationEmailInput) *SendCustomVerificationEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendCustomVerificationEmail", input)
	return &SendCustomVerificationEmailFuture{Future: future}
}

func (a *stub) SendEmail(ctx workflow.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
	var output ses.SendEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendEmailAsync(ctx workflow.Context, input *ses.SendEmailInput) *SendEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendEmail", input)
	return &SendEmailFuture{Future: future}
}

func (a *stub) SendRawEmail(ctx workflow.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error) {
	var output ses.SendRawEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendRawEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendRawEmailAsync(ctx workflow.Context, input *ses.SendRawEmailInput) *SendRawEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendRawEmail", input)
	return &SendRawEmailFuture{Future: future}
}

func (a *stub) SendTemplatedEmail(ctx workflow.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error) {
	var output ses.SendTemplatedEmailOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SendTemplatedEmail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendTemplatedEmailAsync(ctx workflow.Context, input *ses.SendTemplatedEmailInput) *SendTemplatedEmailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SendTemplatedEmail", input)
	return &SendTemplatedEmailFuture{Future: future}
}

func (a *stub) SetActiveReceiptRuleSet(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error) {
	var output ses.SetActiveReceiptRuleSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetActiveReceiptRuleSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetActiveReceiptRuleSetAsync(ctx workflow.Context, input *ses.SetActiveReceiptRuleSetInput) *SetActiveReceiptRuleSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetActiveReceiptRuleSet", input)
	return &SetActiveReceiptRuleSetFuture{Future: future}
}

func (a *stub) SetIdentityDkimEnabled(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error) {
	var output ses.SetIdentityDkimEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityDkimEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityDkimEnabledAsync(ctx workflow.Context, input *ses.SetIdentityDkimEnabledInput) *SetIdentityDkimEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityDkimEnabled", input)
	return &SetIdentityDkimEnabledFuture{Future: future}
}

func (a *stub) SetIdentityFeedbackForwardingEnabled(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	var output ses.SetIdentityFeedbackForwardingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityFeedbackForwardingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityFeedbackForwardingEnabledAsync(ctx workflow.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) *SetIdentityFeedbackForwardingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityFeedbackForwardingEnabled", input)
	return &SetIdentityFeedbackForwardingEnabledFuture{Future: future}
}

func (a *stub) SetIdentityHeadersInNotificationsEnabled(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	var output ses.SetIdentityHeadersInNotificationsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityHeadersInNotificationsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityHeadersInNotificationsEnabledAsync(ctx workflow.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) *SetIdentityHeadersInNotificationsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityHeadersInNotificationsEnabled", input)
	return &SetIdentityHeadersInNotificationsEnabledFuture{Future: future}
}

func (a *stub) SetIdentityMailFromDomain(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error) {
	var output ses.SetIdentityMailFromDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityMailFromDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityMailFromDomainAsync(ctx workflow.Context, input *ses.SetIdentityMailFromDomainInput) *SetIdentityMailFromDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityMailFromDomain", input)
	return &SetIdentityMailFromDomainFuture{Future: future}
}

func (a *stub) SetIdentityNotificationTopic(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error) {
	var output ses.SetIdentityNotificationTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityNotificationTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityNotificationTopicAsync(ctx workflow.Context, input *ses.SetIdentityNotificationTopicInput) *SetIdentityNotificationTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetIdentityNotificationTopic", input)
	return &SetIdentityNotificationTopicFuture{Future: future}
}

func (a *stub) SetReceiptRulePosition(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error) {
	var output ses.SetReceiptRulePositionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-SetReceiptRulePosition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetReceiptRulePositionAsync(ctx workflow.Context, input *ses.SetReceiptRulePositionInput) *SetReceiptRulePositionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-SetReceiptRulePosition", input)
	return &SetReceiptRulePositionFuture{Future: future}
}

func (a *stub) TestRenderTemplate(ctx workflow.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error) {
	var output ses.TestRenderTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-TestRenderTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestRenderTemplateAsync(ctx workflow.Context, input *ses.TestRenderTemplateInput) *TestRenderTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-TestRenderTemplate", input)
	return &TestRenderTemplateFuture{Future: future}
}

func (a *stub) UpdateAccountSendingEnabled(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error) {
	var output ses.UpdateAccountSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateAccountSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateAccountSendingEnabledInput) *UpdateAccountSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateAccountSendingEnabled", input)
	return &UpdateAccountSendingEnabledFuture{Future: future}
}

func (a *stub) UpdateConfigurationSetEventDestination(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	var output ses.UpdateConfigurationSetEventDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetEventDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationSetEventDestinationAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetEventDestinationInput) *UpdateConfigurationSetEventDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetEventDestination", input)
	return &UpdateConfigurationSetEventDestinationFuture{Future: future}
}

func (a *stub) UpdateConfigurationSetReputationMetricsEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	var output ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetReputationMetricsEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationSetReputationMetricsEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) *UpdateConfigurationSetReputationMetricsEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetReputationMetricsEnabled", input)
	return &UpdateConfigurationSetReputationMetricsEnabledFuture{Future: future}
}

func (a *stub) UpdateConfigurationSetSendingEnabled(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	var output ses.UpdateConfigurationSetSendingEnabledOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetSendingEnabled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationSetSendingEnabledAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) *UpdateConfigurationSetSendingEnabledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetSendingEnabled", input)
	return &UpdateConfigurationSetSendingEnabledFuture{Future: future}
}

func (a *stub) UpdateConfigurationSetTrackingOptions(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	var output ses.UpdateConfigurationSetTrackingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetTrackingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationSetTrackingOptionsAsync(ctx workflow.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) *UpdateConfigurationSetTrackingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateConfigurationSetTrackingOptions", input)
	return &UpdateConfigurationSetTrackingOptionsFuture{Future: future}
}

func (a *stub) UpdateCustomVerificationEmailTemplate(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	var output ses.UpdateCustomVerificationEmailTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateCustomVerificationEmailTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCustomVerificationEmailTemplateAsync(ctx workflow.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) *UpdateCustomVerificationEmailTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateCustomVerificationEmailTemplate", input)
	return &UpdateCustomVerificationEmailTemplateFuture{Future: future}
}

func (a *stub) UpdateReceiptRule(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error) {
	var output ses.UpdateReceiptRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateReceiptRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReceiptRuleAsync(ctx workflow.Context, input *ses.UpdateReceiptRuleInput) *UpdateReceiptRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateReceiptRule", input)
	return &UpdateReceiptRuleFuture{Future: future}
}

func (a *stub) UpdateTemplate(ctx workflow.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error) {
	var output ses.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTemplateAsync(ctx workflow.Context, input *ses.UpdateTemplateInput) *UpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-UpdateTemplate", input)
	return &UpdateTemplateFuture{Future: future}
}

func (a *stub) VerifyDomainDkim(ctx workflow.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error) {
	var output ses.VerifyDomainDkimOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-VerifyDomainDkim", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyDomainDkimAsync(ctx workflow.Context, input *ses.VerifyDomainDkimInput) *VerifyDomainDkimFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-VerifyDomainDkim", input)
	return &VerifyDomainDkimFuture{Future: future}
}

func (a *stub) VerifyDomainIdentity(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error) {
	var output ses.VerifyDomainIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-VerifyDomainIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyDomainIdentityAsync(ctx workflow.Context, input *ses.VerifyDomainIdentityInput) *VerifyDomainIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-VerifyDomainIdentity", input)
	return &VerifyDomainIdentityFuture{Future: future}
}

func (a *stub) VerifyEmailAddress(ctx workflow.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error) {
	var output ses.VerifyEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-VerifyEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyEmailAddressAsync(ctx workflow.Context, input *ses.VerifyEmailAddressInput) *VerifyEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-VerifyEmailAddress", input)
	return &VerifyEmailAddressFuture{Future: future}
}

func (a *stub) VerifyEmailIdentity(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error) {
	var output ses.VerifyEmailIdentityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ses-VerifyEmailIdentity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyEmailIdentityAsync(ctx workflow.Context, input *ses.VerifyEmailIdentityInput) *VerifyEmailIdentityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-VerifyEmailIdentity", input)
	return &VerifyEmailIdentityFuture{Future: future}
}

func (a *stub) WaitUntilIdentityExists(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ses-WaitUntilIdentityExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilIdentityExistsAsync(ctx workflow.Context, input *ses.GetIdentityVerificationAttributesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ses-WaitUntilIdentityExists", input)
	return clients.NewVoidFuture(future)
}
