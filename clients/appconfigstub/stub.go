// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appconfigstub

import (
	"github.com/aws/aws-sdk-go/service/appconfig"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*appconfig.CreateApplicationOutput, error) {
	var output appconfig.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationProfileFuture) Get(ctx workflow.Context) (*appconfig.CreateConfigurationProfileOutput, error) {
	var output appconfig.CreateConfigurationProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentStrategyFuture) Get(ctx workflow.Context) (*appconfig.CreateDeploymentStrategyOutput, error) {
	var output appconfig.CreateDeploymentStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEnvironmentFuture) Get(ctx workflow.Context) (*appconfig.CreateEnvironmentOutput, error) {
	var output appconfig.CreateEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateHostedConfigurationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateHostedConfigurationVersionFuture) Get(ctx workflow.Context) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	var output appconfig.CreateHostedConfigurationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*appconfig.DeleteApplicationOutput, error) {
	var output appconfig.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationProfileFuture) Get(ctx workflow.Context) (*appconfig.DeleteConfigurationProfileOutput, error) {
	var output appconfig.DeleteConfigurationProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeploymentStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeploymentStrategyFuture) Get(ctx workflow.Context) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	var output appconfig.DeleteDeploymentStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEnvironmentFuture) Get(ctx workflow.Context) (*appconfig.DeleteEnvironmentOutput, error) {
	var output appconfig.DeleteEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteHostedConfigurationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteHostedConfigurationVersionFuture) Get(ctx workflow.Context) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	var output appconfig.DeleteHostedConfigurationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationFuture) Get(ctx workflow.Context) (*appconfig.GetApplicationOutput, error) {
	var output appconfig.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConfigurationFuture) Get(ctx workflow.Context) (*appconfig.GetConfigurationOutput, error) {
	var output appconfig.GetConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConfigurationProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConfigurationProfileFuture) Get(ctx workflow.Context) (*appconfig.GetConfigurationProfileOutput, error) {
	var output appconfig.GetConfigurationProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentFuture) Get(ctx workflow.Context) (*appconfig.GetDeploymentOutput, error) {
	var output appconfig.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentStrategyFuture) Get(ctx workflow.Context) (*appconfig.GetDeploymentStrategyOutput, error) {
	var output appconfig.GetDeploymentStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEnvironmentFuture) Get(ctx workflow.Context) (*appconfig.GetEnvironmentOutput, error) {
	var output appconfig.GetEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetHostedConfigurationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetHostedConfigurationVersionFuture) Get(ctx workflow.Context) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	var output appconfig.GetHostedConfigurationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*appconfig.ListApplicationsOutput, error) {
	var output appconfig.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConfigurationProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConfigurationProfilesFuture) Get(ctx workflow.Context) (*appconfig.ListConfigurationProfilesOutput, error) {
	var output appconfig.ListConfigurationProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentStrategiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentStrategiesFuture) Get(ctx workflow.Context) (*appconfig.ListDeploymentStrategiesOutput, error) {
	var output appconfig.ListDeploymentStrategiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentsFuture) Get(ctx workflow.Context) (*appconfig.ListDeploymentsOutput, error) {
	var output appconfig.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEnvironmentsFuture) Get(ctx workflow.Context) (*appconfig.ListEnvironmentsOutput, error) {
	var output appconfig.ListEnvironmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHostedConfigurationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHostedConfigurationVersionsFuture) Get(ctx workflow.Context) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	var output appconfig.ListHostedConfigurationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appconfig.ListTagsForResourceOutput, error) {
	var output appconfig.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDeploymentFuture) Get(ctx workflow.Context) (*appconfig.StartDeploymentOutput, error) {
	var output appconfig.StartDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDeploymentFuture) Get(ctx workflow.Context) (*appconfig.StopDeploymentOutput, error) {
	var output appconfig.StopDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appconfig.TagResourceOutput, error) {
	var output appconfig.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appconfig.UntagResourceOutput, error) {
	var output appconfig.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*appconfig.UpdateApplicationOutput, error) {
	var output appconfig.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationProfileFuture) Get(ctx workflow.Context) (*appconfig.UpdateConfigurationProfileOutput, error) {
	var output appconfig.UpdateConfigurationProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeploymentStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeploymentStrategyFuture) Get(ctx workflow.Context) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	var output appconfig.UpdateDeploymentStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEnvironmentFuture) Get(ctx workflow.Context) (*appconfig.UpdateEnvironmentOutput, error) {
	var output appconfig.UpdateEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateConfigurationFuture) Get(ctx workflow.Context) (*appconfig.ValidateConfigurationOutput, error) {
	var output appconfig.ValidateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplication(ctx workflow.Context, input *appconfig.CreateApplicationInput) (*appconfig.CreateApplicationOutput, error) {
	var output appconfig.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *appconfig.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateConfigurationProfile(ctx workflow.Context, input *appconfig.CreateConfigurationProfileInput) (*appconfig.CreateConfigurationProfileOutput, error) {
	var output appconfig.CreateConfigurationProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateConfigurationProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationProfileAsync(ctx workflow.Context, input *appconfig.CreateConfigurationProfileInput) *CreateConfigurationProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateConfigurationProfile", input)
	return &CreateConfigurationProfileFuture{Future: future}
}

func (a *stub) CreateDeploymentStrategy(ctx workflow.Context, input *appconfig.CreateDeploymentStrategyInput) (*appconfig.CreateDeploymentStrategyOutput, error) {
	var output appconfig.CreateDeploymentStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateDeploymentStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentStrategyAsync(ctx workflow.Context, input *appconfig.CreateDeploymentStrategyInput) *CreateDeploymentStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateDeploymentStrategy", input)
	return &CreateDeploymentStrategyFuture{Future: future}
}

func (a *stub) CreateEnvironment(ctx workflow.Context, input *appconfig.CreateEnvironmentInput) (*appconfig.CreateEnvironmentOutput, error) {
	var output appconfig.CreateEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEnvironmentAsync(ctx workflow.Context, input *appconfig.CreateEnvironmentInput) *CreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateEnvironment", input)
	return &CreateEnvironmentFuture{Future: future}
}

func (a *stub) CreateHostedConfigurationVersion(ctx workflow.Context, input *appconfig.CreateHostedConfigurationVersionInput) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	var output appconfig.CreateHostedConfigurationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateHostedConfigurationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHostedConfigurationVersionAsync(ctx workflow.Context, input *appconfig.CreateHostedConfigurationVersionInput) *CreateHostedConfigurationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-CreateHostedConfigurationVersion", input)
	return &CreateHostedConfigurationVersionFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *appconfig.DeleteApplicationInput) (*appconfig.DeleteApplicationOutput, error) {
	var output appconfig.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *appconfig.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteConfigurationProfile(ctx workflow.Context, input *appconfig.DeleteConfigurationProfileInput) (*appconfig.DeleteConfigurationProfileOutput, error) {
	var output appconfig.DeleteConfigurationProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteConfigurationProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationProfileAsync(ctx workflow.Context, input *appconfig.DeleteConfigurationProfileInput) *DeleteConfigurationProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteConfigurationProfile", input)
	return &DeleteConfigurationProfileFuture{Future: future}
}

func (a *stub) DeleteDeploymentStrategy(ctx workflow.Context, input *appconfig.DeleteDeploymentStrategyInput) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	var output appconfig.DeleteDeploymentStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteDeploymentStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentStrategyAsync(ctx workflow.Context, input *appconfig.DeleteDeploymentStrategyInput) *DeleteDeploymentStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteDeploymentStrategy", input)
	return &DeleteDeploymentStrategyFuture{Future: future}
}

func (a *stub) DeleteEnvironment(ctx workflow.Context, input *appconfig.DeleteEnvironmentInput) (*appconfig.DeleteEnvironmentOutput, error) {
	var output appconfig.DeleteEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEnvironmentAsync(ctx workflow.Context, input *appconfig.DeleteEnvironmentInput) *DeleteEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteEnvironment", input)
	return &DeleteEnvironmentFuture{Future: future}
}

func (a *stub) DeleteHostedConfigurationVersion(ctx workflow.Context, input *appconfig.DeleteHostedConfigurationVersionInput) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	var output appconfig.DeleteHostedConfigurationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteHostedConfigurationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHostedConfigurationVersionAsync(ctx workflow.Context, input *appconfig.DeleteHostedConfigurationVersionInput) *DeleteHostedConfigurationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-DeleteHostedConfigurationVersion", input)
	return &DeleteHostedConfigurationVersionFuture{Future: future}
}

func (a *stub) GetApplication(ctx workflow.Context, input *appconfig.GetApplicationInput) (*appconfig.GetApplicationOutput, error) {
	var output appconfig.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationAsync(ctx workflow.Context, input *appconfig.GetApplicationInput) *GetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetApplication", input)
	return &GetApplicationFuture{Future: future}
}

func (a *stub) GetConfiguration(ctx workflow.Context, input *appconfig.GetConfigurationInput) (*appconfig.GetConfigurationOutput, error) {
	var output appconfig.GetConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConfigurationAsync(ctx workflow.Context, input *appconfig.GetConfigurationInput) *GetConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetConfiguration", input)
	return &GetConfigurationFuture{Future: future}
}

func (a *stub) GetConfigurationProfile(ctx workflow.Context, input *appconfig.GetConfigurationProfileInput) (*appconfig.GetConfigurationProfileOutput, error) {
	var output appconfig.GetConfigurationProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetConfigurationProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConfigurationProfileAsync(ctx workflow.Context, input *appconfig.GetConfigurationProfileInput) *GetConfigurationProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetConfigurationProfile", input)
	return &GetConfigurationProfileFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *appconfig.GetDeploymentInput) (*appconfig.GetDeploymentOutput, error) {
	var output appconfig.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *appconfig.GetDeploymentInput) *GetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetDeployment", input)
	return &GetDeploymentFuture{Future: future}
}

func (a *stub) GetDeploymentStrategy(ctx workflow.Context, input *appconfig.GetDeploymentStrategyInput) (*appconfig.GetDeploymentStrategyOutput, error) {
	var output appconfig.GetDeploymentStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetDeploymentStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentStrategyAsync(ctx workflow.Context, input *appconfig.GetDeploymentStrategyInput) *GetDeploymentStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetDeploymentStrategy", input)
	return &GetDeploymentStrategyFuture{Future: future}
}

func (a *stub) GetEnvironment(ctx workflow.Context, input *appconfig.GetEnvironmentInput) (*appconfig.GetEnvironmentOutput, error) {
	var output appconfig.GetEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEnvironmentAsync(ctx workflow.Context, input *appconfig.GetEnvironmentInput) *GetEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetEnvironment", input)
	return &GetEnvironmentFuture{Future: future}
}

func (a *stub) GetHostedConfigurationVersion(ctx workflow.Context, input *appconfig.GetHostedConfigurationVersionInput) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	var output appconfig.GetHostedConfigurationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-GetHostedConfigurationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostedConfigurationVersionAsync(ctx workflow.Context, input *appconfig.GetHostedConfigurationVersionInput) *GetHostedConfigurationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-GetHostedConfigurationVersion", input)
	return &GetHostedConfigurationVersionFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *appconfig.ListApplicationsInput) (*appconfig.ListApplicationsOutput, error) {
	var output appconfig.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *appconfig.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) ListConfigurationProfiles(ctx workflow.Context, input *appconfig.ListConfigurationProfilesInput) (*appconfig.ListConfigurationProfilesOutput, error) {
	var output appconfig.ListConfigurationProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListConfigurationProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConfigurationProfilesAsync(ctx workflow.Context, input *appconfig.ListConfigurationProfilesInput) *ListConfigurationProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListConfigurationProfiles", input)
	return &ListConfigurationProfilesFuture{Future: future}
}

func (a *stub) ListDeploymentStrategies(ctx workflow.Context, input *appconfig.ListDeploymentStrategiesInput) (*appconfig.ListDeploymentStrategiesOutput, error) {
	var output appconfig.ListDeploymentStrategiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListDeploymentStrategies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentStrategiesAsync(ctx workflow.Context, input *appconfig.ListDeploymentStrategiesInput) *ListDeploymentStrategiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListDeploymentStrategies", input)
	return &ListDeploymentStrategiesFuture{Future: future}
}

func (a *stub) ListDeployments(ctx workflow.Context, input *appconfig.ListDeploymentsInput) (*appconfig.ListDeploymentsOutput, error) {
	var output appconfig.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentsAsync(ctx workflow.Context, input *appconfig.ListDeploymentsInput) *ListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListDeployments", input)
	return &ListDeploymentsFuture{Future: future}
}

func (a *stub) ListEnvironments(ctx workflow.Context, input *appconfig.ListEnvironmentsInput) (*appconfig.ListEnvironmentsOutput, error) {
	var output appconfig.ListEnvironmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEnvironmentsAsync(ctx workflow.Context, input *appconfig.ListEnvironmentsInput) *ListEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListEnvironments", input)
	return &ListEnvironmentsFuture{Future: future}
}

func (a *stub) ListHostedConfigurationVersions(ctx workflow.Context, input *appconfig.ListHostedConfigurationVersionsInput) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	var output appconfig.ListHostedConfigurationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListHostedConfigurationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHostedConfigurationVersionsAsync(ctx workflow.Context, input *appconfig.ListHostedConfigurationVersionsInput) *ListHostedConfigurationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListHostedConfigurationVersions", input)
	return &ListHostedConfigurationVersionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appconfig.ListTagsForResourceInput) (*appconfig.ListTagsForResourceOutput, error) {
	var output appconfig.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appconfig.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) StartDeployment(ctx workflow.Context, input *appconfig.StartDeploymentInput) (*appconfig.StartDeploymentOutput, error) {
	var output appconfig.StartDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-StartDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDeploymentAsync(ctx workflow.Context, input *appconfig.StartDeploymentInput) *StartDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-StartDeployment", input)
	return &StartDeploymentFuture{Future: future}
}

func (a *stub) StopDeployment(ctx workflow.Context, input *appconfig.StopDeploymentInput) (*appconfig.StopDeploymentOutput, error) {
	var output appconfig.StopDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-StopDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDeploymentAsync(ctx workflow.Context, input *appconfig.StopDeploymentInput) *StopDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-StopDeployment", input)
	return &StopDeploymentFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appconfig.TagResourceInput) (*appconfig.TagResourceOutput, error) {
	var output appconfig.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appconfig.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appconfig.UntagResourceInput) (*appconfig.UntagResourceOutput, error) {
	var output appconfig.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appconfig.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *appconfig.UpdateApplicationInput) (*appconfig.UpdateApplicationOutput, error) {
	var output appconfig.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *appconfig.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateConfigurationProfile(ctx workflow.Context, input *appconfig.UpdateConfigurationProfileInput) (*appconfig.UpdateConfigurationProfileOutput, error) {
	var output appconfig.UpdateConfigurationProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateConfigurationProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationProfileAsync(ctx workflow.Context, input *appconfig.UpdateConfigurationProfileInput) *UpdateConfigurationProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateConfigurationProfile", input)
	return &UpdateConfigurationProfileFuture{Future: future}
}

func (a *stub) UpdateDeploymentStrategy(ctx workflow.Context, input *appconfig.UpdateDeploymentStrategyInput) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	var output appconfig.UpdateDeploymentStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateDeploymentStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentStrategyAsync(ctx workflow.Context, input *appconfig.UpdateDeploymentStrategyInput) *UpdateDeploymentStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateDeploymentStrategy", input)
	return &UpdateDeploymentStrategyFuture{Future: future}
}

func (a *stub) UpdateEnvironment(ctx workflow.Context, input *appconfig.UpdateEnvironmentInput) (*appconfig.UpdateEnvironmentOutput, error) {
	var output appconfig.UpdateEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEnvironmentAsync(ctx workflow.Context, input *appconfig.UpdateEnvironmentInput) *UpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-UpdateEnvironment", input)
	return &UpdateEnvironmentFuture{Future: future}
}

func (a *stub) ValidateConfiguration(ctx workflow.Context, input *appconfig.ValidateConfigurationInput) (*appconfig.ValidateConfigurationOutput, error) {
	var output appconfig.ValidateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appconfig-ValidateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateConfigurationAsync(ctx workflow.Context, input *appconfig.ValidateConfigurationInput) *ValidateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appconfig-ValidateConfiguration", input)
	return &ValidateConfigurationFuture{Future: future}
}
