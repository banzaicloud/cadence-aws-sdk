// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotdeviceadvisorstub

import (
	"github.com/aws/aws-sdk-go/service/iotdeviceadvisor"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateSuiteDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSuiteDefinitionFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.CreateSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.CreateSuiteDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSuiteDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSuiteDefinitionFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.DeleteSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.DeleteSuiteDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSuiteDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSuiteDefinitionFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.GetSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.GetSuiteDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSuiteRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSuiteRunFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.GetSuiteRunOutput, error) {
	var output iotdeviceadvisor.GetSuiteRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSuiteRunReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSuiteRunReportFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.GetSuiteRunReportOutput, error) {
	var output iotdeviceadvisor.GetSuiteRunReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSuiteDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSuiteDefinitionsFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.ListSuiteDefinitionsOutput, error) {
	var output iotdeviceadvisor.ListSuiteDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSuiteRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSuiteRunsFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.ListSuiteRunsOutput, error) {
	var output iotdeviceadvisor.ListSuiteRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.ListTagsForResourceOutput, error) {
	var output iotdeviceadvisor.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestCasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestCasesFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.ListTestCasesOutput, error) {
	var output iotdeviceadvisor.ListTestCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSuiteRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSuiteRunFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.StartSuiteRunOutput, error) {
	var output iotdeviceadvisor.StartSuiteRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.TagResourceOutput, error) {
	var output iotdeviceadvisor.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.UntagResourceOutput, error) {
	var output iotdeviceadvisor.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSuiteDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSuiteDefinitionFuture) Get(ctx workflow.Context) (*iotdeviceadvisor.UpdateSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.UpdateSuiteDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSuiteDefinition(ctx workflow.Context, input *iotdeviceadvisor.CreateSuiteDefinitionInput) (*iotdeviceadvisor.CreateSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.CreateSuiteDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-CreateSuiteDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSuiteDefinitionAsync(ctx workflow.Context, input *iotdeviceadvisor.CreateSuiteDefinitionInput) *CreateSuiteDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-CreateSuiteDefinition", input)
	return &CreateSuiteDefinitionFuture{Future: future}
}

func (a *stub) DeleteSuiteDefinition(ctx workflow.Context, input *iotdeviceadvisor.DeleteSuiteDefinitionInput) (*iotdeviceadvisor.DeleteSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.DeleteSuiteDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-DeleteSuiteDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSuiteDefinitionAsync(ctx workflow.Context, input *iotdeviceadvisor.DeleteSuiteDefinitionInput) *DeleteSuiteDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-DeleteSuiteDefinition", input)
	return &DeleteSuiteDefinitionFuture{Future: future}
}

func (a *stub) GetSuiteDefinition(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteDefinitionInput) (*iotdeviceadvisor.GetSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.GetSuiteDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSuiteDefinitionAsync(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteDefinitionInput) *GetSuiteDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteDefinition", input)
	return &GetSuiteDefinitionFuture{Future: future}
}

func (a *stub) GetSuiteRun(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteRunInput) (*iotdeviceadvisor.GetSuiteRunOutput, error) {
	var output iotdeviceadvisor.GetSuiteRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSuiteRunAsync(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteRunInput) *GetSuiteRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteRun", input)
	return &GetSuiteRunFuture{Future: future}
}

func (a *stub) GetSuiteRunReport(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteRunReportInput) (*iotdeviceadvisor.GetSuiteRunReportOutput, error) {
	var output iotdeviceadvisor.GetSuiteRunReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteRunReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSuiteRunReportAsync(ctx workflow.Context, input *iotdeviceadvisor.GetSuiteRunReportInput) *GetSuiteRunReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-GetSuiteRunReport", input)
	return &GetSuiteRunReportFuture{Future: future}
}

func (a *stub) ListSuiteDefinitions(ctx workflow.Context, input *iotdeviceadvisor.ListSuiteDefinitionsInput) (*iotdeviceadvisor.ListSuiteDefinitionsOutput, error) {
	var output iotdeviceadvisor.ListSuiteDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListSuiteDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSuiteDefinitionsAsync(ctx workflow.Context, input *iotdeviceadvisor.ListSuiteDefinitionsInput) *ListSuiteDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListSuiteDefinitions", input)
	return &ListSuiteDefinitionsFuture{Future: future}
}

func (a *stub) ListSuiteRuns(ctx workflow.Context, input *iotdeviceadvisor.ListSuiteRunsInput) (*iotdeviceadvisor.ListSuiteRunsOutput, error) {
	var output iotdeviceadvisor.ListSuiteRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListSuiteRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSuiteRunsAsync(ctx workflow.Context, input *iotdeviceadvisor.ListSuiteRunsInput) *ListSuiteRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListSuiteRuns", input)
	return &ListSuiteRunsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotdeviceadvisor.ListTagsForResourceInput) (*iotdeviceadvisor.ListTagsForResourceOutput, error) {
	var output iotdeviceadvisor.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotdeviceadvisor.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTestCases(ctx workflow.Context, input *iotdeviceadvisor.ListTestCasesInput) (*iotdeviceadvisor.ListTestCasesOutput, error) {
	var output iotdeviceadvisor.ListTestCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListTestCases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestCasesAsync(ctx workflow.Context, input *iotdeviceadvisor.ListTestCasesInput) *ListTestCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-ListTestCases", input)
	return &ListTestCasesFuture{Future: future}
}

func (a *stub) StartSuiteRun(ctx workflow.Context, input *iotdeviceadvisor.StartSuiteRunInput) (*iotdeviceadvisor.StartSuiteRunOutput, error) {
	var output iotdeviceadvisor.StartSuiteRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-StartSuiteRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSuiteRunAsync(ctx workflow.Context, input *iotdeviceadvisor.StartSuiteRunInput) *StartSuiteRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-StartSuiteRun", input)
	return &StartSuiteRunFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotdeviceadvisor.TagResourceInput) (*iotdeviceadvisor.TagResourceOutput, error) {
	var output iotdeviceadvisor.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotdeviceadvisor.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotdeviceadvisor.UntagResourceInput) (*iotdeviceadvisor.UntagResourceOutput, error) {
	var output iotdeviceadvisor.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotdeviceadvisor.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateSuiteDefinition(ctx workflow.Context, input *iotdeviceadvisor.UpdateSuiteDefinitionInput) (*iotdeviceadvisor.UpdateSuiteDefinitionOutput, error) {
	var output iotdeviceadvisor.UpdateSuiteDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-UpdateSuiteDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSuiteDefinitionAsync(ctx workflow.Context, input *iotdeviceadvisor.UpdateSuiteDefinitionInput) *UpdateSuiteDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotdeviceadvisor-UpdateSuiteDefinition", input)
	return &UpdateSuiteDefinitionFuture{Future: future}
}
