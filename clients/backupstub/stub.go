// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package backupstub

import (
	"github.com/aws/aws-sdk-go/service/backup"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupPlanFuture) Get(ctx workflow.Context) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupSelectionFuture) Get(ctx workflow.Context) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupVaultFuture) Get(ctx workflow.Context) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupPlanFuture) Get(ctx workflow.Context) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupSelectionFuture) Get(ctx workflow.Context) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupVaultFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupJobFuture) Get(ctx workflow.Context) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupVaultFuture) Get(ctx workflow.Context) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCopyJobFuture) Get(ctx workflow.Context) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGlobalSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGlobalSettingsFuture) Get(ctx workflow.Context) (*backup.DescribeGlobalSettingsOutput, error) {
	var output backup.DescribeGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProtectedResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProtectedResourceFuture) Get(ctx workflow.Context) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRegionSettingsFuture) Get(ctx workflow.Context) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRestoreJobFuture) Get(ctx workflow.Context) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportBackupPlanTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportBackupPlanTemplateFuture) Get(ctx workflow.Context) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupPlanFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupPlanFromJSONFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupPlanFromJSONFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupPlanFromTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupPlanFromTemplateFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupSelectionFuture) Get(ctx workflow.Context) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRecoveryPointRestoreMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRecoveryPointRestoreMetadataFuture) Get(ctx workflow.Context) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSupportedResourceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSupportedResourceTypesFuture) Get(ctx workflow.Context) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupJobsFuture) Get(ctx workflow.Context) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupPlanTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupPlanTemplatesFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupPlanVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupPlanVersionsFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupPlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupPlansFuture) Get(ctx workflow.Context) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupSelectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupSelectionsFuture) Get(ctx workflow.Context) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupVaultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupVaultsFuture) Get(ctx workflow.Context) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCopyJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCopyJobsFuture) Get(ctx workflow.Context) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProtectedResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProtectedResourcesFuture) Get(ctx workflow.Context) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRecoveryPointsByBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRecoveryPointsByBackupVaultFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRecoveryPointsByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRecoveryPointsByResourceFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRestoreJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRestoreJobsFuture) Get(ctx workflow.Context) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartBackupJobFuture) Get(ctx workflow.Context) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartCopyJobFuture) Get(ctx workflow.Context) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartRestoreJobFuture) Get(ctx workflow.Context) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopBackupJobFuture) Get(ctx workflow.Context) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBackupPlanFuture) Get(ctx workflow.Context) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGlobalSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGlobalSettingsFuture) Get(ctx workflow.Context) (*backup.UpdateGlobalSettingsOutput, error) {
	var output backup.UpdateGlobalSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRecoveryPointLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRecoveryPointLifecycleFuture) Get(ctx workflow.Context) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRegionSettingsFuture) Get(ctx workflow.Context) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupPlan(ctx workflow.Context, input *backup.CreateBackupPlanInput) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupPlanAsync(ctx workflow.Context, input *backup.CreateBackupPlanInput) *CreateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupPlan", input)
	return &CreateBackupPlanFuture{Future: future}
}

func (a *stub) CreateBackupSelection(ctx workflow.Context, input *backup.CreateBackupSelectionInput) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupSelectionAsync(ctx workflow.Context, input *backup.CreateBackupSelectionInput) *CreateBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupSelection", input)
	return &CreateBackupSelectionFuture{Future: future}
}

func (a *stub) CreateBackupVault(ctx workflow.Context, input *backup.CreateBackupVaultInput) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupVaultAsync(ctx workflow.Context, input *backup.CreateBackupVaultInput) *CreateBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupVault", input)
	return &CreateBackupVaultFuture{Future: future}
}

func (a *stub) DeleteBackupPlan(ctx workflow.Context, input *backup.DeleteBackupPlanInput) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupPlanAsync(ctx workflow.Context, input *backup.DeleteBackupPlanInput) *DeleteBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupPlan", input)
	return &DeleteBackupPlanFuture{Future: future}
}

func (a *stub) DeleteBackupSelection(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupSelectionAsync(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) *DeleteBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupSelection", input)
	return &DeleteBackupSelectionFuture{Future: future}
}

func (a *stub) DeleteBackupVault(ctx workflow.Context, input *backup.DeleteBackupVaultInput) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultAsync(ctx workflow.Context, input *backup.DeleteBackupVaultInput) *DeleteBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVault", input)
	return &DeleteBackupVaultFuture{Future: future}
}

func (a *stub) DeleteBackupVaultAccessPolicy(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) *DeleteBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultAccessPolicy", input)
	return &DeleteBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) DeleteBackupVaultNotifications(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) *DeleteBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultNotifications", input)
	return &DeleteBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) DeleteRecoveryPoint(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRecoveryPointAsync(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) *DeleteRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteRecoveryPoint", input)
	return &DeleteRecoveryPointFuture{Future: future}
}

func (a *stub) DescribeBackupJob(ctx workflow.Context, input *backup.DescribeBackupJobInput) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupJobAsync(ctx workflow.Context, input *backup.DescribeBackupJobInput) *DescribeBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupJob", input)
	return &DescribeBackupJobFuture{Future: future}
}

func (a *stub) DescribeBackupVault(ctx workflow.Context, input *backup.DescribeBackupVaultInput) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupVaultAsync(ctx workflow.Context, input *backup.DescribeBackupVaultInput) *DescribeBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupVault", input)
	return &DescribeBackupVaultFuture{Future: future}
}

func (a *stub) DescribeCopyJob(ctx workflow.Context, input *backup.DescribeCopyJobInput) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCopyJobAsync(ctx workflow.Context, input *backup.DescribeCopyJobInput) *DescribeCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeCopyJob", input)
	return &DescribeCopyJobFuture{Future: future}
}

func (a *stub) DescribeGlobalSettings(ctx workflow.Context, input *backup.DescribeGlobalSettingsInput) (*backup.DescribeGlobalSettingsOutput, error) {
	var output backup.DescribeGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalSettingsAsync(ctx workflow.Context, input *backup.DescribeGlobalSettingsInput) *DescribeGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeGlobalSettings", input)
	return &DescribeGlobalSettingsFuture{Future: future}
}

func (a *stub) DescribeProtectedResource(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeProtectedResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProtectedResourceAsync(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) *DescribeProtectedResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeProtectedResource", input)
	return &DescribeProtectedResourceFuture{Future: future}
}

func (a *stub) DescribeRecoveryPoint(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecoveryPointAsync(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) *DescribeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRecoveryPoint", input)
	return &DescribeRecoveryPointFuture{Future: future}
}

func (a *stub) DescribeRegionSettings(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegionSettingsAsync(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) *DescribeRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRegionSettings", input)
	return &DescribeRegionSettingsFuture{Future: future}
}

func (a *stub) DescribeRestoreJob(ctx workflow.Context, input *backup.DescribeRestoreJobInput) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRestoreJobAsync(ctx workflow.Context, input *backup.DescribeRestoreJobInput) *DescribeRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRestoreJob", input)
	return &DescribeRestoreJobFuture{Future: future}
}

func (a *stub) ExportBackupPlanTemplate(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ExportBackupPlanTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportBackupPlanTemplateAsync(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) *ExportBackupPlanTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ExportBackupPlanTemplate", input)
	return &ExportBackupPlanTemplateFuture{Future: future}
}

func (a *stub) GetBackupPlan(ctx workflow.Context, input *backup.GetBackupPlanInput) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanAsync(ctx workflow.Context, input *backup.GetBackupPlanInput) *GetBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlan", input)
	return &GetBackupPlanFuture{Future: future}
}

func (a *stub) GetBackupPlanFromJSON(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromJSON", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanFromJSONAsync(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) *GetBackupPlanFromJSONFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromJSON", input)
	return &GetBackupPlanFromJSONFuture{Future: future}
}

func (a *stub) GetBackupPlanFromTemplate(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanFromTemplateAsync(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) *GetBackupPlanFromTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromTemplate", input)
	return &GetBackupPlanFromTemplateFuture{Future: future}
}

func (a *stub) GetBackupSelection(ctx workflow.Context, input *backup.GetBackupSelectionInput) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupSelectionAsync(ctx workflow.Context, input *backup.GetBackupSelectionInput) *GetBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupSelection", input)
	return &GetBackupSelectionFuture{Future: future}
}

func (a *stub) GetBackupVaultAccessPolicy(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) *GetBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultAccessPolicy", input)
	return &GetBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) GetBackupVaultNotifications(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) *GetBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultNotifications", input)
	return &GetBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) GetRecoveryPointRestoreMetadata(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetRecoveryPointRestoreMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRecoveryPointRestoreMetadataAsync(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) *GetRecoveryPointRestoreMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetRecoveryPointRestoreMetadata", input)
	return &GetRecoveryPointRestoreMetadataFuture{Future: future}
}

func (a *stub) GetSupportedResourceTypes(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetSupportedResourceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSupportedResourceTypesAsync(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) *GetSupportedResourceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetSupportedResourceTypes", input)
	return &GetSupportedResourceTypesFuture{Future: future}
}

func (a *stub) ListBackupJobs(ctx workflow.Context, input *backup.ListBackupJobsInput) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupJobsAsync(ctx workflow.Context, input *backup.ListBackupJobsInput) *ListBackupJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupJobs", input)
	return &ListBackupJobsFuture{Future: future}
}

func (a *stub) ListBackupPlanTemplates(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlanTemplatesAsync(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) *ListBackupPlanTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanTemplates", input)
	return &ListBackupPlanTemplatesFuture{Future: future}
}

func (a *stub) ListBackupPlanVersions(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlanVersionsAsync(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) *ListBackupPlanVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanVersions", input)
	return &ListBackupPlanVersionsFuture{Future: future}
}

func (a *stub) ListBackupPlans(ctx workflow.Context, input *backup.ListBackupPlansInput) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlansAsync(ctx workflow.Context, input *backup.ListBackupPlansInput) *ListBackupPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlans", input)
	return &ListBackupPlansFuture{Future: future}
}

func (a *stub) ListBackupSelections(ctx workflow.Context, input *backup.ListBackupSelectionsInput) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupSelections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupSelectionsAsync(ctx workflow.Context, input *backup.ListBackupSelectionsInput) *ListBackupSelectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupSelections", input)
	return &ListBackupSelectionsFuture{Future: future}
}

func (a *stub) ListBackupVaults(ctx workflow.Context, input *backup.ListBackupVaultsInput) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupVaults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupVaultsAsync(ctx workflow.Context, input *backup.ListBackupVaultsInput) *ListBackupVaultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupVaults", input)
	return &ListBackupVaultsFuture{Future: future}
}

func (a *stub) ListCopyJobs(ctx workflow.Context, input *backup.ListCopyJobsInput) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListCopyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCopyJobsAsync(ctx workflow.Context, input *backup.ListCopyJobsInput) *ListCopyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListCopyJobs", input)
	return &ListCopyJobsFuture{Future: future}
}

func (a *stub) ListProtectedResources(ctx workflow.Context, input *backup.ListProtectedResourcesInput) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListProtectedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProtectedResourcesAsync(ctx workflow.Context, input *backup.ListProtectedResourcesInput) *ListProtectedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListProtectedResources", input)
	return &ListProtectedResourcesFuture{Future: future}
}

func (a *stub) ListRecoveryPointsByBackupVault(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecoveryPointsByBackupVaultAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) *ListRecoveryPointsByBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByBackupVault", input)
	return &ListRecoveryPointsByBackupVaultFuture{Future: future}
}

func (a *stub) ListRecoveryPointsByResource(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecoveryPointsByResourceAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) *ListRecoveryPointsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByResource", input)
	return &ListRecoveryPointsByResourceFuture{Future: future}
}

func (a *stub) ListRestoreJobs(ctx workflow.Context, input *backup.ListRestoreJobsInput) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRestoreJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRestoreJobsAsync(ctx workflow.Context, input *backup.ListRestoreJobsInput) *ListRestoreJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRestoreJobs", input)
	return &ListRestoreJobsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *backup.ListTagsInput) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *backup.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) PutBackupVaultAccessPolicy(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) *PutBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultAccessPolicy", input)
	return &PutBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) PutBackupVaultNotifications(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) *PutBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultNotifications", input)
	return &PutBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) StartBackupJob(ctx workflow.Context, input *backup.StartBackupJobInput) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBackupJobAsync(ctx workflow.Context, input *backup.StartBackupJobInput) *StartBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartBackupJob", input)
	return &StartBackupJobFuture{Future: future}
}

func (a *stub) StartCopyJob(ctx workflow.Context, input *backup.StartCopyJobInput) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCopyJobAsync(ctx workflow.Context, input *backup.StartCopyJobInput) *StartCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartCopyJob", input)
	return &StartCopyJobFuture{Future: future}
}

func (a *stub) StartRestoreJob(ctx workflow.Context, input *backup.StartRestoreJobInput) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRestoreJobAsync(ctx workflow.Context, input *backup.StartRestoreJobInput) *StartRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartRestoreJob", input)
	return &StartRestoreJobFuture{Future: future}
}

func (a *stub) StopBackupJob(ctx workflow.Context, input *backup.StopBackupJobInput) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StopBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBackupJobAsync(ctx workflow.Context, input *backup.StopBackupJobInput) *StopBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StopBackupJob", input)
	return &StopBackupJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *backup.TagResourceInput) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *backup.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *backup.UntagResourceInput) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *backup.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateBackupPlan(ctx workflow.Context, input *backup.UpdateBackupPlanInput) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBackupPlanAsync(ctx workflow.Context, input *backup.UpdateBackupPlanInput) *UpdateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateBackupPlan", input)
	return &UpdateBackupPlanFuture{Future: future}
}

func (a *stub) UpdateGlobalSettings(ctx workflow.Context, input *backup.UpdateGlobalSettingsInput) (*backup.UpdateGlobalSettingsOutput, error) {
	var output backup.UpdateGlobalSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateGlobalSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalSettingsAsync(ctx workflow.Context, input *backup.UpdateGlobalSettingsInput) *UpdateGlobalSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateGlobalSettings", input)
	return &UpdateGlobalSettingsFuture{Future: future}
}

func (a *stub) UpdateRecoveryPointLifecycle(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRecoveryPointLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRecoveryPointLifecycleAsync(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) *UpdateRecoveryPointLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRecoveryPointLifecycle", input)
	return &UpdateRecoveryPointLifecycleFuture{Future: future}
}

func (a *stub) UpdateRegionSettings(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegionSettingsAsync(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) *UpdateRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRegionSettings", input)
	return &UpdateRegionSettingsFuture{Future: future}
}
