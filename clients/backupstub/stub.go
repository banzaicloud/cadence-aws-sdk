// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package backupstub

import (
	"github.com/aws/aws-sdk-go/service/backup"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BackupCreateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupPlanFuture) Get(ctx workflow.Context) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupCreateBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupSelectionFuture) Get(ctx workflow.Context) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupCreateBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupCreateBackupVaultFuture) Get(ctx workflow.Context) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupPlanFuture) Get(ctx workflow.Context) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupSelectionFuture) Get(ctx workflow.Context) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDeleteRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDeleteRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeBackupJobFuture) Get(ctx workflow.Context) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeBackupVaultFuture) Get(ctx workflow.Context) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeCopyJobFuture) Get(ctx workflow.Context) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeProtectedResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeProtectedResourceFuture) Get(ctx workflow.Context) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRecoveryPointFuture) Get(ctx workflow.Context) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRegionSettingsFuture) Get(ctx workflow.Context) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupDescribeRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupDescribeRestoreJobFuture) Get(ctx workflow.Context) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupExportBackupPlanTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupExportBackupPlanTemplateFuture) Get(ctx workflow.Context) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFromJSONFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFromJSONFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupPlanFromTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupPlanFromTemplateFuture) Get(ctx workflow.Context) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupSelectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupSelectionFuture) Get(ctx workflow.Context) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetRecoveryPointRestoreMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetRecoveryPointRestoreMetadataFuture) Get(ctx workflow.Context) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupGetSupportedResourceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupGetSupportedResourceTypesFuture) Get(ctx workflow.Context) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupJobsFuture) Get(ctx workflow.Context) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlanTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlanTemplatesFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlanVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlanVersionsFuture) Get(ctx workflow.Context) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupPlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupPlansFuture) Get(ctx workflow.Context) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupSelectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupSelectionsFuture) Get(ctx workflow.Context) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListBackupVaultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListBackupVaultsFuture) Get(ctx workflow.Context) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListCopyJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListCopyJobsFuture) Get(ctx workflow.Context) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListProtectedResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListProtectedResourcesFuture) Get(ctx workflow.Context) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRecoveryPointsByBackupVaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRecoveryPointsByBackupVaultFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRecoveryPointsByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRecoveryPointsByResourceFuture) Get(ctx workflow.Context) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListRestoreJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListRestoreJobsFuture) Get(ctx workflow.Context) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupListTagsFuture) Get(ctx workflow.Context) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupPutBackupVaultAccessPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupPutBackupVaultAccessPolicyFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupPutBackupVaultNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupPutBackupVaultNotificationsFuture) Get(ctx workflow.Context) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartBackupJobFuture) Get(ctx workflow.Context) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartCopyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartCopyJobFuture) Get(ctx workflow.Context) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStartRestoreJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStartRestoreJobFuture) Get(ctx workflow.Context) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupStopBackupJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupStopBackupJobFuture) Get(ctx workflow.Context) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupTagResourceFuture) Get(ctx workflow.Context) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUntagResourceFuture) Get(ctx workflow.Context) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateBackupPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateBackupPlanFuture) Get(ctx workflow.Context) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateRecoveryPointLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateRecoveryPointLifecycleFuture) Get(ctx workflow.Context) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BackupUpdateRegionSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BackupUpdateRegionSettingsFuture) Get(ctx workflow.Context) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupPlan(ctx workflow.Context, input *backup.CreateBackupPlanInput) (*backup.CreateBackupPlanOutput, error) {
	var output backup.CreateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupPlanAsync(ctx workflow.Context, input *backup.CreateBackupPlanInput) *BackupCreateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupPlan", input)
	return &BackupCreateBackupPlanFuture{Future: future}
}

func (a *stub) CreateBackupSelection(ctx workflow.Context, input *backup.CreateBackupSelectionInput) (*backup.CreateBackupSelectionOutput, error) {
	var output backup.CreateBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupSelectionAsync(ctx workflow.Context, input *backup.CreateBackupSelectionInput) *BackupCreateBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupSelection", input)
	return &BackupCreateBackupSelectionFuture{Future: future}
}

func (a *stub) CreateBackupVault(ctx workflow.Context, input *backup.CreateBackupVaultInput) (*backup.CreateBackupVaultOutput, error) {
	var output backup.CreateBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupVaultAsync(ctx workflow.Context, input *backup.CreateBackupVaultInput) *BackupCreateBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-CreateBackupVault", input)
	return &BackupCreateBackupVaultFuture{Future: future}
}

func (a *stub) DeleteBackupPlan(ctx workflow.Context, input *backup.DeleteBackupPlanInput) (*backup.DeleteBackupPlanOutput, error) {
	var output backup.DeleteBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupPlanAsync(ctx workflow.Context, input *backup.DeleteBackupPlanInput) *BackupDeleteBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupPlan", input)
	return &BackupDeleteBackupPlanFuture{Future: future}
}

func (a *stub) DeleteBackupSelection(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) (*backup.DeleteBackupSelectionOutput, error) {
	var output backup.DeleteBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupSelectionAsync(ctx workflow.Context, input *backup.DeleteBackupSelectionInput) *BackupDeleteBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupSelection", input)
	return &BackupDeleteBackupSelectionFuture{Future: future}
}

func (a *stub) DeleteBackupVault(ctx workflow.Context, input *backup.DeleteBackupVaultInput) (*backup.DeleteBackupVaultOutput, error) {
	var output backup.DeleteBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultAsync(ctx workflow.Context, input *backup.DeleteBackupVaultInput) *BackupDeleteBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVault", input)
	return &BackupDeleteBackupVaultFuture{Future: future}
}

func (a *stub) DeleteBackupVaultAccessPolicy(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	var output backup.DeleteBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.DeleteBackupVaultAccessPolicyInput) *BackupDeleteBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultAccessPolicy", input)
	return &BackupDeleteBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) DeleteBackupVaultNotifications(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	var output backup.DeleteBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.DeleteBackupVaultNotificationsInput) *BackupDeleteBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteBackupVaultNotifications", input)
	return &BackupDeleteBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) DeleteRecoveryPoint(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) (*backup.DeleteRecoveryPointOutput, error) {
	var output backup.DeleteRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DeleteRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRecoveryPointAsync(ctx workflow.Context, input *backup.DeleteRecoveryPointInput) *BackupDeleteRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DeleteRecoveryPoint", input)
	return &BackupDeleteRecoveryPointFuture{Future: future}
}

func (a *stub) DescribeBackupJob(ctx workflow.Context, input *backup.DescribeBackupJobInput) (*backup.DescribeBackupJobOutput, error) {
	var output backup.DescribeBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupJobAsync(ctx workflow.Context, input *backup.DescribeBackupJobInput) *BackupDescribeBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupJob", input)
	return &BackupDescribeBackupJobFuture{Future: future}
}

func (a *stub) DescribeBackupVault(ctx workflow.Context, input *backup.DescribeBackupVaultInput) (*backup.DescribeBackupVaultOutput, error) {
	var output backup.DescribeBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupVaultAsync(ctx workflow.Context, input *backup.DescribeBackupVaultInput) *BackupDescribeBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeBackupVault", input)
	return &BackupDescribeBackupVaultFuture{Future: future}
}

func (a *stub) DescribeCopyJob(ctx workflow.Context, input *backup.DescribeCopyJobInput) (*backup.DescribeCopyJobOutput, error) {
	var output backup.DescribeCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCopyJobAsync(ctx workflow.Context, input *backup.DescribeCopyJobInput) *BackupDescribeCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeCopyJob", input)
	return &BackupDescribeCopyJobFuture{Future: future}
}

func (a *stub) DescribeProtectedResource(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) (*backup.DescribeProtectedResourceOutput, error) {
	var output backup.DescribeProtectedResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeProtectedResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProtectedResourceAsync(ctx workflow.Context, input *backup.DescribeProtectedResourceInput) *BackupDescribeProtectedResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeProtectedResource", input)
	return &BackupDescribeProtectedResourceFuture{Future: future}
}

func (a *stub) DescribeRecoveryPoint(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) (*backup.DescribeRecoveryPointOutput, error) {
	var output backup.DescribeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecoveryPointAsync(ctx workflow.Context, input *backup.DescribeRecoveryPointInput) *BackupDescribeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRecoveryPoint", input)
	return &BackupDescribeRecoveryPointFuture{Future: future}
}

func (a *stub) DescribeRegionSettings(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) (*backup.DescribeRegionSettingsOutput, error) {
	var output backup.DescribeRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegionSettingsAsync(ctx workflow.Context, input *backup.DescribeRegionSettingsInput) *BackupDescribeRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRegionSettings", input)
	return &BackupDescribeRegionSettingsFuture{Future: future}
}

func (a *stub) DescribeRestoreJob(ctx workflow.Context, input *backup.DescribeRestoreJobInput) (*backup.DescribeRestoreJobOutput, error) {
	var output backup.DescribeRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRestoreJobAsync(ctx workflow.Context, input *backup.DescribeRestoreJobInput) *BackupDescribeRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-DescribeRestoreJob", input)
	return &BackupDescribeRestoreJobFuture{Future: future}
}

func (a *stub) ExportBackupPlanTemplate(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) (*backup.ExportBackupPlanTemplateOutput, error) {
	var output backup.ExportBackupPlanTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ExportBackupPlanTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportBackupPlanTemplateAsync(ctx workflow.Context, input *backup.ExportBackupPlanTemplateInput) *BackupExportBackupPlanTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ExportBackupPlanTemplate", input)
	return &BackupExportBackupPlanTemplateFuture{Future: future}
}

func (a *stub) GetBackupPlan(ctx workflow.Context, input *backup.GetBackupPlanInput) (*backup.GetBackupPlanOutput, error) {
	var output backup.GetBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanAsync(ctx workflow.Context, input *backup.GetBackupPlanInput) *BackupGetBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlan", input)
	return &BackupGetBackupPlanFuture{Future: future}
}

func (a *stub) GetBackupPlanFromJSON(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) (*backup.GetBackupPlanFromJSONOutput, error) {
	var output backup.GetBackupPlanFromJSONOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromJSON", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanFromJSONAsync(ctx workflow.Context, input *backup.GetBackupPlanFromJSONInput) *BackupGetBackupPlanFromJSONFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromJSON", input)
	return &BackupGetBackupPlanFromJSONFuture{Future: future}
}

func (a *stub) GetBackupPlanFromTemplate(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) (*backup.GetBackupPlanFromTemplateOutput, error) {
	var output backup.GetBackupPlanFromTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupPlanFromTemplateAsync(ctx workflow.Context, input *backup.GetBackupPlanFromTemplateInput) *BackupGetBackupPlanFromTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupPlanFromTemplate", input)
	return &BackupGetBackupPlanFromTemplateFuture{Future: future}
}

func (a *stub) GetBackupSelection(ctx workflow.Context, input *backup.GetBackupSelectionInput) (*backup.GetBackupSelectionOutput, error) {
	var output backup.GetBackupSelectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupSelection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupSelectionAsync(ctx workflow.Context, input *backup.GetBackupSelectionInput) *BackupGetBackupSelectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupSelection", input)
	return &BackupGetBackupSelectionFuture{Future: future}
}

func (a *stub) GetBackupVaultAccessPolicy(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	var output backup.GetBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.GetBackupVaultAccessPolicyInput) *BackupGetBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultAccessPolicy", input)
	return &BackupGetBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) GetBackupVaultNotifications(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) (*backup.GetBackupVaultNotificationsOutput, error) {
	var output backup.GetBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.GetBackupVaultNotificationsInput) *BackupGetBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetBackupVaultNotifications", input)
	return &BackupGetBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) GetRecoveryPointRestoreMetadata(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	var output backup.GetRecoveryPointRestoreMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetRecoveryPointRestoreMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRecoveryPointRestoreMetadataAsync(ctx workflow.Context, input *backup.GetRecoveryPointRestoreMetadataInput) *BackupGetRecoveryPointRestoreMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetRecoveryPointRestoreMetadata", input)
	return &BackupGetRecoveryPointRestoreMetadataFuture{Future: future}
}

func (a *stub) GetSupportedResourceTypes(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) (*backup.GetSupportedResourceTypesOutput, error) {
	var output backup.GetSupportedResourceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-GetSupportedResourceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSupportedResourceTypesAsync(ctx workflow.Context, input *backup.GetSupportedResourceTypesInput) *BackupGetSupportedResourceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-GetSupportedResourceTypes", input)
	return &BackupGetSupportedResourceTypesFuture{Future: future}
}

func (a *stub) ListBackupJobs(ctx workflow.Context, input *backup.ListBackupJobsInput) (*backup.ListBackupJobsOutput, error) {
	var output backup.ListBackupJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupJobsAsync(ctx workflow.Context, input *backup.ListBackupJobsInput) *BackupListBackupJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupJobs", input)
	return &BackupListBackupJobsFuture{Future: future}
}

func (a *stub) ListBackupPlanTemplates(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) (*backup.ListBackupPlanTemplatesOutput, error) {
	var output backup.ListBackupPlanTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlanTemplatesAsync(ctx workflow.Context, input *backup.ListBackupPlanTemplatesInput) *BackupListBackupPlanTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanTemplates", input)
	return &BackupListBackupPlanTemplatesFuture{Future: future}
}

func (a *stub) ListBackupPlanVersions(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) (*backup.ListBackupPlanVersionsOutput, error) {
	var output backup.ListBackupPlanVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlanVersionsAsync(ctx workflow.Context, input *backup.ListBackupPlanVersionsInput) *BackupListBackupPlanVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlanVersions", input)
	return &BackupListBackupPlanVersionsFuture{Future: future}
}

func (a *stub) ListBackupPlans(ctx workflow.Context, input *backup.ListBackupPlansInput) (*backup.ListBackupPlansOutput, error) {
	var output backup.ListBackupPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupPlansAsync(ctx workflow.Context, input *backup.ListBackupPlansInput) *BackupListBackupPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupPlans", input)
	return &BackupListBackupPlansFuture{Future: future}
}

func (a *stub) ListBackupSelections(ctx workflow.Context, input *backup.ListBackupSelectionsInput) (*backup.ListBackupSelectionsOutput, error) {
	var output backup.ListBackupSelectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupSelections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupSelectionsAsync(ctx workflow.Context, input *backup.ListBackupSelectionsInput) *BackupListBackupSelectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupSelections", input)
	return &BackupListBackupSelectionsFuture{Future: future}
}

func (a *stub) ListBackupVaults(ctx workflow.Context, input *backup.ListBackupVaultsInput) (*backup.ListBackupVaultsOutput, error) {
	var output backup.ListBackupVaultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupVaults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupVaultsAsync(ctx workflow.Context, input *backup.ListBackupVaultsInput) *BackupListBackupVaultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListBackupVaults", input)
	return &BackupListBackupVaultsFuture{Future: future}
}

func (a *stub) ListCopyJobs(ctx workflow.Context, input *backup.ListCopyJobsInput) (*backup.ListCopyJobsOutput, error) {
	var output backup.ListCopyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListCopyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCopyJobsAsync(ctx workflow.Context, input *backup.ListCopyJobsInput) *BackupListCopyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListCopyJobs", input)
	return &BackupListCopyJobsFuture{Future: future}
}

func (a *stub) ListProtectedResources(ctx workflow.Context, input *backup.ListProtectedResourcesInput) (*backup.ListProtectedResourcesOutput, error) {
	var output backup.ListProtectedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListProtectedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProtectedResourcesAsync(ctx workflow.Context, input *backup.ListProtectedResourcesInput) *BackupListProtectedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListProtectedResources", input)
	return &BackupListProtectedResourcesFuture{Future: future}
}

func (a *stub) ListRecoveryPointsByBackupVault(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	var output backup.ListRecoveryPointsByBackupVaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByBackupVault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecoveryPointsByBackupVaultAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByBackupVaultInput) *BackupListRecoveryPointsByBackupVaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByBackupVault", input)
	return &BackupListRecoveryPointsByBackupVaultFuture{Future: future}
}

func (a *stub) ListRecoveryPointsByResource(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) (*backup.ListRecoveryPointsByResourceOutput, error) {
	var output backup.ListRecoveryPointsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecoveryPointsByResourceAsync(ctx workflow.Context, input *backup.ListRecoveryPointsByResourceInput) *BackupListRecoveryPointsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRecoveryPointsByResource", input)
	return &BackupListRecoveryPointsByResourceFuture{Future: future}
}

func (a *stub) ListRestoreJobs(ctx workflow.Context, input *backup.ListRestoreJobsInput) (*backup.ListRestoreJobsOutput, error) {
	var output backup.ListRestoreJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListRestoreJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRestoreJobsAsync(ctx workflow.Context, input *backup.ListRestoreJobsInput) *BackupListRestoreJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListRestoreJobs", input)
	return &BackupListRestoreJobsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *backup.ListTagsInput) (*backup.ListTagsOutput, error) {
	var output backup.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *backup.ListTagsInput) *BackupListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-ListTags", input)
	return &BackupListTagsFuture{Future: future}
}

func (a *stub) PutBackupVaultAccessPolicy(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	var output backup.PutBackupVaultAccessPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultAccessPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBackupVaultAccessPolicyAsync(ctx workflow.Context, input *backup.PutBackupVaultAccessPolicyInput) *BackupPutBackupVaultAccessPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultAccessPolicy", input)
	return &BackupPutBackupVaultAccessPolicyFuture{Future: future}
}

func (a *stub) PutBackupVaultNotifications(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) (*backup.PutBackupVaultNotificationsOutput, error) {
	var output backup.PutBackupVaultNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutBackupVaultNotificationsAsync(ctx workflow.Context, input *backup.PutBackupVaultNotificationsInput) *BackupPutBackupVaultNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-PutBackupVaultNotifications", input)
	return &BackupPutBackupVaultNotificationsFuture{Future: future}
}

func (a *stub) StartBackupJob(ctx workflow.Context, input *backup.StartBackupJobInput) (*backup.StartBackupJobOutput, error) {
	var output backup.StartBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBackupJobAsync(ctx workflow.Context, input *backup.StartBackupJobInput) *BackupStartBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartBackupJob", input)
	return &BackupStartBackupJobFuture{Future: future}
}

func (a *stub) StartCopyJob(ctx workflow.Context, input *backup.StartCopyJobInput) (*backup.StartCopyJobOutput, error) {
	var output backup.StartCopyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartCopyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCopyJobAsync(ctx workflow.Context, input *backup.StartCopyJobInput) *BackupStartCopyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartCopyJob", input)
	return &BackupStartCopyJobFuture{Future: future}
}

func (a *stub) StartRestoreJob(ctx workflow.Context, input *backup.StartRestoreJobInput) (*backup.StartRestoreJobOutput, error) {
	var output backup.StartRestoreJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StartRestoreJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRestoreJobAsync(ctx workflow.Context, input *backup.StartRestoreJobInput) *BackupStartRestoreJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StartRestoreJob", input)
	return &BackupStartRestoreJobFuture{Future: future}
}

func (a *stub) StopBackupJob(ctx workflow.Context, input *backup.StopBackupJobInput) (*backup.StopBackupJobOutput, error) {
	var output backup.StopBackupJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-StopBackupJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBackupJobAsync(ctx workflow.Context, input *backup.StopBackupJobInput) *BackupStopBackupJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-StopBackupJob", input)
	return &BackupStopBackupJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *backup.TagResourceInput) (*backup.TagResourceOutput, error) {
	var output backup.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *backup.TagResourceInput) *BackupTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-TagResource", input)
	return &BackupTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *backup.UntagResourceInput) (*backup.UntagResourceOutput, error) {
	var output backup.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *backup.UntagResourceInput) *BackupUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UntagResource", input)
	return &BackupUntagResourceFuture{Future: future}
}

func (a *stub) UpdateBackupPlan(ctx workflow.Context, input *backup.UpdateBackupPlanInput) (*backup.UpdateBackupPlanOutput, error) {
	var output backup.UpdateBackupPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateBackupPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBackupPlanAsync(ctx workflow.Context, input *backup.UpdateBackupPlanInput) *BackupUpdateBackupPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateBackupPlan", input)
	return &BackupUpdateBackupPlanFuture{Future: future}
}

func (a *stub) UpdateRecoveryPointLifecycle(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	var output backup.UpdateRecoveryPointLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRecoveryPointLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRecoveryPointLifecycleAsync(ctx workflow.Context, input *backup.UpdateRecoveryPointLifecycleInput) *BackupUpdateRecoveryPointLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRecoveryPointLifecycle", input)
	return &BackupUpdateRecoveryPointLifecycleFuture{Future: future}
}

func (a *stub) UpdateRegionSettings(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) (*backup.UpdateRegionSettingsOutput, error) {
	var output backup.UpdateRegionSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRegionSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegionSettingsAsync(ctx workflow.Context, input *backup.UpdateRegionSettingsInput) *BackupUpdateRegionSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-backup-UpdateRegionSettings", input)
	return &BackupUpdateRegionSettingsFuture{Future: future}
}
