// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workdocsstub

import (
	"github.com/aws/aws-sdk-go/service/workdocs"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AbortDocumentVersionUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AbortDocumentVersionUploadFuture) Get(ctx workflow.Context) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	var output workdocs.AbortDocumentVersionUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ActivateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ActivateUserFuture) Get(ctx workflow.Context) (*workdocs.ActivateUserOutput, error) {
	var output workdocs.ActivateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddResourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.AddResourcePermissionsOutput, error) {
	var output workdocs.AddResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCommentFuture) Get(ctx workflow.Context) (*workdocs.CreateCommentOutput, error) {
	var output workdocs.CreateCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCustomMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCustomMetadataFuture) Get(ctx workflow.Context) (*workdocs.CreateCustomMetadataOutput, error) {
	var output workdocs.CreateCustomMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFolderFuture) Get(ctx workflow.Context) (*workdocs.CreateFolderOutput, error) {
	var output workdocs.CreateFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLabelsFuture) Get(ctx workflow.Context) (*workdocs.CreateLabelsOutput, error) {
	var output workdocs.CreateLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNotificationSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNotificationSubscriptionFuture) Get(ctx workflow.Context) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	var output workdocs.CreateNotificationSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*workdocs.CreateUserOutput, error) {
	var output workdocs.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeactivateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeactivateUserFuture) Get(ctx workflow.Context) (*workdocs.DeactivateUserOutput, error) {
	var output workdocs.DeactivateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCommentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCommentFuture) Get(ctx workflow.Context) (*workdocs.DeleteCommentOutput, error) {
	var output workdocs.DeleteCommentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCustomMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCustomMetadataFuture) Get(ctx workflow.Context) (*workdocs.DeleteCustomMetadataOutput, error) {
	var output workdocs.DeleteCustomMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDocumentFuture) Get(ctx workflow.Context) (*workdocs.DeleteDocumentOutput, error) {
	var output workdocs.DeleteDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFolderFuture) Get(ctx workflow.Context) (*workdocs.DeleteFolderOutput, error) {
	var output workdocs.DeleteFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFolderContentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFolderContentsFuture) Get(ctx workflow.Context) (*workdocs.DeleteFolderContentsOutput, error) {
	var output workdocs.DeleteFolderContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLabelsFuture) Get(ctx workflow.Context) (*workdocs.DeleteLabelsOutput, error) {
	var output workdocs.DeleteLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotificationSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotificationSubscriptionFuture) Get(ctx workflow.Context) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	var output workdocs.DeleteNotificationSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*workdocs.DeleteUserOutput, error) {
	var output workdocs.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeActivitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeActivitiesFuture) Get(ctx workflow.Context) (*workdocs.DescribeActivitiesOutput, error) {
	var output workdocs.DescribeActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCommentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCommentsFuture) Get(ctx workflow.Context) (*workdocs.DescribeCommentsOutput, error) {
	var output workdocs.DescribeCommentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDocumentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDocumentVersionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeDocumentVersionsOutput, error) {
	var output workdocs.DescribeDocumentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFolderContentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFolderContentsFuture) Get(ctx workflow.Context) (*workdocs.DescribeFolderContentsOutput, error) {
	var output workdocs.DescribeFolderContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGroupsFuture) Get(ctx workflow.Context) (*workdocs.DescribeGroupsOutput, error) {
	var output workdocs.DescribeGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotificationSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotificationSubscriptionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	var output workdocs.DescribeNotificationSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.DescribeResourcePermissionsOutput, error) {
	var output workdocs.DescribeResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRootFoldersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRootFoldersFuture) Get(ctx workflow.Context) (*workdocs.DescribeRootFoldersOutput, error) {
	var output workdocs.DescribeRootFoldersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUsersFuture) Get(ctx workflow.Context) (*workdocs.DescribeUsersOutput, error) {
	var output workdocs.DescribeUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCurrentUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCurrentUserFuture) Get(ctx workflow.Context) (*workdocs.GetCurrentUserOutput, error) {
	var output workdocs.GetCurrentUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentOutput, error) {
	var output workdocs.GetDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentPathFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentPathFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentPathOutput, error) {
	var output workdocs.GetDocumentPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDocumentVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDocumentVersionFuture) Get(ctx workflow.Context) (*workdocs.GetDocumentVersionOutput, error) {
	var output workdocs.GetDocumentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFolderFuture) Get(ctx workflow.Context) (*workdocs.GetFolderOutput, error) {
	var output workdocs.GetFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFolderPathFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFolderPathFuture) Get(ctx workflow.Context) (*workdocs.GetFolderPathOutput, error) {
	var output workdocs.GetFolderPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcesFuture) Get(ctx workflow.Context) (*workdocs.GetResourcesOutput, error) {
	var output workdocs.GetResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InitiateDocumentVersionUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InitiateDocumentVersionUploadFuture) Get(ctx workflow.Context) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	var output workdocs.InitiateDocumentVersionUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveAllResourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveAllResourcePermissionsFuture) Get(ctx workflow.Context) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	var output workdocs.RemoveAllResourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveResourcePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveResourcePermissionFuture) Get(ctx workflow.Context) (*workdocs.RemoveResourcePermissionOutput, error) {
	var output workdocs.RemoveResourcePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentFuture) Get(ctx workflow.Context) (*workdocs.UpdateDocumentOutput, error) {
	var output workdocs.UpdateDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDocumentVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDocumentVersionFuture) Get(ctx workflow.Context) (*workdocs.UpdateDocumentVersionOutput, error) {
	var output workdocs.UpdateDocumentVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFolderFuture) Get(ctx workflow.Context) (*workdocs.UpdateFolderOutput, error) {
	var output workdocs.UpdateFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserFuture) Get(ctx workflow.Context) (*workdocs.UpdateUserOutput, error) {
	var output workdocs.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortDocumentVersionUpload(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	var output workdocs.AbortDocumentVersionUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-AbortDocumentVersionUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.AbortDocumentVersionUploadInput) *AbortDocumentVersionUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-AbortDocumentVersionUpload", input)
	return &AbortDocumentVersionUploadFuture{Future: future}
}

func (a *stub) ActivateUser(ctx workflow.Context, input *workdocs.ActivateUserInput) (*workdocs.ActivateUserOutput, error) {
	var output workdocs.ActivateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-ActivateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateUserAsync(ctx workflow.Context, input *workdocs.ActivateUserInput) *ActivateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-ActivateUser", input)
	return &ActivateUserFuture{Future: future}
}

func (a *stub) AddResourcePermissions(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) (*workdocs.AddResourcePermissionsOutput, error) {
	var output workdocs.AddResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-AddResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddResourcePermissionsAsync(ctx workflow.Context, input *workdocs.AddResourcePermissionsInput) *AddResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-AddResourcePermissions", input)
	return &AddResourcePermissionsFuture{Future: future}
}

func (a *stub) CreateComment(ctx workflow.Context, input *workdocs.CreateCommentInput) (*workdocs.CreateCommentOutput, error) {
	var output workdocs.CreateCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCommentAsync(ctx workflow.Context, input *workdocs.CreateCommentInput) *CreateCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateComment", input)
	return &CreateCommentFuture{Future: future}
}

func (a *stub) CreateCustomMetadata(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) (*workdocs.CreateCustomMetadataOutput, error) {
	var output workdocs.CreateCustomMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateCustomMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomMetadataAsync(ctx workflow.Context, input *workdocs.CreateCustomMetadataInput) *CreateCustomMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateCustomMetadata", input)
	return &CreateCustomMetadataFuture{Future: future}
}

func (a *stub) CreateFolder(ctx workflow.Context, input *workdocs.CreateFolderInput) (*workdocs.CreateFolderOutput, error) {
	var output workdocs.CreateFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFolderAsync(ctx workflow.Context, input *workdocs.CreateFolderInput) *CreateFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateFolder", input)
	return &CreateFolderFuture{Future: future}
}

func (a *stub) CreateLabels(ctx workflow.Context, input *workdocs.CreateLabelsInput) (*workdocs.CreateLabelsOutput, error) {
	var output workdocs.CreateLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLabelsAsync(ctx workflow.Context, input *workdocs.CreateLabelsInput) *CreateLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateLabels", input)
	return &CreateLabelsFuture{Future: future}
}

func (a *stub) CreateNotificationSubscription(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	var output workdocs.CreateNotificationSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateNotificationSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.CreateNotificationSubscriptionInput) *CreateNotificationSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateNotificationSubscription", input)
	return &CreateNotificationSubscriptionFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *workdocs.CreateUserInput) (*workdocs.CreateUserOutput, error) {
	var output workdocs.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *workdocs.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeactivateUser(ctx workflow.Context, input *workdocs.DeactivateUserInput) (*workdocs.DeactivateUserOutput, error) {
	var output workdocs.DeactivateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeactivateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeactivateUserAsync(ctx workflow.Context, input *workdocs.DeactivateUserInput) *DeactivateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeactivateUser", input)
	return &DeactivateUserFuture{Future: future}
}

func (a *stub) DeleteComment(ctx workflow.Context, input *workdocs.DeleteCommentInput) (*workdocs.DeleteCommentOutput, error) {
	var output workdocs.DeleteCommentOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteComment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCommentAsync(ctx workflow.Context, input *workdocs.DeleteCommentInput) *DeleteCommentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteComment", input)
	return &DeleteCommentFuture{Future: future}
}

func (a *stub) DeleteCustomMetadata(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) (*workdocs.DeleteCustomMetadataOutput, error) {
	var output workdocs.DeleteCustomMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteCustomMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomMetadataAsync(ctx workflow.Context, input *workdocs.DeleteCustomMetadataInput) *DeleteCustomMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteCustomMetadata", input)
	return &DeleteCustomMetadataFuture{Future: future}
}

func (a *stub) DeleteDocument(ctx workflow.Context, input *workdocs.DeleteDocumentInput) (*workdocs.DeleteDocumentOutput, error) {
	var output workdocs.DeleteDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentAsync(ctx workflow.Context, input *workdocs.DeleteDocumentInput) *DeleteDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteDocument", input)
	return &DeleteDocumentFuture{Future: future}
}

func (a *stub) DeleteFolder(ctx workflow.Context, input *workdocs.DeleteFolderInput) (*workdocs.DeleteFolderOutput, error) {
	var output workdocs.DeleteFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFolderAsync(ctx workflow.Context, input *workdocs.DeleteFolderInput) *DeleteFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteFolder", input)
	return &DeleteFolderFuture{Future: future}
}

func (a *stub) DeleteFolderContents(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) (*workdocs.DeleteFolderContentsOutput, error) {
	var output workdocs.DeleteFolderContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteFolderContents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFolderContentsAsync(ctx workflow.Context, input *workdocs.DeleteFolderContentsInput) *DeleteFolderContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteFolderContents", input)
	return &DeleteFolderContentsFuture{Future: future}
}

func (a *stub) DeleteLabels(ctx workflow.Context, input *workdocs.DeleteLabelsInput) (*workdocs.DeleteLabelsOutput, error) {
	var output workdocs.DeleteLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLabelsAsync(ctx workflow.Context, input *workdocs.DeleteLabelsInput) *DeleteLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteLabels", input)
	return &DeleteLabelsFuture{Future: future}
}

func (a *stub) DeleteNotificationSubscription(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	var output workdocs.DeleteNotificationSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteNotificationSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationSubscriptionAsync(ctx workflow.Context, input *workdocs.DeleteNotificationSubscriptionInput) *DeleteNotificationSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteNotificationSubscription", input)
	return &DeleteNotificationSubscriptionFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *workdocs.DeleteUserInput) (*workdocs.DeleteUserOutput, error) {
	var output workdocs.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *workdocs.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DescribeActivities(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) (*workdocs.DescribeActivitiesOutput, error) {
	var output workdocs.DescribeActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeActivitiesAsync(ctx workflow.Context, input *workdocs.DescribeActivitiesInput) *DescribeActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeActivities", input)
	return &DescribeActivitiesFuture{Future: future}
}

func (a *stub) DescribeComments(ctx workflow.Context, input *workdocs.DescribeCommentsInput) (*workdocs.DescribeCommentsOutput, error) {
	var output workdocs.DescribeCommentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeComments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCommentsAsync(ctx workflow.Context, input *workdocs.DescribeCommentsInput) *DescribeCommentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeComments", input)
	return &DescribeCommentsFuture{Future: future}
}

func (a *stub) DescribeDocumentVersions(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) (*workdocs.DescribeDocumentVersionsOutput, error) {
	var output workdocs.DescribeDocumentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeDocumentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentVersionsAsync(ctx workflow.Context, input *workdocs.DescribeDocumentVersionsInput) *DescribeDocumentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeDocumentVersions", input)
	return &DescribeDocumentVersionsFuture{Future: future}
}

func (a *stub) DescribeFolderContents(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) (*workdocs.DescribeFolderContentsOutput, error) {
	var output workdocs.DescribeFolderContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeFolderContents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFolderContentsAsync(ctx workflow.Context, input *workdocs.DescribeFolderContentsInput) *DescribeFolderContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeFolderContents", input)
	return &DescribeFolderContentsFuture{Future: future}
}

func (a *stub) DescribeGroups(ctx workflow.Context, input *workdocs.DescribeGroupsInput) (*workdocs.DescribeGroupsOutput, error) {
	var output workdocs.DescribeGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGroupsAsync(ctx workflow.Context, input *workdocs.DescribeGroupsInput) *DescribeGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeGroups", input)
	return &DescribeGroupsFuture{Future: future}
}

func (a *stub) DescribeNotificationSubscriptions(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	var output workdocs.DescribeNotificationSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeNotificationSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotificationSubscriptionsAsync(ctx workflow.Context, input *workdocs.DescribeNotificationSubscriptionsInput) *DescribeNotificationSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeNotificationSubscriptions", input)
	return &DescribeNotificationSubscriptionsFuture{Future: future}
}

func (a *stub) DescribeResourcePermissions(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) (*workdocs.DescribeResourcePermissionsOutput, error) {
	var output workdocs.DescribeResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourcePermissionsAsync(ctx workflow.Context, input *workdocs.DescribeResourcePermissionsInput) *DescribeResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeResourcePermissions", input)
	return &DescribeResourcePermissionsFuture{Future: future}
}

func (a *stub) DescribeRootFolders(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) (*workdocs.DescribeRootFoldersOutput, error) {
	var output workdocs.DescribeRootFoldersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeRootFolders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRootFoldersAsync(ctx workflow.Context, input *workdocs.DescribeRootFoldersInput) *DescribeRootFoldersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeRootFolders", input)
	return &DescribeRootFoldersFuture{Future: future}
}

func (a *stub) DescribeUsers(ctx workflow.Context, input *workdocs.DescribeUsersInput) (*workdocs.DescribeUsersOutput, error) {
	var output workdocs.DescribeUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUsersAsync(ctx workflow.Context, input *workdocs.DescribeUsersInput) *DescribeUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-DescribeUsers", input)
	return &DescribeUsersFuture{Future: future}
}

func (a *stub) GetCurrentUser(ctx workflow.Context, input *workdocs.GetCurrentUserInput) (*workdocs.GetCurrentUserOutput, error) {
	var output workdocs.GetCurrentUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetCurrentUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCurrentUserAsync(ctx workflow.Context, input *workdocs.GetCurrentUserInput) *GetCurrentUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetCurrentUser", input)
	return &GetCurrentUserFuture{Future: future}
}

func (a *stub) GetDocument(ctx workflow.Context, input *workdocs.GetDocumentInput) (*workdocs.GetDocumentOutput, error) {
	var output workdocs.GetDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentAsync(ctx workflow.Context, input *workdocs.GetDocumentInput) *GetDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocument", input)
	return &GetDocumentFuture{Future: future}
}

func (a *stub) GetDocumentPath(ctx workflow.Context, input *workdocs.GetDocumentPathInput) (*workdocs.GetDocumentPathOutput, error) {
	var output workdocs.GetDocumentPathOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocumentPath", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentPathAsync(ctx workflow.Context, input *workdocs.GetDocumentPathInput) *GetDocumentPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocumentPath", input)
	return &GetDocumentPathFuture{Future: future}
}

func (a *stub) GetDocumentVersion(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) (*workdocs.GetDocumentVersionOutput, error) {
	var output workdocs.GetDocumentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocumentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDocumentVersionAsync(ctx workflow.Context, input *workdocs.GetDocumentVersionInput) *GetDocumentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetDocumentVersion", input)
	return &GetDocumentVersionFuture{Future: future}
}

func (a *stub) GetFolder(ctx workflow.Context, input *workdocs.GetFolderInput) (*workdocs.GetFolderOutput, error) {
	var output workdocs.GetFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFolderAsync(ctx workflow.Context, input *workdocs.GetFolderInput) *GetFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetFolder", input)
	return &GetFolderFuture{Future: future}
}

func (a *stub) GetFolderPath(ctx workflow.Context, input *workdocs.GetFolderPathInput) (*workdocs.GetFolderPathOutput, error) {
	var output workdocs.GetFolderPathOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetFolderPath", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFolderPathAsync(ctx workflow.Context, input *workdocs.GetFolderPathInput) *GetFolderPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetFolderPath", input)
	return &GetFolderPathFuture{Future: future}
}

func (a *stub) GetResources(ctx workflow.Context, input *workdocs.GetResourcesInput) (*workdocs.GetResourcesOutput, error) {
	var output workdocs.GetResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-GetResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcesAsync(ctx workflow.Context, input *workdocs.GetResourcesInput) *GetResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-GetResources", input)
	return &GetResourcesFuture{Future: future}
}

func (a *stub) InitiateDocumentVersionUpload(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	var output workdocs.InitiateDocumentVersionUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-InitiateDocumentVersionUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitiateDocumentVersionUploadAsync(ctx workflow.Context, input *workdocs.InitiateDocumentVersionUploadInput) *InitiateDocumentVersionUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-InitiateDocumentVersionUpload", input)
	return &InitiateDocumentVersionUploadFuture{Future: future}
}

func (a *stub) RemoveAllResourcePermissions(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	var output workdocs.RemoveAllResourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-RemoveAllResourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveAllResourcePermissionsAsync(ctx workflow.Context, input *workdocs.RemoveAllResourcePermissionsInput) *RemoveAllResourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-RemoveAllResourcePermissions", input)
	return &RemoveAllResourcePermissionsFuture{Future: future}
}

func (a *stub) RemoveResourcePermission(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) (*workdocs.RemoveResourcePermissionOutput, error) {
	var output workdocs.RemoveResourcePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-RemoveResourcePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveResourcePermissionAsync(ctx workflow.Context, input *workdocs.RemoveResourcePermissionInput) *RemoveResourcePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-RemoveResourcePermission", input)
	return &RemoveResourcePermissionFuture{Future: future}
}

func (a *stub) UpdateDocument(ctx workflow.Context, input *workdocs.UpdateDocumentInput) (*workdocs.UpdateDocumentOutput, error) {
	var output workdocs.UpdateDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentAsync(ctx workflow.Context, input *workdocs.UpdateDocumentInput) *UpdateDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateDocument", input)
	return &UpdateDocumentFuture{Future: future}
}

func (a *stub) UpdateDocumentVersion(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) (*workdocs.UpdateDocumentVersionOutput, error) {
	var output workdocs.UpdateDocumentVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateDocumentVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDocumentVersionAsync(ctx workflow.Context, input *workdocs.UpdateDocumentVersionInput) *UpdateDocumentVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateDocumentVersion", input)
	return &UpdateDocumentVersionFuture{Future: future}
}

func (a *stub) UpdateFolder(ctx workflow.Context, input *workdocs.UpdateFolderInput) (*workdocs.UpdateFolderOutput, error) {
	var output workdocs.UpdateFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFolderAsync(ctx workflow.Context, input *workdocs.UpdateFolderInput) *UpdateFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateFolder", input)
	return &UpdateFolderFuture{Future: future}
}

func (a *stub) UpdateUser(ctx workflow.Context, input *workdocs.UpdateUserInput) (*workdocs.UpdateUserOutput, error) {
	var output workdocs.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAsync(ctx workflow.Context, input *workdocs.UpdateUserInput) *UpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workdocs-UpdateUser", input)
	return &UpdateUserFuture{Future: future}
}
