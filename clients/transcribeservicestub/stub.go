// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package transcribeservicestub

import (
	"github.com/aws/aws-sdk-go/service/transcribeservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateLanguageModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.CreateLanguageModelOutput, error) {
	var output transcribeservice.CreateLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMedicalVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.CreateMedicalVocabularyOutput, error) {
	var output transcribeservice.CreateMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.CreateVocabularyOutput, error) {
	var output transcribeservice.CreateVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVocabularyFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.CreateVocabularyFilterOutput, error) {
	var output transcribeservice.CreateVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLanguageModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteLanguageModelOutput, error) {
	var output transcribeservice.DeleteLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMedicalTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMedicalVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteMedicalVocabularyOutput, error) {
	var output transcribeservice.DeleteMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteVocabularyOutput, error) {
	var output transcribeservice.DeleteVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVocabularyFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.DeleteVocabularyFilterOutput, error) {
	var output transcribeservice.DeleteVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLanguageModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLanguageModelFuture) Get(ctx workflow.Context) (*transcribeservice.DescribeLanguageModelOutput, error) {
	var output transcribeservice.DescribeLanguageModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMedicalTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.GetMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.GetMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMedicalVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.GetMedicalVocabularyOutput, error) {
	var output transcribeservice.GetMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.GetTranscriptionJobOutput, error) {
	var output transcribeservice.GetTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.GetVocabularyOutput, error) {
	var output transcribeservice.GetVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVocabularyFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.GetVocabularyFilterOutput, error) {
	var output transcribeservice.GetVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLanguageModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLanguageModelsFuture) Get(ctx workflow.Context) (*transcribeservice.ListLanguageModelsOutput, error) {
	var output transcribeservice.ListLanguageModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMedicalTranscriptionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMedicalTranscriptionJobsFuture) Get(ctx workflow.Context) (*transcribeservice.ListMedicalTranscriptionJobsOutput, error) {
	var output transcribeservice.ListMedicalTranscriptionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMedicalVocabulariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMedicalVocabulariesFuture) Get(ctx workflow.Context) (*transcribeservice.ListMedicalVocabulariesOutput, error) {
	var output transcribeservice.ListMedicalVocabulariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTranscriptionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTranscriptionJobsFuture) Get(ctx workflow.Context) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	var output transcribeservice.ListTranscriptionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVocabulariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVocabulariesFuture) Get(ctx workflow.Context) (*transcribeservice.ListVocabulariesOutput, error) {
	var output transcribeservice.ListVocabulariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVocabularyFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVocabularyFiltersFuture) Get(ctx workflow.Context) (*transcribeservice.ListVocabularyFiltersOutput, error) {
	var output transcribeservice.ListVocabularyFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMedicalTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMedicalTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.StartMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.StartMedicalTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTranscriptionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTranscriptionJobFuture) Get(ctx workflow.Context) (*transcribeservice.StartTranscriptionJobOutput, error) {
	var output transcribeservice.StartTranscriptionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMedicalVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMedicalVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateMedicalVocabularyOutput, error) {
	var output transcribeservice.UpdateMedicalVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVocabularyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVocabularyFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateVocabularyOutput, error) {
	var output transcribeservice.UpdateVocabularyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVocabularyFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVocabularyFilterFuture) Get(ctx workflow.Context) (*transcribeservice.UpdateVocabularyFilterOutput, error) {
	var output transcribeservice.UpdateVocabularyFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLanguageModel(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) (*transcribeservice.CreateLanguageModelOutput, error) {
	var output transcribeservice.CreateLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLanguageModelAsync(ctx workflow.Context, input *transcribeservice.CreateLanguageModelInput) *CreateLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateLanguageModel", input)
	return &CreateLanguageModelFuture{Future: future}
}

func (a *stub) CreateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) (*transcribeservice.CreateMedicalVocabularyOutput, error) {
	var output transcribeservice.CreateMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateMedicalVocabularyInput) *CreateMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateMedicalVocabulary", input)
	return &CreateMedicalVocabularyFuture{Future: future}
}

func (a *stub) CreateVocabulary(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) (*transcribeservice.CreateVocabularyOutput, error) {
	var output transcribeservice.CreateVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVocabularyAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyInput) *CreateVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateVocabulary", input)
	return &CreateVocabularyFuture{Future: future}
}

func (a *stub) CreateVocabularyFilter(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) (*transcribeservice.CreateVocabularyFilterOutput, error) {
	var output transcribeservice.CreateVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.CreateVocabularyFilterInput) *CreateVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-CreateVocabularyFilter", input)
	return &CreateVocabularyFilterFuture{Future: future}
}

func (a *stub) DeleteLanguageModel(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) (*transcribeservice.DeleteLanguageModelOutput, error) {
	var output transcribeservice.DeleteLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DeleteLanguageModelInput) *DeleteLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteLanguageModel", input)
	return &DeleteLanguageModelFuture{Future: future}
}

func (a *stub) DeleteMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) (*transcribeservice.DeleteMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalTranscriptionJobInput) *DeleteMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteMedicalTranscriptionJob", input)
	return &DeleteMedicalTranscriptionJobFuture{Future: future}
}

func (a *stub) DeleteMedicalVocabulary(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) (*transcribeservice.DeleteMedicalVocabularyOutput, error) {
	var output transcribeservice.DeleteMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteMedicalVocabularyInput) *DeleteMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteMedicalVocabulary", input)
	return &DeleteMedicalVocabularyFuture{Future: future}
}

func (a *stub) DeleteTranscriptionJob(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) (*transcribeservice.DeleteTranscriptionJobOutput, error) {
	var output transcribeservice.DeleteTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.DeleteTranscriptionJobInput) *DeleteTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteTranscriptionJob", input)
	return &DeleteTranscriptionJobFuture{Future: future}
}

func (a *stub) DeleteVocabulary(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) (*transcribeservice.DeleteVocabularyOutput, error) {
	var output transcribeservice.DeleteVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVocabularyAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyInput) *DeleteVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteVocabulary", input)
	return &DeleteVocabularyFuture{Future: future}
}

func (a *stub) DeleteVocabularyFilter(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) (*transcribeservice.DeleteVocabularyFilterOutput, error) {
	var output transcribeservice.DeleteVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.DeleteVocabularyFilterInput) *DeleteVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DeleteVocabularyFilter", input)
	return &DeleteVocabularyFilterFuture{Future: future}
}

func (a *stub) DescribeLanguageModel(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) (*transcribeservice.DescribeLanguageModelOutput, error) {
	var output transcribeservice.DescribeLanguageModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DescribeLanguageModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLanguageModelAsync(ctx workflow.Context, input *transcribeservice.DescribeLanguageModelInput) *DescribeLanguageModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-DescribeLanguageModel", input)
	return &DescribeLanguageModelFuture{Future: future}
}

func (a *stub) GetMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) (*transcribeservice.GetMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.GetMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetMedicalTranscriptionJobInput) *GetMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetMedicalTranscriptionJob", input)
	return &GetMedicalTranscriptionJobFuture{Future: future}
}

func (a *stub) GetMedicalVocabulary(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) (*transcribeservice.GetMedicalVocabularyOutput, error) {
	var output transcribeservice.GetMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetMedicalVocabularyInput) *GetMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetMedicalVocabulary", input)
	return &GetMedicalVocabularyFuture{Future: future}
}

func (a *stub) GetTranscriptionJob(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) (*transcribeservice.GetTranscriptionJobOutput, error) {
	var output transcribeservice.GetTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.GetTranscriptionJobInput) *GetTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetTranscriptionJob", input)
	return &GetTranscriptionJobFuture{Future: future}
}

func (a *stub) GetVocabulary(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) (*transcribeservice.GetVocabularyOutput, error) {
	var output transcribeservice.GetVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVocabularyAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyInput) *GetVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetVocabulary", input)
	return &GetVocabularyFuture{Future: future}
}

func (a *stub) GetVocabularyFilter(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) (*transcribeservice.GetVocabularyFilterOutput, error) {
	var output transcribeservice.GetVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.GetVocabularyFilterInput) *GetVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-GetVocabularyFilter", input)
	return &GetVocabularyFilterFuture{Future: future}
}

func (a *stub) ListLanguageModels(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) (*transcribeservice.ListLanguageModelsOutput, error) {
	var output transcribeservice.ListLanguageModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListLanguageModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLanguageModelsAsync(ctx workflow.Context, input *transcribeservice.ListLanguageModelsInput) *ListLanguageModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListLanguageModels", input)
	return &ListLanguageModelsFuture{Future: future}
}

func (a *stub) ListMedicalTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) (*transcribeservice.ListMedicalTranscriptionJobsOutput, error) {
	var output transcribeservice.ListMedicalTranscriptionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListMedicalTranscriptionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMedicalTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListMedicalTranscriptionJobsInput) *ListMedicalTranscriptionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListMedicalTranscriptionJobs", input)
	return &ListMedicalTranscriptionJobsFuture{Future: future}
}

func (a *stub) ListMedicalVocabularies(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) (*transcribeservice.ListMedicalVocabulariesOutput, error) {
	var output transcribeservice.ListMedicalVocabulariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListMedicalVocabularies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMedicalVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListMedicalVocabulariesInput) *ListMedicalVocabulariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListMedicalVocabularies", input)
	return &ListMedicalVocabulariesFuture{Future: future}
}

func (a *stub) ListTranscriptionJobs(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) (*transcribeservice.ListTranscriptionJobsOutput, error) {
	var output transcribeservice.ListTranscriptionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListTranscriptionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTranscriptionJobsAsync(ctx workflow.Context, input *transcribeservice.ListTranscriptionJobsInput) *ListTranscriptionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListTranscriptionJobs", input)
	return &ListTranscriptionJobsFuture{Future: future}
}

func (a *stub) ListVocabularies(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) (*transcribeservice.ListVocabulariesOutput, error) {
	var output transcribeservice.ListVocabulariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListVocabularies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVocabulariesAsync(ctx workflow.Context, input *transcribeservice.ListVocabulariesInput) *ListVocabulariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListVocabularies", input)
	return &ListVocabulariesFuture{Future: future}
}

func (a *stub) ListVocabularyFilters(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) (*transcribeservice.ListVocabularyFiltersOutput, error) {
	var output transcribeservice.ListVocabularyFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListVocabularyFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVocabularyFiltersAsync(ctx workflow.Context, input *transcribeservice.ListVocabularyFiltersInput) *ListVocabularyFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-ListVocabularyFilters", input)
	return &ListVocabularyFiltersFuture{Future: future}
}

func (a *stub) StartMedicalTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) (*transcribeservice.StartMedicalTranscriptionJobOutput, error) {
	var output transcribeservice.StartMedicalTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-StartMedicalTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMedicalTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartMedicalTranscriptionJobInput) *StartMedicalTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-StartMedicalTranscriptionJob", input)
	return &StartMedicalTranscriptionJobFuture{Future: future}
}

func (a *stub) StartTranscriptionJob(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) (*transcribeservice.StartTranscriptionJobOutput, error) {
	var output transcribeservice.StartTranscriptionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-StartTranscriptionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTranscriptionJobAsync(ctx workflow.Context, input *transcribeservice.StartTranscriptionJobInput) *StartTranscriptionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-StartTranscriptionJob", input)
	return &StartTranscriptionJobFuture{Future: future}
}

func (a *stub) UpdateMedicalVocabulary(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) (*transcribeservice.UpdateMedicalVocabularyOutput, error) {
	var output transcribeservice.UpdateMedicalVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateMedicalVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMedicalVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateMedicalVocabularyInput) *UpdateMedicalVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateMedicalVocabulary", input)
	return &UpdateMedicalVocabularyFuture{Future: future}
}

func (a *stub) UpdateVocabulary(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) (*transcribeservice.UpdateVocabularyOutput, error) {
	var output transcribeservice.UpdateVocabularyOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateVocabulary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVocabularyAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyInput) *UpdateVocabularyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateVocabulary", input)
	return &UpdateVocabularyFuture{Future: future}
}

func (a *stub) UpdateVocabularyFilter(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) (*transcribeservice.UpdateVocabularyFilterOutput, error) {
	var output transcribeservice.UpdateVocabularyFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateVocabularyFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVocabularyFilterAsync(ctx workflow.Context, input *transcribeservice.UpdateVocabularyFilterInput) *UpdateVocabularyFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-transcribeservice-UpdateVocabularyFilter", input)
	return &UpdateVocabularyFilterFuture{Future: future}
}
