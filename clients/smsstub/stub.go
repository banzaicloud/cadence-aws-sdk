// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package smsstub

import (
	"github.com/aws/aws-sdk-go/service/sms"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppFuture) Get(ctx workflow.Context) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReplicationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReplicationJobFuture) Get(ctx workflow.Context) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppFuture) Get(ctx workflow.Context) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppReplicationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppValidationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReplicationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReplicationJobFuture) Get(ctx workflow.Context) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServerCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServerCatalogFuture) Get(ctx workflow.Context) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateConnectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateConnectorFuture) Get(ctx workflow.Context) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateChangeSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateChangeSetFuture) Get(ctx workflow.Context) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateTemplateFuture) Get(ctx workflow.Context) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppFuture) Get(ctx workflow.Context) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppReplicationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppValidationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppValidationOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectorsFuture) Get(ctx workflow.Context) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReplicationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReplicationJobsFuture) Get(ctx workflow.Context) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReplicationRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReplicationRunsFuture) Get(ctx workflow.Context) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServersFuture) Get(ctx workflow.Context) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportAppCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportAppCatalogFuture) Get(ctx workflow.Context) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportServerCatalogFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportServerCatalogFuture) Get(ctx workflow.Context) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LaunchAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LaunchAppFuture) Get(ctx workflow.Context) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppsFuture) Get(ctx workflow.Context) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NotifyAppValidationOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NotifyAppValidationOutputFuture) Get(ctx workflow.Context) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAppLaunchConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAppLaunchConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAppReplicationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAppReplicationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAppValidationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAppValidationConfigurationFuture) Get(ctx workflow.Context) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAppReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartOnDemandAppReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartOnDemandAppReplicationFuture) Get(ctx workflow.Context) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartOnDemandReplicationRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartOnDemandReplicationRunFuture) Get(ctx workflow.Context) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopAppReplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopAppReplicationFuture) Get(ctx workflow.Context) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateAppFuture) Get(ctx workflow.Context) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAppFuture) Get(ctx workflow.Context) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateReplicationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateReplicationJobFuture) Get(ctx workflow.Context) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApp(ctx workflow.Context, input *sms.CreateAppInput) (*sms.CreateAppOutput, error) {
	var output sms.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppAsync(ctx workflow.Context, input *sms.CreateAppInput) *CreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-CreateApp", input)
	return &CreateAppFuture{Future: future}
}

func (a *stub) CreateReplicationJob(ctx workflow.Context, input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error) {
	var output sms.CreateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-CreateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReplicationJobAsync(ctx workflow.Context, input *sms.CreateReplicationJobInput) *CreateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-CreateReplicationJob", input)
	return &CreateReplicationJobFuture{Future: future}
}

func (a *stub) DeleteApp(ctx workflow.Context, input *sms.DeleteAppInput) (*sms.DeleteAppOutput, error) {
	var output sms.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppAsync(ctx workflow.Context, input *sms.DeleteAppInput) *DeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteApp", input)
	return &DeleteAppFuture{Future: future}
}

func (a *stub) DeleteAppLaunchConfiguration(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	var output sms.DeleteAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppLaunchConfigurationInput) *DeleteAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppLaunchConfiguration", input)
	return &DeleteAppLaunchConfigurationFuture{Future: future}
}

func (a *stub) DeleteAppReplicationConfiguration(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	var output sms.DeleteAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppReplicationConfigurationInput) *DeleteAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppReplicationConfiguration", input)
	return &DeleteAppReplicationConfigurationFuture{Future: future}
}

func (a *stub) DeleteAppValidationConfiguration(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error) {
	var output sms.DeleteAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppValidationConfigurationAsync(ctx workflow.Context, input *sms.DeleteAppValidationConfigurationInput) *DeleteAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteAppValidationConfiguration", input)
	return &DeleteAppValidationConfigurationFuture{Future: future}
}

func (a *stub) DeleteReplicationJob(ctx workflow.Context, input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error) {
	var output sms.DeleteReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReplicationJobAsync(ctx workflow.Context, input *sms.DeleteReplicationJobInput) *DeleteReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteReplicationJob", input)
	return &DeleteReplicationJobFuture{Future: future}
}

func (a *stub) DeleteServerCatalog(ctx workflow.Context, input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error) {
	var output sms.DeleteServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DeleteServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServerCatalogAsync(ctx workflow.Context, input *sms.DeleteServerCatalogInput) *DeleteServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DeleteServerCatalog", input)
	return &DeleteServerCatalogFuture{Future: future}
}

func (a *stub) DisassociateConnector(ctx workflow.Context, input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error) {
	var output sms.DisassociateConnectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-DisassociateConnector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateConnectorAsync(ctx workflow.Context, input *sms.DisassociateConnectorInput) *DisassociateConnectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-DisassociateConnector", input)
	return &DisassociateConnectorFuture{Future: future}
}

func (a *stub) GenerateChangeSet(ctx workflow.Context, input *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error) {
	var output sms.GenerateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GenerateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateChangeSetAsync(ctx workflow.Context, input *sms.GenerateChangeSetInput) *GenerateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GenerateChangeSet", input)
	return &GenerateChangeSetFuture{Future: future}
}

func (a *stub) GenerateTemplate(ctx workflow.Context, input *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error) {
	var output sms.GenerateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GenerateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateTemplateAsync(ctx workflow.Context, input *sms.GenerateTemplateInput) *GenerateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GenerateTemplate", input)
	return &GenerateTemplateFuture{Future: future}
}

func (a *stub) GetApp(ctx workflow.Context, input *sms.GetAppInput) (*sms.GetAppOutput, error) {
	var output sms.GetAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppAsync(ctx workflow.Context, input *sms.GetAppInput) *GetAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetApp", input)
	return &GetAppFuture{Future: future}
}

func (a *stub) GetAppLaunchConfiguration(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error) {
	var output sms.GetAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.GetAppLaunchConfigurationInput) *GetAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetAppLaunchConfiguration", input)
	return &GetAppLaunchConfigurationFuture{Future: future}
}

func (a *stub) GetAppReplicationConfiguration(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error) {
	var output sms.GetAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.GetAppReplicationConfigurationInput) *GetAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetAppReplicationConfiguration", input)
	return &GetAppReplicationConfigurationFuture{Future: future}
}

func (a *stub) GetAppValidationConfiguration(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error) {
	var output sms.GetAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppValidationConfigurationAsync(ctx workflow.Context, input *sms.GetAppValidationConfigurationInput) *GetAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetAppValidationConfiguration", input)
	return &GetAppValidationConfigurationFuture{Future: future}
}

func (a *stub) GetAppValidationOutput(ctx workflow.Context, input *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error) {
	var output sms.GetAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppValidationOutputAsync(ctx workflow.Context, input *sms.GetAppValidationOutputInput) *GetAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetAppValidationOutput", input)
	return &GetAppValidationOutputFuture{Future: future}
}

func (a *stub) GetConnectors(ctx workflow.Context, input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error) {
	var output sms.GetConnectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetConnectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectorsAsync(ctx workflow.Context, input *sms.GetConnectorsInput) *GetConnectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetConnectors", input)
	return &GetConnectorsFuture{Future: future}
}

func (a *stub) GetReplicationJobs(ctx workflow.Context, input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error) {
	var output sms.GetReplicationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetReplicationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReplicationJobsAsync(ctx workflow.Context, input *sms.GetReplicationJobsInput) *GetReplicationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetReplicationJobs", input)
	return &GetReplicationJobsFuture{Future: future}
}

func (a *stub) GetReplicationRuns(ctx workflow.Context, input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error) {
	var output sms.GetReplicationRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetReplicationRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReplicationRunsAsync(ctx workflow.Context, input *sms.GetReplicationRunsInput) *GetReplicationRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetReplicationRuns", input)
	return &GetReplicationRunsFuture{Future: future}
}

func (a *stub) GetServers(ctx workflow.Context, input *sms.GetServersInput) (*sms.GetServersOutput, error) {
	var output sms.GetServersOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-GetServers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServersAsync(ctx workflow.Context, input *sms.GetServersInput) *GetServersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-GetServers", input)
	return &GetServersFuture{Future: future}
}

func (a *stub) ImportAppCatalog(ctx workflow.Context, input *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error) {
	var output sms.ImportAppCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-ImportAppCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportAppCatalogAsync(ctx workflow.Context, input *sms.ImportAppCatalogInput) *ImportAppCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-ImportAppCatalog", input)
	return &ImportAppCatalogFuture{Future: future}
}

func (a *stub) ImportServerCatalog(ctx workflow.Context, input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error) {
	var output sms.ImportServerCatalogOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-ImportServerCatalog", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportServerCatalogAsync(ctx workflow.Context, input *sms.ImportServerCatalogInput) *ImportServerCatalogFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-ImportServerCatalog", input)
	return &ImportServerCatalogFuture{Future: future}
}

func (a *stub) LaunchApp(ctx workflow.Context, input *sms.LaunchAppInput) (*sms.LaunchAppOutput, error) {
	var output sms.LaunchAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-LaunchApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LaunchAppAsync(ctx workflow.Context, input *sms.LaunchAppInput) *LaunchAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-LaunchApp", input)
	return &LaunchAppFuture{Future: future}
}

func (a *stub) ListApps(ctx workflow.Context, input *sms.ListAppsInput) (*sms.ListAppsOutput, error) {
	var output sms.ListAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-ListApps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppsAsync(ctx workflow.Context, input *sms.ListAppsInput) *ListAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-ListApps", input)
	return &ListAppsFuture{Future: future}
}

func (a *stub) NotifyAppValidationOutput(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error) {
	var output sms.NotifyAppValidationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-NotifyAppValidationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) NotifyAppValidationOutputAsync(ctx workflow.Context, input *sms.NotifyAppValidationOutputInput) *NotifyAppValidationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-NotifyAppValidationOutput", input)
	return &NotifyAppValidationOutputFuture{Future: future}
}

func (a *stub) PutAppLaunchConfiguration(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error) {
	var output sms.PutAppLaunchConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-PutAppLaunchConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppLaunchConfigurationAsync(ctx workflow.Context, input *sms.PutAppLaunchConfigurationInput) *PutAppLaunchConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-PutAppLaunchConfiguration", input)
	return &PutAppLaunchConfigurationFuture{Future: future}
}

func (a *stub) PutAppReplicationConfiguration(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error) {
	var output sms.PutAppReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-PutAppReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppReplicationConfigurationAsync(ctx workflow.Context, input *sms.PutAppReplicationConfigurationInput) *PutAppReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-PutAppReplicationConfiguration", input)
	return &PutAppReplicationConfigurationFuture{Future: future}
}

func (a *stub) PutAppValidationConfiguration(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error) {
	var output sms.PutAppValidationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-PutAppValidationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAppValidationConfigurationAsync(ctx workflow.Context, input *sms.PutAppValidationConfigurationInput) *PutAppValidationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-PutAppValidationConfiguration", input)
	return &PutAppValidationConfigurationFuture{Future: future}
}

func (a *stub) StartAppReplication(ctx workflow.Context, input *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error) {
	var output sms.StartAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-StartAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAppReplicationAsync(ctx workflow.Context, input *sms.StartAppReplicationInput) *StartAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-StartAppReplication", input)
	return &StartAppReplicationFuture{Future: future}
}

func (a *stub) StartOnDemandAppReplication(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error) {
	var output sms.StartOnDemandAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-StartOnDemandAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartOnDemandAppReplicationAsync(ctx workflow.Context, input *sms.StartOnDemandAppReplicationInput) *StartOnDemandAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-StartOnDemandAppReplication", input)
	return &StartOnDemandAppReplicationFuture{Future: future}
}

func (a *stub) StartOnDemandReplicationRun(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error) {
	var output sms.StartOnDemandReplicationRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-StartOnDemandReplicationRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartOnDemandReplicationRunAsync(ctx workflow.Context, input *sms.StartOnDemandReplicationRunInput) *StartOnDemandReplicationRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-StartOnDemandReplicationRun", input)
	return &StartOnDemandReplicationRunFuture{Future: future}
}

func (a *stub) StopAppReplication(ctx workflow.Context, input *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error) {
	var output sms.StopAppReplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-StopAppReplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAppReplicationAsync(ctx workflow.Context, input *sms.StopAppReplicationInput) *StopAppReplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-StopAppReplication", input)
	return &StopAppReplicationFuture{Future: future}
}

func (a *stub) TerminateApp(ctx workflow.Context, input *sms.TerminateAppInput) (*sms.TerminateAppOutput, error) {
	var output sms.TerminateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-TerminateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateAppAsync(ctx workflow.Context, input *sms.TerminateAppInput) *TerminateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-TerminateApp", input)
	return &TerminateAppFuture{Future: future}
}

func (a *stub) UpdateApp(ctx workflow.Context, input *sms.UpdateAppInput) (*sms.UpdateAppOutput, error) {
	var output sms.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppAsync(ctx workflow.Context, input *sms.UpdateAppInput) *UpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-UpdateApp", input)
	return &UpdateAppFuture{Future: future}
}

func (a *stub) UpdateReplicationJob(ctx workflow.Context, input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error) {
	var output sms.UpdateReplicationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-sms-UpdateReplicationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReplicationJobAsync(ctx workflow.Context, input *sms.UpdateReplicationJobInput) *UpdateReplicationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sms-UpdateReplicationJob", input)
	return &UpdateReplicationJobFuture{Future: future}
}
