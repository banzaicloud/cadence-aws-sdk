// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package quicksightstub

import (
	"github.com/aws/aws-sdk-go/service/quicksight"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelIngestionFuture) Get(ctx workflow.Context) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDashboardFuture) Get(ctx workflow.Context) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDataSetFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIngestionFuture) Get(ctx workflow.Context) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNamespaceFuture) Get(ctx workflow.Context) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTemplateFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateThemeFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDashboardFuture) Get(ctx workflow.Context) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDataSetFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupMembershipFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupMembershipFuture) Get(ctx workflow.Context) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTemplateFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteThemeFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserByPrincipalIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserByPrincipalIdFuture) Get(ctx workflow.Context) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAnalysisFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAnalysisPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDashboardFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDashboardPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDataSetFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDataSetPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDataSourceFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDataSourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGroupFuture) Get(ctx workflow.Context) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIngestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIngestionFuture) Get(ctx workflow.Context) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNamespaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNamespaceFuture) Get(ctx workflow.Context) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTemplateFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTemplatePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeThemeFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeThemePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserFuture) Get(ctx workflow.Context) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDashboardEmbedUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDashboardEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSessionEmbedUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSessionEmbedUrlFuture) Get(ctx workflow.Context) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAnalysesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAnalysesFuture) Get(ctx workflow.Context) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDashboardVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDashboardVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDashboardsFuture) Get(ctx workflow.Context) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDataSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDataSetsFuture) Get(ctx workflow.Context) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDataSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDataSourcesFuture) Get(ctx workflow.Context) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupMembershipsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupMembershipsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIAMPolicyAssignmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIAMPolicyAssignmentsFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIAMPolicyAssignmentsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIAMPolicyAssignmentsForUserFuture) Get(ctx workflow.Context) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIngestionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIngestionsFuture) Get(ctx workflow.Context) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNamespacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNamespacesFuture) Get(ctx workflow.Context) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTemplateAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTemplateAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTemplateVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTemplateVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTemplatesFuture) Get(ctx workflow.Context) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListThemeAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListThemeAliasesFuture) Get(ctx workflow.Context) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListThemeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListThemeVersionsFuture) Get(ctx workflow.Context) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListThemesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListThemesFuture) Get(ctx workflow.Context) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserGroupsFuture) Get(ctx workflow.Context) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterUserFuture) Get(ctx workflow.Context) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreAnalysisFuture) Get(ctx workflow.Context) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchAnalysesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchAnalysesFuture) Get(ctx workflow.Context) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchDashboardsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchDashboardsFuture) Get(ctx workflow.Context) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountCustomizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountCustomizationFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountSettingsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAnalysisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAnalysisFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAnalysisPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAnalysisPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDashboardFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDashboardFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDashboardPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDashboardPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDashboardPublishedVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDashboardPublishedVersionFuture) Get(ctx workflow.Context) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataSetFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataSetPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataSetPermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataSourceFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataSourcePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataSourcePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupFuture) Get(ctx workflow.Context) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIAMPolicyAssignmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIAMPolicyAssignmentFuture) Get(ctx workflow.Context) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTemplateFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTemplateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTemplateAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTemplatePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTemplatePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateThemeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateThemeFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateThemeAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateThemeAliasFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateThemePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateThemePermissionsFuture) Get(ctx workflow.Context) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserFuture) Get(ctx workflow.Context) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelIngestion(ctx workflow.Context, input *quicksight.CancelIngestionInput) (*quicksight.CancelIngestionOutput, error) {
	var output quicksight.CancelIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CancelIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelIngestionAsync(ctx workflow.Context, input *quicksight.CancelIngestionInput) *CancelIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CancelIngestion", input)
	return &CancelIngestionFuture{Future: future}
}

func (a *stub) CreateAccountCustomization(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) (*quicksight.CreateAccountCustomizationOutput, error) {
	var output quicksight.CreateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.CreateAccountCustomizationInput) *CreateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateAccountCustomization", input)
	return &CreateAccountCustomizationFuture{Future: future}
}

func (a *stub) CreateAnalysis(ctx workflow.Context, input *quicksight.CreateAnalysisInput) (*quicksight.CreateAnalysisOutput, error) {
	var output quicksight.CreateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAnalysisAsync(ctx workflow.Context, input *quicksight.CreateAnalysisInput) *CreateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateAnalysis", input)
	return &CreateAnalysisFuture{Future: future}
}

func (a *stub) CreateDashboard(ctx workflow.Context, input *quicksight.CreateDashboardInput) (*quicksight.CreateDashboardOutput, error) {
	var output quicksight.CreateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDashboardAsync(ctx workflow.Context, input *quicksight.CreateDashboardInput) *CreateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDashboard", input)
	return &CreateDashboardFuture{Future: future}
}

func (a *stub) CreateDataSet(ctx workflow.Context, input *quicksight.CreateDataSetInput) (*quicksight.CreateDataSetOutput, error) {
	var output quicksight.CreateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataSetAsync(ctx workflow.Context, input *quicksight.CreateDataSetInput) *CreateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDataSet", input)
	return &CreateDataSetFuture{Future: future}
}

func (a *stub) CreateDataSource(ctx workflow.Context, input *quicksight.CreateDataSourceInput) (*quicksight.CreateDataSourceOutput, error) {
	var output quicksight.CreateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDataSourceAsync(ctx workflow.Context, input *quicksight.CreateDataSourceInput) *CreateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateDataSource", input)
	return &CreateDataSourceFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *quicksight.CreateGroupInput) (*quicksight.CreateGroupOutput, error) {
	var output quicksight.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *quicksight.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateGroupMembership(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) (*quicksight.CreateGroupMembershipOutput, error) {
	var output quicksight.CreateGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupMembershipAsync(ctx workflow.Context, input *quicksight.CreateGroupMembershipInput) *CreateGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateGroupMembership", input)
	return &CreateGroupMembershipFuture{Future: future}
}

func (a *stub) CreateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	var output quicksight.CreateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.CreateIAMPolicyAssignmentInput) *CreateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateIAMPolicyAssignment", input)
	return &CreateIAMPolicyAssignmentFuture{Future: future}
}

func (a *stub) CreateIngestion(ctx workflow.Context, input *quicksight.CreateIngestionInput) (*quicksight.CreateIngestionOutput, error) {
	var output quicksight.CreateIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIngestionAsync(ctx workflow.Context, input *quicksight.CreateIngestionInput) *CreateIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateIngestion", input)
	return &CreateIngestionFuture{Future: future}
}

func (a *stub) CreateNamespace(ctx workflow.Context, input *quicksight.CreateNamespaceInput) (*quicksight.CreateNamespaceOutput, error) {
	var output quicksight.CreateNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNamespaceAsync(ctx workflow.Context, input *quicksight.CreateNamespaceInput) *CreateNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateNamespace", input)
	return &CreateNamespaceFuture{Future: future}
}

func (a *stub) CreateTemplate(ctx workflow.Context, input *quicksight.CreateTemplateInput) (*quicksight.CreateTemplateOutput, error) {
	var output quicksight.CreateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTemplateAsync(ctx workflow.Context, input *quicksight.CreateTemplateInput) *CreateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTemplate", input)
	return &CreateTemplateFuture{Future: future}
}

func (a *stub) CreateTemplateAlias(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) (*quicksight.CreateTemplateAliasOutput, error) {
	var output quicksight.CreateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTemplateAliasAsync(ctx workflow.Context, input *quicksight.CreateTemplateAliasInput) *CreateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTemplateAlias", input)
	return &CreateTemplateAliasFuture{Future: future}
}

func (a *stub) CreateTheme(ctx workflow.Context, input *quicksight.CreateThemeInput) (*quicksight.CreateThemeOutput, error) {
	var output quicksight.CreateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThemeAsync(ctx workflow.Context, input *quicksight.CreateThemeInput) *CreateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateTheme", input)
	return &CreateThemeFuture{Future: future}
}

func (a *stub) CreateThemeAlias(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) (*quicksight.CreateThemeAliasOutput, error) {
	var output quicksight.CreateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThemeAliasAsync(ctx workflow.Context, input *quicksight.CreateThemeAliasInput) *CreateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-CreateThemeAlias", input)
	return &CreateThemeAliasFuture{Future: future}
}

func (a *stub) DeleteAccountCustomization(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) (*quicksight.DeleteAccountCustomizationOutput, error) {
	var output quicksight.DeleteAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DeleteAccountCustomizationInput) *DeleteAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteAccountCustomization", input)
	return &DeleteAccountCustomizationFuture{Future: future}
}

func (a *stub) DeleteAnalysis(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) (*quicksight.DeleteAnalysisOutput, error) {
	var output quicksight.DeleteAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnalysisAsync(ctx workflow.Context, input *quicksight.DeleteAnalysisInput) *DeleteAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteAnalysis", input)
	return &DeleteAnalysisFuture{Future: future}
}

func (a *stub) DeleteDashboard(ctx workflow.Context, input *quicksight.DeleteDashboardInput) (*quicksight.DeleteDashboardOutput, error) {
	var output quicksight.DeleteDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDashboardAsync(ctx workflow.Context, input *quicksight.DeleteDashboardInput) *DeleteDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDashboard", input)
	return &DeleteDashboardFuture{Future: future}
}

func (a *stub) DeleteDataSet(ctx workflow.Context, input *quicksight.DeleteDataSetInput) (*quicksight.DeleteDataSetOutput, error) {
	var output quicksight.DeleteDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDataSetAsync(ctx workflow.Context, input *quicksight.DeleteDataSetInput) *DeleteDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDataSet", input)
	return &DeleteDataSetFuture{Future: future}
}

func (a *stub) DeleteDataSource(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) (*quicksight.DeleteDataSourceOutput, error) {
	var output quicksight.DeleteDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDataSourceAsync(ctx workflow.Context, input *quicksight.DeleteDataSourceInput) *DeleteDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteDataSource", input)
	return &DeleteDataSourceFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *quicksight.DeleteGroupInput) (*quicksight.DeleteGroupOutput, error) {
	var output quicksight.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *quicksight.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteGroupMembership(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) (*quicksight.DeleteGroupMembershipOutput, error) {
	var output quicksight.DeleteGroupMembershipOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteGroupMembership", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupMembershipAsync(ctx workflow.Context, input *quicksight.DeleteGroupMembershipInput) *DeleteGroupMembershipFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteGroupMembership", input)
	return &DeleteGroupMembershipFuture{Future: future}
}

func (a *stub) DeleteIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	var output quicksight.DeleteIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DeleteIAMPolicyAssignmentInput) *DeleteIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteIAMPolicyAssignment", input)
	return &DeleteIAMPolicyAssignmentFuture{Future: future}
}

func (a *stub) DeleteNamespace(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) (*quicksight.DeleteNamespaceOutput, error) {
	var output quicksight.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNamespaceAsync(ctx workflow.Context, input *quicksight.DeleteNamespaceInput) *DeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteNamespace", input)
	return &DeleteNamespaceFuture{Future: future}
}

func (a *stub) DeleteTemplate(ctx workflow.Context, input *quicksight.DeleteTemplateInput) (*quicksight.DeleteTemplateOutput, error) {
	var output quicksight.DeleteTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTemplateAsync(ctx workflow.Context, input *quicksight.DeleteTemplateInput) *DeleteTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTemplate", input)
	return &DeleteTemplateFuture{Future: future}
}

func (a *stub) DeleteTemplateAlias(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) (*quicksight.DeleteTemplateAliasOutput, error) {
	var output quicksight.DeleteTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTemplateAliasAsync(ctx workflow.Context, input *quicksight.DeleteTemplateAliasInput) *DeleteTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTemplateAlias", input)
	return &DeleteTemplateAliasFuture{Future: future}
}

func (a *stub) DeleteTheme(ctx workflow.Context, input *quicksight.DeleteThemeInput) (*quicksight.DeleteThemeOutput, error) {
	var output quicksight.DeleteThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThemeAsync(ctx workflow.Context, input *quicksight.DeleteThemeInput) *DeleteThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteTheme", input)
	return &DeleteThemeFuture{Future: future}
}

func (a *stub) DeleteThemeAlias(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) (*quicksight.DeleteThemeAliasOutput, error) {
	var output quicksight.DeleteThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThemeAliasAsync(ctx workflow.Context, input *quicksight.DeleteThemeAliasInput) *DeleteThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteThemeAlias", input)
	return &DeleteThemeAliasFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *quicksight.DeleteUserInput) (*quicksight.DeleteUserOutput, error) {
	var output quicksight.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *quicksight.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DeleteUserByPrincipalId(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	var output quicksight.DeleteUserByPrincipalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteUserByPrincipalId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserByPrincipalIdAsync(ctx workflow.Context, input *quicksight.DeleteUserByPrincipalIdInput) *DeleteUserByPrincipalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DeleteUserByPrincipalId", input)
	return &DeleteUserByPrincipalIdFuture{Future: future}
}

func (a *stub) DescribeAccountCustomization(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) (*quicksight.DescribeAccountCustomizationOutput, error) {
	var output quicksight.DescribeAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountCustomizationAsync(ctx workflow.Context, input *quicksight.DescribeAccountCustomizationInput) *DescribeAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAccountCustomization", input)
	return &DescribeAccountCustomizationFuture{Future: future}
}

func (a *stub) DescribeAccountSettings(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) (*quicksight.DescribeAccountSettingsOutput, error) {
	var output quicksight.DescribeAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountSettingsAsync(ctx workflow.Context, input *quicksight.DescribeAccountSettingsInput) *DescribeAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAccountSettings", input)
	return &DescribeAccountSettingsFuture{Future: future}
}

func (a *stub) DescribeAnalysis(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) (*quicksight.DescribeAnalysisOutput, error) {
	var output quicksight.DescribeAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAnalysisAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisInput) *DescribeAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAnalysis", input)
	return &DescribeAnalysisFuture{Future: future}
}

func (a *stub) DescribeAnalysisPermissions(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	var output quicksight.DescribeAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeAnalysisPermissionsInput) *DescribeAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeAnalysisPermissions", input)
	return &DescribeAnalysisPermissionsFuture{Future: future}
}

func (a *stub) DescribeDashboard(ctx workflow.Context, input *quicksight.DescribeDashboardInput) (*quicksight.DescribeDashboardOutput, error) {
	var output quicksight.DescribeDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDashboardAsync(ctx workflow.Context, input *quicksight.DescribeDashboardInput) *DescribeDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDashboard", input)
	return &DescribeDashboardFuture{Future: future}
}

func (a *stub) DescribeDashboardPermissions(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	var output quicksight.DescribeDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDashboardPermissionsInput) *DescribeDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDashboardPermissions", input)
	return &DescribeDashboardPermissionsFuture{Future: future}
}

func (a *stub) DescribeDataSet(ctx workflow.Context, input *quicksight.DescribeDataSetInput) (*quicksight.DescribeDataSetOutput, error) {
	var output quicksight.DescribeDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDataSetAsync(ctx workflow.Context, input *quicksight.DescribeDataSetInput) *DescribeDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSet", input)
	return &DescribeDataSetFuture{Future: future}
}

func (a *stub) DescribeDataSetPermissions(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	var output quicksight.DescribeDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSetPermissionsInput) *DescribeDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSetPermissions", input)
	return &DescribeDataSetPermissionsFuture{Future: future}
}

func (a *stub) DescribeDataSource(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) (*quicksight.DescribeDataSourceOutput, error) {
	var output quicksight.DescribeDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDataSourceAsync(ctx workflow.Context, input *quicksight.DescribeDataSourceInput) *DescribeDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSource", input)
	return &DescribeDataSourceFuture{Future: future}
}

func (a *stub) DescribeDataSourcePermissions(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	var output quicksight.DescribeDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeDataSourcePermissionsInput) *DescribeDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeDataSourcePermissions", input)
	return &DescribeDataSourcePermissionsFuture{Future: future}
}

func (a *stub) DescribeGroup(ctx workflow.Context, input *quicksight.DescribeGroupInput) (*quicksight.DescribeGroupOutput, error) {
	var output quicksight.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGroupAsync(ctx workflow.Context, input *quicksight.DescribeGroupInput) *DescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeGroup", input)
	return &DescribeGroupFuture{Future: future}
}

func (a *stub) DescribeIAMPolicyAssignment(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	var output quicksight.DescribeIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.DescribeIAMPolicyAssignmentInput) *DescribeIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeIAMPolicyAssignment", input)
	return &DescribeIAMPolicyAssignmentFuture{Future: future}
}

func (a *stub) DescribeIngestion(ctx workflow.Context, input *quicksight.DescribeIngestionInput) (*quicksight.DescribeIngestionOutput, error) {
	var output quicksight.DescribeIngestionOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeIngestion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIngestionAsync(ctx workflow.Context, input *quicksight.DescribeIngestionInput) *DescribeIngestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeIngestion", input)
	return &DescribeIngestionFuture{Future: future}
}

func (a *stub) DescribeNamespace(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) (*quicksight.DescribeNamespaceOutput, error) {
	var output quicksight.DescribeNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNamespaceAsync(ctx workflow.Context, input *quicksight.DescribeNamespaceInput) *DescribeNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeNamespace", input)
	return &DescribeNamespaceFuture{Future: future}
}

func (a *stub) DescribeTemplate(ctx workflow.Context, input *quicksight.DescribeTemplateInput) (*quicksight.DescribeTemplateOutput, error) {
	var output quicksight.DescribeTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTemplateAsync(ctx workflow.Context, input *quicksight.DescribeTemplateInput) *DescribeTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplate", input)
	return &DescribeTemplateFuture{Future: future}
}

func (a *stub) DescribeTemplateAlias(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) (*quicksight.DescribeTemplateAliasOutput, error) {
	var output quicksight.DescribeTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTemplateAliasAsync(ctx workflow.Context, input *quicksight.DescribeTemplateAliasInput) *DescribeTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplateAlias", input)
	return &DescribeTemplateAliasFuture{Future: future}
}

func (a *stub) DescribeTemplatePermissions(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	var output quicksight.DescribeTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeTemplatePermissionsInput) *DescribeTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTemplatePermissions", input)
	return &DescribeTemplatePermissionsFuture{Future: future}
}

func (a *stub) DescribeTheme(ctx workflow.Context, input *quicksight.DescribeThemeInput) (*quicksight.DescribeThemeOutput, error) {
	var output quicksight.DescribeThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThemeAsync(ctx workflow.Context, input *quicksight.DescribeThemeInput) *DescribeThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeTheme", input)
	return &DescribeThemeFuture{Future: future}
}

func (a *stub) DescribeThemeAlias(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) (*quicksight.DescribeThemeAliasOutput, error) {
	var output quicksight.DescribeThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThemeAliasAsync(ctx workflow.Context, input *quicksight.DescribeThemeAliasInput) *DescribeThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeThemeAlias", input)
	return &DescribeThemeAliasFuture{Future: future}
}

func (a *stub) DescribeThemePermissions(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) (*quicksight.DescribeThemePermissionsOutput, error) {
	var output quicksight.DescribeThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThemePermissionsAsync(ctx workflow.Context, input *quicksight.DescribeThemePermissionsInput) *DescribeThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeThemePermissions", input)
	return &DescribeThemePermissionsFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *quicksight.DescribeUserInput) (*quicksight.DescribeUserOutput, error) {
	var output quicksight.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *quicksight.DescribeUserInput) *DescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-DescribeUser", input)
	return &DescribeUserFuture{Future: future}
}

func (a *stub) GetDashboardEmbedUrl(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	var output quicksight.GetDashboardEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-GetDashboardEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDashboardEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetDashboardEmbedUrlInput) *GetDashboardEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-GetDashboardEmbedUrl", input)
	return &GetDashboardEmbedUrlFuture{Future: future}
}

func (a *stub) GetSessionEmbedUrl(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) (*quicksight.GetSessionEmbedUrlOutput, error) {
	var output quicksight.GetSessionEmbedUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-GetSessionEmbedUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSessionEmbedUrlAsync(ctx workflow.Context, input *quicksight.GetSessionEmbedUrlInput) *GetSessionEmbedUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-GetSessionEmbedUrl", input)
	return &GetSessionEmbedUrlFuture{Future: future}
}

func (a *stub) ListAnalyses(ctx workflow.Context, input *quicksight.ListAnalysesInput) (*quicksight.ListAnalysesOutput, error) {
	var output quicksight.ListAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAnalysesAsync(ctx workflow.Context, input *quicksight.ListAnalysesInput) *ListAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListAnalyses", input)
	return &ListAnalysesFuture{Future: future}
}

func (a *stub) ListDashboardVersions(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) (*quicksight.ListDashboardVersionsOutput, error) {
	var output quicksight.ListDashboardVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDashboardVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDashboardVersionsAsync(ctx workflow.Context, input *quicksight.ListDashboardVersionsInput) *ListDashboardVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDashboardVersions", input)
	return &ListDashboardVersionsFuture{Future: future}
}

func (a *stub) ListDashboards(ctx workflow.Context, input *quicksight.ListDashboardsInput) (*quicksight.ListDashboardsOutput, error) {
	var output quicksight.ListDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDashboardsAsync(ctx workflow.Context, input *quicksight.ListDashboardsInput) *ListDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDashboards", input)
	return &ListDashboardsFuture{Future: future}
}

func (a *stub) ListDataSets(ctx workflow.Context, input *quicksight.ListDataSetsInput) (*quicksight.ListDataSetsOutput, error) {
	var output quicksight.ListDataSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDataSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDataSetsAsync(ctx workflow.Context, input *quicksight.ListDataSetsInput) *ListDataSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDataSets", input)
	return &ListDataSetsFuture{Future: future}
}

func (a *stub) ListDataSources(ctx workflow.Context, input *quicksight.ListDataSourcesInput) (*quicksight.ListDataSourcesOutput, error) {
	var output quicksight.ListDataSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDataSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDataSourcesAsync(ctx workflow.Context, input *quicksight.ListDataSourcesInput) *ListDataSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListDataSources", input)
	return &ListDataSourcesFuture{Future: future}
}

func (a *stub) ListGroupMemberships(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) (*quicksight.ListGroupMembershipsOutput, error) {
	var output quicksight.ListGroupMembershipsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListGroupMemberships", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupMembershipsAsync(ctx workflow.Context, input *quicksight.ListGroupMembershipsInput) *ListGroupMembershipsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListGroupMemberships", input)
	return &ListGroupMembershipsFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *quicksight.ListGroupsInput) (*quicksight.ListGroupsOutput, error) {
	var output quicksight.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *quicksight.ListGroupsInput) *ListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListGroups", input)
	return &ListGroupsFuture{Future: future}
}

func (a *stub) ListIAMPolicyAssignments(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIAMPolicyAssignments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIAMPolicyAssignmentsAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsInput) *ListIAMPolicyAssignmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIAMPolicyAssignments", input)
	return &ListIAMPolicyAssignmentsFuture{Future: future}
}

func (a *stub) ListIAMPolicyAssignmentsForUser(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	var output quicksight.ListIAMPolicyAssignmentsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIAMPolicyAssignmentsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIAMPolicyAssignmentsForUserAsync(ctx workflow.Context, input *quicksight.ListIAMPolicyAssignmentsForUserInput) *ListIAMPolicyAssignmentsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIAMPolicyAssignmentsForUser", input)
	return &ListIAMPolicyAssignmentsForUserFuture{Future: future}
}

func (a *stub) ListIngestions(ctx workflow.Context, input *quicksight.ListIngestionsInput) (*quicksight.ListIngestionsOutput, error) {
	var output quicksight.ListIngestionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIngestions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIngestionsAsync(ctx workflow.Context, input *quicksight.ListIngestionsInput) *ListIngestionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListIngestions", input)
	return &ListIngestionsFuture{Future: future}
}

func (a *stub) ListNamespaces(ctx workflow.Context, input *quicksight.ListNamespacesInput) (*quicksight.ListNamespacesOutput, error) {
	var output quicksight.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNamespacesAsync(ctx workflow.Context, input *quicksight.ListNamespacesInput) *ListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListNamespaces", input)
	return &ListNamespacesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) (*quicksight.ListTagsForResourceOutput, error) {
	var output quicksight.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *quicksight.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTemplateAliases(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) (*quicksight.ListTemplateAliasesOutput, error) {
	var output quicksight.ListTemplateAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplateAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTemplateAliasesAsync(ctx workflow.Context, input *quicksight.ListTemplateAliasesInput) *ListTemplateAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplateAliases", input)
	return &ListTemplateAliasesFuture{Future: future}
}

func (a *stub) ListTemplateVersions(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) (*quicksight.ListTemplateVersionsOutput, error) {
	var output quicksight.ListTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTemplateVersionsAsync(ctx workflow.Context, input *quicksight.ListTemplateVersionsInput) *ListTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplateVersions", input)
	return &ListTemplateVersionsFuture{Future: future}
}

func (a *stub) ListTemplates(ctx workflow.Context, input *quicksight.ListTemplatesInput) (*quicksight.ListTemplatesOutput, error) {
	var output quicksight.ListTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTemplatesAsync(ctx workflow.Context, input *quicksight.ListTemplatesInput) *ListTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListTemplates", input)
	return &ListTemplatesFuture{Future: future}
}

func (a *stub) ListThemeAliases(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) (*quicksight.ListThemeAliasesOutput, error) {
	var output quicksight.ListThemeAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemeAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThemeAliasesAsync(ctx workflow.Context, input *quicksight.ListThemeAliasesInput) *ListThemeAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemeAliases", input)
	return &ListThemeAliasesFuture{Future: future}
}

func (a *stub) ListThemeVersions(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) (*quicksight.ListThemeVersionsOutput, error) {
	var output quicksight.ListThemeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThemeVersionsAsync(ctx workflow.Context, input *quicksight.ListThemeVersionsInput) *ListThemeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemeVersions", input)
	return &ListThemeVersionsFuture{Future: future}
}

func (a *stub) ListThemes(ctx workflow.Context, input *quicksight.ListThemesInput) (*quicksight.ListThemesOutput, error) {
	var output quicksight.ListThemesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThemesAsync(ctx workflow.Context, input *quicksight.ListThemesInput) *ListThemesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListThemes", input)
	return &ListThemesFuture{Future: future}
}

func (a *stub) ListUserGroups(ctx workflow.Context, input *quicksight.ListUserGroupsInput) (*quicksight.ListUserGroupsOutput, error) {
	var output quicksight.ListUserGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListUserGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserGroupsAsync(ctx workflow.Context, input *quicksight.ListUserGroupsInput) *ListUserGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListUserGroups", input)
	return &ListUserGroupsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *quicksight.ListUsersInput) (*quicksight.ListUsersOutput, error) {
	var output quicksight.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *quicksight.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) RegisterUser(ctx workflow.Context, input *quicksight.RegisterUserInput) (*quicksight.RegisterUserOutput, error) {
	var output quicksight.RegisterUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-RegisterUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterUserAsync(ctx workflow.Context, input *quicksight.RegisterUserInput) *RegisterUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-RegisterUser", input)
	return &RegisterUserFuture{Future: future}
}

func (a *stub) RestoreAnalysis(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) (*quicksight.RestoreAnalysisOutput, error) {
	var output quicksight.RestoreAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-RestoreAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreAnalysisAsync(ctx workflow.Context, input *quicksight.RestoreAnalysisInput) *RestoreAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-RestoreAnalysis", input)
	return &RestoreAnalysisFuture{Future: future}
}

func (a *stub) SearchAnalyses(ctx workflow.Context, input *quicksight.SearchAnalysesInput) (*quicksight.SearchAnalysesOutput, error) {
	var output quicksight.SearchAnalysesOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-SearchAnalyses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchAnalysesAsync(ctx workflow.Context, input *quicksight.SearchAnalysesInput) *SearchAnalysesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-SearchAnalyses", input)
	return &SearchAnalysesFuture{Future: future}
}

func (a *stub) SearchDashboards(ctx workflow.Context, input *quicksight.SearchDashboardsInput) (*quicksight.SearchDashboardsOutput, error) {
	var output quicksight.SearchDashboardsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-SearchDashboards", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchDashboardsAsync(ctx workflow.Context, input *quicksight.SearchDashboardsInput) *SearchDashboardsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-SearchDashboards", input)
	return &SearchDashboardsFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *quicksight.TagResourceInput) (*quicksight.TagResourceOutput, error) {
	var output quicksight.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *quicksight.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *quicksight.UntagResourceInput) (*quicksight.UntagResourceOutput, error) {
	var output quicksight.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *quicksight.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccountCustomization(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) (*quicksight.UpdateAccountCustomizationOutput, error) {
	var output quicksight.UpdateAccountCustomizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAccountCustomization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountCustomizationAsync(ctx workflow.Context, input *quicksight.UpdateAccountCustomizationInput) *UpdateAccountCustomizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAccountCustomization", input)
	return &UpdateAccountCustomizationFuture{Future: future}
}

func (a *stub) UpdateAccountSettings(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) (*quicksight.UpdateAccountSettingsOutput, error) {
	var output quicksight.UpdateAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountSettingsAsync(ctx workflow.Context, input *quicksight.UpdateAccountSettingsInput) *UpdateAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAccountSettings", input)
	return &UpdateAccountSettingsFuture{Future: future}
}

func (a *stub) UpdateAnalysis(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) (*quicksight.UpdateAnalysisOutput, error) {
	var output quicksight.UpdateAnalysisOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAnalysis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAnalysisAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisInput) *UpdateAnalysisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAnalysis", input)
	return &UpdateAnalysisFuture{Future: future}
}

func (a *stub) UpdateAnalysisPermissions(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	var output quicksight.UpdateAnalysisPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAnalysisPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAnalysisPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateAnalysisPermissionsInput) *UpdateAnalysisPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateAnalysisPermissions", input)
	return &UpdateAnalysisPermissionsFuture{Future: future}
}

func (a *stub) UpdateDashboard(ctx workflow.Context, input *quicksight.UpdateDashboardInput) (*quicksight.UpdateDashboardOutput, error) {
	var output quicksight.UpdateDashboardOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboard", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDashboardAsync(ctx workflow.Context, input *quicksight.UpdateDashboardInput) *UpdateDashboardFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboard", input)
	return &UpdateDashboardFuture{Future: future}
}

func (a *stub) UpdateDashboardPermissions(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	var output quicksight.UpdateDashboardPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboardPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDashboardPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPermissionsInput) *UpdateDashboardPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboardPermissions", input)
	return &UpdateDashboardPermissionsFuture{Future: future}
}

func (a *stub) UpdateDashboardPublishedVersion(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	var output quicksight.UpdateDashboardPublishedVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboardPublishedVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDashboardPublishedVersionAsync(ctx workflow.Context, input *quicksight.UpdateDashboardPublishedVersionInput) *UpdateDashboardPublishedVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDashboardPublishedVersion", input)
	return &UpdateDashboardPublishedVersionFuture{Future: future}
}

func (a *stub) UpdateDataSet(ctx workflow.Context, input *quicksight.UpdateDataSetInput) (*quicksight.UpdateDataSetOutput, error) {
	var output quicksight.UpdateDataSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataSetAsync(ctx workflow.Context, input *quicksight.UpdateDataSetInput) *UpdateDataSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSet", input)
	return &UpdateDataSetFuture{Future: future}
}

func (a *stub) UpdateDataSetPermissions(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	var output quicksight.UpdateDataSetPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSetPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataSetPermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSetPermissionsInput) *UpdateDataSetPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSetPermissions", input)
	return &UpdateDataSetPermissionsFuture{Future: future}
}

func (a *stub) UpdateDataSource(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) (*quicksight.UpdateDataSourceOutput, error) {
	var output quicksight.UpdateDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataSourceAsync(ctx workflow.Context, input *quicksight.UpdateDataSourceInput) *UpdateDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSource", input)
	return &UpdateDataSourceFuture{Future: future}
}

func (a *stub) UpdateDataSourcePermissions(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	var output quicksight.UpdateDataSourcePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSourcePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataSourcePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateDataSourcePermissionsInput) *UpdateDataSourcePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateDataSourcePermissions", input)
	return &UpdateDataSourcePermissionsFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *quicksight.UpdateGroupInput) (*quicksight.UpdateGroupOutput, error) {
	var output quicksight.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *quicksight.UpdateGroupInput) *UpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateGroup", input)
	return &UpdateGroupFuture{Future: future}
}

func (a *stub) UpdateIAMPolicyAssignment(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	var output quicksight.UpdateIAMPolicyAssignmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateIAMPolicyAssignment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIAMPolicyAssignmentAsync(ctx workflow.Context, input *quicksight.UpdateIAMPolicyAssignmentInput) *UpdateIAMPolicyAssignmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateIAMPolicyAssignment", input)
	return &UpdateIAMPolicyAssignmentFuture{Future: future}
}

func (a *stub) UpdateTemplate(ctx workflow.Context, input *quicksight.UpdateTemplateInput) (*quicksight.UpdateTemplateOutput, error) {
	var output quicksight.UpdateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTemplateAsync(ctx workflow.Context, input *quicksight.UpdateTemplateInput) *UpdateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplate", input)
	return &UpdateTemplateFuture{Future: future}
}

func (a *stub) UpdateTemplateAlias(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) (*quicksight.UpdateTemplateAliasOutput, error) {
	var output quicksight.UpdateTemplateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTemplateAliasAsync(ctx workflow.Context, input *quicksight.UpdateTemplateAliasInput) *UpdateTemplateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplateAlias", input)
	return &UpdateTemplateAliasFuture{Future: future}
}

func (a *stub) UpdateTemplatePermissions(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	var output quicksight.UpdateTemplatePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplatePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTemplatePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateTemplatePermissionsInput) *UpdateTemplatePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTemplatePermissions", input)
	return &UpdateTemplatePermissionsFuture{Future: future}
}

func (a *stub) UpdateTheme(ctx workflow.Context, input *quicksight.UpdateThemeInput) (*quicksight.UpdateThemeOutput, error) {
	var output quicksight.UpdateThemeOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTheme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThemeAsync(ctx workflow.Context, input *quicksight.UpdateThemeInput) *UpdateThemeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateTheme", input)
	return &UpdateThemeFuture{Future: future}
}

func (a *stub) UpdateThemeAlias(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) (*quicksight.UpdateThemeAliasOutput, error) {
	var output quicksight.UpdateThemeAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateThemeAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThemeAliasAsync(ctx workflow.Context, input *quicksight.UpdateThemeAliasInput) *UpdateThemeAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateThemeAlias", input)
	return &UpdateThemeAliasFuture{Future: future}
}

func (a *stub) UpdateThemePermissions(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) (*quicksight.UpdateThemePermissionsOutput, error) {
	var output quicksight.UpdateThemePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateThemePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThemePermissionsAsync(ctx workflow.Context, input *quicksight.UpdateThemePermissionsInput) *UpdateThemePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateThemePermissions", input)
	return &UpdateThemePermissionsFuture{Future: future}
}

func (a *stub) UpdateUser(ctx workflow.Context, input *quicksight.UpdateUserInput) (*quicksight.UpdateUserOutput, error) {
	var output quicksight.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAsync(ctx workflow.Context, input *quicksight.UpdateUserInput) *UpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-quicksight-UpdateUser", input)
	return &UpdateUserFuture{Future: future}
}
