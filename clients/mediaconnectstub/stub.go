// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mediaconnectstub

import (
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddFlowOutputsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddFlowOutputsFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddFlowSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddFlowSourcesFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddFlowVpcInterfacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddFlowVpcInterfacesFuture) Get(ctx workflow.Context) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFlowFuture) Get(ctx workflow.Context) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFlowFuture) Get(ctx workflow.Context) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFlowFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOfferingFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservationFuture) Get(ctx workflow.Context) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GrantFlowEntitlementsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GrantFlowEntitlementsFuture) Get(ctx workflow.Context) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEntitlementsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEntitlementsFuture) Get(ctx workflow.Context) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFlowsFuture) Get(ctx workflow.Context) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOfferingsFuture) Get(ctx workflow.Context) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReservationsFuture) Get(ctx workflow.Context) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseOfferingFuture) Get(ctx workflow.Context) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveFlowOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveFlowOutputFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveFlowSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveFlowSourceFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveFlowVpcInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveFlowVpcInterfaceFuture) Get(ctx workflow.Context) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeFlowEntitlementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeFlowEntitlementFuture) Get(ctx workflow.Context) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFlowFuture) Get(ctx workflow.Context) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopFlowFuture) Get(ctx workflow.Context) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFlowFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFlowEntitlementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFlowEntitlementFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFlowOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFlowOutputFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFlowSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFlowSourceFuture) Get(ctx workflow.Context) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFlowOutputs(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) (*mediaconnect.AddFlowOutputsOutput, error) {
	var output mediaconnect.AddFlowOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFlowOutputsAsync(ctx workflow.Context, input *mediaconnect.AddFlowOutputsInput) *AddFlowOutputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowOutputs", input)
	return &AddFlowOutputsFuture{Future: future}
}

func (a *stub) AddFlowSources(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) (*mediaconnect.AddFlowSourcesOutput, error) {
	var output mediaconnect.AddFlowSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFlowSourcesAsync(ctx workflow.Context, input *mediaconnect.AddFlowSourcesInput) *AddFlowSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowSources", input)
	return &AddFlowSourcesFuture{Future: future}
}

func (a *stub) AddFlowVpcInterfaces(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	var output mediaconnect.AddFlowVpcInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowVpcInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFlowVpcInterfacesAsync(ctx workflow.Context, input *mediaconnect.AddFlowVpcInterfacesInput) *AddFlowVpcInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-AddFlowVpcInterfaces", input)
	return &AddFlowVpcInterfacesFuture{Future: future}
}

func (a *stub) CreateFlow(ctx workflow.Context, input *mediaconnect.CreateFlowInput) (*mediaconnect.CreateFlowOutput, error) {
	var output mediaconnect.CreateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-CreateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowAsync(ctx workflow.Context, input *mediaconnect.CreateFlowInput) *CreateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-CreateFlow", input)
	return &CreateFlowFuture{Future: future}
}

func (a *stub) DeleteFlow(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) (*mediaconnect.DeleteFlowOutput, error) {
	var output mediaconnect.DeleteFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DeleteFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowAsync(ctx workflow.Context, input *mediaconnect.DeleteFlowInput) *DeleteFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DeleteFlow", input)
	return &DeleteFlowFuture{Future: future}
}

func (a *stub) DescribeFlow(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) (*mediaconnect.DescribeFlowOutput, error) {
	var output mediaconnect.DescribeFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowAsync(ctx workflow.Context, input *mediaconnect.DescribeFlowInput) *DescribeFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeFlow", input)
	return &DescribeFlowFuture{Future: future}
}

func (a *stub) DescribeOffering(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) (*mediaconnect.DescribeOfferingOutput, error) {
	var output mediaconnect.DescribeOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOfferingAsync(ctx workflow.Context, input *mediaconnect.DescribeOfferingInput) *DescribeOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeOffering", input)
	return &DescribeOfferingFuture{Future: future}
}

func (a *stub) DescribeReservation(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) (*mediaconnect.DescribeReservationOutput, error) {
	var output mediaconnect.DescribeReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservationAsync(ctx workflow.Context, input *mediaconnect.DescribeReservationInput) *DescribeReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-DescribeReservation", input)
	return &DescribeReservationFuture{Future: future}
}

func (a *stub) GrantFlowEntitlements(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	var output mediaconnect.GrantFlowEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-GrantFlowEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GrantFlowEntitlementsAsync(ctx workflow.Context, input *mediaconnect.GrantFlowEntitlementsInput) *GrantFlowEntitlementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-GrantFlowEntitlements", input)
	return &GrantFlowEntitlementsFuture{Future: future}
}

func (a *stub) ListEntitlements(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) (*mediaconnect.ListEntitlementsOutput, error) {
	var output mediaconnect.ListEntitlementsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListEntitlements", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntitlementsAsync(ctx workflow.Context, input *mediaconnect.ListEntitlementsInput) *ListEntitlementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListEntitlements", input)
	return &ListEntitlementsFuture{Future: future}
}

func (a *stub) ListFlows(ctx workflow.Context, input *mediaconnect.ListFlowsInput) (*mediaconnect.ListFlowsOutput, error) {
	var output mediaconnect.ListFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFlowsAsync(ctx workflow.Context, input *mediaconnect.ListFlowsInput) *ListFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListFlows", input)
	return &ListFlowsFuture{Future: future}
}

func (a *stub) ListOfferings(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) (*mediaconnect.ListOfferingsOutput, error) {
	var output mediaconnect.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingsAsync(ctx workflow.Context, input *mediaconnect.ListOfferingsInput) *ListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListOfferings", input)
	return &ListOfferingsFuture{Future: future}
}

func (a *stub) ListReservations(ctx workflow.Context, input *mediaconnect.ListReservationsInput) (*mediaconnect.ListReservationsOutput, error) {
	var output mediaconnect.ListReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReservationsAsync(ctx workflow.Context, input *mediaconnect.ListReservationsInput) *ListReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListReservations", input)
	return &ListReservationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) (*mediaconnect.ListTagsForResourceOutput, error) {
	var output mediaconnect.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mediaconnect.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PurchaseOffering(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) (*mediaconnect.PurchaseOfferingOutput, error) {
	var output mediaconnect.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseOfferingAsync(ctx workflow.Context, input *mediaconnect.PurchaseOfferingInput) *PurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-PurchaseOffering", input)
	return &PurchaseOfferingFuture{Future: future}
}

func (a *stub) RemoveFlowOutput(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) (*mediaconnect.RemoveFlowOutputOutput, error) {
	var output mediaconnect.RemoveFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFlowOutputAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowOutputInput) *RemoveFlowOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowOutput", input)
	return &RemoveFlowOutputFuture{Future: future}
}

func (a *stub) RemoveFlowSource(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) (*mediaconnect.RemoveFlowSourceOutput, error) {
	var output mediaconnect.RemoveFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFlowSourceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowSourceInput) *RemoveFlowSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowSource", input)
	return &RemoveFlowSourceFuture{Future: future}
}

func (a *stub) RemoveFlowVpcInterface(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	var output mediaconnect.RemoveFlowVpcInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowVpcInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFlowVpcInterfaceAsync(ctx workflow.Context, input *mediaconnect.RemoveFlowVpcInterfaceInput) *RemoveFlowVpcInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RemoveFlowVpcInterface", input)
	return &RemoveFlowVpcInterfaceFuture{Future: future}
}

func (a *stub) RevokeFlowEntitlement(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	var output mediaconnect.RevokeFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RevokeFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.RevokeFlowEntitlementInput) *RevokeFlowEntitlementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-RevokeFlowEntitlement", input)
	return &RevokeFlowEntitlementFuture{Future: future}
}

func (a *stub) StartFlow(ctx workflow.Context, input *mediaconnect.StartFlowInput) (*mediaconnect.StartFlowOutput, error) {
	var output mediaconnect.StartFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-StartFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFlowAsync(ctx workflow.Context, input *mediaconnect.StartFlowInput) *StartFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-StartFlow", input)
	return &StartFlowFuture{Future: future}
}

func (a *stub) StopFlow(ctx workflow.Context, input *mediaconnect.StopFlowInput) (*mediaconnect.StopFlowOutput, error) {
	var output mediaconnect.StopFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-StopFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopFlowAsync(ctx workflow.Context, input *mediaconnect.StopFlowInput) *StopFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-StopFlow", input)
	return &StopFlowFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mediaconnect.TagResourceInput) (*mediaconnect.TagResourceOutput, error) {
	var output mediaconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mediaconnect.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mediaconnect.UntagResourceInput) (*mediaconnect.UntagResourceOutput, error) {
	var output mediaconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mediaconnect.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateFlow(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) (*mediaconnect.UpdateFlowOutput, error) {
	var output mediaconnect.UpdateFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowInput) *UpdateFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlow", input)
	return &UpdateFlowFuture{Future: future}
}

func (a *stub) UpdateFlowEntitlement(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	var output mediaconnect.UpdateFlowEntitlementOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowEntitlement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowEntitlementAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowEntitlementInput) *UpdateFlowEntitlementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowEntitlement", input)
	return &UpdateFlowEntitlementFuture{Future: future}
}

func (a *stub) UpdateFlowOutput(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) (*mediaconnect.UpdateFlowOutputOutput, error) {
	var output mediaconnect.UpdateFlowOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowOutputAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowOutputInput) *UpdateFlowOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowOutput", input)
	return &UpdateFlowOutputFuture{Future: future}
}

func (a *stub) UpdateFlowSource(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) (*mediaconnect.UpdateFlowSourceOutput, error) {
	var output mediaconnect.UpdateFlowSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFlowSourceAsync(ctx workflow.Context, input *mediaconnect.UpdateFlowSourceInput) *UpdateFlowSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediaconnect-UpdateFlowSource", input)
	return &UpdateFlowSourceFuture{Future: future}
}
