// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package emrcontainersstub

import (
	"github.com/aws/aws-sdk-go/service/emrcontainers"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelJobRunFuture) Get(ctx workflow.Context) (*emrcontainers.CancelJobRunOutput, error) {
	var output emrcontainers.CancelJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateManagedEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateManagedEndpointFuture) Get(ctx workflow.Context) (*emrcontainers.CreateManagedEndpointOutput, error) {
	var output emrcontainers.CreateManagedEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualClusterFuture) Get(ctx workflow.Context) (*emrcontainers.CreateVirtualClusterOutput, error) {
	var output emrcontainers.CreateVirtualClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteManagedEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteManagedEndpointFuture) Get(ctx workflow.Context) (*emrcontainers.DeleteManagedEndpointOutput, error) {
	var output emrcontainers.DeleteManagedEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualClusterFuture) Get(ctx workflow.Context) (*emrcontainers.DeleteVirtualClusterOutput, error) {
	var output emrcontainers.DeleteVirtualClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeJobRunFuture) Get(ctx workflow.Context) (*emrcontainers.DescribeJobRunOutput, error) {
	var output emrcontainers.DescribeJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeManagedEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeManagedEndpointFuture) Get(ctx workflow.Context) (*emrcontainers.DescribeManagedEndpointOutput, error) {
	var output emrcontainers.DescribeManagedEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualClusterFuture) Get(ctx workflow.Context) (*emrcontainers.DescribeVirtualClusterOutput, error) {
	var output emrcontainers.DescribeVirtualClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobRunsFuture) Get(ctx workflow.Context) (*emrcontainers.ListJobRunsOutput, error) {
	var output emrcontainers.ListJobRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListManagedEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListManagedEndpointsFuture) Get(ctx workflow.Context) (*emrcontainers.ListManagedEndpointsOutput, error) {
	var output emrcontainers.ListManagedEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*emrcontainers.ListTagsForResourceOutput, error) {
	var output emrcontainers.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualClustersFuture) Get(ctx workflow.Context) (*emrcontainers.ListVirtualClustersOutput, error) {
	var output emrcontainers.ListVirtualClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartJobRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartJobRunFuture) Get(ctx workflow.Context) (*emrcontainers.StartJobRunOutput, error) {
	var output emrcontainers.StartJobRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*emrcontainers.TagResourceOutput, error) {
	var output emrcontainers.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*emrcontainers.UntagResourceOutput, error) {
	var output emrcontainers.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobRun(ctx workflow.Context, input *emrcontainers.CancelJobRunInput) (*emrcontainers.CancelJobRunOutput, error) {
	var output emrcontainers.CancelJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CancelJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobRunAsync(ctx workflow.Context, input *emrcontainers.CancelJobRunInput) *CancelJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CancelJobRun", input)
	return &CancelJobRunFuture{Future: future}
}

func (a *stub) CreateManagedEndpoint(ctx workflow.Context, input *emrcontainers.CreateManagedEndpointInput) (*emrcontainers.CreateManagedEndpointOutput, error) {
	var output emrcontainers.CreateManagedEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CreateManagedEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.CreateManagedEndpointInput) *CreateManagedEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CreateManagedEndpoint", input)
	return &CreateManagedEndpointFuture{Future: future}
}

func (a *stub) CreateVirtualCluster(ctx workflow.Context, input *emrcontainers.CreateVirtualClusterInput) (*emrcontainers.CreateVirtualClusterOutput, error) {
	var output emrcontainers.CreateVirtualClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CreateVirtualCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.CreateVirtualClusterInput) *CreateVirtualClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-CreateVirtualCluster", input)
	return &CreateVirtualClusterFuture{Future: future}
}

func (a *stub) DeleteManagedEndpoint(ctx workflow.Context, input *emrcontainers.DeleteManagedEndpointInput) (*emrcontainers.DeleteManagedEndpointOutput, error) {
	var output emrcontainers.DeleteManagedEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DeleteManagedEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.DeleteManagedEndpointInput) *DeleteManagedEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DeleteManagedEndpoint", input)
	return &DeleteManagedEndpointFuture{Future: future}
}

func (a *stub) DeleteVirtualCluster(ctx workflow.Context, input *emrcontainers.DeleteVirtualClusterInput) (*emrcontainers.DeleteVirtualClusterOutput, error) {
	var output emrcontainers.DeleteVirtualClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DeleteVirtualCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.DeleteVirtualClusterInput) *DeleteVirtualClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DeleteVirtualCluster", input)
	return &DeleteVirtualClusterFuture{Future: future}
}

func (a *stub) DescribeJobRun(ctx workflow.Context, input *emrcontainers.DescribeJobRunInput) (*emrcontainers.DescribeJobRunOutput, error) {
	var output emrcontainers.DescribeJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobRunAsync(ctx workflow.Context, input *emrcontainers.DescribeJobRunInput) *DescribeJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeJobRun", input)
	return &DescribeJobRunFuture{Future: future}
}

func (a *stub) DescribeManagedEndpoint(ctx workflow.Context, input *emrcontainers.DescribeManagedEndpointInput) (*emrcontainers.DescribeManagedEndpointOutput, error) {
	var output emrcontainers.DescribeManagedEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeManagedEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.DescribeManagedEndpointInput) *DescribeManagedEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeManagedEndpoint", input)
	return &DescribeManagedEndpointFuture{Future: future}
}

func (a *stub) DescribeVirtualCluster(ctx workflow.Context, input *emrcontainers.DescribeVirtualClusterInput) (*emrcontainers.DescribeVirtualClusterOutput, error) {
	var output emrcontainers.DescribeVirtualClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeVirtualCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.DescribeVirtualClusterInput) *DescribeVirtualClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-DescribeVirtualCluster", input)
	return &DescribeVirtualClusterFuture{Future: future}
}

func (a *stub) ListJobRuns(ctx workflow.Context, input *emrcontainers.ListJobRunsInput) (*emrcontainers.ListJobRunsOutput, error) {
	var output emrcontainers.ListJobRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListJobRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobRunsAsync(ctx workflow.Context, input *emrcontainers.ListJobRunsInput) *ListJobRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListJobRuns", input)
	return &ListJobRunsFuture{Future: future}
}

func (a *stub) ListManagedEndpoints(ctx workflow.Context, input *emrcontainers.ListManagedEndpointsInput) (*emrcontainers.ListManagedEndpointsOutput, error) {
	var output emrcontainers.ListManagedEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListManagedEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListManagedEndpointsAsync(ctx workflow.Context, input *emrcontainers.ListManagedEndpointsInput) *ListManagedEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListManagedEndpoints", input)
	return &ListManagedEndpointsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *emrcontainers.ListTagsForResourceInput) (*emrcontainers.ListTagsForResourceOutput, error) {
	var output emrcontainers.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *emrcontainers.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListVirtualClusters(ctx workflow.Context, input *emrcontainers.ListVirtualClustersInput) (*emrcontainers.ListVirtualClustersOutput, error) {
	var output emrcontainers.ListVirtualClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListVirtualClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualClustersAsync(ctx workflow.Context, input *emrcontainers.ListVirtualClustersInput) *ListVirtualClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-ListVirtualClusters", input)
	return &ListVirtualClustersFuture{Future: future}
}

func (a *stub) StartJobRun(ctx workflow.Context, input *emrcontainers.StartJobRunInput) (*emrcontainers.StartJobRunOutput, error) {
	var output emrcontainers.StartJobRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-StartJobRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartJobRunAsync(ctx workflow.Context, input *emrcontainers.StartJobRunInput) *StartJobRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-StartJobRun", input)
	return &StartJobRunFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *emrcontainers.TagResourceInput) (*emrcontainers.TagResourceOutput, error) {
	var output emrcontainers.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *emrcontainers.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *emrcontainers.UntagResourceInput) (*emrcontainers.UntagResourceOutput, error) {
	var output emrcontainers.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-emrcontainers-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *emrcontainers.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-emrcontainers-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}
