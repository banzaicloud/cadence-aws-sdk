// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package emrcontainersstub

import (
	"github.com/aws/aws-sdk-go/service/emrcontainers"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CancelJobRun(ctx workflow.Context, input *emrcontainers.CancelJobRunInput) (*emrcontainers.CancelJobRunOutput, error)
	CancelJobRunAsync(ctx workflow.Context, input *emrcontainers.CancelJobRunInput) *CancelJobRunFuture

	CreateManagedEndpoint(ctx workflow.Context, input *emrcontainers.CreateManagedEndpointInput) (*emrcontainers.CreateManagedEndpointOutput, error)
	CreateManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.CreateManagedEndpointInput) *CreateManagedEndpointFuture

	CreateVirtualCluster(ctx workflow.Context, input *emrcontainers.CreateVirtualClusterInput) (*emrcontainers.CreateVirtualClusterOutput, error)
	CreateVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.CreateVirtualClusterInput) *CreateVirtualClusterFuture

	DeleteManagedEndpoint(ctx workflow.Context, input *emrcontainers.DeleteManagedEndpointInput) (*emrcontainers.DeleteManagedEndpointOutput, error)
	DeleteManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.DeleteManagedEndpointInput) *DeleteManagedEndpointFuture

	DeleteVirtualCluster(ctx workflow.Context, input *emrcontainers.DeleteVirtualClusterInput) (*emrcontainers.DeleteVirtualClusterOutput, error)
	DeleteVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.DeleteVirtualClusterInput) *DeleteVirtualClusterFuture

	DescribeJobRun(ctx workflow.Context, input *emrcontainers.DescribeJobRunInput) (*emrcontainers.DescribeJobRunOutput, error)
	DescribeJobRunAsync(ctx workflow.Context, input *emrcontainers.DescribeJobRunInput) *DescribeJobRunFuture

	DescribeManagedEndpoint(ctx workflow.Context, input *emrcontainers.DescribeManagedEndpointInput) (*emrcontainers.DescribeManagedEndpointOutput, error)
	DescribeManagedEndpointAsync(ctx workflow.Context, input *emrcontainers.DescribeManagedEndpointInput) *DescribeManagedEndpointFuture

	DescribeVirtualCluster(ctx workflow.Context, input *emrcontainers.DescribeVirtualClusterInput) (*emrcontainers.DescribeVirtualClusterOutput, error)
	DescribeVirtualClusterAsync(ctx workflow.Context, input *emrcontainers.DescribeVirtualClusterInput) *DescribeVirtualClusterFuture

	ListJobRuns(ctx workflow.Context, input *emrcontainers.ListJobRunsInput) (*emrcontainers.ListJobRunsOutput, error)
	ListJobRunsAsync(ctx workflow.Context, input *emrcontainers.ListJobRunsInput) *ListJobRunsFuture

	ListManagedEndpoints(ctx workflow.Context, input *emrcontainers.ListManagedEndpointsInput) (*emrcontainers.ListManagedEndpointsOutput, error)
	ListManagedEndpointsAsync(ctx workflow.Context, input *emrcontainers.ListManagedEndpointsInput) *ListManagedEndpointsFuture

	ListTagsForResource(ctx workflow.Context, input *emrcontainers.ListTagsForResourceInput) (*emrcontainers.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *emrcontainers.ListTagsForResourceInput) *ListTagsForResourceFuture

	ListVirtualClusters(ctx workflow.Context, input *emrcontainers.ListVirtualClustersInput) (*emrcontainers.ListVirtualClustersOutput, error)
	ListVirtualClustersAsync(ctx workflow.Context, input *emrcontainers.ListVirtualClustersInput) *ListVirtualClustersFuture

	StartJobRun(ctx workflow.Context, input *emrcontainers.StartJobRunInput) (*emrcontainers.StartJobRunOutput, error)
	StartJobRunAsync(ctx workflow.Context, input *emrcontainers.StartJobRunInput) *StartJobRunFuture

	TagResource(ctx workflow.Context, input *emrcontainers.TagResourceInput) (*emrcontainers.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *emrcontainers.TagResourceInput) *TagResourceFuture

	UntagResource(ctx workflow.Context, input *emrcontainers.UntagResourceInput) (*emrcontainers.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *emrcontainers.UntagResourceInput) *UntagResourceFuture
}

func NewClient() Client {
	return &stub{}
}
