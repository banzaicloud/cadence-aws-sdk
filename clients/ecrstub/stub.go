// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ecrstub

import (
	"github.com/aws/aws-sdk-go/service/ecr"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchCheckLayerAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCheckLayerAvailabilityFuture) Get(ctx workflow.Context) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	var output ecr.BatchCheckLayerAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteImageFuture) Get(ctx workflow.Context) (*ecr.BatchDeleteImageOutput, error) {
	var output ecr.BatchDeleteImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetImageFuture) Get(ctx workflow.Context) (*ecr.BatchGetImageOutput, error) {
	var output ecr.BatchGetImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CompleteLayerUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompleteLayerUploadFuture) Get(ctx workflow.Context) (*ecr.CompleteLayerUploadOutput, error) {
	var output ecr.CompleteLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRepositoryFuture) Get(ctx workflow.Context) (*ecr.CreateRepositoryOutput, error) {
	var output ecr.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.DeleteLifecyclePolicyOutput, error) {
	var output ecr.DeleteLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRegistryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRegistryPolicyFuture) Get(ctx workflow.Context) (*ecr.DeleteRegistryPolicyOutput, error) {
	var output ecr.DeleteRegistryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryFuture) Get(ctx workflow.Context) (*ecr.DeleteRepositoryOutput, error) {
	var output ecr.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.DeleteRepositoryPolicyOutput, error) {
	var output ecr.DeleteRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageScanFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageScanFindingsFuture) Get(ctx workflow.Context) (*ecr.DescribeImageScanFindingsOutput, error) {
	var output ecr.DescribeImageScanFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImagesFuture) Get(ctx workflow.Context) (*ecr.DescribeImagesOutput, error) {
	var output ecr.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRegistryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRegistryFuture) Get(ctx workflow.Context) (*ecr.DescribeRegistryOutput, error) {
	var output ecr.DescribeRegistryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRepositoriesFuture) Get(ctx workflow.Context) (*ecr.DescribeRepositoriesOutput, error) {
	var output ecr.DescribeRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAuthorizationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAuthorizationTokenFuture) Get(ctx workflow.Context) (*ecr.GetAuthorizationTokenOutput, error) {
	var output ecr.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDownloadUrlForLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDownloadUrlForLayerFuture) Get(ctx workflow.Context) (*ecr.GetDownloadUrlForLayerOutput, error) {
	var output ecr.GetDownloadUrlForLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.GetLifecyclePolicyOutput, error) {
	var output ecr.GetLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLifecyclePolicyPreviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLifecyclePolicyPreviewFuture) Get(ctx workflow.Context) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	var output ecr.GetLifecyclePolicyPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRegistryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRegistryPolicyFuture) Get(ctx workflow.Context) (*ecr.GetRegistryPolicyOutput, error) {
	var output ecr.GetRegistryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.GetRepositoryPolicyOutput, error) {
	var output ecr.GetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InitiateLayerUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InitiateLayerUploadFuture) Get(ctx workflow.Context) (*ecr.InitiateLayerUploadOutput, error) {
	var output ecr.InitiateLayerUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListImagesFuture) Get(ctx workflow.Context) (*ecr.ListImagesOutput, error) {
	var output ecr.ListImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*ecr.ListTagsForResourceOutput, error) {
	var output ecr.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImageFuture) Get(ctx workflow.Context) (*ecr.PutImageOutput, error) {
	var output ecr.PutImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImageScanningConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImageScanningConfigurationFuture) Get(ctx workflow.Context) (*ecr.PutImageScanningConfigurationOutput, error) {
	var output ecr.PutImageScanningConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutImageTagMutabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutImageTagMutabilityFuture) Get(ctx workflow.Context) (*ecr.PutImageTagMutabilityOutput, error) {
	var output ecr.PutImageTagMutabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLifecyclePolicyFuture) Get(ctx workflow.Context) (*ecr.PutLifecyclePolicyOutput, error) {
	var output ecr.PutLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRegistryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRegistryPolicyFuture) Get(ctx workflow.Context) (*ecr.PutRegistryPolicyOutput, error) {
	var output ecr.PutRegistryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutReplicationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutReplicationConfigurationFuture) Get(ctx workflow.Context) (*ecr.PutReplicationConfigurationOutput, error) {
	var output ecr.PutReplicationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetRepositoryPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetRepositoryPolicyFuture) Get(ctx workflow.Context) (*ecr.SetRepositoryPolicyOutput, error) {
	var output ecr.SetRepositoryPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartImageScanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartImageScanFuture) Get(ctx workflow.Context) (*ecr.StartImageScanOutput, error) {
	var output ecr.StartImageScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartLifecyclePolicyPreviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartLifecyclePolicyPreviewFuture) Get(ctx workflow.Context) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	var output ecr.StartLifecyclePolicyPreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*ecr.TagResourceOutput, error) {
	var output ecr.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*ecr.UntagResourceOutput, error) {
	var output ecr.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadLayerPartFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadLayerPartFuture) Get(ctx workflow.Context) (*ecr.UploadLayerPartOutput, error) {
	var output ecr.UploadLayerPartOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCheckLayerAvailability(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	var output ecr.BatchCheckLayerAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-BatchCheckLayerAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCheckLayerAvailabilityAsync(ctx workflow.Context, input *ecr.BatchCheckLayerAvailabilityInput) *BatchCheckLayerAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-BatchCheckLayerAvailability", input)
	return &BatchCheckLayerAvailabilityFuture{Future: future}
}

func (a *stub) BatchDeleteImage(ctx workflow.Context, input *ecr.BatchDeleteImageInput) (*ecr.BatchDeleteImageOutput, error) {
	var output ecr.BatchDeleteImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-BatchDeleteImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteImageAsync(ctx workflow.Context, input *ecr.BatchDeleteImageInput) *BatchDeleteImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-BatchDeleteImage", input)
	return &BatchDeleteImageFuture{Future: future}
}

func (a *stub) BatchGetImage(ctx workflow.Context, input *ecr.BatchGetImageInput) (*ecr.BatchGetImageOutput, error) {
	var output ecr.BatchGetImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-BatchGetImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetImageAsync(ctx workflow.Context, input *ecr.BatchGetImageInput) *BatchGetImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-BatchGetImage", input)
	return &BatchGetImageFuture{Future: future}
}

func (a *stub) CompleteLayerUpload(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) (*ecr.CompleteLayerUploadOutput, error) {
	var output ecr.CompleteLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-CompleteLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompleteLayerUploadAsync(ctx workflow.Context, input *ecr.CompleteLayerUploadInput) *CompleteLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-CompleteLayerUpload", input)
	return &CompleteLayerUploadFuture{Future: future}
}

func (a *stub) CreateRepository(ctx workflow.Context, input *ecr.CreateRepositoryInput) (*ecr.CreateRepositoryOutput, error) {
	var output ecr.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRepositoryAsync(ctx workflow.Context, input *ecr.CreateRepositoryInput) *CreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-CreateRepository", input)
	return &CreateRepositoryFuture{Future: future}
}

func (a *stub) DeleteLifecyclePolicy(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) (*ecr.DeleteLifecyclePolicyOutput, error) {
	var output ecr.DeleteLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLifecyclePolicyAsync(ctx workflow.Context, input *ecr.DeleteLifecyclePolicyInput) *DeleteLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteLifecyclePolicy", input)
	return &DeleteLifecyclePolicyFuture{Future: future}
}

func (a *stub) DeleteRegistryPolicy(ctx workflow.Context, input *ecr.DeleteRegistryPolicyInput) (*ecr.DeleteRegistryPolicyOutput, error) {
	var output ecr.DeleteRegistryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRegistryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegistryPolicyAsync(ctx workflow.Context, input *ecr.DeleteRegistryPolicyInput) *DeleteRegistryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRegistryPolicy", input)
	return &DeleteRegistryPolicyFuture{Future: future}
}

func (a *stub) DeleteRepository(ctx workflow.Context, input *ecr.DeleteRepositoryInput) (*ecr.DeleteRepositoryOutput, error) {
	var output ecr.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryAsync(ctx workflow.Context, input *ecr.DeleteRepositoryInput) *DeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRepository", input)
	return &DeleteRepositoryFuture{Future: future}
}

func (a *stub) DeleteRepositoryPolicy(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) (*ecr.DeleteRepositoryPolicyOutput, error) {
	var output ecr.DeleteRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryPolicyAsync(ctx workflow.Context, input *ecr.DeleteRepositoryPolicyInput) *DeleteRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DeleteRepositoryPolicy", input)
	return &DeleteRepositoryPolicyFuture{Future: future}
}

func (a *stub) DescribeImageScanFindings(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) (*ecr.DescribeImageScanFindingsOutput, error) {
	var output ecr.DescribeImageScanFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeImageScanFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageScanFindingsAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *DescribeImageScanFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeImageScanFindings", input)
	return &DescribeImageScanFindingsFuture{Future: future}
}

func (a *stub) DescribeImages(ctx workflow.Context, input *ecr.DescribeImagesInput) (*ecr.DescribeImagesOutput, error) {
	var output ecr.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImagesAsync(ctx workflow.Context, input *ecr.DescribeImagesInput) *DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeImages", input)
	return &DescribeImagesFuture{Future: future}
}

func (a *stub) DescribeRegistry(ctx workflow.Context, input *ecr.DescribeRegistryInput) (*ecr.DescribeRegistryOutput, error) {
	var output ecr.DescribeRegistryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeRegistry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegistryAsync(ctx workflow.Context, input *ecr.DescribeRegistryInput) *DescribeRegistryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeRegistry", input)
	return &DescribeRegistryFuture{Future: future}
}

func (a *stub) DescribeRepositories(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) (*ecr.DescribeRepositoriesOutput, error) {
	var output ecr.DescribeRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRepositoriesAsync(ctx workflow.Context, input *ecr.DescribeRepositoriesInput) *DescribeRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-DescribeRepositories", input)
	return &DescribeRepositoriesFuture{Future: future}
}

func (a *stub) GetAuthorizationToken(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error) {
	var output ecr.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizationTokenAsync(ctx workflow.Context, input *ecr.GetAuthorizationTokenInput) *GetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetAuthorizationToken", input)
	return &GetAuthorizationTokenFuture{Future: future}
}

func (a *stub) GetDownloadUrlForLayer(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) (*ecr.GetDownloadUrlForLayerOutput, error) {
	var output ecr.GetDownloadUrlForLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetDownloadUrlForLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDownloadUrlForLayerAsync(ctx workflow.Context, input *ecr.GetDownloadUrlForLayerInput) *GetDownloadUrlForLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetDownloadUrlForLayer", input)
	return &GetDownloadUrlForLayerFuture{Future: future}
}

func (a *stub) GetLifecyclePolicy(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) (*ecr.GetLifecyclePolicyOutput, error) {
	var output ecr.GetLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLifecyclePolicyAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyInput) *GetLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetLifecyclePolicy", input)
	return &GetLifecyclePolicyFuture{Future: future}
}

func (a *stub) GetLifecyclePolicyPreview(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	var output ecr.GetLifecyclePolicyPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetLifecyclePolicyPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *GetLifecyclePolicyPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetLifecyclePolicyPreview", input)
	return &GetLifecyclePolicyPreviewFuture{Future: future}
}

func (a *stub) GetRegistryPolicy(ctx workflow.Context, input *ecr.GetRegistryPolicyInput) (*ecr.GetRegistryPolicyOutput, error) {
	var output ecr.GetRegistryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetRegistryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegistryPolicyAsync(ctx workflow.Context, input *ecr.GetRegistryPolicyInput) *GetRegistryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetRegistryPolicy", input)
	return &GetRegistryPolicyFuture{Future: future}
}

func (a *stub) GetRepositoryPolicy(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) (*ecr.GetRepositoryPolicyOutput, error) {
	var output ecr.GetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-GetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.GetRepositoryPolicyInput) *GetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-GetRepositoryPolicy", input)
	return &GetRepositoryPolicyFuture{Future: future}
}

func (a *stub) InitiateLayerUpload(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) (*ecr.InitiateLayerUploadOutput, error) {
	var output ecr.InitiateLayerUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-InitiateLayerUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitiateLayerUploadAsync(ctx workflow.Context, input *ecr.InitiateLayerUploadInput) *InitiateLayerUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-InitiateLayerUpload", input)
	return &InitiateLayerUploadFuture{Future: future}
}

func (a *stub) ListImages(ctx workflow.Context, input *ecr.ListImagesInput) (*ecr.ListImagesOutput, error) {
	var output ecr.ListImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-ListImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListImagesAsync(ctx workflow.Context, input *ecr.ListImagesInput) *ListImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-ListImages", input)
	return &ListImagesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *ecr.ListTagsForResourceInput) (*ecr.ListTagsForResourceOutput, error) {
	var output ecr.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *ecr.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutImage(ctx workflow.Context, input *ecr.PutImageInput) (*ecr.PutImageOutput, error) {
	var output ecr.PutImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageAsync(ctx workflow.Context, input *ecr.PutImageInput) *PutImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutImage", input)
	return &PutImageFuture{Future: future}
}

func (a *stub) PutImageScanningConfiguration(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) (*ecr.PutImageScanningConfigurationOutput, error) {
	var output ecr.PutImageScanningConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutImageScanningConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageScanningConfigurationAsync(ctx workflow.Context, input *ecr.PutImageScanningConfigurationInput) *PutImageScanningConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutImageScanningConfiguration", input)
	return &PutImageScanningConfigurationFuture{Future: future}
}

func (a *stub) PutImageTagMutability(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) (*ecr.PutImageTagMutabilityOutput, error) {
	var output ecr.PutImageTagMutabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutImageTagMutability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutImageTagMutabilityAsync(ctx workflow.Context, input *ecr.PutImageTagMutabilityInput) *PutImageTagMutabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutImageTagMutability", input)
	return &PutImageTagMutabilityFuture{Future: future}
}

func (a *stub) PutLifecyclePolicy(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) (*ecr.PutLifecyclePolicyOutput, error) {
	var output ecr.PutLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecyclePolicyAsync(ctx workflow.Context, input *ecr.PutLifecyclePolicyInput) *PutLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutLifecyclePolicy", input)
	return &PutLifecyclePolicyFuture{Future: future}
}

func (a *stub) PutRegistryPolicy(ctx workflow.Context, input *ecr.PutRegistryPolicyInput) (*ecr.PutRegistryPolicyOutput, error) {
	var output ecr.PutRegistryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutRegistryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRegistryPolicyAsync(ctx workflow.Context, input *ecr.PutRegistryPolicyInput) *PutRegistryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutRegistryPolicy", input)
	return &PutRegistryPolicyFuture{Future: future}
}

func (a *stub) PutReplicationConfiguration(ctx workflow.Context, input *ecr.PutReplicationConfigurationInput) (*ecr.PutReplicationConfigurationOutput, error) {
	var output ecr.PutReplicationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-PutReplicationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutReplicationConfigurationAsync(ctx workflow.Context, input *ecr.PutReplicationConfigurationInput) *PutReplicationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-PutReplicationConfiguration", input)
	return &PutReplicationConfigurationFuture{Future: future}
}

func (a *stub) SetRepositoryPolicy(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) (*ecr.SetRepositoryPolicyOutput, error) {
	var output ecr.SetRepositoryPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-SetRepositoryPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetRepositoryPolicyAsync(ctx workflow.Context, input *ecr.SetRepositoryPolicyInput) *SetRepositoryPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-SetRepositoryPolicy", input)
	return &SetRepositoryPolicyFuture{Future: future}
}

func (a *stub) StartImageScan(ctx workflow.Context, input *ecr.StartImageScanInput) (*ecr.StartImageScanOutput, error) {
	var output ecr.StartImageScanOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-StartImageScan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartImageScanAsync(ctx workflow.Context, input *ecr.StartImageScanInput) *StartImageScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-StartImageScan", input)
	return &StartImageScanFuture{Future: future}
}

func (a *stub) StartLifecyclePolicyPreview(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	var output ecr.StartLifecyclePolicyPreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-StartLifecyclePolicyPreview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartLifecyclePolicyPreviewAsync(ctx workflow.Context, input *ecr.StartLifecyclePolicyPreviewInput) *StartLifecyclePolicyPreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-StartLifecyclePolicyPreview", input)
	return &StartLifecyclePolicyPreviewFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *ecr.TagResourceInput) (*ecr.TagResourceOutput, error) {
	var output ecr.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *ecr.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *ecr.UntagResourceInput) (*ecr.UntagResourceOutput, error) {
	var output ecr.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *ecr.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UploadLayerPart(ctx workflow.Context, input *ecr.UploadLayerPartInput) (*ecr.UploadLayerPartOutput, error) {
	var output ecr.UploadLayerPartOutput
	err := workflow.ExecuteActivity(ctx, "aws-ecr-UploadLayerPart", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadLayerPartAsync(ctx workflow.Context, input *ecr.UploadLayerPartInput) *UploadLayerPartFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-UploadLayerPart", input)
	return &UploadLayerPartFuture{Future: future}
}

func (a *stub) WaitUntilImageScanComplete(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecr-WaitUntilImageScanComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilImageScanCompleteAsync(ctx workflow.Context, input *ecr.DescribeImageScanFindingsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-WaitUntilImageScanComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilLifecyclePolicyPreviewComplete(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ecr-WaitUntilLifecyclePolicyPreviewComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilLifecyclePolicyPreviewCompleteAsync(ctx workflow.Context, input *ecr.GetLifecyclePolicyPreviewInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ecr-WaitUntilLifecyclePolicyPreviewComplete", input)
	return clients.NewVoidFuture(future)
}
