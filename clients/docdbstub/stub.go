// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package docdbstub

import (
	"github.com/aws/aws-sdk-go/service/docdb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBInstanceFuture) Get(ctx workflow.Context) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBInstanceFuture) Get(ctx workflow.Context) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCertificatesFuture) Get(ctx workflow.Context) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterSnapshotAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBClustersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBEngineVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBInstancesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDBSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEngineDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventCategoriesFuture) Get(ctx workflow.Context) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrderableDBInstanceOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FailoverDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *FailoverDBClusterFuture) Get(ctx workflow.Context) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBClusterSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBInstanceFuture) Get(ctx workflow.Context) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootDBInstanceFuture) Get(ctx workflow.Context) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreDBClusterFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreDBClusterToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDBClusterFuture) Get(ctx workflow.Context) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDBClusterFuture) Get(ctx workflow.Context) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *docdb.AddTagsToResourceInput) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *docdb.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) *ApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ApplyPendingMaintenanceAction", input)
	return &ApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) CopyDBClusterParameterGroup(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) *CopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterParameterGroup", input)
	return &CopyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CopyDBClusterSnapshot(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) *CopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterSnapshot", input)
	return &CopyDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBCluster(ctx workflow.Context, input *docdb.CreateDBClusterInput) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterAsync(ctx workflow.Context, input *docdb.CreateDBClusterInput) *CreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBCluster", input)
	return &CreateDBClusterFuture{Future: future}
}

func (a *stub) CreateDBClusterParameterGroup(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) *CreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterParameterGroup", input)
	return &CreateDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBClusterSnapshot(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) *CreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterSnapshot", input)
	return &CreateDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBInstance(ctx workflow.Context, input *docdb.CreateDBInstanceInput) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBInstanceAsync(ctx workflow.Context, input *docdb.CreateDBInstanceInput) *CreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBInstance", input)
	return &CreateDBInstanceFuture{Future: future}
}

func (a *stub) CreateDBSubnetGroup(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) *CreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBSubnetGroup", input)
	return &CreateDBSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteDBCluster(ctx workflow.Context, input *docdb.DeleteDBClusterInput) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterAsync(ctx workflow.Context, input *docdb.DeleteDBClusterInput) *DeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBCluster", input)
	return &DeleteDBClusterFuture{Future: future}
}

func (a *stub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) *DeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterParameterGroup", input)
	return &DeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBClusterSnapshot(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) *DeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterSnapshot", input)
	return &DeleteDBClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteDBInstance(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBInstanceAsync(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) *DeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBInstance", input)
	return &DeleteDBInstanceFuture{Future: future}
}

func (a *stub) DeleteDBSubnetGroup(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) *DeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBSubnetGroup", input)
	return &DeleteDBSubnetGroupFuture{Future: future}
}

func (a *stub) DescribeCertificates(ctx workflow.Context, input *docdb.DescribeCertificatesInput) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificatesAsync(ctx workflow.Context, input *docdb.DescribeCertificatesInput) *DescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeCertificates", input)
	return &DescribeCertificatesFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) *DescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameterGroups", input)
	return &DescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameters(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) *DescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameters", input)
	return &DescribeDBClusterParametersFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) *DescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshotAttributes", input)
	return &DescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshots(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) *DescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshots", input)
	return &DescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeDBClusters(ctx workflow.Context, input *docdb.DescribeDBClustersInput) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClustersAsync(ctx workflow.Context, input *docdb.DescribeDBClustersInput) *DescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusters", input)
	return &DescribeDBClustersFuture{Future: future}
}

func (a *stub) DescribeDBEngineVersions(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) *DescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBEngineVersions", input)
	return &DescribeDBEngineVersionsFuture{Future: future}
}

func (a *stub) DescribeDBInstances(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBInstancesAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *DescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBInstances", input)
	return &DescribeDBInstancesFuture{Future: future}
}

func (a *stub) DescribeDBSubnetGroups(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) *DescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBSubnetGroups", input)
	return &DescribeDBSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) *DescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEngineDefaultClusterParameters", input)
	return &DescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) *DescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEventCategories", input)
	return &DescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *docdb.DescribeEventsInput) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *docdb.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) *DescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeOrderableDBInstanceOptions", input)
	return &DescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) *DescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribePendingMaintenanceActions", input)
	return &DescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) FailoverDBCluster(ctx workflow.Context, input *docdb.FailoverDBClusterInput) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FailoverDBClusterAsync(ctx workflow.Context, input *docdb.FailoverDBClusterInput) *FailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-FailoverDBCluster", input)
	return &FailoverDBClusterFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *docdb.ListTagsForResourceInput) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *docdb.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyDBCluster(ctx workflow.Context, input *docdb.ModifyDBClusterInput) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterAsync(ctx workflow.Context, input *docdb.ModifyDBClusterInput) *ModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBCluster", input)
	return &ModifyDBClusterFuture{Future: future}
}

func (a *stub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) *ModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterParameterGroup", input)
	return &ModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) *ModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterSnapshotAttribute", input)
	return &ModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifyDBInstance(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBInstanceAsync(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) *ModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBInstance", input)
	return &ModifyDBInstanceFuture{Future: future}
}

func (a *stub) ModifyDBSubnetGroup(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) *ModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBSubnetGroup", input)
	return &ModifyDBSubnetGroupFuture{Future: future}
}

func (a *stub) RebootDBInstance(ctx workflow.Context, input *docdb.RebootDBInstanceInput) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootDBInstanceAsync(ctx workflow.Context, input *docdb.RebootDBInstanceInput) *RebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RebootDBInstance", input)
	return &RebootDBInstanceFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetDBClusterParameterGroup(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) *ResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ResetDBClusterParameterGroup", input)
	return &ResetDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) *RestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterFromSnapshot", input)
	return &RestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *stub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) *RestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterToPointInTime", input)
	return &RestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *stub) StartDBCluster(ctx workflow.Context, input *docdb.StartDBClusterInput) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDBClusterAsync(ctx workflow.Context, input *docdb.StartDBClusterInput) *StartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-StartDBCluster", input)
	return &StartDBClusterFuture{Future: future}
}

func (a *stub) StopDBCluster(ctx workflow.Context, input *docdb.StopDBClusterInput) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDBClusterAsync(ctx workflow.Context, input *docdb.StopDBClusterInput) *StopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-StopDBCluster", input)
	return &StopDBClusterFuture{Future: future}
}

func (a *stub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}
