// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package docdbstub

import (
	"github.com/aws/aws-sdk-go/service/docdb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DocDBAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBAddTagsToResourceFuture) Get(ctx workflow.Context) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBApplyPendingMaintenanceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCopyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCopyDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCreateDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCreateDBClusterFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCreateDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCreateDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCreateDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCreateDBInstanceFuture) Get(ctx workflow.Context) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBCreateDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBCreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDeleteDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDeleteDBClusterFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDeleteDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDeleteDBClusterSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDeleteDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDeleteDBInstanceFuture) Get(ctx workflow.Context) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDeleteDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeCertificatesFuture) Get(ctx workflow.Context) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBClusterParameterGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBClusterSnapshotAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBClusterSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBClustersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBEngineVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBInstancesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeDBSubnetGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeEngineDefaultClusterParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeEventCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeEventsFuture) Get(ctx workflow.Context) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribeOrderableDBInstanceOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBDescribePendingMaintenanceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBFailoverDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBFailoverDBClusterFuture) Get(ctx workflow.Context) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBListTagsForResourceFuture) Get(ctx workflow.Context) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBModifyDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBModifyDBClusterFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBModifyDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBModifyDBClusterSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBModifyDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBModifyDBInstanceFuture) Get(ctx workflow.Context) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBModifyDBSubnetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBRebootDBInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBRebootDBInstanceFuture) Get(ctx workflow.Context) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBResetDBClusterParameterGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBRestoreDBClusterFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBRestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBRestoreDBClusterToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBRestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBStartDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBStartDBClusterFuture) Get(ctx workflow.Context) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocDBStopDBClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DocDBStopDBClusterFuture) Get(ctx workflow.Context) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *docdb.AddTagsToResourceInput) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *docdb.AddTagsToResourceInput) *DocDBAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-AddTagsToResource", input)
	return &DocDBAddTagsToResourceFuture{Future: future}
}

func (a *stub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) *DocDBApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ApplyPendingMaintenanceAction", input)
	return &DocDBApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *stub) CopyDBClusterParameterGroup(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) *DocDBCopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterParameterGroup", input)
	return &DocDBCopyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CopyDBClusterSnapshot(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) *DocDBCopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CopyDBClusterSnapshot", input)
	return &DocDBCopyDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBCluster(ctx workflow.Context, input *docdb.CreateDBClusterInput) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterAsync(ctx workflow.Context, input *docdb.CreateDBClusterInput) *DocDBCreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBCluster", input)
	return &DocDBCreateDBClusterFuture{Future: future}
}

func (a *stub) CreateDBClusterParameterGroup(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) *DocDBCreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterParameterGroup", input)
	return &DocDBCreateDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) CreateDBClusterSnapshot(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) *DocDBCreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBClusterSnapshot", input)
	return &DocDBCreateDBClusterSnapshotFuture{Future: future}
}

func (a *stub) CreateDBInstance(ctx workflow.Context, input *docdb.CreateDBInstanceInput) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBInstanceAsync(ctx workflow.Context, input *docdb.CreateDBInstanceInput) *DocDBCreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBInstance", input)
	return &DocDBCreateDBInstanceFuture{Future: future}
}

func (a *stub) CreateDBSubnetGroup(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) *DocDBCreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-CreateDBSubnetGroup", input)
	return &DocDBCreateDBSubnetGroupFuture{Future: future}
}

func (a *stub) DeleteDBCluster(ctx workflow.Context, input *docdb.DeleteDBClusterInput) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterAsync(ctx workflow.Context, input *docdb.DeleteDBClusterInput) *DocDBDeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBCluster", input)
	return &DocDBDeleteDBClusterFuture{Future: future}
}

func (a *stub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) *DocDBDeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterParameterGroup", input)
	return &DocDBDeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) DeleteDBClusterSnapshot(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) *DocDBDeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBClusterSnapshot", input)
	return &DocDBDeleteDBClusterSnapshotFuture{Future: future}
}

func (a *stub) DeleteDBInstance(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBInstanceAsync(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) *DocDBDeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBInstance", input)
	return &DocDBDeleteDBInstanceFuture{Future: future}
}

func (a *stub) DeleteDBSubnetGroup(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) *DocDBDeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DeleteDBSubnetGroup", input)
	return &DocDBDeleteDBSubnetGroupFuture{Future: future}
}

func (a *stub) DescribeCertificates(ctx workflow.Context, input *docdb.DescribeCertificatesInput) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificatesAsync(ctx workflow.Context, input *docdb.DescribeCertificatesInput) *DocDBDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeCertificates", input)
	return &DocDBDescribeCertificatesFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) *DocDBDescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameterGroups", input)
	return &DocDBDescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *stub) DescribeDBClusterParameters(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) *DocDBDescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterParameters", input)
	return &DocDBDescribeDBClusterParametersFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) *DocDBDescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshotAttributes", input)
	return &DocDBDescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *stub) DescribeDBClusterSnapshots(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) *DocDBDescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusterSnapshots", input)
	return &DocDBDescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *stub) DescribeDBClusters(ctx workflow.Context, input *docdb.DescribeDBClustersInput) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBClustersAsync(ctx workflow.Context, input *docdb.DescribeDBClustersInput) *DocDBDescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBClusters", input)
	return &DocDBDescribeDBClustersFuture{Future: future}
}

func (a *stub) DescribeDBEngineVersions(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) *DocDBDescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBEngineVersions", input)
	return &DocDBDescribeDBEngineVersionsFuture{Future: future}
}

func (a *stub) DescribeDBInstances(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBInstancesAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *DocDBDescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBInstances", input)
	return &DocDBDescribeDBInstancesFuture{Future: future}
}

func (a *stub) DescribeDBSubnetGroups(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) *DocDBDescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeDBSubnetGroups", input)
	return &DocDBDescribeDBSubnetGroupsFuture{Future: future}
}

func (a *stub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) *DocDBDescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEngineDefaultClusterParameters", input)
	return &DocDBDescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *stub) DescribeEventCategories(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventCategoriesAsync(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) *DocDBDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEventCategories", input)
	return &DocDBDescribeEventCategoriesFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *docdb.DescribeEventsInput) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *docdb.DescribeEventsInput) *DocDBDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeEvents", input)
	return &DocDBDescribeEventsFuture{Future: future}
}

func (a *stub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) *DocDBDescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribeOrderableDBInstanceOptions", input)
	return &DocDBDescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *stub) DescribePendingMaintenanceActions(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) *DocDBDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-DescribePendingMaintenanceActions", input)
	return &DocDBDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *stub) FailoverDBCluster(ctx workflow.Context, input *docdb.FailoverDBClusterInput) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) FailoverDBClusterAsync(ctx workflow.Context, input *docdb.FailoverDBClusterInput) *DocDBFailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-FailoverDBCluster", input)
	return &DocDBFailoverDBClusterFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *docdb.ListTagsForResourceInput) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *docdb.ListTagsForResourceInput) *DocDBListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ListTagsForResource", input)
	return &DocDBListTagsForResourceFuture{Future: future}
}

func (a *stub) ModifyDBCluster(ctx workflow.Context, input *docdb.ModifyDBClusterInput) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterAsync(ctx workflow.Context, input *docdb.ModifyDBClusterInput) *DocDBModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBCluster", input)
	return &DocDBModifyDBClusterFuture{Future: future}
}

func (a *stub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) *DocDBModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterParameterGroup", input)
	return &DocDBModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) *DocDBModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBClusterSnapshotAttribute", input)
	return &DocDBModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifyDBInstance(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBInstanceAsync(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) *DocDBModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBInstance", input)
	return &DocDBModifyDBInstanceFuture{Future: future}
}

func (a *stub) ModifyDBSubnetGroup(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) *DocDBModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ModifyDBSubnetGroup", input)
	return &DocDBModifyDBSubnetGroupFuture{Future: future}
}

func (a *stub) RebootDBInstance(ctx workflow.Context, input *docdb.RebootDBInstanceInput) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootDBInstanceAsync(ctx workflow.Context, input *docdb.RebootDBInstanceInput) *DocDBRebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RebootDBInstance", input)
	return &DocDBRebootDBInstanceFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) *DocDBRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RemoveTagsFromResource", input)
	return &DocDBRemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetDBClusterParameterGroup(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) *DocDBResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-ResetDBClusterParameterGroup", input)
	return &DocDBResetDBClusterParameterGroupFuture{Future: future}
}

func (a *stub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) *DocDBRestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterFromSnapshot", input)
	return &DocDBRestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *stub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) *DocDBRestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-RestoreDBClusterToPointInTime", input)
	return &DocDBRestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *stub) StartDBCluster(ctx workflow.Context, input *docdb.StartDBClusterInput) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDBClusterAsync(ctx workflow.Context, input *docdb.StartDBClusterInput) *DocDBStartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-StartDBCluster", input)
	return &DocDBStartDBClusterFuture{Future: future}
}

func (a *stub) StopDBCluster(ctx workflow.Context, input *docdb.StopDBClusterInput) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-docdb-StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDBClusterAsync(ctx workflow.Context, input *docdb.StopDBClusterInput) *DocDBStopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-StopDBCluster", input)
	return &DocDBStopDBClusterFuture{Future: future}
}

func (a *stub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-docdb-WaitUntilDBInstanceDeleted", input)
	return clients.NewVoidFuture(future)
}
