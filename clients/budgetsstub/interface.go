// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package budgetsstub

import (
	"github.com/aws/aws-sdk-go/service/budgets"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CreateBudget(ctx workflow.Context, input *budgets.CreateBudgetInput) (*budgets.CreateBudgetOutput, error)
	CreateBudgetAsync(ctx workflow.Context, input *budgets.CreateBudgetInput) *CreateBudgetFuture

	CreateBudgetAction(ctx workflow.Context, input *budgets.CreateBudgetActionInput) (*budgets.CreateBudgetActionOutput, error)
	CreateBudgetActionAsync(ctx workflow.Context, input *budgets.CreateBudgetActionInput) *CreateBudgetActionFuture

	CreateNotification(ctx workflow.Context, input *budgets.CreateNotificationInput) (*budgets.CreateNotificationOutput, error)
	CreateNotificationAsync(ctx workflow.Context, input *budgets.CreateNotificationInput) *CreateNotificationFuture

	CreateSubscriber(ctx workflow.Context, input *budgets.CreateSubscriberInput) (*budgets.CreateSubscriberOutput, error)
	CreateSubscriberAsync(ctx workflow.Context, input *budgets.CreateSubscriberInput) *CreateSubscriberFuture

	DeleteBudget(ctx workflow.Context, input *budgets.DeleteBudgetInput) (*budgets.DeleteBudgetOutput, error)
	DeleteBudgetAsync(ctx workflow.Context, input *budgets.DeleteBudgetInput) *DeleteBudgetFuture

	DeleteBudgetAction(ctx workflow.Context, input *budgets.DeleteBudgetActionInput) (*budgets.DeleteBudgetActionOutput, error)
	DeleteBudgetActionAsync(ctx workflow.Context, input *budgets.DeleteBudgetActionInput) *DeleteBudgetActionFuture

	DeleteNotification(ctx workflow.Context, input *budgets.DeleteNotificationInput) (*budgets.DeleteNotificationOutput, error)
	DeleteNotificationAsync(ctx workflow.Context, input *budgets.DeleteNotificationInput) *DeleteNotificationFuture

	DeleteSubscriber(ctx workflow.Context, input *budgets.DeleteSubscriberInput) (*budgets.DeleteSubscriberOutput, error)
	DeleteSubscriberAsync(ctx workflow.Context, input *budgets.DeleteSubscriberInput) *DeleteSubscriberFuture

	DescribeBudget(ctx workflow.Context, input *budgets.DescribeBudgetInput) (*budgets.DescribeBudgetOutput, error)
	DescribeBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetInput) *DescribeBudgetFuture

	DescribeBudgetAction(ctx workflow.Context, input *budgets.DescribeBudgetActionInput) (*budgets.DescribeBudgetActionOutput, error)
	DescribeBudgetActionAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionInput) *DescribeBudgetActionFuture

	DescribeBudgetActionHistories(ctx workflow.Context, input *budgets.DescribeBudgetActionHistoriesInput) (*budgets.DescribeBudgetActionHistoriesOutput, error)
	DescribeBudgetActionHistoriesAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionHistoriesInput) *DescribeBudgetActionHistoriesFuture

	DescribeBudgetActionsForAccount(ctx workflow.Context, input *budgets.DescribeBudgetActionsForAccountInput) (*budgets.DescribeBudgetActionsForAccountOutput, error)
	DescribeBudgetActionsForAccountAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionsForAccountInput) *DescribeBudgetActionsForAccountFuture

	DescribeBudgetActionsForBudget(ctx workflow.Context, input *budgets.DescribeBudgetActionsForBudgetInput) (*budgets.DescribeBudgetActionsForBudgetOutput, error)
	DescribeBudgetActionsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionsForBudgetInput) *DescribeBudgetActionsForBudgetFuture

	DescribeBudgetPerformanceHistory(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) (*budgets.DescribeBudgetPerformanceHistoryOutput, error)
	DescribeBudgetPerformanceHistoryAsync(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) *DescribeBudgetPerformanceHistoryFuture

	DescribeBudgets(ctx workflow.Context, input *budgets.DescribeBudgetsInput) (*budgets.DescribeBudgetsOutput, error)
	DescribeBudgetsAsync(ctx workflow.Context, input *budgets.DescribeBudgetsInput) *DescribeBudgetsFuture

	DescribeNotificationsForBudget(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) (*budgets.DescribeNotificationsForBudgetOutput, error)
	DescribeNotificationsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) *DescribeNotificationsForBudgetFuture

	DescribeSubscribersForNotification(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) (*budgets.DescribeSubscribersForNotificationOutput, error)
	DescribeSubscribersForNotificationAsync(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) *DescribeSubscribersForNotificationFuture

	ExecuteBudgetAction(ctx workflow.Context, input *budgets.ExecuteBudgetActionInput) (*budgets.ExecuteBudgetActionOutput, error)
	ExecuteBudgetActionAsync(ctx workflow.Context, input *budgets.ExecuteBudgetActionInput) *ExecuteBudgetActionFuture

	UpdateBudget(ctx workflow.Context, input *budgets.UpdateBudgetInput) (*budgets.UpdateBudgetOutput, error)
	UpdateBudgetAsync(ctx workflow.Context, input *budgets.UpdateBudgetInput) *UpdateBudgetFuture

	UpdateBudgetAction(ctx workflow.Context, input *budgets.UpdateBudgetActionInput) (*budgets.UpdateBudgetActionOutput, error)
	UpdateBudgetActionAsync(ctx workflow.Context, input *budgets.UpdateBudgetActionInput) *UpdateBudgetActionFuture

	UpdateNotification(ctx workflow.Context, input *budgets.UpdateNotificationInput) (*budgets.UpdateNotificationOutput, error)
	UpdateNotificationAsync(ctx workflow.Context, input *budgets.UpdateNotificationInput) *UpdateNotificationFuture

	UpdateSubscriber(ctx workflow.Context, input *budgets.UpdateSubscriberInput) (*budgets.UpdateSubscriberOutput, error)
	UpdateSubscriberAsync(ctx workflow.Context, input *budgets.UpdateSubscriberInput) *UpdateSubscriberFuture
}

func NewClient() Client {
	return &stub{}
}
