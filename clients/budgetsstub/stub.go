// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package budgetsstub

import (
	"github.com/aws/aws-sdk-go/service/budgets"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBudgetFuture) Get(ctx workflow.Context) (*budgets.CreateBudgetOutput, error) {
	var output budgets.CreateBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBudgetActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBudgetActionFuture) Get(ctx workflow.Context) (*budgets.CreateBudgetActionOutput, error) {
	var output budgets.CreateBudgetActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNotificationFuture) Get(ctx workflow.Context) (*budgets.CreateNotificationOutput, error) {
	var output budgets.CreateNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSubscriberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSubscriberFuture) Get(ctx workflow.Context) (*budgets.CreateSubscriberOutput, error) {
	var output budgets.CreateSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBudgetFuture) Get(ctx workflow.Context) (*budgets.DeleteBudgetOutput, error) {
	var output budgets.DeleteBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBudgetActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBudgetActionFuture) Get(ctx workflow.Context) (*budgets.DeleteBudgetActionOutput, error) {
	var output budgets.DeleteBudgetActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotificationFuture) Get(ctx workflow.Context) (*budgets.DeleteNotificationOutput, error) {
	var output budgets.DeleteNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSubscriberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSubscriberFuture) Get(ctx workflow.Context) (*budgets.DeleteSubscriberOutput, error) {
	var output budgets.DeleteSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetOutput, error) {
	var output budgets.DescribeBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetActionFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetActionOutput, error) {
	var output budgets.DescribeBudgetActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetActionHistoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetActionHistoriesFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetActionHistoriesOutput, error) {
	var output budgets.DescribeBudgetActionHistoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetActionsForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetActionsForAccountFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetActionsForAccountOutput, error) {
	var output budgets.DescribeBudgetActionsForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetActionsForBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetActionsForBudgetFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetActionsForBudgetOutput, error) {
	var output budgets.DescribeBudgetActionsForBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetPerformanceHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetPerformanceHistoryFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	var output budgets.DescribeBudgetPerformanceHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBudgetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBudgetsFuture) Get(ctx workflow.Context) (*budgets.DescribeBudgetsOutput, error) {
	var output budgets.DescribeBudgetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotificationsForBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotificationsForBudgetFuture) Get(ctx workflow.Context) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	var output budgets.DescribeNotificationsForBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSubscribersForNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSubscribersForNotificationFuture) Get(ctx workflow.Context) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	var output budgets.DescribeSubscribersForNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteBudgetActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteBudgetActionFuture) Get(ctx workflow.Context) (*budgets.ExecuteBudgetActionOutput, error) {
	var output budgets.ExecuteBudgetActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBudgetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBudgetFuture) Get(ctx workflow.Context) (*budgets.UpdateBudgetOutput, error) {
	var output budgets.UpdateBudgetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBudgetActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBudgetActionFuture) Get(ctx workflow.Context) (*budgets.UpdateBudgetActionOutput, error) {
	var output budgets.UpdateBudgetActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNotificationFuture) Get(ctx workflow.Context) (*budgets.UpdateNotificationOutput, error) {
	var output budgets.UpdateNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSubscriberFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSubscriberFuture) Get(ctx workflow.Context) (*budgets.UpdateSubscriberOutput, error) {
	var output budgets.UpdateSubscriberOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBudget(ctx workflow.Context, input *budgets.CreateBudgetInput) (*budgets.CreateBudgetOutput, error) {
	var output budgets.CreateBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-CreateBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBudgetAsync(ctx workflow.Context, input *budgets.CreateBudgetInput) *CreateBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-CreateBudget", input)
	return &CreateBudgetFuture{Future: future}
}

func (a *stub) CreateBudgetAction(ctx workflow.Context, input *budgets.CreateBudgetActionInput) (*budgets.CreateBudgetActionOutput, error) {
	var output budgets.CreateBudgetActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-CreateBudgetAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBudgetActionAsync(ctx workflow.Context, input *budgets.CreateBudgetActionInput) *CreateBudgetActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-CreateBudgetAction", input)
	return &CreateBudgetActionFuture{Future: future}
}

func (a *stub) CreateNotification(ctx workflow.Context, input *budgets.CreateNotificationInput) (*budgets.CreateNotificationOutput, error) {
	var output budgets.CreateNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-CreateNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationAsync(ctx workflow.Context, input *budgets.CreateNotificationInput) *CreateNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-CreateNotification", input)
	return &CreateNotificationFuture{Future: future}
}

func (a *stub) CreateSubscriber(ctx workflow.Context, input *budgets.CreateSubscriberInput) (*budgets.CreateSubscriberOutput, error) {
	var output budgets.CreateSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-CreateSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubscriberAsync(ctx workflow.Context, input *budgets.CreateSubscriberInput) *CreateSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-CreateSubscriber", input)
	return &CreateSubscriberFuture{Future: future}
}

func (a *stub) DeleteBudget(ctx workflow.Context, input *budgets.DeleteBudgetInput) (*budgets.DeleteBudgetOutput, error) {
	var output budgets.DeleteBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBudgetAsync(ctx workflow.Context, input *budgets.DeleteBudgetInput) *DeleteBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteBudget", input)
	return &DeleteBudgetFuture{Future: future}
}

func (a *stub) DeleteBudgetAction(ctx workflow.Context, input *budgets.DeleteBudgetActionInput) (*budgets.DeleteBudgetActionOutput, error) {
	var output budgets.DeleteBudgetActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteBudgetAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBudgetActionAsync(ctx workflow.Context, input *budgets.DeleteBudgetActionInput) *DeleteBudgetActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteBudgetAction", input)
	return &DeleteBudgetActionFuture{Future: future}
}

func (a *stub) DeleteNotification(ctx workflow.Context, input *budgets.DeleteNotificationInput) (*budgets.DeleteNotificationOutput, error) {
	var output budgets.DeleteNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationAsync(ctx workflow.Context, input *budgets.DeleteNotificationInput) *DeleteNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteNotification", input)
	return &DeleteNotificationFuture{Future: future}
}

func (a *stub) DeleteSubscriber(ctx workflow.Context, input *budgets.DeleteSubscriberInput) (*budgets.DeleteSubscriberOutput, error) {
	var output budgets.DeleteSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSubscriberAsync(ctx workflow.Context, input *budgets.DeleteSubscriberInput) *DeleteSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DeleteSubscriber", input)
	return &DeleteSubscriberFuture{Future: future}
}

func (a *stub) DescribeBudget(ctx workflow.Context, input *budgets.DescribeBudgetInput) (*budgets.DescribeBudgetOutput, error) {
	var output budgets.DescribeBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetInput) *DescribeBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudget", input)
	return &DescribeBudgetFuture{Future: future}
}

func (a *stub) DescribeBudgetAction(ctx workflow.Context, input *budgets.DescribeBudgetActionInput) (*budgets.DescribeBudgetActionOutput, error) {
	var output budgets.DescribeBudgetActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetActionAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionInput) *DescribeBudgetActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetAction", input)
	return &DescribeBudgetActionFuture{Future: future}
}

func (a *stub) DescribeBudgetActionHistories(ctx workflow.Context, input *budgets.DescribeBudgetActionHistoriesInput) (*budgets.DescribeBudgetActionHistoriesOutput, error) {
	var output budgets.DescribeBudgetActionHistoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionHistories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetActionHistoriesAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionHistoriesInput) *DescribeBudgetActionHistoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionHistories", input)
	return &DescribeBudgetActionHistoriesFuture{Future: future}
}

func (a *stub) DescribeBudgetActionsForAccount(ctx workflow.Context, input *budgets.DescribeBudgetActionsForAccountInput) (*budgets.DescribeBudgetActionsForAccountOutput, error) {
	var output budgets.DescribeBudgetActionsForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionsForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetActionsForAccountAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionsForAccountInput) *DescribeBudgetActionsForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionsForAccount", input)
	return &DescribeBudgetActionsForAccountFuture{Future: future}
}

func (a *stub) DescribeBudgetActionsForBudget(ctx workflow.Context, input *budgets.DescribeBudgetActionsForBudgetInput) (*budgets.DescribeBudgetActionsForBudgetOutput, error) {
	var output budgets.DescribeBudgetActionsForBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionsForBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetActionsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeBudgetActionsForBudgetInput) *DescribeBudgetActionsForBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetActionsForBudget", input)
	return &DescribeBudgetActionsForBudgetFuture{Future: future}
}

func (a *stub) DescribeBudgetPerformanceHistory(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	var output budgets.DescribeBudgetPerformanceHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetPerformanceHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetPerformanceHistoryAsync(ctx workflow.Context, input *budgets.DescribeBudgetPerformanceHistoryInput) *DescribeBudgetPerformanceHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgetPerformanceHistory", input)
	return &DescribeBudgetPerformanceHistoryFuture{Future: future}
}

func (a *stub) DescribeBudgets(ctx workflow.Context, input *budgets.DescribeBudgetsInput) (*budgets.DescribeBudgetsOutput, error) {
	var output budgets.DescribeBudgetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBudgetsAsync(ctx workflow.Context, input *budgets.DescribeBudgetsInput) *DescribeBudgetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeBudgets", input)
	return &DescribeBudgetsFuture{Future: future}
}

func (a *stub) DescribeNotificationsForBudget(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	var output budgets.DescribeNotificationsForBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeNotificationsForBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotificationsForBudgetAsync(ctx workflow.Context, input *budgets.DescribeNotificationsForBudgetInput) *DescribeNotificationsForBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeNotificationsForBudget", input)
	return &DescribeNotificationsForBudgetFuture{Future: future}
}

func (a *stub) DescribeSubscribersForNotification(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	var output budgets.DescribeSubscribersForNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeSubscribersForNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSubscribersForNotificationAsync(ctx workflow.Context, input *budgets.DescribeSubscribersForNotificationInput) *DescribeSubscribersForNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-DescribeSubscribersForNotification", input)
	return &DescribeSubscribersForNotificationFuture{Future: future}
}

func (a *stub) ExecuteBudgetAction(ctx workflow.Context, input *budgets.ExecuteBudgetActionInput) (*budgets.ExecuteBudgetActionOutput, error) {
	var output budgets.ExecuteBudgetActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-ExecuteBudgetAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteBudgetActionAsync(ctx workflow.Context, input *budgets.ExecuteBudgetActionInput) *ExecuteBudgetActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-ExecuteBudgetAction", input)
	return &ExecuteBudgetActionFuture{Future: future}
}

func (a *stub) UpdateBudget(ctx workflow.Context, input *budgets.UpdateBudgetInput) (*budgets.UpdateBudgetOutput, error) {
	var output budgets.UpdateBudgetOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateBudget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBudgetAsync(ctx workflow.Context, input *budgets.UpdateBudgetInput) *UpdateBudgetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateBudget", input)
	return &UpdateBudgetFuture{Future: future}
}

func (a *stub) UpdateBudgetAction(ctx workflow.Context, input *budgets.UpdateBudgetActionInput) (*budgets.UpdateBudgetActionOutput, error) {
	var output budgets.UpdateBudgetActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateBudgetAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBudgetActionAsync(ctx workflow.Context, input *budgets.UpdateBudgetActionInput) *UpdateBudgetActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateBudgetAction", input)
	return &UpdateBudgetActionFuture{Future: future}
}

func (a *stub) UpdateNotification(ctx workflow.Context, input *budgets.UpdateNotificationInput) (*budgets.UpdateNotificationOutput, error) {
	var output budgets.UpdateNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotificationAsync(ctx workflow.Context, input *budgets.UpdateNotificationInput) *UpdateNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateNotification", input)
	return &UpdateNotificationFuture{Future: future}
}

func (a *stub) UpdateSubscriber(ctx workflow.Context, input *budgets.UpdateSubscriberInput) (*budgets.UpdateSubscriberOutput, error) {
	var output budgets.UpdateSubscriberOutput
	err := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateSubscriber", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSubscriberAsync(ctx workflow.Context, input *budgets.UpdateSubscriberInput) *UpdateSubscriberFuture {
	future := workflow.ExecuteActivity(ctx, "aws-budgets-UpdateSubscriber", input)
	return &UpdateSubscriberFuture{Future: future}
}
