// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package configservicestub

import (
	"github.com/aws/aws-sdk-go/service/configservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchGetAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAggregationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationAggregatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeliveryChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEvaluationResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEvaluationResultsFuture) Get(ctx workflow.Context) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOrganizationConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOrganizationConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRemediationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRemediationConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceConfigFuture) Get(ctx workflow.Context) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRetentionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStoredQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStoredQueryFuture) Get(ctx workflow.Context) (*configservice.DeleteStoredQueryOutput, error) {
	var output configservice.DeleteStoredQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeliverConfigSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeliverConfigSnapshotFuture) Get(ctx workflow.Context) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAggregateComplianceByConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAggregateComplianceByConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAggregationAuthorizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAggregationAuthorizationsFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeComplianceByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeComplianceByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeComplianceByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeComplianceByResourceFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigRuleEvaluationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigRuleEvaluationStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationAggregatorSourcesStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationAggregatorSourcesStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationAggregatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationAggregatorsFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationRecorderStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationRecorderStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationRecordersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationRecordersFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConformancePackComplianceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConformancePackComplianceFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConformancePackStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConformancePackStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConformancePacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeliveryChannelStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeliveryChannelStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeliveryChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeliveryChannelsFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConfigRuleStatusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConfigRuleStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConformancePackStatusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConformancePackStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConformancePacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePendingAggregationRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePendingAggregationRequestsFuture) Get(ctx workflow.Context) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRemediationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRemediationExecutionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRemediationExecutionStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRetentionConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRetentionConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAggregateComplianceDetailsByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAggregateComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAggregateConfigRuleComplianceSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAggregateConfigRuleComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAggregateDiscoveredResourceCountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAggregateDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComplianceDetailsByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComplianceDetailsByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComplianceDetailsByResourceFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComplianceSummaryByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComplianceSummaryByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetComplianceSummaryByResourceTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetComplianceSummaryByResourceTypeFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConformancePackComplianceDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConformancePackComplianceDetailsFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConformancePackComplianceSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConformancePackComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDiscoveredResourceCountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOrganizationConfigRuleDetailedStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOrganizationConfigRuleDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOrganizationConformancePackDetailedStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOrganizationConformancePackDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceConfigHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceConfigHistoryFuture) Get(ctx workflow.Context) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetStoredQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetStoredQueryFuture) Get(ctx workflow.Context) (*configservice.GetStoredQueryOutput, error) {
	var output configservice.GetStoredQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAggregateDiscoveredResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAggregateDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDiscoveredResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStoredQueriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStoredQueriesFuture) Get(ctx workflow.Context) (*configservice.ListStoredQueriesOutput, error) {
	var output configservice.ListStoredQueriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAggregationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConfigurationAggregatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDeliveryChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutEvaluationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutEvaluationsFuture) Get(ctx workflow.Context) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutExternalEvaluationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutExternalEvaluationFuture) Get(ctx workflow.Context) (*configservice.PutExternalEvaluationOutput, error) {
	var output configservice.PutExternalEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutOrganizationConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutOrganizationConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRemediationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourceConfigFuture) Get(ctx workflow.Context) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRetentionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutStoredQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutStoredQueryFuture) Get(ctx workflow.Context) (*configservice.PutStoredQueryOutput, error) {
	var output configservice.PutStoredQueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SelectAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SelectAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SelectResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SelectResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartConfigRulesEvaluationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartConfigRulesEvaluationFuture) Get(ctx workflow.Context) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartRemediationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartRemediationExecutionFuture) Get(ctx workflow.Context) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetAggregateResourceConfig(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) *BatchGetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetAggregateResourceConfig", input)
	return &BatchGetAggregateResourceConfigFuture{Future: future}
}

func (a *stub) BatchGetResourceConfig(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) *BatchGetResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetResourceConfig", input)
	return &BatchGetResourceConfigFuture{Future: future}
}

func (a *stub) DeleteAggregationAuthorization(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) *DeleteAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteAggregationAuthorization", input)
	return &DeleteAggregationAuthorizationFuture{Future: future}
}

func (a *stub) DeleteConfigRule(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) *DeleteConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigRule", input)
	return &DeleteConfigRuleFuture{Future: future}
}

func (a *stub) DeleteConfigurationAggregator(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) *DeleteConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationAggregator", input)
	return &DeleteConfigurationAggregatorFuture{Future: future}
}

func (a *stub) DeleteConfigurationRecorder(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationRecorderAsync(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) *DeleteConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationRecorder", input)
	return &DeleteConfigurationRecorderFuture{Future: future}
}

func (a *stub) DeleteConformancePack(ctx workflow.Context, input *configservice.DeleteConformancePackInput) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConformancePackAsync(ctx workflow.Context, input *configservice.DeleteConformancePackInput) *DeleteConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConformancePack", input)
	return &DeleteConformancePackFuture{Future: future}
}

func (a *stub) DeleteDeliveryChannel(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeliveryChannelAsync(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) *DeleteDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteDeliveryChannel", input)
	return &DeleteDeliveryChannelFuture{Future: future}
}

func (a *stub) DeleteEvaluationResults(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteEvaluationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEvaluationResultsAsync(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) *DeleteEvaluationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteEvaluationResults", input)
	return &DeleteEvaluationResultsFuture{Future: future}
}

func (a *stub) DeleteOrganizationConfigRule(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) *DeleteOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConfigRule", input)
	return &DeleteOrganizationConfigRuleFuture{Future: future}
}

func (a *stub) DeleteOrganizationConformancePack(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) *DeleteOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConformancePack", input)
	return &DeleteOrganizationConformancePackFuture{Future: future}
}

func (a *stub) DeleteRemediationConfiguration(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemediationConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) *DeleteRemediationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationConfiguration", input)
	return &DeleteRemediationConfigurationFuture{Future: future}
}

func (a *stub) DeleteRemediationExceptions(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) *DeleteRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationExceptions", input)
	return &DeleteRemediationExceptionsFuture{Future: future}
}

func (a *stub) DeleteResourceConfig(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceConfigAsync(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) *DeleteResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteResourceConfig", input)
	return &DeleteResourceConfigFuture{Future: future}
}

func (a *stub) DeleteRetentionConfiguration(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRetentionConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) *DeleteRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRetentionConfiguration", input)
	return &DeleteRetentionConfigurationFuture{Future: future}
}

func (a *stub) DeleteStoredQuery(ctx workflow.Context, input *configservice.DeleteStoredQueryInput) (*configservice.DeleteStoredQueryOutput, error) {
	var output configservice.DeleteStoredQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteStoredQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStoredQueryAsync(ctx workflow.Context, input *configservice.DeleteStoredQueryInput) *DeleteStoredQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteStoredQuery", input)
	return &DeleteStoredQueryFuture{Future: future}
}

func (a *stub) DeliverConfigSnapshot(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeliverConfigSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeliverConfigSnapshotAsync(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) *DeliverConfigSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeliverConfigSnapshot", input)
	return &DeliverConfigSnapshotFuture{Future: future}
}

func (a *stub) DescribeAggregateComplianceByConfigRules(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregateComplianceByConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAggregateComplianceByConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) *DescribeAggregateComplianceByConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregateComplianceByConfigRules", input)
	return &DescribeAggregateComplianceByConfigRulesFuture{Future: future}
}

func (a *stub) DescribeAggregationAuthorizations(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregationAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAggregationAuthorizationsAsync(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) *DescribeAggregationAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregationAuthorizations", input)
	return &DescribeAggregationAuthorizationsFuture{Future: future}
}

func (a *stub) DescribeComplianceByConfigRule(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComplianceByConfigRuleAsync(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) *DescribeComplianceByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByConfigRule", input)
	return &DescribeComplianceByConfigRuleFuture{Future: future}
}

func (a *stub) DescribeComplianceByResource(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComplianceByResourceAsync(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) *DescribeComplianceByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByResource", input)
	return &DescribeComplianceByResourceFuture{Future: future}
}

func (a *stub) DescribeConfigRuleEvaluationStatus(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRuleEvaluationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigRuleEvaluationStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) *DescribeConfigRuleEvaluationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRuleEvaluationStatus", input)
	return &DescribeConfigRuleEvaluationStatusFuture{Future: future}
}

func (a *stub) DescribeConfigRules(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) *DescribeConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRules", input)
	return &DescribeConfigRulesFuture{Future: future}
}

func (a *stub) DescribeConfigurationAggregatorSourcesStatus(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregatorSourcesStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationAggregatorSourcesStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) *DescribeConfigurationAggregatorSourcesStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregatorSourcesStatus", input)
	return &DescribeConfigurationAggregatorSourcesStatusFuture{Future: future}
}

func (a *stub) DescribeConfigurationAggregators(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationAggregatorsAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) *DescribeConfigurationAggregatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregators", input)
	return &DescribeConfigurationAggregatorsFuture{Future: future}
}

func (a *stub) DescribeConfigurationRecorderStatus(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorderStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationRecorderStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) *DescribeConfigurationRecorderStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorderStatus", input)
	return &DescribeConfigurationRecorderStatusFuture{Future: future}
}

func (a *stub) DescribeConfigurationRecorders(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationRecordersAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) *DescribeConfigurationRecordersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorders", input)
	return &DescribeConfigurationRecordersFuture{Future: future}
}

func (a *stub) DescribeConformancePackCompliance(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackCompliance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePackComplianceAsync(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) *DescribeConformancePackComplianceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackCompliance", input)
	return &DescribeConformancePackComplianceFuture{Future: future}
}

func (a *stub) DescribeConformancePackStatus(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePackStatusAsync(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) *DescribeConformancePackStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackStatus", input)
	return &DescribeConformancePackStatusFuture{Future: future}
}

func (a *stub) DescribeConformancePacks(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) *DescribeConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePacks", input)
	return &DescribeConformancePacksFuture{Future: future}
}

func (a *stub) DescribeDeliveryChannelStatus(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannelStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeliveryChannelStatusAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) *DescribeDeliveryChannelStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannelStatus", input)
	return &DescribeDeliveryChannelStatusFuture{Future: future}
}

func (a *stub) DescribeDeliveryChannels(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeliveryChannelsAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) *DescribeDeliveryChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannels", input)
	return &DescribeDeliveryChannelsFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfigRuleStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRuleStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigRuleStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) *DescribeOrganizationConfigRuleStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRuleStatuses", input)
	return &DescribeOrganizationConfigRuleStatusesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfigRules(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) *DescribeOrganizationConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRules", input)
	return &DescribeOrganizationConfigRulesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConformancePackStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePackStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConformancePackStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) *DescribeOrganizationConformancePackStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePackStatuses", input)
	return &DescribeOrganizationConformancePackStatusesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConformancePacks(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) *DescribeOrganizationConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePacks", input)
	return &DescribeOrganizationConformancePacksFuture{Future: future}
}

func (a *stub) DescribePendingAggregationRequests(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribePendingAggregationRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingAggregationRequestsAsync(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) *DescribePendingAggregationRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribePendingAggregationRequests", input)
	return &DescribePendingAggregationRequestsFuture{Future: future}
}

func (a *stub) DescribeRemediationConfigurations(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) *DescribeRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationConfigurations", input)
	return &DescribeRemediationConfigurationsFuture{Future: future}
}

func (a *stub) DescribeRemediationExceptions(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) *DescribeRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExceptions", input)
	return &DescribeRemediationExceptionsFuture{Future: future}
}

func (a *stub) DescribeRemediationExecutionStatus(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationExecutionStatusAsync(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) *DescribeRemediationExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExecutionStatus", input)
	return &DescribeRemediationExecutionStatusFuture{Future: future}
}

func (a *stub) DescribeRetentionConfigurations(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRetentionConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRetentionConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) *DescribeRetentionConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRetentionConfigurations", input)
	return &DescribeRetentionConfigurationsFuture{Future: future}
}

func (a *stub) GetAggregateComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) *GetAggregateComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateComplianceDetailsByConfigRule", input)
	return &GetAggregateComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *stub) GetAggregateConfigRuleComplianceSummary(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateConfigRuleComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateConfigRuleComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) *GetAggregateConfigRuleComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateConfigRuleComplianceSummary", input)
	return &GetAggregateConfigRuleComplianceSummaryFuture{Future: future}
}

func (a *stub) GetAggregateDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) *GetAggregateDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateDiscoveredResourceCounts", input)
	return &GetAggregateDiscoveredResourceCountsFuture{Future: future}
}

func (a *stub) GetAggregateResourceConfig(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) *GetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateResourceConfig", input)
	return &GetAggregateResourceConfigFuture{Future: future}
}

func (a *stub) GetComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) *GetComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByConfigRule", input)
	return &GetComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *stub) GetComplianceDetailsByResource(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceDetailsByResourceAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) *GetComplianceDetailsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByResource", input)
	return &GetComplianceDetailsByResourceFuture{Future: future}
}

func (a *stub) GetComplianceSummaryByConfigRule(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceSummaryByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) *GetComplianceSummaryByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByConfigRule", input)
	return &GetComplianceSummaryByConfigRuleFuture{Future: future}
}

func (a *stub) GetComplianceSummaryByResourceType(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByResourceType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceSummaryByResourceTypeAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) *GetComplianceSummaryByResourceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByResourceType", input)
	return &GetComplianceSummaryByResourceTypeFuture{Future: future}
}

func (a *stub) GetConformancePackComplianceDetails(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConformancePackComplianceDetailsAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) *GetConformancePackComplianceDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceDetails", input)
	return &GetConformancePackComplianceDetailsFuture{Future: future}
}

func (a *stub) GetConformancePackComplianceSummary(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConformancePackComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) *GetConformancePackComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceSummary", input)
	return &GetConformancePackComplianceSummaryFuture{Future: future}
}

func (a *stub) GetDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) *GetDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetDiscoveredResourceCounts", input)
	return &GetDiscoveredResourceCountsFuture{Future: future}
}

func (a *stub) GetOrganizationConfigRuleDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConfigRuleDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationConfigRuleDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) *GetOrganizationConfigRuleDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConfigRuleDetailedStatus", input)
	return &GetOrganizationConfigRuleDetailedStatusFuture{Future: future}
}

func (a *stub) GetOrganizationConformancePackDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConformancePackDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationConformancePackDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) *GetOrganizationConformancePackDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConformancePackDetailedStatus", input)
	return &GetOrganizationConformancePackDetailedStatusFuture{Future: future}
}

func (a *stub) GetResourceConfigHistory(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetResourceConfigHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceConfigHistoryAsync(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) *GetResourceConfigHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetResourceConfigHistory", input)
	return &GetResourceConfigHistoryFuture{Future: future}
}

func (a *stub) GetStoredQuery(ctx workflow.Context, input *configservice.GetStoredQueryInput) (*configservice.GetStoredQueryOutput, error) {
	var output configservice.GetStoredQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetStoredQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStoredQueryAsync(ctx workflow.Context, input *configservice.GetStoredQueryInput) *GetStoredQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetStoredQuery", input)
	return &GetStoredQueryFuture{Future: future}
}

func (a *stub) ListAggregateDiscoveredResources(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListAggregateDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAggregateDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) *ListAggregateDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListAggregateDiscoveredResources", input)
	return &ListAggregateDiscoveredResourcesFuture{Future: future}
}

func (a *stub) ListDiscoveredResources(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) *ListDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListDiscoveredResources", input)
	return &ListDiscoveredResourcesFuture{Future: future}
}

func (a *stub) ListStoredQueries(ctx workflow.Context, input *configservice.ListStoredQueriesInput) (*configservice.ListStoredQueriesOutput, error) {
	var output configservice.ListStoredQueriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListStoredQueries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStoredQueriesAsync(ctx workflow.Context, input *configservice.ListStoredQueriesInput) *ListStoredQueriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListStoredQueries", input)
	return &ListStoredQueriesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *configservice.ListTagsForResourceInput) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *configservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutAggregationAuthorization(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) *PutAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutAggregationAuthorization", input)
	return &PutAggregationAuthorizationFuture{Future: future}
}

func (a *stub) PutConfigRule(ctx workflow.Context, input *configservice.PutConfigRuleInput) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigRuleAsync(ctx workflow.Context, input *configservice.PutConfigRuleInput) *PutConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigRule", input)
	return &PutConfigRuleFuture{Future: future}
}

func (a *stub) PutConfigurationAggregator(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) *PutConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationAggregator", input)
	return &PutConfigurationAggregatorFuture{Future: future}
}

func (a *stub) PutConfigurationRecorder(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigurationRecorderAsync(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) *PutConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationRecorder", input)
	return &PutConfigurationRecorderFuture{Future: future}
}

func (a *stub) PutConformancePack(ctx workflow.Context, input *configservice.PutConformancePackInput) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConformancePackAsync(ctx workflow.Context, input *configservice.PutConformancePackInput) *PutConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConformancePack", input)
	return &PutConformancePackFuture{Future: future}
}

func (a *stub) PutDeliveryChannel(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDeliveryChannelAsync(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) *PutDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutDeliveryChannel", input)
	return &PutDeliveryChannelFuture{Future: future}
}

func (a *stub) PutEvaluations(ctx workflow.Context, input *configservice.PutEvaluationsInput) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutEvaluations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEvaluationsAsync(ctx workflow.Context, input *configservice.PutEvaluationsInput) *PutEvaluationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutEvaluations", input)
	return &PutEvaluationsFuture{Future: future}
}

func (a *stub) PutExternalEvaluation(ctx workflow.Context, input *configservice.PutExternalEvaluationInput) (*configservice.PutExternalEvaluationOutput, error) {
	var output configservice.PutExternalEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutExternalEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutExternalEvaluationAsync(ctx workflow.Context, input *configservice.PutExternalEvaluationInput) *PutExternalEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutExternalEvaluation", input)
	return &PutExternalEvaluationFuture{Future: future}
}

func (a *stub) PutOrganizationConfigRule(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) *PutOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConfigRule", input)
	return &PutOrganizationConfigRuleFuture{Future: future}
}

func (a *stub) PutOrganizationConformancePack(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) *PutOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConformancePack", input)
	return &PutOrganizationConformancePackFuture{Future: future}
}

func (a *stub) PutRemediationConfigurations(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) *PutRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationConfigurations", input)
	return &PutRemediationConfigurationsFuture{Future: future}
}

func (a *stub) PutRemediationExceptions(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRemediationExceptionsAsync(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) *PutRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationExceptions", input)
	return &PutRemediationExceptionsFuture{Future: future}
}

func (a *stub) PutResourceConfig(ctx workflow.Context, input *configservice.PutResourceConfigInput) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourceConfigAsync(ctx workflow.Context, input *configservice.PutResourceConfigInput) *PutResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutResourceConfig", input)
	return &PutResourceConfigFuture{Future: future}
}

func (a *stub) PutRetentionConfiguration(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionConfigurationAsync(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) *PutRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRetentionConfiguration", input)
	return &PutRetentionConfigurationFuture{Future: future}
}

func (a *stub) PutStoredQuery(ctx workflow.Context, input *configservice.PutStoredQueryInput) (*configservice.PutStoredQueryOutput, error) {
	var output configservice.PutStoredQueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutStoredQuery", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutStoredQueryAsync(ctx workflow.Context, input *configservice.PutStoredQueryInput) *PutStoredQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutStoredQuery", input)
	return &PutStoredQueryFuture{Future: future}
}

func (a *stub) SelectAggregateResourceConfig(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-SelectAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) *SelectAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-SelectAggregateResourceConfig", input)
	return &SelectAggregateResourceConfigFuture{Future: future}
}

func (a *stub) SelectResourceConfig(ctx workflow.Context, input *configservice.SelectResourceConfigInput) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-SelectResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectResourceConfigAsync(ctx workflow.Context, input *configservice.SelectResourceConfigInput) *SelectResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-SelectResourceConfig", input)
	return &SelectResourceConfigFuture{Future: future}
}

func (a *stub) StartConfigRulesEvaluation(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigRulesEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartConfigRulesEvaluationAsync(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) *StartConfigRulesEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigRulesEvaluation", input)
	return &StartConfigRulesEvaluationFuture{Future: future}
}

func (a *stub) StartConfigurationRecorder(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) *StartConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigurationRecorder", input)
	return &StartConfigurationRecorderFuture{Future: future}
}

func (a *stub) StartRemediationExecution(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartRemediationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRemediationExecutionAsync(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) *StartRemediationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartRemediationExecution", input)
	return &StartRemediationExecutionFuture{Future: future}
}

func (a *stub) StopConfigurationRecorder(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StopConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) *StopConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StopConfigurationRecorder", input)
	return &StopConfigurationRecorderFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *configservice.TagResourceInput) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *configservice.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *configservice.UntagResourceInput) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *configservice.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}
