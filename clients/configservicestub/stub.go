// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package configservicestub

import (
	"github.com/aws/aws-sdk-go/service/configservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ConfigServiceBatchGetAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceBatchGetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceBatchGetResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceBatchGetResourceConfigFuture) Get(ctx workflow.Context) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteAggregationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteConfigurationAggregatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteDeliveryChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteEvaluationResultsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteEvaluationResultsFuture) Get(ctx workflow.Context) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteOrganizationConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteOrganizationConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteRemediationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteRemediationConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteResourceConfigFuture) Get(ctx workflow.Context) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeleteRetentionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeleteRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDeliverConfigSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDeliverConfigSnapshotFuture) Get(ctx workflow.Context) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeAggregateComplianceByConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeAggregateComplianceByConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeAggregationAuthorizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeAggregationAuthorizationsFuture) Get(ctx workflow.Context) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeComplianceByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeComplianceByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeComplianceByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeComplianceByResourceFuture) Get(ctx workflow.Context) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigRuleEvaluationStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigRuleEvaluationStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigurationAggregatorSourcesStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigurationAggregatorSourcesStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigurationAggregatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigurationAggregatorsFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigurationRecorderStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigurationRecorderStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConfigurationRecordersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConfigurationRecordersFuture) Get(ctx workflow.Context) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConformancePackComplianceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConformancePackComplianceFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConformancePackStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConformancePackStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeConformancePacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeDeliveryChannelStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeDeliveryChannelStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeDeliveryChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeDeliveryChannelsFuture) Get(ctx workflow.Context) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeOrganizationConfigRuleStatusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeOrganizationConfigRuleStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeOrganizationConfigRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeOrganizationConfigRulesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeOrganizationConformancePackStatusesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeOrganizationConformancePackStatusesFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeOrganizationConformancePacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeOrganizationConformancePacksFuture) Get(ctx workflow.Context) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribePendingAggregationRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribePendingAggregationRequestsFuture) Get(ctx workflow.Context) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeRemediationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeRemediationExecutionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeRemediationExecutionStatusFuture) Get(ctx workflow.Context) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceDescribeRetentionConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceDescribeRetentionConfigurationsFuture) Get(ctx workflow.Context) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetAggregateComplianceDetailsByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetAggregateComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetAggregateConfigRuleComplianceSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetAggregateConfigRuleComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetAggregateDiscoveredResourceCountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetAggregateDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetComplianceDetailsByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetComplianceDetailsByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetComplianceDetailsByResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetComplianceDetailsByResourceFuture) Get(ctx workflow.Context) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetComplianceSummaryByConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetComplianceSummaryByConfigRuleFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetComplianceSummaryByResourceTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetComplianceSummaryByResourceTypeFuture) Get(ctx workflow.Context) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetConformancePackComplianceDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetConformancePackComplianceDetailsFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetConformancePackComplianceSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetConformancePackComplianceSummaryFuture) Get(ctx workflow.Context) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetDiscoveredResourceCountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetDiscoveredResourceCountsFuture) Get(ctx workflow.Context) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetOrganizationConfigRuleDetailedStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetOrganizationConfigRuleDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetOrganizationConformancePackDetailedStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetOrganizationConformancePackDetailedStatusFuture) Get(ctx workflow.Context) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceGetResourceConfigHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceGetResourceConfigHistoryFuture) Get(ctx workflow.Context) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceListAggregateDiscoveredResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceListAggregateDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceListDiscoveredResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceListDiscoveredResourcesFuture) Get(ctx workflow.Context) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutAggregationAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutAggregationAuthorizationFuture) Get(ctx workflow.Context) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutConfigurationAggregatorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutConfigurationAggregatorFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutDeliveryChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutDeliveryChannelFuture) Get(ctx workflow.Context) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutEvaluationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutEvaluationsFuture) Get(ctx workflow.Context) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutOrganizationConfigRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutOrganizationConfigRuleFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutOrganizationConformancePackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutOrganizationConformancePackFuture) Get(ctx workflow.Context) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutRemediationConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutRemediationConfigurationsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutRemediationExceptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutRemediationExceptionsFuture) Get(ctx workflow.Context) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutResourceConfigFuture) Get(ctx workflow.Context) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServicePutRetentionConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServicePutRetentionConfigurationFuture) Get(ctx workflow.Context) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceSelectAggregateResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceSelectAggregateResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceSelectResourceConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceSelectResourceConfigFuture) Get(ctx workflow.Context) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceStartConfigRulesEvaluationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceStartConfigRulesEvaluationFuture) Get(ctx workflow.Context) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceStartConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceStartConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceStartRemediationExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceStartRemediationExecutionFuture) Get(ctx workflow.Context) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceStopConfigurationRecorderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceStopConfigurationRecorderFuture) Get(ctx workflow.Context) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceTagResourceFuture) Get(ctx workflow.Context) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigServiceUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigServiceUntagResourceFuture) Get(ctx workflow.Context) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetAggregateResourceConfig(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	var output configservice.BatchGetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetAggregateResourceConfigInput) *ConfigServiceBatchGetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetAggregateResourceConfig", input)
	return &ConfigServiceBatchGetAggregateResourceConfigFuture{Future: future}
}

func (a *stub) BatchGetResourceConfig(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) (*configservice.BatchGetResourceConfigOutput, error) {
	var output configservice.BatchGetResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetResourceConfigAsync(ctx workflow.Context, input *configservice.BatchGetResourceConfigInput) *ConfigServiceBatchGetResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-BatchGetResourceConfig", input)
	return &ConfigServiceBatchGetResourceConfigFuture{Future: future}
}

func (a *stub) DeleteAggregationAuthorization(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	var output configservice.DeleteAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.DeleteAggregationAuthorizationInput) *ConfigServiceDeleteAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteAggregationAuthorization", input)
	return &ConfigServiceDeleteAggregationAuthorizationFuture{Future: future}
}

func (a *stub) DeleteConfigRule(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) (*configservice.DeleteConfigRuleOutput, error) {
	var output configservice.DeleteConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteConfigRuleInput) *ConfigServiceDeleteConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigRule", input)
	return &ConfigServiceDeleteConfigRuleFuture{Future: future}
}

func (a *stub) DeleteConfigurationAggregator(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	var output configservice.DeleteConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.DeleteConfigurationAggregatorInput) *ConfigServiceDeleteConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationAggregator", input)
	return &ConfigServiceDeleteConfigurationAggregatorFuture{Future: future}
}

func (a *stub) DeleteConfigurationRecorder(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) (*configservice.DeleteConfigurationRecorderOutput, error) {
	var output configservice.DeleteConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationRecorderAsync(ctx workflow.Context, input *configservice.DeleteConfigurationRecorderInput) *ConfigServiceDeleteConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConfigurationRecorder", input)
	return &ConfigServiceDeleteConfigurationRecorderFuture{Future: future}
}

func (a *stub) DeleteConformancePack(ctx workflow.Context, input *configservice.DeleteConformancePackInput) (*configservice.DeleteConformancePackOutput, error) {
	var output configservice.DeleteConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConformancePackAsync(ctx workflow.Context, input *configservice.DeleteConformancePackInput) *ConfigServiceDeleteConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteConformancePack", input)
	return &ConfigServiceDeleteConformancePackFuture{Future: future}
}

func (a *stub) DeleteDeliveryChannel(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) (*configservice.DeleteDeliveryChannelOutput, error) {
	var output configservice.DeleteDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeliveryChannelAsync(ctx workflow.Context, input *configservice.DeleteDeliveryChannelInput) *ConfigServiceDeleteDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteDeliveryChannel", input)
	return &ConfigServiceDeleteDeliveryChannelFuture{Future: future}
}

func (a *stub) DeleteEvaluationResults(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) (*configservice.DeleteEvaluationResultsOutput, error) {
	var output configservice.DeleteEvaluationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteEvaluationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEvaluationResultsAsync(ctx workflow.Context, input *configservice.DeleteEvaluationResultsInput) *ConfigServiceDeleteEvaluationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteEvaluationResults", input)
	return &ConfigServiceDeleteEvaluationResultsFuture{Future: future}
}

func (a *stub) DeleteOrganizationConfigRule(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	var output configservice.DeleteOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConfigRuleInput) *ConfigServiceDeleteOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConfigRule", input)
	return &ConfigServiceDeleteOrganizationConfigRuleFuture{Future: future}
}

func (a *stub) DeleteOrganizationConformancePack(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	var output configservice.DeleteOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.DeleteOrganizationConformancePackInput) *ConfigServiceDeleteOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteOrganizationConformancePack", input)
	return &ConfigServiceDeleteOrganizationConformancePackFuture{Future: future}
}

func (a *stub) DeleteRemediationConfiguration(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) (*configservice.DeleteRemediationConfigurationOutput, error) {
	var output configservice.DeleteRemediationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemediationConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRemediationConfigurationInput) *ConfigServiceDeleteRemediationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationConfiguration", input)
	return &ConfigServiceDeleteRemediationConfigurationFuture{Future: future}
}

func (a *stub) DeleteRemediationExceptions(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) (*configservice.DeleteRemediationExceptionsOutput, error) {
	var output configservice.DeleteRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DeleteRemediationExceptionsInput) *ConfigServiceDeleteRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRemediationExceptions", input)
	return &ConfigServiceDeleteRemediationExceptionsFuture{Future: future}
}

func (a *stub) DeleteResourceConfig(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) (*configservice.DeleteResourceConfigOutput, error) {
	var output configservice.DeleteResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceConfigAsync(ctx workflow.Context, input *configservice.DeleteResourceConfigInput) *ConfigServiceDeleteResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteResourceConfig", input)
	return &ConfigServiceDeleteResourceConfigFuture{Future: future}
}

func (a *stub) DeleteRetentionConfiguration(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) (*configservice.DeleteRetentionConfigurationOutput, error) {
	var output configservice.DeleteRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRetentionConfigurationAsync(ctx workflow.Context, input *configservice.DeleteRetentionConfigurationInput) *ConfigServiceDeleteRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeleteRetentionConfiguration", input)
	return &ConfigServiceDeleteRetentionConfigurationFuture{Future: future}
}

func (a *stub) DeliverConfigSnapshot(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) (*configservice.DeliverConfigSnapshotOutput, error) {
	var output configservice.DeliverConfigSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DeliverConfigSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeliverConfigSnapshotAsync(ctx workflow.Context, input *configservice.DeliverConfigSnapshotInput) *ConfigServiceDeliverConfigSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DeliverConfigSnapshot", input)
	return &ConfigServiceDeliverConfigSnapshotFuture{Future: future}
}

func (a *stub) DescribeAggregateComplianceByConfigRules(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	var output configservice.DescribeAggregateComplianceByConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregateComplianceByConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAggregateComplianceByConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeAggregateComplianceByConfigRulesInput) *ConfigServiceDescribeAggregateComplianceByConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregateComplianceByConfigRules", input)
	return &ConfigServiceDescribeAggregateComplianceByConfigRulesFuture{Future: future}
}

func (a *stub) DescribeAggregationAuthorizations(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	var output configservice.DescribeAggregationAuthorizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregationAuthorizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAggregationAuthorizationsAsync(ctx workflow.Context, input *configservice.DescribeAggregationAuthorizationsInput) *ConfigServiceDescribeAggregationAuthorizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeAggregationAuthorizations", input)
	return &ConfigServiceDescribeAggregationAuthorizationsFuture{Future: future}
}

func (a *stub) DescribeComplianceByConfigRule(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	var output configservice.DescribeComplianceByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComplianceByConfigRuleAsync(ctx workflow.Context, input *configservice.DescribeComplianceByConfigRuleInput) *ConfigServiceDescribeComplianceByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByConfigRule", input)
	return &ConfigServiceDescribeComplianceByConfigRuleFuture{Future: future}
}

func (a *stub) DescribeComplianceByResource(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) (*configservice.DescribeComplianceByResourceOutput, error) {
	var output configservice.DescribeComplianceByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeComplianceByResourceAsync(ctx workflow.Context, input *configservice.DescribeComplianceByResourceInput) *ConfigServiceDescribeComplianceByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeComplianceByResource", input)
	return &ConfigServiceDescribeComplianceByResourceFuture{Future: future}
}

func (a *stub) DescribeConfigRuleEvaluationStatus(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	var output configservice.DescribeConfigRuleEvaluationStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRuleEvaluationStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigRuleEvaluationStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigRuleEvaluationStatusInput) *ConfigServiceDescribeConfigRuleEvaluationStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRuleEvaluationStatus", input)
	return &ConfigServiceDescribeConfigRuleEvaluationStatusFuture{Future: future}
}

func (a *stub) DescribeConfigRules(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) (*configservice.DescribeConfigRulesOutput, error) {
	var output configservice.DescribeConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeConfigRulesInput) *ConfigServiceDescribeConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigRules", input)
	return &ConfigServiceDescribeConfigRulesFuture{Future: future}
}

func (a *stub) DescribeConfigurationAggregatorSourcesStatus(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	var output configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregatorSourcesStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationAggregatorSourcesStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorSourcesStatusInput) *ConfigServiceDescribeConfigurationAggregatorSourcesStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregatorSourcesStatus", input)
	return &ConfigServiceDescribeConfigurationAggregatorSourcesStatusFuture{Future: future}
}

func (a *stub) DescribeConfigurationAggregators(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	var output configservice.DescribeConfigurationAggregatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationAggregatorsAsync(ctx workflow.Context, input *configservice.DescribeConfigurationAggregatorsInput) *ConfigServiceDescribeConfigurationAggregatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationAggregators", input)
	return &ConfigServiceDescribeConfigurationAggregatorsFuture{Future: future}
}

func (a *stub) DescribeConfigurationRecorderStatus(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	var output configservice.DescribeConfigurationRecorderStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorderStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationRecorderStatusAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecorderStatusInput) *ConfigServiceDescribeConfigurationRecorderStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorderStatus", input)
	return &ConfigServiceDescribeConfigurationRecorderStatusFuture{Future: future}
}

func (a *stub) DescribeConfigurationRecorders(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) (*configservice.DescribeConfigurationRecordersOutput, error) {
	var output configservice.DescribeConfigurationRecordersOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationRecordersAsync(ctx workflow.Context, input *configservice.DescribeConfigurationRecordersInput) *ConfigServiceDescribeConfigurationRecordersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConfigurationRecorders", input)
	return &ConfigServiceDescribeConfigurationRecordersFuture{Future: future}
}

func (a *stub) DescribeConformancePackCompliance(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) (*configservice.DescribeConformancePackComplianceOutput, error) {
	var output configservice.DescribeConformancePackComplianceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackCompliance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePackComplianceAsync(ctx workflow.Context, input *configservice.DescribeConformancePackComplianceInput) *ConfigServiceDescribeConformancePackComplianceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackCompliance", input)
	return &ConfigServiceDescribeConformancePackComplianceFuture{Future: future}
}

func (a *stub) DescribeConformancePackStatus(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) (*configservice.DescribeConformancePackStatusOutput, error) {
	var output configservice.DescribeConformancePackStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePackStatusAsync(ctx workflow.Context, input *configservice.DescribeConformancePackStatusInput) *ConfigServiceDescribeConformancePackStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePackStatus", input)
	return &ConfigServiceDescribeConformancePackStatusFuture{Future: future}
}

func (a *stub) DescribeConformancePacks(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) (*configservice.DescribeConformancePacksOutput, error) {
	var output configservice.DescribeConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeConformancePacksInput) *ConfigServiceDescribeConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeConformancePacks", input)
	return &ConfigServiceDescribeConformancePacksFuture{Future: future}
}

func (a *stub) DescribeDeliveryChannelStatus(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	var output configservice.DescribeDeliveryChannelStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannelStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeliveryChannelStatusAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelStatusInput) *ConfigServiceDescribeDeliveryChannelStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannelStatus", input)
	return &ConfigServiceDescribeDeliveryChannelStatusFuture{Future: future}
}

func (a *stub) DescribeDeliveryChannels(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) (*configservice.DescribeDeliveryChannelsOutput, error) {
	var output configservice.DescribeDeliveryChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeliveryChannelsAsync(ctx workflow.Context, input *configservice.DescribeDeliveryChannelsInput) *ConfigServiceDescribeDeliveryChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeDeliveryChannels", input)
	return &ConfigServiceDescribeDeliveryChannelsFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfigRuleStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	var output configservice.DescribeOrganizationConfigRuleStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRuleStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigRuleStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRuleStatusesInput) *ConfigServiceDescribeOrganizationConfigRuleStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRuleStatuses", input)
	return &ConfigServiceDescribeOrganizationConfigRuleStatusesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfigRules(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	var output configservice.DescribeOrganizationConfigRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigRulesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConfigRulesInput) *ConfigServiceDescribeOrganizationConfigRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConfigRules", input)
	return &ConfigServiceDescribeOrganizationConfigRulesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConformancePackStatuses(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	var output configservice.DescribeOrganizationConformancePackStatusesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePackStatuses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConformancePackStatusesAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePackStatusesInput) *ConfigServiceDescribeOrganizationConformancePackStatusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePackStatuses", input)
	return &ConfigServiceDescribeOrganizationConformancePackStatusesFuture{Future: future}
}

func (a *stub) DescribeOrganizationConformancePacks(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	var output configservice.DescribeOrganizationConformancePacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConformancePacksAsync(ctx workflow.Context, input *configservice.DescribeOrganizationConformancePacksInput) *ConfigServiceDescribeOrganizationConformancePacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeOrganizationConformancePacks", input)
	return &ConfigServiceDescribeOrganizationConformancePacksFuture{Future: future}
}

func (a *stub) DescribePendingAggregationRequests(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	var output configservice.DescribePendingAggregationRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribePendingAggregationRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePendingAggregationRequestsAsync(ctx workflow.Context, input *configservice.DescribePendingAggregationRequestsInput) *ConfigServiceDescribePendingAggregationRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribePendingAggregationRequests", input)
	return &ConfigServiceDescribePendingAggregationRequestsFuture{Future: future}
}

func (a *stub) DescribeRemediationConfigurations(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	var output configservice.DescribeRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRemediationConfigurationsInput) *ConfigServiceDescribeRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationConfigurations", input)
	return &ConfigServiceDescribeRemediationConfigurationsFuture{Future: future}
}

func (a *stub) DescribeRemediationExceptions(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) (*configservice.DescribeRemediationExceptionsOutput, error) {
	var output configservice.DescribeRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationExceptionsAsync(ctx workflow.Context, input *configservice.DescribeRemediationExceptionsInput) *ConfigServiceDescribeRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExceptions", input)
	return &ConfigServiceDescribeRemediationExceptionsFuture{Future: future}
}

func (a *stub) DescribeRemediationExecutionStatus(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	var output configservice.DescribeRemediationExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRemediationExecutionStatusAsync(ctx workflow.Context, input *configservice.DescribeRemediationExecutionStatusInput) *ConfigServiceDescribeRemediationExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRemediationExecutionStatus", input)
	return &ConfigServiceDescribeRemediationExecutionStatusFuture{Future: future}
}

func (a *stub) DescribeRetentionConfigurations(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	var output configservice.DescribeRetentionConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRetentionConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRetentionConfigurationsAsync(ctx workflow.Context, input *configservice.DescribeRetentionConfigurationsInput) *ConfigServiceDescribeRetentionConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-DescribeRetentionConfigurations", input)
	return &ConfigServiceDescribeRetentionConfigurationsFuture{Future: future}
}

func (a *stub) GetAggregateComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetAggregateComplianceDetailsByConfigRuleInput) *ConfigServiceGetAggregateComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateComplianceDetailsByConfigRule", input)
	return &ConfigServiceGetAggregateComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *stub) GetAggregateConfigRuleComplianceSummary(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	var output configservice.GetAggregateConfigRuleComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateConfigRuleComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateConfigRuleComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetAggregateConfigRuleComplianceSummaryInput) *ConfigServiceGetAggregateConfigRuleComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateConfigRuleComplianceSummary", input)
	return &ConfigServiceGetAggregateConfigRuleComplianceSummaryFuture{Future: future}
}

func (a *stub) GetAggregateDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	var output configservice.GetAggregateDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetAggregateDiscoveredResourceCountsInput) *ConfigServiceGetAggregateDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateDiscoveredResourceCounts", input)
	return &ConfigServiceGetAggregateDiscoveredResourceCountsFuture{Future: future}
}

func (a *stub) GetAggregateResourceConfig(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) (*configservice.GetAggregateResourceConfigOutput, error) {
	var output configservice.GetAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.GetAggregateResourceConfigInput) *ConfigServiceGetAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetAggregateResourceConfig", input)
	return &ConfigServiceGetAggregateResourceConfigFuture{Future: future}
}

func (a *stub) GetComplianceDetailsByConfigRule(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	var output configservice.GetComplianceDetailsByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceDetailsByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByConfigRuleInput) *ConfigServiceGetComplianceDetailsByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByConfigRule", input)
	return &ConfigServiceGetComplianceDetailsByConfigRuleFuture{Future: future}
}

func (a *stub) GetComplianceDetailsByResource(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	var output configservice.GetComplianceDetailsByResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceDetailsByResourceAsync(ctx workflow.Context, input *configservice.GetComplianceDetailsByResourceInput) *ConfigServiceGetComplianceDetailsByResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceDetailsByResource", input)
	return &ConfigServiceGetComplianceDetailsByResourceFuture{Future: future}
}

func (a *stub) GetComplianceSummaryByConfigRule(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	var output configservice.GetComplianceSummaryByConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceSummaryByConfigRuleAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByConfigRuleInput) *ConfigServiceGetComplianceSummaryByConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByConfigRule", input)
	return &ConfigServiceGetComplianceSummaryByConfigRuleFuture{Future: future}
}

func (a *stub) GetComplianceSummaryByResourceType(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	var output configservice.GetComplianceSummaryByResourceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByResourceType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetComplianceSummaryByResourceTypeAsync(ctx workflow.Context, input *configservice.GetComplianceSummaryByResourceTypeInput) *ConfigServiceGetComplianceSummaryByResourceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetComplianceSummaryByResourceType", input)
	return &ConfigServiceGetComplianceSummaryByResourceTypeFuture{Future: future}
}

func (a *stub) GetConformancePackComplianceDetails(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	var output configservice.GetConformancePackComplianceDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConformancePackComplianceDetailsAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceDetailsInput) *ConfigServiceGetConformancePackComplianceDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceDetails", input)
	return &ConfigServiceGetConformancePackComplianceDetailsFuture{Future: future}
}

func (a *stub) GetConformancePackComplianceSummary(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	var output configservice.GetConformancePackComplianceSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConformancePackComplianceSummaryAsync(ctx workflow.Context, input *configservice.GetConformancePackComplianceSummaryInput) *ConfigServiceGetConformancePackComplianceSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetConformancePackComplianceSummary", input)
	return &ConfigServiceGetConformancePackComplianceSummaryFuture{Future: future}
}

func (a *stub) GetDiscoveredResourceCounts(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	var output configservice.GetDiscoveredResourceCountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetDiscoveredResourceCounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDiscoveredResourceCountsAsync(ctx workflow.Context, input *configservice.GetDiscoveredResourceCountsInput) *ConfigServiceGetDiscoveredResourceCountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetDiscoveredResourceCounts", input)
	return &ConfigServiceGetDiscoveredResourceCountsFuture{Future: future}
}

func (a *stub) GetOrganizationConfigRuleDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConfigRuleDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConfigRuleDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationConfigRuleDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConfigRuleDetailedStatusInput) *ConfigServiceGetOrganizationConfigRuleDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConfigRuleDetailedStatus", input)
	return &ConfigServiceGetOrganizationConfigRuleDetailedStatusFuture{Future: future}
}

func (a *stub) GetOrganizationConformancePackDetailedStatus(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	var output configservice.GetOrganizationConformancePackDetailedStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConformancePackDetailedStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationConformancePackDetailedStatusAsync(ctx workflow.Context, input *configservice.GetOrganizationConformancePackDetailedStatusInput) *ConfigServiceGetOrganizationConformancePackDetailedStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetOrganizationConformancePackDetailedStatus", input)
	return &ConfigServiceGetOrganizationConformancePackDetailedStatusFuture{Future: future}
}

func (a *stub) GetResourceConfigHistory(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) (*configservice.GetResourceConfigHistoryOutput, error) {
	var output configservice.GetResourceConfigHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-GetResourceConfigHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceConfigHistoryAsync(ctx workflow.Context, input *configservice.GetResourceConfigHistoryInput) *ConfigServiceGetResourceConfigHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-GetResourceConfigHistory", input)
	return &ConfigServiceGetResourceConfigHistoryFuture{Future: future}
}

func (a *stub) ListAggregateDiscoveredResources(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	var output configservice.ListAggregateDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListAggregateDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAggregateDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListAggregateDiscoveredResourcesInput) *ConfigServiceListAggregateDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListAggregateDiscoveredResources", input)
	return &ConfigServiceListAggregateDiscoveredResourcesFuture{Future: future}
}

func (a *stub) ListDiscoveredResources(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) (*configservice.ListDiscoveredResourcesOutput, error) {
	var output configservice.ListDiscoveredResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListDiscoveredResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDiscoveredResourcesAsync(ctx workflow.Context, input *configservice.ListDiscoveredResourcesInput) *ConfigServiceListDiscoveredResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListDiscoveredResources", input)
	return &ConfigServiceListDiscoveredResourcesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *configservice.ListTagsForResourceInput) (*configservice.ListTagsForResourceOutput, error) {
	var output configservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *configservice.ListTagsForResourceInput) *ConfigServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-ListTagsForResource", input)
	return &ConfigServiceListTagsForResourceFuture{Future: future}
}

func (a *stub) PutAggregationAuthorization(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) (*configservice.PutAggregationAuthorizationOutput, error) {
	var output configservice.PutAggregationAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutAggregationAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAggregationAuthorizationAsync(ctx workflow.Context, input *configservice.PutAggregationAuthorizationInput) *ConfigServicePutAggregationAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutAggregationAuthorization", input)
	return &ConfigServicePutAggregationAuthorizationFuture{Future: future}
}

func (a *stub) PutConfigRule(ctx workflow.Context, input *configservice.PutConfigRuleInput) (*configservice.PutConfigRuleOutput, error) {
	var output configservice.PutConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigRuleAsync(ctx workflow.Context, input *configservice.PutConfigRuleInput) *ConfigServicePutConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigRule", input)
	return &ConfigServicePutConfigRuleFuture{Future: future}
}

func (a *stub) PutConfigurationAggregator(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) (*configservice.PutConfigurationAggregatorOutput, error) {
	var output configservice.PutConfigurationAggregatorOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationAggregator", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigurationAggregatorAsync(ctx workflow.Context, input *configservice.PutConfigurationAggregatorInput) *ConfigServicePutConfigurationAggregatorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationAggregator", input)
	return &ConfigServicePutConfigurationAggregatorFuture{Future: future}
}

func (a *stub) PutConfigurationRecorder(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) (*configservice.PutConfigurationRecorderOutput, error) {
	var output configservice.PutConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConfigurationRecorderAsync(ctx workflow.Context, input *configservice.PutConfigurationRecorderInput) *ConfigServicePutConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConfigurationRecorder", input)
	return &ConfigServicePutConfigurationRecorderFuture{Future: future}
}

func (a *stub) PutConformancePack(ctx workflow.Context, input *configservice.PutConformancePackInput) (*configservice.PutConformancePackOutput, error) {
	var output configservice.PutConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutConformancePackAsync(ctx workflow.Context, input *configservice.PutConformancePackInput) *ConfigServicePutConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutConformancePack", input)
	return &ConfigServicePutConformancePackFuture{Future: future}
}

func (a *stub) PutDeliveryChannel(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) (*configservice.PutDeliveryChannelOutput, error) {
	var output configservice.PutDeliveryChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutDeliveryChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDeliveryChannelAsync(ctx workflow.Context, input *configservice.PutDeliveryChannelInput) *ConfigServicePutDeliveryChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutDeliveryChannel", input)
	return &ConfigServicePutDeliveryChannelFuture{Future: future}
}

func (a *stub) PutEvaluations(ctx workflow.Context, input *configservice.PutEvaluationsInput) (*configservice.PutEvaluationsOutput, error) {
	var output configservice.PutEvaluationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutEvaluations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutEvaluationsAsync(ctx workflow.Context, input *configservice.PutEvaluationsInput) *ConfigServicePutEvaluationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutEvaluations", input)
	return &ConfigServicePutEvaluationsFuture{Future: future}
}

func (a *stub) PutOrganizationConfigRule(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) (*configservice.PutOrganizationConfigRuleOutput, error) {
	var output configservice.PutOrganizationConfigRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConfigRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutOrganizationConfigRuleAsync(ctx workflow.Context, input *configservice.PutOrganizationConfigRuleInput) *ConfigServicePutOrganizationConfigRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConfigRule", input)
	return &ConfigServicePutOrganizationConfigRuleFuture{Future: future}
}

func (a *stub) PutOrganizationConformancePack(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) (*configservice.PutOrganizationConformancePackOutput, error) {
	var output configservice.PutOrganizationConformancePackOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConformancePack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutOrganizationConformancePackAsync(ctx workflow.Context, input *configservice.PutOrganizationConformancePackInput) *ConfigServicePutOrganizationConformancePackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutOrganizationConformancePack", input)
	return &ConfigServicePutOrganizationConformancePackFuture{Future: future}
}

func (a *stub) PutRemediationConfigurations(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) (*configservice.PutRemediationConfigurationsOutput, error) {
	var output configservice.PutRemediationConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRemediationConfigurationsAsync(ctx workflow.Context, input *configservice.PutRemediationConfigurationsInput) *ConfigServicePutRemediationConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationConfigurations", input)
	return &ConfigServicePutRemediationConfigurationsFuture{Future: future}
}

func (a *stub) PutRemediationExceptions(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) (*configservice.PutRemediationExceptionsOutput, error) {
	var output configservice.PutRemediationExceptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationExceptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRemediationExceptionsAsync(ctx workflow.Context, input *configservice.PutRemediationExceptionsInput) *ConfigServicePutRemediationExceptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRemediationExceptions", input)
	return &ConfigServicePutRemediationExceptionsFuture{Future: future}
}

func (a *stub) PutResourceConfig(ctx workflow.Context, input *configservice.PutResourceConfigInput) (*configservice.PutResourceConfigOutput, error) {
	var output configservice.PutResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourceConfigAsync(ctx workflow.Context, input *configservice.PutResourceConfigInput) *ConfigServicePutResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutResourceConfig", input)
	return &ConfigServicePutResourceConfigFuture{Future: future}
}

func (a *stub) PutRetentionConfiguration(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) (*configservice.PutRetentionConfigurationOutput, error) {
	var output configservice.PutRetentionConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-PutRetentionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionConfigurationAsync(ctx workflow.Context, input *configservice.PutRetentionConfigurationInput) *ConfigServicePutRetentionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-PutRetentionConfiguration", input)
	return &ConfigServicePutRetentionConfigurationFuture{Future: future}
}

func (a *stub) SelectAggregateResourceConfig(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) (*configservice.SelectAggregateResourceConfigOutput, error) {
	var output configservice.SelectAggregateResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-SelectAggregateResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectAggregateResourceConfigAsync(ctx workflow.Context, input *configservice.SelectAggregateResourceConfigInput) *ConfigServiceSelectAggregateResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-SelectAggregateResourceConfig", input)
	return &ConfigServiceSelectAggregateResourceConfigFuture{Future: future}
}

func (a *stub) SelectResourceConfig(ctx workflow.Context, input *configservice.SelectResourceConfigInput) (*configservice.SelectResourceConfigOutput, error) {
	var output configservice.SelectResourceConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-SelectResourceConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectResourceConfigAsync(ctx workflow.Context, input *configservice.SelectResourceConfigInput) *ConfigServiceSelectResourceConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-SelectResourceConfig", input)
	return &ConfigServiceSelectResourceConfigFuture{Future: future}
}

func (a *stub) StartConfigRulesEvaluation(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) (*configservice.StartConfigRulesEvaluationOutput, error) {
	var output configservice.StartConfigRulesEvaluationOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigRulesEvaluation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartConfigRulesEvaluationAsync(ctx workflow.Context, input *configservice.StartConfigRulesEvaluationInput) *ConfigServiceStartConfigRulesEvaluationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigRulesEvaluation", input)
	return &ConfigServiceStartConfigRulesEvaluationFuture{Future: future}
}

func (a *stub) StartConfigurationRecorder(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) (*configservice.StartConfigurationRecorderOutput, error) {
	var output configservice.StartConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StartConfigurationRecorderInput) *ConfigServiceStartConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartConfigurationRecorder", input)
	return &ConfigServiceStartConfigurationRecorderFuture{Future: future}
}

func (a *stub) StartRemediationExecution(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) (*configservice.StartRemediationExecutionOutput, error) {
	var output configservice.StartRemediationExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StartRemediationExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartRemediationExecutionAsync(ctx workflow.Context, input *configservice.StartRemediationExecutionInput) *ConfigServiceStartRemediationExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StartRemediationExecution", input)
	return &ConfigServiceStartRemediationExecutionFuture{Future: future}
}

func (a *stub) StopConfigurationRecorder(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) (*configservice.StopConfigurationRecorderOutput, error) {
	var output configservice.StopConfigurationRecorderOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-StopConfigurationRecorder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopConfigurationRecorderAsync(ctx workflow.Context, input *configservice.StopConfigurationRecorderInput) *ConfigServiceStopConfigurationRecorderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-StopConfigurationRecorder", input)
	return &ConfigServiceStopConfigurationRecorderFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *configservice.TagResourceInput) (*configservice.TagResourceOutput, error) {
	var output configservice.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *configservice.TagResourceInput) *ConfigServiceTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-TagResource", input)
	return &ConfigServiceTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *configservice.UntagResourceInput) (*configservice.UntagResourceOutput, error) {
	var output configservice.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-configservice-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *configservice.UntagResourceInput) *ConfigServiceUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-configservice-UntagResource", input)
	return &ConfigServiceUntagResourceFuture{Future: future}
}
