// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iamstub

import (
	"github.com/aws/aws-sdk-go/service/iam"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddClientIDToOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddClientIDToOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddRoleToInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddRoleToInstanceProfileFuture) Get(ctx workflow.Context) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddUserToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddUserToGroupFuture) Get(ctx workflow.Context) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachRolePolicyFuture) Get(ctx workflow.Context) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachUserPolicyFuture) Get(ctx workflow.Context) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ChangePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ChangePasswordFuture) Get(ctx workflow.Context) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccessKeyFuture) Get(ctx workflow.Context) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAccountAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAccountAliasFuture) Get(ctx workflow.Context) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceProfileFuture) Get(ctx workflow.Context) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLoginProfileFuture) Get(ctx workflow.Context) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePolicyFuture) Get(ctx workflow.Context) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePolicyVersionFuture) Get(ctx workflow.Context) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRoleFuture) Get(ctx workflow.Context) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceLinkedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeactivateMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeactivateMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessKeyFuture) Get(ctx workflow.Context) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountAliasFuture) Get(ctx workflow.Context) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceProfileFuture) Get(ctx workflow.Context) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLoginProfileFuture) Get(ctx workflow.Context) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePolicyFuture) Get(ctx workflow.Context) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePolicyVersionFuture) Get(ctx workflow.Context) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRoleFuture) Get(ctx workflow.Context) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRolePermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRolePolicyFuture) Get(ctx workflow.Context) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSAMLProviderFuture) Get(ctx workflow.Context) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServerCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceLinkedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceLinkedRoleFuture) Get(ctx workflow.Context) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSigningCertificateFuture) Get(ctx workflow.Context) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserPermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserPolicyFuture) Get(ctx workflow.Context) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualMFADeviceFuture) Get(ctx workflow.Context) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachGroupPolicyFuture) Get(ctx workflow.Context) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachRolePolicyFuture) Get(ctx workflow.Context) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachUserPolicyFuture) Get(ctx workflow.Context) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableMFADeviceFuture) Get(ctx workflow.Context) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateCredentialReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateCredentialReportFuture) Get(ctx workflow.Context) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateOrganizationsAccessReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GenerateServiceLastAccessedDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GenerateServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessKeyLastUsedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessKeyLastUsedFuture) Get(ctx workflow.Context) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountAuthorizationDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountAuthorizationDetailsFuture) Get(ctx workflow.Context) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountSummaryFuture) Get(ctx workflow.Context) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContextKeysForCustomPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContextKeysForCustomPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContextKeysForPrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContextKeysForPrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCredentialReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCredentialReportFuture) Get(ctx workflow.Context) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupFuture) Get(ctx workflow.Context) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupPolicyFuture) Get(ctx workflow.Context) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceProfileFuture) Get(ctx workflow.Context) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoginProfileFuture) Get(ctx workflow.Context) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOrganizationsAccessReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOrganizationsAccessReportFuture) Get(ctx workflow.Context) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPolicyFuture) Get(ctx workflow.Context) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPolicyVersionFuture) Get(ctx workflow.Context) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRoleFuture) Get(ctx workflow.Context) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRolePolicyFuture) Get(ctx workflow.Context) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSAMLProviderFuture) Get(ctx workflow.Context) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServerCertificateFuture) Get(ctx workflow.Context) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceLastAccessedDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceLastAccessedDetailsFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceLastAccessedDetailsWithEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceLastAccessedDetailsWithEntitiesFuture) Get(ctx workflow.Context) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceLinkedRoleDeletionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceLinkedRoleDeletionStatusFuture) Get(ctx workflow.Context) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserFuture) Get(ctx workflow.Context) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUserPolicyFuture) Get(ctx workflow.Context) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccessKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccessKeysFuture) Get(ctx workflow.Context) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountAliasesFuture) Get(ctx workflow.Context) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttachedGroupPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttachedGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttachedRolePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttachedRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttachedUserPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttachedUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEntitiesForPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEntitiesForPolicyFuture) Get(ctx workflow.Context) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupPoliciesFuture) Get(ctx workflow.Context) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsFuture) Get(ctx workflow.Context) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsForUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsForUserFuture) Get(ctx workflow.Context) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInstanceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInstanceProfilesFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInstanceProfilesForRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInstanceProfilesForRoleFuture) Get(ctx workflow.Context) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMFADevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOpenIDConnectProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOpenIDConnectProvidersFuture) Get(ctx workflow.Context) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPoliciesFuture) Get(ctx workflow.Context) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPoliciesGrantingServiceAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPoliciesGrantingServiceAccessFuture) Get(ctx workflow.Context) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPolicyVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPolicyVersionsFuture) Get(ctx workflow.Context) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRolePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRolePoliciesFuture) Get(ctx workflow.Context) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoleTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoleTagsFuture) Get(ctx workflow.Context) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRolesFuture) Get(ctx workflow.Context) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSAMLProvidersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSAMLProvidersFuture) Get(ctx workflow.Context) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSSHPublicKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSSHPublicKeysFuture) Get(ctx workflow.Context) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServerCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServerCertificatesFuture) Get(ctx workflow.Context) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServiceSpecificCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServiceSpecificCredentialsFuture) Get(ctx workflow.Context) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSigningCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSigningCertificatesFuture) Get(ctx workflow.Context) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserPoliciesFuture) Get(ctx workflow.Context) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserTagsFuture) Get(ctx workflow.Context) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualMFADevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualMFADevicesFuture) Get(ctx workflow.Context) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutGroupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutGroupPolicyFuture) Get(ctx workflow.Context) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRolePermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRolePermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRolePolicyFuture) Get(ctx workflow.Context) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutUserPermissionsBoundaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutUserPermissionsBoundaryFuture) Get(ctx workflow.Context) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutUserPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutUserPolicyFuture) Get(ctx workflow.Context) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveClientIDFromOpenIDConnectProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveClientIDFromOpenIDConnectProviderFuture) Get(ctx workflow.Context) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveRoleFromInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveRoleFromInstanceProfileFuture) Get(ctx workflow.Context) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveUserFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveUserFromGroupFuture) Get(ctx workflow.Context) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResyncMFADeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResyncMFADeviceFuture) Get(ctx workflow.Context) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetDefaultPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetDefaultPolicyVersionFuture) Get(ctx workflow.Context) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetSecurityTokenServicePreferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetSecurityTokenServicePreferencesFuture) Get(ctx workflow.Context) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SimulateCustomPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SimulateCustomPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SimulatePrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SimulatePrincipalPolicyFuture) Get(ctx workflow.Context) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagRoleFuture) Get(ctx workflow.Context) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagUserFuture) Get(ctx workflow.Context) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagRoleFuture) Get(ctx workflow.Context) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagUserFuture) Get(ctx workflow.Context) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccessKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccessKeyFuture) Get(ctx workflow.Context) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAccountPasswordPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAccountPasswordPolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssumeRolePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssumeRolePolicyFuture) Get(ctx workflow.Context) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupFuture) Get(ctx workflow.Context) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLoginProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLoginProfileFuture) Get(ctx workflow.Context) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOpenIDConnectProviderThumbprintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOpenIDConnectProviderThumbprintFuture) Get(ctx workflow.Context) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoleFuture) Get(ctx workflow.Context) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoleDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoleDescriptionFuture) Get(ctx workflow.Context) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSAMLProviderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSAMLProviderFuture) Get(ctx workflow.Context) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServerCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceSpecificCredentialFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceSpecificCredentialFuture) Get(ctx workflow.Context) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserFuture) Get(ctx workflow.Context) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadSSHPublicKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadSSHPublicKeyFuture) Get(ctx workflow.Context) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadServerCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadServerCertificateFuture) Get(ctx workflow.Context) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UploadSigningCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UploadSigningCertificateFuture) Get(ctx workflow.Context) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddClientIDToOpenIDConnectProvider(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	var output iam.AddClientIDToOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AddClientIDToOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddClientIDToOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.AddClientIDToOpenIDConnectProviderInput) *AddClientIDToOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AddClientIDToOpenIDConnectProvider", input)
	return &AddClientIDToOpenIDConnectProviderFuture{Future: future}
}

func (a *stub) AddRoleToInstanceProfile(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	var output iam.AddRoleToInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AddRoleToInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRoleToInstanceProfileAsync(ctx workflow.Context, input *iam.AddRoleToInstanceProfileInput) *AddRoleToInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AddRoleToInstanceProfile", input)
	return &AddRoleToInstanceProfileFuture{Future: future}
}

func (a *stub) AddUserToGroup(ctx workflow.Context, input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	var output iam.AddUserToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AddUserToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddUserToGroupAsync(ctx workflow.Context, input *iam.AddUserToGroupInput) *AddUserToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AddUserToGroup", input)
	return &AddUserToGroupFuture{Future: future}
}

func (a *stub) AttachGroupPolicy(ctx workflow.Context, input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	var output iam.AttachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AttachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachGroupPolicyAsync(ctx workflow.Context, input *iam.AttachGroupPolicyInput) *AttachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AttachGroupPolicy", input)
	return &AttachGroupPolicyFuture{Future: future}
}

func (a *stub) AttachRolePolicy(ctx workflow.Context, input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	var output iam.AttachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AttachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachRolePolicyAsync(ctx workflow.Context, input *iam.AttachRolePolicyInput) *AttachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AttachRolePolicy", input)
	return &AttachRolePolicyFuture{Future: future}
}

func (a *stub) AttachUserPolicy(ctx workflow.Context, input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	var output iam.AttachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-AttachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachUserPolicyAsync(ctx workflow.Context, input *iam.AttachUserPolicyInput) *AttachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-AttachUserPolicy", input)
	return &AttachUserPolicyFuture{Future: future}
}

func (a *stub) ChangePassword(ctx workflow.Context, input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	var output iam.ChangePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ChangePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ChangePasswordAsync(ctx workflow.Context, input *iam.ChangePasswordInput) *ChangePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ChangePassword", input)
	return &ChangePasswordFuture{Future: future}
}

func (a *stub) CreateAccessKey(ctx workflow.Context, input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	var output iam.CreateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccessKeyAsync(ctx workflow.Context, input *iam.CreateAccessKeyInput) *CreateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateAccessKey", input)
	return &CreateAccessKeyFuture{Future: future}
}

func (a *stub) CreateAccountAlias(ctx workflow.Context, input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	var output iam.CreateAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAccountAliasAsync(ctx workflow.Context, input *iam.CreateAccountAliasInput) *CreateAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateAccountAlias", input)
	return &CreateAccountAliasFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	var output iam.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *iam.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateInstanceProfile(ctx workflow.Context, input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	var output iam.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceProfileAsync(ctx workflow.Context, input *iam.CreateInstanceProfileInput) *CreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateInstanceProfile", input)
	return &CreateInstanceProfileFuture{Future: future}
}

func (a *stub) CreateLoginProfile(ctx workflow.Context, input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	var output iam.CreateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoginProfileAsync(ctx workflow.Context, input *iam.CreateLoginProfileInput) *CreateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateLoginProfile", input)
	return &CreateLoginProfileFuture{Future: future}
}

func (a *stub) CreateOpenIDConnectProvider(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	var output iam.CreateOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.CreateOpenIDConnectProviderInput) *CreateOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateOpenIDConnectProvider", input)
	return &CreateOpenIDConnectProviderFuture{Future: future}
}

func (a *stub) CreatePolicy(ctx workflow.Context, input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	var output iam.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyAsync(ctx workflow.Context, input *iam.CreatePolicyInput) *CreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreatePolicy", input)
	return &CreatePolicyFuture{Future: future}
}

func (a *stub) CreatePolicyVersion(ctx workflow.Context, input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	var output iam.CreatePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreatePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyVersionAsync(ctx workflow.Context, input *iam.CreatePolicyVersionInput) *CreatePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreatePolicyVersion", input)
	return &CreatePolicyVersionFuture{Future: future}
}

func (a *stub) CreateRole(ctx workflow.Context, input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	var output iam.CreateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoleAsync(ctx workflow.Context, input *iam.CreateRoleInput) *CreateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateRole", input)
	return &CreateRoleFuture{Future: future}
}

func (a *stub) CreateSAMLProvider(ctx workflow.Context, input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	var output iam.CreateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSAMLProviderAsync(ctx workflow.Context, input *iam.CreateSAMLProviderInput) *CreateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateSAMLProvider", input)
	return &CreateSAMLProviderFuture{Future: future}
}

func (a *stub) CreateServiceLinkedRole(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	var output iam.CreateServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceLinkedRoleAsync(ctx workflow.Context, input *iam.CreateServiceLinkedRoleInput) *CreateServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateServiceLinkedRole", input)
	return &CreateServiceLinkedRoleFuture{Future: future}
}

func (a *stub) CreateServiceSpecificCredential(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	var output iam.CreateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.CreateServiceSpecificCredentialInput) *CreateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateServiceSpecificCredential", input)
	return &CreateServiceSpecificCredentialFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	var output iam.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *iam.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) CreateVirtualMFADevice(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	var output iam.CreateVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-CreateVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualMFADeviceAsync(ctx workflow.Context, input *iam.CreateVirtualMFADeviceInput) *CreateVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-CreateVirtualMFADevice", input)
	return &CreateVirtualMFADeviceFuture{Future: future}
}

func (a *stub) DeactivateMFADevice(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	var output iam.DeactivateMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeactivateMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeactivateMFADeviceAsync(ctx workflow.Context, input *iam.DeactivateMFADeviceInput) *DeactivateMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeactivateMFADevice", input)
	return &DeactivateMFADeviceFuture{Future: future}
}

func (a *stub) DeleteAccessKey(ctx workflow.Context, input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	var output iam.DeleteAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessKeyAsync(ctx workflow.Context, input *iam.DeleteAccessKeyInput) *DeleteAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccessKey", input)
	return &DeleteAccessKeyFuture{Future: future}
}

func (a *stub) DeleteAccountAlias(ctx workflow.Context, input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	var output iam.DeleteAccountAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccountAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountAliasAsync(ctx workflow.Context, input *iam.DeleteAccountAliasInput) *DeleteAccountAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccountAlias", input)
	return &DeleteAccountAliasFuture{Future: future}
}

func (a *stub) DeleteAccountPasswordPolicy(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	var output iam.DeleteAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.DeleteAccountPasswordPolicyInput) *DeleteAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteAccountPasswordPolicy", input)
	return &DeleteAccountPasswordPolicyFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	var output iam.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *iam.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteGroupPolicy(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	var output iam.DeleteGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupPolicyAsync(ctx workflow.Context, input *iam.DeleteGroupPolicyInput) *DeleteGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteGroupPolicy", input)
	return &DeleteGroupPolicyFuture{Future: future}
}

func (a *stub) DeleteInstanceProfile(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	var output iam.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceProfileAsync(ctx workflow.Context, input *iam.DeleteInstanceProfileInput) *DeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteInstanceProfile", input)
	return &DeleteInstanceProfileFuture{Future: future}
}

func (a *stub) DeleteLoginProfile(ctx workflow.Context, input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	var output iam.DeleteLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoginProfileAsync(ctx workflow.Context, input *iam.DeleteLoginProfileInput) *DeleteLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteLoginProfile", input)
	return &DeleteLoginProfileFuture{Future: future}
}

func (a *stub) DeleteOpenIDConnectProvider(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	var output iam.DeleteOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.DeleteOpenIDConnectProviderInput) *DeleteOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteOpenIDConnectProvider", input)
	return &DeleteOpenIDConnectProviderFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	var output iam.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *iam.DeletePolicyInput) *DeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeletePolicy", input)
	return &DeletePolicyFuture{Future: future}
}

func (a *stub) DeletePolicyVersion(ctx workflow.Context, input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	var output iam.DeletePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeletePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyVersionAsync(ctx workflow.Context, input *iam.DeletePolicyVersionInput) *DeletePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeletePolicyVersion", input)
	return &DeletePolicyVersionFuture{Future: future}
}

func (a *stub) DeleteRole(ctx workflow.Context, input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	var output iam.DeleteRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoleAsync(ctx workflow.Context, input *iam.DeleteRoleInput) *DeleteRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRole", input)
	return &DeleteRoleFuture{Future: future}
}

func (a *stub) DeleteRolePermissionsBoundary(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	var output iam.DeleteRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteRolePermissionsBoundaryInput) *DeleteRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRolePermissionsBoundary", input)
	return &DeleteRolePermissionsBoundaryFuture{Future: future}
}

func (a *stub) DeleteRolePolicy(ctx workflow.Context, input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	var output iam.DeleteRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRolePolicyAsync(ctx workflow.Context, input *iam.DeleteRolePolicyInput) *DeleteRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteRolePolicy", input)
	return &DeleteRolePolicyFuture{Future: future}
}

func (a *stub) DeleteSAMLProvider(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	var output iam.DeleteSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSAMLProviderAsync(ctx workflow.Context, input *iam.DeleteSAMLProviderInput) *DeleteSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSAMLProvider", input)
	return &DeleteSAMLProviderFuture{Future: future}
}

func (a *stub) DeleteSSHPublicKey(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	var output iam.DeleteSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSSHPublicKeyAsync(ctx workflow.Context, input *iam.DeleteSSHPublicKeyInput) *DeleteSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSSHPublicKey", input)
	return &DeleteSSHPublicKeyFuture{Future: future}
}

func (a *stub) DeleteServerCertificate(ctx workflow.Context, input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	var output iam.DeleteServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServerCertificateAsync(ctx workflow.Context, input *iam.DeleteServerCertificateInput) *DeleteServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServerCertificate", input)
	return &DeleteServerCertificateFuture{Future: future}
}

func (a *stub) DeleteServiceLinkedRole(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	var output iam.DeleteServiceLinkedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServiceLinkedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceLinkedRoleAsync(ctx workflow.Context, input *iam.DeleteServiceLinkedRoleInput) *DeleteServiceLinkedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServiceLinkedRole", input)
	return &DeleteServiceLinkedRoleFuture{Future: future}
}

func (a *stub) DeleteServiceSpecificCredential(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	var output iam.DeleteServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.DeleteServiceSpecificCredentialInput) *DeleteServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteServiceSpecificCredential", input)
	return &DeleteServiceSpecificCredentialFuture{Future: future}
}

func (a *stub) DeleteSigningCertificate(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	var output iam.DeleteSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSigningCertificateAsync(ctx workflow.Context, input *iam.DeleteSigningCertificateInput) *DeleteSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteSigningCertificate", input)
	return &DeleteSigningCertificateFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	var output iam.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *iam.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DeleteUserPermissionsBoundary(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	var output iam.DeleteUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.DeleteUserPermissionsBoundaryInput) *DeleteUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUserPermissionsBoundary", input)
	return &DeleteUserPermissionsBoundaryFuture{Future: future}
}

func (a *stub) DeleteUserPolicy(ctx workflow.Context, input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	var output iam.DeleteUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserPolicyAsync(ctx workflow.Context, input *iam.DeleteUserPolicyInput) *DeleteUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteUserPolicy", input)
	return &DeleteUserPolicyFuture{Future: future}
}

func (a *stub) DeleteVirtualMFADevice(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	var output iam.DeleteVirtualMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DeleteVirtualMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualMFADeviceAsync(ctx workflow.Context, input *iam.DeleteVirtualMFADeviceInput) *DeleteVirtualMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DeleteVirtualMFADevice", input)
	return &DeleteVirtualMFADeviceFuture{Future: future}
}

func (a *stub) DetachGroupPolicy(ctx workflow.Context, input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	var output iam.DetachGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DetachGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachGroupPolicyAsync(ctx workflow.Context, input *iam.DetachGroupPolicyInput) *DetachGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DetachGroupPolicy", input)
	return &DetachGroupPolicyFuture{Future: future}
}

func (a *stub) DetachRolePolicy(ctx workflow.Context, input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	var output iam.DetachRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DetachRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachRolePolicyAsync(ctx workflow.Context, input *iam.DetachRolePolicyInput) *DetachRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DetachRolePolicy", input)
	return &DetachRolePolicyFuture{Future: future}
}

func (a *stub) DetachUserPolicy(ctx workflow.Context, input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	var output iam.DetachUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-DetachUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachUserPolicyAsync(ctx workflow.Context, input *iam.DetachUserPolicyInput) *DetachUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-DetachUserPolicy", input)
	return &DetachUserPolicyFuture{Future: future}
}

func (a *stub) EnableMFADevice(ctx workflow.Context, input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	var output iam.EnableMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-EnableMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableMFADeviceAsync(ctx workflow.Context, input *iam.EnableMFADeviceInput) *EnableMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-EnableMFADevice", input)
	return &EnableMFADeviceFuture{Future: future}
}

func (a *stub) GenerateCredentialReport(ctx workflow.Context, input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	var output iam.GenerateCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GenerateCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateCredentialReportAsync(ctx workflow.Context, input *iam.GenerateCredentialReportInput) *GenerateCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GenerateCredentialReport", input)
	return &GenerateCredentialReportFuture{Future: future}
}

func (a *stub) GenerateOrganizationsAccessReport(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	var output iam.GenerateOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GenerateOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GenerateOrganizationsAccessReportInput) *GenerateOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GenerateOrganizationsAccessReport", input)
	return &GenerateOrganizationsAccessReportFuture{Future: future}
}

func (a *stub) GenerateServiceLastAccessedDetails(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	var output iam.GenerateServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GenerateServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GenerateServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GenerateServiceLastAccessedDetailsInput) *GenerateServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GenerateServiceLastAccessedDetails", input)
	return &GenerateServiceLastAccessedDetailsFuture{Future: future}
}

func (a *stub) GetAccessKeyLastUsed(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	var output iam.GetAccessKeyLastUsedOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetAccessKeyLastUsed", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessKeyLastUsedAsync(ctx workflow.Context, input *iam.GetAccessKeyLastUsedInput) *GetAccessKeyLastUsedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetAccessKeyLastUsed", input)
	return &GetAccessKeyLastUsedFuture{Future: future}
}

func (a *stub) GetAccountAuthorizationDetails(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	var output iam.GetAccountAuthorizationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountAuthorizationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountAuthorizationDetailsAsync(ctx workflow.Context, input *iam.GetAccountAuthorizationDetailsInput) *GetAccountAuthorizationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountAuthorizationDetails", input)
	return &GetAccountAuthorizationDetailsFuture{Future: future}
}

func (a *stub) GetAccountPasswordPolicy(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	var output iam.GetAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.GetAccountPasswordPolicyInput) *GetAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountPasswordPolicy", input)
	return &GetAccountPasswordPolicyFuture{Future: future}
}

func (a *stub) GetAccountSummary(ctx workflow.Context, input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	var output iam.GetAccountSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSummaryAsync(ctx workflow.Context, input *iam.GetAccountSummaryInput) *GetAccountSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetAccountSummary", input)
	return &GetAccountSummaryFuture{Future: future}
}

func (a *stub) GetContextKeysForCustomPolicy(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetContextKeysForCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContextKeysForCustomPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForCustomPolicyInput) *GetContextKeysForCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetContextKeysForCustomPolicy", input)
	return &GetContextKeysForCustomPolicyFuture{Future: future}
}

func (a *stub) GetContextKeysForPrincipalPolicy(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	var output iam.GetContextKeysForPolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetContextKeysForPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContextKeysForPrincipalPolicyAsync(ctx workflow.Context, input *iam.GetContextKeysForPrincipalPolicyInput) *GetContextKeysForPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetContextKeysForPrincipalPolicy", input)
	return &GetContextKeysForPrincipalPolicyFuture{Future: future}
}

func (a *stub) GetCredentialReport(ctx workflow.Context, input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	var output iam.GetCredentialReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetCredentialReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCredentialReportAsync(ctx workflow.Context, input *iam.GetCredentialReportInput) *GetCredentialReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetCredentialReport", input)
	return &GetCredentialReportFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	var output iam.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *iam.GetGroupInput) *GetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetGroup", input)
	return &GetGroupFuture{Future: future}
}

func (a *stub) GetGroupPolicy(ctx workflow.Context, input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	var output iam.GetGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupPolicyAsync(ctx workflow.Context, input *iam.GetGroupPolicyInput) *GetGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetGroupPolicy", input)
	return &GetGroupPolicyFuture{Future: future}
}

func (a *stub) GetInstanceProfile(ctx workflow.Context, input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	var output iam.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceProfileAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *GetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetInstanceProfile", input)
	return &GetInstanceProfileFuture{Future: future}
}

func (a *stub) GetLoginProfile(ctx workflow.Context, input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	var output iam.GetLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoginProfileAsync(ctx workflow.Context, input *iam.GetLoginProfileInput) *GetLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetLoginProfile", input)
	return &GetLoginProfileFuture{Future: future}
}

func (a *stub) GetOpenIDConnectProvider(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	var output iam.GetOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.GetOpenIDConnectProviderInput) *GetOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetOpenIDConnectProvider", input)
	return &GetOpenIDConnectProviderFuture{Future: future}
}

func (a *stub) GetOrganizationsAccessReport(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	var output iam.GetOrganizationsAccessReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetOrganizationsAccessReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationsAccessReportAsync(ctx workflow.Context, input *iam.GetOrganizationsAccessReportInput) *GetOrganizationsAccessReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetOrganizationsAccessReport", input)
	return &GetOrganizationsAccessReportFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	var output iam.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *iam.GetPolicyInput) *GetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetPolicy", input)
	return &GetPolicyFuture{Future: future}
}

func (a *stub) GetPolicyVersion(ctx workflow.Context, input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	var output iam.GetPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyVersionAsync(ctx workflow.Context, input *iam.GetPolicyVersionInput) *GetPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetPolicyVersion", input)
	return &GetPolicyVersionFuture{Future: future}
}

func (a *stub) GetRole(ctx workflow.Context, input *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	var output iam.GetRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoleAsync(ctx workflow.Context, input *iam.GetRoleInput) *GetRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetRole", input)
	return &GetRoleFuture{Future: future}
}

func (a *stub) GetRolePolicy(ctx workflow.Context, input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	var output iam.GetRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRolePolicyAsync(ctx workflow.Context, input *iam.GetRolePolicyInput) *GetRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetRolePolicy", input)
	return &GetRolePolicyFuture{Future: future}
}

func (a *stub) GetSAMLProvider(ctx workflow.Context, input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	var output iam.GetSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSAMLProviderAsync(ctx workflow.Context, input *iam.GetSAMLProviderInput) *GetSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetSAMLProvider", input)
	return &GetSAMLProviderFuture{Future: future}
}

func (a *stub) GetSSHPublicKey(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	var output iam.GetSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSSHPublicKeyAsync(ctx workflow.Context, input *iam.GetSSHPublicKeyInput) *GetSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetSSHPublicKey", input)
	return &GetSSHPublicKeyFuture{Future: future}
}

func (a *stub) GetServerCertificate(ctx workflow.Context, input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	var output iam.GetServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServerCertificateAsync(ctx workflow.Context, input *iam.GetServerCertificateInput) *GetServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetServerCertificate", input)
	return &GetServerCertificateFuture{Future: future}
}

func (a *stub) GetServiceLastAccessedDetails(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	var output iam.GetServiceLastAccessedDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLastAccessedDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceLastAccessedDetailsAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsInput) *GetServiceLastAccessedDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLastAccessedDetails", input)
	return &GetServiceLastAccessedDetailsFuture{Future: future}
}

func (a *stub) GetServiceLastAccessedDetailsWithEntities(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	var output iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLastAccessedDetailsWithEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceLastAccessedDetailsWithEntitiesAsync(ctx workflow.Context, input *iam.GetServiceLastAccessedDetailsWithEntitiesInput) *GetServiceLastAccessedDetailsWithEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLastAccessedDetailsWithEntities", input)
	return &GetServiceLastAccessedDetailsWithEntitiesFuture{Future: future}
}

func (a *stub) GetServiceLinkedRoleDeletionStatus(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	var output iam.GetServiceLinkedRoleDeletionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLinkedRoleDeletionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceLinkedRoleDeletionStatusAsync(ctx workflow.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput) *GetServiceLinkedRoleDeletionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetServiceLinkedRoleDeletionStatus", input)
	return &GetServiceLinkedRoleDeletionStatusFuture{Future: future}
}

func (a *stub) GetUser(ctx workflow.Context, input *iam.GetUserInput) (*iam.GetUserOutput, error) {
	var output iam.GetUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserAsync(ctx workflow.Context, input *iam.GetUserInput) *GetUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetUser", input)
	return &GetUserFuture{Future: future}
}

func (a *stub) GetUserPolicy(ctx workflow.Context, input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	var output iam.GetUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-GetUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUserPolicyAsync(ctx workflow.Context, input *iam.GetUserPolicyInput) *GetUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-GetUserPolicy", input)
	return &GetUserPolicyFuture{Future: future}
}

func (a *stub) ListAccessKeys(ctx workflow.Context, input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	var output iam.ListAccessKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListAccessKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessKeysAsync(ctx workflow.Context, input *iam.ListAccessKeysInput) *ListAccessKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListAccessKeys", input)
	return &ListAccessKeysFuture{Future: future}
}

func (a *stub) ListAccountAliases(ctx workflow.Context, input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	var output iam.ListAccountAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListAccountAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountAliasesAsync(ctx workflow.Context, input *iam.ListAccountAliasesInput) *ListAccountAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListAccountAliases", input)
	return &ListAccountAliasesFuture{Future: future}
}

func (a *stub) ListAttachedGroupPolicies(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	var output iam.ListAttachedGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedGroupPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedGroupPoliciesInput) *ListAttachedGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedGroupPolicies", input)
	return &ListAttachedGroupPoliciesFuture{Future: future}
}

func (a *stub) ListAttachedRolePolicies(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	var output iam.ListAttachedRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedRolePoliciesAsync(ctx workflow.Context, input *iam.ListAttachedRolePoliciesInput) *ListAttachedRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedRolePolicies", input)
	return &ListAttachedRolePoliciesFuture{Future: future}
}

func (a *stub) ListAttachedUserPolicies(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	var output iam.ListAttachedUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedUserPoliciesAsync(ctx workflow.Context, input *iam.ListAttachedUserPoliciesInput) *ListAttachedUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListAttachedUserPolicies", input)
	return &ListAttachedUserPoliciesFuture{Future: future}
}

func (a *stub) ListEntitiesForPolicy(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	var output iam.ListEntitiesForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListEntitiesForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntitiesForPolicyAsync(ctx workflow.Context, input *iam.ListEntitiesForPolicyInput) *ListEntitiesForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListEntitiesForPolicy", input)
	return &ListEntitiesForPolicyFuture{Future: future}
}

func (a *stub) ListGroupPolicies(ctx workflow.Context, input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	var output iam.ListGroupPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListGroupPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupPoliciesAsync(ctx workflow.Context, input *iam.ListGroupPoliciesInput) *ListGroupPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListGroupPolicies", input)
	return &ListGroupPoliciesFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	var output iam.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *iam.ListGroupsInput) *ListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListGroups", input)
	return &ListGroupsFuture{Future: future}
}

func (a *stub) ListGroupsForUser(ctx workflow.Context, input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	var output iam.ListGroupsForUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListGroupsForUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsForUserAsync(ctx workflow.Context, input *iam.ListGroupsForUserInput) *ListGroupsForUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListGroupsForUser", input)
	return &ListGroupsForUserFuture{Future: future}
}

func (a *stub) ListInstanceProfiles(ctx workflow.Context, input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	var output iam.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceProfilesAsync(ctx workflow.Context, input *iam.ListInstanceProfilesInput) *ListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListInstanceProfiles", input)
	return &ListInstanceProfilesFuture{Future: future}
}

func (a *stub) ListInstanceProfilesForRole(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	var output iam.ListInstanceProfilesForRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListInstanceProfilesForRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceProfilesForRoleAsync(ctx workflow.Context, input *iam.ListInstanceProfilesForRoleInput) *ListInstanceProfilesForRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListInstanceProfilesForRole", input)
	return &ListInstanceProfilesForRoleFuture{Future: future}
}

func (a *stub) ListMFADevices(ctx workflow.Context, input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	var output iam.ListMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMFADevicesAsync(ctx workflow.Context, input *iam.ListMFADevicesInput) *ListMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListMFADevices", input)
	return &ListMFADevicesFuture{Future: future}
}

func (a *stub) ListOpenIDConnectProviders(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	var output iam.ListOpenIDConnectProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListOpenIDConnectProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOpenIDConnectProvidersAsync(ctx workflow.Context, input *iam.ListOpenIDConnectProvidersInput) *ListOpenIDConnectProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListOpenIDConnectProviders", input)
	return &ListOpenIDConnectProvidersFuture{Future: future}
}

func (a *stub) ListPolicies(ctx workflow.Context, input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	var output iam.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesAsync(ctx workflow.Context, input *iam.ListPoliciesInput) *ListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListPolicies", input)
	return &ListPoliciesFuture{Future: future}
}

func (a *stub) ListPoliciesGrantingServiceAccess(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	var output iam.ListPoliciesGrantingServiceAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListPoliciesGrantingServiceAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesGrantingServiceAccessAsync(ctx workflow.Context, input *iam.ListPoliciesGrantingServiceAccessInput) *ListPoliciesGrantingServiceAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListPoliciesGrantingServiceAccess", input)
	return &ListPoliciesGrantingServiceAccessFuture{Future: future}
}

func (a *stub) ListPolicyVersions(ctx workflow.Context, input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	var output iam.ListPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPolicyVersionsAsync(ctx workflow.Context, input *iam.ListPolicyVersionsInput) *ListPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListPolicyVersions", input)
	return &ListPolicyVersionsFuture{Future: future}
}

func (a *stub) ListRolePolicies(ctx workflow.Context, input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	var output iam.ListRolePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListRolePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRolePoliciesAsync(ctx workflow.Context, input *iam.ListRolePoliciesInput) *ListRolePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListRolePolicies", input)
	return &ListRolePoliciesFuture{Future: future}
}

func (a *stub) ListRoleTags(ctx workflow.Context, input *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	var output iam.ListRoleTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListRoleTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoleTagsAsync(ctx workflow.Context, input *iam.ListRoleTagsInput) *ListRoleTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListRoleTags", input)
	return &ListRoleTagsFuture{Future: future}
}

func (a *stub) ListRoles(ctx workflow.Context, input *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	var output iam.ListRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRolesAsync(ctx workflow.Context, input *iam.ListRolesInput) *ListRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListRoles", input)
	return &ListRolesFuture{Future: future}
}

func (a *stub) ListSAMLProviders(ctx workflow.Context, input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	var output iam.ListSAMLProvidersOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListSAMLProviders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSAMLProvidersAsync(ctx workflow.Context, input *iam.ListSAMLProvidersInput) *ListSAMLProvidersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListSAMLProviders", input)
	return &ListSAMLProvidersFuture{Future: future}
}

func (a *stub) ListSSHPublicKeys(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	var output iam.ListSSHPublicKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListSSHPublicKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSSHPublicKeysAsync(ctx workflow.Context, input *iam.ListSSHPublicKeysInput) *ListSSHPublicKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListSSHPublicKeys", input)
	return &ListSSHPublicKeysFuture{Future: future}
}

func (a *stub) ListServerCertificates(ctx workflow.Context, input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	var output iam.ListServerCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListServerCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServerCertificatesAsync(ctx workflow.Context, input *iam.ListServerCertificatesInput) *ListServerCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListServerCertificates", input)
	return &ListServerCertificatesFuture{Future: future}
}

func (a *stub) ListServiceSpecificCredentials(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	var output iam.ListServiceSpecificCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListServiceSpecificCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceSpecificCredentialsAsync(ctx workflow.Context, input *iam.ListServiceSpecificCredentialsInput) *ListServiceSpecificCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListServiceSpecificCredentials", input)
	return &ListServiceSpecificCredentialsFuture{Future: future}
}

func (a *stub) ListSigningCertificates(ctx workflow.Context, input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	var output iam.ListSigningCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListSigningCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSigningCertificatesAsync(ctx workflow.Context, input *iam.ListSigningCertificatesInput) *ListSigningCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListSigningCertificates", input)
	return &ListSigningCertificatesFuture{Future: future}
}

func (a *stub) ListUserPolicies(ctx workflow.Context, input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	var output iam.ListUserPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListUserPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserPoliciesAsync(ctx workflow.Context, input *iam.ListUserPoliciesInput) *ListUserPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListUserPolicies", input)
	return &ListUserPoliciesFuture{Future: future}
}

func (a *stub) ListUserTags(ctx workflow.Context, input *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	var output iam.ListUserTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListUserTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserTagsAsync(ctx workflow.Context, input *iam.ListUserTagsInput) *ListUserTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListUserTags", input)
	return &ListUserTagsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	var output iam.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *iam.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) ListVirtualMFADevices(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	var output iam.ListVirtualMFADevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ListVirtualMFADevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualMFADevicesAsync(ctx workflow.Context, input *iam.ListVirtualMFADevicesInput) *ListVirtualMFADevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ListVirtualMFADevices", input)
	return &ListVirtualMFADevicesFuture{Future: future}
}

func (a *stub) PutGroupPolicy(ctx workflow.Context, input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	var output iam.PutGroupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-PutGroupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutGroupPolicyAsync(ctx workflow.Context, input *iam.PutGroupPolicyInput) *PutGroupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-PutGroupPolicy", input)
	return &PutGroupPolicyFuture{Future: future}
}

func (a *stub) PutRolePermissionsBoundary(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	var output iam.PutRolePermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-PutRolePermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRolePermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutRolePermissionsBoundaryInput) *PutRolePermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-PutRolePermissionsBoundary", input)
	return &PutRolePermissionsBoundaryFuture{Future: future}
}

func (a *stub) PutRolePolicy(ctx workflow.Context, input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	var output iam.PutRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-PutRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRolePolicyAsync(ctx workflow.Context, input *iam.PutRolePolicyInput) *PutRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-PutRolePolicy", input)
	return &PutRolePolicyFuture{Future: future}
}

func (a *stub) PutUserPermissionsBoundary(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	var output iam.PutUserPermissionsBoundaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-PutUserPermissionsBoundary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutUserPermissionsBoundaryAsync(ctx workflow.Context, input *iam.PutUserPermissionsBoundaryInput) *PutUserPermissionsBoundaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-PutUserPermissionsBoundary", input)
	return &PutUserPermissionsBoundaryFuture{Future: future}
}

func (a *stub) PutUserPolicy(ctx workflow.Context, input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	var output iam.PutUserPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-PutUserPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutUserPolicyAsync(ctx workflow.Context, input *iam.PutUserPolicyInput) *PutUserPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-PutUserPolicy", input)
	return &PutUserPolicyFuture{Future: future}
}

func (a *stub) RemoveClientIDFromOpenIDConnectProvider(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	var output iam.RemoveClientIDFromOpenIDConnectProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-RemoveClientIDFromOpenIDConnectProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveClientIDFromOpenIDConnectProviderAsync(ctx workflow.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput) *RemoveClientIDFromOpenIDConnectProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-RemoveClientIDFromOpenIDConnectProvider", input)
	return &RemoveClientIDFromOpenIDConnectProviderFuture{Future: future}
}

func (a *stub) RemoveRoleFromInstanceProfile(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	var output iam.RemoveRoleFromInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-RemoveRoleFromInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveRoleFromInstanceProfileAsync(ctx workflow.Context, input *iam.RemoveRoleFromInstanceProfileInput) *RemoveRoleFromInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-RemoveRoleFromInstanceProfile", input)
	return &RemoveRoleFromInstanceProfileFuture{Future: future}
}

func (a *stub) RemoveUserFromGroup(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	var output iam.RemoveUserFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-RemoveUserFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveUserFromGroupAsync(ctx workflow.Context, input *iam.RemoveUserFromGroupInput) *RemoveUserFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-RemoveUserFromGroup", input)
	return &RemoveUserFromGroupFuture{Future: future}
}

func (a *stub) ResetServiceSpecificCredential(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	var output iam.ResetServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ResetServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.ResetServiceSpecificCredentialInput) *ResetServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ResetServiceSpecificCredential", input)
	return &ResetServiceSpecificCredentialFuture{Future: future}
}

func (a *stub) ResyncMFADevice(ctx workflow.Context, input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	var output iam.ResyncMFADeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-ResyncMFADevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResyncMFADeviceAsync(ctx workflow.Context, input *iam.ResyncMFADeviceInput) *ResyncMFADeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-ResyncMFADevice", input)
	return &ResyncMFADeviceFuture{Future: future}
}

func (a *stub) SetDefaultPolicyVersion(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	var output iam.SetDefaultPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-SetDefaultPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iam.SetDefaultPolicyVersionInput) *SetDefaultPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-SetDefaultPolicyVersion", input)
	return &SetDefaultPolicyVersionFuture{Future: future}
}

func (a *stub) SetSecurityTokenServicePreferences(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	var output iam.SetSecurityTokenServicePreferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-SetSecurityTokenServicePreferences", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetSecurityTokenServicePreferencesAsync(ctx workflow.Context, input *iam.SetSecurityTokenServicePreferencesInput) *SetSecurityTokenServicePreferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-SetSecurityTokenServicePreferences", input)
	return &SetSecurityTokenServicePreferencesFuture{Future: future}
}

func (a *stub) SimulateCustomPolicy(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws-iam-SimulateCustomPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SimulateCustomPolicyAsync(ctx workflow.Context, input *iam.SimulateCustomPolicyInput) *SimulateCustomPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-SimulateCustomPolicy", input)
	return &SimulateCustomPolicyFuture{Future: future}
}

func (a *stub) SimulatePrincipalPolicy(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	var output iam.SimulatePolicyResponse
	err := workflow.ExecuteActivity(ctx, "aws-iam-SimulatePrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SimulatePrincipalPolicyAsync(ctx workflow.Context, input *iam.SimulatePrincipalPolicyInput) *SimulatePrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-SimulatePrincipalPolicy", input)
	return &SimulatePrincipalPolicyFuture{Future: future}
}

func (a *stub) TagRole(ctx workflow.Context, input *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	var output iam.TagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-TagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagRoleAsync(ctx workflow.Context, input *iam.TagRoleInput) *TagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-TagRole", input)
	return &TagRoleFuture{Future: future}
}

func (a *stub) TagUser(ctx workflow.Context, input *iam.TagUserInput) (*iam.TagUserOutput, error) {
	var output iam.TagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-TagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagUserAsync(ctx workflow.Context, input *iam.TagUserInput) *TagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-TagUser", input)
	return &TagUserFuture{Future: future}
}

func (a *stub) UntagRole(ctx workflow.Context, input *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	var output iam.UntagRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UntagRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagRoleAsync(ctx workflow.Context, input *iam.UntagRoleInput) *UntagRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UntagRole", input)
	return &UntagRoleFuture{Future: future}
}

func (a *stub) UntagUser(ctx workflow.Context, input *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	var output iam.UntagUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UntagUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagUserAsync(ctx workflow.Context, input *iam.UntagUserInput) *UntagUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UntagUser", input)
	return &UntagUserFuture{Future: future}
}

func (a *stub) UpdateAccessKey(ctx workflow.Context, input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	var output iam.UpdateAccessKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAccessKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccessKeyAsync(ctx workflow.Context, input *iam.UpdateAccessKeyInput) *UpdateAccessKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAccessKey", input)
	return &UpdateAccessKeyFuture{Future: future}
}

func (a *stub) UpdateAccountPasswordPolicy(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	var output iam.UpdateAccountPasswordPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAccountPasswordPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountPasswordPolicyAsync(ctx workflow.Context, input *iam.UpdateAccountPasswordPolicyInput) *UpdateAccountPasswordPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAccountPasswordPolicy", input)
	return &UpdateAccountPasswordPolicyFuture{Future: future}
}

func (a *stub) UpdateAssumeRolePolicy(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	var output iam.UpdateAssumeRolePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAssumeRolePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssumeRolePolicyAsync(ctx workflow.Context, input *iam.UpdateAssumeRolePolicyInput) *UpdateAssumeRolePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateAssumeRolePolicy", input)
	return &UpdateAssumeRolePolicyFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	var output iam.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *iam.UpdateGroupInput) *UpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateGroup", input)
	return &UpdateGroupFuture{Future: future}
}

func (a *stub) UpdateLoginProfile(ctx workflow.Context, input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	var output iam.UpdateLoginProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateLoginProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoginProfileAsync(ctx workflow.Context, input *iam.UpdateLoginProfileInput) *UpdateLoginProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateLoginProfile", input)
	return &UpdateLoginProfileFuture{Future: future}
}

func (a *stub) UpdateOpenIDConnectProviderThumbprint(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	var output iam.UpdateOpenIDConnectProviderThumbprintOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateOpenIDConnectProviderThumbprint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOpenIDConnectProviderThumbprintAsync(ctx workflow.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput) *UpdateOpenIDConnectProviderThumbprintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateOpenIDConnectProviderThumbprint", input)
	return &UpdateOpenIDConnectProviderThumbprintFuture{Future: future}
}

func (a *stub) UpdateRole(ctx workflow.Context, input *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	var output iam.UpdateRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoleAsync(ctx workflow.Context, input *iam.UpdateRoleInput) *UpdateRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateRole", input)
	return &UpdateRoleFuture{Future: future}
}

func (a *stub) UpdateRoleDescription(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	var output iam.UpdateRoleDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateRoleDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoleDescriptionAsync(ctx workflow.Context, input *iam.UpdateRoleDescriptionInput) *UpdateRoleDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateRoleDescription", input)
	return &UpdateRoleDescriptionFuture{Future: future}
}

func (a *stub) UpdateSAMLProvider(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	var output iam.UpdateSAMLProviderOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSAMLProvider", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSAMLProviderAsync(ctx workflow.Context, input *iam.UpdateSAMLProviderInput) *UpdateSAMLProviderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSAMLProvider", input)
	return &UpdateSAMLProviderFuture{Future: future}
}

func (a *stub) UpdateSSHPublicKey(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	var output iam.UpdateSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSSHPublicKeyAsync(ctx workflow.Context, input *iam.UpdateSSHPublicKeyInput) *UpdateSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSSHPublicKey", input)
	return &UpdateSSHPublicKeyFuture{Future: future}
}

func (a *stub) UpdateServerCertificate(ctx workflow.Context, input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	var output iam.UpdateServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServerCertificateAsync(ctx workflow.Context, input *iam.UpdateServerCertificateInput) *UpdateServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateServerCertificate", input)
	return &UpdateServerCertificateFuture{Future: future}
}

func (a *stub) UpdateServiceSpecificCredential(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	var output iam.UpdateServiceSpecificCredentialOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateServiceSpecificCredential", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceSpecificCredentialAsync(ctx workflow.Context, input *iam.UpdateServiceSpecificCredentialInput) *UpdateServiceSpecificCredentialFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateServiceSpecificCredential", input)
	return &UpdateServiceSpecificCredentialFuture{Future: future}
}

func (a *stub) UpdateSigningCertificate(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	var output iam.UpdateSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSigningCertificateAsync(ctx workflow.Context, input *iam.UpdateSigningCertificateInput) *UpdateSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateSigningCertificate", input)
	return &UpdateSigningCertificateFuture{Future: future}
}

func (a *stub) UpdateUser(ctx workflow.Context, input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	var output iam.UpdateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UpdateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserAsync(ctx workflow.Context, input *iam.UpdateUserInput) *UpdateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UpdateUser", input)
	return &UpdateUserFuture{Future: future}
}

func (a *stub) UploadSSHPublicKey(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	var output iam.UploadSSHPublicKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UploadSSHPublicKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadSSHPublicKeyAsync(ctx workflow.Context, input *iam.UploadSSHPublicKeyInput) *UploadSSHPublicKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UploadSSHPublicKey", input)
	return &UploadSSHPublicKeyFuture{Future: future}
}

func (a *stub) UploadServerCertificate(ctx workflow.Context, input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	var output iam.UploadServerCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UploadServerCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadServerCertificateAsync(ctx workflow.Context, input *iam.UploadServerCertificateInput) *UploadServerCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UploadServerCertificate", input)
	return &UploadServerCertificateFuture{Future: future}
}

func (a *stub) UploadSigningCertificate(ctx workflow.Context, input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	var output iam.UploadSigningCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iam-UploadSigningCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UploadSigningCertificateAsync(ctx workflow.Context, input *iam.UploadSigningCertificateInput) *UploadSigningCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-UploadSigningCertificate", input)
	return &UploadSigningCertificateFuture{Future: future}
}

func (a *stub) WaitUntilInstanceProfileExists(ctx workflow.Context, input *iam.GetInstanceProfileInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilInstanceProfileExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceProfileExistsAsync(ctx workflow.Context, input *iam.GetInstanceProfileInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilInstanceProfileExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPolicyExists(ctx workflow.Context, input *iam.GetPolicyInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilPolicyExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPolicyExistsAsync(ctx workflow.Context, input *iam.GetPolicyInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilPolicyExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilRoleExists(ctx workflow.Context, input *iam.GetRoleInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilRoleExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilRoleExistsAsync(ctx workflow.Context, input *iam.GetRoleInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilRoleExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilUserExists(ctx workflow.Context, input *iam.GetUserInput) error {
	return workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilUserExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilUserExistsAsync(ctx workflow.Context, input *iam.GetUserInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iam-WaitUntilUserExists", input)
	return clients.NewVoidFuture(future)
}
