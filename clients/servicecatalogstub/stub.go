// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package servicecatalogstub

import (
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ServiceCatalogAcceptPortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAcceptPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogAssociateBudgetWithResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAssociateBudgetWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogAssociatePrincipalWithPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAssociatePrincipalWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogAssociateProductWithPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAssociateProductWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogAssociateServiceActionWithProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogAssociateTagOptionWithResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogAssociateTagOptionWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCopyProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCopyProductFuture) Get(ctx workflow.Context) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreatePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreatePortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreatePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateProductFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogCreateTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogCreateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeletePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeletePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeletePortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeletePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteProductFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDeleteTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDeleteTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeCopyProductStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeCopyProductStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribePortfolioShareStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribePortfolioShareStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProductAsAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProductAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProductViewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProductViewFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeProvisioningParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeProvisioningParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeRecordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeRecordFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeServiceActionExecutionParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeServiceActionExecutionParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDescribeTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDescribeTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisableAWSOrganizationsAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisassociateBudgetFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisassociateBudgetFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisassociatePrincipalFromPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisassociatePrincipalFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisassociateProductFromPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisassociateProductFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisassociateServiceActionFromProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogDisassociateTagOptionFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogDisassociateTagOptionFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogEnableAWSOrganizationsAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogEnableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogExecuteProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogExecuteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogExecuteProvisionedProductServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogExecuteProvisionedProductServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogGetAWSOrganizationsAccessStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogGetAWSOrganizationsAccessStatusFuture) Get(ctx workflow.Context) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogGetProvisionedProductOutputsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogGetProvisionedProductOutputsFuture) Get(ctx workflow.Context) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListAcceptedPortfolioSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListAcceptedPortfolioSharesFuture) Get(ctx workflow.Context) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListBudgetsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListBudgetsForResourceFuture) Get(ctx workflow.Context) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListConstraintsForPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListConstraintsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListLaunchPathsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListLaunchPathsFuture) Get(ctx workflow.Context) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListOrganizationPortfolioAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListOrganizationPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListPortfolioAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListPortfoliosFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListPortfoliosFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListPortfoliosForProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListPortfoliosForProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListPrincipalsForPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListPrincipalsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListProvisionedProductPlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListProvisionedProductPlansFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListProvisioningArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListProvisioningArtifactsFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListProvisioningArtifactsForServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListProvisioningArtifactsForServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListRecordHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListRecordHistoryFuture) Get(ctx workflow.Context) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListResourcesForTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListResourcesForTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListServiceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListServiceActionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListServiceActionsForProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListServiceActionsForProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListStackInstancesForProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListStackInstancesForProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogListTagOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogListTagOptionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogProvisionProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogProvisionProductFuture) Get(ctx workflow.Context) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogRejectPortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogRejectPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogScanProvisionedProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogScanProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogSearchProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogSearchProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogSearchProductsAsAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogSearchProductsAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogSearchProvisionedProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogSearchProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogTerminateProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogTerminateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdatePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateProvisionedProductPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateProvisionedProductPropertiesFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServiceCatalogUpdateTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ServiceCatalogUpdateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptPortfolioShare(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AcceptPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) *ServiceCatalogAcceptPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AcceptPortfolioShare", input)
	return &ServiceCatalogAcceptPortfolioShareFuture{Future: future}
}

func (a *stub) AssociateBudgetWithResource(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateBudgetWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateBudgetWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) *ServiceCatalogAssociateBudgetWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateBudgetWithResource", input)
	return &ServiceCatalogAssociateBudgetWithResourceFuture{Future: future}
}

func (a *stub) AssociatePrincipalWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociatePrincipalWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePrincipalWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) *ServiceCatalogAssociatePrincipalWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociatePrincipalWithPortfolio", input)
	return &ServiceCatalogAssociatePrincipalWithPortfolioFuture{Future: future}
}

func (a *stub) AssociateProductWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateProductWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateProductWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) *ServiceCatalogAssociateProductWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateProductWithPortfolio", input)
	return &ServiceCatalogAssociateProductWithPortfolioFuture{Future: future}
}

func (a *stub) AssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) *ServiceCatalogAssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateServiceActionWithProvisioningArtifact", input)
	return &ServiceCatalogAssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *stub) AssociateTagOptionWithResource(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateTagOptionWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTagOptionWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) *ServiceCatalogAssociateTagOptionWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateTagOptionWithResource", input)
	return &ServiceCatalogAssociateTagOptionWithResourceFuture{Future: future}
}

func (a *stub) BatchAssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchAssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) *ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchAssociateServiceActionWithProvisioningArtifact", input)
	return &ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *stub) BatchDisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchDisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) *ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchDisassociateServiceActionFromProvisioningArtifact", input)
	return &ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *stub) CopyProduct(ctx workflow.Context, input *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CopyProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyProductAsync(ctx workflow.Context, input *servicecatalog.CopyProductInput) *ServiceCatalogCopyProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CopyProduct", input)
	return &ServiceCatalogCopyProductFuture{Future: future}
}

func (a *stub) CreateConstraint(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConstraintAsync(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) *ServiceCatalogCreateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateConstraint", input)
	return &ServiceCatalogCreateConstraintFuture{Future: future}
}

func (a *stub) CreatePortfolio(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortfolioAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) *ServiceCatalogCreatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolio", input)
	return &ServiceCatalogCreatePortfolioFuture{Future: future}
}

func (a *stub) CreatePortfolioShare(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) *ServiceCatalogCreatePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolioShare", input)
	return &ServiceCatalogCreatePortfolioShareFuture{Future: future}
}

func (a *stub) CreateProduct(ctx workflow.Context, input *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProductAsync(ctx workflow.Context, input *servicecatalog.CreateProductInput) *ServiceCatalogCreateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProduct", input)
	return &ServiceCatalogCreateProductFuture{Future: future}
}

func (a *stub) CreateProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) *ServiceCatalogCreateProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisionedProductPlan", input)
	return &ServiceCatalogCreateProvisionedProductPlanFuture{Future: future}
}

func (a *stub) CreateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) *ServiceCatalogCreateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisioningArtifact", input)
	return &ServiceCatalogCreateProvisioningArtifactFuture{Future: future}
}

func (a *stub) CreateServiceAction(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceActionAsync(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) *ServiceCatalogCreateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateServiceAction", input)
	return &ServiceCatalogCreateServiceActionFuture{Future: future}
}

func (a *stub) CreateTagOption(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagOptionAsync(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) *ServiceCatalogCreateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateTagOption", input)
	return &ServiceCatalogCreateTagOptionFuture{Future: future}
}

func (a *stub) DeleteConstraint(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConstraintAsync(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) *ServiceCatalogDeleteConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteConstraint", input)
	return &ServiceCatalogDeleteConstraintFuture{Future: future}
}

func (a *stub) DeletePortfolio(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortfolioAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) *ServiceCatalogDeletePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolio", input)
	return &ServiceCatalogDeletePortfolioFuture{Future: future}
}

func (a *stub) DeletePortfolioShare(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) *ServiceCatalogDeletePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolioShare", input)
	return &ServiceCatalogDeletePortfolioShareFuture{Future: future}
}

func (a *stub) DeleteProduct(ctx workflow.Context, input *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProductAsync(ctx workflow.Context, input *servicecatalog.DeleteProductInput) *ServiceCatalogDeleteProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProduct", input)
	return &ServiceCatalogDeleteProductFuture{Future: future}
}

func (a *stub) DeleteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) *ServiceCatalogDeleteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisionedProductPlan", input)
	return &ServiceCatalogDeleteProvisionedProductPlanFuture{Future: future}
}

func (a *stub) DeleteProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) *ServiceCatalogDeleteProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisioningArtifact", input)
	return &ServiceCatalogDeleteProvisioningArtifactFuture{Future: future}
}

func (a *stub) DeleteServiceAction(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceActionAsync(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) *ServiceCatalogDeleteServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteServiceAction", input)
	return &ServiceCatalogDeleteServiceActionFuture{Future: future}
}

func (a *stub) DeleteTagOption(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagOptionAsync(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) *ServiceCatalogDeleteTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteTagOption", input)
	return &ServiceCatalogDeleteTagOptionFuture{Future: future}
}

func (a *stub) DescribeConstraint(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConstraintAsync(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) *ServiceCatalogDescribeConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeConstraint", input)
	return &ServiceCatalogDescribeConstraintFuture{Future: future}
}

func (a *stub) DescribeCopyProductStatus(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeCopyProductStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCopyProductStatusAsync(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) *ServiceCatalogDescribeCopyProductStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeCopyProductStatus", input)
	return &ServiceCatalogDescribeCopyProductStatusFuture{Future: future}
}

func (a *stub) DescribePortfolio(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortfolioAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) *ServiceCatalogDescribePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolio", input)
	return &ServiceCatalogDescribePortfolioFuture{Future: future}
}

func (a *stub) DescribePortfolioShareStatus(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShareStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortfolioShareStatusAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) *ServiceCatalogDescribePortfolioShareStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShareStatus", input)
	return &ServiceCatalogDescribePortfolioShareStatusFuture{Future: future}
}

func (a *stub) DescribeProduct(ctx workflow.Context, input *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProductInput) *ServiceCatalogDescribeProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProduct", input)
	return &ServiceCatalogDescribeProductFuture{Future: future}
}

func (a *stub) DescribeProductAsAdmin(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductAsAdminAsync(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) *ServiceCatalogDescribeProductAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductAsAdmin", input)
	return &ServiceCatalogDescribeProductAsAdminFuture{Future: future}
}

func (a *stub) DescribeProductView(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductView", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductViewAsync(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) *ServiceCatalogDescribeProductViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductView", input)
	return &ServiceCatalogDescribeProductViewFuture{Future: future}
}

func (a *stub) DescribeProvisionedProduct(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) *ServiceCatalogDescribeProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProduct", input)
	return &ServiceCatalogDescribeProvisionedProductFuture{Future: future}
}

func (a *stub) DescribeProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) *ServiceCatalogDescribeProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProductPlan", input)
	return &ServiceCatalogDescribeProvisionedProductPlanFuture{Future: future}
}

func (a *stub) DescribeProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) *ServiceCatalogDescribeProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningArtifact", input)
	return &ServiceCatalogDescribeProvisioningArtifactFuture{Future: future}
}

func (a *stub) DescribeProvisioningParameters(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) *ServiceCatalogDescribeProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningParameters", input)
	return &ServiceCatalogDescribeProvisioningParametersFuture{Future: future}
}

func (a *stub) DescribeRecord(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecordAsync(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) *ServiceCatalogDescribeRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeRecord", input)
	return &ServiceCatalogDescribeRecordFuture{Future: future}
}

func (a *stub) DescribeServiceAction(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceActionAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) *ServiceCatalogDescribeServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceAction", input)
	return &ServiceCatalogDescribeServiceActionFuture{Future: future}
}

func (a *stub) DescribeServiceActionExecutionParameters(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceActionExecutionParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceActionExecutionParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) *ServiceCatalogDescribeServiceActionExecutionParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceActionExecutionParameters", input)
	return &ServiceCatalogDescribeServiceActionExecutionParametersFuture{Future: future}
}

func (a *stub) DescribeTagOption(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagOptionAsync(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) *ServiceCatalogDescribeTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeTagOption", input)
	return &ServiceCatalogDescribeTagOptionFuture{Future: future}
}

func (a *stub) DisableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) *ServiceCatalogDisableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisableAWSOrganizationsAccess", input)
	return &ServiceCatalogDisableAWSOrganizationsAccessFuture{Future: future}
}

func (a *stub) DisassociateBudgetFromResource(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateBudgetFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateBudgetFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) *ServiceCatalogDisassociateBudgetFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateBudgetFromResource", input)
	return &ServiceCatalogDisassociateBudgetFromResourceFuture{Future: future}
}

func (a *stub) DisassociatePrincipalFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociatePrincipalFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociatePrincipalFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) *ServiceCatalogDisassociatePrincipalFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociatePrincipalFromPortfolio", input)
	return &ServiceCatalogDisassociatePrincipalFromPortfolioFuture{Future: future}
}

func (a *stub) DisassociateProductFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateProductFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateProductFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) *ServiceCatalogDisassociateProductFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateProductFromPortfolio", input)
	return &ServiceCatalogDisassociateProductFromPortfolioFuture{Future: future}
}

func (a *stub) DisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) *ServiceCatalogDisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateServiceActionFromProvisioningArtifact", input)
	return &ServiceCatalogDisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *stub) DisassociateTagOptionFromResource(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateTagOptionFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTagOptionFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) *ServiceCatalogDisassociateTagOptionFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateTagOptionFromResource", input)
	return &ServiceCatalogDisassociateTagOptionFromResourceFuture{Future: future}
}

func (a *stub) EnableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-EnableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) *ServiceCatalogEnableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-EnableAWSOrganizationsAccess", input)
	return &ServiceCatalogEnableAWSOrganizationsAccessFuture{Future: future}
}

func (a *stub) ExecuteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) *ServiceCatalogExecuteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductPlan", input)
	return &ServiceCatalogExecuteProvisionedProductPlanFuture{Future: future}
}

func (a *stub) ExecuteProvisionedProductServiceAction(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteProvisionedProductServiceActionAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) *ServiceCatalogExecuteProvisionedProductServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductServiceAction", input)
	return &ServiceCatalogExecuteProvisionedProductServiceActionFuture{Future: future}
}

func (a *stub) GetAWSOrganizationsAccessStatus(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetAWSOrganizationsAccessStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAWSOrganizationsAccessStatusAsync(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) *ServiceCatalogGetAWSOrganizationsAccessStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetAWSOrganizationsAccessStatus", input)
	return &ServiceCatalogGetAWSOrganizationsAccessStatusFuture{Future: future}
}

func (a *stub) GetProvisionedProductOutputs(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetProvisionedProductOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProvisionedProductOutputsAsync(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) *ServiceCatalogGetProvisionedProductOutputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetProvisionedProductOutputs", input)
	return &ServiceCatalogGetProvisionedProductOutputsFuture{Future: future}
}

func (a *stub) ListAcceptedPortfolioShares(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListAcceptedPortfolioShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAcceptedPortfolioSharesAsync(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) *ServiceCatalogListAcceptedPortfolioSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListAcceptedPortfolioShares", input)
	return &ServiceCatalogListAcceptedPortfolioSharesFuture{Future: future}
}

func (a *stub) ListBudgetsForResource(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListBudgetsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBudgetsForResourceAsync(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) *ServiceCatalogListBudgetsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListBudgetsForResource", input)
	return &ServiceCatalogListBudgetsForResourceFuture{Future: future}
}

func (a *stub) ListConstraintsForPortfolio(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListConstraintsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConstraintsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) *ServiceCatalogListConstraintsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListConstraintsForPortfolio", input)
	return &ServiceCatalogListConstraintsForPortfolioFuture{Future: future}
}

func (a *stub) ListLaunchPaths(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListLaunchPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLaunchPathsAsync(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) *ServiceCatalogListLaunchPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListLaunchPaths", input)
	return &ServiceCatalogListLaunchPathsFuture{Future: future}
}

func (a *stub) ListOrganizationPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListOrganizationPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) *ServiceCatalogListOrganizationPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListOrganizationPortfolioAccess", input)
	return &ServiceCatalogListOrganizationPortfolioAccessFuture{Future: future}
}

func (a *stub) ListPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) *ServiceCatalogListPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolioAccess", input)
	return &ServiceCatalogListPortfolioAccessFuture{Future: future}
}

func (a *stub) ListPortfolios(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolios", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfoliosAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) *ServiceCatalogListPortfoliosFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolios", input)
	return &ServiceCatalogListPortfoliosFuture{Future: future}
}

func (a *stub) ListPortfoliosForProduct(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfoliosForProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfoliosForProductAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) *ServiceCatalogListPortfoliosForProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfoliosForProduct", input)
	return &ServiceCatalogListPortfoliosForProductFuture{Future: future}
}

func (a *stub) ListPrincipalsForPortfolio(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPrincipalsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPrincipalsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) *ServiceCatalogListPrincipalsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPrincipalsForPortfolio", input)
	return &ServiceCatalogListPrincipalsForPortfolioFuture{Future: future}
}

func (a *stub) ListProvisionedProductPlans(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisionedProductPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisionedProductPlansAsync(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) *ServiceCatalogListProvisionedProductPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisionedProductPlans", input)
	return &ServiceCatalogListProvisionedProductPlansFuture{Future: future}
}

func (a *stub) ListProvisioningArtifacts(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningArtifactsAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) *ServiceCatalogListProvisioningArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifacts", input)
	return &ServiceCatalogListProvisioningArtifactsFuture{Future: future}
}

func (a *stub) ListProvisioningArtifactsForServiceAction(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifactsForServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningArtifactsForServiceActionAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) *ServiceCatalogListProvisioningArtifactsForServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifactsForServiceAction", input)
	return &ServiceCatalogListProvisioningArtifactsForServiceActionFuture{Future: future}
}

func (a *stub) ListRecordHistory(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListRecordHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecordHistoryAsync(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) *ServiceCatalogListRecordHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListRecordHistory", input)
	return &ServiceCatalogListRecordHistoryFuture{Future: future}
}

func (a *stub) ListResourcesForTagOption(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListResourcesForTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesForTagOptionAsync(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) *ServiceCatalogListResourcesForTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListResourcesForTagOption", input)
	return &ServiceCatalogListResourcesForTagOptionFuture{Future: future}
}

func (a *stub) ListServiceActions(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceActionsAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) *ServiceCatalogListServiceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActions", input)
	return &ServiceCatalogListServiceActionsFuture{Future: future}
}

func (a *stub) ListServiceActionsForProvisioningArtifact(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActionsForProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceActionsForProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) *ServiceCatalogListServiceActionsForProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActionsForProvisioningArtifact", input)
	return &ServiceCatalogListServiceActionsForProvisioningArtifactFuture{Future: future}
}

func (a *stub) ListStackInstancesForProvisionedProduct(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListStackInstancesForProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackInstancesForProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) *ServiceCatalogListStackInstancesForProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListStackInstancesForProvisionedProduct", input)
	return &ServiceCatalogListStackInstancesForProvisionedProductFuture{Future: future}
}

func (a *stub) ListTagOptions(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListTagOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagOptionsAsync(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) *ServiceCatalogListTagOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListTagOptions", input)
	return &ServiceCatalogListTagOptionsFuture{Future: future}
}

func (a *stub) ProvisionProduct(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ProvisionProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ProvisionProductAsync(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) *ServiceCatalogProvisionProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ProvisionProduct", input)
	return &ServiceCatalogProvisionProductFuture{Future: future}
}

func (a *stub) RejectPortfolioShare(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-RejectPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) *ServiceCatalogRejectPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-RejectPortfolioShare", input)
	return &ServiceCatalogRejectPortfolioShareFuture{Future: future}
}

func (a *stub) ScanProvisionedProducts(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ScanProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScanProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) *ServiceCatalogScanProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ScanProvisionedProducts", input)
	return &ServiceCatalogScanProvisionedProductsFuture{Future: future}
}

func (a *stub) SearchProducts(ctx workflow.Context, input *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProductsInput) *ServiceCatalogSearchProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProducts", input)
	return &ServiceCatalogSearchProductsFuture{Future: future}
}

func (a *stub) SearchProductsAsAdmin(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProductsAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProductsAsAdminAsync(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) *ServiceCatalogSearchProductsAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProductsAsAdmin", input)
	return &ServiceCatalogSearchProductsAsAdminFuture{Future: future}
}

func (a *stub) SearchProvisionedProducts(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) *ServiceCatalogSearchProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProvisionedProducts", input)
	return &ServiceCatalogSearchProvisionedProductsFuture{Future: future}
}

func (a *stub) TerminateProvisionedProduct(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-TerminateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) *ServiceCatalogTerminateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-TerminateProvisionedProduct", input)
	return &ServiceCatalogTerminateProvisionedProductFuture{Future: future}
}

func (a *stub) UpdateConstraint(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConstraintAsync(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) *ServiceCatalogUpdateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateConstraint", input)
	return &ServiceCatalogUpdateConstraintFuture{Future: future}
}

func (a *stub) UpdatePortfolio(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePortfolioAsync(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) *ServiceCatalogUpdatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolio", input)
	return &ServiceCatalogUpdatePortfolioFuture{Future: future}
}

func (a *stub) UpdateProduct(ctx workflow.Context, input *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProductInput) *ServiceCatalogUpdateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProduct", input)
	return &ServiceCatalogUpdateProductFuture{Future: future}
}

func (a *stub) UpdateProvisionedProduct(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) *ServiceCatalogUpdateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProduct", input)
	return &ServiceCatalogUpdateProvisionedProductFuture{Future: future}
}

func (a *stub) UpdateProvisionedProductProperties(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProductProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisionedProductPropertiesAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) *ServiceCatalogUpdateProvisionedProductPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProductProperties", input)
	return &ServiceCatalogUpdateProvisionedProductPropertiesFuture{Future: future}
}

func (a *stub) UpdateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) *ServiceCatalogUpdateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisioningArtifact", input)
	return &ServiceCatalogUpdateProvisioningArtifactFuture{Future: future}
}

func (a *stub) UpdateServiceAction(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceActionAsync(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) *ServiceCatalogUpdateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateServiceAction", input)
	return &ServiceCatalogUpdateServiceActionFuture{Future: future}
}

func (a *stub) UpdateTagOption(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTagOptionAsync(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) *ServiceCatalogUpdateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateTagOption", input)
	return &ServiceCatalogUpdateTagOptionFuture{Future: future}
}
