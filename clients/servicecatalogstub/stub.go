// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package servicecatalogstub

import (
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptPortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateBudgetWithResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateBudgetWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociatePrincipalWithPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociatePrincipalWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateProductWithPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateProductWithPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateServiceActionWithProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateTagOptionWithResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateTagOptionWithResourceFuture) Get(ctx workflow.Context) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchAssociateServiceActionWithProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchAssociateServiceActionWithProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisassociateServiceActionFromProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyProductFuture) Get(ctx workflow.Context) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProductFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProductFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCopyProductStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCopyProductStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePortfolioShareStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePortfolioShareStatusFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePortfolioSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePortfolioSharesFuture) Get(ctx workflow.Context) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	var output servicecatalog.DescribePortfolioSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProductAsAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProductAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProductViewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProductViewFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProvisioningParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProvisioningParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRecordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRecordFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServiceActionExecutionParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServiceActionExecutionParametersFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableAWSOrganizationsAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateBudgetFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateBudgetFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociatePrincipalFromPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociatePrincipalFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateProductFromPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateProductFromPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateServiceActionFromProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateServiceActionFromProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateTagOptionFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateTagOptionFromResourceFuture) Get(ctx workflow.Context) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableAWSOrganizationsAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableAWSOrganizationsAccessFuture) Get(ctx workflow.Context) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteProvisionedProductPlanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteProvisionedProductPlanFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteProvisionedProductServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteProvisionedProductServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAWSOrganizationsAccessStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAWSOrganizationsAccessStatusFuture) Get(ctx workflow.Context) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProvisionedProductOutputsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProvisionedProductOutputsFuture) Get(ctx workflow.Context) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportAsProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportAsProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	var output servicecatalog.ImportAsProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAcceptedPortfolioSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAcceptedPortfolioSharesFuture) Get(ctx workflow.Context) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBudgetsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBudgetsForResourceFuture) Get(ctx workflow.Context) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConstraintsForPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConstraintsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLaunchPathsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLaunchPathsFuture) Get(ctx workflow.Context) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOrganizationPortfolioAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOrganizationPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPortfolioAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPortfolioAccessFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPortfoliosFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPortfoliosFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPortfoliosForProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPortfoliosForProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPrincipalsForPortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPrincipalsForPortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProvisionedProductPlansFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProvisionedProductPlansFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProvisioningArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProvisioningArtifactsFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProvisioningArtifactsForServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProvisioningArtifactsForServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRecordHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRecordHistoryFuture) Get(ctx workflow.Context) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourcesForTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourcesForTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServiceActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServiceActionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListServiceActionsForProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListServiceActionsForProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStackInstancesForProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStackInstancesForProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagOptionsFuture) Get(ctx workflow.Context) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ProvisionProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ProvisionProductFuture) Get(ctx workflow.Context) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectPortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectPortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ScanProvisionedProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ScanProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchProductsAsAdminFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchProductsAsAdminFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchProvisionedProductsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchProvisionedProductsFuture) Get(ctx workflow.Context) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConstraintFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConstraintFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePortfolioFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePortfolioFuture) Get(ctx workflow.Context) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePortfolioShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePortfolioShareFuture) Get(ctx workflow.Context) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	var output servicecatalog.UpdatePortfolioShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProvisionedProductFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProvisionedProductFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProvisionedProductPropertiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProvisionedProductPropertiesFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProvisioningArtifactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProvisioningArtifactFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceActionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTagOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTagOptionFuture) Get(ctx workflow.Context) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptPortfolioShare(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	var output servicecatalog.AcceptPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AcceptPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.AcceptPortfolioShareInput) *AcceptPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AcceptPortfolioShare", input)
	return &AcceptPortfolioShareFuture{Future: future}
}

func (a *stub) AssociateBudgetWithResource(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	var output servicecatalog.AssociateBudgetWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateBudgetWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateBudgetWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateBudgetWithResourceInput) *AssociateBudgetWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateBudgetWithResource", input)
	return &AssociateBudgetWithResourceFuture{Future: future}
}

func (a *stub) AssociatePrincipalWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	var output servicecatalog.AssociatePrincipalWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociatePrincipalWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociatePrincipalWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) *AssociatePrincipalWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociatePrincipalWithPortfolio", input)
	return &AssociatePrincipalWithPortfolioFuture{Future: future}
}

func (a *stub) AssociateProductWithPortfolio(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	var output servicecatalog.AssociateProductWithPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateProductWithPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateProductWithPortfolioAsync(ctx workflow.Context, input *servicecatalog.AssociateProductWithPortfolioInput) *AssociateProductWithPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateProductWithPortfolio", input)
	return &AssociateProductWithPortfolioFuture{Future: future}
}

func (a *stub) AssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) *AssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateServiceActionWithProvisioningArtifact", input)
	return &AssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *stub) AssociateTagOptionWithResource(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	var output servicecatalog.AssociateTagOptionWithResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateTagOptionWithResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTagOptionWithResourceAsync(ctx workflow.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) *AssociateTagOptionWithResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-AssociateTagOptionWithResource", input)
	return &AssociateTagOptionWithResourceFuture{Future: future}
}

func (a *stub) BatchAssociateServiceActionWithProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchAssociateServiceActionWithProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateServiceActionWithProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) *BatchAssociateServiceActionWithProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchAssociateServiceActionWithProvisioningArtifact", input)
	return &BatchAssociateServiceActionWithProvisioningArtifactFuture{Future: future}
}

func (a *stub) BatchDisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchDisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) *BatchDisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-BatchDisassociateServiceActionFromProvisioningArtifact", input)
	return &BatchDisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *stub) CopyProduct(ctx workflow.Context, input *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error) {
	var output servicecatalog.CopyProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CopyProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyProductAsync(ctx workflow.Context, input *servicecatalog.CopyProductInput) *CopyProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CopyProduct", input)
	return &CopyProductFuture{Future: future}
}

func (a *stub) CreateConstraint(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error) {
	var output servicecatalog.CreateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConstraintAsync(ctx workflow.Context, input *servicecatalog.CreateConstraintInput) *CreateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateConstraint", input)
	return &CreateConstraintFuture{Future: future}
}

func (a *stub) CreatePortfolio(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error) {
	var output servicecatalog.CreatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortfolioAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioInput) *CreatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolio", input)
	return &CreatePortfolioFuture{Future: future}
}

func (a *stub) CreatePortfolioShare(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error) {
	var output servicecatalog.CreatePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.CreatePortfolioShareInput) *CreatePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreatePortfolioShare", input)
	return &CreatePortfolioShareFuture{Future: future}
}

func (a *stub) CreateProduct(ctx workflow.Context, input *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error) {
	var output servicecatalog.CreateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProductAsync(ctx workflow.Context, input *servicecatalog.CreateProductInput) *CreateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProduct", input)
	return &CreateProductFuture{Future: future}
}

func (a *stub) CreateProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	var output servicecatalog.CreateProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.CreateProvisionedProductPlanInput) *CreateProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisionedProductPlan", input)
	return &CreateProvisionedProductPlanFuture{Future: future}
}

func (a *stub) CreateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	var output servicecatalog.CreateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.CreateProvisioningArtifactInput) *CreateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateProvisioningArtifact", input)
	return &CreateProvisioningArtifactFuture{Future: future}
}

func (a *stub) CreateServiceAction(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error) {
	var output servicecatalog.CreateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateServiceActionAsync(ctx workflow.Context, input *servicecatalog.CreateServiceActionInput) *CreateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateServiceAction", input)
	return &CreateServiceActionFuture{Future: future}
}

func (a *stub) CreateTagOption(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error) {
	var output servicecatalog.CreateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagOptionAsync(ctx workflow.Context, input *servicecatalog.CreateTagOptionInput) *CreateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-CreateTagOption", input)
	return &CreateTagOptionFuture{Future: future}
}

func (a *stub) DeleteConstraint(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error) {
	var output servicecatalog.DeleteConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConstraintAsync(ctx workflow.Context, input *servicecatalog.DeleteConstraintInput) *DeleteConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteConstraint", input)
	return &DeleteConstraintFuture{Future: future}
}

func (a *stub) DeletePortfolio(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error) {
	var output servicecatalog.DeletePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortfolioAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioInput) *DeletePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolio", input)
	return &DeletePortfolioFuture{Future: future}
}

func (a *stub) DeletePortfolioShare(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error) {
	var output servicecatalog.DeletePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.DeletePortfolioShareInput) *DeletePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeletePortfolioShare", input)
	return &DeletePortfolioShareFuture{Future: future}
}

func (a *stub) DeleteProduct(ctx workflow.Context, input *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error) {
	var output servicecatalog.DeleteProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProductAsync(ctx workflow.Context, input *servicecatalog.DeleteProductInput) *DeleteProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProduct", input)
	return &DeleteProductFuture{Future: future}
}

func (a *stub) DeleteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	var output servicecatalog.DeleteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) *DeleteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisionedProductPlan", input)
	return &DeleteProvisionedProductPlanFuture{Future: future}
}

func (a *stub) DeleteProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	var output servicecatalog.DeleteProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DeleteProvisioningArtifactInput) *DeleteProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteProvisioningArtifact", input)
	return &DeleteProvisioningArtifactFuture{Future: future}
}

func (a *stub) DeleteServiceAction(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error) {
	var output servicecatalog.DeleteServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteServiceActionAsync(ctx workflow.Context, input *servicecatalog.DeleteServiceActionInput) *DeleteServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteServiceAction", input)
	return &DeleteServiceActionFuture{Future: future}
}

func (a *stub) DeleteTagOption(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error) {
	var output servicecatalog.DeleteTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagOptionAsync(ctx workflow.Context, input *servicecatalog.DeleteTagOptionInput) *DeleteTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DeleteTagOption", input)
	return &DeleteTagOptionFuture{Future: future}
}

func (a *stub) DescribeConstraint(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error) {
	var output servicecatalog.DescribeConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConstraintAsync(ctx workflow.Context, input *servicecatalog.DescribeConstraintInput) *DescribeConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeConstraint", input)
	return &DescribeConstraintFuture{Future: future}
}

func (a *stub) DescribeCopyProductStatus(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	var output servicecatalog.DescribeCopyProductStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeCopyProductStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCopyProductStatusAsync(ctx workflow.Context, input *servicecatalog.DescribeCopyProductStatusInput) *DescribeCopyProductStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeCopyProductStatus", input)
	return &DescribeCopyProductStatusFuture{Future: future}
}

func (a *stub) DescribePortfolio(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error) {
	var output servicecatalog.DescribePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortfolioAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioInput) *DescribePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolio", input)
	return &DescribePortfolioFuture{Future: future}
}

func (a *stub) DescribePortfolioShareStatus(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	var output servicecatalog.DescribePortfolioShareStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShareStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortfolioShareStatusAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioShareStatusInput) *DescribePortfolioShareStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShareStatus", input)
	return &DescribePortfolioShareStatusFuture{Future: future}
}

func (a *stub) DescribePortfolioShares(ctx workflow.Context, input *servicecatalog.DescribePortfolioSharesInput) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	var output servicecatalog.DescribePortfolioSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePortfolioSharesAsync(ctx workflow.Context, input *servicecatalog.DescribePortfolioSharesInput) *DescribePortfolioSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribePortfolioShares", input)
	return &DescribePortfolioSharesFuture{Future: future}
}

func (a *stub) DescribeProduct(ctx workflow.Context, input *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error) {
	var output servicecatalog.DescribeProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProductInput) *DescribeProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProduct", input)
	return &DescribeProductFuture{Future: future}
}

func (a *stub) DescribeProductAsAdmin(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	var output servicecatalog.DescribeProductAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductAsAdminAsync(ctx workflow.Context, input *servicecatalog.DescribeProductAsAdminInput) *DescribeProductAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductAsAdmin", input)
	return &DescribeProductAsAdminFuture{Future: future}
}

func (a *stub) DescribeProductView(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error) {
	var output servicecatalog.DescribeProductViewOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductView", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProductViewAsync(ctx workflow.Context, input *servicecatalog.DescribeProductViewInput) *DescribeProductViewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProductView", input)
	return &DescribeProductViewFuture{Future: future}
}

func (a *stub) DescribeProvisionedProduct(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	var output servicecatalog.DescribeProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductInput) *DescribeProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProduct", input)
	return &DescribeProvisionedProductFuture{Future: future}
}

func (a *stub) DescribeProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	var output servicecatalog.DescribeProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) *DescribeProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisionedProductPlan", input)
	return &DescribeProvisionedProductPlanFuture{Future: future}
}

func (a *stub) DescribeProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	var output servicecatalog.DescribeProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningArtifactInput) *DescribeProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningArtifact", input)
	return &DescribeProvisioningArtifactFuture{Future: future}
}

func (a *stub) DescribeProvisioningParameters(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	var output servicecatalog.DescribeProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeProvisioningParametersInput) *DescribeProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeProvisioningParameters", input)
	return &DescribeProvisioningParametersFuture{Future: future}
}

func (a *stub) DescribeRecord(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error) {
	var output servicecatalog.DescribeRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRecordAsync(ctx workflow.Context, input *servicecatalog.DescribeRecordInput) *DescribeRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeRecord", input)
	return &DescribeRecordFuture{Future: future}
}

func (a *stub) DescribeServiceAction(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error) {
	var output servicecatalog.DescribeServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceActionAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionInput) *DescribeServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceAction", input)
	return &DescribeServiceActionFuture{Future: future}
}

func (a *stub) DescribeServiceActionExecutionParameters(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	var output servicecatalog.DescribeServiceActionExecutionParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceActionExecutionParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceActionExecutionParametersAsync(ctx workflow.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) *DescribeServiceActionExecutionParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeServiceActionExecutionParameters", input)
	return &DescribeServiceActionExecutionParametersFuture{Future: future}
}

func (a *stub) DescribeTagOption(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error) {
	var output servicecatalog.DescribeTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagOptionAsync(ctx workflow.Context, input *servicecatalog.DescribeTagOptionInput) *DescribeTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DescribeTagOption", input)
	return &DescribeTagOptionFuture{Future: future}
}

func (a *stub) DisableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.DisableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) *DisableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisableAWSOrganizationsAccess", input)
	return &DisableAWSOrganizationsAccessFuture{Future: future}
}

func (a *stub) DisassociateBudgetFromResource(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	var output servicecatalog.DisassociateBudgetFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateBudgetFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateBudgetFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) *DisassociateBudgetFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateBudgetFromResource", input)
	return &DisassociateBudgetFromResourceFuture{Future: future}
}

func (a *stub) DisassociatePrincipalFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	var output servicecatalog.DisassociatePrincipalFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociatePrincipalFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociatePrincipalFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) *DisassociatePrincipalFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociatePrincipalFromPortfolio", input)
	return &DisassociatePrincipalFromPortfolioFuture{Future: future}
}

func (a *stub) DisassociateProductFromPortfolio(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	var output servicecatalog.DisassociateProductFromPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateProductFromPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateProductFromPortfolioAsync(ctx workflow.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) *DisassociateProductFromPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateProductFromPortfolio", input)
	return &DisassociateProductFromPortfolioFuture{Future: future}
}

func (a *stub) DisassociateServiceActionFromProvisioningArtifact(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	var output servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateServiceActionFromProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateServiceActionFromProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) *DisassociateServiceActionFromProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateServiceActionFromProvisioningArtifact", input)
	return &DisassociateServiceActionFromProvisioningArtifactFuture{Future: future}
}

func (a *stub) DisassociateTagOptionFromResource(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	var output servicecatalog.DisassociateTagOptionFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateTagOptionFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTagOptionFromResourceAsync(ctx workflow.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) *DisassociateTagOptionFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-DisassociateTagOptionFromResource", input)
	return &DisassociateTagOptionFromResourceFuture{Future: future}
}

func (a *stub) EnableAWSOrganizationsAccess(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	var output servicecatalog.EnableAWSOrganizationsAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-EnableAWSOrganizationsAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableAWSOrganizationsAccessAsync(ctx workflow.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) *EnableAWSOrganizationsAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-EnableAWSOrganizationsAccess", input)
	return &EnableAWSOrganizationsAccessFuture{Future: future}
}

func (a *stub) ExecuteProvisionedProductPlan(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductPlanOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductPlan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteProvisionedProductPlanAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) *ExecuteProvisionedProductPlanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductPlan", input)
	return &ExecuteProvisionedProductPlanFuture{Future: future}
}

func (a *stub) ExecuteProvisionedProductServiceAction(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	var output servicecatalog.ExecuteProvisionedProductServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteProvisionedProductServiceActionAsync(ctx workflow.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) *ExecuteProvisionedProductServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ExecuteProvisionedProductServiceAction", input)
	return &ExecuteProvisionedProductServiceActionFuture{Future: future}
}

func (a *stub) GetAWSOrganizationsAccessStatus(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	var output servicecatalog.GetAWSOrganizationsAccessStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetAWSOrganizationsAccessStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAWSOrganizationsAccessStatusAsync(ctx workflow.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) *GetAWSOrganizationsAccessStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetAWSOrganizationsAccessStatus", input)
	return &GetAWSOrganizationsAccessStatusFuture{Future: future}
}

func (a *stub) GetProvisionedProductOutputs(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	var output servicecatalog.GetProvisionedProductOutputsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetProvisionedProductOutputs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProvisionedProductOutputsAsync(ctx workflow.Context, input *servicecatalog.GetProvisionedProductOutputsInput) *GetProvisionedProductOutputsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-GetProvisionedProductOutputs", input)
	return &GetProvisionedProductOutputsFuture{Future: future}
}

func (a *stub) ImportAsProvisionedProduct(ctx workflow.Context, input *servicecatalog.ImportAsProvisionedProductInput) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	var output servicecatalog.ImportAsProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ImportAsProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportAsProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.ImportAsProvisionedProductInput) *ImportAsProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ImportAsProvisionedProduct", input)
	return &ImportAsProvisionedProductFuture{Future: future}
}

func (a *stub) ListAcceptedPortfolioShares(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	var output servicecatalog.ListAcceptedPortfolioSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListAcceptedPortfolioShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAcceptedPortfolioSharesAsync(ctx workflow.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) *ListAcceptedPortfolioSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListAcceptedPortfolioShares", input)
	return &ListAcceptedPortfolioSharesFuture{Future: future}
}

func (a *stub) ListBudgetsForResource(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	var output servicecatalog.ListBudgetsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListBudgetsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBudgetsForResourceAsync(ctx workflow.Context, input *servicecatalog.ListBudgetsForResourceInput) *ListBudgetsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListBudgetsForResource", input)
	return &ListBudgetsForResourceFuture{Future: future}
}

func (a *stub) ListConstraintsForPortfolio(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	var output servicecatalog.ListConstraintsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListConstraintsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConstraintsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListConstraintsForPortfolioInput) *ListConstraintsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListConstraintsForPortfolio", input)
	return &ListConstraintsForPortfolioFuture{Future: future}
}

func (a *stub) ListLaunchPaths(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error) {
	var output servicecatalog.ListLaunchPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListLaunchPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLaunchPathsAsync(ctx workflow.Context, input *servicecatalog.ListLaunchPathsInput) *ListLaunchPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListLaunchPaths", input)
	return &ListLaunchPathsFuture{Future: future}
}

func (a *stub) ListOrganizationPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	var output servicecatalog.ListOrganizationPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListOrganizationPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) *ListOrganizationPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListOrganizationPortfolioAccess", input)
	return &ListOrganizationPortfolioAccessFuture{Future: future}
}

func (a *stub) ListPortfolioAccess(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error) {
	var output servicecatalog.ListPortfolioAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolioAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfolioAccessAsync(ctx workflow.Context, input *servicecatalog.ListPortfolioAccessInput) *ListPortfolioAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolioAccess", input)
	return &ListPortfolioAccessFuture{Future: future}
}

func (a *stub) ListPortfolios(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error) {
	var output servicecatalog.ListPortfoliosOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolios", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfoliosAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosInput) *ListPortfoliosFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfolios", input)
	return &ListPortfoliosFuture{Future: future}
}

func (a *stub) ListPortfoliosForProduct(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	var output servicecatalog.ListPortfoliosForProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfoliosForProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPortfoliosForProductAsync(ctx workflow.Context, input *servicecatalog.ListPortfoliosForProductInput) *ListPortfoliosForProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPortfoliosForProduct", input)
	return &ListPortfoliosForProductFuture{Future: future}
}

func (a *stub) ListPrincipalsForPortfolio(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	var output servicecatalog.ListPrincipalsForPortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPrincipalsForPortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPrincipalsForPortfolioAsync(ctx workflow.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) *ListPrincipalsForPortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListPrincipalsForPortfolio", input)
	return &ListPrincipalsForPortfolioFuture{Future: future}
}

func (a *stub) ListProvisionedProductPlans(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	var output servicecatalog.ListProvisionedProductPlansOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisionedProductPlans", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisionedProductPlansAsync(ctx workflow.Context, input *servicecatalog.ListProvisionedProductPlansInput) *ListProvisionedProductPlansFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisionedProductPlans", input)
	return &ListProvisionedProductPlansFuture{Future: future}
}

func (a *stub) ListProvisioningArtifacts(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningArtifactsAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsInput) *ListProvisioningArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifacts", input)
	return &ListProvisioningArtifactsFuture{Future: future}
}

func (a *stub) ListProvisioningArtifactsForServiceAction(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	var output servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifactsForServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningArtifactsForServiceActionAsync(ctx workflow.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) *ListProvisioningArtifactsForServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListProvisioningArtifactsForServiceAction", input)
	return &ListProvisioningArtifactsForServiceActionFuture{Future: future}
}

func (a *stub) ListRecordHistory(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error) {
	var output servicecatalog.ListRecordHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListRecordHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecordHistoryAsync(ctx workflow.Context, input *servicecatalog.ListRecordHistoryInput) *ListRecordHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListRecordHistory", input)
	return &ListRecordHistoryFuture{Future: future}
}

func (a *stub) ListResourcesForTagOption(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	var output servicecatalog.ListResourcesForTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListResourcesForTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesForTagOptionAsync(ctx workflow.Context, input *servicecatalog.ListResourcesForTagOptionInput) *ListResourcesForTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListResourcesForTagOption", input)
	return &ListResourcesForTagOptionFuture{Future: future}
}

func (a *stub) ListServiceActions(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error) {
	var output servicecatalog.ListServiceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceActionsAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsInput) *ListServiceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActions", input)
	return &ListServiceActionsFuture{Future: future}
}

func (a *stub) ListServiceActionsForProvisioningArtifact(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	var output servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActionsForProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListServiceActionsForProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) *ListServiceActionsForProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListServiceActionsForProvisioningArtifact", input)
	return &ListServiceActionsForProvisioningArtifactFuture{Future: future}
}

func (a *stub) ListStackInstancesForProvisionedProduct(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	var output servicecatalog.ListStackInstancesForProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListStackInstancesForProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStackInstancesForProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) *ListStackInstancesForProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListStackInstancesForProvisionedProduct", input)
	return &ListStackInstancesForProvisionedProductFuture{Future: future}
}

func (a *stub) ListTagOptions(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error) {
	var output servicecatalog.ListTagOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListTagOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagOptionsAsync(ctx workflow.Context, input *servicecatalog.ListTagOptionsInput) *ListTagOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ListTagOptions", input)
	return &ListTagOptionsFuture{Future: future}
}

func (a *stub) ProvisionProduct(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error) {
	var output servicecatalog.ProvisionProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ProvisionProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ProvisionProductAsync(ctx workflow.Context, input *servicecatalog.ProvisionProductInput) *ProvisionProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ProvisionProduct", input)
	return &ProvisionProductFuture{Future: future}
}

func (a *stub) RejectPortfolioShare(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error) {
	var output servicecatalog.RejectPortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-RejectPortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectPortfolioShareAsync(ctx workflow.Context, input *servicecatalog.RejectPortfolioShareInput) *RejectPortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-RejectPortfolioShare", input)
	return &RejectPortfolioShareFuture{Future: future}
}

func (a *stub) ScanProvisionedProducts(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	var output servicecatalog.ScanProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ScanProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScanProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.ScanProvisionedProductsInput) *ScanProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-ScanProvisionedProducts", input)
	return &ScanProvisionedProductsFuture{Future: future}
}

func (a *stub) SearchProducts(ctx workflow.Context, input *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error) {
	var output servicecatalog.SearchProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProductsInput) *SearchProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProducts", input)
	return &SearchProductsFuture{Future: future}
}

func (a *stub) SearchProductsAsAdmin(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	var output servicecatalog.SearchProductsAsAdminOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProductsAsAdmin", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProductsAsAdminAsync(ctx workflow.Context, input *servicecatalog.SearchProductsAsAdminInput) *SearchProductsAsAdminFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProductsAsAdmin", input)
	return &SearchProductsAsAdminFuture{Future: future}
}

func (a *stub) SearchProvisionedProducts(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	var output servicecatalog.SearchProvisionedProductsOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProvisionedProducts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProvisionedProductsAsync(ctx workflow.Context, input *servicecatalog.SearchProvisionedProductsInput) *SearchProvisionedProductsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-SearchProvisionedProducts", input)
	return &SearchProvisionedProductsFuture{Future: future}
}

func (a *stub) TerminateProvisionedProduct(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	var output servicecatalog.TerminateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-TerminateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.TerminateProvisionedProductInput) *TerminateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-TerminateProvisionedProduct", input)
	return &TerminateProvisionedProductFuture{Future: future}
}

func (a *stub) UpdateConstraint(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error) {
	var output servicecatalog.UpdateConstraintOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateConstraint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConstraintAsync(ctx workflow.Context, input *servicecatalog.UpdateConstraintInput) *UpdateConstraintFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateConstraint", input)
	return &UpdateConstraintFuture{Future: future}
}

func (a *stub) UpdatePortfolio(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error) {
	var output servicecatalog.UpdatePortfolioOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolio", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePortfolioAsync(ctx workflow.Context, input *servicecatalog.UpdatePortfolioInput) *UpdatePortfolioFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolio", input)
	return &UpdatePortfolioFuture{Future: future}
}

func (a *stub) UpdatePortfolioShare(ctx workflow.Context, input *servicecatalog.UpdatePortfolioShareInput) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	var output servicecatalog.UpdatePortfolioShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolioShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePortfolioShareAsync(ctx workflow.Context, input *servicecatalog.UpdatePortfolioShareInput) *UpdatePortfolioShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdatePortfolioShare", input)
	return &UpdatePortfolioShareFuture{Future: future}
}

func (a *stub) UpdateProduct(ctx workflow.Context, input *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error) {
	var output servicecatalog.UpdateProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProductInput) *UpdateProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProduct", input)
	return &UpdateProductFuture{Future: future}
}

func (a *stub) UpdateProvisionedProduct(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	var output servicecatalog.UpdateProvisionedProductOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProduct", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisionedProductAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductInput) *UpdateProvisionedProductFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProduct", input)
	return &UpdateProvisionedProductFuture{Future: future}
}

func (a *stub) UpdateProvisionedProductProperties(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	var output servicecatalog.UpdateProvisionedProductPropertiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProductProperties", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisionedProductPropertiesAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) *UpdateProvisionedProductPropertiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisionedProductProperties", input)
	return &UpdateProvisionedProductPropertiesFuture{Future: future}
}

func (a *stub) UpdateProvisioningArtifact(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	var output servicecatalog.UpdateProvisioningArtifactOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisioningArtifact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisioningArtifactAsync(ctx workflow.Context, input *servicecatalog.UpdateProvisioningArtifactInput) *UpdateProvisioningArtifactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateProvisioningArtifact", input)
	return &UpdateProvisioningArtifactFuture{Future: future}
}

func (a *stub) UpdateServiceAction(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error) {
	var output servicecatalog.UpdateServiceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateServiceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceActionAsync(ctx workflow.Context, input *servicecatalog.UpdateServiceActionInput) *UpdateServiceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateServiceAction", input)
	return &UpdateServiceActionFuture{Future: future}
}

func (a *stub) UpdateTagOption(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error) {
	var output servicecatalog.UpdateTagOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateTagOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTagOptionAsync(ctx workflow.Context, input *servicecatalog.UpdateTagOptionInput) *UpdateTagOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-servicecatalog-UpdateTagOption", input)
	return &UpdateTagOptionFuture{Future: future}
}
