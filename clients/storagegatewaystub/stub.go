// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package storagegatewaystub

import (
	"github.com/aws/aws-sdk-go/service/storagegateway"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ActivateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ActivateGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddCacheFuture) Get(ctx workflow.Context) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddUploadBufferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddWorkingStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssignTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssignTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelArchivalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelArchivalFuture) Get(ctx workflow.Context) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelRetrievalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelRetrievalFuture) Get(ctx workflow.Context) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCachediSCSIVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCachediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNFSFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSMBFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotFromVolumeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotFromVolumeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStorediSCSIVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStorediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTapeWithBarcodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTapeWithBarcodeFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTapesFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAutomaticTapeCreationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFileShareFuture) Get(ctx workflow.Context) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTapeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTapeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTapeArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAvailabilityMonitorTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBandwidthRateLimitScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBandwidthRateLimitScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCacheFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCachediSCSIVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCachediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGatewayInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMaintenanceStartTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNFSFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNFSFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSMBFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSMBFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSMBSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSMBSettingsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStorediSCSIVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStorediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTapeArchivesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTapeArchivesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTapeRecoveryPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTapeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTapesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUploadBufferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVTLDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVTLDevicesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkingStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type JoinDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *JoinDomainFuture) Get(ctx workflow.Context) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAutomaticTapeCreationPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAutomaticTapeCreationPoliciesFuture) Get(ctx workflow.Context) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGatewaysFuture) Get(ctx workflow.Context) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLocalDisksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLocalDisksFuture) Get(ctx workflow.Context) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTapePoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTapePoolsFuture) Get(ctx workflow.Context) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTapesFuture) Get(ctx workflow.Context) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVolumeInitiatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVolumeInitiatorsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVolumeRecoveryPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVolumeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVolumesFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NotifyWhenUploadedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NotifyWhenUploadedFuture) Get(ctx workflow.Context) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RefreshCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RefreshCacheFuture) Get(ctx workflow.Context) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetCacheFuture) Get(ctx workflow.Context) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetrieveTapeArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetrieveTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetrieveTapeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetrieveTapeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetLocalConsolePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetLocalConsolePasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetSMBGuestPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetSMBGuestPasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ShutdownGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ShutdownGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAvailabilityMonitorTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartGatewayFuture) Get(ctx workflow.Context) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAutomaticTapeCreationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateBandwidthRateLimitScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateBandwidthRateLimitScheduleFuture) Get(ctx workflow.Context) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewaySoftwareNowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewaySoftwareNowFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMaintenanceStartTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNFSFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSMBFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSMBFileShareVisibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSMBFileShareVisibilityFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	var output storagegateway.UpdateSMBFileShareVisibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSMBSecurityStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSMBSecurityStrategyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVTLDeviceTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVTLDeviceTypeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateGateway(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ActivateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateGatewayAsync(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) *ActivateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ActivateGateway", input)
	return &ActivateGatewayFuture{Future: future}
}

func (a *stub) AddCache(ctx workflow.Context, input *storagegateway.AddCacheInput) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddCacheAsync(ctx workflow.Context, input *storagegateway.AddCacheInput) *AddCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddCache", input)
	return &AddCacheFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) AddUploadBuffer(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddUploadBufferAsync(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) *AddUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddUploadBuffer", input)
	return &AddUploadBufferFuture{Future: future}
}

func (a *stub) AddWorkingStorage(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddWorkingStorageAsync(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) *AddWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddWorkingStorage", input)
	return &AddWorkingStorageFuture{Future: future}
}

func (a *stub) AssignTapePool(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AssignTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignTapePoolAsync(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) *AssignTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AssignTapePool", input)
	return &AssignTapePoolFuture{Future: future}
}

func (a *stub) AttachVolume(ctx workflow.Context, input *storagegateway.AttachVolumeInput) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachVolumeAsync(ctx workflow.Context, input *storagegateway.AttachVolumeInput) *AttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AttachVolume", input)
	return &AttachVolumeFuture{Future: future}
}

func (a *stub) CancelArchival(ctx workflow.Context, input *storagegateway.CancelArchivalInput) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelArchival", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelArchivalAsync(ctx workflow.Context, input *storagegateway.CancelArchivalInput) *CancelArchivalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelArchival", input)
	return &CancelArchivalFuture{Future: future}
}

func (a *stub) CancelRetrieval(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelRetrieval", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelRetrievalAsync(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) *CancelRetrievalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelRetrieval", input)
	return &CancelRetrievalFuture{Future: future}
}

func (a *stub) CreateCachediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateCachediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) *CreateCachediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateCachediSCSIVolume", input)
	return &CreateCachediSCSIVolumeFuture{Future: future}
}

func (a *stub) CreateNFSFileShare(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) *CreateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateNFSFileShare", input)
	return &CreateNFSFileShareFuture{Future: future}
}

func (a *stub) CreateSMBFileShare(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) *CreateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSMBFileShare", input)
	return &CreateSMBFileShareFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) *CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshot", input)
	return &CreateSnapshotFuture{Future: future}
}

func (a *stub) CreateSnapshotFromVolumeRecoveryPoint(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshotFromVolumeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotFromVolumeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) *CreateSnapshotFromVolumeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshotFromVolumeRecoveryPoint", input)
	return &CreateSnapshotFromVolumeRecoveryPointFuture{Future: future}
}

func (a *stub) CreateStorediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateStorediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStorediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) *CreateStorediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateStorediSCSIVolume", input)
	return &CreateStorediSCSIVolumeFuture{Future: future}
}

func (a *stub) CreateTapePool(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapePoolAsync(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) *CreateTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapePool", input)
	return &CreateTapePoolFuture{Future: future}
}

func (a *stub) CreateTapeWithBarcode(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapeWithBarcode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapeWithBarcodeAsync(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) *CreateTapeWithBarcodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapeWithBarcode", input)
	return &CreateTapeWithBarcodeFuture{Future: future}
}

func (a *stub) CreateTapes(ctx workflow.Context, input *storagegateway.CreateTapesInput) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapesAsync(ctx workflow.Context, input *storagegateway.CreateTapesInput) *CreateTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapes", input)
	return &CreateTapesFuture{Future: future}
}

func (a *stub) DeleteAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) *DeleteAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteAutomaticTapeCreationPolicy", input)
	return &DeleteAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *stub) DeleteBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) *DeleteBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteBandwidthRateLimit", input)
	return &DeleteBandwidthRateLimitFuture{Future: future}
}

func (a *stub) DeleteChapCredentials(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) *DeleteChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteChapCredentials", input)
	return &DeleteChapCredentialsFuture{Future: future}
}

func (a *stub) DeleteFileShare(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileShareAsync(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) *DeleteFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteFileShare", input)
	return &DeleteFileShareFuture{Future: future}
}

func (a *stub) DeleteGateway(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayAsync(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) *DeleteGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteGateway", input)
	return &DeleteGatewayFuture{Future: future}
}

func (a *stub) DeleteSnapshotSchedule(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) *DeleteSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteSnapshotSchedule", input)
	return &DeleteSnapshotScheduleFuture{Future: future}
}

func (a *stub) DeleteTape(ctx workflow.Context, input *storagegateway.DeleteTapeInput) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTape", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapeAsync(ctx workflow.Context, input *storagegateway.DeleteTapeInput) *DeleteTapeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTape", input)
	return &DeleteTapeFuture{Future: future}
}

func (a *stub) DeleteTapeArchive(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapeArchiveAsync(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) *DeleteTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapeArchive", input)
	return &DeleteTapeArchiveFuture{Future: future}
}

func (a *stub) DeleteTapePool(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapePoolAsync(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) *DeleteTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapePool", input)
	return &DeleteTapePoolFuture{Future: future}
}

func (a *stub) DeleteVolume(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVolumeAsync(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) *DeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteVolume", input)
	return &DeleteVolumeFuture{Future: future}
}

func (a *stub) DescribeAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) *DescribeAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeAvailabilityMonitorTest", input)
	return &DescribeAvailabilityMonitorTestFuture{Future: future}
}

func (a *stub) DescribeBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) *DescribeBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimit", input)
	return &DescribeBandwidthRateLimitFuture{Future: future}
}

func (a *stub) DescribeBandwidthRateLimitSchedule(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitScheduleInput) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimitSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBandwidthRateLimitScheduleAsync(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitScheduleInput) *DescribeBandwidthRateLimitScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimitSchedule", input)
	return &DescribeBandwidthRateLimitScheduleFuture{Future: future}
}

func (a *stub) DescribeCache(ctx workflow.Context, input *storagegateway.DescribeCacheInput) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheAsync(ctx workflow.Context, input *storagegateway.DescribeCacheInput) *DescribeCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCache", input)
	return &DescribeCacheFuture{Future: future}
}

func (a *stub) DescribeCachediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCachediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCachediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) *DescribeCachediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCachediSCSIVolumes", input)
	return &DescribeCachediSCSIVolumesFuture{Future: future}
}

func (a *stub) DescribeChapCredentials(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) *DescribeChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeChapCredentials", input)
	return &DescribeChapCredentialsFuture{Future: future}
}

func (a *stub) DescribeGatewayInformation(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayInformationAsync(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) *DescribeGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeGatewayInformation", input)
	return &DescribeGatewayInformationFuture{Future: future}
}

func (a *stub) DescribeMaintenanceStartTime(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) *DescribeMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeMaintenanceStartTime", input)
	return &DescribeMaintenanceStartTimeFuture{Future: future}
}

func (a *stub) DescribeNFSFileShares(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeNFSFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNFSFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) *DescribeNFSFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeNFSFileShares", input)
	return &DescribeNFSFileSharesFuture{Future: future}
}

func (a *stub) DescribeSMBFileShares(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSMBFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) *DescribeSMBFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBFileShares", input)
	return &DescribeSMBFileSharesFuture{Future: future}
}

func (a *stub) DescribeSMBSettings(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSMBSettingsAsync(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) *DescribeSMBSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBSettings", input)
	return &DescribeSMBSettingsFuture{Future: future}
}

func (a *stub) DescribeSnapshotSchedule(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) *DescribeSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSnapshotSchedule", input)
	return &DescribeSnapshotScheduleFuture{Future: future}
}

func (a *stub) DescribeStorediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeStorediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStorediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) *DescribeStorediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeStorediSCSIVolumes", input)
	return &DescribeStorediSCSIVolumesFuture{Future: future}
}

func (a *stub) DescribeTapeArchives(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeArchives", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapeArchivesAsync(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) *DescribeTapeArchivesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeArchives", input)
	return &DescribeTapeArchivesFuture{Future: future}
}

func (a *stub) DescribeTapeRecoveryPoints(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) *DescribeTapeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeRecoveryPoints", input)
	return &DescribeTapeRecoveryPointsFuture{Future: future}
}

func (a *stub) DescribeTapes(ctx workflow.Context, input *storagegateway.DescribeTapesInput) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapesAsync(ctx workflow.Context, input *storagegateway.DescribeTapesInput) *DescribeTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapes", input)
	return &DescribeTapesFuture{Future: future}
}

func (a *stub) DescribeUploadBuffer(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUploadBufferAsync(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) *DescribeUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeUploadBuffer", input)
	return &DescribeUploadBufferFuture{Future: future}
}

func (a *stub) DescribeVTLDevices(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeVTLDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVTLDevicesAsync(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) *DescribeVTLDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeVTLDevices", input)
	return &DescribeVTLDevicesFuture{Future: future}
}

func (a *stub) DescribeWorkingStorage(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkingStorageAsync(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) *DescribeWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeWorkingStorage", input)
	return &DescribeWorkingStorageFuture{Future: future}
}

func (a *stub) DetachVolume(ctx workflow.Context, input *storagegateway.DetachVolumeInput) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachVolumeAsync(ctx workflow.Context, input *storagegateway.DetachVolumeInput) *DetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DetachVolume", input)
	return &DetachVolumeFuture{Future: future}
}

func (a *stub) DisableGateway(ctx workflow.Context, input *storagegateway.DisableGatewayInput) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DisableGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableGatewayAsync(ctx workflow.Context, input *storagegateway.DisableGatewayInput) *DisableGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DisableGateway", input)
	return &DisableGatewayFuture{Future: future}
}

func (a *stub) JoinDomain(ctx workflow.Context, input *storagegateway.JoinDomainInput) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-JoinDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) JoinDomainAsync(ctx workflow.Context, input *storagegateway.JoinDomainInput) *JoinDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-JoinDomain", input)
	return &JoinDomainFuture{Future: future}
}

func (a *stub) ListAutomaticTapeCreationPolicies(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListAutomaticTapeCreationPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAutomaticTapeCreationPoliciesAsync(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) *ListAutomaticTapeCreationPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListAutomaticTapeCreationPolicies", input)
	return &ListAutomaticTapeCreationPoliciesFuture{Future: future}
}

func (a *stub) ListFileShares(ctx workflow.Context, input *storagegateway.ListFileSharesInput) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFileSharesAsync(ctx workflow.Context, input *storagegateway.ListFileSharesInput) *ListFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListFileShares", input)
	return &ListFileSharesFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *storagegateway.ListGatewaysInput) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *storagegateway.ListGatewaysInput) *ListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListGateways", input)
	return &ListGatewaysFuture{Future: future}
}

func (a *stub) ListLocalDisks(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListLocalDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLocalDisksAsync(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) *ListLocalDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListLocalDisks", input)
	return &ListLocalDisksFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTapePools(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapePools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTapePoolsAsync(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) *ListTapePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapePools", input)
	return &ListTapePoolsFuture{Future: future}
}

func (a *stub) ListTapes(ctx workflow.Context, input *storagegateway.ListTapesInput) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTapesAsync(ctx workflow.Context, input *storagegateway.ListTapesInput) *ListTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapes", input)
	return &ListTapesFuture{Future: future}
}

func (a *stub) ListVolumeInitiators(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeInitiators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumeInitiatorsAsync(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) *ListVolumeInitiatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeInitiators", input)
	return &ListVolumeInitiatorsFuture{Future: future}
}

func (a *stub) ListVolumeRecoveryPoints(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) *ListVolumeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeRecoveryPoints", input)
	return &ListVolumeRecoveryPointsFuture{Future: future}
}

func (a *stub) ListVolumes(ctx workflow.Context, input *storagegateway.ListVolumesInput) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumesAsync(ctx workflow.Context, input *storagegateway.ListVolumesInput) *ListVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumes", input)
	return &ListVolumesFuture{Future: future}
}

func (a *stub) NotifyWhenUploaded(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-NotifyWhenUploaded", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) NotifyWhenUploadedAsync(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) *NotifyWhenUploadedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-NotifyWhenUploaded", input)
	return &NotifyWhenUploadedFuture{Future: future}
}

func (a *stub) RefreshCache(ctx workflow.Context, input *storagegateway.RefreshCacheInput) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RefreshCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RefreshCacheAsync(ctx workflow.Context, input *storagegateway.RefreshCacheInput) *RefreshCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RefreshCache", input)
	return &RefreshCacheFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetCache(ctx workflow.Context, input *storagegateway.ResetCacheInput) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ResetCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetCacheAsync(ctx workflow.Context, input *storagegateway.ResetCacheInput) *ResetCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ResetCache", input)
	return &ResetCacheFuture{Future: future}
}

func (a *stub) RetrieveTapeArchive(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveTapeArchiveAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) *RetrieveTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeArchive", input)
	return &RetrieveTapeArchiveFuture{Future: future}
}

func (a *stub) RetrieveTapeRecoveryPoint(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveTapeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) *RetrieveTapeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeRecoveryPoint", input)
	return &RetrieveTapeRecoveryPointFuture{Future: future}
}

func (a *stub) SetLocalConsolePassword(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetLocalConsolePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetLocalConsolePasswordAsync(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) *SetLocalConsolePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetLocalConsolePassword", input)
	return &SetLocalConsolePasswordFuture{Future: future}
}

func (a *stub) SetSMBGuestPassword(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetSMBGuestPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetSMBGuestPasswordAsync(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) *SetSMBGuestPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetSMBGuestPassword", input)
	return &SetSMBGuestPasswordFuture{Future: future}
}

func (a *stub) ShutdownGateway(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ShutdownGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ShutdownGatewayAsync(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) *ShutdownGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ShutdownGateway", input)
	return &ShutdownGatewayFuture{Future: future}
}

func (a *stub) StartAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) *StartAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartAvailabilityMonitorTest", input)
	return &StartAvailabilityMonitorTestFuture{Future: future}
}

func (a *stub) StartGateway(ctx workflow.Context, input *storagegateway.StartGatewayInput) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartGatewayAsync(ctx workflow.Context, input *storagegateway.StartGatewayInput) *StartGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartGateway", input)
	return &StartGatewayFuture{Future: future}
}

func (a *stub) UpdateAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) *UpdateAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateAutomaticTapeCreationPolicy", input)
	return &UpdateAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *stub) UpdateBandwidthRateLimit(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) *UpdateBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimit", input)
	return &UpdateBandwidthRateLimitFuture{Future: future}
}

func (a *stub) UpdateBandwidthRateLimitSchedule(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitScheduleInput) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimitSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBandwidthRateLimitScheduleAsync(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitScheduleInput) *UpdateBandwidthRateLimitScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimitSchedule", input)
	return &UpdateBandwidthRateLimitScheduleFuture{Future: future}
}

func (a *stub) UpdateChapCredentials(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChapCredentialsAsync(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) *UpdateChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateChapCredentials", input)
	return &UpdateChapCredentialsFuture{Future: future}
}

func (a *stub) UpdateGatewayInformation(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayInformationAsync(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) *UpdateGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewayInformation", input)
	return &UpdateGatewayInformationFuture{Future: future}
}

func (a *stub) UpdateGatewaySoftwareNow(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewaySoftwareNow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewaySoftwareNowAsync(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) *UpdateGatewaySoftwareNowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewaySoftwareNow", input)
	return &UpdateGatewaySoftwareNowFuture{Future: future}
}

func (a *stub) UpdateMaintenanceStartTime(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) *UpdateMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateMaintenanceStartTime", input)
	return &UpdateMaintenanceStartTimeFuture{Future: future}
}

func (a *stub) UpdateNFSFileShare(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) *UpdateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateNFSFileShare", input)
	return &UpdateNFSFileShareFuture{Future: future}
}

func (a *stub) UpdateSMBFileShare(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) *UpdateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShare", input)
	return &UpdateSMBFileShareFuture{Future: future}
}

func (a *stub) UpdateSMBFileShareVisibility(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	var output storagegateway.UpdateSMBFileShareVisibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShareVisibility", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBFileShareVisibilityAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput) *UpdateSMBFileShareVisibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShareVisibility", input)
	return &UpdateSMBFileShareVisibilityFuture{Future: future}
}

func (a *stub) UpdateSMBSecurityStrategy(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBSecurityStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBSecurityStrategyAsync(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) *UpdateSMBSecurityStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBSecurityStrategy", input)
	return &UpdateSMBSecurityStrategyFuture{Future: future}
}

func (a *stub) UpdateSnapshotSchedule(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) *UpdateSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSnapshotSchedule", input)
	return &UpdateSnapshotScheduleFuture{Future: future}
}

func (a *stub) UpdateVTLDeviceType(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateVTLDeviceType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVTLDeviceTypeAsync(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) *UpdateVTLDeviceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateVTLDeviceType", input)
	return &UpdateVTLDeviceTypeFuture{Future: future}
}
