// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package storagegatewaystub

import (
	"github.com/aws/aws-sdk-go/service/storagegateway"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type StorageGatewayActivateGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayActivateGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAddCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAddCacheFuture) Get(ctx workflow.Context) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAddTagsToResourceFuture) Get(ctx workflow.Context) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAddUploadBufferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAddUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAddWorkingStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAddWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAssignTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAssignTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayAttachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayAttachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCancelArchivalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCancelArchivalFuture) Get(ctx workflow.Context) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCancelRetrievalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCancelRetrievalFuture) Get(ctx workflow.Context) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateCachediSCSIVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateCachediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateNFSFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateSMBFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateSnapshotFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateSnapshotFromVolumeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateSnapshotFromVolumeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateStorediSCSIVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateStorediSCSIVolumeFuture) Get(ctx workflow.Context) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateTapeWithBarcodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateTapeWithBarcodeFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayCreateTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayCreateTapesFuture) Get(ctx workflow.Context) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteAutomaticTapeCreationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteFileShareFuture) Get(ctx workflow.Context) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteTapeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteTapeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteTapeArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteTapePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteTapePoolFuture) Get(ctx workflow.Context) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDeleteVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDeleteVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeAvailabilityMonitorTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeCacheFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeCachediSCSIVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeCachediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeGatewayInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeMaintenanceStartTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeNFSFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeNFSFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeSMBFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeSMBFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeSMBSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeSMBSettingsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeStorediSCSIVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeStorediSCSIVolumesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeTapeArchivesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeTapeArchivesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeTapeRecoveryPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeTapeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeTapesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeUploadBufferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeUploadBufferFuture) Get(ctx workflow.Context) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeVTLDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeVTLDevicesFuture) Get(ctx workflow.Context) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDescribeWorkingStorageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDescribeWorkingStorageFuture) Get(ctx workflow.Context) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDetachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDetachVolumeFuture) Get(ctx workflow.Context) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayDisableGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayDisableGatewayFuture) Get(ctx workflow.Context) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayJoinDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayJoinDomainFuture) Get(ctx workflow.Context) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListAutomaticTapeCreationPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListAutomaticTapeCreationPoliciesFuture) Get(ctx workflow.Context) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListFileSharesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListFileSharesFuture) Get(ctx workflow.Context) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListGatewaysFuture) Get(ctx workflow.Context) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListLocalDisksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListLocalDisksFuture) Get(ctx workflow.Context) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListTagsForResourceFuture) Get(ctx workflow.Context) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListTapePoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListTapePoolsFuture) Get(ctx workflow.Context) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListTapesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListTapesFuture) Get(ctx workflow.Context) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListVolumeInitiatorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListVolumeInitiatorsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListVolumeRecoveryPointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListVolumeRecoveryPointsFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayListVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayListVolumesFuture) Get(ctx workflow.Context) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayNotifyWhenUploadedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayNotifyWhenUploadedFuture) Get(ctx workflow.Context) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayRefreshCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayRefreshCacheFuture) Get(ctx workflow.Context) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayResetCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayResetCacheFuture) Get(ctx workflow.Context) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayRetrieveTapeArchiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayRetrieveTapeArchiveFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayRetrieveTapeRecoveryPointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayRetrieveTapeRecoveryPointFuture) Get(ctx workflow.Context) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewaySetLocalConsolePasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewaySetLocalConsolePasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewaySetSMBGuestPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewaySetSMBGuestPasswordFuture) Get(ctx workflow.Context) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayShutdownGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayShutdownGatewayFuture) Get(ctx workflow.Context) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayStartAvailabilityMonitorTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayStartAvailabilityMonitorTestFuture) Get(ctx workflow.Context) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayStartGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayStartGatewayFuture) Get(ctx workflow.Context) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateAutomaticTapeCreationPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateAutomaticTapeCreationPolicyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateBandwidthRateLimitFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateBandwidthRateLimitFuture) Get(ctx workflow.Context) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateChapCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateChapCredentialsFuture) Get(ctx workflow.Context) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateGatewayInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateGatewayInformationFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateGatewaySoftwareNowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateGatewaySoftwareNowFuture) Get(ctx workflow.Context) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateMaintenanceStartTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateMaintenanceStartTimeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateNFSFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateNFSFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateSMBFileShareFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateSMBFileShareFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateSMBFileShareVisibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateSMBFileShareVisibilityFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	var output storagegateway.UpdateSMBFileShareVisibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateSMBSecurityStrategyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateSMBSecurityStrategyFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateSnapshotScheduleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateSnapshotScheduleFuture) Get(ctx workflow.Context) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StorageGatewayUpdateVTLDeviceTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StorageGatewayUpdateVTLDeviceTypeFuture) Get(ctx workflow.Context) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateGateway(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) (*storagegateway.ActivateGatewayOutput, error) {
	var output storagegateway.ActivateGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ActivateGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ActivateGatewayAsync(ctx workflow.Context, input *storagegateway.ActivateGatewayInput) *StorageGatewayActivateGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ActivateGateway", input)
	return &StorageGatewayActivateGatewayFuture{Future: future}
}

func (a *stub) AddCache(ctx workflow.Context, input *storagegateway.AddCacheInput) (*storagegateway.AddCacheOutput, error) {
	var output storagegateway.AddCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddCacheAsync(ctx workflow.Context, input *storagegateway.AddCacheInput) *StorageGatewayAddCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddCache", input)
	return &StorageGatewayAddCacheFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) (*storagegateway.AddTagsToResourceOutput, error) {
	var output storagegateway.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *storagegateway.AddTagsToResourceInput) *StorageGatewayAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddTagsToResource", input)
	return &StorageGatewayAddTagsToResourceFuture{Future: future}
}

func (a *stub) AddUploadBuffer(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) (*storagegateway.AddUploadBufferOutput, error) {
	var output storagegateway.AddUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddUploadBufferAsync(ctx workflow.Context, input *storagegateway.AddUploadBufferInput) *StorageGatewayAddUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddUploadBuffer", input)
	return &StorageGatewayAddUploadBufferFuture{Future: future}
}

func (a *stub) AddWorkingStorage(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) (*storagegateway.AddWorkingStorageOutput, error) {
	var output storagegateway.AddWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddWorkingStorageAsync(ctx workflow.Context, input *storagegateway.AddWorkingStorageInput) *StorageGatewayAddWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AddWorkingStorage", input)
	return &StorageGatewayAddWorkingStorageFuture{Future: future}
}

func (a *stub) AssignTapePool(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) (*storagegateway.AssignTapePoolOutput, error) {
	var output storagegateway.AssignTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AssignTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignTapePoolAsync(ctx workflow.Context, input *storagegateway.AssignTapePoolInput) *StorageGatewayAssignTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AssignTapePool", input)
	return &StorageGatewayAssignTapePoolFuture{Future: future}
}

func (a *stub) AttachVolume(ctx workflow.Context, input *storagegateway.AttachVolumeInput) (*storagegateway.AttachVolumeOutput, error) {
	var output storagegateway.AttachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachVolumeAsync(ctx workflow.Context, input *storagegateway.AttachVolumeInput) *StorageGatewayAttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-AttachVolume", input)
	return &StorageGatewayAttachVolumeFuture{Future: future}
}

func (a *stub) CancelArchival(ctx workflow.Context, input *storagegateway.CancelArchivalInput) (*storagegateway.CancelArchivalOutput, error) {
	var output storagegateway.CancelArchivalOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelArchival", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelArchivalAsync(ctx workflow.Context, input *storagegateway.CancelArchivalInput) *StorageGatewayCancelArchivalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelArchival", input)
	return &StorageGatewayCancelArchivalFuture{Future: future}
}

func (a *stub) CancelRetrieval(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) (*storagegateway.CancelRetrievalOutput, error) {
	var output storagegateway.CancelRetrievalOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelRetrieval", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelRetrievalAsync(ctx workflow.Context, input *storagegateway.CancelRetrievalInput) *StorageGatewayCancelRetrievalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CancelRetrieval", input)
	return &StorageGatewayCancelRetrievalFuture{Future: future}
}

func (a *stub) CreateCachediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	var output storagegateway.CreateCachediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateCachediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCachediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateCachediSCSIVolumeInput) *StorageGatewayCreateCachediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateCachediSCSIVolume", input)
	return &StorageGatewayCreateCachediSCSIVolumeFuture{Future: future}
}

func (a *stub) CreateNFSFileShare(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) (*storagegateway.CreateNFSFileShareOutput, error) {
	var output storagegateway.CreateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.CreateNFSFileShareInput) *StorageGatewayCreateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateNFSFileShare", input)
	return &StorageGatewayCreateNFSFileShareFuture{Future: future}
}

func (a *stub) CreateSMBFileShare(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) (*storagegateway.CreateSMBFileShareOutput, error) {
	var output storagegateway.CreateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.CreateSMBFileShareInput) *StorageGatewayCreateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSMBFileShare", input)
	return &StorageGatewayCreateSMBFileShareFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) (*storagegateway.CreateSnapshotOutput, error) {
	var output storagegateway.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotInput) *StorageGatewayCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshot", input)
	return &StorageGatewayCreateSnapshotFuture{Future: future}
}

func (a *stub) CreateSnapshotFromVolumeRecoveryPoint(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	var output storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshotFromVolumeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotFromVolumeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) *StorageGatewayCreateSnapshotFromVolumeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateSnapshotFromVolumeRecoveryPoint", input)
	return &StorageGatewayCreateSnapshotFromVolumeRecoveryPointFuture{Future: future}
}

func (a *stub) CreateStorediSCSIVolume(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	var output storagegateway.CreateStorediSCSIVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateStorediSCSIVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStorediSCSIVolumeAsync(ctx workflow.Context, input *storagegateway.CreateStorediSCSIVolumeInput) *StorageGatewayCreateStorediSCSIVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateStorediSCSIVolume", input)
	return &StorageGatewayCreateStorediSCSIVolumeFuture{Future: future}
}

func (a *stub) CreateTapePool(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) (*storagegateway.CreateTapePoolOutput, error) {
	var output storagegateway.CreateTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapePoolAsync(ctx workflow.Context, input *storagegateway.CreateTapePoolInput) *StorageGatewayCreateTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapePool", input)
	return &StorageGatewayCreateTapePoolFuture{Future: future}
}

func (a *stub) CreateTapeWithBarcode(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	var output storagegateway.CreateTapeWithBarcodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapeWithBarcode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapeWithBarcodeAsync(ctx workflow.Context, input *storagegateway.CreateTapeWithBarcodeInput) *StorageGatewayCreateTapeWithBarcodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapeWithBarcode", input)
	return &StorageGatewayCreateTapeWithBarcodeFuture{Future: future}
}

func (a *stub) CreateTapes(ctx workflow.Context, input *storagegateway.CreateTapesInput) (*storagegateway.CreateTapesOutput, error) {
	var output storagegateway.CreateTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTapesAsync(ctx workflow.Context, input *storagegateway.CreateTapesInput) *StorageGatewayCreateTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-CreateTapes", input)
	return &StorageGatewayCreateTapesFuture{Future: future}
}

func (a *stub) DeleteAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.DeleteAutomaticTapeCreationPolicyInput) *StorageGatewayDeleteAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteAutomaticTapeCreationPolicy", input)
	return &StorageGatewayDeleteAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *stub) DeleteBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	var output storagegateway.DeleteBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DeleteBandwidthRateLimitInput) *StorageGatewayDeleteBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteBandwidthRateLimit", input)
	return &StorageGatewayDeleteBandwidthRateLimitFuture{Future: future}
}

func (a *stub) DeleteChapCredentials(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) (*storagegateway.DeleteChapCredentialsOutput, error) {
	var output storagegateway.DeleteChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DeleteChapCredentialsInput) *StorageGatewayDeleteChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteChapCredentials", input)
	return &StorageGatewayDeleteChapCredentialsFuture{Future: future}
}

func (a *stub) DeleteFileShare(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) (*storagegateway.DeleteFileShareOutput, error) {
	var output storagegateway.DeleteFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFileShareAsync(ctx workflow.Context, input *storagegateway.DeleteFileShareInput) *StorageGatewayDeleteFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteFileShare", input)
	return &StorageGatewayDeleteFileShareFuture{Future: future}
}

func (a *stub) DeleteGateway(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) (*storagegateway.DeleteGatewayOutput, error) {
	var output storagegateway.DeleteGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayAsync(ctx workflow.Context, input *storagegateway.DeleteGatewayInput) *StorageGatewayDeleteGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteGateway", input)
	return &StorageGatewayDeleteGatewayFuture{Future: future}
}

func (a *stub) DeleteSnapshotSchedule(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	var output storagegateway.DeleteSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DeleteSnapshotScheduleInput) *StorageGatewayDeleteSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteSnapshotSchedule", input)
	return &StorageGatewayDeleteSnapshotScheduleFuture{Future: future}
}

func (a *stub) DeleteTape(ctx workflow.Context, input *storagegateway.DeleteTapeInput) (*storagegateway.DeleteTapeOutput, error) {
	var output storagegateway.DeleteTapeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTape", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapeAsync(ctx workflow.Context, input *storagegateway.DeleteTapeInput) *StorageGatewayDeleteTapeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTape", input)
	return &StorageGatewayDeleteTapeFuture{Future: future}
}

func (a *stub) DeleteTapeArchive(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) (*storagegateway.DeleteTapeArchiveOutput, error) {
	var output storagegateway.DeleteTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapeArchiveAsync(ctx workflow.Context, input *storagegateway.DeleteTapeArchiveInput) *StorageGatewayDeleteTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapeArchive", input)
	return &StorageGatewayDeleteTapeArchiveFuture{Future: future}
}

func (a *stub) DeleteTapePool(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) (*storagegateway.DeleteTapePoolOutput, error) {
	var output storagegateway.DeleteTapePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTapePoolAsync(ctx workflow.Context, input *storagegateway.DeleteTapePoolInput) *StorageGatewayDeleteTapePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteTapePool", input)
	return &StorageGatewayDeleteTapePoolFuture{Future: future}
}

func (a *stub) DeleteVolume(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) (*storagegateway.DeleteVolumeOutput, error) {
	var output storagegateway.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVolumeAsync(ctx workflow.Context, input *storagegateway.DeleteVolumeInput) *StorageGatewayDeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DeleteVolume", input)
	return &StorageGatewayDeleteVolumeFuture{Future: future}
}

func (a *stub) DescribeAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	var output storagegateway.DescribeAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.DescribeAvailabilityMonitorTestInput) *StorageGatewayDescribeAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeAvailabilityMonitorTest", input)
	return &StorageGatewayDescribeAvailabilityMonitorTestFuture{Future: future}
}

func (a *stub) DescribeBandwidthRateLimit(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	var output storagegateway.DescribeBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.DescribeBandwidthRateLimitInput) *StorageGatewayDescribeBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeBandwidthRateLimit", input)
	return &StorageGatewayDescribeBandwidthRateLimitFuture{Future: future}
}

func (a *stub) DescribeCache(ctx workflow.Context, input *storagegateway.DescribeCacheInput) (*storagegateway.DescribeCacheOutput, error) {
	var output storagegateway.DescribeCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCacheAsync(ctx workflow.Context, input *storagegateway.DescribeCacheInput) *StorageGatewayDescribeCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCache", input)
	return &StorageGatewayDescribeCacheFuture{Future: future}
}

func (a *stub) DescribeCachediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeCachediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCachediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCachediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeCachediSCSIVolumesInput) *StorageGatewayDescribeCachediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeCachediSCSIVolumes", input)
	return &StorageGatewayDescribeCachediSCSIVolumesFuture{Future: future}
}

func (a *stub) DescribeChapCredentials(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) (*storagegateway.DescribeChapCredentialsOutput, error) {
	var output storagegateway.DescribeChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChapCredentialsAsync(ctx workflow.Context, input *storagegateway.DescribeChapCredentialsInput) *StorageGatewayDescribeChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeChapCredentials", input)
	return &StorageGatewayDescribeChapCredentialsFuture{Future: future}
}

func (a *stub) DescribeGatewayInformation(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) (*storagegateway.DescribeGatewayInformationOutput, error) {
	var output storagegateway.DescribeGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayInformationAsync(ctx workflow.Context, input *storagegateway.DescribeGatewayInformationInput) *StorageGatewayDescribeGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeGatewayInformation", input)
	return &StorageGatewayDescribeGatewayInformationFuture{Future: future}
}

func (a *stub) DescribeMaintenanceStartTime(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	var output storagegateway.DescribeMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.DescribeMaintenanceStartTimeInput) *StorageGatewayDescribeMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeMaintenanceStartTime", input)
	return &StorageGatewayDescribeMaintenanceStartTimeFuture{Future: future}
}

func (a *stub) DescribeNFSFileShares(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	var output storagegateway.DescribeNFSFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeNFSFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNFSFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeNFSFileSharesInput) *StorageGatewayDescribeNFSFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeNFSFileShares", input)
	return &StorageGatewayDescribeNFSFileSharesFuture{Future: future}
}

func (a *stub) DescribeSMBFileShares(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	var output storagegateway.DescribeSMBFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSMBFileSharesAsync(ctx workflow.Context, input *storagegateway.DescribeSMBFileSharesInput) *StorageGatewayDescribeSMBFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBFileShares", input)
	return &StorageGatewayDescribeSMBFileSharesFuture{Future: future}
}

func (a *stub) DescribeSMBSettings(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) (*storagegateway.DescribeSMBSettingsOutput, error) {
	var output storagegateway.DescribeSMBSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSMBSettingsAsync(ctx workflow.Context, input *storagegateway.DescribeSMBSettingsInput) *StorageGatewayDescribeSMBSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSMBSettings", input)
	return &StorageGatewayDescribeSMBSettingsFuture{Future: future}
}

func (a *stub) DescribeSnapshotSchedule(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	var output storagegateway.DescribeSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.DescribeSnapshotScheduleInput) *StorageGatewayDescribeSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeSnapshotSchedule", input)
	return &StorageGatewayDescribeSnapshotScheduleFuture{Future: future}
}

func (a *stub) DescribeStorediSCSIVolumes(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	var output storagegateway.DescribeStorediSCSIVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeStorediSCSIVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStorediSCSIVolumesAsync(ctx workflow.Context, input *storagegateway.DescribeStorediSCSIVolumesInput) *StorageGatewayDescribeStorediSCSIVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeStorediSCSIVolumes", input)
	return &StorageGatewayDescribeStorediSCSIVolumesFuture{Future: future}
}

func (a *stub) DescribeTapeArchives(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) (*storagegateway.DescribeTapeArchivesOutput, error) {
	var output storagegateway.DescribeTapeArchivesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeArchives", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapeArchivesAsync(ctx workflow.Context, input *storagegateway.DescribeTapeArchivesInput) *StorageGatewayDescribeTapeArchivesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeArchives", input)
	return &StorageGatewayDescribeTapeArchivesFuture{Future: future}
}

func (a *stub) DescribeTapeRecoveryPoints(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	var output storagegateway.DescribeTapeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.DescribeTapeRecoveryPointsInput) *StorageGatewayDescribeTapeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapeRecoveryPoints", input)
	return &StorageGatewayDescribeTapeRecoveryPointsFuture{Future: future}
}

func (a *stub) DescribeTapes(ctx workflow.Context, input *storagegateway.DescribeTapesInput) (*storagegateway.DescribeTapesOutput, error) {
	var output storagegateway.DescribeTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTapesAsync(ctx workflow.Context, input *storagegateway.DescribeTapesInput) *StorageGatewayDescribeTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeTapes", input)
	return &StorageGatewayDescribeTapesFuture{Future: future}
}

func (a *stub) DescribeUploadBuffer(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) (*storagegateway.DescribeUploadBufferOutput, error) {
	var output storagegateway.DescribeUploadBufferOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeUploadBuffer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUploadBufferAsync(ctx workflow.Context, input *storagegateway.DescribeUploadBufferInput) *StorageGatewayDescribeUploadBufferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeUploadBuffer", input)
	return &StorageGatewayDescribeUploadBufferFuture{Future: future}
}

func (a *stub) DescribeVTLDevices(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) (*storagegateway.DescribeVTLDevicesOutput, error) {
	var output storagegateway.DescribeVTLDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeVTLDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVTLDevicesAsync(ctx workflow.Context, input *storagegateway.DescribeVTLDevicesInput) *StorageGatewayDescribeVTLDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeVTLDevices", input)
	return &StorageGatewayDescribeVTLDevicesFuture{Future: future}
}

func (a *stub) DescribeWorkingStorage(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) (*storagegateway.DescribeWorkingStorageOutput, error) {
	var output storagegateway.DescribeWorkingStorageOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeWorkingStorage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkingStorageAsync(ctx workflow.Context, input *storagegateway.DescribeWorkingStorageInput) *StorageGatewayDescribeWorkingStorageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DescribeWorkingStorage", input)
	return &StorageGatewayDescribeWorkingStorageFuture{Future: future}
}

func (a *stub) DetachVolume(ctx workflow.Context, input *storagegateway.DetachVolumeInput) (*storagegateway.DetachVolumeOutput, error) {
	var output storagegateway.DetachVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachVolumeAsync(ctx workflow.Context, input *storagegateway.DetachVolumeInput) *StorageGatewayDetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DetachVolume", input)
	return &StorageGatewayDetachVolumeFuture{Future: future}
}

func (a *stub) DisableGateway(ctx workflow.Context, input *storagegateway.DisableGatewayInput) (*storagegateway.DisableGatewayOutput, error) {
	var output storagegateway.DisableGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-DisableGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableGatewayAsync(ctx workflow.Context, input *storagegateway.DisableGatewayInput) *StorageGatewayDisableGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-DisableGateway", input)
	return &StorageGatewayDisableGatewayFuture{Future: future}
}

func (a *stub) JoinDomain(ctx workflow.Context, input *storagegateway.JoinDomainInput) (*storagegateway.JoinDomainOutput, error) {
	var output storagegateway.JoinDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-JoinDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) JoinDomainAsync(ctx workflow.Context, input *storagegateway.JoinDomainInput) *StorageGatewayJoinDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-JoinDomain", input)
	return &StorageGatewayJoinDomainFuture{Future: future}
}

func (a *stub) ListAutomaticTapeCreationPolicies(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	var output storagegateway.ListAutomaticTapeCreationPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListAutomaticTapeCreationPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAutomaticTapeCreationPoliciesAsync(ctx workflow.Context, input *storagegateway.ListAutomaticTapeCreationPoliciesInput) *StorageGatewayListAutomaticTapeCreationPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListAutomaticTapeCreationPolicies", input)
	return &StorageGatewayListAutomaticTapeCreationPoliciesFuture{Future: future}
}

func (a *stub) ListFileShares(ctx workflow.Context, input *storagegateway.ListFileSharesInput) (*storagegateway.ListFileSharesOutput, error) {
	var output storagegateway.ListFileSharesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListFileShares", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFileSharesAsync(ctx workflow.Context, input *storagegateway.ListFileSharesInput) *StorageGatewayListFileSharesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListFileShares", input)
	return &StorageGatewayListFileSharesFuture{Future: future}
}

func (a *stub) ListGateways(ctx workflow.Context, input *storagegateway.ListGatewaysInput) (*storagegateway.ListGatewaysOutput, error) {
	var output storagegateway.ListGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewaysAsync(ctx workflow.Context, input *storagegateway.ListGatewaysInput) *StorageGatewayListGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListGateways", input)
	return &StorageGatewayListGatewaysFuture{Future: future}
}

func (a *stub) ListLocalDisks(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) (*storagegateway.ListLocalDisksOutput, error) {
	var output storagegateway.ListLocalDisksOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListLocalDisks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLocalDisksAsync(ctx workflow.Context, input *storagegateway.ListLocalDisksInput) *StorageGatewayListLocalDisksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListLocalDisks", input)
	return &StorageGatewayListLocalDisksFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) (*storagegateway.ListTagsForResourceOutput, error) {
	var output storagegateway.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *storagegateway.ListTagsForResourceInput) *StorageGatewayListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTagsForResource", input)
	return &StorageGatewayListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTapePools(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) (*storagegateway.ListTapePoolsOutput, error) {
	var output storagegateway.ListTapePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapePools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTapePoolsAsync(ctx workflow.Context, input *storagegateway.ListTapePoolsInput) *StorageGatewayListTapePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapePools", input)
	return &StorageGatewayListTapePoolsFuture{Future: future}
}

func (a *stub) ListTapes(ctx workflow.Context, input *storagegateway.ListTapesInput) (*storagegateway.ListTapesOutput, error) {
	var output storagegateway.ListTapesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTapesAsync(ctx workflow.Context, input *storagegateway.ListTapesInput) *StorageGatewayListTapesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListTapes", input)
	return &StorageGatewayListTapesFuture{Future: future}
}

func (a *stub) ListVolumeInitiators(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	var output storagegateway.ListVolumeInitiatorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeInitiators", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumeInitiatorsAsync(ctx workflow.Context, input *storagegateway.ListVolumeInitiatorsInput) *StorageGatewayListVolumeInitiatorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeInitiators", input)
	return &StorageGatewayListVolumeInitiatorsFuture{Future: future}
}

func (a *stub) ListVolumeRecoveryPoints(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	var output storagegateway.ListVolumeRecoveryPointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeRecoveryPoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumeRecoveryPointsAsync(ctx workflow.Context, input *storagegateway.ListVolumeRecoveryPointsInput) *StorageGatewayListVolumeRecoveryPointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumeRecoveryPoints", input)
	return &StorageGatewayListVolumeRecoveryPointsFuture{Future: future}
}

func (a *stub) ListVolumes(ctx workflow.Context, input *storagegateway.ListVolumesInput) (*storagegateway.ListVolumesOutput, error) {
	var output storagegateway.ListVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVolumesAsync(ctx workflow.Context, input *storagegateway.ListVolumesInput) *StorageGatewayListVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ListVolumes", input)
	return &StorageGatewayListVolumesFuture{Future: future}
}

func (a *stub) NotifyWhenUploaded(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) (*storagegateway.NotifyWhenUploadedOutput, error) {
	var output storagegateway.NotifyWhenUploadedOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-NotifyWhenUploaded", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) NotifyWhenUploadedAsync(ctx workflow.Context, input *storagegateway.NotifyWhenUploadedInput) *StorageGatewayNotifyWhenUploadedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-NotifyWhenUploaded", input)
	return &StorageGatewayNotifyWhenUploadedFuture{Future: future}
}

func (a *stub) RefreshCache(ctx workflow.Context, input *storagegateway.RefreshCacheInput) (*storagegateway.RefreshCacheOutput, error) {
	var output storagegateway.RefreshCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RefreshCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RefreshCacheAsync(ctx workflow.Context, input *storagegateway.RefreshCacheInput) *StorageGatewayRefreshCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RefreshCache", input)
	return &StorageGatewayRefreshCacheFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	var output storagegateway.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *storagegateway.RemoveTagsFromResourceInput) *StorageGatewayRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RemoveTagsFromResource", input)
	return &StorageGatewayRemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetCache(ctx workflow.Context, input *storagegateway.ResetCacheInput) (*storagegateway.ResetCacheOutput, error) {
	var output storagegateway.ResetCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ResetCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetCacheAsync(ctx workflow.Context, input *storagegateway.ResetCacheInput) *StorageGatewayResetCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ResetCache", input)
	return &StorageGatewayResetCacheFuture{Future: future}
}

func (a *stub) RetrieveTapeArchive(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	var output storagegateway.RetrieveTapeArchiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeArchive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveTapeArchiveAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeArchiveInput) *StorageGatewayRetrieveTapeArchiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeArchive", input)
	return &StorageGatewayRetrieveTapeArchiveFuture{Future: future}
}

func (a *stub) RetrieveTapeRecoveryPoint(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	var output storagegateway.RetrieveTapeRecoveryPointOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeRecoveryPoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveTapeRecoveryPointAsync(ctx workflow.Context, input *storagegateway.RetrieveTapeRecoveryPointInput) *StorageGatewayRetrieveTapeRecoveryPointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-RetrieveTapeRecoveryPoint", input)
	return &StorageGatewayRetrieveTapeRecoveryPointFuture{Future: future}
}

func (a *stub) SetLocalConsolePassword(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	var output storagegateway.SetLocalConsolePasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetLocalConsolePassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetLocalConsolePasswordAsync(ctx workflow.Context, input *storagegateway.SetLocalConsolePasswordInput) *StorageGatewaySetLocalConsolePasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetLocalConsolePassword", input)
	return &StorageGatewaySetLocalConsolePasswordFuture{Future: future}
}

func (a *stub) SetSMBGuestPassword(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	var output storagegateway.SetSMBGuestPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetSMBGuestPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetSMBGuestPasswordAsync(ctx workflow.Context, input *storagegateway.SetSMBGuestPasswordInput) *StorageGatewaySetSMBGuestPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-SetSMBGuestPassword", input)
	return &StorageGatewaySetSMBGuestPasswordFuture{Future: future}
}

func (a *stub) ShutdownGateway(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) (*storagegateway.ShutdownGatewayOutput, error) {
	var output storagegateway.ShutdownGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-ShutdownGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ShutdownGatewayAsync(ctx workflow.Context, input *storagegateway.ShutdownGatewayInput) *StorageGatewayShutdownGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-ShutdownGateway", input)
	return &StorageGatewayShutdownGatewayFuture{Future: future}
}

func (a *stub) StartAvailabilityMonitorTest(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	var output storagegateway.StartAvailabilityMonitorTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartAvailabilityMonitorTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAvailabilityMonitorTestAsync(ctx workflow.Context, input *storagegateway.StartAvailabilityMonitorTestInput) *StorageGatewayStartAvailabilityMonitorTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartAvailabilityMonitorTest", input)
	return &StorageGatewayStartAvailabilityMonitorTestFuture{Future: future}
}

func (a *stub) StartGateway(ctx workflow.Context, input *storagegateway.StartGatewayInput) (*storagegateway.StartGatewayOutput, error) {
	var output storagegateway.StartGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartGatewayAsync(ctx workflow.Context, input *storagegateway.StartGatewayInput) *StorageGatewayStartGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-StartGateway", input)
	return &StorageGatewayStartGatewayFuture{Future: future}
}

func (a *stub) UpdateAutomaticTapeCreationPolicy(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	var output storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateAutomaticTapeCreationPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAutomaticTapeCreationPolicyAsync(ctx workflow.Context, input *storagegateway.UpdateAutomaticTapeCreationPolicyInput) *StorageGatewayUpdateAutomaticTapeCreationPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateAutomaticTapeCreationPolicy", input)
	return &StorageGatewayUpdateAutomaticTapeCreationPolicyFuture{Future: future}
}

func (a *stub) UpdateBandwidthRateLimit(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	var output storagegateway.UpdateBandwidthRateLimitOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBandwidthRateLimitAsync(ctx workflow.Context, input *storagegateway.UpdateBandwidthRateLimitInput) *StorageGatewayUpdateBandwidthRateLimitFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateBandwidthRateLimit", input)
	return &StorageGatewayUpdateBandwidthRateLimitFuture{Future: future}
}

func (a *stub) UpdateChapCredentials(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) (*storagegateway.UpdateChapCredentialsOutput, error) {
	var output storagegateway.UpdateChapCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateChapCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChapCredentialsAsync(ctx workflow.Context, input *storagegateway.UpdateChapCredentialsInput) *StorageGatewayUpdateChapCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateChapCredentials", input)
	return &StorageGatewayUpdateChapCredentialsFuture{Future: future}
}

func (a *stub) UpdateGatewayInformation(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) (*storagegateway.UpdateGatewayInformationOutput, error) {
	var output storagegateway.UpdateGatewayInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewayInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayInformationAsync(ctx workflow.Context, input *storagegateway.UpdateGatewayInformationInput) *StorageGatewayUpdateGatewayInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewayInformation", input)
	return &StorageGatewayUpdateGatewayInformationFuture{Future: future}
}

func (a *stub) UpdateGatewaySoftwareNow(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	var output storagegateway.UpdateGatewaySoftwareNowOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewaySoftwareNow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewaySoftwareNowAsync(ctx workflow.Context, input *storagegateway.UpdateGatewaySoftwareNowInput) *StorageGatewayUpdateGatewaySoftwareNowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateGatewaySoftwareNow", input)
	return &StorageGatewayUpdateGatewaySoftwareNowFuture{Future: future}
}

func (a *stub) UpdateMaintenanceStartTime(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	var output storagegateway.UpdateMaintenanceStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateMaintenanceStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMaintenanceStartTimeAsync(ctx workflow.Context, input *storagegateway.UpdateMaintenanceStartTimeInput) *StorageGatewayUpdateMaintenanceStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateMaintenanceStartTime", input)
	return &StorageGatewayUpdateMaintenanceStartTimeFuture{Future: future}
}

func (a *stub) UpdateNFSFileShare(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) (*storagegateway.UpdateNFSFileShareOutput, error) {
	var output storagegateway.UpdateNFSFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateNFSFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNFSFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateNFSFileShareInput) *StorageGatewayUpdateNFSFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateNFSFileShare", input)
	return &StorageGatewayUpdateNFSFileShareFuture{Future: future}
}

func (a *stub) UpdateSMBFileShare(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) (*storagegateway.UpdateSMBFileShareOutput, error) {
	var output storagegateway.UpdateSMBFileShareOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShare", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBFileShareAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareInput) *StorageGatewayUpdateSMBFileShareFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShare", input)
	return &StorageGatewayUpdateSMBFileShareFuture{Future: future}
}

func (a *stub) UpdateSMBFileShareVisibility(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	var output storagegateway.UpdateSMBFileShareVisibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShareVisibility", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBFileShareVisibilityAsync(ctx workflow.Context, input *storagegateway.UpdateSMBFileShareVisibilityInput) *StorageGatewayUpdateSMBFileShareVisibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBFileShareVisibility", input)
	return &StorageGatewayUpdateSMBFileShareVisibilityFuture{Future: future}
}

func (a *stub) UpdateSMBSecurityStrategy(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	var output storagegateway.UpdateSMBSecurityStrategyOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBSecurityStrategy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSMBSecurityStrategyAsync(ctx workflow.Context, input *storagegateway.UpdateSMBSecurityStrategyInput) *StorageGatewayUpdateSMBSecurityStrategyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSMBSecurityStrategy", input)
	return &StorageGatewayUpdateSMBSecurityStrategyFuture{Future: future}
}

func (a *stub) UpdateSnapshotSchedule(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	var output storagegateway.UpdateSnapshotScheduleOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSnapshotSchedule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSnapshotScheduleAsync(ctx workflow.Context, input *storagegateway.UpdateSnapshotScheduleInput) *StorageGatewayUpdateSnapshotScheduleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateSnapshotSchedule", input)
	return &StorageGatewayUpdateSnapshotScheduleFuture{Future: future}
}

func (a *stub) UpdateVTLDeviceType(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	var output storagegateway.UpdateVTLDeviceTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateVTLDeviceType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVTLDeviceTypeAsync(ctx workflow.Context, input *storagegateway.UpdateVTLDeviceTypeInput) *StorageGatewayUpdateVTLDeviceTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-storagegateway-UpdateVTLDeviceType", input)
	return &StorageGatewayUpdateVTLDeviceTypeFuture{Future: future}
}
