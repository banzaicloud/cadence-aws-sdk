// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package costexplorerstub

import (
	"github.com/aws/aws-sdk-go/service/costexplorer"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateAnomalyMonitorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	var output costexplorer.CreateAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAnomalySubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	var output costexplorer.CreateAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCostCategoryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	var output costexplorer.CreateCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAnomalyMonitorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	var output costexplorer.DeleteAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAnomalySubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	var output costexplorer.DeleteAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCostCategoryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	var output costexplorer.DeleteCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCostCategoryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	var output costexplorer.DescribeCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAnomaliesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAnomaliesFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomaliesOutput, error) {
	var output costexplorer.GetAnomaliesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAnomalyMonitorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAnomalyMonitorsFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	var output costexplorer.GetAnomalyMonitorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAnomalySubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAnomalySubscriptionsFuture) Get(ctx workflow.Context) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	var output costexplorer.GetAnomalySubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCostAndUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCostAndUsageFuture) Get(ctx workflow.Context) (*costexplorer.GetCostAndUsageOutput, error) {
	var output costexplorer.GetCostAndUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCostAndUsageWithResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCostAndUsageWithResourcesFuture) Get(ctx workflow.Context) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	var output costexplorer.GetCostAndUsageWithResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCostCategoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCostCategoriesFuture) Get(ctx workflow.Context) (*costexplorer.GetCostCategoriesOutput, error) {
	var output costexplorer.GetCostCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCostForecastFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCostForecastFuture) Get(ctx workflow.Context) (*costexplorer.GetCostForecastOutput, error) {
	var output costexplorer.GetCostForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDimensionValuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDimensionValuesFuture) Get(ctx workflow.Context) (*costexplorer.GetDimensionValuesOutput, error) {
	var output costexplorer.GetDimensionValuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReservationCoverageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReservationCoverageFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationCoverageOutput, error) {
	var output costexplorer.GetReservationCoverageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReservationPurchaseRecommendationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReservationPurchaseRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	var output costexplorer.GetReservationPurchaseRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReservationUtilizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReservationUtilizationFuture) Get(ctx workflow.Context) (*costexplorer.GetReservationUtilizationOutput, error) {
	var output costexplorer.GetReservationUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRightsizingRecommendationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRightsizingRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	var output costexplorer.GetRightsizingRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSavingsPlansCoverageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSavingsPlansCoverageFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	var output costexplorer.GetSavingsPlansCoverageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSavingsPlansPurchaseRecommendationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSavingsPlansPurchaseRecommendationFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	var output costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSavingsPlansUtilizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSavingsPlansUtilizationFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSavingsPlansUtilizationDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSavingsPlansUtilizationDetailsFuture) Get(ctx workflow.Context) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTagsFuture) Get(ctx workflow.Context) (*costexplorer.GetTagsOutput, error) {
	var output costexplorer.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsageForecastFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsageForecastFuture) Get(ctx workflow.Context) (*costexplorer.GetUsageForecastOutput, error) {
	var output costexplorer.GetUsageForecastOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCostCategoryDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCostCategoryDefinitionsFuture) Get(ctx workflow.Context) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	var output costexplorer.ListCostCategoryDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ProvideAnomalyFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ProvideAnomalyFeedbackFuture) Get(ctx workflow.Context) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	var output costexplorer.ProvideAnomalyFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAnomalyMonitorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAnomalyMonitorFuture) Get(ctx workflow.Context) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	var output costexplorer.UpdateAnomalyMonitorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAnomalySubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAnomalySubscriptionFuture) Get(ctx workflow.Context) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	var output costexplorer.UpdateAnomalySubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCostCategoryDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCostCategoryDefinitionFuture) Get(ctx workflow.Context) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	var output costexplorer.UpdateCostCategoryDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAnomalyMonitor(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	var output costexplorer.CreateAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.CreateAnomalyMonitorInput) *CreateAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateAnomalyMonitor", input)
	return &CreateAnomalyMonitorFuture{Future: future}
}

func (a *stub) CreateAnomalySubscription(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	var output costexplorer.CreateAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.CreateAnomalySubscriptionInput) *CreateAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateAnomalySubscription", input)
	return &CreateAnomalySubscriptionFuture{Future: future}
}

func (a *stub) CreateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	var output costexplorer.CreateCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.CreateCostCategoryDefinitionInput) *CreateCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-CreateCostCategoryDefinition", input)
	return &CreateCostCategoryDefinitionFuture{Future: future}
}

func (a *stub) DeleteAnomalyMonitor(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	var output costexplorer.DeleteAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalyMonitorInput) *DeleteAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteAnomalyMonitor", input)
	return &DeleteAnomalyMonitorFuture{Future: future}
}

func (a *stub) DeleteAnomalySubscription(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	var output costexplorer.DeleteAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.DeleteAnomalySubscriptionInput) *DeleteAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteAnomalySubscription", input)
	return &DeleteAnomalySubscriptionFuture{Future: future}
}

func (a *stub) DeleteCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	var output costexplorer.DeleteCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DeleteCostCategoryDefinitionInput) *DeleteCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-DeleteCostCategoryDefinition", input)
	return &DeleteCostCategoryDefinitionFuture{Future: future}
}

func (a *stub) DescribeCostCategoryDefinition(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	var output costexplorer.DescribeCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-DescribeCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.DescribeCostCategoryDefinitionInput) *DescribeCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-DescribeCostCategoryDefinition", input)
	return &DescribeCostCategoryDefinitionFuture{Future: future}
}

func (a *stub) GetAnomalies(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) (*costexplorer.GetAnomaliesOutput, error) {
	var output costexplorer.GetAnomaliesOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAnomaliesAsync(ctx workflow.Context, input *costexplorer.GetAnomaliesInput) *GetAnomaliesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalies", input)
	return &GetAnomaliesFuture{Future: future}
}

func (a *stub) GetAnomalyMonitors(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	var output costexplorer.GetAnomalyMonitorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalyMonitors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAnomalyMonitorsAsync(ctx workflow.Context, input *costexplorer.GetAnomalyMonitorsInput) *GetAnomalyMonitorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalyMonitors", input)
	return &GetAnomalyMonitorsFuture{Future: future}
}

func (a *stub) GetAnomalySubscriptions(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	var output costexplorer.GetAnomalySubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalySubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAnomalySubscriptionsAsync(ctx workflow.Context, input *costexplorer.GetAnomalySubscriptionsInput) *GetAnomalySubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetAnomalySubscriptions", input)
	return &GetAnomalySubscriptionsFuture{Future: future}
}

func (a *stub) GetCostAndUsage(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	var output costexplorer.GetCostAndUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostAndUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCostAndUsageAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageInput) *GetCostAndUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostAndUsage", input)
	return &GetCostAndUsageFuture{Future: future}
}

func (a *stub) GetCostAndUsageWithResources(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	var output costexplorer.GetCostAndUsageWithResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostAndUsageWithResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCostAndUsageWithResourcesAsync(ctx workflow.Context, input *costexplorer.GetCostAndUsageWithResourcesInput) *GetCostAndUsageWithResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostAndUsageWithResources", input)
	return &GetCostAndUsageWithResourcesFuture{Future: future}
}

func (a *stub) GetCostCategories(ctx workflow.Context, input *costexplorer.GetCostCategoriesInput) (*costexplorer.GetCostCategoriesOutput, error) {
	var output costexplorer.GetCostCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCostCategoriesAsync(ctx workflow.Context, input *costexplorer.GetCostCategoriesInput) *GetCostCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostCategories", input)
	return &GetCostCategoriesFuture{Future: future}
}

func (a *stub) GetCostForecast(ctx workflow.Context, input *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	var output costexplorer.GetCostForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCostForecastAsync(ctx workflow.Context, input *costexplorer.GetCostForecastInput) *GetCostForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetCostForecast", input)
	return &GetCostForecastFuture{Future: future}
}

func (a *stub) GetDimensionValues(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	var output costexplorer.GetDimensionValuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetDimensionValues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDimensionValuesAsync(ctx workflow.Context, input *costexplorer.GetDimensionValuesInput) *GetDimensionValuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetDimensionValues", input)
	return &GetDimensionValuesFuture{Future: future}
}

func (a *stub) GetReservationCoverage(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	var output costexplorer.GetReservationCoverageOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationCoverage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservationCoverageAsync(ctx workflow.Context, input *costexplorer.GetReservationCoverageInput) *GetReservationCoverageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationCoverage", input)
	return &GetReservationCoverageFuture{Future: future}
}

func (a *stub) GetReservationPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	var output costexplorer.GetReservationPurchaseRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationPurchaseRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservationPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetReservationPurchaseRecommendationInput) *GetReservationPurchaseRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationPurchaseRecommendation", input)
	return &GetReservationPurchaseRecommendationFuture{Future: future}
}

func (a *stub) GetReservationUtilization(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	var output costexplorer.GetReservationUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservationUtilizationAsync(ctx workflow.Context, input *costexplorer.GetReservationUtilizationInput) *GetReservationUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetReservationUtilization", input)
	return &GetReservationUtilizationFuture{Future: future}
}

func (a *stub) GetRightsizingRecommendation(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	var output costexplorer.GetRightsizingRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetRightsizingRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRightsizingRecommendationAsync(ctx workflow.Context, input *costexplorer.GetRightsizingRecommendationInput) *GetRightsizingRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetRightsizingRecommendation", input)
	return &GetRightsizingRecommendationFuture{Future: future}
}

func (a *stub) GetSavingsPlansCoverage(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	var output costexplorer.GetSavingsPlansCoverageOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansCoverage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSavingsPlansCoverageAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansCoverageInput) *GetSavingsPlansCoverageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansCoverage", input)
	return &GetSavingsPlansCoverageFuture{Future: future}
}

func (a *stub) GetSavingsPlansPurchaseRecommendation(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	var output costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansPurchaseRecommendation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSavingsPlansPurchaseRecommendationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansPurchaseRecommendationInput) *GetSavingsPlansPurchaseRecommendationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansPurchaseRecommendation", input)
	return &GetSavingsPlansPurchaseRecommendationFuture{Future: future}
}

func (a *stub) GetSavingsPlansUtilization(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansUtilization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSavingsPlansUtilizationAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationInput) *GetSavingsPlansUtilizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansUtilization", input)
	return &GetSavingsPlansUtilizationFuture{Future: future}
}

func (a *stub) GetSavingsPlansUtilizationDetails(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	var output costexplorer.GetSavingsPlansUtilizationDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansUtilizationDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSavingsPlansUtilizationDetailsAsync(ctx workflow.Context, input *costexplorer.GetSavingsPlansUtilizationDetailsInput) *GetSavingsPlansUtilizationDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetSavingsPlansUtilizationDetails", input)
	return &GetSavingsPlansUtilizationDetailsFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	var output costexplorer.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *costexplorer.GetTagsInput) *GetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetTags", input)
	return &GetTagsFuture{Future: future}
}

func (a *stub) GetUsageForecast(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error) {
	var output costexplorer.GetUsageForecastOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetUsageForecast", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsageForecastAsync(ctx workflow.Context, input *costexplorer.GetUsageForecastInput) *GetUsageForecastFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-GetUsageForecast", input)
	return &GetUsageForecastFuture{Future: future}
}

func (a *stub) ListCostCategoryDefinitions(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	var output costexplorer.ListCostCategoryDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-ListCostCategoryDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCostCategoryDefinitionsAsync(ctx workflow.Context, input *costexplorer.ListCostCategoryDefinitionsInput) *ListCostCategoryDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-ListCostCategoryDefinitions", input)
	return &ListCostCategoryDefinitionsFuture{Future: future}
}

func (a *stub) ProvideAnomalyFeedback(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	var output costexplorer.ProvideAnomalyFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-ProvideAnomalyFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ProvideAnomalyFeedbackAsync(ctx workflow.Context, input *costexplorer.ProvideAnomalyFeedbackInput) *ProvideAnomalyFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-ProvideAnomalyFeedback", input)
	return &ProvideAnomalyFeedbackFuture{Future: future}
}

func (a *stub) UpdateAnomalyMonitor(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	var output costexplorer.UpdateAnomalyMonitorOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateAnomalyMonitor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAnomalyMonitorAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalyMonitorInput) *UpdateAnomalyMonitorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateAnomalyMonitor", input)
	return &UpdateAnomalyMonitorFuture{Future: future}
}

func (a *stub) UpdateAnomalySubscription(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	var output costexplorer.UpdateAnomalySubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateAnomalySubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAnomalySubscriptionAsync(ctx workflow.Context, input *costexplorer.UpdateAnomalySubscriptionInput) *UpdateAnomalySubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateAnomalySubscription", input)
	return &UpdateAnomalySubscriptionFuture{Future: future}
}

func (a *stub) UpdateCostCategoryDefinition(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	var output costexplorer.UpdateCostCategoryDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateCostCategoryDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCostCategoryDefinitionAsync(ctx workflow.Context, input *costexplorer.UpdateCostCategoryDefinitionInput) *UpdateCostCategoryDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-costexplorer-UpdateCostCategoryDefinition", input)
	return &UpdateCostCategoryDefinitionFuture{Future: future}
}
