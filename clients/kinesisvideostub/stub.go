// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package kinesisvideostub

import (
	"github.com/aws/aws-sdk-go/service/kinesisvideo"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type KinesisVideoCreateSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoCreateSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.CreateSignalingChannelOutput, error) {
	var output kinesisvideo.CreateSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoCreateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoCreateStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.CreateStreamOutput, error) {
	var output kinesisvideo.CreateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoDeleteSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoDeleteSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.DeleteSignalingChannelOutput, error) {
	var output kinesisvideo.DeleteSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoDeleteStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoDeleteStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.DeleteStreamOutput, error) {
	var output kinesisvideo.DeleteStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoDescribeSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoDescribeSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.DescribeSignalingChannelOutput, error) {
	var output kinesisvideo.DescribeSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoDescribeStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoDescribeStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.DescribeStreamOutput, error) {
	var output kinesisvideo.DescribeStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoGetDataEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoGetDataEndpointFuture) Get(ctx workflow.Context) (*kinesisvideo.GetDataEndpointOutput, error) {
	var output kinesisvideo.GetDataEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoGetSignalingChannelEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoGetSignalingChannelEndpointFuture) Get(ctx workflow.Context) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {
	var output kinesisvideo.GetSignalingChannelEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoListSignalingChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoListSignalingChannelsFuture) Get(ctx workflow.Context) (*kinesisvideo.ListSignalingChannelsOutput, error) {
	var output kinesisvideo.ListSignalingChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoListStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoListStreamsFuture) Get(ctx workflow.Context) (*kinesisvideo.ListStreamsOutput, error) {
	var output kinesisvideo.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoListTagsForResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.ListTagsForResourceOutput, error) {
	var output kinesisvideo.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoListTagsForStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoListTagsForStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.ListTagsForStreamOutput, error) {
	var output kinesisvideo.ListTagsForStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoTagResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.TagResourceOutput, error) {
	var output kinesisvideo.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoTagStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoTagStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.TagStreamOutput, error) {
	var output kinesisvideo.TagStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoUntagResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.UntagResourceOutput, error) {
	var output kinesisvideo.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoUntagStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoUntagStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.UntagStreamOutput, error) {
	var output kinesisvideo.UntagStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoUpdateDataRetentionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoUpdateDataRetentionFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	var output kinesisvideo.UpdateDataRetentionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoUpdateSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoUpdateSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateSignalingChannelOutput, error) {
	var output kinesisvideo.UpdateSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisVideoUpdateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisVideoUpdateStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateStreamOutput, error) {
	var output kinesisvideo.UpdateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSignalingChannel(ctx workflow.Context, input *kinesisvideo.CreateSignalingChannelInput) (*kinesisvideo.CreateSignalingChannelOutput, error) {
	var output kinesisvideo.CreateSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.CreateSignalingChannelInput) *KinesisVideoCreateSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateSignalingChannel", input)
	return &KinesisVideoCreateSignalingChannelFuture{Future: future}
}

func (a *stub) CreateStream(ctx workflow.Context, input *kinesisvideo.CreateStreamInput) (*kinesisvideo.CreateStreamOutput, error) {
	var output kinesisvideo.CreateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamAsync(ctx workflow.Context, input *kinesisvideo.CreateStreamInput) *KinesisVideoCreateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateStream", input)
	return &KinesisVideoCreateStreamFuture{Future: future}
}

func (a *stub) DeleteSignalingChannel(ctx workflow.Context, input *kinesisvideo.DeleteSignalingChannelInput) (*kinesisvideo.DeleteSignalingChannelOutput, error) {
	var output kinesisvideo.DeleteSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.DeleteSignalingChannelInput) *KinesisVideoDeleteSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteSignalingChannel", input)
	return &KinesisVideoDeleteSignalingChannelFuture{Future: future}
}

func (a *stub) DeleteStream(ctx workflow.Context, input *kinesisvideo.DeleteStreamInput) (*kinesisvideo.DeleteStreamOutput, error) {
	var output kinesisvideo.DeleteStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamAsync(ctx workflow.Context, input *kinesisvideo.DeleteStreamInput) *KinesisVideoDeleteStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteStream", input)
	return &KinesisVideoDeleteStreamFuture{Future: future}
}

func (a *stub) DescribeSignalingChannel(ctx workflow.Context, input *kinesisvideo.DescribeSignalingChannelInput) (*kinesisvideo.DescribeSignalingChannelOutput, error) {
	var output kinesisvideo.DescribeSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.DescribeSignalingChannelInput) *KinesisVideoDescribeSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeSignalingChannel", input)
	return &KinesisVideoDescribeSignalingChannelFuture{Future: future}
}

func (a *stub) DescribeStream(ctx workflow.Context, input *kinesisvideo.DescribeStreamInput) (*kinesisvideo.DescribeStreamOutput, error) {
	var output kinesisvideo.DescribeStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStreamAsync(ctx workflow.Context, input *kinesisvideo.DescribeStreamInput) *KinesisVideoDescribeStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeStream", input)
	return &KinesisVideoDescribeStreamFuture{Future: future}
}

func (a *stub) GetDataEndpoint(ctx workflow.Context, input *kinesisvideo.GetDataEndpointInput) (*kinesisvideo.GetDataEndpointOutput, error) {
	var output kinesisvideo.GetDataEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetDataEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataEndpointAsync(ctx workflow.Context, input *kinesisvideo.GetDataEndpointInput) *KinesisVideoGetDataEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetDataEndpoint", input)
	return &KinesisVideoGetDataEndpointFuture{Future: future}
}

func (a *stub) GetSignalingChannelEndpoint(ctx workflow.Context, input *kinesisvideo.GetSignalingChannelEndpointInput) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {
	var output kinesisvideo.GetSignalingChannelEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetSignalingChannelEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSignalingChannelEndpointAsync(ctx workflow.Context, input *kinesisvideo.GetSignalingChannelEndpointInput) *KinesisVideoGetSignalingChannelEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetSignalingChannelEndpoint", input)
	return &KinesisVideoGetSignalingChannelEndpointFuture{Future: future}
}

func (a *stub) ListSignalingChannels(ctx workflow.Context, input *kinesisvideo.ListSignalingChannelsInput) (*kinesisvideo.ListSignalingChannelsOutput, error) {
	var output kinesisvideo.ListSignalingChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListSignalingChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSignalingChannelsAsync(ctx workflow.Context, input *kinesisvideo.ListSignalingChannelsInput) *KinesisVideoListSignalingChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListSignalingChannels", input)
	return &KinesisVideoListSignalingChannelsFuture{Future: future}
}

func (a *stub) ListStreams(ctx workflow.Context, input *kinesisvideo.ListStreamsInput) (*kinesisvideo.ListStreamsOutput, error) {
	var output kinesisvideo.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamsAsync(ctx workflow.Context, input *kinesisvideo.ListStreamsInput) *KinesisVideoListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListStreams", input)
	return &KinesisVideoListStreamsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *kinesisvideo.ListTagsForResourceInput) (*kinesisvideo.ListTagsForResourceOutput, error) {
	var output kinesisvideo.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *kinesisvideo.ListTagsForResourceInput) *KinesisVideoListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForResource", input)
	return &KinesisVideoListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTagsForStream(ctx workflow.Context, input *kinesisvideo.ListTagsForStreamInput) (*kinesisvideo.ListTagsForStreamOutput, error) {
	var output kinesisvideo.ListTagsForStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForStreamAsync(ctx workflow.Context, input *kinesisvideo.ListTagsForStreamInput) *KinesisVideoListTagsForStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForStream", input)
	return &KinesisVideoListTagsForStreamFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *kinesisvideo.TagResourceInput) (*kinesisvideo.TagResourceOutput, error) {
	var output kinesisvideo.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *kinesisvideo.TagResourceInput) *KinesisVideoTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagResource", input)
	return &KinesisVideoTagResourceFuture{Future: future}
}

func (a *stub) TagStream(ctx workflow.Context, input *kinesisvideo.TagStreamInput) (*kinesisvideo.TagStreamOutput, error) {
	var output kinesisvideo.TagStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagStreamAsync(ctx workflow.Context, input *kinesisvideo.TagStreamInput) *KinesisVideoTagStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagStream", input)
	return &KinesisVideoTagStreamFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *kinesisvideo.UntagResourceInput) (*kinesisvideo.UntagResourceOutput, error) {
	var output kinesisvideo.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *kinesisvideo.UntagResourceInput) *KinesisVideoUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagResource", input)
	return &KinesisVideoUntagResourceFuture{Future: future}
}

func (a *stub) UntagStream(ctx workflow.Context, input *kinesisvideo.UntagStreamInput) (*kinesisvideo.UntagStreamOutput, error) {
	var output kinesisvideo.UntagStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagStreamAsync(ctx workflow.Context, input *kinesisvideo.UntagStreamInput) *KinesisVideoUntagStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagStream", input)
	return &KinesisVideoUntagStreamFuture{Future: future}
}

func (a *stub) UpdateDataRetention(ctx workflow.Context, input *kinesisvideo.UpdateDataRetentionInput) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	var output kinesisvideo.UpdateDataRetentionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateDataRetention", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataRetentionAsync(ctx workflow.Context, input *kinesisvideo.UpdateDataRetentionInput) *KinesisVideoUpdateDataRetentionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateDataRetention", input)
	return &KinesisVideoUpdateDataRetentionFuture{Future: future}
}

func (a *stub) UpdateSignalingChannel(ctx workflow.Context, input *kinesisvideo.UpdateSignalingChannelInput) (*kinesisvideo.UpdateSignalingChannelOutput, error) {
	var output kinesisvideo.UpdateSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.UpdateSignalingChannelInput) *KinesisVideoUpdateSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateSignalingChannel", input)
	return &KinesisVideoUpdateSignalingChannelFuture{Future: future}
}

func (a *stub) UpdateStream(ctx workflow.Context, input *kinesisvideo.UpdateStreamInput) (*kinesisvideo.UpdateStreamOutput, error) {
	var output kinesisvideo.UpdateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStreamAsync(ctx workflow.Context, input *kinesisvideo.UpdateStreamInput) *KinesisVideoUpdateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateStream", input)
	return &KinesisVideoUpdateStreamFuture{Future: future}
}
