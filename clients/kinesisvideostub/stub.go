// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kinesisvideostub

import (
	"github.com/aws/aws-sdk-go/service/kinesisvideo"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.CreateSignalingChannelOutput, error) {
	var output kinesisvideo.CreateSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.CreateStreamOutput, error) {
	var output kinesisvideo.CreateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.DeleteSignalingChannelOutput, error) {
	var output kinesisvideo.DeleteSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.DeleteStreamOutput, error) {
	var output kinesisvideo.DeleteStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.DescribeSignalingChannelOutput, error) {
	var output kinesisvideo.DescribeSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.DescribeStreamOutput, error) {
	var output kinesisvideo.DescribeStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataEndpointFuture) Get(ctx workflow.Context) (*kinesisvideo.GetDataEndpointOutput, error) {
	var output kinesisvideo.GetDataEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSignalingChannelEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSignalingChannelEndpointFuture) Get(ctx workflow.Context) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {
	var output kinesisvideo.GetSignalingChannelEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSignalingChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSignalingChannelsFuture) Get(ctx workflow.Context) (*kinesisvideo.ListSignalingChannelsOutput, error) {
	var output kinesisvideo.ListSignalingChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStreamsFuture) Get(ctx workflow.Context) (*kinesisvideo.ListStreamsOutput, error) {
	var output kinesisvideo.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.ListTagsForResourceOutput, error) {
	var output kinesisvideo.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.ListTagsForStreamOutput, error) {
	var output kinesisvideo.ListTagsForStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.TagResourceOutput, error) {
	var output kinesisvideo.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.TagStreamOutput, error) {
	var output kinesisvideo.TagStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*kinesisvideo.UntagResourceOutput, error) {
	var output kinesisvideo.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.UntagStreamOutput, error) {
	var output kinesisvideo.UntagStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDataRetentionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDataRetentionFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	var output kinesisvideo.UpdateDataRetentionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSignalingChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSignalingChannelFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateSignalingChannelOutput, error) {
	var output kinesisvideo.UpdateSignalingChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStreamFuture) Get(ctx workflow.Context) (*kinesisvideo.UpdateStreamOutput, error) {
	var output kinesisvideo.UpdateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSignalingChannel(ctx workflow.Context, input *kinesisvideo.CreateSignalingChannelInput) (*kinesisvideo.CreateSignalingChannelOutput, error) {
	var output kinesisvideo.CreateSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.CreateSignalingChannelInput) *CreateSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateSignalingChannel", input)
	return &CreateSignalingChannelFuture{Future: future}
}

func (a *stub) CreateStream(ctx workflow.Context, input *kinesisvideo.CreateStreamInput) (*kinesisvideo.CreateStreamOutput, error) {
	var output kinesisvideo.CreateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamAsync(ctx workflow.Context, input *kinesisvideo.CreateStreamInput) *CreateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-CreateStream", input)
	return &CreateStreamFuture{Future: future}
}

func (a *stub) DeleteSignalingChannel(ctx workflow.Context, input *kinesisvideo.DeleteSignalingChannelInput) (*kinesisvideo.DeleteSignalingChannelOutput, error) {
	var output kinesisvideo.DeleteSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.DeleteSignalingChannelInput) *DeleteSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteSignalingChannel", input)
	return &DeleteSignalingChannelFuture{Future: future}
}

func (a *stub) DeleteStream(ctx workflow.Context, input *kinesisvideo.DeleteStreamInput) (*kinesisvideo.DeleteStreamOutput, error) {
	var output kinesisvideo.DeleteStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamAsync(ctx workflow.Context, input *kinesisvideo.DeleteStreamInput) *DeleteStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DeleteStream", input)
	return &DeleteStreamFuture{Future: future}
}

func (a *stub) DescribeSignalingChannel(ctx workflow.Context, input *kinesisvideo.DescribeSignalingChannelInput) (*kinesisvideo.DescribeSignalingChannelOutput, error) {
	var output kinesisvideo.DescribeSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.DescribeSignalingChannelInput) *DescribeSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeSignalingChannel", input)
	return &DescribeSignalingChannelFuture{Future: future}
}

func (a *stub) DescribeStream(ctx workflow.Context, input *kinesisvideo.DescribeStreamInput) (*kinesisvideo.DescribeStreamOutput, error) {
	var output kinesisvideo.DescribeStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStreamAsync(ctx workflow.Context, input *kinesisvideo.DescribeStreamInput) *DescribeStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-DescribeStream", input)
	return &DescribeStreamFuture{Future: future}
}

func (a *stub) GetDataEndpoint(ctx workflow.Context, input *kinesisvideo.GetDataEndpointInput) (*kinesisvideo.GetDataEndpointOutput, error) {
	var output kinesisvideo.GetDataEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetDataEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataEndpointAsync(ctx workflow.Context, input *kinesisvideo.GetDataEndpointInput) *GetDataEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetDataEndpoint", input)
	return &GetDataEndpointFuture{Future: future}
}

func (a *stub) GetSignalingChannelEndpoint(ctx workflow.Context, input *kinesisvideo.GetSignalingChannelEndpointInput) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {
	var output kinesisvideo.GetSignalingChannelEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetSignalingChannelEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSignalingChannelEndpointAsync(ctx workflow.Context, input *kinesisvideo.GetSignalingChannelEndpointInput) *GetSignalingChannelEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-GetSignalingChannelEndpoint", input)
	return &GetSignalingChannelEndpointFuture{Future: future}
}

func (a *stub) ListSignalingChannels(ctx workflow.Context, input *kinesisvideo.ListSignalingChannelsInput) (*kinesisvideo.ListSignalingChannelsOutput, error) {
	var output kinesisvideo.ListSignalingChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListSignalingChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSignalingChannelsAsync(ctx workflow.Context, input *kinesisvideo.ListSignalingChannelsInput) *ListSignalingChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListSignalingChannels", input)
	return &ListSignalingChannelsFuture{Future: future}
}

func (a *stub) ListStreams(ctx workflow.Context, input *kinesisvideo.ListStreamsInput) (*kinesisvideo.ListStreamsOutput, error) {
	var output kinesisvideo.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamsAsync(ctx workflow.Context, input *kinesisvideo.ListStreamsInput) *ListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListStreams", input)
	return &ListStreamsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *kinesisvideo.ListTagsForResourceInput) (*kinesisvideo.ListTagsForResourceOutput, error) {
	var output kinesisvideo.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *kinesisvideo.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTagsForStream(ctx workflow.Context, input *kinesisvideo.ListTagsForStreamInput) (*kinesisvideo.ListTagsForStreamOutput, error) {
	var output kinesisvideo.ListTagsForStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForStreamAsync(ctx workflow.Context, input *kinesisvideo.ListTagsForStreamInput) *ListTagsForStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-ListTagsForStream", input)
	return &ListTagsForStreamFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *kinesisvideo.TagResourceInput) (*kinesisvideo.TagResourceOutput, error) {
	var output kinesisvideo.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *kinesisvideo.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TagStream(ctx workflow.Context, input *kinesisvideo.TagStreamInput) (*kinesisvideo.TagStreamOutput, error) {
	var output kinesisvideo.TagStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagStreamAsync(ctx workflow.Context, input *kinesisvideo.TagStreamInput) *TagStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-TagStream", input)
	return &TagStreamFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *kinesisvideo.UntagResourceInput) (*kinesisvideo.UntagResourceOutput, error) {
	var output kinesisvideo.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *kinesisvideo.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UntagStream(ctx workflow.Context, input *kinesisvideo.UntagStreamInput) (*kinesisvideo.UntagStreamOutput, error) {
	var output kinesisvideo.UntagStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagStreamAsync(ctx workflow.Context, input *kinesisvideo.UntagStreamInput) *UntagStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UntagStream", input)
	return &UntagStreamFuture{Future: future}
}

func (a *stub) UpdateDataRetention(ctx workflow.Context, input *kinesisvideo.UpdateDataRetentionInput) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	var output kinesisvideo.UpdateDataRetentionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateDataRetention", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDataRetentionAsync(ctx workflow.Context, input *kinesisvideo.UpdateDataRetentionInput) *UpdateDataRetentionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateDataRetention", input)
	return &UpdateDataRetentionFuture{Future: future}
}

func (a *stub) UpdateSignalingChannel(ctx workflow.Context, input *kinesisvideo.UpdateSignalingChannelInput) (*kinesisvideo.UpdateSignalingChannelOutput, error) {
	var output kinesisvideo.UpdateSignalingChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateSignalingChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSignalingChannelAsync(ctx workflow.Context, input *kinesisvideo.UpdateSignalingChannelInput) *UpdateSignalingChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateSignalingChannel", input)
	return &UpdateSignalingChannelFuture{Future: future}
}

func (a *stub) UpdateStream(ctx workflow.Context, input *kinesisvideo.UpdateStreamInput) (*kinesisvideo.UpdateStreamOutput, error) {
	var output kinesisvideo.UpdateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStreamAsync(ctx workflow.Context, input *kinesisvideo.UpdateStreamInput) *UpdateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisvideo-UpdateStream", input)
	return &UpdateStreamFuture{Future: future}
}
