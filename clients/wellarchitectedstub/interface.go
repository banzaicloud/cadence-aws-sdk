// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package wellarchitectedstub

import (
	"github.com/aws/aws-sdk-go/service/wellarchitected"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	AssociateLenses(ctx workflow.Context, input *wellarchitected.AssociateLensesInput) (*wellarchitected.AssociateLensesOutput, error)
	AssociateLensesAsync(ctx workflow.Context, input *wellarchitected.AssociateLensesInput) *AssociateLensesFuture

	CreateMilestone(ctx workflow.Context, input *wellarchitected.CreateMilestoneInput) (*wellarchitected.CreateMilestoneOutput, error)
	CreateMilestoneAsync(ctx workflow.Context, input *wellarchitected.CreateMilestoneInput) *CreateMilestoneFuture

	CreateWorkload(ctx workflow.Context, input *wellarchitected.CreateWorkloadInput) (*wellarchitected.CreateWorkloadOutput, error)
	CreateWorkloadAsync(ctx workflow.Context, input *wellarchitected.CreateWorkloadInput) *CreateWorkloadFuture

	CreateWorkloadShare(ctx workflow.Context, input *wellarchitected.CreateWorkloadShareInput) (*wellarchitected.CreateWorkloadShareOutput, error)
	CreateWorkloadShareAsync(ctx workflow.Context, input *wellarchitected.CreateWorkloadShareInput) *CreateWorkloadShareFuture

	DeleteWorkload(ctx workflow.Context, input *wellarchitected.DeleteWorkloadInput) (*wellarchitected.DeleteWorkloadOutput, error)
	DeleteWorkloadAsync(ctx workflow.Context, input *wellarchitected.DeleteWorkloadInput) *DeleteWorkloadFuture

	DeleteWorkloadShare(ctx workflow.Context, input *wellarchitected.DeleteWorkloadShareInput) (*wellarchitected.DeleteWorkloadShareOutput, error)
	DeleteWorkloadShareAsync(ctx workflow.Context, input *wellarchitected.DeleteWorkloadShareInput) *DeleteWorkloadShareFuture

	DisassociateLenses(ctx workflow.Context, input *wellarchitected.DisassociateLensesInput) (*wellarchitected.DisassociateLensesOutput, error)
	DisassociateLensesAsync(ctx workflow.Context, input *wellarchitected.DisassociateLensesInput) *DisassociateLensesFuture

	GetAnswer(ctx workflow.Context, input *wellarchitected.GetAnswerInput) (*wellarchitected.GetAnswerOutput, error)
	GetAnswerAsync(ctx workflow.Context, input *wellarchitected.GetAnswerInput) *GetAnswerFuture

	GetLensReview(ctx workflow.Context, input *wellarchitected.GetLensReviewInput) (*wellarchitected.GetLensReviewOutput, error)
	GetLensReviewAsync(ctx workflow.Context, input *wellarchitected.GetLensReviewInput) *GetLensReviewFuture

	GetLensReviewReport(ctx workflow.Context, input *wellarchitected.GetLensReviewReportInput) (*wellarchitected.GetLensReviewReportOutput, error)
	GetLensReviewReportAsync(ctx workflow.Context, input *wellarchitected.GetLensReviewReportInput) *GetLensReviewReportFuture

	GetLensVersionDifference(ctx workflow.Context, input *wellarchitected.GetLensVersionDifferenceInput) (*wellarchitected.GetLensVersionDifferenceOutput, error)
	GetLensVersionDifferenceAsync(ctx workflow.Context, input *wellarchitected.GetLensVersionDifferenceInput) *GetLensVersionDifferenceFuture

	GetMilestone(ctx workflow.Context, input *wellarchitected.GetMilestoneInput) (*wellarchitected.GetMilestoneOutput, error)
	GetMilestoneAsync(ctx workflow.Context, input *wellarchitected.GetMilestoneInput) *GetMilestoneFuture

	GetWorkload(ctx workflow.Context, input *wellarchitected.GetWorkloadInput) (*wellarchitected.GetWorkloadOutput, error)
	GetWorkloadAsync(ctx workflow.Context, input *wellarchitected.GetWorkloadInput) *GetWorkloadFuture

	ListAnswers(ctx workflow.Context, input *wellarchitected.ListAnswersInput) (*wellarchitected.ListAnswersOutput, error)
	ListAnswersAsync(ctx workflow.Context, input *wellarchitected.ListAnswersInput) *ListAnswersFuture

	ListLensReviewImprovements(ctx workflow.Context, input *wellarchitected.ListLensReviewImprovementsInput) (*wellarchitected.ListLensReviewImprovementsOutput, error)
	ListLensReviewImprovementsAsync(ctx workflow.Context, input *wellarchitected.ListLensReviewImprovementsInput) *ListLensReviewImprovementsFuture

	ListLensReviews(ctx workflow.Context, input *wellarchitected.ListLensReviewsInput) (*wellarchitected.ListLensReviewsOutput, error)
	ListLensReviewsAsync(ctx workflow.Context, input *wellarchitected.ListLensReviewsInput) *ListLensReviewsFuture

	ListLenses(ctx workflow.Context, input *wellarchitected.ListLensesInput) (*wellarchitected.ListLensesOutput, error)
	ListLensesAsync(ctx workflow.Context, input *wellarchitected.ListLensesInput) *ListLensesFuture

	ListMilestones(ctx workflow.Context, input *wellarchitected.ListMilestonesInput) (*wellarchitected.ListMilestonesOutput, error)
	ListMilestonesAsync(ctx workflow.Context, input *wellarchitected.ListMilestonesInput) *ListMilestonesFuture

	ListNotifications(ctx workflow.Context, input *wellarchitected.ListNotificationsInput) (*wellarchitected.ListNotificationsOutput, error)
	ListNotificationsAsync(ctx workflow.Context, input *wellarchitected.ListNotificationsInput) *ListNotificationsFuture

	ListShareInvitations(ctx workflow.Context, input *wellarchitected.ListShareInvitationsInput) (*wellarchitected.ListShareInvitationsOutput, error)
	ListShareInvitationsAsync(ctx workflow.Context, input *wellarchitected.ListShareInvitationsInput) *ListShareInvitationsFuture

	ListWorkloadShares(ctx workflow.Context, input *wellarchitected.ListWorkloadSharesInput) (*wellarchitected.ListWorkloadSharesOutput, error)
	ListWorkloadSharesAsync(ctx workflow.Context, input *wellarchitected.ListWorkloadSharesInput) *ListWorkloadSharesFuture

	ListWorkloads(ctx workflow.Context, input *wellarchitected.ListWorkloadsInput) (*wellarchitected.ListWorkloadsOutput, error)
	ListWorkloadsAsync(ctx workflow.Context, input *wellarchitected.ListWorkloadsInput) *ListWorkloadsFuture

	UpdateAnswer(ctx workflow.Context, input *wellarchitected.UpdateAnswerInput) (*wellarchitected.UpdateAnswerOutput, error)
	UpdateAnswerAsync(ctx workflow.Context, input *wellarchitected.UpdateAnswerInput) *UpdateAnswerFuture

	UpdateLensReview(ctx workflow.Context, input *wellarchitected.UpdateLensReviewInput) (*wellarchitected.UpdateLensReviewOutput, error)
	UpdateLensReviewAsync(ctx workflow.Context, input *wellarchitected.UpdateLensReviewInput) *UpdateLensReviewFuture

	UpdateShareInvitation(ctx workflow.Context, input *wellarchitected.UpdateShareInvitationInput) (*wellarchitected.UpdateShareInvitationOutput, error)
	UpdateShareInvitationAsync(ctx workflow.Context, input *wellarchitected.UpdateShareInvitationInput) *UpdateShareInvitationFuture

	UpdateWorkload(ctx workflow.Context, input *wellarchitected.UpdateWorkloadInput) (*wellarchitected.UpdateWorkloadOutput, error)
	UpdateWorkloadAsync(ctx workflow.Context, input *wellarchitected.UpdateWorkloadInput) *UpdateWorkloadFuture

	UpdateWorkloadShare(ctx workflow.Context, input *wellarchitected.UpdateWorkloadShareInput) (*wellarchitected.UpdateWorkloadShareOutput, error)
	UpdateWorkloadShareAsync(ctx workflow.Context, input *wellarchitected.UpdateWorkloadShareInput) *UpdateWorkloadShareFuture

	UpgradeLensReview(ctx workflow.Context, input *wellarchitected.UpgradeLensReviewInput) (*wellarchitected.UpgradeLensReviewOutput, error)
	UpgradeLensReviewAsync(ctx workflow.Context, input *wellarchitected.UpgradeLensReviewInput) *UpgradeLensReviewFuture
}

func NewClient() Client {
	return &stub{}
}
