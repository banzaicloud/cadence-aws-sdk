// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package customerprofilesstub

import (
	"github.com/aws/aws-sdk-go/service/customerprofiles"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddProfileKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddProfileKeyFuture) Get(ctx workflow.Context) (*customerprofiles.AddProfileKeyOutput, error) {
	var output customerprofiles.AddProfileKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*customerprofiles.CreateDomainOutput, error) {
	var output customerprofiles.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProfileFuture) Get(ctx workflow.Context) (*customerprofiles.CreateProfileOutput, error) {
	var output customerprofiles.CreateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteDomainOutput, error) {
	var output customerprofiles.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIntegrationFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteIntegrationOutput, error) {
	var output customerprofiles.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfileFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteProfileOutput, error) {
	var output customerprofiles.DeleteProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfileKeyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfileKeyFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteProfileKeyOutput, error) {
	var output customerprofiles.DeleteProfileKeyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfileObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfileObjectFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteProfileObjectOutput, error) {
	var output customerprofiles.DeleteProfileObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfileObjectTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfileObjectTypeFuture) Get(ctx workflow.Context) (*customerprofiles.DeleteProfileObjectTypeOutput, error) {
	var output customerprofiles.DeleteProfileObjectTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainFuture) Get(ctx workflow.Context) (*customerprofiles.GetDomainOutput, error) {
	var output customerprofiles.GetDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIntegrationFuture) Get(ctx workflow.Context) (*customerprofiles.GetIntegrationOutput, error) {
	var output customerprofiles.GetIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProfileObjectTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProfileObjectTypeFuture) Get(ctx workflow.Context) (*customerprofiles.GetProfileObjectTypeOutput, error) {
	var output customerprofiles.GetProfileObjectTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProfileObjectTypeTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProfileObjectTypeTemplateFuture) Get(ctx workflow.Context) (*customerprofiles.GetProfileObjectTypeTemplateOutput, error) {
	var output customerprofiles.GetProfileObjectTypeTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccountIntegrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccountIntegrationsFuture) Get(ctx workflow.Context) (*customerprofiles.ListAccountIntegrationsOutput, error) {
	var output customerprofiles.ListAccountIntegrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*customerprofiles.ListDomainsOutput, error) {
	var output customerprofiles.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIntegrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIntegrationsFuture) Get(ctx workflow.Context) (*customerprofiles.ListIntegrationsOutput, error) {
	var output customerprofiles.ListIntegrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProfileObjectTypeTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProfileObjectTypeTemplatesFuture) Get(ctx workflow.Context) (*customerprofiles.ListProfileObjectTypeTemplatesOutput, error) {
	var output customerprofiles.ListProfileObjectTypeTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProfileObjectTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProfileObjectTypesFuture) Get(ctx workflow.Context) (*customerprofiles.ListProfileObjectTypesOutput, error) {
	var output customerprofiles.ListProfileObjectTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProfileObjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProfileObjectsFuture) Get(ctx workflow.Context) (*customerprofiles.ListProfileObjectsOutput, error) {
	var output customerprofiles.ListProfileObjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*customerprofiles.ListTagsForResourceOutput, error) {
	var output customerprofiles.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutIntegrationFuture) Get(ctx workflow.Context) (*customerprofiles.PutIntegrationOutput, error) {
	var output customerprofiles.PutIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutProfileObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutProfileObjectFuture) Get(ctx workflow.Context) (*customerprofiles.PutProfileObjectOutput, error) {
	var output customerprofiles.PutProfileObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutProfileObjectTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutProfileObjectTypeFuture) Get(ctx workflow.Context) (*customerprofiles.PutProfileObjectTypeOutput, error) {
	var output customerprofiles.PutProfileObjectTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchProfilesFuture) Get(ctx workflow.Context) (*customerprofiles.SearchProfilesOutput, error) {
	var output customerprofiles.SearchProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*customerprofiles.TagResourceOutput, error) {
	var output customerprofiles.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*customerprofiles.UntagResourceOutput, error) {
	var output customerprofiles.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDomainFuture) Get(ctx workflow.Context) (*customerprofiles.UpdateDomainOutput, error) {
	var output customerprofiles.UpdateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProfileFuture) Get(ctx workflow.Context) (*customerprofiles.UpdateProfileOutput, error) {
	var output customerprofiles.UpdateProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddProfileKey(ctx workflow.Context, input *customerprofiles.AddProfileKeyInput) (*customerprofiles.AddProfileKeyOutput, error) {
	var output customerprofiles.AddProfileKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-AddProfileKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddProfileKeyAsync(ctx workflow.Context, input *customerprofiles.AddProfileKeyInput) *AddProfileKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-AddProfileKey", input)
	return &AddProfileKeyFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *customerprofiles.CreateDomainInput) (*customerprofiles.CreateDomainOutput, error) {
	var output customerprofiles.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *customerprofiles.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) CreateProfile(ctx workflow.Context, input *customerprofiles.CreateProfileInput) (*customerprofiles.CreateProfileOutput, error) {
	var output customerprofiles.CreateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-CreateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProfileAsync(ctx workflow.Context, input *customerprofiles.CreateProfileInput) *CreateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-CreateProfile", input)
	return &CreateProfileFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *customerprofiles.DeleteDomainInput) (*customerprofiles.DeleteDomainOutput, error) {
	var output customerprofiles.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *customerprofiles.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DeleteIntegration(ctx workflow.Context, input *customerprofiles.DeleteIntegrationInput) (*customerprofiles.DeleteIntegrationOutput, error) {
	var output customerprofiles.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationAsync(ctx workflow.Context, input *customerprofiles.DeleteIntegrationInput) *DeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteIntegration", input)
	return &DeleteIntegrationFuture{Future: future}
}

func (a *stub) DeleteProfile(ctx workflow.Context, input *customerprofiles.DeleteProfileInput) (*customerprofiles.DeleteProfileOutput, error) {
	var output customerprofiles.DeleteProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileAsync(ctx workflow.Context, input *customerprofiles.DeleteProfileInput) *DeleteProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfile", input)
	return &DeleteProfileFuture{Future: future}
}

func (a *stub) DeleteProfileKey(ctx workflow.Context, input *customerprofiles.DeleteProfileKeyInput) (*customerprofiles.DeleteProfileKeyOutput, error) {
	var output customerprofiles.DeleteProfileKeyOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileKey", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileKeyAsync(ctx workflow.Context, input *customerprofiles.DeleteProfileKeyInput) *DeleteProfileKeyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileKey", input)
	return &DeleteProfileKeyFuture{Future: future}
}

func (a *stub) DeleteProfileObject(ctx workflow.Context, input *customerprofiles.DeleteProfileObjectInput) (*customerprofiles.DeleteProfileObjectOutput, error) {
	var output customerprofiles.DeleteProfileObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileObjectAsync(ctx workflow.Context, input *customerprofiles.DeleteProfileObjectInput) *DeleteProfileObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileObject", input)
	return &DeleteProfileObjectFuture{Future: future}
}

func (a *stub) DeleteProfileObjectType(ctx workflow.Context, input *customerprofiles.DeleteProfileObjectTypeInput) (*customerprofiles.DeleteProfileObjectTypeOutput, error) {
	var output customerprofiles.DeleteProfileObjectTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileObjectType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfileObjectTypeAsync(ctx workflow.Context, input *customerprofiles.DeleteProfileObjectTypeInput) *DeleteProfileObjectTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-DeleteProfileObjectType", input)
	return &DeleteProfileObjectTypeFuture{Future: future}
}

func (a *stub) GetDomain(ctx workflow.Context, input *customerprofiles.GetDomainInput) (*customerprofiles.GetDomainOutput, error) {
	var output customerprofiles.GetDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainAsync(ctx workflow.Context, input *customerprofiles.GetDomainInput) *GetDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetDomain", input)
	return &GetDomainFuture{Future: future}
}

func (a *stub) GetIntegration(ctx workflow.Context, input *customerprofiles.GetIntegrationInput) (*customerprofiles.GetIntegrationOutput, error) {
	var output customerprofiles.GetIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationAsync(ctx workflow.Context, input *customerprofiles.GetIntegrationInput) *GetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetIntegration", input)
	return &GetIntegrationFuture{Future: future}
}

func (a *stub) GetProfileObjectType(ctx workflow.Context, input *customerprofiles.GetProfileObjectTypeInput) (*customerprofiles.GetProfileObjectTypeOutput, error) {
	var output customerprofiles.GetProfileObjectTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetProfileObjectType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProfileObjectTypeAsync(ctx workflow.Context, input *customerprofiles.GetProfileObjectTypeInput) *GetProfileObjectTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetProfileObjectType", input)
	return &GetProfileObjectTypeFuture{Future: future}
}

func (a *stub) GetProfileObjectTypeTemplate(ctx workflow.Context, input *customerprofiles.GetProfileObjectTypeTemplateInput) (*customerprofiles.GetProfileObjectTypeTemplateOutput, error) {
	var output customerprofiles.GetProfileObjectTypeTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetProfileObjectTypeTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProfileObjectTypeTemplateAsync(ctx workflow.Context, input *customerprofiles.GetProfileObjectTypeTemplateInput) *GetProfileObjectTypeTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-GetProfileObjectTypeTemplate", input)
	return &GetProfileObjectTypeTemplateFuture{Future: future}
}

func (a *stub) ListAccountIntegrations(ctx workflow.Context, input *customerprofiles.ListAccountIntegrationsInput) (*customerprofiles.ListAccountIntegrationsOutput, error) {
	var output customerprofiles.ListAccountIntegrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListAccountIntegrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccountIntegrationsAsync(ctx workflow.Context, input *customerprofiles.ListAccountIntegrationsInput) *ListAccountIntegrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListAccountIntegrations", input)
	return &ListAccountIntegrationsFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *customerprofiles.ListDomainsInput) (*customerprofiles.ListDomainsOutput, error) {
	var output customerprofiles.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *customerprofiles.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListIntegrations(ctx workflow.Context, input *customerprofiles.ListIntegrationsInput) (*customerprofiles.ListIntegrationsOutput, error) {
	var output customerprofiles.ListIntegrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListIntegrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIntegrationsAsync(ctx workflow.Context, input *customerprofiles.ListIntegrationsInput) *ListIntegrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListIntegrations", input)
	return &ListIntegrationsFuture{Future: future}
}

func (a *stub) ListProfileObjectTypeTemplates(ctx workflow.Context, input *customerprofiles.ListProfileObjectTypeTemplatesInput) (*customerprofiles.ListProfileObjectTypeTemplatesOutput, error) {
	var output customerprofiles.ListProfileObjectTypeTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjectTypeTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProfileObjectTypeTemplatesAsync(ctx workflow.Context, input *customerprofiles.ListProfileObjectTypeTemplatesInput) *ListProfileObjectTypeTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjectTypeTemplates", input)
	return &ListProfileObjectTypeTemplatesFuture{Future: future}
}

func (a *stub) ListProfileObjectTypes(ctx workflow.Context, input *customerprofiles.ListProfileObjectTypesInput) (*customerprofiles.ListProfileObjectTypesOutput, error) {
	var output customerprofiles.ListProfileObjectTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjectTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProfileObjectTypesAsync(ctx workflow.Context, input *customerprofiles.ListProfileObjectTypesInput) *ListProfileObjectTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjectTypes", input)
	return &ListProfileObjectTypesFuture{Future: future}
}

func (a *stub) ListProfileObjects(ctx workflow.Context, input *customerprofiles.ListProfileObjectsInput) (*customerprofiles.ListProfileObjectsOutput, error) {
	var output customerprofiles.ListProfileObjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProfileObjectsAsync(ctx workflow.Context, input *customerprofiles.ListProfileObjectsInput) *ListProfileObjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListProfileObjects", input)
	return &ListProfileObjectsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *customerprofiles.ListTagsForResourceInput) (*customerprofiles.ListTagsForResourceOutput, error) {
	var output customerprofiles.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *customerprofiles.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutIntegration(ctx workflow.Context, input *customerprofiles.PutIntegrationInput) (*customerprofiles.PutIntegrationOutput, error) {
	var output customerprofiles.PutIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutIntegrationAsync(ctx workflow.Context, input *customerprofiles.PutIntegrationInput) *PutIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutIntegration", input)
	return &PutIntegrationFuture{Future: future}
}

func (a *stub) PutProfileObject(ctx workflow.Context, input *customerprofiles.PutProfileObjectInput) (*customerprofiles.PutProfileObjectOutput, error) {
	var output customerprofiles.PutProfileObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutProfileObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutProfileObjectAsync(ctx workflow.Context, input *customerprofiles.PutProfileObjectInput) *PutProfileObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutProfileObject", input)
	return &PutProfileObjectFuture{Future: future}
}

func (a *stub) PutProfileObjectType(ctx workflow.Context, input *customerprofiles.PutProfileObjectTypeInput) (*customerprofiles.PutProfileObjectTypeOutput, error) {
	var output customerprofiles.PutProfileObjectTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutProfileObjectType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutProfileObjectTypeAsync(ctx workflow.Context, input *customerprofiles.PutProfileObjectTypeInput) *PutProfileObjectTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-PutProfileObjectType", input)
	return &PutProfileObjectTypeFuture{Future: future}
}

func (a *stub) SearchProfiles(ctx workflow.Context, input *customerprofiles.SearchProfilesInput) (*customerprofiles.SearchProfilesOutput, error) {
	var output customerprofiles.SearchProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-SearchProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchProfilesAsync(ctx workflow.Context, input *customerprofiles.SearchProfilesInput) *SearchProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-SearchProfiles", input)
	return &SearchProfilesFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *customerprofiles.TagResourceInput) (*customerprofiles.TagResourceOutput, error) {
	var output customerprofiles.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *customerprofiles.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *customerprofiles.UntagResourceInput) (*customerprofiles.UntagResourceOutput, error) {
	var output customerprofiles.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *customerprofiles.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDomain(ctx workflow.Context, input *customerprofiles.UpdateDomainInput) (*customerprofiles.UpdateDomainOutput, error) {
	var output customerprofiles.UpdateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UpdateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainAsync(ctx workflow.Context, input *customerprofiles.UpdateDomainInput) *UpdateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UpdateDomain", input)
	return &UpdateDomainFuture{Future: future}
}

func (a *stub) UpdateProfile(ctx workflow.Context, input *customerprofiles.UpdateProfileInput) (*customerprofiles.UpdateProfileOutput, error) {
	var output customerprofiles.UpdateProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UpdateProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProfileAsync(ctx workflow.Context, input *customerprofiles.UpdateProfileInput) *UpdateProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-customerprofiles-UpdateProfile", input)
	return &UpdateProfileFuture{Future: future}
}
