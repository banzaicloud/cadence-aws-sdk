// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package greengrassstub

import (
	"github.com/aws/aws-sdk-go/service/greengrass"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type GreengrassAssociateRoleToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassAssociateRoleToGroupFuture) Get(ctx workflow.Context) (*greengrass.AssociateRoleToGroupOutput, error) {
	var output greengrass.AssociateRoleToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassAssociateServiceRoleToAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassAssociateServiceRoleToAccountFuture) Get(ctx workflow.Context) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	var output greengrass.AssociateServiceRoleToAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateConnectorDefinitionOutput, error) {
	var output greengrass.CreateConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateConnectorDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateConnectorDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	var output greengrass.CreateConnectorDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateCoreDefinitionOutput, error) {
	var output greengrass.CreateCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateCoreDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateCoreDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	var output greengrass.CreateCoreDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateDeploymentFuture) Get(ctx workflow.Context) (*greengrass.CreateDeploymentOutput, error) {
	var output greengrass.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateDeviceDefinitionOutput, error) {
	var output greengrass.CreateDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateDeviceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateDeviceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	var output greengrass.CreateDeviceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateFunctionDefinitionOutput, error) {
	var output greengrass.CreateFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateFunctionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateFunctionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	var output greengrass.CreateFunctionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateGroupFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupOutput, error) {
	var output greengrass.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateGroupCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateGroupCertificateAuthorityFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	var output greengrass.CreateGroupCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateGroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateGroupVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupVersionOutput, error) {
	var output greengrass.CreateGroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateLoggerDefinitionOutput, error) {
	var output greengrass.CreateLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateLoggerDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateLoggerDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	var output greengrass.CreateLoggerDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateResourceDefinitionOutput, error) {
	var output greengrass.CreateResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateResourceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateResourceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	var output greengrass.CreateResourceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateSoftwareUpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateSoftwareUpdateJobFuture) Get(ctx workflow.Context) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	var output greengrass.CreateSoftwareUpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassCreateSubscriptionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassCreateSubscriptionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	var output greengrass.DeleteConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteCoreDefinitionOutput, error) {
	var output greengrass.DeleteCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	var output greengrass.DeleteDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	var output greengrass.DeleteFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteGroupFuture) Get(ctx workflow.Context) (*greengrass.DeleteGroupOutput, error) {
	var output greengrass.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	var output greengrass.DeleteLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteResourceDefinitionOutput, error) {
	var output greengrass.DeleteResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDeleteSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDeleteSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	var output greengrass.DeleteSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDisassociateRoleFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDisassociateRoleFromGroupFuture) Get(ctx workflow.Context) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	var output greengrass.DisassociateRoleFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassDisassociateServiceRoleFromAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassDisassociateServiceRoleFromAccountFuture) Get(ctx workflow.Context) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	var output greengrass.DisassociateServiceRoleFromAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetAssociatedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetAssociatedRoleFuture) Get(ctx workflow.Context) (*greengrass.GetAssociatedRoleOutput, error) {
	var output greengrass.GetAssociatedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetBulkDeploymentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetBulkDeploymentStatusFuture) Get(ctx workflow.Context) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	var output greengrass.GetBulkDeploymentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetConnectivityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetConnectivityInfoFuture) Get(ctx workflow.Context) (*greengrass.GetConnectivityInfoOutput, error) {
	var output greengrass.GetConnectivityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetConnectorDefinitionOutput, error) {
	var output greengrass.GetConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetConnectorDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetConnectorDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	var output greengrass.GetConnectorDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetCoreDefinitionOutput, error) {
	var output greengrass.GetCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetCoreDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetCoreDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	var output greengrass.GetCoreDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetDeploymentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetDeploymentStatusFuture) Get(ctx workflow.Context) (*greengrass.GetDeploymentStatusOutput, error) {
	var output greengrass.GetDeploymentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetDeviceDefinitionOutput, error) {
	var output greengrass.GetDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetDeviceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetDeviceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	var output greengrass.GetDeviceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetFunctionDefinitionOutput, error) {
	var output greengrass.GetFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetFunctionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetFunctionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	var output greengrass.GetFunctionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetGroupFuture) Get(ctx workflow.Context) (*greengrass.GetGroupOutput, error) {
	var output greengrass.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetGroupCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetGroupCertificateAuthorityFuture) Get(ctx workflow.Context) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	var output greengrass.GetGroupCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetGroupCertificateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetGroupCertificateConfigurationFuture) Get(ctx workflow.Context) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	var output greengrass.GetGroupCertificateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetGroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetGroupVersionFuture) Get(ctx workflow.Context) (*greengrass.GetGroupVersionOutput, error) {
	var output greengrass.GetGroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetLoggerDefinitionOutput, error) {
	var output greengrass.GetLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetLoggerDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetLoggerDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	var output greengrass.GetLoggerDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetResourceDefinitionOutput, error) {
	var output greengrass.GetResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetResourceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetResourceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	var output greengrass.GetResourceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetServiceRoleForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetServiceRoleForAccountFuture) Get(ctx workflow.Context) (*greengrass.GetServiceRoleForAccountOutput, error) {
	var output greengrass.GetServiceRoleForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetSubscriptionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetSubscriptionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassGetThingRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassGetThingRuntimeConfigurationFuture) Get(ctx workflow.Context) (*greengrass.GetThingRuntimeConfigurationOutput, error) {
	var output greengrass.GetThingRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListBulkDeploymentDetailedReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListBulkDeploymentDetailedReportsFuture) Get(ctx workflow.Context) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	var output greengrass.ListBulkDeploymentDetailedReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListBulkDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListBulkDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ListBulkDeploymentsOutput, error) {
	var output greengrass.ListBulkDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListConnectorDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListConnectorDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	var output greengrass.ListConnectorDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListConnectorDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListConnectorDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListConnectorDefinitionsOutput, error) {
	var output greengrass.ListConnectorDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListCoreDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListCoreDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	var output greengrass.ListCoreDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListCoreDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListCoreDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListCoreDefinitionsOutput, error) {
	var output greengrass.ListCoreDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ListDeploymentsOutput, error) {
	var output greengrass.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListDeviceDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListDeviceDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	var output greengrass.ListDeviceDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListDeviceDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListDeviceDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListDeviceDefinitionsOutput, error) {
	var output greengrass.ListDeviceDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListFunctionDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListFunctionDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	var output greengrass.ListFunctionDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListFunctionDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListFunctionDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListFunctionDefinitionsOutput, error) {
	var output greengrass.ListFunctionDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListGroupCertificateAuthoritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListGroupCertificateAuthoritiesFuture) Get(ctx workflow.Context) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	var output greengrass.ListGroupCertificateAuthoritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListGroupVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListGroupVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListGroupVersionsOutput, error) {
	var output greengrass.ListGroupVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListGroupsFuture) Get(ctx workflow.Context) (*greengrass.ListGroupsOutput, error) {
	var output greengrass.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListLoggerDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListLoggerDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	var output greengrass.ListLoggerDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListLoggerDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListLoggerDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListLoggerDefinitionsOutput, error) {
	var output greengrass.ListLoggerDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListResourceDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListResourceDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	var output greengrass.ListResourceDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListResourceDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListResourceDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListResourceDefinitionsOutput, error) {
	var output greengrass.ListResourceDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListSubscriptionDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListSubscriptionDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListSubscriptionDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListSubscriptionDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassListTagsForResourceFuture) Get(ctx workflow.Context) (*greengrass.ListTagsForResourceOutput, error) {
	var output greengrass.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassResetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassResetDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ResetDeploymentsOutput, error) {
	var output greengrass.ResetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassStartBulkDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassStartBulkDeploymentFuture) Get(ctx workflow.Context) (*greengrass.StartBulkDeploymentOutput, error) {
	var output greengrass.StartBulkDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassStopBulkDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassStopBulkDeploymentFuture) Get(ctx workflow.Context) (*greengrass.StopBulkDeploymentOutput, error) {
	var output greengrass.StopBulkDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassTagResourceFuture) Get(ctx workflow.Context) (*greengrass.TagResourceOutput, error) {
	var output greengrass.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUntagResourceFuture) Get(ctx workflow.Context) (*greengrass.UntagResourceOutput, error) {
	var output greengrass.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateConnectivityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateConnectivityInfoFuture) Get(ctx workflow.Context) (*greengrass.UpdateConnectivityInfoOutput, error) {
	var output greengrass.UpdateConnectivityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	var output greengrass.UpdateConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateCoreDefinitionOutput, error) {
	var output greengrass.UpdateCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	var output greengrass.UpdateDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	var output greengrass.UpdateFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateGroupFuture) Get(ctx workflow.Context) (*greengrass.UpdateGroupOutput, error) {
	var output greengrass.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateGroupCertificateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateGroupCertificateConfigurationFuture) Get(ctx workflow.Context) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	var output greengrass.UpdateGroupCertificateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	var output greengrass.UpdateLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateResourceDefinitionOutput, error) {
	var output greengrass.UpdateResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	var output greengrass.UpdateSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GreengrassUpdateThingRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GreengrassUpdateThingRuntimeConfigurationFuture) Get(ctx workflow.Context) (*greengrass.UpdateThingRuntimeConfigurationOutput, error) {
	var output greengrass.UpdateThingRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoleToGroup(ctx workflow.Context, input *greengrass.AssociateRoleToGroupInput) (*greengrass.AssociateRoleToGroupOutput, error) {
	var output greengrass.AssociateRoleToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateRoleToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoleToGroupAsync(ctx workflow.Context, input *greengrass.AssociateRoleToGroupInput) *GreengrassAssociateRoleToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateRoleToGroup", input)
	return &GreengrassAssociateRoleToGroupFuture{Future: future}
}

func (a *stub) AssociateServiceRoleToAccount(ctx workflow.Context, input *greengrass.AssociateServiceRoleToAccountInput) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	var output greengrass.AssociateServiceRoleToAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateServiceRoleToAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateServiceRoleToAccountAsync(ctx workflow.Context, input *greengrass.AssociateServiceRoleToAccountInput) *GreengrassAssociateServiceRoleToAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateServiceRoleToAccount", input)
	return &GreengrassAssociateServiceRoleToAccountFuture{Future: future}
}

func (a *stub) CreateConnectorDefinition(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionInput) (*greengrass.CreateConnectorDefinitionOutput, error) {
	var output greengrass.CreateConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionInput) *GreengrassCreateConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinition", input)
	return &GreengrassCreateConnectorDefinitionFuture{Future: future}
}

func (a *stub) CreateConnectorDefinitionVersion(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionVersionInput) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	var output greengrass.CreateConnectorDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionVersionInput) *GreengrassCreateConnectorDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinitionVersion", input)
	return &GreengrassCreateConnectorDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateCoreDefinition(ctx workflow.Context, input *greengrass.CreateCoreDefinitionInput) (*greengrass.CreateCoreDefinitionOutput, error) {
	var output greengrass.CreateCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCoreDefinitionAsync(ctx workflow.Context, input *greengrass.CreateCoreDefinitionInput) *GreengrassCreateCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinition", input)
	return &GreengrassCreateCoreDefinitionFuture{Future: future}
}

func (a *stub) CreateCoreDefinitionVersion(ctx workflow.Context, input *greengrass.CreateCoreDefinitionVersionInput) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	var output greengrass.CreateCoreDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCoreDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateCoreDefinitionVersionInput) *GreengrassCreateCoreDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinitionVersion", input)
	return &GreengrassCreateCoreDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *greengrass.CreateDeploymentInput) (*greengrass.CreateDeploymentOutput, error) {
	var output greengrass.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *greengrass.CreateDeploymentInput) *GreengrassCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeployment", input)
	return &GreengrassCreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDeviceDefinition(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionInput) (*greengrass.CreateDeviceDefinitionOutput, error) {
	var output greengrass.CreateDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionInput) *GreengrassCreateDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinition", input)
	return &GreengrassCreateDeviceDefinitionFuture{Future: future}
}

func (a *stub) CreateDeviceDefinitionVersion(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionVersionInput) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	var output greengrass.CreateDeviceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionVersionInput) *GreengrassCreateDeviceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinitionVersion", input)
	return &GreengrassCreateDeviceDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateFunctionDefinition(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionInput) (*greengrass.CreateFunctionDefinitionOutput, error) {
	var output greengrass.CreateFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionInput) *GreengrassCreateFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinition", input)
	return &GreengrassCreateFunctionDefinitionFuture{Future: future}
}

func (a *stub) CreateFunctionDefinitionVersion(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionVersionInput) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	var output greengrass.CreateFunctionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionVersionInput) *GreengrassCreateFunctionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinitionVersion", input)
	return &GreengrassCreateFunctionDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *greengrass.CreateGroupInput) (*greengrass.CreateGroupOutput, error) {
	var output greengrass.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *greengrass.CreateGroupInput) *GreengrassCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroup", input)
	return &GreengrassCreateGroupFuture{Future: future}
}

func (a *stub) CreateGroupCertificateAuthority(ctx workflow.Context, input *greengrass.CreateGroupCertificateAuthorityInput) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	var output greengrass.CreateGroupCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupCertificateAuthorityAsync(ctx workflow.Context, input *greengrass.CreateGroupCertificateAuthorityInput) *GreengrassCreateGroupCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupCertificateAuthority", input)
	return &GreengrassCreateGroupCertificateAuthorityFuture{Future: future}
}

func (a *stub) CreateGroupVersion(ctx workflow.Context, input *greengrass.CreateGroupVersionInput) (*greengrass.CreateGroupVersionOutput, error) {
	var output greengrass.CreateGroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupVersionAsync(ctx workflow.Context, input *greengrass.CreateGroupVersionInput) *GreengrassCreateGroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupVersion", input)
	return &GreengrassCreateGroupVersionFuture{Future: future}
}

func (a *stub) CreateLoggerDefinition(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionInput) (*greengrass.CreateLoggerDefinitionOutput, error) {
	var output greengrass.CreateLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionInput) *GreengrassCreateLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinition", input)
	return &GreengrassCreateLoggerDefinitionFuture{Future: future}
}

func (a *stub) CreateLoggerDefinitionVersion(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionVersionInput) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	var output greengrass.CreateLoggerDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoggerDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionVersionInput) *GreengrassCreateLoggerDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinitionVersion", input)
	return &GreengrassCreateLoggerDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateResourceDefinition(ctx workflow.Context, input *greengrass.CreateResourceDefinitionInput) (*greengrass.CreateResourceDefinitionOutput, error) {
	var output greengrass.CreateResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceDefinitionAsync(ctx workflow.Context, input *greengrass.CreateResourceDefinitionInput) *GreengrassCreateResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinition", input)
	return &GreengrassCreateResourceDefinitionFuture{Future: future}
}

func (a *stub) CreateResourceDefinitionVersion(ctx workflow.Context, input *greengrass.CreateResourceDefinitionVersionInput) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	var output greengrass.CreateResourceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateResourceDefinitionVersionInput) *GreengrassCreateResourceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinitionVersion", input)
	return &GreengrassCreateResourceDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateSoftwareUpdateJob(ctx workflow.Context, input *greengrass.CreateSoftwareUpdateJobInput) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	var output greengrass.CreateSoftwareUpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSoftwareUpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSoftwareUpdateJobAsync(ctx workflow.Context, input *greengrass.CreateSoftwareUpdateJobInput) *GreengrassCreateSoftwareUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSoftwareUpdateJob", input)
	return &GreengrassCreateSoftwareUpdateJobFuture{Future: future}
}

func (a *stub) CreateSubscriptionDefinition(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionInput) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionInput) *GreengrassCreateSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinition", input)
	return &GreengrassCreateSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) CreateSubscriptionDefinitionVersion(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubscriptionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput) *GreengrassCreateSubscriptionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinitionVersion", input)
	return &GreengrassCreateSubscriptionDefinitionVersionFuture{Future: future}
}

func (a *stub) DeleteConnectorDefinition(ctx workflow.Context, input *greengrass.DeleteConnectorDefinitionInput) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	var output greengrass.DeleteConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteConnectorDefinitionInput) *GreengrassDeleteConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteConnectorDefinition", input)
	return &GreengrassDeleteConnectorDefinitionFuture{Future: future}
}

func (a *stub) DeleteCoreDefinition(ctx workflow.Context, input *greengrass.DeleteCoreDefinitionInput) (*greengrass.DeleteCoreDefinitionOutput, error) {
	var output greengrass.DeleteCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCoreDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteCoreDefinitionInput) *GreengrassDeleteCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteCoreDefinition", input)
	return &GreengrassDeleteCoreDefinitionFuture{Future: future}
}

func (a *stub) DeleteDeviceDefinition(ctx workflow.Context, input *greengrass.DeleteDeviceDefinitionInput) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	var output greengrass.DeleteDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteDeviceDefinitionInput) *GreengrassDeleteDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteDeviceDefinition", input)
	return &GreengrassDeleteDeviceDefinitionFuture{Future: future}
}

func (a *stub) DeleteFunctionDefinition(ctx workflow.Context, input *greengrass.DeleteFunctionDefinitionInput) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	var output greengrass.DeleteFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteFunctionDefinitionInput) *GreengrassDeleteFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteFunctionDefinition", input)
	return &GreengrassDeleteFunctionDefinitionFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *greengrass.DeleteGroupInput) (*greengrass.DeleteGroupOutput, error) {
	var output greengrass.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *greengrass.DeleteGroupInput) *GreengrassDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteGroup", input)
	return &GreengrassDeleteGroupFuture{Future: future}
}

func (a *stub) DeleteLoggerDefinition(ctx workflow.Context, input *greengrass.DeleteLoggerDefinitionInput) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	var output greengrass.DeleteLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteLoggerDefinitionInput) *GreengrassDeleteLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteLoggerDefinition", input)
	return &GreengrassDeleteLoggerDefinitionFuture{Future: future}
}

func (a *stub) DeleteResourceDefinition(ctx workflow.Context, input *greengrass.DeleteResourceDefinitionInput) (*greengrass.DeleteResourceDefinitionOutput, error) {
	var output greengrass.DeleteResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteResourceDefinitionInput) *GreengrassDeleteResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteResourceDefinition", input)
	return &GreengrassDeleteResourceDefinitionFuture{Future: future}
}

func (a *stub) DeleteSubscriptionDefinition(ctx workflow.Context, input *greengrass.DeleteSubscriptionDefinitionInput) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	var output greengrass.DeleteSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteSubscriptionDefinitionInput) *GreengrassDeleteSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteSubscriptionDefinition", input)
	return &GreengrassDeleteSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) DisassociateRoleFromGroup(ctx workflow.Context, input *greengrass.DisassociateRoleFromGroupInput) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	var output greengrass.DisassociateRoleFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateRoleFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRoleFromGroupAsync(ctx workflow.Context, input *greengrass.DisassociateRoleFromGroupInput) *GreengrassDisassociateRoleFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateRoleFromGroup", input)
	return &GreengrassDisassociateRoleFromGroupFuture{Future: future}
}

func (a *stub) DisassociateServiceRoleFromAccount(ctx workflow.Context, input *greengrass.DisassociateServiceRoleFromAccountInput) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	var output greengrass.DisassociateServiceRoleFromAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateServiceRoleFromAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateServiceRoleFromAccountAsync(ctx workflow.Context, input *greengrass.DisassociateServiceRoleFromAccountInput) *GreengrassDisassociateServiceRoleFromAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateServiceRoleFromAccount", input)
	return &GreengrassDisassociateServiceRoleFromAccountFuture{Future: future}
}

func (a *stub) GetAssociatedRole(ctx workflow.Context, input *greengrass.GetAssociatedRoleInput) (*greengrass.GetAssociatedRoleOutput, error) {
	var output greengrass.GetAssociatedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetAssociatedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssociatedRoleAsync(ctx workflow.Context, input *greengrass.GetAssociatedRoleInput) *GreengrassGetAssociatedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetAssociatedRole", input)
	return &GreengrassGetAssociatedRoleFuture{Future: future}
}

func (a *stub) GetBulkDeploymentStatus(ctx workflow.Context, input *greengrass.GetBulkDeploymentStatusInput) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	var output greengrass.GetBulkDeploymentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetBulkDeploymentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBulkDeploymentStatusAsync(ctx workflow.Context, input *greengrass.GetBulkDeploymentStatusInput) *GreengrassGetBulkDeploymentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetBulkDeploymentStatus", input)
	return &GreengrassGetBulkDeploymentStatusFuture{Future: future}
}

func (a *stub) GetConnectivityInfo(ctx workflow.Context, input *greengrass.GetConnectivityInfoInput) (*greengrass.GetConnectivityInfoOutput, error) {
	var output greengrass.GetConnectivityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectivityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectivityInfoAsync(ctx workflow.Context, input *greengrass.GetConnectivityInfoInput) *GreengrassGetConnectivityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectivityInfo", input)
	return &GreengrassGetConnectivityInfoFuture{Future: future}
}

func (a *stub) GetConnectorDefinition(ctx workflow.Context, input *greengrass.GetConnectorDefinitionInput) (*greengrass.GetConnectorDefinitionOutput, error) {
	var output greengrass.GetConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.GetConnectorDefinitionInput) *GreengrassGetConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinition", input)
	return &GreengrassGetConnectorDefinitionFuture{Future: future}
}

func (a *stub) GetConnectorDefinitionVersion(ctx workflow.Context, input *greengrass.GetConnectorDefinitionVersionInput) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	var output greengrass.GetConnectorDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectorDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetConnectorDefinitionVersionInput) *GreengrassGetConnectorDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinitionVersion", input)
	return &GreengrassGetConnectorDefinitionVersionFuture{Future: future}
}

func (a *stub) GetCoreDefinition(ctx workflow.Context, input *greengrass.GetCoreDefinitionInput) (*greengrass.GetCoreDefinitionOutput, error) {
	var output greengrass.GetCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCoreDefinitionAsync(ctx workflow.Context, input *greengrass.GetCoreDefinitionInput) *GreengrassGetCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinition", input)
	return &GreengrassGetCoreDefinitionFuture{Future: future}
}

func (a *stub) GetCoreDefinitionVersion(ctx workflow.Context, input *greengrass.GetCoreDefinitionVersionInput) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	var output greengrass.GetCoreDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCoreDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetCoreDefinitionVersionInput) *GreengrassGetCoreDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinitionVersion", input)
	return &GreengrassGetCoreDefinitionVersionFuture{Future: future}
}

func (a *stub) GetDeploymentStatus(ctx workflow.Context, input *greengrass.GetDeploymentStatusInput) (*greengrass.GetDeploymentStatusOutput, error) {
	var output greengrass.GetDeploymentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeploymentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentStatusAsync(ctx workflow.Context, input *greengrass.GetDeploymentStatusInput) *GreengrassGetDeploymentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeploymentStatus", input)
	return &GreengrassGetDeploymentStatusFuture{Future: future}
}

func (a *stub) GetDeviceDefinition(ctx workflow.Context, input *greengrass.GetDeviceDefinitionInput) (*greengrass.GetDeviceDefinitionOutput, error) {
	var output greengrass.GetDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.GetDeviceDefinitionInput) *GreengrassGetDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinition", input)
	return &GreengrassGetDeviceDefinitionFuture{Future: future}
}

func (a *stub) GetDeviceDefinitionVersion(ctx workflow.Context, input *greengrass.GetDeviceDefinitionVersionInput) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	var output greengrass.GetDeviceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetDeviceDefinitionVersionInput) *GreengrassGetDeviceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinitionVersion", input)
	return &GreengrassGetDeviceDefinitionVersionFuture{Future: future}
}

func (a *stub) GetFunctionDefinition(ctx workflow.Context, input *greengrass.GetFunctionDefinitionInput) (*greengrass.GetFunctionDefinitionOutput, error) {
	var output greengrass.GetFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.GetFunctionDefinitionInput) *GreengrassGetFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinition", input)
	return &GreengrassGetFunctionDefinitionFuture{Future: future}
}

func (a *stub) GetFunctionDefinitionVersion(ctx workflow.Context, input *greengrass.GetFunctionDefinitionVersionInput) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	var output greengrass.GetFunctionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetFunctionDefinitionVersionInput) *GreengrassGetFunctionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinitionVersion", input)
	return &GreengrassGetFunctionDefinitionVersionFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *greengrass.GetGroupInput) (*greengrass.GetGroupOutput, error) {
	var output greengrass.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *greengrass.GetGroupInput) *GreengrassGetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroup", input)
	return &GreengrassGetGroupFuture{Future: future}
}

func (a *stub) GetGroupCertificateAuthority(ctx workflow.Context, input *greengrass.GetGroupCertificateAuthorityInput) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	var output greengrass.GetGroupCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupCertificateAuthorityAsync(ctx workflow.Context, input *greengrass.GetGroupCertificateAuthorityInput) *GreengrassGetGroupCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateAuthority", input)
	return &GreengrassGetGroupCertificateAuthorityFuture{Future: future}
}

func (a *stub) GetGroupCertificateConfiguration(ctx workflow.Context, input *greengrass.GetGroupCertificateConfigurationInput) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	var output greengrass.GetGroupCertificateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupCertificateConfigurationAsync(ctx workflow.Context, input *greengrass.GetGroupCertificateConfigurationInput) *GreengrassGetGroupCertificateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateConfiguration", input)
	return &GreengrassGetGroupCertificateConfigurationFuture{Future: future}
}

func (a *stub) GetGroupVersion(ctx workflow.Context, input *greengrass.GetGroupVersionInput) (*greengrass.GetGroupVersionOutput, error) {
	var output greengrass.GetGroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupVersionAsync(ctx workflow.Context, input *greengrass.GetGroupVersionInput) *GreengrassGetGroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupVersion", input)
	return &GreengrassGetGroupVersionFuture{Future: future}
}

func (a *stub) GetLoggerDefinition(ctx workflow.Context, input *greengrass.GetLoggerDefinitionInput) (*greengrass.GetLoggerDefinitionOutput, error) {
	var output greengrass.GetLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.GetLoggerDefinitionInput) *GreengrassGetLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinition", input)
	return &GreengrassGetLoggerDefinitionFuture{Future: future}
}

func (a *stub) GetLoggerDefinitionVersion(ctx workflow.Context, input *greengrass.GetLoggerDefinitionVersionInput) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	var output greengrass.GetLoggerDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggerDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetLoggerDefinitionVersionInput) *GreengrassGetLoggerDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinitionVersion", input)
	return &GreengrassGetLoggerDefinitionVersionFuture{Future: future}
}

func (a *stub) GetResourceDefinition(ctx workflow.Context, input *greengrass.GetResourceDefinitionInput) (*greengrass.GetResourceDefinitionOutput, error) {
	var output greengrass.GetResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceDefinitionAsync(ctx workflow.Context, input *greengrass.GetResourceDefinitionInput) *GreengrassGetResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinition", input)
	return &GreengrassGetResourceDefinitionFuture{Future: future}
}

func (a *stub) GetResourceDefinitionVersion(ctx workflow.Context, input *greengrass.GetResourceDefinitionVersionInput) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	var output greengrass.GetResourceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetResourceDefinitionVersionInput) *GreengrassGetResourceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinitionVersion", input)
	return &GreengrassGetResourceDefinitionVersionFuture{Future: future}
}

func (a *stub) GetServiceRoleForAccount(ctx workflow.Context, input *greengrass.GetServiceRoleForAccountInput) (*greengrass.GetServiceRoleForAccountOutput, error) {
	var output greengrass.GetServiceRoleForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetServiceRoleForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceRoleForAccountAsync(ctx workflow.Context, input *greengrass.GetServiceRoleForAccountInput) *GreengrassGetServiceRoleForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetServiceRoleForAccount", input)
	return &GreengrassGetServiceRoleForAccountFuture{Future: future}
}

func (a *stub) GetSubscriptionDefinition(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionInput) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionInput) *GreengrassGetSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinition", input)
	return &GreengrassGetSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) GetSubscriptionDefinitionVersion(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionVersionInput) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSubscriptionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionVersionInput) *GreengrassGetSubscriptionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinitionVersion", input)
	return &GreengrassGetSubscriptionDefinitionVersionFuture{Future: future}
}

func (a *stub) GetThingRuntimeConfiguration(ctx workflow.Context, input *greengrass.GetThingRuntimeConfigurationInput) (*greengrass.GetThingRuntimeConfigurationOutput, error) {
	var output greengrass.GetThingRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetThingRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetThingRuntimeConfigurationAsync(ctx workflow.Context, input *greengrass.GetThingRuntimeConfigurationInput) *GreengrassGetThingRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetThingRuntimeConfiguration", input)
	return &GreengrassGetThingRuntimeConfigurationFuture{Future: future}
}

func (a *stub) ListBulkDeploymentDetailedReports(ctx workflow.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	var output greengrass.ListBulkDeploymentDetailedReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeploymentDetailedReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBulkDeploymentDetailedReportsAsync(ctx workflow.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput) *GreengrassListBulkDeploymentDetailedReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeploymentDetailedReports", input)
	return &GreengrassListBulkDeploymentDetailedReportsFuture{Future: future}
}

func (a *stub) ListBulkDeployments(ctx workflow.Context, input *greengrass.ListBulkDeploymentsInput) (*greengrass.ListBulkDeploymentsOutput, error) {
	var output greengrass.ListBulkDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBulkDeploymentsAsync(ctx workflow.Context, input *greengrass.ListBulkDeploymentsInput) *GreengrassListBulkDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeployments", input)
	return &GreengrassListBulkDeploymentsFuture{Future: future}
}

func (a *stub) ListConnectorDefinitionVersions(ctx workflow.Context, input *greengrass.ListConnectorDefinitionVersionsInput) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	var output greengrass.ListConnectorDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListConnectorDefinitionVersionsInput) *GreengrassListConnectorDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitionVersions", input)
	return &GreengrassListConnectorDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListConnectorDefinitions(ctx workflow.Context, input *greengrass.ListConnectorDefinitionsInput) (*greengrass.ListConnectorDefinitionsOutput, error) {
	var output greengrass.ListConnectorDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorDefinitionsAsync(ctx workflow.Context, input *greengrass.ListConnectorDefinitionsInput) *GreengrassListConnectorDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitions", input)
	return &GreengrassListConnectorDefinitionsFuture{Future: future}
}

func (a *stub) ListCoreDefinitionVersions(ctx workflow.Context, input *greengrass.ListCoreDefinitionVersionsInput) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	var output greengrass.ListCoreDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCoreDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListCoreDefinitionVersionsInput) *GreengrassListCoreDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitionVersions", input)
	return &GreengrassListCoreDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListCoreDefinitions(ctx workflow.Context, input *greengrass.ListCoreDefinitionsInput) (*greengrass.ListCoreDefinitionsOutput, error) {
	var output greengrass.ListCoreDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCoreDefinitionsAsync(ctx workflow.Context, input *greengrass.ListCoreDefinitionsInput) *GreengrassListCoreDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitions", input)
	return &GreengrassListCoreDefinitionsFuture{Future: future}
}

func (a *stub) ListDeployments(ctx workflow.Context, input *greengrass.ListDeploymentsInput) (*greengrass.ListDeploymentsOutput, error) {
	var output greengrass.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentsAsync(ctx workflow.Context, input *greengrass.ListDeploymentsInput) *GreengrassListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeployments", input)
	return &GreengrassListDeploymentsFuture{Future: future}
}

func (a *stub) ListDeviceDefinitionVersions(ctx workflow.Context, input *greengrass.ListDeviceDefinitionVersionsInput) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	var output greengrass.ListDeviceDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListDeviceDefinitionVersionsInput) *GreengrassListDeviceDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitionVersions", input)
	return &GreengrassListDeviceDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListDeviceDefinitions(ctx workflow.Context, input *greengrass.ListDeviceDefinitionsInput) (*greengrass.ListDeviceDefinitionsOutput, error) {
	var output greengrass.ListDeviceDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceDefinitionsAsync(ctx workflow.Context, input *greengrass.ListDeviceDefinitionsInput) *GreengrassListDeviceDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitions", input)
	return &GreengrassListDeviceDefinitionsFuture{Future: future}
}

func (a *stub) ListFunctionDefinitionVersions(ctx workflow.Context, input *greengrass.ListFunctionDefinitionVersionsInput) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	var output greengrass.ListFunctionDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListFunctionDefinitionVersionsInput) *GreengrassListFunctionDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitionVersions", input)
	return &GreengrassListFunctionDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListFunctionDefinitions(ctx workflow.Context, input *greengrass.ListFunctionDefinitionsInput) (*greengrass.ListFunctionDefinitionsOutput, error) {
	var output greengrass.ListFunctionDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionDefinitionsAsync(ctx workflow.Context, input *greengrass.ListFunctionDefinitionsInput) *GreengrassListFunctionDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitions", input)
	return &GreengrassListFunctionDefinitionsFuture{Future: future}
}

func (a *stub) ListGroupCertificateAuthorities(ctx workflow.Context, input *greengrass.ListGroupCertificateAuthoritiesInput) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	var output greengrass.ListGroupCertificateAuthoritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupCertificateAuthorities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupCertificateAuthoritiesAsync(ctx workflow.Context, input *greengrass.ListGroupCertificateAuthoritiesInput) *GreengrassListGroupCertificateAuthoritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupCertificateAuthorities", input)
	return &GreengrassListGroupCertificateAuthoritiesFuture{Future: future}
}

func (a *stub) ListGroupVersions(ctx workflow.Context, input *greengrass.ListGroupVersionsInput) (*greengrass.ListGroupVersionsOutput, error) {
	var output greengrass.ListGroupVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupVersionsAsync(ctx workflow.Context, input *greengrass.ListGroupVersionsInput) *GreengrassListGroupVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupVersions", input)
	return &GreengrassListGroupVersionsFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *greengrass.ListGroupsInput) (*greengrass.ListGroupsOutput, error) {
	var output greengrass.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *greengrass.ListGroupsInput) *GreengrassListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroups", input)
	return &GreengrassListGroupsFuture{Future: future}
}

func (a *stub) ListLoggerDefinitionVersions(ctx workflow.Context, input *greengrass.ListLoggerDefinitionVersionsInput) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	var output greengrass.ListLoggerDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggerDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListLoggerDefinitionVersionsInput) *GreengrassListLoggerDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitionVersions", input)
	return &GreengrassListLoggerDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListLoggerDefinitions(ctx workflow.Context, input *greengrass.ListLoggerDefinitionsInput) (*greengrass.ListLoggerDefinitionsOutput, error) {
	var output greengrass.ListLoggerDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggerDefinitionsAsync(ctx workflow.Context, input *greengrass.ListLoggerDefinitionsInput) *GreengrassListLoggerDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitions", input)
	return &GreengrassListLoggerDefinitionsFuture{Future: future}
}

func (a *stub) ListResourceDefinitionVersions(ctx workflow.Context, input *greengrass.ListResourceDefinitionVersionsInput) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	var output greengrass.ListResourceDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListResourceDefinitionVersionsInput) *GreengrassListResourceDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitionVersions", input)
	return &GreengrassListResourceDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListResourceDefinitions(ctx workflow.Context, input *greengrass.ListResourceDefinitionsInput) (*greengrass.ListResourceDefinitionsOutput, error) {
	var output greengrass.ListResourceDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDefinitionsAsync(ctx workflow.Context, input *greengrass.ListResourceDefinitionsInput) *GreengrassListResourceDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitions", input)
	return &GreengrassListResourceDefinitionsFuture{Future: future}
}

func (a *stub) ListSubscriptionDefinitionVersions(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput) *GreengrassListSubscriptionDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitionVersions", input)
	return &GreengrassListSubscriptionDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListSubscriptionDefinitions(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionsInput) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionDefinitionsAsync(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionsInput) *GreengrassListSubscriptionDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitions", input)
	return &GreengrassListSubscriptionDefinitionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *greengrass.ListTagsForResourceInput) (*greengrass.ListTagsForResourceOutput, error) {
	var output greengrass.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *greengrass.ListTagsForResourceInput) *GreengrassListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListTagsForResource", input)
	return &GreengrassListTagsForResourceFuture{Future: future}
}

func (a *stub) ResetDeployments(ctx workflow.Context, input *greengrass.ResetDeploymentsInput) (*greengrass.ResetDeploymentsOutput, error) {
	var output greengrass.ResetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ResetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDeploymentsAsync(ctx workflow.Context, input *greengrass.ResetDeploymentsInput) *GreengrassResetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ResetDeployments", input)
	return &GreengrassResetDeploymentsFuture{Future: future}
}

func (a *stub) StartBulkDeployment(ctx workflow.Context, input *greengrass.StartBulkDeploymentInput) (*greengrass.StartBulkDeploymentOutput, error) {
	var output greengrass.StartBulkDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-StartBulkDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBulkDeploymentAsync(ctx workflow.Context, input *greengrass.StartBulkDeploymentInput) *GreengrassStartBulkDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-StartBulkDeployment", input)
	return &GreengrassStartBulkDeploymentFuture{Future: future}
}

func (a *stub) StopBulkDeployment(ctx workflow.Context, input *greengrass.StopBulkDeploymentInput) (*greengrass.StopBulkDeploymentOutput, error) {
	var output greengrass.StopBulkDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-StopBulkDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBulkDeploymentAsync(ctx workflow.Context, input *greengrass.StopBulkDeploymentInput) *GreengrassStopBulkDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-StopBulkDeployment", input)
	return &GreengrassStopBulkDeploymentFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *greengrass.TagResourceInput) (*greengrass.TagResourceOutput, error) {
	var output greengrass.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *greengrass.TagResourceInput) *GreengrassTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-TagResource", input)
	return &GreengrassTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *greengrass.UntagResourceInput) (*greengrass.UntagResourceOutput, error) {
	var output greengrass.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *greengrass.UntagResourceInput) *GreengrassUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UntagResource", input)
	return &GreengrassUntagResourceFuture{Future: future}
}

func (a *stub) UpdateConnectivityInfo(ctx workflow.Context, input *greengrass.UpdateConnectivityInfoInput) (*greengrass.UpdateConnectivityInfoOutput, error) {
	var output greengrass.UpdateConnectivityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectivityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectivityInfoAsync(ctx workflow.Context, input *greengrass.UpdateConnectivityInfoInput) *GreengrassUpdateConnectivityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectivityInfo", input)
	return &GreengrassUpdateConnectivityInfoFuture{Future: future}
}

func (a *stub) UpdateConnectorDefinition(ctx workflow.Context, input *greengrass.UpdateConnectorDefinitionInput) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	var output greengrass.UpdateConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateConnectorDefinitionInput) *GreengrassUpdateConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectorDefinition", input)
	return &GreengrassUpdateConnectorDefinitionFuture{Future: future}
}

func (a *stub) UpdateCoreDefinition(ctx workflow.Context, input *greengrass.UpdateCoreDefinitionInput) (*greengrass.UpdateCoreDefinitionOutput, error) {
	var output greengrass.UpdateCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCoreDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateCoreDefinitionInput) *GreengrassUpdateCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateCoreDefinition", input)
	return &GreengrassUpdateCoreDefinitionFuture{Future: future}
}

func (a *stub) UpdateDeviceDefinition(ctx workflow.Context, input *greengrass.UpdateDeviceDefinitionInput) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	var output greengrass.UpdateDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateDeviceDefinitionInput) *GreengrassUpdateDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateDeviceDefinition", input)
	return &GreengrassUpdateDeviceDefinitionFuture{Future: future}
}

func (a *stub) UpdateFunctionDefinition(ctx workflow.Context, input *greengrass.UpdateFunctionDefinitionInput) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	var output greengrass.UpdateFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateFunctionDefinitionInput) *GreengrassUpdateFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateFunctionDefinition", input)
	return &GreengrassUpdateFunctionDefinitionFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *greengrass.UpdateGroupInput) (*greengrass.UpdateGroupOutput, error) {
	var output greengrass.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *greengrass.UpdateGroupInput) *GreengrassUpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroup", input)
	return &GreengrassUpdateGroupFuture{Future: future}
}

func (a *stub) UpdateGroupCertificateConfiguration(ctx workflow.Context, input *greengrass.UpdateGroupCertificateConfigurationInput) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	var output greengrass.UpdateGroupCertificateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroupCertificateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupCertificateConfigurationAsync(ctx workflow.Context, input *greengrass.UpdateGroupCertificateConfigurationInput) *GreengrassUpdateGroupCertificateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroupCertificateConfiguration", input)
	return &GreengrassUpdateGroupCertificateConfigurationFuture{Future: future}
}

func (a *stub) UpdateLoggerDefinition(ctx workflow.Context, input *greengrass.UpdateLoggerDefinitionInput) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	var output greengrass.UpdateLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateLoggerDefinitionInput) *GreengrassUpdateLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateLoggerDefinition", input)
	return &GreengrassUpdateLoggerDefinitionFuture{Future: future}
}

func (a *stub) UpdateResourceDefinition(ctx workflow.Context, input *greengrass.UpdateResourceDefinitionInput) (*greengrass.UpdateResourceDefinitionOutput, error) {
	var output greengrass.UpdateResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateResourceDefinitionInput) *GreengrassUpdateResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateResourceDefinition", input)
	return &GreengrassUpdateResourceDefinitionFuture{Future: future}
}

func (a *stub) UpdateSubscriptionDefinition(ctx workflow.Context, input *greengrass.UpdateSubscriptionDefinitionInput) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	var output greengrass.UpdateSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateSubscriptionDefinitionInput) *GreengrassUpdateSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateSubscriptionDefinition", input)
	return &GreengrassUpdateSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) UpdateThingRuntimeConfiguration(ctx workflow.Context, input *greengrass.UpdateThingRuntimeConfigurationInput) (*greengrass.UpdateThingRuntimeConfigurationOutput, error) {
	var output greengrass.UpdateThingRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateThingRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThingRuntimeConfigurationAsync(ctx workflow.Context, input *greengrass.UpdateThingRuntimeConfigurationInput) *GreengrassUpdateThingRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateThingRuntimeConfiguration", input)
	return &GreengrassUpdateThingRuntimeConfigurationFuture{Future: future}
}
