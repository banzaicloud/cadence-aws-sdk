// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package greengrassstub

import (
	"github.com/aws/aws-sdk-go/service/greengrass"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateRoleToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateRoleToGroupFuture) Get(ctx workflow.Context) (*greengrass.AssociateRoleToGroupOutput, error) {
	var output greengrass.AssociateRoleToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateServiceRoleToAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateServiceRoleToAccountFuture) Get(ctx workflow.Context) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	var output greengrass.AssociateServiceRoleToAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateConnectorDefinitionOutput, error) {
	var output greengrass.CreateConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConnectorDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectorDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	var output greengrass.CreateConnectorDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateCoreDefinitionOutput, error) {
	var output greengrass.CreateCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCoreDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCoreDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	var output greengrass.CreateCoreDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentFuture) Get(ctx workflow.Context) (*greengrass.CreateDeploymentOutput, error) {
	var output greengrass.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateDeviceDefinitionOutput, error) {
	var output greengrass.CreateDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeviceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeviceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	var output greengrass.CreateDeviceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateFunctionDefinitionOutput, error) {
	var output greengrass.CreateFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFunctionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFunctionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	var output greengrass.CreateFunctionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupOutput, error) {
	var output greengrass.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupCertificateAuthorityFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	var output greengrass.CreateGroupCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateGroupVersionOutput, error) {
	var output greengrass.CreateGroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateLoggerDefinitionOutput, error) {
	var output greengrass.CreateLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLoggerDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLoggerDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	var output greengrass.CreateLoggerDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateResourceDefinitionOutput, error) {
	var output greengrass.CreateResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	var output greengrass.CreateResourceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSoftwareUpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSoftwareUpdateJobFuture) Get(ctx workflow.Context) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	var output greengrass.CreateSoftwareUpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSubscriptionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSubscriptionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	var output greengrass.DeleteConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteCoreDefinitionOutput, error) {
	var output greengrass.DeleteCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	var output greengrass.DeleteDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	var output greengrass.DeleteFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*greengrass.DeleteGroupOutput, error) {
	var output greengrass.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	var output greengrass.DeleteLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteResourceDefinitionOutput, error) {
	var output greengrass.DeleteResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	var output greengrass.DeleteSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateRoleFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateRoleFromGroupFuture) Get(ctx workflow.Context) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	var output greengrass.DisassociateRoleFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateServiceRoleFromAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateServiceRoleFromAccountFuture) Get(ctx workflow.Context) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	var output greengrass.DisassociateServiceRoleFromAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssociatedRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssociatedRoleFuture) Get(ctx workflow.Context) (*greengrass.GetAssociatedRoleOutput, error) {
	var output greengrass.GetAssociatedRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBulkDeploymentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBulkDeploymentStatusFuture) Get(ctx workflow.Context) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	var output greengrass.GetBulkDeploymentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectivityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectivityInfoFuture) Get(ctx workflow.Context) (*greengrass.GetConnectivityInfoOutput, error) {
	var output greengrass.GetConnectivityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetConnectorDefinitionOutput, error) {
	var output greengrass.GetConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConnectorDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConnectorDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	var output greengrass.GetConnectorDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetCoreDefinitionOutput, error) {
	var output greengrass.GetCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCoreDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCoreDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	var output greengrass.GetCoreDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentStatusFuture) Get(ctx workflow.Context) (*greengrass.GetDeploymentStatusOutput, error) {
	var output greengrass.GetDeploymentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetDeviceDefinitionOutput, error) {
	var output greengrass.GetDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	var output greengrass.GetDeviceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetFunctionDefinitionOutput, error) {
	var output greengrass.GetFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFunctionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFunctionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	var output greengrass.GetFunctionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupFuture) Get(ctx workflow.Context) (*greengrass.GetGroupOutput, error) {
	var output greengrass.GetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupCertificateAuthorityFuture) Get(ctx workflow.Context) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	var output greengrass.GetGroupCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupCertificateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupCertificateConfigurationFuture) Get(ctx workflow.Context) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	var output greengrass.GetGroupCertificateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupVersionFuture) Get(ctx workflow.Context) (*greengrass.GetGroupVersionOutput, error) {
	var output greengrass.GetGroupVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetLoggerDefinitionOutput, error) {
	var output greengrass.GetLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLoggerDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLoggerDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	var output greengrass.GetLoggerDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetResourceDefinitionOutput, error) {
	var output greengrass.GetResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourceDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourceDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	var output greengrass.GetResourceDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceRoleForAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceRoleForAccountFuture) Get(ctx workflow.Context) (*greengrass.GetServiceRoleForAccountOutput, error) {
	var output greengrass.GetServiceRoleForAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSubscriptionDefinitionVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSubscriptionDefinitionVersionFuture) Get(ctx workflow.Context) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetThingRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetThingRuntimeConfigurationFuture) Get(ctx workflow.Context) (*greengrass.GetThingRuntimeConfigurationOutput, error) {
	var output greengrass.GetThingRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBulkDeploymentDetailedReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBulkDeploymentDetailedReportsFuture) Get(ctx workflow.Context) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	var output greengrass.ListBulkDeploymentDetailedReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBulkDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBulkDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ListBulkDeploymentsOutput, error) {
	var output greengrass.ListBulkDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConnectorDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConnectorDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	var output greengrass.ListConnectorDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListConnectorDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListConnectorDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListConnectorDefinitionsOutput, error) {
	var output greengrass.ListConnectorDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCoreDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCoreDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	var output greengrass.ListCoreDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCoreDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCoreDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListCoreDefinitionsOutput, error) {
	var output greengrass.ListCoreDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ListDeploymentsOutput, error) {
	var output greengrass.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	var output greengrass.ListDeviceDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListDeviceDefinitionsOutput, error) {
	var output greengrass.ListDeviceDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	var output greengrass.ListFunctionDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFunctionDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFunctionDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListFunctionDefinitionsOutput, error) {
	var output greengrass.ListFunctionDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupCertificateAuthoritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupCertificateAuthoritiesFuture) Get(ctx workflow.Context) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	var output greengrass.ListGroupCertificateAuthoritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListGroupVersionsOutput, error) {
	var output greengrass.ListGroupVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsFuture) Get(ctx workflow.Context) (*greengrass.ListGroupsOutput, error) {
	var output greengrass.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLoggerDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLoggerDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	var output greengrass.ListLoggerDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLoggerDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLoggerDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListLoggerDefinitionsOutput, error) {
	var output greengrass.ListLoggerDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	var output greengrass.ListResourceDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListResourceDefinitionsOutput, error) {
	var output greengrass.ListResourceDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSubscriptionDefinitionVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSubscriptionDefinitionVersionsFuture) Get(ctx workflow.Context) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSubscriptionDefinitionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSubscriptionDefinitionsFuture) Get(ctx workflow.Context) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*greengrass.ListTagsForResourceOutput, error) {
	var output greengrass.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetDeploymentsFuture) Get(ctx workflow.Context) (*greengrass.ResetDeploymentsOutput, error) {
	var output greengrass.ResetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartBulkDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartBulkDeploymentFuture) Get(ctx workflow.Context) (*greengrass.StartBulkDeploymentOutput, error) {
	var output greengrass.StartBulkDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopBulkDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopBulkDeploymentFuture) Get(ctx workflow.Context) (*greengrass.StopBulkDeploymentOutput, error) {
	var output greengrass.StopBulkDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*greengrass.TagResourceOutput, error) {
	var output greengrass.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*greengrass.UntagResourceOutput, error) {
	var output greengrass.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConnectivityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConnectivityInfoFuture) Get(ctx workflow.Context) (*greengrass.UpdateConnectivityInfoOutput, error) {
	var output greengrass.UpdateConnectivityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConnectorDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConnectorDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	var output greengrass.UpdateConnectorDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCoreDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCoreDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateCoreDefinitionOutput, error) {
	var output greengrass.UpdateCoreDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeviceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeviceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	var output greengrass.UpdateDeviceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFunctionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFunctionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	var output greengrass.UpdateFunctionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupFuture) Get(ctx workflow.Context) (*greengrass.UpdateGroupOutput, error) {
	var output greengrass.UpdateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGroupCertificateConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGroupCertificateConfigurationFuture) Get(ctx workflow.Context) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	var output greengrass.UpdateGroupCertificateConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLoggerDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLoggerDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	var output greengrass.UpdateLoggerDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateResourceDefinitionOutput, error) {
	var output greengrass.UpdateResourceDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSubscriptionDefinitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSubscriptionDefinitionFuture) Get(ctx workflow.Context) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	var output greengrass.UpdateSubscriptionDefinitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateThingRuntimeConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateThingRuntimeConfigurationFuture) Get(ctx workflow.Context) (*greengrass.UpdateThingRuntimeConfigurationOutput, error) {
	var output greengrass.UpdateThingRuntimeConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoleToGroup(ctx workflow.Context, input *greengrass.AssociateRoleToGroupInput) (*greengrass.AssociateRoleToGroupOutput, error) {
	var output greengrass.AssociateRoleToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateRoleToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoleToGroupAsync(ctx workflow.Context, input *greengrass.AssociateRoleToGroupInput) *AssociateRoleToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateRoleToGroup", input)
	return &AssociateRoleToGroupFuture{Future: future}
}

func (a *stub) AssociateServiceRoleToAccount(ctx workflow.Context, input *greengrass.AssociateServiceRoleToAccountInput) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	var output greengrass.AssociateServiceRoleToAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateServiceRoleToAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateServiceRoleToAccountAsync(ctx workflow.Context, input *greengrass.AssociateServiceRoleToAccountInput) *AssociateServiceRoleToAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-AssociateServiceRoleToAccount", input)
	return &AssociateServiceRoleToAccountFuture{Future: future}
}

func (a *stub) CreateConnectorDefinition(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionInput) (*greengrass.CreateConnectorDefinitionOutput, error) {
	var output greengrass.CreateConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionInput) *CreateConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinition", input)
	return &CreateConnectorDefinitionFuture{Future: future}
}

func (a *stub) CreateConnectorDefinitionVersion(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionVersionInput) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	var output greengrass.CreateConnectorDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectorDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateConnectorDefinitionVersionInput) *CreateConnectorDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateConnectorDefinitionVersion", input)
	return &CreateConnectorDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateCoreDefinition(ctx workflow.Context, input *greengrass.CreateCoreDefinitionInput) (*greengrass.CreateCoreDefinitionOutput, error) {
	var output greengrass.CreateCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCoreDefinitionAsync(ctx workflow.Context, input *greengrass.CreateCoreDefinitionInput) *CreateCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinition", input)
	return &CreateCoreDefinitionFuture{Future: future}
}

func (a *stub) CreateCoreDefinitionVersion(ctx workflow.Context, input *greengrass.CreateCoreDefinitionVersionInput) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	var output greengrass.CreateCoreDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCoreDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateCoreDefinitionVersionInput) *CreateCoreDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateCoreDefinitionVersion", input)
	return &CreateCoreDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *greengrass.CreateDeploymentInput) (*greengrass.CreateDeploymentOutput, error) {
	var output greengrass.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *greengrass.CreateDeploymentInput) *CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeployment", input)
	return &CreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDeviceDefinition(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionInput) (*greengrass.CreateDeviceDefinitionOutput, error) {
	var output greengrass.CreateDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionInput) *CreateDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinition", input)
	return &CreateDeviceDefinitionFuture{Future: future}
}

func (a *stub) CreateDeviceDefinitionVersion(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionVersionInput) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	var output greengrass.CreateDeviceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateDeviceDefinitionVersionInput) *CreateDeviceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateDeviceDefinitionVersion", input)
	return &CreateDeviceDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateFunctionDefinition(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionInput) (*greengrass.CreateFunctionDefinitionOutput, error) {
	var output greengrass.CreateFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionInput) *CreateFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinition", input)
	return &CreateFunctionDefinitionFuture{Future: future}
}

func (a *stub) CreateFunctionDefinitionVersion(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionVersionInput) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	var output greengrass.CreateFunctionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFunctionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateFunctionDefinitionVersionInput) *CreateFunctionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateFunctionDefinitionVersion", input)
	return &CreateFunctionDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *greengrass.CreateGroupInput) (*greengrass.CreateGroupOutput, error) {
	var output greengrass.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *greengrass.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateGroupCertificateAuthority(ctx workflow.Context, input *greengrass.CreateGroupCertificateAuthorityInput) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	var output greengrass.CreateGroupCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupCertificateAuthorityAsync(ctx workflow.Context, input *greengrass.CreateGroupCertificateAuthorityInput) *CreateGroupCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupCertificateAuthority", input)
	return &CreateGroupCertificateAuthorityFuture{Future: future}
}

func (a *stub) CreateGroupVersion(ctx workflow.Context, input *greengrass.CreateGroupVersionInput) (*greengrass.CreateGroupVersionOutput, error) {
	var output greengrass.CreateGroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupVersionAsync(ctx workflow.Context, input *greengrass.CreateGroupVersionInput) *CreateGroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateGroupVersion", input)
	return &CreateGroupVersionFuture{Future: future}
}

func (a *stub) CreateLoggerDefinition(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionInput) (*greengrass.CreateLoggerDefinitionOutput, error) {
	var output greengrass.CreateLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionInput) *CreateLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinition", input)
	return &CreateLoggerDefinitionFuture{Future: future}
}

func (a *stub) CreateLoggerDefinitionVersion(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionVersionInput) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	var output greengrass.CreateLoggerDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLoggerDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateLoggerDefinitionVersionInput) *CreateLoggerDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateLoggerDefinitionVersion", input)
	return &CreateLoggerDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateResourceDefinition(ctx workflow.Context, input *greengrass.CreateResourceDefinitionInput) (*greengrass.CreateResourceDefinitionOutput, error) {
	var output greengrass.CreateResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceDefinitionAsync(ctx workflow.Context, input *greengrass.CreateResourceDefinitionInput) *CreateResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinition", input)
	return &CreateResourceDefinitionFuture{Future: future}
}

func (a *stub) CreateResourceDefinitionVersion(ctx workflow.Context, input *greengrass.CreateResourceDefinitionVersionInput) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	var output greengrass.CreateResourceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateResourceDefinitionVersionInput) *CreateResourceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateResourceDefinitionVersion", input)
	return &CreateResourceDefinitionVersionFuture{Future: future}
}

func (a *stub) CreateSoftwareUpdateJob(ctx workflow.Context, input *greengrass.CreateSoftwareUpdateJobInput) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	var output greengrass.CreateSoftwareUpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSoftwareUpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSoftwareUpdateJobAsync(ctx workflow.Context, input *greengrass.CreateSoftwareUpdateJobInput) *CreateSoftwareUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSoftwareUpdateJob", input)
	return &CreateSoftwareUpdateJobFuture{Future: future}
}

func (a *stub) CreateSubscriptionDefinition(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionInput) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionInput) *CreateSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinition", input)
	return &CreateSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) CreateSubscriptionDefinitionVersion(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.CreateSubscriptionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubscriptionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.CreateSubscriptionDefinitionVersionInput) *CreateSubscriptionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-CreateSubscriptionDefinitionVersion", input)
	return &CreateSubscriptionDefinitionVersionFuture{Future: future}
}

func (a *stub) DeleteConnectorDefinition(ctx workflow.Context, input *greengrass.DeleteConnectorDefinitionInput) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	var output greengrass.DeleteConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteConnectorDefinitionInput) *DeleteConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteConnectorDefinition", input)
	return &DeleteConnectorDefinitionFuture{Future: future}
}

func (a *stub) DeleteCoreDefinition(ctx workflow.Context, input *greengrass.DeleteCoreDefinitionInput) (*greengrass.DeleteCoreDefinitionOutput, error) {
	var output greengrass.DeleteCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCoreDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteCoreDefinitionInput) *DeleteCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteCoreDefinition", input)
	return &DeleteCoreDefinitionFuture{Future: future}
}

func (a *stub) DeleteDeviceDefinition(ctx workflow.Context, input *greengrass.DeleteDeviceDefinitionInput) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	var output greengrass.DeleteDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteDeviceDefinitionInput) *DeleteDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteDeviceDefinition", input)
	return &DeleteDeviceDefinitionFuture{Future: future}
}

func (a *stub) DeleteFunctionDefinition(ctx workflow.Context, input *greengrass.DeleteFunctionDefinitionInput) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	var output greengrass.DeleteFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteFunctionDefinitionInput) *DeleteFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteFunctionDefinition", input)
	return &DeleteFunctionDefinitionFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *greengrass.DeleteGroupInput) (*greengrass.DeleteGroupOutput, error) {
	var output greengrass.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *greengrass.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteLoggerDefinition(ctx workflow.Context, input *greengrass.DeleteLoggerDefinitionInput) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	var output greengrass.DeleteLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteLoggerDefinitionInput) *DeleteLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteLoggerDefinition", input)
	return &DeleteLoggerDefinitionFuture{Future: future}
}

func (a *stub) DeleteResourceDefinition(ctx workflow.Context, input *greengrass.DeleteResourceDefinitionInput) (*greengrass.DeleteResourceDefinitionOutput, error) {
	var output greengrass.DeleteResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteResourceDefinitionInput) *DeleteResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteResourceDefinition", input)
	return &DeleteResourceDefinitionFuture{Future: future}
}

func (a *stub) DeleteSubscriptionDefinition(ctx workflow.Context, input *greengrass.DeleteSubscriptionDefinitionInput) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	var output greengrass.DeleteSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.DeleteSubscriptionDefinitionInput) *DeleteSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DeleteSubscriptionDefinition", input)
	return &DeleteSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) DisassociateRoleFromGroup(ctx workflow.Context, input *greengrass.DisassociateRoleFromGroupInput) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	var output greengrass.DisassociateRoleFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateRoleFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRoleFromGroupAsync(ctx workflow.Context, input *greengrass.DisassociateRoleFromGroupInput) *DisassociateRoleFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateRoleFromGroup", input)
	return &DisassociateRoleFromGroupFuture{Future: future}
}

func (a *stub) DisassociateServiceRoleFromAccount(ctx workflow.Context, input *greengrass.DisassociateServiceRoleFromAccountInput) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	var output greengrass.DisassociateServiceRoleFromAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateServiceRoleFromAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateServiceRoleFromAccountAsync(ctx workflow.Context, input *greengrass.DisassociateServiceRoleFromAccountInput) *DisassociateServiceRoleFromAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-DisassociateServiceRoleFromAccount", input)
	return &DisassociateServiceRoleFromAccountFuture{Future: future}
}

func (a *stub) GetAssociatedRole(ctx workflow.Context, input *greengrass.GetAssociatedRoleInput) (*greengrass.GetAssociatedRoleOutput, error) {
	var output greengrass.GetAssociatedRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetAssociatedRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssociatedRoleAsync(ctx workflow.Context, input *greengrass.GetAssociatedRoleInput) *GetAssociatedRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetAssociatedRole", input)
	return &GetAssociatedRoleFuture{Future: future}
}

func (a *stub) GetBulkDeploymentStatus(ctx workflow.Context, input *greengrass.GetBulkDeploymentStatusInput) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	var output greengrass.GetBulkDeploymentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetBulkDeploymentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBulkDeploymentStatusAsync(ctx workflow.Context, input *greengrass.GetBulkDeploymentStatusInput) *GetBulkDeploymentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetBulkDeploymentStatus", input)
	return &GetBulkDeploymentStatusFuture{Future: future}
}

func (a *stub) GetConnectivityInfo(ctx workflow.Context, input *greengrass.GetConnectivityInfoInput) (*greengrass.GetConnectivityInfoOutput, error) {
	var output greengrass.GetConnectivityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectivityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectivityInfoAsync(ctx workflow.Context, input *greengrass.GetConnectivityInfoInput) *GetConnectivityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectivityInfo", input)
	return &GetConnectivityInfoFuture{Future: future}
}

func (a *stub) GetConnectorDefinition(ctx workflow.Context, input *greengrass.GetConnectorDefinitionInput) (*greengrass.GetConnectorDefinitionOutput, error) {
	var output greengrass.GetConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.GetConnectorDefinitionInput) *GetConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinition", input)
	return &GetConnectorDefinitionFuture{Future: future}
}

func (a *stub) GetConnectorDefinitionVersion(ctx workflow.Context, input *greengrass.GetConnectorDefinitionVersionInput) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	var output greengrass.GetConnectorDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConnectorDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetConnectorDefinitionVersionInput) *GetConnectorDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetConnectorDefinitionVersion", input)
	return &GetConnectorDefinitionVersionFuture{Future: future}
}

func (a *stub) GetCoreDefinition(ctx workflow.Context, input *greengrass.GetCoreDefinitionInput) (*greengrass.GetCoreDefinitionOutput, error) {
	var output greengrass.GetCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCoreDefinitionAsync(ctx workflow.Context, input *greengrass.GetCoreDefinitionInput) *GetCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinition", input)
	return &GetCoreDefinitionFuture{Future: future}
}

func (a *stub) GetCoreDefinitionVersion(ctx workflow.Context, input *greengrass.GetCoreDefinitionVersionInput) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	var output greengrass.GetCoreDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCoreDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetCoreDefinitionVersionInput) *GetCoreDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetCoreDefinitionVersion", input)
	return &GetCoreDefinitionVersionFuture{Future: future}
}

func (a *stub) GetDeploymentStatus(ctx workflow.Context, input *greengrass.GetDeploymentStatusInput) (*greengrass.GetDeploymentStatusOutput, error) {
	var output greengrass.GetDeploymentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeploymentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentStatusAsync(ctx workflow.Context, input *greengrass.GetDeploymentStatusInput) *GetDeploymentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeploymentStatus", input)
	return &GetDeploymentStatusFuture{Future: future}
}

func (a *stub) GetDeviceDefinition(ctx workflow.Context, input *greengrass.GetDeviceDefinitionInput) (*greengrass.GetDeviceDefinitionOutput, error) {
	var output greengrass.GetDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.GetDeviceDefinitionInput) *GetDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinition", input)
	return &GetDeviceDefinitionFuture{Future: future}
}

func (a *stub) GetDeviceDefinitionVersion(ctx workflow.Context, input *greengrass.GetDeviceDefinitionVersionInput) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	var output greengrass.GetDeviceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetDeviceDefinitionVersionInput) *GetDeviceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetDeviceDefinitionVersion", input)
	return &GetDeviceDefinitionVersionFuture{Future: future}
}

func (a *stub) GetFunctionDefinition(ctx workflow.Context, input *greengrass.GetFunctionDefinitionInput) (*greengrass.GetFunctionDefinitionOutput, error) {
	var output greengrass.GetFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.GetFunctionDefinitionInput) *GetFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinition", input)
	return &GetFunctionDefinitionFuture{Future: future}
}

func (a *stub) GetFunctionDefinitionVersion(ctx workflow.Context, input *greengrass.GetFunctionDefinitionVersionInput) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	var output greengrass.GetFunctionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFunctionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetFunctionDefinitionVersionInput) *GetFunctionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetFunctionDefinitionVersion", input)
	return &GetFunctionDefinitionVersionFuture{Future: future}
}

func (a *stub) GetGroup(ctx workflow.Context, input *greengrass.GetGroupInput) (*greengrass.GetGroupOutput, error) {
	var output greengrass.GetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupAsync(ctx workflow.Context, input *greengrass.GetGroupInput) *GetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroup", input)
	return &GetGroupFuture{Future: future}
}

func (a *stub) GetGroupCertificateAuthority(ctx workflow.Context, input *greengrass.GetGroupCertificateAuthorityInput) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	var output greengrass.GetGroupCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupCertificateAuthorityAsync(ctx workflow.Context, input *greengrass.GetGroupCertificateAuthorityInput) *GetGroupCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateAuthority", input)
	return &GetGroupCertificateAuthorityFuture{Future: future}
}

func (a *stub) GetGroupCertificateConfiguration(ctx workflow.Context, input *greengrass.GetGroupCertificateConfigurationInput) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	var output greengrass.GetGroupCertificateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupCertificateConfigurationAsync(ctx workflow.Context, input *greengrass.GetGroupCertificateConfigurationInput) *GetGroupCertificateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupCertificateConfiguration", input)
	return &GetGroupCertificateConfigurationFuture{Future: future}
}

func (a *stub) GetGroupVersion(ctx workflow.Context, input *greengrass.GetGroupVersionInput) (*greengrass.GetGroupVersionOutput, error) {
	var output greengrass.GetGroupVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupVersionAsync(ctx workflow.Context, input *greengrass.GetGroupVersionInput) *GetGroupVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetGroupVersion", input)
	return &GetGroupVersionFuture{Future: future}
}

func (a *stub) GetLoggerDefinition(ctx workflow.Context, input *greengrass.GetLoggerDefinitionInput) (*greengrass.GetLoggerDefinitionOutput, error) {
	var output greengrass.GetLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.GetLoggerDefinitionInput) *GetLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinition", input)
	return &GetLoggerDefinitionFuture{Future: future}
}

func (a *stub) GetLoggerDefinitionVersion(ctx workflow.Context, input *greengrass.GetLoggerDefinitionVersionInput) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	var output greengrass.GetLoggerDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggerDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetLoggerDefinitionVersionInput) *GetLoggerDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetLoggerDefinitionVersion", input)
	return &GetLoggerDefinitionVersionFuture{Future: future}
}

func (a *stub) GetResourceDefinition(ctx workflow.Context, input *greengrass.GetResourceDefinitionInput) (*greengrass.GetResourceDefinitionOutput, error) {
	var output greengrass.GetResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceDefinitionAsync(ctx workflow.Context, input *greengrass.GetResourceDefinitionInput) *GetResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinition", input)
	return &GetResourceDefinitionFuture{Future: future}
}

func (a *stub) GetResourceDefinitionVersion(ctx workflow.Context, input *greengrass.GetResourceDefinitionVersionInput) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	var output greengrass.GetResourceDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourceDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetResourceDefinitionVersionInput) *GetResourceDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetResourceDefinitionVersion", input)
	return &GetResourceDefinitionVersionFuture{Future: future}
}

func (a *stub) GetServiceRoleForAccount(ctx workflow.Context, input *greengrass.GetServiceRoleForAccountInput) (*greengrass.GetServiceRoleForAccountOutput, error) {
	var output greengrass.GetServiceRoleForAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetServiceRoleForAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceRoleForAccountAsync(ctx workflow.Context, input *greengrass.GetServiceRoleForAccountInput) *GetServiceRoleForAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetServiceRoleForAccount", input)
	return &GetServiceRoleForAccountFuture{Future: future}
}

func (a *stub) GetSubscriptionDefinition(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionInput) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionInput) *GetSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinition", input)
	return &GetSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) GetSubscriptionDefinitionVersion(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionVersionInput) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	var output greengrass.GetSubscriptionDefinitionVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinitionVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSubscriptionDefinitionVersionAsync(ctx workflow.Context, input *greengrass.GetSubscriptionDefinitionVersionInput) *GetSubscriptionDefinitionVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetSubscriptionDefinitionVersion", input)
	return &GetSubscriptionDefinitionVersionFuture{Future: future}
}

func (a *stub) GetThingRuntimeConfiguration(ctx workflow.Context, input *greengrass.GetThingRuntimeConfigurationInput) (*greengrass.GetThingRuntimeConfigurationOutput, error) {
	var output greengrass.GetThingRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-GetThingRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetThingRuntimeConfigurationAsync(ctx workflow.Context, input *greengrass.GetThingRuntimeConfigurationInput) *GetThingRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-GetThingRuntimeConfiguration", input)
	return &GetThingRuntimeConfigurationFuture{Future: future}
}

func (a *stub) ListBulkDeploymentDetailedReports(ctx workflow.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	var output greengrass.ListBulkDeploymentDetailedReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeploymentDetailedReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBulkDeploymentDetailedReportsAsync(ctx workflow.Context, input *greengrass.ListBulkDeploymentDetailedReportsInput) *ListBulkDeploymentDetailedReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeploymentDetailedReports", input)
	return &ListBulkDeploymentDetailedReportsFuture{Future: future}
}

func (a *stub) ListBulkDeployments(ctx workflow.Context, input *greengrass.ListBulkDeploymentsInput) (*greengrass.ListBulkDeploymentsOutput, error) {
	var output greengrass.ListBulkDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBulkDeploymentsAsync(ctx workflow.Context, input *greengrass.ListBulkDeploymentsInput) *ListBulkDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListBulkDeployments", input)
	return &ListBulkDeploymentsFuture{Future: future}
}

func (a *stub) ListConnectorDefinitionVersions(ctx workflow.Context, input *greengrass.ListConnectorDefinitionVersionsInput) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	var output greengrass.ListConnectorDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListConnectorDefinitionVersionsInput) *ListConnectorDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitionVersions", input)
	return &ListConnectorDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListConnectorDefinitions(ctx workflow.Context, input *greengrass.ListConnectorDefinitionsInput) (*greengrass.ListConnectorDefinitionsOutput, error) {
	var output greengrass.ListConnectorDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListConnectorDefinitionsAsync(ctx workflow.Context, input *greengrass.ListConnectorDefinitionsInput) *ListConnectorDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListConnectorDefinitions", input)
	return &ListConnectorDefinitionsFuture{Future: future}
}

func (a *stub) ListCoreDefinitionVersions(ctx workflow.Context, input *greengrass.ListCoreDefinitionVersionsInput) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	var output greengrass.ListCoreDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCoreDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListCoreDefinitionVersionsInput) *ListCoreDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitionVersions", input)
	return &ListCoreDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListCoreDefinitions(ctx workflow.Context, input *greengrass.ListCoreDefinitionsInput) (*greengrass.ListCoreDefinitionsOutput, error) {
	var output greengrass.ListCoreDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCoreDefinitionsAsync(ctx workflow.Context, input *greengrass.ListCoreDefinitionsInput) *ListCoreDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListCoreDefinitions", input)
	return &ListCoreDefinitionsFuture{Future: future}
}

func (a *stub) ListDeployments(ctx workflow.Context, input *greengrass.ListDeploymentsInput) (*greengrass.ListDeploymentsOutput, error) {
	var output greengrass.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentsAsync(ctx workflow.Context, input *greengrass.ListDeploymentsInput) *ListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeployments", input)
	return &ListDeploymentsFuture{Future: future}
}

func (a *stub) ListDeviceDefinitionVersions(ctx workflow.Context, input *greengrass.ListDeviceDefinitionVersionsInput) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	var output greengrass.ListDeviceDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListDeviceDefinitionVersionsInput) *ListDeviceDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitionVersions", input)
	return &ListDeviceDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListDeviceDefinitions(ctx workflow.Context, input *greengrass.ListDeviceDefinitionsInput) (*greengrass.ListDeviceDefinitionsOutput, error) {
	var output greengrass.ListDeviceDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceDefinitionsAsync(ctx workflow.Context, input *greengrass.ListDeviceDefinitionsInput) *ListDeviceDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListDeviceDefinitions", input)
	return &ListDeviceDefinitionsFuture{Future: future}
}

func (a *stub) ListFunctionDefinitionVersions(ctx workflow.Context, input *greengrass.ListFunctionDefinitionVersionsInput) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	var output greengrass.ListFunctionDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListFunctionDefinitionVersionsInput) *ListFunctionDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitionVersions", input)
	return &ListFunctionDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListFunctionDefinitions(ctx workflow.Context, input *greengrass.ListFunctionDefinitionsInput) (*greengrass.ListFunctionDefinitionsOutput, error) {
	var output greengrass.ListFunctionDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFunctionDefinitionsAsync(ctx workflow.Context, input *greengrass.ListFunctionDefinitionsInput) *ListFunctionDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListFunctionDefinitions", input)
	return &ListFunctionDefinitionsFuture{Future: future}
}

func (a *stub) ListGroupCertificateAuthorities(ctx workflow.Context, input *greengrass.ListGroupCertificateAuthoritiesInput) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	var output greengrass.ListGroupCertificateAuthoritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupCertificateAuthorities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupCertificateAuthoritiesAsync(ctx workflow.Context, input *greengrass.ListGroupCertificateAuthoritiesInput) *ListGroupCertificateAuthoritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupCertificateAuthorities", input)
	return &ListGroupCertificateAuthoritiesFuture{Future: future}
}

func (a *stub) ListGroupVersions(ctx workflow.Context, input *greengrass.ListGroupVersionsInput) (*greengrass.ListGroupVersionsOutput, error) {
	var output greengrass.ListGroupVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupVersionsAsync(ctx workflow.Context, input *greengrass.ListGroupVersionsInput) *ListGroupVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroupVersions", input)
	return &ListGroupVersionsFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *greengrass.ListGroupsInput) (*greengrass.ListGroupsOutput, error) {
	var output greengrass.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *greengrass.ListGroupsInput) *ListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListGroups", input)
	return &ListGroupsFuture{Future: future}
}

func (a *stub) ListLoggerDefinitionVersions(ctx workflow.Context, input *greengrass.ListLoggerDefinitionVersionsInput) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	var output greengrass.ListLoggerDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggerDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListLoggerDefinitionVersionsInput) *ListLoggerDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitionVersions", input)
	return &ListLoggerDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListLoggerDefinitions(ctx workflow.Context, input *greengrass.ListLoggerDefinitionsInput) (*greengrass.ListLoggerDefinitionsOutput, error) {
	var output greengrass.ListLoggerDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggerDefinitionsAsync(ctx workflow.Context, input *greengrass.ListLoggerDefinitionsInput) *ListLoggerDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListLoggerDefinitions", input)
	return &ListLoggerDefinitionsFuture{Future: future}
}

func (a *stub) ListResourceDefinitionVersions(ctx workflow.Context, input *greengrass.ListResourceDefinitionVersionsInput) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	var output greengrass.ListResourceDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListResourceDefinitionVersionsInput) *ListResourceDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitionVersions", input)
	return &ListResourceDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListResourceDefinitions(ctx workflow.Context, input *greengrass.ListResourceDefinitionsInput) (*greengrass.ListResourceDefinitionsOutput, error) {
	var output greengrass.ListResourceDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDefinitionsAsync(ctx workflow.Context, input *greengrass.ListResourceDefinitionsInput) *ListResourceDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListResourceDefinitions", input)
	return &ListResourceDefinitionsFuture{Future: future}
}

func (a *stub) ListSubscriptionDefinitionVersions(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitionVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionDefinitionVersionsAsync(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionVersionsInput) *ListSubscriptionDefinitionVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitionVersions", input)
	return &ListSubscriptionDefinitionVersionsFuture{Future: future}
}

func (a *stub) ListSubscriptionDefinitions(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionsInput) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	var output greengrass.ListSubscriptionDefinitionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscriptionDefinitionsAsync(ctx workflow.Context, input *greengrass.ListSubscriptionDefinitionsInput) *ListSubscriptionDefinitionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListSubscriptionDefinitions", input)
	return &ListSubscriptionDefinitionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *greengrass.ListTagsForResourceInput) (*greengrass.ListTagsForResourceOutput, error) {
	var output greengrass.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *greengrass.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ResetDeployments(ctx workflow.Context, input *greengrass.ResetDeploymentsInput) (*greengrass.ResetDeploymentsOutput, error) {
	var output greengrass.ResetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-ResetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetDeploymentsAsync(ctx workflow.Context, input *greengrass.ResetDeploymentsInput) *ResetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-ResetDeployments", input)
	return &ResetDeploymentsFuture{Future: future}
}

func (a *stub) StartBulkDeployment(ctx workflow.Context, input *greengrass.StartBulkDeploymentInput) (*greengrass.StartBulkDeploymentOutput, error) {
	var output greengrass.StartBulkDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-StartBulkDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBulkDeploymentAsync(ctx workflow.Context, input *greengrass.StartBulkDeploymentInput) *StartBulkDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-StartBulkDeployment", input)
	return &StartBulkDeploymentFuture{Future: future}
}

func (a *stub) StopBulkDeployment(ctx workflow.Context, input *greengrass.StopBulkDeploymentInput) (*greengrass.StopBulkDeploymentOutput, error) {
	var output greengrass.StopBulkDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-StopBulkDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBulkDeploymentAsync(ctx workflow.Context, input *greengrass.StopBulkDeploymentInput) *StopBulkDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-StopBulkDeployment", input)
	return &StopBulkDeploymentFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *greengrass.TagResourceInput) (*greengrass.TagResourceOutput, error) {
	var output greengrass.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *greengrass.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *greengrass.UntagResourceInput) (*greengrass.UntagResourceOutput, error) {
	var output greengrass.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *greengrass.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateConnectivityInfo(ctx workflow.Context, input *greengrass.UpdateConnectivityInfoInput) (*greengrass.UpdateConnectivityInfoOutput, error) {
	var output greengrass.UpdateConnectivityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectivityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectivityInfoAsync(ctx workflow.Context, input *greengrass.UpdateConnectivityInfoInput) *UpdateConnectivityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectivityInfo", input)
	return &UpdateConnectivityInfoFuture{Future: future}
}

func (a *stub) UpdateConnectorDefinition(ctx workflow.Context, input *greengrass.UpdateConnectorDefinitionInput) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	var output greengrass.UpdateConnectorDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectorDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConnectorDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateConnectorDefinitionInput) *UpdateConnectorDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateConnectorDefinition", input)
	return &UpdateConnectorDefinitionFuture{Future: future}
}

func (a *stub) UpdateCoreDefinition(ctx workflow.Context, input *greengrass.UpdateCoreDefinitionInput) (*greengrass.UpdateCoreDefinitionOutput, error) {
	var output greengrass.UpdateCoreDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateCoreDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCoreDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateCoreDefinitionInput) *UpdateCoreDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateCoreDefinition", input)
	return &UpdateCoreDefinitionFuture{Future: future}
}

func (a *stub) UpdateDeviceDefinition(ctx workflow.Context, input *greengrass.UpdateDeviceDefinitionInput) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	var output greengrass.UpdateDeviceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateDeviceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateDeviceDefinitionInput) *UpdateDeviceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateDeviceDefinition", input)
	return &UpdateDeviceDefinitionFuture{Future: future}
}

func (a *stub) UpdateFunctionDefinition(ctx workflow.Context, input *greengrass.UpdateFunctionDefinitionInput) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	var output greengrass.UpdateFunctionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateFunctionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFunctionDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateFunctionDefinitionInput) *UpdateFunctionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateFunctionDefinition", input)
	return &UpdateFunctionDefinitionFuture{Future: future}
}

func (a *stub) UpdateGroup(ctx workflow.Context, input *greengrass.UpdateGroupInput) (*greengrass.UpdateGroupOutput, error) {
	var output greengrass.UpdateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupAsync(ctx workflow.Context, input *greengrass.UpdateGroupInput) *UpdateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroup", input)
	return &UpdateGroupFuture{Future: future}
}

func (a *stub) UpdateGroupCertificateConfiguration(ctx workflow.Context, input *greengrass.UpdateGroupCertificateConfigurationInput) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	var output greengrass.UpdateGroupCertificateConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroupCertificateConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGroupCertificateConfigurationAsync(ctx workflow.Context, input *greengrass.UpdateGroupCertificateConfigurationInput) *UpdateGroupCertificateConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateGroupCertificateConfiguration", input)
	return &UpdateGroupCertificateConfigurationFuture{Future: future}
}

func (a *stub) UpdateLoggerDefinition(ctx workflow.Context, input *greengrass.UpdateLoggerDefinitionInput) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	var output greengrass.UpdateLoggerDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateLoggerDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoggerDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateLoggerDefinitionInput) *UpdateLoggerDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateLoggerDefinition", input)
	return &UpdateLoggerDefinitionFuture{Future: future}
}

func (a *stub) UpdateResourceDefinition(ctx workflow.Context, input *greengrass.UpdateResourceDefinitionInput) (*greengrass.UpdateResourceDefinitionOutput, error) {
	var output greengrass.UpdateResourceDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateResourceDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateResourceDefinitionInput) *UpdateResourceDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateResourceDefinition", input)
	return &UpdateResourceDefinitionFuture{Future: future}
}

func (a *stub) UpdateSubscriptionDefinition(ctx workflow.Context, input *greengrass.UpdateSubscriptionDefinitionInput) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	var output greengrass.UpdateSubscriptionDefinitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateSubscriptionDefinition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSubscriptionDefinitionAsync(ctx workflow.Context, input *greengrass.UpdateSubscriptionDefinitionInput) *UpdateSubscriptionDefinitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateSubscriptionDefinition", input)
	return &UpdateSubscriptionDefinitionFuture{Future: future}
}

func (a *stub) UpdateThingRuntimeConfiguration(ctx workflow.Context, input *greengrass.UpdateThingRuntimeConfigurationInput) (*greengrass.UpdateThingRuntimeConfigurationOutput, error) {
	var output greengrass.UpdateThingRuntimeConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateThingRuntimeConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThingRuntimeConfigurationAsync(ctx workflow.Context, input *greengrass.UpdateThingRuntimeConfigurationInput) *UpdateThingRuntimeConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-greengrass-UpdateThingRuntimeConfiguration", input)
	return &UpdateThingRuntimeConfigurationFuture{Future: future}
}
