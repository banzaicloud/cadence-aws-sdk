// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codeartifactstub

import (
	"github.com/aws/aws-sdk-go/service/codeartifact"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateExternalConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyPackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainFuture) Get(ctx workflow.Context) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePackageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePackageVersionFuture) Get(ctx workflow.Context) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateExternalConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisposePackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisposePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAuthorizationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAuthorizationTokenFuture) Get(ctx workflow.Context) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPackageVersionAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPackageVersionAssetFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPackageVersionReadmeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPackageVersionReadmeFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryEndpointFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackageVersionAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackageVersionAssetsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackageVersionDependenciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackageVersionDependenciesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPackagesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRepositoriesFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRepositoriesInDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRepositoriesInDomainFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codeartifact.ListTagsForResourceOutput, error) {
	var output codeartifact.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codeartifact.TagResourceOutput, error) {
	var output codeartifact.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codeartifact.UntagResourceOutput, error) {
	var output codeartifact.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePackageVersionsStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePackageVersionsStatusFuture) Get(ctx workflow.Context) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateExternalConnection(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-AssociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) *AssociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-AssociateExternalConnection", input)
	return &AssociateExternalConnectionFuture{Future: future}
}

func (a *stub) CopyPackageVersions(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CopyPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyPackageVersionsAsync(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) *CopyPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CopyPackageVersions", input)
	return &CopyPackageVersionsFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *codeartifact.CreateDomainInput) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *codeartifact.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) CreateRepository(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRepositoryAsync(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) *CreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateRepository", input)
	return &CreateRepositoryFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *codeartifact.DeleteDomainInput) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *codeartifact.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DeleteDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) *DeleteDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomainPermissionsPolicy", input)
	return &DeleteDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) DeletePackageVersions(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeletePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) *DeletePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeletePackageVersions", input)
	return &DeletePackageVersionsFuture{Future: future}
}

func (a *stub) DeleteRepository(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) *DeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepository", input)
	return &DeleteRepositoryFuture{Future: future}
}

func (a *stub) DeleteRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) *DeleteRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepositoryPermissionsPolicy", input)
	return &DeleteRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *codeartifact.DescribeDomainInput) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *codeartifact.DescribeDomainInput) *DescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeDomain", input)
	return &DescribeDomainFuture{Future: future}
}

func (a *stub) DescribePackageVersion(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribePackageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackageVersionAsync(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) *DescribePackageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribePackageVersion", input)
	return &DescribePackageVersionFuture{Future: future}
}

func (a *stub) DescribeRepository(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRepositoryAsync(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) *DescribeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeRepository", input)
	return &DescribeRepositoryFuture{Future: future}
}

func (a *stub) DisassociateExternalConnection(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisassociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) *DisassociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisassociateExternalConnection", input)
	return &DisassociateExternalConnectionFuture{Future: future}
}

func (a *stub) DisposePackageVersions(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisposePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisposePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) *DisposePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisposePackageVersions", input)
	return &DisposePackageVersionsFuture{Future: future}
}

func (a *stub) GetAuthorizationToken(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizationTokenAsync(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) *GetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetAuthorizationToken", input)
	return &GetAuthorizationTokenFuture{Future: future}
}

func (a *stub) GetDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) *GetDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetDomainPermissionsPolicy", input)
	return &GetDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) GetPackageVersionAsset(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPackageVersionAssetAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) *GetPackageVersionAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionAsset", input)
	return &GetPackageVersionAssetFuture{Future: future}
}

func (a *stub) GetPackageVersionReadme(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionReadme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPackageVersionReadmeAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) *GetPackageVersionReadmeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionReadme", input)
	return &GetPackageVersionReadmeFuture{Future: future}
}

func (a *stub) GetRepositoryEndpoint(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryEndpointAsync(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) *GetRepositoryEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryEndpoint", input)
	return &GetRepositoryEndpointFuture{Future: future}
}

func (a *stub) GetRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) *GetRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryPermissionsPolicy", input)
	return &GetRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *codeartifact.ListDomainsInput) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *codeartifact.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListPackageVersionAssets(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionAssetsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) *ListPackageVersionAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionAssets", input)
	return &ListPackageVersionAssetsFuture{Future: future}
}

func (a *stub) ListPackageVersionDependencies(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionDependencies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionDependenciesAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) *ListPackageVersionDependenciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionDependencies", input)
	return &ListPackageVersionDependenciesFuture{Future: future}
}

func (a *stub) ListPackageVersions(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) *ListPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersions", input)
	return &ListPackageVersionsFuture{Future: future}
}

func (a *stub) ListPackages(ctx workflow.Context, input *codeartifact.ListPackagesInput) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagesAsync(ctx workflow.Context, input *codeartifact.ListPackagesInput) *ListPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackages", input)
	return &ListPackagesFuture{Future: future}
}

func (a *stub) ListRepositories(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) *ListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositories", input)
	return &ListRepositoriesFuture{Future: future}
}

func (a *stub) ListRepositoriesInDomain(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositoriesInDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesInDomainAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) *ListRepositoriesInDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositoriesInDomain", input)
	return &ListRepositoriesInDomainFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codeartifact.ListTagsForResourceInput) (*codeartifact.ListTagsForResourceOutput, error) {
	var output codeartifact.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codeartifact.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) *PutDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutDomainPermissionsPolicy", input)
	return &PutDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) PutRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) *PutRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutRepositoryPermissionsPolicy", input)
	return &PutRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codeartifact.TagResourceInput) (*codeartifact.TagResourceOutput, error) {
	var output codeartifact.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codeartifact.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codeartifact.UntagResourceInput) (*codeartifact.UntagResourceOutput, error) {
	var output codeartifact.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codeartifact.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdatePackageVersionsStatus(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdatePackageVersionsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePackageVersionsStatusAsync(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) *UpdatePackageVersionsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdatePackageVersionsStatus", input)
	return &UpdatePackageVersionsStatusFuture{Future: future}
}

func (a *stub) UpdateRepository(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRepositoryAsync(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) *UpdateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdateRepository", input)
	return &UpdateRepositoryFuture{Future: future}
}
