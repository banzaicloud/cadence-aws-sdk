// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codeartifactstub

import (
	"github.com/aws/aws-sdk-go/service/codeartifact"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeArtifactAssociateExternalConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactAssociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactCopyPackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactCopyPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactCreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactCreateDomainFuture) Get(ctx workflow.Context) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactCreateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactCreateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDeleteDomainFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDeleteDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDeleteDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDeletePackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDeletePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDeleteRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDeleteRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDeleteRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDeleteRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDescribeDomainFuture) Get(ctx workflow.Context) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDescribePackageVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDescribePackageVersionFuture) Get(ctx workflow.Context) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDescribeRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDescribeRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDisassociateExternalConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDisassociateExternalConnectionFuture) Get(ctx workflow.Context) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactDisposePackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactDisposePackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetAuthorizationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetAuthorizationTokenFuture) Get(ctx workflow.Context) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetPackageVersionAssetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetPackageVersionAssetFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetPackageVersionReadmeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetPackageVersionReadmeFuture) Get(ctx workflow.Context) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetRepositoryEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetRepositoryEndpointFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactGetRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactGetRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListDomainsFuture) Get(ctx workflow.Context) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListPackageVersionAssetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListPackageVersionAssetsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListPackageVersionDependenciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListPackageVersionDependenciesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListPackageVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListPackageVersionsFuture) Get(ctx workflow.Context) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListPackagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListPackagesFuture) Get(ctx workflow.Context) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListRepositoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListRepositoriesFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListRepositoriesInDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListRepositoriesInDomainFuture) Get(ctx workflow.Context) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactListTagsForResourceFuture) Get(ctx workflow.Context) (*codeartifact.ListTagsForResourceOutput, error) {
	var output codeartifact.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactPutDomainPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactPutDomainPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactPutRepositoryPermissionsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactPutRepositoryPermissionsPolicyFuture) Get(ctx workflow.Context) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactTagResourceFuture) Get(ctx workflow.Context) (*codeartifact.TagResourceOutput, error) {
	var output codeartifact.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactUntagResourceFuture) Get(ctx workflow.Context) (*codeartifact.UntagResourceOutput, error) {
	var output codeartifact.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactUpdatePackageVersionsStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactUpdatePackageVersionsStatusFuture) Get(ctx workflow.Context) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeArtifactUpdateRepositoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeArtifactUpdateRepositoryFuture) Get(ctx workflow.Context) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateExternalConnection(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) (*codeartifact.AssociateExternalConnectionOutput, error) {
	var output codeartifact.AssociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-AssociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.AssociateExternalConnectionInput) *CodeArtifactAssociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-AssociateExternalConnection", input)
	return &CodeArtifactAssociateExternalConnectionFuture{Future: future}
}

func (a *stub) CopyPackageVersions(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) (*codeartifact.CopyPackageVersionsOutput, error) {
	var output codeartifact.CopyPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CopyPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyPackageVersionsAsync(ctx workflow.Context, input *codeartifact.CopyPackageVersionsInput) *CodeArtifactCopyPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CopyPackageVersions", input)
	return &CodeArtifactCopyPackageVersionsFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *codeartifact.CreateDomainInput) (*codeartifact.CreateDomainOutput, error) {
	var output codeartifact.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *codeartifact.CreateDomainInput) *CodeArtifactCreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateDomain", input)
	return &CodeArtifactCreateDomainFuture{Future: future}
}

func (a *stub) CreateRepository(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) (*codeartifact.CreateRepositoryOutput, error) {
	var output codeartifact.CreateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRepositoryAsync(ctx workflow.Context, input *codeartifact.CreateRepositoryInput) *CodeArtifactCreateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-CreateRepository", input)
	return &CodeArtifactCreateRepositoryFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *codeartifact.DeleteDomainInput) (*codeartifact.DeleteDomainOutput, error) {
	var output codeartifact.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *codeartifact.DeleteDomainInput) *CodeArtifactDeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomain", input)
	return &CodeArtifactDeleteDomainFuture{Future: future}
}

func (a *stub) DeleteDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) (*codeartifact.DeleteDomainPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteDomainPermissionsPolicyInput) *CodeArtifactDeleteDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteDomainPermissionsPolicy", input)
	return &CodeArtifactDeleteDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) DeletePackageVersions(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) (*codeartifact.DeletePackageVersionsOutput, error) {
	var output codeartifact.DeletePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeletePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DeletePackageVersionsInput) *CodeArtifactDeletePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeletePackageVersions", input)
	return &CodeArtifactDeletePackageVersionsFuture{Future: future}
}

func (a *stub) DeleteRepository(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) (*codeartifact.DeleteRepositoryOutput, error) {
	var output codeartifact.DeleteRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryInput) *CodeArtifactDeleteRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepository", input)
	return &CodeArtifactDeleteRepositoryFuture{Future: future}
}

func (a *stub) DeleteRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) (*codeartifact.DeleteRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.DeleteRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.DeleteRepositoryPermissionsPolicyInput) *CodeArtifactDeleteRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DeleteRepositoryPermissionsPolicy", input)
	return &CodeArtifactDeleteRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *codeartifact.DescribeDomainInput) (*codeartifact.DescribeDomainOutput, error) {
	var output codeartifact.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *codeartifact.DescribeDomainInput) *CodeArtifactDescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeDomain", input)
	return &CodeArtifactDescribeDomainFuture{Future: future}
}

func (a *stub) DescribePackageVersion(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) (*codeartifact.DescribePackageVersionOutput, error) {
	var output codeartifact.DescribePackageVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribePackageVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePackageVersionAsync(ctx workflow.Context, input *codeartifact.DescribePackageVersionInput) *CodeArtifactDescribePackageVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribePackageVersion", input)
	return &CodeArtifactDescribePackageVersionFuture{Future: future}
}

func (a *stub) DescribeRepository(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) (*codeartifact.DescribeRepositoryOutput, error) {
	var output codeartifact.DescribeRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRepositoryAsync(ctx workflow.Context, input *codeartifact.DescribeRepositoryInput) *CodeArtifactDescribeRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DescribeRepository", input)
	return &CodeArtifactDescribeRepositoryFuture{Future: future}
}

func (a *stub) DisassociateExternalConnection(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) (*codeartifact.DisassociateExternalConnectionOutput, error) {
	var output codeartifact.DisassociateExternalConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisassociateExternalConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateExternalConnectionAsync(ctx workflow.Context, input *codeartifact.DisassociateExternalConnectionInput) *CodeArtifactDisassociateExternalConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisassociateExternalConnection", input)
	return &CodeArtifactDisassociateExternalConnectionFuture{Future: future}
}

func (a *stub) DisposePackageVersions(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) (*codeartifact.DisposePackageVersionsOutput, error) {
	var output codeartifact.DisposePackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisposePackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisposePackageVersionsAsync(ctx workflow.Context, input *codeartifact.DisposePackageVersionsInput) *CodeArtifactDisposePackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-DisposePackageVersions", input)
	return &CodeArtifactDisposePackageVersionsFuture{Future: future}
}

func (a *stub) GetAuthorizationToken(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) (*codeartifact.GetAuthorizationTokenOutput, error) {
	var output codeartifact.GetAuthorizationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetAuthorizationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizationTokenAsync(ctx workflow.Context, input *codeartifact.GetAuthorizationTokenInput) *CodeArtifactGetAuthorizationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetAuthorizationToken", input)
	return &CodeArtifactGetAuthorizationTokenFuture{Future: future}
}

func (a *stub) GetDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) (*codeartifact.GetDomainPermissionsPolicyOutput, error) {
	var output codeartifact.GetDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetDomainPermissionsPolicyInput) *CodeArtifactGetDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetDomainPermissionsPolicy", input)
	return &CodeArtifactGetDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) GetPackageVersionAsset(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) (*codeartifact.GetPackageVersionAssetOutput, error) {
	var output codeartifact.GetPackageVersionAssetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionAsset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPackageVersionAssetAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionAssetInput) *CodeArtifactGetPackageVersionAssetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionAsset", input)
	return &CodeArtifactGetPackageVersionAssetFuture{Future: future}
}

func (a *stub) GetPackageVersionReadme(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) (*codeartifact.GetPackageVersionReadmeOutput, error) {
	var output codeartifact.GetPackageVersionReadmeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionReadme", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPackageVersionReadmeAsync(ctx workflow.Context, input *codeartifact.GetPackageVersionReadmeInput) *CodeArtifactGetPackageVersionReadmeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetPackageVersionReadme", input)
	return &CodeArtifactGetPackageVersionReadmeFuture{Future: future}
}

func (a *stub) GetRepositoryEndpoint(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) (*codeartifact.GetRepositoryEndpointOutput, error) {
	var output codeartifact.GetRepositoryEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryEndpointAsync(ctx workflow.Context, input *codeartifact.GetRepositoryEndpointInput) *CodeArtifactGetRepositoryEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryEndpoint", input)
	return &CodeArtifactGetRepositoryEndpointFuture{Future: future}
}

func (a *stub) GetRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) (*codeartifact.GetRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.GetRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.GetRepositoryPermissionsPolicyInput) *CodeArtifactGetRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-GetRepositoryPermissionsPolicy", input)
	return &CodeArtifactGetRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *codeartifact.ListDomainsInput) (*codeartifact.ListDomainsOutput, error) {
	var output codeartifact.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *codeartifact.ListDomainsInput) *CodeArtifactListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListDomains", input)
	return &CodeArtifactListDomainsFuture{Future: future}
}

func (a *stub) ListPackageVersionAssets(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) (*codeartifact.ListPackageVersionAssetsOutput, error) {
	var output codeartifact.ListPackageVersionAssetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionAssets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionAssetsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionAssetsInput) *CodeArtifactListPackageVersionAssetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionAssets", input)
	return &CodeArtifactListPackageVersionAssetsFuture{Future: future}
}

func (a *stub) ListPackageVersionDependencies(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) (*codeartifact.ListPackageVersionDependenciesOutput, error) {
	var output codeartifact.ListPackageVersionDependenciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionDependencies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionDependenciesAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionDependenciesInput) *CodeArtifactListPackageVersionDependenciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersionDependencies", input)
	return &CodeArtifactListPackageVersionDependenciesFuture{Future: future}
}

func (a *stub) ListPackageVersions(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) (*codeartifact.ListPackageVersionsOutput, error) {
	var output codeartifact.ListPackageVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackageVersionsAsync(ctx workflow.Context, input *codeartifact.ListPackageVersionsInput) *CodeArtifactListPackageVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackageVersions", input)
	return &CodeArtifactListPackageVersionsFuture{Future: future}
}

func (a *stub) ListPackages(ctx workflow.Context, input *codeartifact.ListPackagesInput) (*codeartifact.ListPackagesOutput, error) {
	var output codeartifact.ListPackagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPackagesAsync(ctx workflow.Context, input *codeartifact.ListPackagesInput) *CodeArtifactListPackagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListPackages", input)
	return &CodeArtifactListPackagesFuture{Future: future}
}

func (a *stub) ListRepositories(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) (*codeartifact.ListRepositoriesOutput, error) {
	var output codeartifact.ListRepositoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInput) *CodeArtifactListRepositoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositories", input)
	return &CodeArtifactListRepositoriesFuture{Future: future}
}

func (a *stub) ListRepositoriesInDomain(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) (*codeartifact.ListRepositoriesInDomainOutput, error) {
	var output codeartifact.ListRepositoriesInDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositoriesInDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRepositoriesInDomainAsync(ctx workflow.Context, input *codeartifact.ListRepositoriesInDomainInput) *CodeArtifactListRepositoriesInDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListRepositoriesInDomain", input)
	return &CodeArtifactListRepositoriesInDomainFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codeartifact.ListTagsForResourceInput) (*codeartifact.ListTagsForResourceOutput, error) {
	var output codeartifact.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codeartifact.ListTagsForResourceInput) *CodeArtifactListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-ListTagsForResource", input)
	return &CodeArtifactListTagsForResourceFuture{Future: future}
}

func (a *stub) PutDomainPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) (*codeartifact.PutDomainPermissionsPolicyOutput, error) {
	var output codeartifact.PutDomainPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutDomainPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDomainPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutDomainPermissionsPolicyInput) *CodeArtifactPutDomainPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutDomainPermissionsPolicy", input)
	return &CodeArtifactPutDomainPermissionsPolicyFuture{Future: future}
}

func (a *stub) PutRepositoryPermissionsPolicy(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) (*codeartifact.PutRepositoryPermissionsPolicyOutput, error) {
	var output codeartifact.PutRepositoryPermissionsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutRepositoryPermissionsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRepositoryPermissionsPolicyAsync(ctx workflow.Context, input *codeartifact.PutRepositoryPermissionsPolicyInput) *CodeArtifactPutRepositoryPermissionsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-PutRepositoryPermissionsPolicy", input)
	return &CodeArtifactPutRepositoryPermissionsPolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codeartifact.TagResourceInput) (*codeartifact.TagResourceOutput, error) {
	var output codeartifact.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codeartifact.TagResourceInput) *CodeArtifactTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-TagResource", input)
	return &CodeArtifactTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codeartifact.UntagResourceInput) (*codeartifact.UntagResourceOutput, error) {
	var output codeartifact.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codeartifact.UntagResourceInput) *CodeArtifactUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UntagResource", input)
	return &CodeArtifactUntagResourceFuture{Future: future}
}

func (a *stub) UpdatePackageVersionsStatus(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) (*codeartifact.UpdatePackageVersionsStatusOutput, error) {
	var output codeartifact.UpdatePackageVersionsStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdatePackageVersionsStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePackageVersionsStatusAsync(ctx workflow.Context, input *codeartifact.UpdatePackageVersionsStatusInput) *CodeArtifactUpdatePackageVersionsStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdatePackageVersionsStatus", input)
	return &CodeArtifactUpdatePackageVersionsStatusFuture{Future: future}
}

func (a *stub) UpdateRepository(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) (*codeartifact.UpdateRepositoryOutput, error) {
	var output codeartifact.UpdateRepositoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdateRepository", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRepositoryAsync(ctx workflow.Context, input *codeartifact.UpdateRepositoryInput) *CodeArtifactUpdateRepositoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeartifact-UpdateRepository", input)
	return &CodeArtifactUpdateRepositoryFuture{Future: future}
}
