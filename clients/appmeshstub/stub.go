// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appmeshstub

import (
	"github.com/aws/aws-sdk-go/service/appmesh"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.CreateGatewayRouteOutput, error) {
	var output appmesh.CreateGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMeshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMeshFuture) Get(ctx workflow.Context) (*appmesh.CreateMeshOutput, error) {
	var output appmesh.CreateMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRouteFuture) Get(ctx workflow.Context) (*appmesh.CreateRouteOutput, error) {
	var output appmesh.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualGatewayOutput, error) {
	var output appmesh.CreateVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualNodeOutput, error) {
	var output appmesh.CreateVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualRouterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualRouterOutput, error) {
	var output appmesh.CreateVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVirtualServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.CreateVirtualServiceOutput, error) {
	var output appmesh.CreateVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.DeleteGatewayRouteOutput, error) {
	var output appmesh.DeleteGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMeshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMeshFuture) Get(ctx workflow.Context) (*appmesh.DeleteMeshOutput, error) {
	var output appmesh.DeleteMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRouteFuture) Get(ctx workflow.Context) (*appmesh.DeleteRouteOutput, error) {
	var output appmesh.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualGatewayOutput, error) {
	var output appmesh.DeleteVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualNodeOutput, error) {
	var output appmesh.DeleteVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualRouterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualRouterOutput, error) {
	var output appmesh.DeleteVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.DeleteVirtualServiceOutput, error) {
	var output appmesh.DeleteVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.DescribeGatewayRouteOutput, error) {
	var output appmesh.DescribeGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMeshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMeshFuture) Get(ctx workflow.Context) (*appmesh.DescribeMeshOutput, error) {
	var output appmesh.DescribeMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRouteFuture) Get(ctx workflow.Context) (*appmesh.DescribeRouteOutput, error) {
	var output appmesh.DescribeRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualGatewayOutput, error) {
	var output appmesh.DescribeVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualNodeOutput, error) {
	var output appmesh.DescribeVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualRouterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualRouterOutput, error) {
	var output appmesh.DescribeVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.DescribeVirtualServiceOutput, error) {
	var output appmesh.DescribeVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGatewayRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGatewayRoutesFuture) Get(ctx workflow.Context) (*appmesh.ListGatewayRoutesOutput, error) {
	var output appmesh.ListGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMeshesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMeshesFuture) Get(ctx workflow.Context) (*appmesh.ListMeshesOutput, error) {
	var output appmesh.ListMeshesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoutesFuture) Get(ctx workflow.Context) (*appmesh.ListRoutesOutput, error) {
	var output appmesh.ListRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appmesh.ListTagsForResourceOutput, error) {
	var output appmesh.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualGatewaysFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualGatewaysOutput, error) {
	var output appmesh.ListVirtualGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualNodesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualNodesFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualNodesOutput, error) {
	var output appmesh.ListVirtualNodesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualRoutersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualRoutersFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualRoutersOutput, error) {
	var output appmesh.ListVirtualRoutersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualServicesFuture) Get(ctx workflow.Context) (*appmesh.ListVirtualServicesOutput, error) {
	var output appmesh.ListVirtualServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appmesh.TagResourceOutput, error) {
	var output appmesh.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appmesh.UntagResourceOutput, error) {
	var output appmesh.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGatewayRouteFuture) Get(ctx workflow.Context) (*appmesh.UpdateGatewayRouteOutput, error) {
	var output appmesh.UpdateGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMeshFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMeshFuture) Get(ctx workflow.Context) (*appmesh.UpdateMeshOutput, error) {
	var output appmesh.UpdateMeshOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRouteFuture) Get(ctx workflow.Context) (*appmesh.UpdateRouteOutput, error) {
	var output appmesh.UpdateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVirtualGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVirtualGatewayFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualGatewayOutput, error) {
	var output appmesh.UpdateVirtualGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVirtualNodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVirtualNodeFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualNodeOutput, error) {
	var output appmesh.UpdateVirtualNodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVirtualRouterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVirtualRouterFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualRouterOutput, error) {
	var output appmesh.UpdateVirtualRouterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVirtualServiceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVirtualServiceFuture) Get(ctx workflow.Context) (*appmesh.UpdateVirtualServiceOutput, error) {
	var output appmesh.UpdateVirtualServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayRoute(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) (*appmesh.CreateGatewayRouteOutput, error) {
	var output appmesh.CreateGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGatewayRouteAsync(ctx workflow.Context, input *appmesh.CreateGatewayRouteInput) *CreateGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateGatewayRoute", input)
	return &CreateGatewayRouteFuture{Future: future}
}

func (a *stub) CreateMesh(ctx workflow.Context, input *appmesh.CreateMeshInput) (*appmesh.CreateMeshOutput, error) {
	var output appmesh.CreateMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMeshAsync(ctx workflow.Context, input *appmesh.CreateMeshInput) *CreateMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateMesh", input)
	return &CreateMeshFuture{Future: future}
}

func (a *stub) CreateRoute(ctx workflow.Context, input *appmesh.CreateRouteInput) (*appmesh.CreateRouteOutput, error) {
	var output appmesh.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRouteAsync(ctx workflow.Context, input *appmesh.CreateRouteInput) *CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateRoute", input)
	return &CreateRouteFuture{Future: future}
}

func (a *stub) CreateVirtualGateway(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) (*appmesh.CreateVirtualGatewayOutput, error) {
	var output appmesh.CreateVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.CreateVirtualGatewayInput) *CreateVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualGateway", input)
	return &CreateVirtualGatewayFuture{Future: future}
}

func (a *stub) CreateVirtualNode(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) (*appmesh.CreateVirtualNodeOutput, error) {
	var output appmesh.CreateVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualNodeAsync(ctx workflow.Context, input *appmesh.CreateVirtualNodeInput) *CreateVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualNode", input)
	return &CreateVirtualNodeFuture{Future: future}
}

func (a *stub) CreateVirtualRouter(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) (*appmesh.CreateVirtualRouterOutput, error) {
	var output appmesh.CreateVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualRouterAsync(ctx workflow.Context, input *appmesh.CreateVirtualRouterInput) *CreateVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualRouter", input)
	return &CreateVirtualRouterFuture{Future: future}
}

func (a *stub) CreateVirtualService(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) (*appmesh.CreateVirtualServiceOutput, error) {
	var output appmesh.CreateVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVirtualServiceAsync(ctx workflow.Context, input *appmesh.CreateVirtualServiceInput) *CreateVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-CreateVirtualService", input)
	return &CreateVirtualServiceFuture{Future: future}
}

func (a *stub) DeleteGatewayRoute(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) (*appmesh.DeleteGatewayRouteOutput, error) {
	var output appmesh.DeleteGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGatewayRouteAsync(ctx workflow.Context, input *appmesh.DeleteGatewayRouteInput) *DeleteGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteGatewayRoute", input)
	return &DeleteGatewayRouteFuture{Future: future}
}

func (a *stub) DeleteMesh(ctx workflow.Context, input *appmesh.DeleteMeshInput) (*appmesh.DeleteMeshOutput, error) {
	var output appmesh.DeleteMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMeshAsync(ctx workflow.Context, input *appmesh.DeleteMeshInput) *DeleteMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteMesh", input)
	return &DeleteMeshFuture{Future: future}
}

func (a *stub) DeleteRoute(ctx workflow.Context, input *appmesh.DeleteRouteInput) (*appmesh.DeleteRouteOutput, error) {
	var output appmesh.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteAsync(ctx workflow.Context, input *appmesh.DeleteRouteInput) *DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteRoute", input)
	return &DeleteRouteFuture{Future: future}
}

func (a *stub) DeleteVirtualGateway(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) (*appmesh.DeleteVirtualGatewayOutput, error) {
	var output appmesh.DeleteVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DeleteVirtualGatewayInput) *DeleteVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualGateway", input)
	return &DeleteVirtualGatewayFuture{Future: future}
}

func (a *stub) DeleteVirtualNode(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) (*appmesh.DeleteVirtualNodeOutput, error) {
	var output appmesh.DeleteVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualNodeAsync(ctx workflow.Context, input *appmesh.DeleteVirtualNodeInput) *DeleteVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualNode", input)
	return &DeleteVirtualNodeFuture{Future: future}
}

func (a *stub) DeleteVirtualRouter(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) (*appmesh.DeleteVirtualRouterOutput, error) {
	var output appmesh.DeleteVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualRouterAsync(ctx workflow.Context, input *appmesh.DeleteVirtualRouterInput) *DeleteVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualRouter", input)
	return &DeleteVirtualRouterFuture{Future: future}
}

func (a *stub) DeleteVirtualService(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) (*appmesh.DeleteVirtualServiceOutput, error) {
	var output appmesh.DeleteVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualServiceAsync(ctx workflow.Context, input *appmesh.DeleteVirtualServiceInput) *DeleteVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DeleteVirtualService", input)
	return &DeleteVirtualServiceFuture{Future: future}
}

func (a *stub) DescribeGatewayRoute(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) (*appmesh.DescribeGatewayRouteOutput, error) {
	var output appmesh.DescribeGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGatewayRouteAsync(ctx workflow.Context, input *appmesh.DescribeGatewayRouteInput) *DescribeGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeGatewayRoute", input)
	return &DescribeGatewayRouteFuture{Future: future}
}

func (a *stub) DescribeMesh(ctx workflow.Context, input *appmesh.DescribeMeshInput) (*appmesh.DescribeMeshOutput, error) {
	var output appmesh.DescribeMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMeshAsync(ctx workflow.Context, input *appmesh.DescribeMeshInput) *DescribeMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeMesh", input)
	return &DescribeMeshFuture{Future: future}
}

func (a *stub) DescribeRoute(ctx workflow.Context, input *appmesh.DescribeRouteInput) (*appmesh.DescribeRouteOutput, error) {
	var output appmesh.DescribeRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRouteAsync(ctx workflow.Context, input *appmesh.DescribeRouteInput) *DescribeRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeRoute", input)
	return &DescribeRouteFuture{Future: future}
}

func (a *stub) DescribeVirtualGateway(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) (*appmesh.DescribeVirtualGatewayOutput, error) {
	var output appmesh.DescribeVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualGatewayAsync(ctx workflow.Context, input *appmesh.DescribeVirtualGatewayInput) *DescribeVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualGateway", input)
	return &DescribeVirtualGatewayFuture{Future: future}
}

func (a *stub) DescribeVirtualNode(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) (*appmesh.DescribeVirtualNodeOutput, error) {
	var output appmesh.DescribeVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualNodeAsync(ctx workflow.Context, input *appmesh.DescribeVirtualNodeInput) *DescribeVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualNode", input)
	return &DescribeVirtualNodeFuture{Future: future}
}

func (a *stub) DescribeVirtualRouter(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) (*appmesh.DescribeVirtualRouterOutput, error) {
	var output appmesh.DescribeVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualRouterAsync(ctx workflow.Context, input *appmesh.DescribeVirtualRouterInput) *DescribeVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualRouter", input)
	return &DescribeVirtualRouterFuture{Future: future}
}

func (a *stub) DescribeVirtualService(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) (*appmesh.DescribeVirtualServiceOutput, error) {
	var output appmesh.DescribeVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualServiceAsync(ctx workflow.Context, input *appmesh.DescribeVirtualServiceInput) *DescribeVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-DescribeVirtualService", input)
	return &DescribeVirtualServiceFuture{Future: future}
}

func (a *stub) ListGatewayRoutes(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) (*appmesh.ListGatewayRoutesOutput, error) {
	var output appmesh.ListGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGatewayRoutesAsync(ctx workflow.Context, input *appmesh.ListGatewayRoutesInput) *ListGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListGatewayRoutes", input)
	return &ListGatewayRoutesFuture{Future: future}
}

func (a *stub) ListMeshes(ctx workflow.Context, input *appmesh.ListMeshesInput) (*appmesh.ListMeshesOutput, error) {
	var output appmesh.ListMeshesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListMeshes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMeshesAsync(ctx workflow.Context, input *appmesh.ListMeshesInput) *ListMeshesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListMeshes", input)
	return &ListMeshesFuture{Future: future}
}

func (a *stub) ListRoutes(ctx workflow.Context, input *appmesh.ListRoutesInput) (*appmesh.ListRoutesOutput, error) {
	var output appmesh.ListRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoutesAsync(ctx workflow.Context, input *appmesh.ListRoutesInput) *ListRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListRoutes", input)
	return &ListRoutesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) (*appmesh.ListTagsForResourceOutput, error) {
	var output appmesh.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appmesh.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListVirtualGateways(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) (*appmesh.ListVirtualGatewaysOutput, error) {
	var output appmesh.ListVirtualGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualGatewaysAsync(ctx workflow.Context, input *appmesh.ListVirtualGatewaysInput) *ListVirtualGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualGateways", input)
	return &ListVirtualGatewaysFuture{Future: future}
}

func (a *stub) ListVirtualNodes(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) (*appmesh.ListVirtualNodesOutput, error) {
	var output appmesh.ListVirtualNodesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualNodes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualNodesAsync(ctx workflow.Context, input *appmesh.ListVirtualNodesInput) *ListVirtualNodesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualNodes", input)
	return &ListVirtualNodesFuture{Future: future}
}

func (a *stub) ListVirtualRouters(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) (*appmesh.ListVirtualRoutersOutput, error) {
	var output appmesh.ListVirtualRoutersOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualRouters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualRoutersAsync(ctx workflow.Context, input *appmesh.ListVirtualRoutersInput) *ListVirtualRoutersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualRouters", input)
	return &ListVirtualRoutersFuture{Future: future}
}

func (a *stub) ListVirtualServices(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) (*appmesh.ListVirtualServicesOutput, error) {
	var output appmesh.ListVirtualServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualServicesAsync(ctx workflow.Context, input *appmesh.ListVirtualServicesInput) *ListVirtualServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-ListVirtualServices", input)
	return &ListVirtualServicesFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appmesh.TagResourceInput) (*appmesh.TagResourceOutput, error) {
	var output appmesh.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appmesh.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appmesh.UntagResourceInput) (*appmesh.UntagResourceOutput, error) {
	var output appmesh.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appmesh.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateGatewayRoute(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) (*appmesh.UpdateGatewayRouteOutput, error) {
	var output appmesh.UpdateGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGatewayRouteAsync(ctx workflow.Context, input *appmesh.UpdateGatewayRouteInput) *UpdateGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateGatewayRoute", input)
	return &UpdateGatewayRouteFuture{Future: future}
}

func (a *stub) UpdateMesh(ctx workflow.Context, input *appmesh.UpdateMeshInput) (*appmesh.UpdateMeshOutput, error) {
	var output appmesh.UpdateMeshOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateMesh", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMeshAsync(ctx workflow.Context, input *appmesh.UpdateMeshInput) *UpdateMeshFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateMesh", input)
	return &UpdateMeshFuture{Future: future}
}

func (a *stub) UpdateRoute(ctx workflow.Context, input *appmesh.UpdateRouteInput) (*appmesh.UpdateRouteOutput, error) {
	var output appmesh.UpdateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRouteAsync(ctx workflow.Context, input *appmesh.UpdateRouteInput) *UpdateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateRoute", input)
	return &UpdateRouteFuture{Future: future}
}

func (a *stub) UpdateVirtualGateway(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) (*appmesh.UpdateVirtualGatewayOutput, error) {
	var output appmesh.UpdateVirtualGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualGatewayAsync(ctx workflow.Context, input *appmesh.UpdateVirtualGatewayInput) *UpdateVirtualGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualGateway", input)
	return &UpdateVirtualGatewayFuture{Future: future}
}

func (a *stub) UpdateVirtualNode(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) (*appmesh.UpdateVirtualNodeOutput, error) {
	var output appmesh.UpdateVirtualNodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualNode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualNodeAsync(ctx workflow.Context, input *appmesh.UpdateVirtualNodeInput) *UpdateVirtualNodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualNode", input)
	return &UpdateVirtualNodeFuture{Future: future}
}

func (a *stub) UpdateVirtualRouter(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) (*appmesh.UpdateVirtualRouterOutput, error) {
	var output appmesh.UpdateVirtualRouterOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualRouter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualRouterAsync(ctx workflow.Context, input *appmesh.UpdateVirtualRouterInput) *UpdateVirtualRouterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualRouter", input)
	return &UpdateVirtualRouterFuture{Future: future}
}

func (a *stub) UpdateVirtualService(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) (*appmesh.UpdateVirtualServiceOutput, error) {
	var output appmesh.UpdateVirtualServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualService", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualServiceAsync(ctx workflow.Context, input *appmesh.UpdateVirtualServiceInput) *UpdateVirtualServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appmesh-UpdateVirtualService", input)
	return &UpdateVirtualServiceFuture{Future: future}
}
