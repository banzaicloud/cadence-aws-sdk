// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package marketplacemeteringstub

import (
	"github.com/aws/aws-sdk-go/service/marketplacemetering"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchMeterUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchMeterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.BatchMeterUsageOutput, error) {
	var output marketplacemetering.BatchMeterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MeterUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MeterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.MeterUsageOutput, error) {
	var output marketplacemetering.MeterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterUsageFuture) Get(ctx workflow.Context) (*marketplacemetering.RegisterUsageOutput, error) {
	var output marketplacemetering.RegisterUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResolveCustomerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResolveCustomerFuture) Get(ctx workflow.Context) (*marketplacemetering.ResolveCustomerOutput, error) {
	var output marketplacemetering.ResolveCustomerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchMeterUsage(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) (*marketplacemetering.BatchMeterUsageOutput, error) {
	var output marketplacemetering.BatchMeterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-BatchMeterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchMeterUsageAsync(ctx workflow.Context, input *marketplacemetering.BatchMeterUsageInput) *BatchMeterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-BatchMeterUsage", input)
	return &BatchMeterUsageFuture{Future: future}
}

func (a *stub) MeterUsage(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) (*marketplacemetering.MeterUsageOutput, error) {
	var output marketplacemetering.MeterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-MeterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MeterUsageAsync(ctx workflow.Context, input *marketplacemetering.MeterUsageInput) *MeterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-MeterUsage", input)
	return &MeterUsageFuture{Future: future}
}

func (a *stub) RegisterUsage(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) (*marketplacemetering.RegisterUsageOutput, error) {
	var output marketplacemetering.RegisterUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-RegisterUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterUsageAsync(ctx workflow.Context, input *marketplacemetering.RegisterUsageInput) *RegisterUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-RegisterUsage", input)
	return &RegisterUsageFuture{Future: future}
}

func (a *stub) ResolveCustomer(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) (*marketplacemetering.ResolveCustomerOutput, error) {
	var output marketplacemetering.ResolveCustomerOutput
	err := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-ResolveCustomer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResolveCustomerAsync(ctx workflow.Context, input *marketplacemetering.ResolveCustomerInput) *ResolveCustomerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-marketplacemetering-ResolveCustomer", input)
	return &ResolveCustomerFuture{Future: future}
}
