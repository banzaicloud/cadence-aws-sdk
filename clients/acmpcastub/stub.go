// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package acmpcastub

import (
	"github.com/aws/aws-sdk-go/service/acmpca"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.CreateCertificateAuthorityOutput, error) {
	var output acmpca.CreateCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCertificateAuthorityAuditReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCertificateAuthorityAuditReportFuture) Get(ctx workflow.Context) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {
	var output acmpca.CreateCertificateAuthorityAuditReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePermissionFuture) Get(ctx workflow.Context) (*acmpca.CreatePermissionOutput, error) {
	var output acmpca.CreatePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.DeleteCertificateAuthorityOutput, error) {
	var output acmpca.DeleteCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePermissionFuture) Get(ctx workflow.Context) (*acmpca.DeletePermissionOutput, error) {
	var output acmpca.DeletePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePolicyFuture) Get(ctx workflow.Context) (*acmpca.DeletePolicyOutput, error) {
	var output acmpca.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	var output acmpca.DescribeCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCertificateAuthorityAuditReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCertificateAuthorityAuditReportFuture) Get(ctx workflow.Context) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {
	var output acmpca.DescribeCertificateAuthorityAuditReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCertificateFuture) Get(ctx workflow.Context) (*acmpca.GetCertificateOutput, error) {
	var output acmpca.GetCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCertificateAuthorityCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCertificateAuthorityCertificateFuture) Get(ctx workflow.Context) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {
	var output acmpca.GetCertificateAuthorityCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCertificateAuthorityCsrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCertificateAuthorityCsrFuture) Get(ctx workflow.Context) (*acmpca.GetCertificateAuthorityCsrOutput, error) {
	var output acmpca.GetCertificateAuthorityCsrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPolicyFuture) Get(ctx workflow.Context) (*acmpca.GetPolicyOutput, error) {
	var output acmpca.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportCertificateAuthorityCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportCertificateAuthorityCertificateFuture) Get(ctx workflow.Context) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {
	var output acmpca.ImportCertificateAuthorityCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IssueCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IssueCertificateFuture) Get(ctx workflow.Context) (*acmpca.IssueCertificateOutput, error) {
	var output acmpca.IssueCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCertificateAuthoritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCertificateAuthoritiesFuture) Get(ctx workflow.Context) (*acmpca.ListCertificateAuthoritiesOutput, error) {
	var output acmpca.ListCertificateAuthoritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionsFuture) Get(ctx workflow.Context) (*acmpca.ListPermissionsOutput, error) {
	var output acmpca.ListPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*acmpca.ListTagsOutput, error) {
	var output acmpca.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPolicyFuture) Get(ctx workflow.Context) (*acmpca.PutPolicyOutput, error) {
	var output acmpca.PutPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.RestoreCertificateAuthorityOutput, error) {
	var output acmpca.RestoreCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeCertificateFuture) Get(ctx workflow.Context) (*acmpca.RevokeCertificateOutput, error) {
	var output acmpca.RevokeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.TagCertificateAuthorityOutput, error) {
	var output acmpca.TagCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.UntagCertificateAuthorityOutput, error) {
	var output acmpca.UntagCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateCertificateAuthorityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateCertificateAuthorityFuture) Get(ctx workflow.Context) (*acmpca.UpdateCertificateAuthorityOutput, error) {
	var output acmpca.UpdateCertificateAuthorityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateAuthority(ctx workflow.Context, input *acmpca.CreateCertificateAuthorityInput) (*acmpca.CreateCertificateAuthorityOutput, error) {
	var output acmpca.CreateCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-CreateCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.CreateCertificateAuthorityInput) *CreateCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-CreateCertificateAuthority", input)
	return &CreateCertificateAuthorityFuture{Future: future}
}

func (a *stub) CreateCertificateAuthorityAuditReport(ctx workflow.Context, input *acmpca.CreateCertificateAuthorityAuditReportInput) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {
	var output acmpca.CreateCertificateAuthorityAuditReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-CreateCertificateAuthorityAuditReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateAuthorityAuditReportAsync(ctx workflow.Context, input *acmpca.CreateCertificateAuthorityAuditReportInput) *CreateCertificateAuthorityAuditReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-CreateCertificateAuthorityAuditReport", input)
	return &CreateCertificateAuthorityAuditReportFuture{Future: future}
}

func (a *stub) CreatePermission(ctx workflow.Context, input *acmpca.CreatePermissionInput) (*acmpca.CreatePermissionOutput, error) {
	var output acmpca.CreatePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-CreatePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePermissionAsync(ctx workflow.Context, input *acmpca.CreatePermissionInput) *CreatePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-CreatePermission", input)
	return &CreatePermissionFuture{Future: future}
}

func (a *stub) DeleteCertificateAuthority(ctx workflow.Context, input *acmpca.DeleteCertificateAuthorityInput) (*acmpca.DeleteCertificateAuthorityOutput, error) {
	var output acmpca.DeleteCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-DeleteCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.DeleteCertificateAuthorityInput) *DeleteCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-DeleteCertificateAuthority", input)
	return &DeleteCertificateAuthorityFuture{Future: future}
}

func (a *stub) DeletePermission(ctx workflow.Context, input *acmpca.DeletePermissionInput) (*acmpca.DeletePermissionOutput, error) {
	var output acmpca.DeletePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-DeletePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePermissionAsync(ctx workflow.Context, input *acmpca.DeletePermissionInput) *DeletePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-DeletePermission", input)
	return &DeletePermissionFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *acmpca.DeletePolicyInput) (*acmpca.DeletePolicyOutput, error) {
	var output acmpca.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *acmpca.DeletePolicyInput) *DeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-DeletePolicy", input)
	return &DeletePolicyFuture{Future: future}
}

func (a *stub) DescribeCertificateAuthority(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityInput) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	var output acmpca.DescribeCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-DescribeCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityInput) *DescribeCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-DescribeCertificateAuthority", input)
	return &DescribeCertificateAuthorityFuture{Future: future}
}

func (a *stub) DescribeCertificateAuthorityAuditReport(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityAuditReportInput) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {
	var output acmpca.DescribeCertificateAuthorityAuditReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-DescribeCertificateAuthorityAuditReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAuthorityAuditReportAsync(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityAuditReportInput) *DescribeCertificateAuthorityAuditReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-DescribeCertificateAuthorityAuditReport", input)
	return &DescribeCertificateAuthorityAuditReportFuture{Future: future}
}

func (a *stub) GetCertificate(ctx workflow.Context, input *acmpca.GetCertificateInput) (*acmpca.GetCertificateOutput, error) {
	var output acmpca.GetCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificateAsync(ctx workflow.Context, input *acmpca.GetCertificateInput) *GetCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificate", input)
	return &GetCertificateFuture{Future: future}
}

func (a *stub) GetCertificateAuthorityCertificate(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCertificateInput) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {
	var output acmpca.GetCertificateAuthorityCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificateAuthorityCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificateAuthorityCertificateAsync(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCertificateInput) *GetCertificateAuthorityCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificateAuthorityCertificate", input)
	return &GetCertificateAuthorityCertificateFuture{Future: future}
}

func (a *stub) GetCertificateAuthorityCsr(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCsrInput) (*acmpca.GetCertificateAuthorityCsrOutput, error) {
	var output acmpca.GetCertificateAuthorityCsrOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificateAuthorityCsr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCertificateAuthorityCsrAsync(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCsrInput) *GetCertificateAuthorityCsrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-GetCertificateAuthorityCsr", input)
	return &GetCertificateAuthorityCsrFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *acmpca.GetPolicyInput) (*acmpca.GetPolicyOutput, error) {
	var output acmpca.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *acmpca.GetPolicyInput) *GetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-GetPolicy", input)
	return &GetPolicyFuture{Future: future}
}

func (a *stub) ImportCertificateAuthorityCertificate(ctx workflow.Context, input *acmpca.ImportCertificateAuthorityCertificateInput) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {
	var output acmpca.ImportCertificateAuthorityCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-ImportCertificateAuthorityCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportCertificateAuthorityCertificateAsync(ctx workflow.Context, input *acmpca.ImportCertificateAuthorityCertificateInput) *ImportCertificateAuthorityCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-ImportCertificateAuthorityCertificate", input)
	return &ImportCertificateAuthorityCertificateFuture{Future: future}
}

func (a *stub) IssueCertificate(ctx workflow.Context, input *acmpca.IssueCertificateInput) (*acmpca.IssueCertificateOutput, error) {
	var output acmpca.IssueCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-IssueCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IssueCertificateAsync(ctx workflow.Context, input *acmpca.IssueCertificateInput) *IssueCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-IssueCertificate", input)
	return &IssueCertificateFuture{Future: future}
}

func (a *stub) ListCertificateAuthorities(ctx workflow.Context, input *acmpca.ListCertificateAuthoritiesInput) (*acmpca.ListCertificateAuthoritiesOutput, error) {
	var output acmpca.ListCertificateAuthoritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-ListCertificateAuthorities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificateAuthoritiesAsync(ctx workflow.Context, input *acmpca.ListCertificateAuthoritiesInput) *ListCertificateAuthoritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-ListCertificateAuthorities", input)
	return &ListCertificateAuthoritiesFuture{Future: future}
}

func (a *stub) ListPermissions(ctx workflow.Context, input *acmpca.ListPermissionsInput) (*acmpca.ListPermissionsOutput, error) {
	var output acmpca.ListPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-ListPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionsAsync(ctx workflow.Context, input *acmpca.ListPermissionsInput) *ListPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-ListPermissions", input)
	return &ListPermissionsFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *acmpca.ListTagsInput) (*acmpca.ListTagsOutput, error) {
	var output acmpca.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *acmpca.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) PutPolicy(ctx workflow.Context, input *acmpca.PutPolicyInput) (*acmpca.PutPolicyOutput, error) {
	var output acmpca.PutPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-PutPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPolicyAsync(ctx workflow.Context, input *acmpca.PutPolicyInput) *PutPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-PutPolicy", input)
	return &PutPolicyFuture{Future: future}
}

func (a *stub) RestoreCertificateAuthority(ctx workflow.Context, input *acmpca.RestoreCertificateAuthorityInput) (*acmpca.RestoreCertificateAuthorityOutput, error) {
	var output acmpca.RestoreCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-RestoreCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.RestoreCertificateAuthorityInput) *RestoreCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-RestoreCertificateAuthority", input)
	return &RestoreCertificateAuthorityFuture{Future: future}
}

func (a *stub) RevokeCertificate(ctx workflow.Context, input *acmpca.RevokeCertificateInput) (*acmpca.RevokeCertificateOutput, error) {
	var output acmpca.RevokeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-RevokeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeCertificateAsync(ctx workflow.Context, input *acmpca.RevokeCertificateInput) *RevokeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-RevokeCertificate", input)
	return &RevokeCertificateFuture{Future: future}
}

func (a *stub) TagCertificateAuthority(ctx workflow.Context, input *acmpca.TagCertificateAuthorityInput) (*acmpca.TagCertificateAuthorityOutput, error) {
	var output acmpca.TagCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-TagCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.TagCertificateAuthorityInput) *TagCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-TagCertificateAuthority", input)
	return &TagCertificateAuthorityFuture{Future: future}
}

func (a *stub) UntagCertificateAuthority(ctx workflow.Context, input *acmpca.UntagCertificateAuthorityInput) (*acmpca.UntagCertificateAuthorityOutput, error) {
	var output acmpca.UntagCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-UntagCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.UntagCertificateAuthorityInput) *UntagCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-UntagCertificateAuthority", input)
	return &UntagCertificateAuthorityFuture{Future: future}
}

func (a *stub) UpdateCertificateAuthority(ctx workflow.Context, input *acmpca.UpdateCertificateAuthorityInput) (*acmpca.UpdateCertificateAuthorityOutput, error) {
	var output acmpca.UpdateCertificateAuthorityOutput
	err := workflow.ExecuteActivity(ctx, "aws-acmpca-UpdateCertificateAuthority", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCertificateAuthorityAsync(ctx workflow.Context, input *acmpca.UpdateCertificateAuthorityInput) *UpdateCertificateAuthorityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-UpdateCertificateAuthority", input)
	return &UpdateCertificateAuthorityFuture{Future: future}
}

func (a *stub) WaitUntilAuditReportCreated(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityAuditReportInput) error {
	return workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilAuditReportCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAuditReportCreatedAsync(ctx workflow.Context, input *acmpca.DescribeCertificateAuthorityAuditReportInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilAuditReportCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilCertificateAuthorityCSRCreated(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCsrInput) error {
	return workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilCertificateAuthorityCSRCreated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCertificateAuthorityCSRCreatedAsync(ctx workflow.Context, input *acmpca.GetCertificateAuthorityCsrInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilCertificateAuthorityCSRCreated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilCertificateIssued(ctx workflow.Context, input *acmpca.GetCertificateInput) error {
	return workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilCertificateIssued", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCertificateIssuedAsync(ctx workflow.Context, input *acmpca.GetCertificateInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-acmpca-WaitUntilCertificateIssued", input)
	return clients.NewVoidFuture(future)
}
