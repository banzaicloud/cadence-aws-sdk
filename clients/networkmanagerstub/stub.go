// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package networkmanagerstub

import (
	"github.com/aws/aws-sdk-go/service/networkmanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type NetworkManagerAssociateCustomerGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerAssociateCustomerGatewayFuture) Get(ctx workflow.Context) (*networkmanager.AssociateCustomerGatewayOutput, error) {
	var output networkmanager.AssociateCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerAssociateLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerAssociateLinkFuture) Get(ctx workflow.Context) (*networkmanager.AssociateLinkOutput, error) {
	var output networkmanager.AssociateLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerCreateDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerCreateDeviceFuture) Get(ctx workflow.Context) (*networkmanager.CreateDeviceOutput, error) {
	var output networkmanager.CreateDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerCreateGlobalNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerCreateGlobalNetworkFuture) Get(ctx workflow.Context) (*networkmanager.CreateGlobalNetworkOutput, error) {
	var output networkmanager.CreateGlobalNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerCreateLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerCreateLinkFuture) Get(ctx workflow.Context) (*networkmanager.CreateLinkOutput, error) {
	var output networkmanager.CreateLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerCreateSiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerCreateSiteFuture) Get(ctx workflow.Context) (*networkmanager.CreateSiteOutput, error) {
	var output networkmanager.CreateSiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDeleteDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDeleteDeviceFuture) Get(ctx workflow.Context) (*networkmanager.DeleteDeviceOutput, error) {
	var output networkmanager.DeleteDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDeleteGlobalNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDeleteGlobalNetworkFuture) Get(ctx workflow.Context) (*networkmanager.DeleteGlobalNetworkOutput, error) {
	var output networkmanager.DeleteGlobalNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDeleteLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDeleteLinkFuture) Get(ctx workflow.Context) (*networkmanager.DeleteLinkOutput, error) {
	var output networkmanager.DeleteLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDeleteSiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDeleteSiteFuture) Get(ctx workflow.Context) (*networkmanager.DeleteSiteOutput, error) {
	var output networkmanager.DeleteSiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDeregisterTransitGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDeregisterTransitGatewayFuture) Get(ctx workflow.Context) (*networkmanager.DeregisterTransitGatewayOutput, error) {
	var output networkmanager.DeregisterTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDescribeGlobalNetworksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDescribeGlobalNetworksFuture) Get(ctx workflow.Context) (*networkmanager.DescribeGlobalNetworksOutput, error) {
	var output networkmanager.DescribeGlobalNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDisassociateCustomerGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDisassociateCustomerGatewayFuture) Get(ctx workflow.Context) (*networkmanager.DisassociateCustomerGatewayOutput, error) {
	var output networkmanager.DisassociateCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerDisassociateLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerDisassociateLinkFuture) Get(ctx workflow.Context) (*networkmanager.DisassociateLinkOutput, error) {
	var output networkmanager.DisassociateLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetCustomerGatewayAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetCustomerGatewayAssociationsFuture) Get(ctx workflow.Context) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {
	var output networkmanager.GetCustomerGatewayAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetDevicesFuture) Get(ctx workflow.Context) (*networkmanager.GetDevicesOutput, error) {
	var output networkmanager.GetDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetLinkAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetLinkAssociationsFuture) Get(ctx workflow.Context) (*networkmanager.GetLinkAssociationsOutput, error) {
	var output networkmanager.GetLinkAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetLinksFuture) Get(ctx workflow.Context) (*networkmanager.GetLinksOutput, error) {
	var output networkmanager.GetLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetSitesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetSitesFuture) Get(ctx workflow.Context) (*networkmanager.GetSitesOutput, error) {
	var output networkmanager.GetSitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerGetTransitGatewayRegistrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerGetTransitGatewayRegistrationsFuture) Get(ctx workflow.Context) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {
	var output networkmanager.GetTransitGatewayRegistrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerListTagsForResourceFuture) Get(ctx workflow.Context) (*networkmanager.ListTagsForResourceOutput, error) {
	var output networkmanager.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerRegisterTransitGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerRegisterTransitGatewayFuture) Get(ctx workflow.Context) (*networkmanager.RegisterTransitGatewayOutput, error) {
	var output networkmanager.RegisterTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerTagResourceFuture) Get(ctx workflow.Context) (*networkmanager.TagResourceOutput, error) {
	var output networkmanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerUntagResourceFuture) Get(ctx workflow.Context) (*networkmanager.UntagResourceOutput, error) {
	var output networkmanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerUpdateDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerUpdateDeviceFuture) Get(ctx workflow.Context) (*networkmanager.UpdateDeviceOutput, error) {
	var output networkmanager.UpdateDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerUpdateGlobalNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerUpdateGlobalNetworkFuture) Get(ctx workflow.Context) (*networkmanager.UpdateGlobalNetworkOutput, error) {
	var output networkmanager.UpdateGlobalNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerUpdateLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerUpdateLinkFuture) Get(ctx workflow.Context) (*networkmanager.UpdateLinkOutput, error) {
	var output networkmanager.UpdateLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type NetworkManagerUpdateSiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *NetworkManagerUpdateSiteFuture) Get(ctx workflow.Context) (*networkmanager.UpdateSiteOutput, error) {
	var output networkmanager.UpdateSiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateCustomerGateway(ctx workflow.Context, input *networkmanager.AssociateCustomerGatewayInput) (*networkmanager.AssociateCustomerGatewayOutput, error) {
	var output networkmanager.AssociateCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-AssociateCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateCustomerGatewayAsync(ctx workflow.Context, input *networkmanager.AssociateCustomerGatewayInput) *NetworkManagerAssociateCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-AssociateCustomerGateway", input)
	return &NetworkManagerAssociateCustomerGatewayFuture{Future: future}
}

func (a *stub) AssociateLink(ctx workflow.Context, input *networkmanager.AssociateLinkInput) (*networkmanager.AssociateLinkOutput, error) {
	var output networkmanager.AssociateLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-AssociateLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateLinkAsync(ctx workflow.Context, input *networkmanager.AssociateLinkInput) *NetworkManagerAssociateLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-AssociateLink", input)
	return &NetworkManagerAssociateLinkFuture{Future: future}
}

func (a *stub) CreateDevice(ctx workflow.Context, input *networkmanager.CreateDeviceInput) (*networkmanager.CreateDeviceOutput, error) {
	var output networkmanager.CreateDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeviceAsync(ctx workflow.Context, input *networkmanager.CreateDeviceInput) *NetworkManagerCreateDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateDevice", input)
	return &NetworkManagerCreateDeviceFuture{Future: future}
}

func (a *stub) CreateGlobalNetwork(ctx workflow.Context, input *networkmanager.CreateGlobalNetworkInput) (*networkmanager.CreateGlobalNetworkOutput, error) {
	var output networkmanager.CreateGlobalNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateGlobalNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGlobalNetworkAsync(ctx workflow.Context, input *networkmanager.CreateGlobalNetworkInput) *NetworkManagerCreateGlobalNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateGlobalNetwork", input)
	return &NetworkManagerCreateGlobalNetworkFuture{Future: future}
}

func (a *stub) CreateLink(ctx workflow.Context, input *networkmanager.CreateLinkInput) (*networkmanager.CreateLinkOutput, error) {
	var output networkmanager.CreateLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLinkAsync(ctx workflow.Context, input *networkmanager.CreateLinkInput) *NetworkManagerCreateLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateLink", input)
	return &NetworkManagerCreateLinkFuture{Future: future}
}

func (a *stub) CreateSite(ctx workflow.Context, input *networkmanager.CreateSiteInput) (*networkmanager.CreateSiteOutput, error) {
	var output networkmanager.CreateSiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateSite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSiteAsync(ctx workflow.Context, input *networkmanager.CreateSiteInput) *NetworkManagerCreateSiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-CreateSite", input)
	return &NetworkManagerCreateSiteFuture{Future: future}
}

func (a *stub) DeleteDevice(ctx workflow.Context, input *networkmanager.DeleteDeviceInput) (*networkmanager.DeleteDeviceOutput, error) {
	var output networkmanager.DeleteDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeviceAsync(ctx workflow.Context, input *networkmanager.DeleteDeviceInput) *NetworkManagerDeleteDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteDevice", input)
	return &NetworkManagerDeleteDeviceFuture{Future: future}
}

func (a *stub) DeleteGlobalNetwork(ctx workflow.Context, input *networkmanager.DeleteGlobalNetworkInput) (*networkmanager.DeleteGlobalNetworkOutput, error) {
	var output networkmanager.DeleteGlobalNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteGlobalNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGlobalNetworkAsync(ctx workflow.Context, input *networkmanager.DeleteGlobalNetworkInput) *NetworkManagerDeleteGlobalNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteGlobalNetwork", input)
	return &NetworkManagerDeleteGlobalNetworkFuture{Future: future}
}

func (a *stub) DeleteLink(ctx workflow.Context, input *networkmanager.DeleteLinkInput) (*networkmanager.DeleteLinkOutput, error) {
	var output networkmanager.DeleteLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLinkAsync(ctx workflow.Context, input *networkmanager.DeleteLinkInput) *NetworkManagerDeleteLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteLink", input)
	return &NetworkManagerDeleteLinkFuture{Future: future}
}

func (a *stub) DeleteSite(ctx workflow.Context, input *networkmanager.DeleteSiteInput) (*networkmanager.DeleteSiteOutput, error) {
	var output networkmanager.DeleteSiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteSite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSiteAsync(ctx workflow.Context, input *networkmanager.DeleteSiteInput) *NetworkManagerDeleteSiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeleteSite", input)
	return &NetworkManagerDeleteSiteFuture{Future: future}
}

func (a *stub) DeregisterTransitGateway(ctx workflow.Context, input *networkmanager.DeregisterTransitGatewayInput) (*networkmanager.DeregisterTransitGatewayOutput, error) {
	var output networkmanager.DeregisterTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeregisterTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTransitGatewayAsync(ctx workflow.Context, input *networkmanager.DeregisterTransitGatewayInput) *NetworkManagerDeregisterTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DeregisterTransitGateway", input)
	return &NetworkManagerDeregisterTransitGatewayFuture{Future: future}
}

func (a *stub) DescribeGlobalNetworks(ctx workflow.Context, input *networkmanager.DescribeGlobalNetworksInput) (*networkmanager.DescribeGlobalNetworksOutput, error) {
	var output networkmanager.DescribeGlobalNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DescribeGlobalNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalNetworksAsync(ctx workflow.Context, input *networkmanager.DescribeGlobalNetworksInput) *NetworkManagerDescribeGlobalNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DescribeGlobalNetworks", input)
	return &NetworkManagerDescribeGlobalNetworksFuture{Future: future}
}

func (a *stub) DisassociateCustomerGateway(ctx workflow.Context, input *networkmanager.DisassociateCustomerGatewayInput) (*networkmanager.DisassociateCustomerGatewayOutput, error) {
	var output networkmanager.DisassociateCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DisassociateCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateCustomerGatewayAsync(ctx workflow.Context, input *networkmanager.DisassociateCustomerGatewayInput) *NetworkManagerDisassociateCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DisassociateCustomerGateway", input)
	return &NetworkManagerDisassociateCustomerGatewayFuture{Future: future}
}

func (a *stub) DisassociateLink(ctx workflow.Context, input *networkmanager.DisassociateLinkInput) (*networkmanager.DisassociateLinkOutput, error) {
	var output networkmanager.DisassociateLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-DisassociateLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateLinkAsync(ctx workflow.Context, input *networkmanager.DisassociateLinkInput) *NetworkManagerDisassociateLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-DisassociateLink", input)
	return &NetworkManagerDisassociateLinkFuture{Future: future}
}

func (a *stub) GetCustomerGatewayAssociations(ctx workflow.Context, input *networkmanager.GetCustomerGatewayAssociationsInput) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {
	var output networkmanager.GetCustomerGatewayAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetCustomerGatewayAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCustomerGatewayAssociationsAsync(ctx workflow.Context, input *networkmanager.GetCustomerGatewayAssociationsInput) *NetworkManagerGetCustomerGatewayAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetCustomerGatewayAssociations", input)
	return &NetworkManagerGetCustomerGatewayAssociationsFuture{Future: future}
}

func (a *stub) GetDevices(ctx workflow.Context, input *networkmanager.GetDevicesInput) (*networkmanager.GetDevicesOutput, error) {
	var output networkmanager.GetDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicesAsync(ctx workflow.Context, input *networkmanager.GetDevicesInput) *NetworkManagerGetDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetDevices", input)
	return &NetworkManagerGetDevicesFuture{Future: future}
}

func (a *stub) GetLinkAssociations(ctx workflow.Context, input *networkmanager.GetLinkAssociationsInput) (*networkmanager.GetLinkAssociationsOutput, error) {
	var output networkmanager.GetLinkAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetLinkAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLinkAssociationsAsync(ctx workflow.Context, input *networkmanager.GetLinkAssociationsInput) *NetworkManagerGetLinkAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetLinkAssociations", input)
	return &NetworkManagerGetLinkAssociationsFuture{Future: future}
}

func (a *stub) GetLinks(ctx workflow.Context, input *networkmanager.GetLinksInput) (*networkmanager.GetLinksOutput, error) {
	var output networkmanager.GetLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLinksAsync(ctx workflow.Context, input *networkmanager.GetLinksInput) *NetworkManagerGetLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetLinks", input)
	return &NetworkManagerGetLinksFuture{Future: future}
}

func (a *stub) GetSites(ctx workflow.Context, input *networkmanager.GetSitesInput) (*networkmanager.GetSitesOutput, error) {
	var output networkmanager.GetSitesOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetSites", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSitesAsync(ctx workflow.Context, input *networkmanager.GetSitesInput) *NetworkManagerGetSitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetSites", input)
	return &NetworkManagerGetSitesFuture{Future: future}
}

func (a *stub) GetTransitGatewayRegistrations(ctx workflow.Context, input *networkmanager.GetTransitGatewayRegistrationsInput) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {
	var output networkmanager.GetTransitGatewayRegistrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetTransitGatewayRegistrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayRegistrationsAsync(ctx workflow.Context, input *networkmanager.GetTransitGatewayRegistrationsInput) *NetworkManagerGetTransitGatewayRegistrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-GetTransitGatewayRegistrations", input)
	return &NetworkManagerGetTransitGatewayRegistrationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *networkmanager.ListTagsForResourceInput) (*networkmanager.ListTagsForResourceOutput, error) {
	var output networkmanager.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *networkmanager.ListTagsForResourceInput) *NetworkManagerListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-ListTagsForResource", input)
	return &NetworkManagerListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterTransitGateway(ctx workflow.Context, input *networkmanager.RegisterTransitGatewayInput) (*networkmanager.RegisterTransitGatewayOutput, error) {
	var output networkmanager.RegisterTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-RegisterTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTransitGatewayAsync(ctx workflow.Context, input *networkmanager.RegisterTransitGatewayInput) *NetworkManagerRegisterTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-RegisterTransitGateway", input)
	return &NetworkManagerRegisterTransitGatewayFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *networkmanager.TagResourceInput) (*networkmanager.TagResourceOutput, error) {
	var output networkmanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *networkmanager.TagResourceInput) *NetworkManagerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-TagResource", input)
	return &NetworkManagerTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *networkmanager.UntagResourceInput) (*networkmanager.UntagResourceOutput, error) {
	var output networkmanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *networkmanager.UntagResourceInput) *NetworkManagerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-UntagResource", input)
	return &NetworkManagerUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDevice(ctx workflow.Context, input *networkmanager.UpdateDeviceInput) (*networkmanager.UpdateDeviceOutput, error) {
	var output networkmanager.UpdateDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceAsync(ctx workflow.Context, input *networkmanager.UpdateDeviceInput) *NetworkManagerUpdateDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateDevice", input)
	return &NetworkManagerUpdateDeviceFuture{Future: future}
}

func (a *stub) UpdateGlobalNetwork(ctx workflow.Context, input *networkmanager.UpdateGlobalNetworkInput) (*networkmanager.UpdateGlobalNetworkOutput, error) {
	var output networkmanager.UpdateGlobalNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateGlobalNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalNetworkAsync(ctx workflow.Context, input *networkmanager.UpdateGlobalNetworkInput) *NetworkManagerUpdateGlobalNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateGlobalNetwork", input)
	return &NetworkManagerUpdateGlobalNetworkFuture{Future: future}
}

func (a *stub) UpdateLink(ctx workflow.Context, input *networkmanager.UpdateLinkInput) (*networkmanager.UpdateLinkOutput, error) {
	var output networkmanager.UpdateLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLinkAsync(ctx workflow.Context, input *networkmanager.UpdateLinkInput) *NetworkManagerUpdateLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateLink", input)
	return &NetworkManagerUpdateLinkFuture{Future: future}
}

func (a *stub) UpdateSite(ctx workflow.Context, input *networkmanager.UpdateSiteInput) (*networkmanager.UpdateSiteOutput, error) {
	var output networkmanager.UpdateSiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateSite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSiteAsync(ctx workflow.Context, input *networkmanager.UpdateSiteInput) *NetworkManagerUpdateSiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkmanager-UpdateSite", input)
	return &NetworkManagerUpdateSiteFuture{Future: future}
}
