// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lexruntimev2stub

import (
	"github.com/aws/aws-sdk-go/service/lexruntimev2"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DeleteSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSessionFuture) Get(ctx workflow.Context) (*lexruntimev2.DeleteSessionOutput, error) {
	var output lexruntimev2.DeleteSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSessionFuture) Get(ctx workflow.Context) (*lexruntimev2.GetSessionOutput, error) {
	var output lexruntimev2.GetSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSessionFuture) Get(ctx workflow.Context) (*lexruntimev2.PutSessionOutput, error) {
	var output lexruntimev2.PutSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecognizeTextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecognizeTextFuture) Get(ctx workflow.Context) (*lexruntimev2.RecognizeTextOutput, error) {
	var output lexruntimev2.RecognizeTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecognizeUtteranceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecognizeUtteranceFuture) Get(ctx workflow.Context) (*lexruntimev2.RecognizeUtteranceOutput, error) {
	var output lexruntimev2.RecognizeUtteranceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartConversationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartConversationFuture) Get(ctx workflow.Context) (*lexruntimev2.StartConversationOutput, error) {
	var output lexruntimev2.StartConversationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSession(ctx workflow.Context, input *lexruntimev2.DeleteSessionInput) (*lexruntimev2.DeleteSessionOutput, error) {
	var output lexruntimev2.DeleteSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-DeleteSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSessionAsync(ctx workflow.Context, input *lexruntimev2.DeleteSessionInput) *DeleteSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-DeleteSession", input)
	return &DeleteSessionFuture{Future: future}
}

func (a *stub) GetSession(ctx workflow.Context, input *lexruntimev2.GetSessionInput) (*lexruntimev2.GetSessionOutput, error) {
	var output lexruntimev2.GetSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-GetSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSessionAsync(ctx workflow.Context, input *lexruntimev2.GetSessionInput) *GetSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-GetSession", input)
	return &GetSessionFuture{Future: future}
}

func (a *stub) PutSession(ctx workflow.Context, input *lexruntimev2.PutSessionInput) (*lexruntimev2.PutSessionOutput, error) {
	var output lexruntimev2.PutSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-PutSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSessionAsync(ctx workflow.Context, input *lexruntimev2.PutSessionInput) *PutSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-PutSession", input)
	return &PutSessionFuture{Future: future}
}

func (a *stub) RecognizeText(ctx workflow.Context, input *lexruntimev2.RecognizeTextInput) (*lexruntimev2.RecognizeTextOutput, error) {
	var output lexruntimev2.RecognizeTextOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-RecognizeText", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecognizeTextAsync(ctx workflow.Context, input *lexruntimev2.RecognizeTextInput) *RecognizeTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-RecognizeText", input)
	return &RecognizeTextFuture{Future: future}
}

func (a *stub) RecognizeUtterance(ctx workflow.Context, input *lexruntimev2.RecognizeUtteranceInput) (*lexruntimev2.RecognizeUtteranceOutput, error) {
	var output lexruntimev2.RecognizeUtteranceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-RecognizeUtterance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecognizeUtteranceAsync(ctx workflow.Context, input *lexruntimev2.RecognizeUtteranceInput) *RecognizeUtteranceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-RecognizeUtterance", input)
	return &RecognizeUtteranceFuture{Future: future}
}

func (a *stub) StartConversation(ctx workflow.Context, input *lexruntimev2.StartConversationInput) (*lexruntimev2.StartConversationOutput, error) {
	var output lexruntimev2.StartConversationOutput
	err := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-StartConversation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartConversationAsync(ctx workflow.Context, input *lexruntimev2.StartConversationInput) *StartConversationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lexruntimev2-StartConversation", input)
	return &StartConversationFuture{Future: future}
}
