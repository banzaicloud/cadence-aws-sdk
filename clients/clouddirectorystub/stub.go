// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package clouddirectorystub

import (
	"github.com/aws/aws-sdk-go/service/clouddirectory"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloudDirectoryAddFacetToObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryAddFacetToObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryApplySchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryApplySchemaFuture) Get(ctx workflow.Context) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryAttachObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryAttachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryAttachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryAttachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryAttachToIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryAttachToIndexFuture) Get(ctx workflow.Context) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryAttachTypedLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryAttachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryBatchReadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryBatchReadFuture) Get(ctx workflow.Context) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryBatchWriteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryBatchWriteFuture) Get(ctx workflow.Context) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateIndexFuture) Get(ctx workflow.Context) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateObjectFuture) Get(ctx workflow.Context) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryCreateTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryCreateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDeleteDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDeleteDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDeleteFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDeleteFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDeleteObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDeleteObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDeleteSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDeleteSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDeleteTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDeleteTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDetachFromIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDetachFromIndexFuture) Get(ctx workflow.Context) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDetachObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDetachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDetachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDetachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDetachTypedLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDetachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryDisableDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryDisableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryEnableDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryEnableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetAppliedSchemaVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetAppliedSchemaVersionFuture) Get(ctx workflow.Context) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetFacetFuture) Get(ctx workflow.Context) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetLinkAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetObjectInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetObjectInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetSchemaAsJsonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetSchemaAsJsonFuture) Get(ctx workflow.Context) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryGetTypedLinkFacetInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryGetTypedLinkFacetInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListAppliedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListAppliedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListAttachedIndicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListAttachedIndicesFuture) Get(ctx workflow.Context) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListDevelopmentSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListDevelopmentSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListDirectoriesFuture) Get(ctx workflow.Context) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListFacetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListFacetNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListIncomingTypedLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListIncomingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListIndexFuture) Get(ctx workflow.Context) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListManagedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListManagedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListObjectChildrenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListObjectChildrenFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListObjectParentPathsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListObjectParentPathsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListObjectParentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListObjectParentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListObjectPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListObjectPoliciesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListOutgoingTypedLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListOutgoingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListPolicyAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListPolicyAttachmentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListPublishedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListPublishedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListTagsForResourceFuture) Get(ctx workflow.Context) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListTypedLinkFacetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListTypedLinkFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryListTypedLinkFacetNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryListTypedLinkFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryLookupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryLookupPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryPublishSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryPublishSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryPutSchemaFromJsonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryPutSchemaFromJsonFuture) Get(ctx workflow.Context) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryRemoveFacetFromObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryRemoveFacetFromObjectFuture) Get(ctx workflow.Context) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryTagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUntagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpdateFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpdateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpdateLinkAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpdateLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpdateObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpdateObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpdateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpdateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpdateTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpdateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpgradeAppliedSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpgradeAppliedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudDirectoryUpgradePublishedSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudDirectoryUpgradePublishedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFacetToObject(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AddFacetToObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFacetToObjectAsync(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) *CloudDirectoryAddFacetToObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AddFacetToObject", input)
	return &CloudDirectoryAddFacetToObjectFuture{Future: future}
}

func (a *stub) ApplySchema(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ApplySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplySchemaAsync(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) *CloudDirectoryApplySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ApplySchema", input)
	return &CloudDirectoryApplySchemaFuture{Future: future}
}

func (a *stub) AttachObject(ctx workflow.Context, input *clouddirectory.AttachObjectInput) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachObjectAsync(ctx workflow.Context, input *clouddirectory.AttachObjectInput) *CloudDirectoryAttachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachObject", input)
	return &CloudDirectoryAttachObjectFuture{Future: future}
}

func (a *stub) AttachPolicy(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPolicyAsync(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) *CloudDirectoryAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachPolicy", input)
	return &CloudDirectoryAttachPolicyFuture{Future: future}
}

func (a *stub) AttachToIndex(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachToIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachToIndexAsync(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) *CloudDirectoryAttachToIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachToIndex", input)
	return &CloudDirectoryAttachToIndexFuture{Future: future}
}

func (a *stub) AttachTypedLink(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) *CloudDirectoryAttachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachTypedLink", input)
	return &CloudDirectoryAttachTypedLinkFuture{Future: future}
}

func (a *stub) BatchRead(ctx workflow.Context, input *clouddirectory.BatchReadInput) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchRead", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchReadAsync(ctx workflow.Context, input *clouddirectory.BatchReadInput) *CloudDirectoryBatchReadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchRead", input)
	return &CloudDirectoryBatchReadFuture{Future: future}
}

func (a *stub) BatchWrite(ctx workflow.Context, input *clouddirectory.BatchWriteInput) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchWrite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchWriteAsync(ctx workflow.Context, input *clouddirectory.BatchWriteInput) *CloudDirectoryBatchWriteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchWrite", input)
	return &CloudDirectoryBatchWriteFuture{Future: future}
}

func (a *stub) CreateDirectory(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectoryAsync(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) *CloudDirectoryCreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateDirectory", input)
	return &CloudDirectoryCreateDirectoryFuture{Future: future}
}

func (a *stub) CreateFacet(ctx workflow.Context, input *clouddirectory.CreateFacetInput) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFacetAsync(ctx workflow.Context, input *clouddirectory.CreateFacetInput) *CloudDirectoryCreateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateFacet", input)
	return &CloudDirectoryCreateFacetFuture{Future: future}
}

func (a *stub) CreateIndex(ctx workflow.Context, input *clouddirectory.CreateIndexInput) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIndexAsync(ctx workflow.Context, input *clouddirectory.CreateIndexInput) *CloudDirectoryCreateIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateIndex", input)
	return &CloudDirectoryCreateIndexFuture{Future: future}
}

func (a *stub) CreateObject(ctx workflow.Context, input *clouddirectory.CreateObjectInput) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateObjectAsync(ctx workflow.Context, input *clouddirectory.CreateObjectInput) *CloudDirectoryCreateObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateObject", input)
	return &CloudDirectoryCreateObjectFuture{Future: future}
}

func (a *stub) CreateSchema(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSchemaAsync(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) *CloudDirectoryCreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateSchema", input)
	return &CloudDirectoryCreateSchemaFuture{Future: future}
}

func (a *stub) CreateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) *CloudDirectoryCreateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateTypedLinkFacet", input)
	return &CloudDirectoryCreateTypedLinkFacetFuture{Future: future}
}

func (a *stub) DeleteDirectory(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectoryAsync(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) *CloudDirectoryDeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteDirectory", input)
	return &CloudDirectoryDeleteDirectoryFuture{Future: future}
}

func (a *stub) DeleteFacet(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) *CloudDirectoryDeleteFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteFacet", input)
	return &CloudDirectoryDeleteFacetFuture{Future: future}
}

func (a *stub) DeleteObject(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteObjectAsync(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) *CloudDirectoryDeleteObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteObject", input)
	return &CloudDirectoryDeleteObjectFuture{Future: future}
}

func (a *stub) DeleteSchema(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaAsync(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) *CloudDirectoryDeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteSchema", input)
	return &CloudDirectoryDeleteSchemaFuture{Future: future}
}

func (a *stub) DeleteTypedLinkFacet(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) *CloudDirectoryDeleteTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteTypedLinkFacet", input)
	return &CloudDirectoryDeleteTypedLinkFacetFuture{Future: future}
}

func (a *stub) DetachFromIndex(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachFromIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachFromIndexAsync(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) *CloudDirectoryDetachFromIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachFromIndex", input)
	return &CloudDirectoryDetachFromIndexFuture{Future: future}
}

func (a *stub) DetachObject(ctx workflow.Context, input *clouddirectory.DetachObjectInput) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachObjectAsync(ctx workflow.Context, input *clouddirectory.DetachObjectInput) *CloudDirectoryDetachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachObject", input)
	return &CloudDirectoryDetachObjectFuture{Future: future}
}

func (a *stub) DetachPolicy(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPolicyAsync(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) *CloudDirectoryDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachPolicy", input)
	return &CloudDirectoryDetachPolicyFuture{Future: future}
}

func (a *stub) DetachTypedLink(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) *CloudDirectoryDetachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachTypedLink", input)
	return &CloudDirectoryDetachTypedLinkFuture{Future: future}
}

func (a *stub) DisableDirectory(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DisableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableDirectoryAsync(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) *CloudDirectoryDisableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DisableDirectory", input)
	return &CloudDirectoryDisableDirectoryFuture{Future: future}
}

func (a *stub) EnableDirectory(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-EnableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableDirectoryAsync(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) *CloudDirectoryEnableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-EnableDirectory", input)
	return &CloudDirectoryEnableDirectoryFuture{Future: future}
}

func (a *stub) GetAppliedSchemaVersion(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetAppliedSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppliedSchemaVersionAsync(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) *CloudDirectoryGetAppliedSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetAppliedSchemaVersion", input)
	return &CloudDirectoryGetAppliedSchemaVersionFuture{Future: future}
}

func (a *stub) GetDirectory(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDirectoryAsync(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) *CloudDirectoryGetDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetDirectory", input)
	return &CloudDirectoryGetDirectoryFuture{Future: future}
}

func (a *stub) GetFacet(ctx workflow.Context, input *clouddirectory.GetFacetInput) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFacetAsync(ctx workflow.Context, input *clouddirectory.GetFacetInput) *CloudDirectoryGetFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetFacet", input)
	return &CloudDirectoryGetFacetFuture{Future: future}
}

func (a *stub) GetLinkAttributes(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) *CloudDirectoryGetLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetLinkAttributes", input)
	return &CloudDirectoryGetLinkAttributesFuture{Future: future}
}

func (a *stub) GetObjectAttributes(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) *CloudDirectoryGetObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectAttributes", input)
	return &CloudDirectoryGetObjectAttributesFuture{Future: future}
}

func (a *stub) GetObjectInformation(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectInformationAsync(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) *CloudDirectoryGetObjectInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectInformation", input)
	return &CloudDirectoryGetObjectInformationFuture{Future: future}
}

func (a *stub) GetSchemaAsJson(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetSchemaAsJson", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaAsJsonAsync(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) *CloudDirectoryGetSchemaAsJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetSchemaAsJson", input)
	return &CloudDirectoryGetSchemaAsJsonFuture{Future: future}
}

func (a *stub) GetTypedLinkFacetInformation(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetTypedLinkFacetInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTypedLinkFacetInformationAsync(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) *CloudDirectoryGetTypedLinkFacetInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetTypedLinkFacetInformation", input)
	return &CloudDirectoryGetTypedLinkFacetInformationFuture{Future: future}
}

func (a *stub) ListAppliedSchemaArns(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAppliedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppliedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) *CloudDirectoryListAppliedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAppliedSchemaArns", input)
	return &CloudDirectoryListAppliedSchemaArnsFuture{Future: future}
}

func (a *stub) ListAttachedIndices(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAttachedIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedIndicesAsync(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) *CloudDirectoryListAttachedIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAttachedIndices", input)
	return &CloudDirectoryListAttachedIndicesFuture{Future: future}
}

func (a *stub) ListDevelopmentSchemaArns(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDevelopmentSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevelopmentSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) *CloudDirectoryListDevelopmentSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDevelopmentSchemaArns", input)
	return &CloudDirectoryListDevelopmentSchemaArnsFuture{Future: future}
}

func (a *stub) ListDirectories(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDirectoriesAsync(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) *CloudDirectoryListDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDirectories", input)
	return &CloudDirectoryListDirectoriesFuture{Future: future}
}

func (a *stub) ListFacetAttributes(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) *CloudDirectoryListFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetAttributes", input)
	return &CloudDirectoryListFacetAttributesFuture{Future: future}
}

func (a *stub) ListFacetNames(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) *CloudDirectoryListFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetNames", input)
	return &CloudDirectoryListFacetNamesFuture{Future: future}
}

func (a *stub) ListIncomingTypedLinks(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIncomingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIncomingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) *CloudDirectoryListIncomingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIncomingTypedLinks", input)
	return &CloudDirectoryListIncomingTypedLinksFuture{Future: future}
}

func (a *stub) ListIndex(ctx workflow.Context, input *clouddirectory.ListIndexInput) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIndexAsync(ctx workflow.Context, input *clouddirectory.ListIndexInput) *CloudDirectoryListIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIndex", input)
	return &CloudDirectoryListIndexFuture{Future: future}
}

func (a *stub) ListManagedSchemaArns(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListManagedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListManagedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) *CloudDirectoryListManagedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListManagedSchemaArns", input)
	return &CloudDirectoryListManagedSchemaArnsFuture{Future: future}
}

func (a *stub) ListObjectAttributes(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) *CloudDirectoryListObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectAttributes", input)
	return &CloudDirectoryListObjectAttributesFuture{Future: future}
}

func (a *stub) ListObjectChildren(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectChildrenAsync(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) *CloudDirectoryListObjectChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectChildren", input)
	return &CloudDirectoryListObjectChildrenFuture{Future: future}
}

func (a *stub) ListObjectParentPaths(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParentPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectParentPathsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) *CloudDirectoryListObjectParentPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParentPaths", input)
	return &CloudDirectoryListObjectParentPathsFuture{Future: future}
}

func (a *stub) ListObjectParents(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectParentsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) *CloudDirectoryListObjectParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParents", input)
	return &CloudDirectoryListObjectParentsFuture{Future: future}
}

func (a *stub) ListObjectPolicies(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectPoliciesAsync(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) *CloudDirectoryListObjectPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectPolicies", input)
	return &CloudDirectoryListObjectPoliciesFuture{Future: future}
}

func (a *stub) ListOutgoingTypedLinks(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListOutgoingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOutgoingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) *CloudDirectoryListOutgoingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListOutgoingTypedLinks", input)
	return &CloudDirectoryListOutgoingTypedLinksFuture{Future: future}
}

func (a *stub) ListPolicyAttachments(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPolicyAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPolicyAttachmentsAsync(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) *CloudDirectoryListPolicyAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPolicyAttachments", input)
	return &CloudDirectoryListPolicyAttachmentsFuture{Future: future}
}

func (a *stub) ListPublishedSchemaArns(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPublishedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPublishedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) *CloudDirectoryListPublishedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPublishedSchemaArns", input)
	return &CloudDirectoryListPublishedSchemaArnsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) *CloudDirectoryListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTagsForResource", input)
	return &CloudDirectoryListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTypedLinkFacetAttributes(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypedLinkFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) *CloudDirectoryListTypedLinkFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetAttributes", input)
	return &CloudDirectoryListTypedLinkFacetAttributesFuture{Future: future}
}

func (a *stub) ListTypedLinkFacetNames(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypedLinkFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) *CloudDirectoryListTypedLinkFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetNames", input)
	return &CloudDirectoryListTypedLinkFacetNamesFuture{Future: future}
}

func (a *stub) LookupPolicy(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-LookupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LookupPolicyAsync(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) *CloudDirectoryLookupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-LookupPolicy", input)
	return &CloudDirectoryLookupPolicyFuture{Future: future}
}

func (a *stub) PublishSchema(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PublishSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishSchemaAsync(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) *CloudDirectoryPublishSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PublishSchema", input)
	return &CloudDirectoryPublishSchemaFuture{Future: future}
}

func (a *stub) PutSchemaFromJson(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PutSchemaFromJson", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSchemaFromJsonAsync(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) *CloudDirectoryPutSchemaFromJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PutSchemaFromJson", input)
	return &CloudDirectoryPutSchemaFromJsonFuture{Future: future}
}

func (a *stub) RemoveFacetFromObject(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-RemoveFacetFromObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFacetFromObjectAsync(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) *CloudDirectoryRemoveFacetFromObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-RemoveFacetFromObject", input)
	return &CloudDirectoryRemoveFacetFromObjectFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *clouddirectory.TagResourceInput) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *clouddirectory.TagResourceInput) *CloudDirectoryTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-TagResource", input)
	return &CloudDirectoryTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *clouddirectory.UntagResourceInput) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *clouddirectory.UntagResourceInput) *CloudDirectoryUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UntagResource", input)
	return &CloudDirectoryUntagResourceFuture{Future: future}
}

func (a *stub) UpdateFacet(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) *CloudDirectoryUpdateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateFacet", input)
	return &CloudDirectoryUpdateFacetFuture{Future: future}
}

func (a *stub) UpdateLinkAttributes(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) *CloudDirectoryUpdateLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateLinkAttributes", input)
	return &CloudDirectoryUpdateLinkAttributesFuture{Future: future}
}

func (a *stub) UpdateObjectAttributes(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) *CloudDirectoryUpdateObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateObjectAttributes", input)
	return &CloudDirectoryUpdateObjectAttributesFuture{Future: future}
}

func (a *stub) UpdateSchema(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSchemaAsync(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) *CloudDirectoryUpdateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateSchema", input)
	return &CloudDirectoryUpdateSchemaFuture{Future: future}
}

func (a *stub) UpdateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) *CloudDirectoryUpdateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateTypedLinkFacet", input)
	return &CloudDirectoryUpdateTypedLinkFacetFuture{Future: future}
}

func (a *stub) UpgradeAppliedSchema(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradeAppliedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradeAppliedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) *CloudDirectoryUpgradeAppliedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradeAppliedSchema", input)
	return &CloudDirectoryUpgradeAppliedSchemaFuture{Future: future}
}

func (a *stub) UpgradePublishedSchema(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradePublishedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradePublishedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) *CloudDirectoryUpgradePublishedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradePublishedSchema", input)
	return &CloudDirectoryUpgradePublishedSchemaFuture{Future: future}
}
