// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package clouddirectorystub

import (
	"github.com/aws/aws-sdk-go/service/clouddirectory"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddFacetToObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddFacetToObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplySchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplySchemaFuture) Get(ctx workflow.Context) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachToIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachToIndexFuture) Get(ctx workflow.Context) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachTypedLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchReadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchReadFuture) Get(ctx workflow.Context) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchWriteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchWriteFuture) Get(ctx workflow.Context) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIndexFuture) Get(ctx workflow.Context) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateObjectFuture) Get(ctx workflow.Context) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachFromIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachFromIndexFuture) Get(ctx workflow.Context) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachObjectFuture) Get(ctx workflow.Context) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachTypedLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachTypedLinkFuture) Get(ctx workflow.Context) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAppliedSchemaVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAppliedSchemaVersionFuture) Get(ctx workflow.Context) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDirectoryFuture) Get(ctx workflow.Context) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFacetFuture) Get(ctx workflow.Context) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLinkAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetObjectInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetObjectInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSchemaAsJsonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSchemaAsJsonFuture) Get(ctx workflow.Context) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTypedLinkFacetInformationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTypedLinkFacetInformationFuture) Get(ctx workflow.Context) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAppliedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAppliedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttachedIndicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttachedIndicesFuture) Get(ctx workflow.Context) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevelopmentSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevelopmentSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDirectoriesFuture) Get(ctx workflow.Context) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFacetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFacetNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIncomingTypedLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIncomingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIndexFuture) Get(ctx workflow.Context) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListManagedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListManagedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectChildrenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectChildrenFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectParentPathsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectParentPathsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectParentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectParentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListObjectPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListObjectPoliciesFuture) Get(ctx workflow.Context) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOutgoingTypedLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOutgoingTypedLinksFuture) Get(ctx workflow.Context) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPolicyAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPolicyAttachmentsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPublishedSchemaArnsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPublishedSchemaArnsFuture) Get(ctx workflow.Context) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypedLinkFacetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypedLinkFacetAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTypedLinkFacetNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTypedLinkFacetNamesFuture) Get(ctx workflow.Context) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LookupPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *LookupPolicyFuture) Get(ctx workflow.Context) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PublishSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PublishSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSchemaFromJsonFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSchemaFromJsonFuture) Get(ctx workflow.Context) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveFacetFromObjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveFacetFromObjectFuture) Get(ctx workflow.Context) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLinkAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLinkAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateObjectAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateObjectAttributesFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTypedLinkFacetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTypedLinkFacetFuture) Get(ctx workflow.Context) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpgradeAppliedSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpgradeAppliedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpgradePublishedSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpgradePublishedSchemaFuture) Get(ctx workflow.Context) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFacetToObject(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) (*clouddirectory.AddFacetToObjectOutput, error) {
	var output clouddirectory.AddFacetToObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AddFacetToObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddFacetToObjectAsync(ctx workflow.Context, input *clouddirectory.AddFacetToObjectInput) *AddFacetToObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AddFacetToObject", input)
	return &AddFacetToObjectFuture{Future: future}
}

func (a *stub) ApplySchema(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) (*clouddirectory.ApplySchemaOutput, error) {
	var output clouddirectory.ApplySchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ApplySchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplySchemaAsync(ctx workflow.Context, input *clouddirectory.ApplySchemaInput) *ApplySchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ApplySchema", input)
	return &ApplySchemaFuture{Future: future}
}

func (a *stub) AttachObject(ctx workflow.Context, input *clouddirectory.AttachObjectInput) (*clouddirectory.AttachObjectOutput, error) {
	var output clouddirectory.AttachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachObjectAsync(ctx workflow.Context, input *clouddirectory.AttachObjectInput) *AttachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachObject", input)
	return &AttachObjectFuture{Future: future}
}

func (a *stub) AttachPolicy(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) (*clouddirectory.AttachPolicyOutput, error) {
	var output clouddirectory.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPolicyAsync(ctx workflow.Context, input *clouddirectory.AttachPolicyInput) *AttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachPolicy", input)
	return &AttachPolicyFuture{Future: future}
}

func (a *stub) AttachToIndex(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) (*clouddirectory.AttachToIndexOutput, error) {
	var output clouddirectory.AttachToIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachToIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachToIndexAsync(ctx workflow.Context, input *clouddirectory.AttachToIndexInput) *AttachToIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachToIndex", input)
	return &AttachToIndexFuture{Future: future}
}

func (a *stub) AttachTypedLink(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) (*clouddirectory.AttachTypedLinkOutput, error) {
	var output clouddirectory.AttachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.AttachTypedLinkInput) *AttachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-AttachTypedLink", input)
	return &AttachTypedLinkFuture{Future: future}
}

func (a *stub) BatchRead(ctx workflow.Context, input *clouddirectory.BatchReadInput) (*clouddirectory.BatchReadOutput, error) {
	var output clouddirectory.BatchReadOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchRead", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchReadAsync(ctx workflow.Context, input *clouddirectory.BatchReadInput) *BatchReadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchRead", input)
	return &BatchReadFuture{Future: future}
}

func (a *stub) BatchWrite(ctx workflow.Context, input *clouddirectory.BatchWriteInput) (*clouddirectory.BatchWriteOutput, error) {
	var output clouddirectory.BatchWriteOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchWrite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchWriteAsync(ctx workflow.Context, input *clouddirectory.BatchWriteInput) *BatchWriteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-BatchWrite", input)
	return &BatchWriteFuture{Future: future}
}

func (a *stub) CreateDirectory(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) (*clouddirectory.CreateDirectoryOutput, error) {
	var output clouddirectory.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectoryAsync(ctx workflow.Context, input *clouddirectory.CreateDirectoryInput) *CreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateDirectory", input)
	return &CreateDirectoryFuture{Future: future}
}

func (a *stub) CreateFacet(ctx workflow.Context, input *clouddirectory.CreateFacetInput) (*clouddirectory.CreateFacetOutput, error) {
	var output clouddirectory.CreateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFacetAsync(ctx workflow.Context, input *clouddirectory.CreateFacetInput) *CreateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateFacet", input)
	return &CreateFacetFuture{Future: future}
}

func (a *stub) CreateIndex(ctx workflow.Context, input *clouddirectory.CreateIndexInput) (*clouddirectory.CreateIndexOutput, error) {
	var output clouddirectory.CreateIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIndexAsync(ctx workflow.Context, input *clouddirectory.CreateIndexInput) *CreateIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateIndex", input)
	return &CreateIndexFuture{Future: future}
}

func (a *stub) CreateObject(ctx workflow.Context, input *clouddirectory.CreateObjectInput) (*clouddirectory.CreateObjectOutput, error) {
	var output clouddirectory.CreateObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateObjectAsync(ctx workflow.Context, input *clouddirectory.CreateObjectInput) *CreateObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateObject", input)
	return &CreateObjectFuture{Future: future}
}

func (a *stub) CreateSchema(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) (*clouddirectory.CreateSchemaOutput, error) {
	var output clouddirectory.CreateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSchemaAsync(ctx workflow.Context, input *clouddirectory.CreateSchemaInput) *CreateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateSchema", input)
	return &CreateSchemaFuture{Future: future}
}

func (a *stub) CreateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	var output clouddirectory.CreateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.CreateTypedLinkFacetInput) *CreateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-CreateTypedLinkFacet", input)
	return &CreateTypedLinkFacetFuture{Future: future}
}

func (a *stub) DeleteDirectory(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) (*clouddirectory.DeleteDirectoryOutput, error) {
	var output clouddirectory.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectoryAsync(ctx workflow.Context, input *clouddirectory.DeleteDirectoryInput) *DeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteDirectory", input)
	return &DeleteDirectoryFuture{Future: future}
}

func (a *stub) DeleteFacet(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) (*clouddirectory.DeleteFacetOutput, error) {
	var output clouddirectory.DeleteFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteFacetInput) *DeleteFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteFacet", input)
	return &DeleteFacetFuture{Future: future}
}

func (a *stub) DeleteObject(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) (*clouddirectory.DeleteObjectOutput, error) {
	var output clouddirectory.DeleteObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteObjectAsync(ctx workflow.Context, input *clouddirectory.DeleteObjectInput) *DeleteObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteObject", input)
	return &DeleteObjectFuture{Future: future}
}

func (a *stub) DeleteSchema(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) (*clouddirectory.DeleteSchemaOutput, error) {
	var output clouddirectory.DeleteSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSchemaAsync(ctx workflow.Context, input *clouddirectory.DeleteSchemaInput) *DeleteSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteSchema", input)
	return &DeleteSchemaFuture{Future: future}
}

func (a *stub) DeleteTypedLinkFacet(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	var output clouddirectory.DeleteTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.DeleteTypedLinkFacetInput) *DeleteTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DeleteTypedLinkFacet", input)
	return &DeleteTypedLinkFacetFuture{Future: future}
}

func (a *stub) DetachFromIndex(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) (*clouddirectory.DetachFromIndexOutput, error) {
	var output clouddirectory.DetachFromIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachFromIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachFromIndexAsync(ctx workflow.Context, input *clouddirectory.DetachFromIndexInput) *DetachFromIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachFromIndex", input)
	return &DetachFromIndexFuture{Future: future}
}

func (a *stub) DetachObject(ctx workflow.Context, input *clouddirectory.DetachObjectInput) (*clouddirectory.DetachObjectOutput, error) {
	var output clouddirectory.DetachObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachObjectAsync(ctx workflow.Context, input *clouddirectory.DetachObjectInput) *DetachObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachObject", input)
	return &DetachObjectFuture{Future: future}
}

func (a *stub) DetachPolicy(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) (*clouddirectory.DetachPolicyOutput, error) {
	var output clouddirectory.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPolicyAsync(ctx workflow.Context, input *clouddirectory.DetachPolicyInput) *DetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachPolicy", input)
	return &DetachPolicyFuture{Future: future}
}

func (a *stub) DetachTypedLink(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) (*clouddirectory.DetachTypedLinkOutput, error) {
	var output clouddirectory.DetachTypedLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachTypedLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachTypedLinkAsync(ctx workflow.Context, input *clouddirectory.DetachTypedLinkInput) *DetachTypedLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DetachTypedLink", input)
	return &DetachTypedLinkFuture{Future: future}
}

func (a *stub) DisableDirectory(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) (*clouddirectory.DisableDirectoryOutput, error) {
	var output clouddirectory.DisableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DisableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableDirectoryAsync(ctx workflow.Context, input *clouddirectory.DisableDirectoryInput) *DisableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-DisableDirectory", input)
	return &DisableDirectoryFuture{Future: future}
}

func (a *stub) EnableDirectory(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) (*clouddirectory.EnableDirectoryOutput, error) {
	var output clouddirectory.EnableDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-EnableDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableDirectoryAsync(ctx workflow.Context, input *clouddirectory.EnableDirectoryInput) *EnableDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-EnableDirectory", input)
	return &EnableDirectoryFuture{Future: future}
}

func (a *stub) GetAppliedSchemaVersion(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	var output clouddirectory.GetAppliedSchemaVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetAppliedSchemaVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAppliedSchemaVersionAsync(ctx workflow.Context, input *clouddirectory.GetAppliedSchemaVersionInput) *GetAppliedSchemaVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetAppliedSchemaVersion", input)
	return &GetAppliedSchemaVersionFuture{Future: future}
}

func (a *stub) GetDirectory(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) (*clouddirectory.GetDirectoryOutput, error) {
	var output clouddirectory.GetDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDirectoryAsync(ctx workflow.Context, input *clouddirectory.GetDirectoryInput) *GetDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetDirectory", input)
	return &GetDirectoryFuture{Future: future}
}

func (a *stub) GetFacet(ctx workflow.Context, input *clouddirectory.GetFacetInput) (*clouddirectory.GetFacetOutput, error) {
	var output clouddirectory.GetFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFacetAsync(ctx workflow.Context, input *clouddirectory.GetFacetInput) *GetFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetFacet", input)
	return &GetFacetFuture{Future: future}
}

func (a *stub) GetLinkAttributes(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) (*clouddirectory.GetLinkAttributesOutput, error) {
	var output clouddirectory.GetLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.GetLinkAttributesInput) *GetLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetLinkAttributes", input)
	return &GetLinkAttributesFuture{Future: future}
}

func (a *stub) GetObjectAttributes(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) (*clouddirectory.GetObjectAttributesOutput, error) {
	var output clouddirectory.GetObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.GetObjectAttributesInput) *GetObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectAttributes", input)
	return &GetObjectAttributesFuture{Future: future}
}

func (a *stub) GetObjectInformation(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) (*clouddirectory.GetObjectInformationOutput, error) {
	var output clouddirectory.GetObjectInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetObjectInformationAsync(ctx workflow.Context, input *clouddirectory.GetObjectInformationInput) *GetObjectInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetObjectInformation", input)
	return &GetObjectInformationFuture{Future: future}
}

func (a *stub) GetSchemaAsJson(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	var output clouddirectory.GetSchemaAsJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetSchemaAsJson", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSchemaAsJsonAsync(ctx workflow.Context, input *clouddirectory.GetSchemaAsJsonInput) *GetSchemaAsJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetSchemaAsJson", input)
	return &GetSchemaAsJsonFuture{Future: future}
}

func (a *stub) GetTypedLinkFacetInformation(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	var output clouddirectory.GetTypedLinkFacetInformationOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetTypedLinkFacetInformation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTypedLinkFacetInformationAsync(ctx workflow.Context, input *clouddirectory.GetTypedLinkFacetInformationInput) *GetTypedLinkFacetInformationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-GetTypedLinkFacetInformation", input)
	return &GetTypedLinkFacetInformationFuture{Future: future}
}

func (a *stub) ListAppliedSchemaArns(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	var output clouddirectory.ListAppliedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAppliedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAppliedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListAppliedSchemaArnsInput) *ListAppliedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAppliedSchemaArns", input)
	return &ListAppliedSchemaArnsFuture{Future: future}
}

func (a *stub) ListAttachedIndices(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) (*clouddirectory.ListAttachedIndicesOutput, error) {
	var output clouddirectory.ListAttachedIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAttachedIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedIndicesAsync(ctx workflow.Context, input *clouddirectory.ListAttachedIndicesInput) *ListAttachedIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListAttachedIndices", input)
	return &ListAttachedIndicesFuture{Future: future}
}

func (a *stub) ListDevelopmentSchemaArns(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	var output clouddirectory.ListDevelopmentSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDevelopmentSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevelopmentSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListDevelopmentSchemaArnsInput) *ListDevelopmentSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDevelopmentSchemaArns", input)
	return &ListDevelopmentSchemaArnsFuture{Future: future}
}

func (a *stub) ListDirectories(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) (*clouddirectory.ListDirectoriesOutput, error) {
	var output clouddirectory.ListDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDirectoriesAsync(ctx workflow.Context, input *clouddirectory.ListDirectoriesInput) *ListDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListDirectories", input)
	return &ListDirectoriesFuture{Future: future}
}

func (a *stub) ListFacetAttributes(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) (*clouddirectory.ListFacetAttributesOutput, error) {
	var output clouddirectory.ListFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListFacetAttributesInput) *ListFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetAttributes", input)
	return &ListFacetAttributesFuture{Future: future}
}

func (a *stub) ListFacetNames(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) (*clouddirectory.ListFacetNamesOutput, error) {
	var output clouddirectory.ListFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListFacetNamesInput) *ListFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListFacetNames", input)
	return &ListFacetNamesFuture{Future: future}
}

func (a *stub) ListIncomingTypedLinks(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	var output clouddirectory.ListIncomingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIncomingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIncomingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListIncomingTypedLinksInput) *ListIncomingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIncomingTypedLinks", input)
	return &ListIncomingTypedLinksFuture{Future: future}
}

func (a *stub) ListIndex(ctx workflow.Context, input *clouddirectory.ListIndexInput) (*clouddirectory.ListIndexOutput, error) {
	var output clouddirectory.ListIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIndexAsync(ctx workflow.Context, input *clouddirectory.ListIndexInput) *ListIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListIndex", input)
	return &ListIndexFuture{Future: future}
}

func (a *stub) ListManagedSchemaArns(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	var output clouddirectory.ListManagedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListManagedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListManagedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListManagedSchemaArnsInput) *ListManagedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListManagedSchemaArns", input)
	return &ListManagedSchemaArnsFuture{Future: future}
}

func (a *stub) ListObjectAttributes(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) (*clouddirectory.ListObjectAttributesOutput, error) {
	var output clouddirectory.ListObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.ListObjectAttributesInput) *ListObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectAttributes", input)
	return &ListObjectAttributesFuture{Future: future}
}

func (a *stub) ListObjectChildren(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) (*clouddirectory.ListObjectChildrenOutput, error) {
	var output clouddirectory.ListObjectChildrenOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectChildren", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectChildrenAsync(ctx workflow.Context, input *clouddirectory.ListObjectChildrenInput) *ListObjectChildrenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectChildren", input)
	return &ListObjectChildrenFuture{Future: future}
}

func (a *stub) ListObjectParentPaths(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) (*clouddirectory.ListObjectParentPathsOutput, error) {
	var output clouddirectory.ListObjectParentPathsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParentPaths", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectParentPathsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentPathsInput) *ListObjectParentPathsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParentPaths", input)
	return &ListObjectParentPathsFuture{Future: future}
}

func (a *stub) ListObjectParents(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) (*clouddirectory.ListObjectParentsOutput, error) {
	var output clouddirectory.ListObjectParentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectParentsAsync(ctx workflow.Context, input *clouddirectory.ListObjectParentsInput) *ListObjectParentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectParents", input)
	return &ListObjectParentsFuture{Future: future}
}

func (a *stub) ListObjectPolicies(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) (*clouddirectory.ListObjectPoliciesOutput, error) {
	var output clouddirectory.ListObjectPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListObjectPoliciesAsync(ctx workflow.Context, input *clouddirectory.ListObjectPoliciesInput) *ListObjectPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListObjectPolicies", input)
	return &ListObjectPoliciesFuture{Future: future}
}

func (a *stub) ListOutgoingTypedLinks(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	var output clouddirectory.ListOutgoingTypedLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListOutgoingTypedLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOutgoingTypedLinksAsync(ctx workflow.Context, input *clouddirectory.ListOutgoingTypedLinksInput) *ListOutgoingTypedLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListOutgoingTypedLinks", input)
	return &ListOutgoingTypedLinksFuture{Future: future}
}

func (a *stub) ListPolicyAttachments(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	var output clouddirectory.ListPolicyAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPolicyAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPolicyAttachmentsAsync(ctx workflow.Context, input *clouddirectory.ListPolicyAttachmentsInput) *ListPolicyAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPolicyAttachments", input)
	return &ListPolicyAttachmentsFuture{Future: future}
}

func (a *stub) ListPublishedSchemaArns(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	var output clouddirectory.ListPublishedSchemaArnsOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPublishedSchemaArns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPublishedSchemaArnsAsync(ctx workflow.Context, input *clouddirectory.ListPublishedSchemaArnsInput) *ListPublishedSchemaArnsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListPublishedSchemaArns", input)
	return &ListPublishedSchemaArnsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) (*clouddirectory.ListTagsForResourceOutput, error) {
	var output clouddirectory.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *clouddirectory.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTypedLinkFacetAttributes(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypedLinkFacetAttributesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetAttributesInput) *ListTypedLinkFacetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetAttributes", input)
	return &ListTypedLinkFacetAttributesFuture{Future: future}
}

func (a *stub) ListTypedLinkFacetNames(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	var output clouddirectory.ListTypedLinkFacetNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTypedLinkFacetNamesAsync(ctx workflow.Context, input *clouddirectory.ListTypedLinkFacetNamesInput) *ListTypedLinkFacetNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-ListTypedLinkFacetNames", input)
	return &ListTypedLinkFacetNamesFuture{Future: future}
}

func (a *stub) LookupPolicy(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) (*clouddirectory.LookupPolicyOutput, error) {
	var output clouddirectory.LookupPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-LookupPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) LookupPolicyAsync(ctx workflow.Context, input *clouddirectory.LookupPolicyInput) *LookupPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-LookupPolicy", input)
	return &LookupPolicyFuture{Future: future}
}

func (a *stub) PublishSchema(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) (*clouddirectory.PublishSchemaOutput, error) {
	var output clouddirectory.PublishSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PublishSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PublishSchemaAsync(ctx workflow.Context, input *clouddirectory.PublishSchemaInput) *PublishSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PublishSchema", input)
	return &PublishSchemaFuture{Future: future}
}

func (a *stub) PutSchemaFromJson(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	var output clouddirectory.PutSchemaFromJsonOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PutSchemaFromJson", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSchemaFromJsonAsync(ctx workflow.Context, input *clouddirectory.PutSchemaFromJsonInput) *PutSchemaFromJsonFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-PutSchemaFromJson", input)
	return &PutSchemaFromJsonFuture{Future: future}
}

func (a *stub) RemoveFacetFromObject(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	var output clouddirectory.RemoveFacetFromObjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-RemoveFacetFromObject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveFacetFromObjectAsync(ctx workflow.Context, input *clouddirectory.RemoveFacetFromObjectInput) *RemoveFacetFromObjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-RemoveFacetFromObject", input)
	return &RemoveFacetFromObjectFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *clouddirectory.TagResourceInput) (*clouddirectory.TagResourceOutput, error) {
	var output clouddirectory.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *clouddirectory.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *clouddirectory.UntagResourceInput) (*clouddirectory.UntagResourceOutput, error) {
	var output clouddirectory.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *clouddirectory.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateFacet(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) (*clouddirectory.UpdateFacetOutput, error) {
	var output clouddirectory.UpdateFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateFacetInput) *UpdateFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateFacet", input)
	return &UpdateFacetFuture{Future: future}
}

func (a *stub) UpdateLinkAttributes(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	var output clouddirectory.UpdateLinkAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateLinkAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLinkAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateLinkAttributesInput) *UpdateLinkAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateLinkAttributes", input)
	return &UpdateLinkAttributesFuture{Future: future}
}

func (a *stub) UpdateObjectAttributes(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	var output clouddirectory.UpdateObjectAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateObjectAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateObjectAttributesAsync(ctx workflow.Context, input *clouddirectory.UpdateObjectAttributesInput) *UpdateObjectAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateObjectAttributes", input)
	return &UpdateObjectAttributesFuture{Future: future}
}

func (a *stub) UpdateSchema(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) (*clouddirectory.UpdateSchemaOutput, error) {
	var output clouddirectory.UpdateSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSchemaAsync(ctx workflow.Context, input *clouddirectory.UpdateSchemaInput) *UpdateSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateSchema", input)
	return &UpdateSchemaFuture{Future: future}
}

func (a *stub) UpdateTypedLinkFacet(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	var output clouddirectory.UpdateTypedLinkFacetOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateTypedLinkFacet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTypedLinkFacetAsync(ctx workflow.Context, input *clouddirectory.UpdateTypedLinkFacetInput) *UpdateTypedLinkFacetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpdateTypedLinkFacet", input)
	return &UpdateTypedLinkFacetFuture{Future: future}
}

func (a *stub) UpgradeAppliedSchema(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	var output clouddirectory.UpgradeAppliedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradeAppliedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradeAppliedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradeAppliedSchemaInput) *UpgradeAppliedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradeAppliedSchema", input)
	return &UpgradeAppliedSchemaFuture{Future: future}
}

func (a *stub) UpgradePublishedSchema(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	var output clouddirectory.UpgradePublishedSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradePublishedSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpgradePublishedSchemaAsync(ctx workflow.Context, input *clouddirectory.UpgradePublishedSchemaInput) *UpgradePublishedSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-clouddirectory-UpgradePublishedSchema", input)
	return &UpgradePublishedSchemaFuture{Future: future}
}
