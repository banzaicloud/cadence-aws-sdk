// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package codedeploystub

import (
	"github.com/aws/aws-sdk-go/service/codedeploy"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeDeployAddTagsToOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployAddTagsToOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetApplicationRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetDeploymentGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetDeploymentInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetDeploymentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployBatchGetOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployBatchGetOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployContinueDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployContinueDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployCreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployCreateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployCreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployCreateDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployCreateDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployCreateDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployCreateDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployCreateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeleteApplicationFuture) Get(ctx workflow.Context) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeleteDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeleteDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeleteDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeleteDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeleteGitHubAccountTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeleteGitHubAccountTokenFuture) Get(ctx workflow.Context) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeleteResourcesByExternalIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeleteResourcesByExternalIdFuture) Get(ctx workflow.Context) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployDeregisterOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployDeregisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetApplicationFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetApplicationRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetDeploymentInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetDeploymentInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetDeploymentTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetDeploymentTargetFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployGetOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployGetOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListApplicationRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListDeploymentConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListDeploymentConfigsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListDeploymentGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListDeploymentInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListDeploymentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListGitHubAccountTokenNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListGitHubAccountTokenNamesFuture) Get(ctx workflow.Context) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployListTagsForResourceFuture) Get(ctx workflow.Context) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployPutLifecycleEventHookExecutionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployPutLifecycleEventHookExecutionStatusFuture) Get(ctx workflow.Context) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployRegisterApplicationRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployRegisterApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployRegisterOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployRegisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployRemoveTagsFromOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployRemoveTagsFromOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeploySkipWaitTimeForInstanceTerminationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeploySkipWaitTimeForInstanceTerminationFuture) Get(ctx workflow.Context) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployStopDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployStopDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployTagResourceFuture) Get(ctx workflow.Context) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployUntagResourceFuture) Get(ctx workflow.Context) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployUpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployUpdateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeDeployUpdateDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeDeployUpdateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToOnPremisesInstances(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-AddTagsToOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) *CodeDeployAddTagsToOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-AddTagsToOnPremisesInstances", input)
	return &CodeDeployAddTagsToOnPremisesInstancesFuture{Future: future}
}

func (a *stub) BatchGetApplicationRevisions(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) *CodeDeployBatchGetApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplicationRevisions", input)
	return &CodeDeployBatchGetApplicationRevisionsFuture{Future: future}
}

func (a *stub) BatchGetApplications(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetApplicationsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) *CodeDeployBatchGetApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplications", input)
	return &CodeDeployBatchGetApplicationsFuture{Future: future}
}

func (a *stub) BatchGetDeploymentGroups(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) *CodeDeployBatchGetDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentGroups", input)
	return &CodeDeployBatchGetDeploymentGroupsFuture{Future: future}
}

func (a *stub) BatchGetDeploymentInstances(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) *CodeDeployBatchGetDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentInstances", input)
	return &CodeDeployBatchGetDeploymentInstancesFuture{Future: future}
}

func (a *stub) BatchGetDeploymentTargets(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) *CodeDeployBatchGetDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentTargets", input)
	return &CodeDeployBatchGetDeploymentTargetsFuture{Future: future}
}

func (a *stub) BatchGetDeployments(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) *CodeDeployBatchGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeployments", input)
	return &CodeDeployBatchGetDeploymentsFuture{Future: future}
}

func (a *stub) BatchGetOnPremisesInstances(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) *CodeDeployBatchGetOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetOnPremisesInstances", input)
	return &CodeDeployBatchGetOnPremisesInstancesFuture{Future: future}
}

func (a *stub) ContinueDeployment(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ContinueDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ContinueDeploymentAsync(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) *CodeDeployContinueDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ContinueDeployment", input)
	return &CodeDeployContinueDeploymentFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *codedeploy.CreateApplicationInput) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *codedeploy.CreateApplicationInput) *CodeDeployCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateApplication", input)
	return &CodeDeployCreateApplicationFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) *CodeDeployCreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeployment", input)
	return &CodeDeployCreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDeploymentConfig(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) *CodeDeployCreateDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentConfig", input)
	return &CodeDeployCreateDeploymentConfigFuture{Future: future}
}

func (a *stub) CreateDeploymentGroup(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) *CodeDeployCreateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentGroup", input)
	return &CodeDeployCreateDeploymentGroupFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) *CodeDeployDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteApplication", input)
	return &CodeDeployDeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteDeploymentConfig(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) *CodeDeployDeleteDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentConfig", input)
	return &CodeDeployDeleteDeploymentConfigFuture{Future: future}
}

func (a *stub) DeleteDeploymentGroup(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) *CodeDeployDeleteDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentGroup", input)
	return &CodeDeployDeleteDeploymentGroupFuture{Future: future}
}

func (a *stub) DeleteGitHubAccountToken(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteGitHubAccountToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGitHubAccountTokenAsync(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) *CodeDeployDeleteGitHubAccountTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteGitHubAccountToken", input)
	return &CodeDeployDeleteGitHubAccountTokenFuture{Future: future}
}

func (a *stub) DeleteResourcesByExternalId(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteResourcesByExternalId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcesByExternalIdAsync(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) *CodeDeployDeleteResourcesByExternalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteResourcesByExternalId", input)
	return &CodeDeployDeleteResourcesByExternalIdFuture{Future: future}
}

func (a *stub) DeregisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeregisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) *CodeDeployDeregisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeregisterOnPremisesInstance", input)
	return &CodeDeployDeregisterOnPremisesInstanceFuture{Future: future}
}

func (a *stub) GetApplication(ctx workflow.Context, input *codedeploy.GetApplicationInput) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationAsync(ctx workflow.Context, input *codedeploy.GetApplicationInput) *CodeDeployGetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplication", input)
	return &CodeDeployGetApplicationFuture{Future: future}
}

func (a *stub) GetApplicationRevision(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) *CodeDeployGetApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplicationRevision", input)
	return &CodeDeployGetApplicationRevisionFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *codedeploy.GetDeploymentInput) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *CodeDeployGetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeployment", input)
	return &CodeDeployGetDeploymentFuture{Future: future}
}

func (a *stub) GetDeploymentConfig(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) *CodeDeployGetDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentConfig", input)
	return &CodeDeployGetDeploymentConfigFuture{Future: future}
}

func (a *stub) GetDeploymentGroup(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) *CodeDeployGetDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentGroup", input)
	return &CodeDeployGetDeploymentGroupFuture{Future: future}
}

func (a *stub) GetDeploymentInstance(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentInstanceAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) *CodeDeployGetDeploymentInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentInstance", input)
	return &CodeDeployGetDeploymentInstanceFuture{Future: future}
}

func (a *stub) GetDeploymentTarget(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentTargetAsync(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) *CodeDeployGetDeploymentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentTarget", input)
	return &CodeDeployGetDeploymentTargetFuture{Future: future}
}

func (a *stub) GetOnPremisesInstance(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) *CodeDeployGetOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetOnPremisesInstance", input)
	return &CodeDeployGetOnPremisesInstanceFuture{Future: future}
}

func (a *stub) ListApplicationRevisions(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) *CodeDeployListApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplicationRevisions", input)
	return &CodeDeployListApplicationRevisionsFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *codedeploy.ListApplicationsInput) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *codedeploy.ListApplicationsInput) *CodeDeployListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplications", input)
	return &CodeDeployListApplicationsFuture{Future: future}
}

func (a *stub) ListDeploymentConfigs(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentConfigsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) *CodeDeployListDeploymentConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentConfigs", input)
	return &CodeDeployListDeploymentConfigsFuture{Future: future}
}

func (a *stub) ListDeploymentGroups(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) *CodeDeployListDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentGroups", input)
	return &CodeDeployListDeploymentGroupsFuture{Future: future}
}

func (a *stub) ListDeploymentInstances(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) *CodeDeployListDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentInstances", input)
	return &CodeDeployListDeploymentInstancesFuture{Future: future}
}

func (a *stub) ListDeploymentTargets(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) *CodeDeployListDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentTargets", input)
	return &CodeDeployListDeploymentTargetsFuture{Future: future}
}

func (a *stub) ListDeployments(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) *CodeDeployListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeployments", input)
	return &CodeDeployListDeploymentsFuture{Future: future}
}

func (a *stub) ListGitHubAccountTokenNames(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListGitHubAccountTokenNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGitHubAccountTokenNamesAsync(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) *CodeDeployListGitHubAccountTokenNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListGitHubAccountTokenNames", input)
	return &CodeDeployListGitHubAccountTokenNamesFuture{Future: future}
}

func (a *stub) ListOnPremisesInstances(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) *CodeDeployListOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListOnPremisesInstances", input)
	return &CodeDeployListOnPremisesInstancesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) *CodeDeployListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListTagsForResource", input)
	return &CodeDeployListTagsForResourceFuture{Future: future}
}

func (a *stub) PutLifecycleEventHookExecutionStatus(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-PutLifecycleEventHookExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecycleEventHookExecutionStatusAsync(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) *CodeDeployPutLifecycleEventHookExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-PutLifecycleEventHookExecutionStatus", input)
	return &CodeDeployPutLifecycleEventHookExecutionStatusFuture{Future: future}
}

func (a *stub) RegisterApplicationRevision(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) *CodeDeployRegisterApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterApplicationRevision", input)
	return &CodeDeployRegisterApplicationRevisionFuture{Future: future}
}

func (a *stub) RegisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) *CodeDeployRegisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterOnPremisesInstance", input)
	return &CodeDeployRegisterOnPremisesInstanceFuture{Future: future}
}

func (a *stub) RemoveTagsFromOnPremisesInstances(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RemoveTagsFromOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) *CodeDeployRemoveTagsFromOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RemoveTagsFromOnPremisesInstances", input)
	return &CodeDeployRemoveTagsFromOnPremisesInstancesFuture{Future: future}
}

func (a *stub) SkipWaitTimeForInstanceTermination(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-SkipWaitTimeForInstanceTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SkipWaitTimeForInstanceTerminationAsync(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) *CodeDeploySkipWaitTimeForInstanceTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-SkipWaitTimeForInstanceTermination", input)
	return &CodeDeploySkipWaitTimeForInstanceTerminationFuture{Future: future}
}

func (a *stub) StopDeployment(ctx workflow.Context, input *codedeploy.StopDeploymentInput) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-StopDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDeploymentAsync(ctx workflow.Context, input *codedeploy.StopDeploymentInput) *CodeDeployStopDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-StopDeployment", input)
	return &CodeDeployStopDeploymentFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codedeploy.TagResourceInput) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codedeploy.TagResourceInput) *CodeDeployTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-TagResource", input)
	return &CodeDeployTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codedeploy.UntagResourceInput) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codedeploy.UntagResourceInput) *CodeDeployUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UntagResource", input)
	return &CodeDeployUntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) *CodeDeployUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateApplication", input)
	return &CodeDeployUpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateDeploymentGroup(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) *CodeDeployUpdateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateDeploymentGroup", input)
	return &CodeDeployUpdateDeploymentGroupFuture{Future: future}
}

func (a *stub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *codedeploy.GetDeploymentInput) error {
	return workflow.ExecuteActivity(ctx, "aws-codedeploy-WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-WaitUntilDeploymentSuccessful", input)
	return clients.NewVoidFuture(future)
}
