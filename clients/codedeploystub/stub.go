// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codedeploystub

import (
	"github.com/aws/aws-sdk-go/service/codedeploy"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddTagsToOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetApplicationRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetDeploymentGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetDeploymentInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetDeploymentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ContinueDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ContinueDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGitHubAccountTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGitHubAccountTokenFuture) Get(ctx workflow.Context) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcesByExternalIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcesByExternalIdFuture) Get(ctx workflow.Context) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentConfigFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeploymentTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeploymentTargetFuture) Get(ctx workflow.Context) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationRevisionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationRevisionsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentConfigsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentConfigsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentGroupsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentTargetsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeploymentsFuture) Get(ctx workflow.Context) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGitHubAccountTokenNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGitHubAccountTokenNamesFuture) Get(ctx workflow.Context) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLifecycleEventHookExecutionStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLifecycleEventHookExecutionStatusFuture) Get(ctx workflow.Context) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterApplicationRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterApplicationRevisionFuture) Get(ctx workflow.Context) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterOnPremisesInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterOnPremisesInstanceFuture) Get(ctx workflow.Context) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromOnPremisesInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromOnPremisesInstancesFuture) Get(ctx workflow.Context) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SkipWaitTimeForInstanceTerminationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SkipWaitTimeForInstanceTerminationFuture) Get(ctx workflow.Context) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDeploymentFuture) Get(ctx workflow.Context) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeploymentGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeploymentGroupFuture) Get(ctx workflow.Context) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToOnPremisesInstances(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	var output codedeploy.AddTagsToOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-AddTagsToOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.AddTagsToOnPremisesInstancesInput) *AddTagsToOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-AddTagsToOnPremisesInstances", input)
	return &AddTagsToOnPremisesInstancesFuture{Future: future}
}

func (a *stub) BatchGetApplicationRevisions(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	var output codedeploy.BatchGetApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationRevisionsInput) *BatchGetApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplicationRevisions", input)
	return &BatchGetApplicationRevisionsFuture{Future: future}
}

func (a *stub) BatchGetApplications(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) (*codedeploy.BatchGetApplicationsOutput, error) {
	var output codedeploy.BatchGetApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetApplicationsAsync(ctx workflow.Context, input *codedeploy.BatchGetApplicationsInput) *BatchGetApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetApplications", input)
	return &BatchGetApplicationsFuture{Future: future}
}

func (a *stub) BatchGetDeploymentGroups(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	var output codedeploy.BatchGetDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentGroupsInput) *BatchGetDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentGroups", input)
	return &BatchGetDeploymentGroupsFuture{Future: future}
}

func (a *stub) BatchGetDeploymentInstances(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	var output codedeploy.BatchGetDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentInstancesInput) *BatchGetDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentInstances", input)
	return &BatchGetDeploymentInstancesFuture{Future: future}
}

func (a *stub) BatchGetDeploymentTargets(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	var output codedeploy.BatchGetDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentTargetsInput) *BatchGetDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeploymentTargets", input)
	return &BatchGetDeploymentTargetsFuture{Future: future}
}

func (a *stub) BatchGetDeployments(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) (*codedeploy.BatchGetDeploymentsOutput, error) {
	var output codedeploy.BatchGetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetDeploymentsAsync(ctx workflow.Context, input *codedeploy.BatchGetDeploymentsInput) *BatchGetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetDeployments", input)
	return &BatchGetDeploymentsFuture{Future: future}
}

func (a *stub) BatchGetOnPremisesInstances(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	var output codedeploy.BatchGetOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.BatchGetOnPremisesInstancesInput) *BatchGetOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-BatchGetOnPremisesInstances", input)
	return &BatchGetOnPremisesInstancesFuture{Future: future}
}

func (a *stub) ContinueDeployment(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) (*codedeploy.ContinueDeploymentOutput, error) {
	var output codedeploy.ContinueDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ContinueDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ContinueDeploymentAsync(ctx workflow.Context, input *codedeploy.ContinueDeploymentInput) *ContinueDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ContinueDeployment", input)
	return &ContinueDeploymentFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *codedeploy.CreateApplicationInput) (*codedeploy.CreateApplicationOutput, error) {
	var output codedeploy.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *codedeploy.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) (*codedeploy.CreateDeploymentOutput, error) {
	var output codedeploy.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentInput) *CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeployment", input)
	return &CreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDeploymentConfig(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) (*codedeploy.CreateDeploymentConfigOutput, error) {
	var output codedeploy.CreateDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentConfigInput) *CreateDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentConfig", input)
	return &CreateDeploymentConfigFuture{Future: future}
}

func (a *stub) CreateDeploymentGroup(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) (*codedeploy.CreateDeploymentGroupOutput, error) {
	var output codedeploy.CreateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.CreateDeploymentGroupInput) *CreateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-CreateDeploymentGroup", input)
	return &CreateDeploymentGroupFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) (*codedeploy.DeleteApplicationOutput, error) {
	var output codedeploy.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *codedeploy.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteDeploymentConfig(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	var output codedeploy.DeleteDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentConfigInput) *DeleteDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentConfig", input)
	return &DeleteDeploymentConfigFuture{Future: future}
}

func (a *stub) DeleteDeploymentGroup(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	var output codedeploy.DeleteDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.DeleteDeploymentGroupInput) *DeleteDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteDeploymentGroup", input)
	return &DeleteDeploymentGroupFuture{Future: future}
}

func (a *stub) DeleteGitHubAccountToken(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	var output codedeploy.DeleteGitHubAccountTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteGitHubAccountToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGitHubAccountTokenAsync(ctx workflow.Context, input *codedeploy.DeleteGitHubAccountTokenInput) *DeleteGitHubAccountTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteGitHubAccountToken", input)
	return &DeleteGitHubAccountTokenFuture{Future: future}
}

func (a *stub) DeleteResourcesByExternalId(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	var output codedeploy.DeleteResourcesByExternalIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteResourcesByExternalId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcesByExternalIdAsync(ctx workflow.Context, input *codedeploy.DeleteResourcesByExternalIdInput) *DeleteResourcesByExternalIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeleteResourcesByExternalId", input)
	return &DeleteResourcesByExternalIdFuture{Future: future}
}

func (a *stub) DeregisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	var output codedeploy.DeregisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeregisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.DeregisterOnPremisesInstanceInput) *DeregisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-DeregisterOnPremisesInstance", input)
	return &DeregisterOnPremisesInstanceFuture{Future: future}
}

func (a *stub) GetApplication(ctx workflow.Context, input *codedeploy.GetApplicationInput) (*codedeploy.GetApplicationOutput, error) {
	var output codedeploy.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationAsync(ctx workflow.Context, input *codedeploy.GetApplicationInput) *GetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplication", input)
	return &GetApplicationFuture{Future: future}
}

func (a *stub) GetApplicationRevision(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) (*codedeploy.GetApplicationRevisionOutput, error) {
	var output codedeploy.GetApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.GetApplicationRevisionInput) *GetApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetApplicationRevision", input)
	return &GetApplicationRevisionFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *codedeploy.GetDeploymentInput) (*codedeploy.GetDeploymentOutput, error) {
	var output codedeploy.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *GetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeployment", input)
	return &GetDeploymentFuture{Future: future}
}

func (a *stub) GetDeploymentConfig(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) (*codedeploy.GetDeploymentConfigOutput, error) {
	var output codedeploy.GetDeploymentConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentConfigAsync(ctx workflow.Context, input *codedeploy.GetDeploymentConfigInput) *GetDeploymentConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentConfig", input)
	return &GetDeploymentConfigFuture{Future: future}
}

func (a *stub) GetDeploymentGroup(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) (*codedeploy.GetDeploymentGroupOutput, error) {
	var output codedeploy.GetDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.GetDeploymentGroupInput) *GetDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentGroup", input)
	return &GetDeploymentGroupFuture{Future: future}
}

func (a *stub) GetDeploymentInstance(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) (*codedeploy.GetDeploymentInstanceOutput, error) {
	var output codedeploy.GetDeploymentInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentInstanceAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInstanceInput) *GetDeploymentInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentInstance", input)
	return &GetDeploymentInstanceFuture{Future: future}
}

func (a *stub) GetDeploymentTarget(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) (*codedeploy.GetDeploymentTargetOutput, error) {
	var output codedeploy.GetDeploymentTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentTargetAsync(ctx workflow.Context, input *codedeploy.GetDeploymentTargetInput) *GetDeploymentTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetDeploymentTarget", input)
	return &GetDeploymentTargetFuture{Future: future}
}

func (a *stub) GetOnPremisesInstance(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	var output codedeploy.GetOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.GetOnPremisesInstanceInput) *GetOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-GetOnPremisesInstance", input)
	return &GetOnPremisesInstanceFuture{Future: future}
}

func (a *stub) ListApplicationRevisions(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) (*codedeploy.ListApplicationRevisionsOutput, error) {
	var output codedeploy.ListApplicationRevisionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplicationRevisions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationRevisionsAsync(ctx workflow.Context, input *codedeploy.ListApplicationRevisionsInput) *ListApplicationRevisionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplicationRevisions", input)
	return &ListApplicationRevisionsFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *codedeploy.ListApplicationsInput) (*codedeploy.ListApplicationsOutput, error) {
	var output codedeploy.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *codedeploy.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) ListDeploymentConfigs(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) (*codedeploy.ListDeploymentConfigsOutput, error) {
	var output codedeploy.ListDeploymentConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentConfigsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentConfigsInput) *ListDeploymentConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentConfigs", input)
	return &ListDeploymentConfigsFuture{Future: future}
}

func (a *stub) ListDeploymentGroups(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) (*codedeploy.ListDeploymentGroupsOutput, error) {
	var output codedeploy.ListDeploymentGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentGroupsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentGroupsInput) *ListDeploymentGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentGroups", input)
	return &ListDeploymentGroupsFuture{Future: future}
}

func (a *stub) ListDeploymentInstances(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) (*codedeploy.ListDeploymentInstancesOutput, error) {
	var output codedeploy.ListDeploymentInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentInstancesAsync(ctx workflow.Context, input *codedeploy.ListDeploymentInstancesInput) *ListDeploymentInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentInstances", input)
	return &ListDeploymentInstancesFuture{Future: future}
}

func (a *stub) ListDeploymentTargets(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) (*codedeploy.ListDeploymentTargetsOutput, error) {
	var output codedeploy.ListDeploymentTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentTargetsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentTargetsInput) *ListDeploymentTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeploymentTargets", input)
	return &ListDeploymentTargetsFuture{Future: future}
}

func (a *stub) ListDeployments(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) (*codedeploy.ListDeploymentsOutput, error) {
	var output codedeploy.ListDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeploymentsAsync(ctx workflow.Context, input *codedeploy.ListDeploymentsInput) *ListDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListDeployments", input)
	return &ListDeploymentsFuture{Future: future}
}

func (a *stub) ListGitHubAccountTokenNames(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	var output codedeploy.ListGitHubAccountTokenNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListGitHubAccountTokenNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGitHubAccountTokenNamesAsync(ctx workflow.Context, input *codedeploy.ListGitHubAccountTokenNamesInput) *ListGitHubAccountTokenNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListGitHubAccountTokenNames", input)
	return &ListGitHubAccountTokenNamesFuture{Future: future}
}

func (a *stub) ListOnPremisesInstances(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	var output codedeploy.ListOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.ListOnPremisesInstancesInput) *ListOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListOnPremisesInstances", input)
	return &ListOnPremisesInstancesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) (*codedeploy.ListTagsForResourceOutput, error) {
	var output codedeploy.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codedeploy.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutLifecycleEventHookExecutionStatus(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	var output codedeploy.PutLifecycleEventHookExecutionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-PutLifecycleEventHookExecutionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecycleEventHookExecutionStatusAsync(ctx workflow.Context, input *codedeploy.PutLifecycleEventHookExecutionStatusInput) *PutLifecycleEventHookExecutionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-PutLifecycleEventHookExecutionStatus", input)
	return &PutLifecycleEventHookExecutionStatusFuture{Future: future}
}

func (a *stub) RegisterApplicationRevision(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	var output codedeploy.RegisterApplicationRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterApplicationRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterApplicationRevisionAsync(ctx workflow.Context, input *codedeploy.RegisterApplicationRevisionInput) *RegisterApplicationRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterApplicationRevision", input)
	return &RegisterApplicationRevisionFuture{Future: future}
}

func (a *stub) RegisterOnPremisesInstance(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	var output codedeploy.RegisterOnPremisesInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterOnPremisesInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterOnPremisesInstanceAsync(ctx workflow.Context, input *codedeploy.RegisterOnPremisesInstanceInput) *RegisterOnPremisesInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RegisterOnPremisesInstance", input)
	return &RegisterOnPremisesInstanceFuture{Future: future}
}

func (a *stub) RemoveTagsFromOnPremisesInstances(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	var output codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-RemoveTagsFromOnPremisesInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromOnPremisesInstancesAsync(ctx workflow.Context, input *codedeploy.RemoveTagsFromOnPremisesInstancesInput) *RemoveTagsFromOnPremisesInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-RemoveTagsFromOnPremisesInstances", input)
	return &RemoveTagsFromOnPremisesInstancesFuture{Future: future}
}

func (a *stub) SkipWaitTimeForInstanceTermination(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	var output codedeploy.SkipWaitTimeForInstanceTerminationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-SkipWaitTimeForInstanceTermination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SkipWaitTimeForInstanceTerminationAsync(ctx workflow.Context, input *codedeploy.SkipWaitTimeForInstanceTerminationInput) *SkipWaitTimeForInstanceTerminationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-SkipWaitTimeForInstanceTermination", input)
	return &SkipWaitTimeForInstanceTerminationFuture{Future: future}
}

func (a *stub) StopDeployment(ctx workflow.Context, input *codedeploy.StopDeploymentInput) (*codedeploy.StopDeploymentOutput, error) {
	var output codedeploy.StopDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-StopDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDeploymentAsync(ctx workflow.Context, input *codedeploy.StopDeploymentInput) *StopDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-StopDeployment", input)
	return &StopDeploymentFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codedeploy.TagResourceInput) (*codedeploy.TagResourceOutput, error) {
	var output codedeploy.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codedeploy.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codedeploy.UntagResourceInput) (*codedeploy.UntagResourceOutput, error) {
	var output codedeploy.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codedeploy.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) (*codedeploy.UpdateApplicationOutput, error) {
	var output codedeploy.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *codedeploy.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateDeploymentGroup(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	var output codedeploy.UpdateDeploymentGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateDeploymentGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentGroupAsync(ctx workflow.Context, input *codedeploy.UpdateDeploymentGroupInput) *UpdateDeploymentGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-UpdateDeploymentGroup", input)
	return &UpdateDeploymentGroupFuture{Future: future}
}

func (a *stub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *codedeploy.GetDeploymentInput) error {
	return workflow.ExecuteActivity(ctx, "aws-codedeploy-WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *codedeploy.GetDeploymentInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codedeploy-WaitUntilDeploymentSuccessful", input)
	return clients.NewVoidFuture(future)
}
