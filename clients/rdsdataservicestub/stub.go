// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package rdsdataservicestub

import (
	"github.com/aws/aws-sdk-go/service/rdsdataservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchExecuteStatementFuture) Get(ctx workflow.Context) (*rdsdataservice.BatchExecuteStatementOutput, error) {
	var output rdsdataservice.BatchExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BeginTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BeginTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.BeginTransactionOutput, error) {
	var output rdsdataservice.BeginTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CommitTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CommitTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.CommitTransactionOutput, error) {
	var output rdsdataservice.CommitTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteSqlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteSqlFuture) Get(ctx workflow.Context) (*rdsdataservice.ExecuteSqlOutput, error) {
	var output rdsdataservice.ExecuteSqlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteStatementFuture) Get(ctx workflow.Context) (*rdsdataservice.ExecuteStatementOutput, error) {
	var output rdsdataservice.ExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RollbackTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RollbackTransactionFuture) Get(ctx workflow.Context) (*rdsdataservice.RollbackTransactionOutput, error) {
	var output rdsdataservice.RollbackTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchExecuteStatement(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) (*rdsdataservice.BatchExecuteStatementOutput, error) {
	var output rdsdataservice.BatchExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-BatchExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.BatchExecuteStatementInput) *BatchExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-BatchExecuteStatement", input)
	return &BatchExecuteStatementFuture{Future: future}
}

func (a *stub) BeginTransaction(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) (*rdsdataservice.BeginTransactionOutput, error) {
	var output rdsdataservice.BeginTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-BeginTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BeginTransactionAsync(ctx workflow.Context, input *rdsdataservice.BeginTransactionInput) *BeginTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-BeginTransaction", input)
	return &BeginTransactionFuture{Future: future}
}

func (a *stub) CommitTransaction(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) (*rdsdataservice.CommitTransactionOutput, error) {
	var output rdsdataservice.CommitTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-CommitTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CommitTransactionAsync(ctx workflow.Context, input *rdsdataservice.CommitTransactionInput) *CommitTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-CommitTransaction", input)
	return &CommitTransactionFuture{Future: future}
}

func (a *stub) ExecuteSql(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) (*rdsdataservice.ExecuteSqlOutput, error) {
	var output rdsdataservice.ExecuteSqlOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-ExecuteSql", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteSqlAsync(ctx workflow.Context, input *rdsdataservice.ExecuteSqlInput) *ExecuteSqlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-ExecuteSql", input)
	return &ExecuteSqlFuture{Future: future}
}

func (a *stub) ExecuteStatement(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) (*rdsdataservice.ExecuteStatementOutput, error) {
	var output rdsdataservice.ExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-ExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteStatementAsync(ctx workflow.Context, input *rdsdataservice.ExecuteStatementInput) *ExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-ExecuteStatement", input)
	return &ExecuteStatementFuture{Future: future}
}

func (a *stub) RollbackTransaction(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) (*rdsdataservice.RollbackTransactionOutput, error) {
	var output rdsdataservice.RollbackTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-RollbackTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RollbackTransactionAsync(ctx workflow.Context, input *rdsdataservice.RollbackTransactionInput) *RollbackTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rdsdataservice-RollbackTransaction", input)
	return &RollbackTransactionFuture{Future: future}
}
