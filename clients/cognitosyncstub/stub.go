// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package cognitosyncstub

import (
	"github.com/aws/aws-sdk-go/service/cognitosync"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BulkPublishFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BulkPublishFuture) Get(ctx workflow.Context) (*cognitosync.BulkPublishOutput, error) {
	var output cognitosync.BulkPublishOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetFuture) Get(ctx workflow.Context) (*cognitosync.DeleteDatasetOutput, error) {
	var output cognitosync.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetFuture) Get(ctx workflow.Context) (*cognitosync.DescribeDatasetOutput, error) {
	var output cognitosync.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdentityPoolUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdentityPoolUsageFuture) Get(ctx workflow.Context) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {
	var output cognitosync.DescribeIdentityPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdentityUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdentityUsageFuture) Get(ctx workflow.Context) (*cognitosync.DescribeIdentityUsageOutput, error) {
	var output cognitosync.DescribeIdentityUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBulkPublishDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBulkPublishDetailsFuture) Get(ctx workflow.Context) (*cognitosync.GetBulkPublishDetailsOutput, error) {
	var output cognitosync.GetBulkPublishDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCognitoEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCognitoEventsFuture) Get(ctx workflow.Context) (*cognitosync.GetCognitoEventsOutput, error) {
	var output cognitosync.GetCognitoEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIdentityPoolConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIdentityPoolConfigurationFuture) Get(ctx workflow.Context) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.GetIdentityPoolConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetsFuture) Get(ctx workflow.Context) (*cognitosync.ListDatasetsOutput, error) {
	var output cognitosync.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIdentityPoolUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIdentityPoolUsageFuture) Get(ctx workflow.Context) (*cognitosync.ListIdentityPoolUsageOutput, error) {
	var output cognitosync.ListIdentityPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRecordsFuture) Get(ctx workflow.Context) (*cognitosync.ListRecordsOutput, error) {
	var output cognitosync.ListRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterDeviceFuture) Get(ctx workflow.Context) (*cognitosync.RegisterDeviceOutput, error) {
	var output cognitosync.RegisterDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetCognitoEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetCognitoEventsFuture) Get(ctx workflow.Context) (*cognitosync.SetCognitoEventsOutput, error) {
	var output cognitosync.SetCognitoEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetIdentityPoolConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetIdentityPoolConfigurationFuture) Get(ctx workflow.Context) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.SetIdentityPoolConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubscribeToDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubscribeToDatasetFuture) Get(ctx workflow.Context) (*cognitosync.SubscribeToDatasetOutput, error) {
	var output cognitosync.SubscribeToDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnsubscribeFromDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnsubscribeFromDatasetFuture) Get(ctx workflow.Context) (*cognitosync.UnsubscribeFromDatasetOutput, error) {
	var output cognitosync.UnsubscribeFromDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRecordsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRecordsFuture) Get(ctx workflow.Context) (*cognitosync.UpdateRecordsOutput, error) {
	var output cognitosync.UpdateRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BulkPublish(ctx workflow.Context, input *cognitosync.BulkPublishInput) (*cognitosync.BulkPublishOutput, error) {
	var output cognitosync.BulkPublishOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-BulkPublish", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BulkPublishAsync(ctx workflow.Context, input *cognitosync.BulkPublishInput) *BulkPublishFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-BulkPublish", input)
	return &BulkPublishFuture{Future: future}
}

func (a *stub) DeleteDataset(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) (*cognitosync.DeleteDatasetOutput, error) {
	var output cognitosync.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetAsync(ctx workflow.Context, input *cognitosync.DeleteDatasetInput) *DeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-DeleteDataset", input)
	return &DeleteDatasetFuture{Future: future}
}

func (a *stub) DescribeDataset(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) (*cognitosync.DescribeDatasetOutput, error) {
	var output cognitosync.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetAsync(ctx workflow.Context, input *cognitosync.DescribeDatasetInput) *DescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeDataset", input)
	return &DescribeDatasetFuture{Future: future}
}

func (a *stub) DescribeIdentityPoolUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {
	var output cognitosync.DescribeIdentityPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeIdentityPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityPoolUsageInput) *DescribeIdentityPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeIdentityPoolUsage", input)
	return &DescribeIdentityPoolUsageFuture{Future: future}
}

func (a *stub) DescribeIdentityUsage(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) (*cognitosync.DescribeIdentityUsageOutput, error) {
	var output cognitosync.DescribeIdentityUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeIdentityUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityUsageAsync(ctx workflow.Context, input *cognitosync.DescribeIdentityUsageInput) *DescribeIdentityUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-DescribeIdentityUsage", input)
	return &DescribeIdentityUsageFuture{Future: future}
}

func (a *stub) GetBulkPublishDetails(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) (*cognitosync.GetBulkPublishDetailsOutput, error) {
	var output cognitosync.GetBulkPublishDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetBulkPublishDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBulkPublishDetailsAsync(ctx workflow.Context, input *cognitosync.GetBulkPublishDetailsInput) *GetBulkPublishDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetBulkPublishDetails", input)
	return &GetBulkPublishDetailsFuture{Future: future}
}

func (a *stub) GetCognitoEvents(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) (*cognitosync.GetCognitoEventsOutput, error) {
	var output cognitosync.GetCognitoEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetCognitoEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.GetCognitoEventsInput) *GetCognitoEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetCognitoEvents", input)
	return &GetCognitoEventsFuture{Future: future}
}

func (a *stub) GetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.GetIdentityPoolConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetIdentityPoolConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.GetIdentityPoolConfigurationInput) *GetIdentityPoolConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-GetIdentityPoolConfiguration", input)
	return &GetIdentityPoolConfigurationFuture{Future: future}
}

func (a *stub) ListDatasets(ctx workflow.Context, input *cognitosync.ListDatasetsInput) (*cognitosync.ListDatasetsOutput, error) {
	var output cognitosync.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetsAsync(ctx workflow.Context, input *cognitosync.ListDatasetsInput) *ListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListDatasets", input)
	return &ListDatasetsFuture{Future: future}
}

func (a *stub) ListIdentityPoolUsage(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) (*cognitosync.ListIdentityPoolUsageOutput, error) {
	var output cognitosync.ListIdentityPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListIdentityPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIdentityPoolUsageAsync(ctx workflow.Context, input *cognitosync.ListIdentityPoolUsageInput) *ListIdentityPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListIdentityPoolUsage", input)
	return &ListIdentityPoolUsageFuture{Future: future}
}

func (a *stub) ListRecords(ctx workflow.Context, input *cognitosync.ListRecordsInput) (*cognitosync.ListRecordsOutput, error) {
	var output cognitosync.ListRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRecordsAsync(ctx workflow.Context, input *cognitosync.ListRecordsInput) *ListRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-ListRecords", input)
	return &ListRecordsFuture{Future: future}
}

func (a *stub) RegisterDevice(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) (*cognitosync.RegisterDeviceOutput, error) {
	var output cognitosync.RegisterDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-RegisterDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDeviceAsync(ctx workflow.Context, input *cognitosync.RegisterDeviceInput) *RegisterDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-RegisterDevice", input)
	return &RegisterDeviceFuture{Future: future}
}

func (a *stub) SetCognitoEvents(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) (*cognitosync.SetCognitoEventsOutput, error) {
	var output cognitosync.SetCognitoEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-SetCognitoEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetCognitoEventsAsync(ctx workflow.Context, input *cognitosync.SetCognitoEventsInput) *SetCognitoEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-SetCognitoEvents", input)
	return &SetCognitoEventsFuture{Future: future}
}

func (a *stub) SetIdentityPoolConfiguration(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {
	var output cognitosync.SetIdentityPoolConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-SetIdentityPoolConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetIdentityPoolConfigurationAsync(ctx workflow.Context, input *cognitosync.SetIdentityPoolConfigurationInput) *SetIdentityPoolConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-SetIdentityPoolConfiguration", input)
	return &SetIdentityPoolConfigurationFuture{Future: future}
}

func (a *stub) SubscribeToDataset(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) (*cognitosync.SubscribeToDatasetOutput, error) {
	var output cognitosync.SubscribeToDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-SubscribeToDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubscribeToDatasetAsync(ctx workflow.Context, input *cognitosync.SubscribeToDatasetInput) *SubscribeToDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-SubscribeToDataset", input)
	return &SubscribeToDatasetFuture{Future: future}
}

func (a *stub) UnsubscribeFromDataset(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) (*cognitosync.UnsubscribeFromDatasetOutput, error) {
	var output cognitosync.UnsubscribeFromDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-UnsubscribeFromDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnsubscribeFromDatasetAsync(ctx workflow.Context, input *cognitosync.UnsubscribeFromDatasetInput) *UnsubscribeFromDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-UnsubscribeFromDataset", input)
	return &UnsubscribeFromDatasetFuture{Future: future}
}

func (a *stub) UpdateRecords(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) (*cognitosync.UpdateRecordsOutput, error) {
	var output cognitosync.UpdateRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cognitosync-UpdateRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRecordsAsync(ctx workflow.Context, input *cognitosync.UpdateRecordsInput) *UpdateRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cognitosync-UpdateRecords", input)
	return &UpdateRecordsFuture{Future: future}
}
