// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package syntheticsstub

import (
	"github.com/aws/aws-sdk-go/service/synthetics"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type SyntheticsCreateCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsCreateCanaryFuture) Get(ctx workflow.Context) (*synthetics.CreateCanaryOutput, error) {
	var output synthetics.CreateCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDeleteCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDeleteCanaryFuture) Get(ctx workflow.Context) (*synthetics.DeleteCanaryOutput, error) {
	var output synthetics.DeleteCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeCanariesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeCanariesFuture) Get(ctx workflow.Context) (*synthetics.DescribeCanariesOutput, error) {
	var output synthetics.DescribeCanariesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeCanariesLastRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeCanariesLastRunFuture) Get(ctx workflow.Context) (*synthetics.DescribeCanariesLastRunOutput, error) {
	var output synthetics.DescribeCanariesLastRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsDescribeRuntimeVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsDescribeRuntimeVersionsFuture) Get(ctx workflow.Context) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	var output synthetics.DescribeRuntimeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsGetCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsGetCanaryFuture) Get(ctx workflow.Context) (*synthetics.GetCanaryOutput, error) {
	var output synthetics.GetCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsGetCanaryRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsGetCanaryRunsFuture) Get(ctx workflow.Context) (*synthetics.GetCanaryRunsOutput, error) {
	var output synthetics.GetCanaryRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsListTagsForResourceFuture) Get(ctx workflow.Context) (*synthetics.ListTagsForResourceOutput, error) {
	var output synthetics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsStartCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsStartCanaryFuture) Get(ctx workflow.Context) (*synthetics.StartCanaryOutput, error) {
	var output synthetics.StartCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsStopCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsStopCanaryFuture) Get(ctx workflow.Context) (*synthetics.StopCanaryOutput, error) {
	var output synthetics.StopCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsTagResourceFuture) Get(ctx workflow.Context) (*synthetics.TagResourceOutput, error) {
	var output synthetics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsUntagResourceFuture) Get(ctx workflow.Context) (*synthetics.UntagResourceOutput, error) {
	var output synthetics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyntheticsUpdateCanaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyntheticsUpdateCanaryFuture) Get(ctx workflow.Context) (*synthetics.UpdateCanaryOutput, error) {
	var output synthetics.UpdateCanaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCanary(ctx workflow.Context, input *synthetics.CreateCanaryInput) (*synthetics.CreateCanaryOutput, error) {
	var output synthetics.CreateCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-CreateCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCanaryAsync(ctx workflow.Context, input *synthetics.CreateCanaryInput) *SyntheticsCreateCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-CreateCanary", input)
	return &SyntheticsCreateCanaryFuture{Future: future}
}

func (a *stub) DeleteCanary(ctx workflow.Context, input *synthetics.DeleteCanaryInput) (*synthetics.DeleteCanaryOutput, error) {
	var output synthetics.DeleteCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-DeleteCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCanaryAsync(ctx workflow.Context, input *synthetics.DeleteCanaryInput) *SyntheticsDeleteCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-DeleteCanary", input)
	return &SyntheticsDeleteCanaryFuture{Future: future}
}

func (a *stub) DescribeCanaries(ctx workflow.Context, input *synthetics.DescribeCanariesInput) (*synthetics.DescribeCanariesOutput, error) {
	var output synthetics.DescribeCanariesOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeCanaries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCanariesAsync(ctx workflow.Context, input *synthetics.DescribeCanariesInput) *SyntheticsDescribeCanariesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeCanaries", input)
	return &SyntheticsDescribeCanariesFuture{Future: future}
}

func (a *stub) DescribeCanariesLastRun(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) (*synthetics.DescribeCanariesLastRunOutput, error) {
	var output synthetics.DescribeCanariesLastRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeCanariesLastRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCanariesLastRunAsync(ctx workflow.Context, input *synthetics.DescribeCanariesLastRunInput) *SyntheticsDescribeCanariesLastRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeCanariesLastRun", input)
	return &SyntheticsDescribeCanariesLastRunFuture{Future: future}
}

func (a *stub) DescribeRuntimeVersions(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) (*synthetics.DescribeRuntimeVersionsOutput, error) {
	var output synthetics.DescribeRuntimeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeRuntimeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRuntimeVersionsAsync(ctx workflow.Context, input *synthetics.DescribeRuntimeVersionsInput) *SyntheticsDescribeRuntimeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-DescribeRuntimeVersions", input)
	return &SyntheticsDescribeRuntimeVersionsFuture{Future: future}
}

func (a *stub) GetCanary(ctx workflow.Context, input *synthetics.GetCanaryInput) (*synthetics.GetCanaryOutput, error) {
	var output synthetics.GetCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-GetCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCanaryAsync(ctx workflow.Context, input *synthetics.GetCanaryInput) *SyntheticsGetCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-GetCanary", input)
	return &SyntheticsGetCanaryFuture{Future: future}
}

func (a *stub) GetCanaryRuns(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) (*synthetics.GetCanaryRunsOutput, error) {
	var output synthetics.GetCanaryRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-GetCanaryRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCanaryRunsAsync(ctx workflow.Context, input *synthetics.GetCanaryRunsInput) *SyntheticsGetCanaryRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-GetCanaryRuns", input)
	return &SyntheticsGetCanaryRunsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) (*synthetics.ListTagsForResourceOutput, error) {
	var output synthetics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *synthetics.ListTagsForResourceInput) *SyntheticsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-ListTagsForResource", input)
	return &SyntheticsListTagsForResourceFuture{Future: future}
}

func (a *stub) StartCanary(ctx workflow.Context, input *synthetics.StartCanaryInput) (*synthetics.StartCanaryOutput, error) {
	var output synthetics.StartCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-StartCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCanaryAsync(ctx workflow.Context, input *synthetics.StartCanaryInput) *SyntheticsStartCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-StartCanary", input)
	return &SyntheticsStartCanaryFuture{Future: future}
}

func (a *stub) StopCanary(ctx workflow.Context, input *synthetics.StopCanaryInput) (*synthetics.StopCanaryOutput, error) {
	var output synthetics.StopCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-StopCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopCanaryAsync(ctx workflow.Context, input *synthetics.StopCanaryInput) *SyntheticsStopCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-StopCanary", input)
	return &SyntheticsStopCanaryFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *synthetics.TagResourceInput) (*synthetics.TagResourceOutput, error) {
	var output synthetics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *synthetics.TagResourceInput) *SyntheticsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-TagResource", input)
	return &SyntheticsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *synthetics.UntagResourceInput) (*synthetics.UntagResourceOutput, error) {
	var output synthetics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *synthetics.UntagResourceInput) *SyntheticsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-UntagResource", input)
	return &SyntheticsUntagResourceFuture{Future: future}
}

func (a *stub) UpdateCanary(ctx workflow.Context, input *synthetics.UpdateCanaryInput) (*synthetics.UpdateCanaryOutput, error) {
	var output synthetics.UpdateCanaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-synthetics-UpdateCanary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCanaryAsync(ctx workflow.Context, input *synthetics.UpdateCanaryInput) *SyntheticsUpdateCanaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-synthetics-UpdateCanary", input)
	return &SyntheticsUpdateCanaryFuture{Future: future}
}
