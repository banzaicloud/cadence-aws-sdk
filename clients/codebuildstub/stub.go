// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codebuildstub

import (
	"github.com/aws/aws-sdk-go/service/codebuild"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeBuildBatchDeleteBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchDeleteBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildBatchGetBuildBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchGetBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildBatchGetBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchGetBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildBatchGetProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchGetProjectsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildBatchGetReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchGetReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildBatchGetReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildBatchGetReportsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildCreateProjectFuture) Get(ctx workflow.Context) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildCreateReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildCreateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildCreateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildCreateWebhookFuture) Get(ctx workflow.Context) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteProjectFuture) Get(ctx workflow.Context) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteReportFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteReportGroupFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDeleteWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDeleteWebhookFuture) Get(ctx workflow.Context) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDescribeCodeCoveragesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDescribeCodeCoveragesFuture) Get(ctx workflow.Context) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildDescribeTestCasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildDescribeTestCasesFuture) Get(ctx workflow.Context) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildGetResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildGetResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildImportSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildImportSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildInvalidateProjectCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildInvalidateProjectCacheFuture) Get(ctx workflow.Context) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListBuildBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListBuildBatchesForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListBuildBatchesForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListBuildsFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListBuildsForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListBuildsForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListCuratedEnvironmentImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListCuratedEnvironmentImagesFuture) Get(ctx workflow.Context) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListReportsFuture) Get(ctx workflow.Context) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListReportsForReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListReportsForReportGroupFuture) Get(ctx workflow.Context) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListSharedProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListSharedProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListSharedReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListSharedReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildListSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildListSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildPutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildPutResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildRetryBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildRetryBuildFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildRetryBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildRetryBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildStartBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildStartBuildFuture) Get(ctx workflow.Context) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildStartBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildStartBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildStopBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildStopBuildFuture) Get(ctx workflow.Context) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildStopBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildStopBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildUpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildUpdateProjectFuture) Get(ctx workflow.Context) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildUpdateReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildUpdateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeBuildUpdateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeBuildUpdateWebhookFuture) Get(ctx workflow.Context) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteBuilds(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchDeleteBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteBuildsAsync(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) *CodeBuildBatchDeleteBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchDeleteBuilds", input)
	return &CodeBuildBatchDeleteBuildsFuture{Future: future}
}

func (a *stub) BatchGetBuildBatches(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetBuildBatchesAsync(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) *CodeBuildBatchGetBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuildBatches", input)
	return &CodeBuildBatchGetBuildBatchesFuture{Future: future}
}

func (a *stub) BatchGetBuilds(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetBuildsAsync(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) *CodeBuildBatchGetBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuilds", input)
	return &CodeBuildBatchGetBuildsFuture{Future: future}
}

func (a *stub) BatchGetProjects(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetProjectsAsync(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) *CodeBuildBatchGetProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetProjects", input)
	return &CodeBuildBatchGetProjectsFuture{Future: future}
}

func (a *stub) BatchGetReportGroups(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetReportGroupsAsync(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) *CodeBuildBatchGetReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReportGroups", input)
	return &CodeBuildBatchGetReportGroupsFuture{Future: future}
}

func (a *stub) BatchGetReports(ctx workflow.Context, input *codebuild.BatchGetReportsInput) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetReportsAsync(ctx workflow.Context, input *codebuild.BatchGetReportsInput) *CodeBuildBatchGetReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReports", input)
	return &CodeBuildBatchGetReportsFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *codebuild.CreateProjectInput) *CodeBuildCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateProject", input)
	return &CodeBuildCreateProjectFuture{Future: future}
}

func (a *stub) CreateReportGroup(ctx workflow.Context, input *codebuild.CreateReportGroupInput) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReportGroupAsync(ctx workflow.Context, input *codebuild.CreateReportGroupInput) *CodeBuildCreateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateReportGroup", input)
	return &CodeBuildCreateReportGroupFuture{Future: future}
}

func (a *stub) CreateWebhook(ctx workflow.Context, input *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebhookAsync(ctx workflow.Context, input *codebuild.CreateWebhookInput) *CodeBuildCreateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateWebhook", input)
	return &CodeBuildCreateWebhookFuture{Future: future}
}

func (a *stub) DeleteBuildBatch(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBuildBatchAsync(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) *CodeBuildDeleteBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteBuildBatch", input)
	return &CodeBuildDeleteBuildBatchFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *codebuild.DeleteProjectInput) *CodeBuildDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteProject", input)
	return &CodeBuildDeleteProjectFuture{Future: future}
}

func (a *stub) DeleteReport(ctx workflow.Context, input *codebuild.DeleteReportInput) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReportAsync(ctx workflow.Context, input *codebuild.DeleteReportInput) *CodeBuildDeleteReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReport", input)
	return &CodeBuildDeleteReportFuture{Future: future}
}

func (a *stub) DeleteReportGroup(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReportGroupAsync(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) *CodeBuildDeleteReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReportGroup", input)
	return &CodeBuildDeleteReportGroupFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) *CodeBuildDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteResourcePolicy", input)
	return &CodeBuildDeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteSourceCredentials(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSourceCredentialsAsync(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) *CodeBuildDeleteSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteSourceCredentials", input)
	return &CodeBuildDeleteSourceCredentialsFuture{Future: future}
}

func (a *stub) DeleteWebhook(ctx workflow.Context, input *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebhookAsync(ctx workflow.Context, input *codebuild.DeleteWebhookInput) *CodeBuildDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteWebhook", input)
	return &CodeBuildDeleteWebhookFuture{Future: future}
}

func (a *stub) DescribeCodeCoverages(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeCodeCoverages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeCoveragesAsync(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) *CodeBuildDescribeCodeCoveragesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeCodeCoverages", input)
	return &CodeBuildDescribeCodeCoveragesFuture{Future: future}
}

func (a *stub) DescribeTestCases(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeTestCases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTestCasesAsync(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) *CodeBuildDescribeTestCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeTestCases", input)
	return &CodeBuildDescribeTestCasesFuture{Future: future}
}

func (a *stub) GetResourcePolicy(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePolicyAsync(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) *CodeBuildGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-GetResourcePolicy", input)
	return &CodeBuildGetResourcePolicyFuture{Future: future}
}

func (a *stub) ImportSourceCredentials(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ImportSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) *CodeBuildImportSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ImportSourceCredentials", input)
	return &CodeBuildImportSourceCredentialsFuture{Future: future}
}

func (a *stub) InvalidateProjectCache(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-InvalidateProjectCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InvalidateProjectCacheAsync(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) *CodeBuildInvalidateProjectCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-InvalidateProjectCache", input)
	return &CodeBuildInvalidateProjectCacheFuture{Future: future}
}

func (a *stub) ListBuildBatches(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildBatchesAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) *CodeBuildListBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatches", input)
	return &CodeBuildListBuildBatchesFuture{Future: future}
}

func (a *stub) ListBuildBatchesForProject(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatchesForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildBatchesForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) *CodeBuildListBuildBatchesForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatchesForProject", input)
	return &CodeBuildListBuildBatchesForProjectFuture{Future: future}
}

func (a *stub) ListBuilds(ctx workflow.Context, input *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsAsync(ctx workflow.Context, input *codebuild.ListBuildsInput) *CodeBuildListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuilds", input)
	return &CodeBuildListBuildsFuture{Future: future}
}

func (a *stub) ListBuildsForProject(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildsForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) *CodeBuildListBuildsForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildsForProject", input)
	return &CodeBuildListBuildsForProjectFuture{Future: future}
}

func (a *stub) ListCuratedEnvironmentImages(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListCuratedEnvironmentImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCuratedEnvironmentImagesAsync(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) *CodeBuildListCuratedEnvironmentImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListCuratedEnvironmentImages", input)
	return &CodeBuildListCuratedEnvironmentImagesFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *codebuild.ListProjectsInput) *CodeBuildListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListProjects", input)
	return &CodeBuildListProjectsFuture{Future: future}
}

func (a *stub) ListReportGroups(ctx workflow.Context, input *codebuild.ListReportGroupsInput) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportGroupsAsync(ctx workflow.Context, input *codebuild.ListReportGroupsInput) *CodeBuildListReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportGroups", input)
	return &CodeBuildListReportGroupsFuture{Future: future}
}

func (a *stub) ListReports(ctx workflow.Context, input *codebuild.ListReportsInput) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportsAsync(ctx workflow.Context, input *codebuild.ListReportsInput) *CodeBuildListReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReports", input)
	return &CodeBuildListReportsFuture{Future: future}
}

func (a *stub) ListReportsForReportGroup(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportsForReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportsForReportGroupAsync(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) *CodeBuildListReportsForReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportsForReportGroup", input)
	return &CodeBuildListReportsForReportGroupFuture{Future: future}
}

func (a *stub) ListSharedProjects(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSharedProjectsAsync(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) *CodeBuildListSharedProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedProjects", input)
	return &CodeBuildListSharedProjectsFuture{Future: future}
}

func (a *stub) ListSharedReportGroups(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSharedReportGroupsAsync(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) *CodeBuildListSharedReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedReportGroups", input)
	return &CodeBuildListSharedReportGroupsFuture{Future: future}
}

func (a *stub) ListSourceCredentials(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) *CodeBuildListSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSourceCredentials", input)
	return &CodeBuildListSourceCredentialsFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) *CodeBuildPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-PutResourcePolicy", input)
	return &CodeBuildPutResourcePolicyFuture{Future: future}
}

func (a *stub) RetryBuild(ctx workflow.Context, input *codebuild.RetryBuildInput) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryBuildAsync(ctx workflow.Context, input *codebuild.RetryBuildInput) *CodeBuildRetryBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuild", input)
	return &CodeBuildRetryBuildFuture{Future: future}
}

func (a *stub) RetryBuildBatch(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryBuildBatchAsync(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) *CodeBuildRetryBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuildBatch", input)
	return &CodeBuildRetryBuildBatchFuture{Future: future}
}

func (a *stub) StartBuild(ctx workflow.Context, input *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBuildAsync(ctx workflow.Context, input *codebuild.StartBuildInput) *CodeBuildStartBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuild", input)
	return &CodeBuildStartBuildFuture{Future: future}
}

func (a *stub) StartBuildBatch(ctx workflow.Context, input *codebuild.StartBuildBatchInput) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBuildBatchAsync(ctx workflow.Context, input *codebuild.StartBuildBatchInput) *CodeBuildStartBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuildBatch", input)
	return &CodeBuildStartBuildBatchFuture{Future: future}
}

func (a *stub) StopBuild(ctx workflow.Context, input *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBuildAsync(ctx workflow.Context, input *codebuild.StopBuildInput) *CodeBuildStopBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuild", input)
	return &CodeBuildStopBuildFuture{Future: future}
}

func (a *stub) StopBuildBatch(ctx workflow.Context, input *codebuild.StopBuildBatchInput) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBuildBatchAsync(ctx workflow.Context, input *codebuild.StopBuildBatchInput) *CodeBuildStopBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuildBatch", input)
	return &CodeBuildStopBuildBatchFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *codebuild.UpdateProjectInput) *CodeBuildUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateProject", input)
	return &CodeBuildUpdateProjectFuture{Future: future}
}

func (a *stub) UpdateReportGroup(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReportGroupAsync(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) *CodeBuildUpdateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateReportGroup", input)
	return &CodeBuildUpdateReportGroupFuture{Future: future}
}

func (a *stub) UpdateWebhook(ctx workflow.Context, input *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebhookAsync(ctx workflow.Context, input *codebuild.UpdateWebhookInput) *CodeBuildUpdateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateWebhook", input)
	return &CodeBuildUpdateWebhookFuture{Future: future}
}
