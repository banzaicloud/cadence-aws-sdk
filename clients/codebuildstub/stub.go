// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codebuildstub

import (
	"github.com/aws/aws-sdk-go/service/codebuild"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchDeleteBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetBuildBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetProjectsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetReportsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateWebhookFuture) Get(ctx workflow.Context) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReportFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteReportGroupFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWebhookFuture) Get(ctx workflow.Context) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCodeCoveragesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCodeCoveragesFuture) Get(ctx workflow.Context) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTestCasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTestCasesFuture) Get(ctx workflow.Context) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReportGroupTrendFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReportGroupTrendFuture) Get(ctx workflow.Context) (*codebuild.GetReportGroupTrendOutput, error) {
	var output codebuild.GetReportGroupTrendOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InvalidateProjectCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InvalidateProjectCacheFuture) Get(ctx workflow.Context) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBuildBatchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBuildBatchesForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBuildBatchesForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBuildsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBuildsFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBuildsForProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBuildsForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCuratedEnvironmentImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCuratedEnvironmentImagesFuture) Get(ctx workflow.Context) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReportsFuture) Get(ctx workflow.Context) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReportsForReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReportsForReportGroupFuture) Get(ctx workflow.Context) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSharedProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSharedProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSharedReportGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSharedReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSourceCredentialsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetryBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetryBuildFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetryBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetryBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartBuildFuture) Get(ctx workflow.Context) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopBuildFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopBuildFuture) Get(ctx workflow.Context) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopBuildBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProjectFuture) Get(ctx workflow.Context) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateReportGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateWebhookFuture) Get(ctx workflow.Context) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteBuilds(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchDeleteBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteBuildsAsync(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) *BatchDeleteBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchDeleteBuilds", input)
	return &BatchDeleteBuildsFuture{Future: future}
}

func (a *stub) BatchGetBuildBatches(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetBuildBatchesAsync(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) *BatchGetBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuildBatches", input)
	return &BatchGetBuildBatchesFuture{Future: future}
}

func (a *stub) BatchGetBuilds(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetBuildsAsync(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) *BatchGetBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetBuilds", input)
	return &BatchGetBuildsFuture{Future: future}
}

func (a *stub) BatchGetProjects(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetProjectsAsync(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) *BatchGetProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetProjects", input)
	return &BatchGetProjectsFuture{Future: future}
}

func (a *stub) BatchGetReportGroups(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetReportGroupsAsync(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) *BatchGetReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReportGroups", input)
	return &BatchGetReportGroupsFuture{Future: future}
}

func (a *stub) BatchGetReports(ctx workflow.Context, input *codebuild.BatchGetReportsInput) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetReportsAsync(ctx workflow.Context, input *codebuild.BatchGetReportsInput) *BatchGetReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-BatchGetReports", input)
	return &BatchGetReportsFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *codebuild.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) CreateReportGroup(ctx workflow.Context, input *codebuild.CreateReportGroupInput) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReportGroupAsync(ctx workflow.Context, input *codebuild.CreateReportGroupInput) *CreateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateReportGroup", input)
	return &CreateReportGroupFuture{Future: future}
}

func (a *stub) CreateWebhook(ctx workflow.Context, input *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebhookAsync(ctx workflow.Context, input *codebuild.CreateWebhookInput) *CreateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-CreateWebhook", input)
	return &CreateWebhookFuture{Future: future}
}

func (a *stub) DeleteBuildBatch(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBuildBatchAsync(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) *DeleteBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteBuildBatch", input)
	return &DeleteBuildBatchFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *codebuild.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DeleteReport(ctx workflow.Context, input *codebuild.DeleteReportInput) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReportAsync(ctx workflow.Context, input *codebuild.DeleteReportInput) *DeleteReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReport", input)
	return &DeleteReportFuture{Future: future}
}

func (a *stub) DeleteReportGroup(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteReportGroupAsync(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) *DeleteReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteReportGroup", input)
	return &DeleteReportGroupFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) *DeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteResourcePolicy", input)
	return &DeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteSourceCredentials(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSourceCredentialsAsync(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) *DeleteSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteSourceCredentials", input)
	return &DeleteSourceCredentialsFuture{Future: future}
}

func (a *stub) DeleteWebhook(ctx workflow.Context, input *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebhookAsync(ctx workflow.Context, input *codebuild.DeleteWebhookInput) *DeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DeleteWebhook", input)
	return &DeleteWebhookFuture{Future: future}
}

func (a *stub) DescribeCodeCoverages(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeCodeCoverages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCodeCoveragesAsync(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) *DescribeCodeCoveragesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeCodeCoverages", input)
	return &DescribeCodeCoveragesFuture{Future: future}
}

func (a *stub) DescribeTestCases(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeTestCases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTestCasesAsync(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) *DescribeTestCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-DescribeTestCases", input)
	return &DescribeTestCasesFuture{Future: future}
}

func (a *stub) GetReportGroupTrend(ctx workflow.Context, input *codebuild.GetReportGroupTrendInput) (*codebuild.GetReportGroupTrendOutput, error) {
	var output codebuild.GetReportGroupTrendOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-GetReportGroupTrend", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReportGroupTrendAsync(ctx workflow.Context, input *codebuild.GetReportGroupTrendInput) *GetReportGroupTrendFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-GetReportGroupTrend", input)
	return &GetReportGroupTrendFuture{Future: future}
}

func (a *stub) GetResourcePolicy(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePolicyAsync(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) *GetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-GetResourcePolicy", input)
	return &GetResourcePolicyFuture{Future: future}
}

func (a *stub) ImportSourceCredentials(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ImportSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) *ImportSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ImportSourceCredentials", input)
	return &ImportSourceCredentialsFuture{Future: future}
}

func (a *stub) InvalidateProjectCache(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-InvalidateProjectCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InvalidateProjectCacheAsync(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) *InvalidateProjectCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-InvalidateProjectCache", input)
	return &InvalidateProjectCacheFuture{Future: future}
}

func (a *stub) ListBuildBatches(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildBatchesAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) *ListBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatches", input)
	return &ListBuildBatchesFuture{Future: future}
}

func (a *stub) ListBuildBatchesForProject(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatchesForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildBatchesForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) *ListBuildBatchesForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildBatchesForProject", input)
	return &ListBuildBatchesForProjectFuture{Future: future}
}

func (a *stub) ListBuilds(ctx workflow.Context, input *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsAsync(ctx workflow.Context, input *codebuild.ListBuildsInput) *ListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuilds", input)
	return &ListBuildsFuture{Future: future}
}

func (a *stub) ListBuildsForProject(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildsForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBuildsForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) *ListBuildsForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListBuildsForProject", input)
	return &ListBuildsForProjectFuture{Future: future}
}

func (a *stub) ListCuratedEnvironmentImages(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListCuratedEnvironmentImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCuratedEnvironmentImagesAsync(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) *ListCuratedEnvironmentImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListCuratedEnvironmentImages", input)
	return &ListCuratedEnvironmentImagesFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *codebuild.ListProjectsInput) *ListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListProjects", input)
	return &ListProjectsFuture{Future: future}
}

func (a *stub) ListReportGroups(ctx workflow.Context, input *codebuild.ListReportGroupsInput) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportGroupsAsync(ctx workflow.Context, input *codebuild.ListReportGroupsInput) *ListReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportGroups", input)
	return &ListReportGroupsFuture{Future: future}
}

func (a *stub) ListReports(ctx workflow.Context, input *codebuild.ListReportsInput) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportsAsync(ctx workflow.Context, input *codebuild.ListReportsInput) *ListReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReports", input)
	return &ListReportsFuture{Future: future}
}

func (a *stub) ListReportsForReportGroup(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportsForReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReportsForReportGroupAsync(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) *ListReportsForReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListReportsForReportGroup", input)
	return &ListReportsForReportGroupFuture{Future: future}
}

func (a *stub) ListSharedProjects(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSharedProjectsAsync(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) *ListSharedProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedProjects", input)
	return &ListSharedProjectsFuture{Future: future}
}

func (a *stub) ListSharedReportGroups(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSharedReportGroupsAsync(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) *ListSharedReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSharedReportGroups", input)
	return &ListSharedReportGroupsFuture{Future: future}
}

func (a *stub) ListSourceCredentials(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) *ListSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-ListSourceCredentials", input)
	return &ListSourceCredentialsFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) *PutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-PutResourcePolicy", input)
	return &PutResourcePolicyFuture{Future: future}
}

func (a *stub) RetryBuild(ctx workflow.Context, input *codebuild.RetryBuildInput) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryBuildAsync(ctx workflow.Context, input *codebuild.RetryBuildInput) *RetryBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuild", input)
	return &RetryBuildFuture{Future: future}
}

func (a *stub) RetryBuildBatch(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryBuildBatchAsync(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) *RetryBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-RetryBuildBatch", input)
	return &RetryBuildBatchFuture{Future: future}
}

func (a *stub) StartBuild(ctx workflow.Context, input *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBuildAsync(ctx workflow.Context, input *codebuild.StartBuildInput) *StartBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuild", input)
	return &StartBuildFuture{Future: future}
}

func (a *stub) StartBuildBatch(ctx workflow.Context, input *codebuild.StartBuildBatchInput) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBuildBatchAsync(ctx workflow.Context, input *codebuild.StartBuildBatchInput) *StartBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StartBuildBatch", input)
	return &StartBuildBatchFuture{Future: future}
}

func (a *stub) StopBuild(ctx workflow.Context, input *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBuildAsync(ctx workflow.Context, input *codebuild.StopBuildInput) *StopBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuild", input)
	return &StopBuildFuture{Future: future}
}

func (a *stub) StopBuildBatch(ctx workflow.Context, input *codebuild.StopBuildBatchInput) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBuildBatchAsync(ctx workflow.Context, input *codebuild.StopBuildBatchInput) *StopBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-StopBuildBatch", input)
	return &StopBuildBatchFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *codebuild.UpdateProjectInput) *UpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateProject", input)
	return &UpdateProjectFuture{Future: future}
}

func (a *stub) UpdateReportGroup(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateReportGroupAsync(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) *UpdateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateReportGroup", input)
	return &UpdateReportGroupFuture{Future: future}
}

func (a *stub) UpdateWebhook(ctx workflow.Context, input *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebhookAsync(ctx workflow.Context, input *codebuild.UpdateWebhookInput) *UpdateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codebuild-UpdateWebhook", input)
	return &UpdateWebhookFuture{Future: future}
}
