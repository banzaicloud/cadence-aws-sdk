// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workmailstub

import (
	"github.com/aws/aws-sdk-go/service/workmail"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateDelegateToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDelegateToResourceFuture) Get(ctx workflow.Context) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateMemberToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateMemberToGroupFuture) Get(ctx workflow.Context) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAliasFuture) Get(ctx workflow.Context) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGroupFuture) Get(ctx workflow.Context) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateOrganizationFuture) Get(ctx workflow.Context) (*workmail.CreateOrganizationOutput, error) {
	var output workmail.CreateOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateResourceFuture) Get(ctx workflow.Context) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAccessControlRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAliasFuture) Get(ctx workflow.Context) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGroupFuture) Get(ctx workflow.Context) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteOrganizationFuture) Get(ctx workflow.Context) (*workmail.DeleteOrganizationOutput, error) {
	var output workmail.DeleteOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourceFuture) Get(ctx workflow.Context) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterFromWorkMailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterFromWorkMailFuture) Get(ctx workflow.Context) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGroupFuture) Get(ctx workflow.Context) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationFuture) Get(ctx workflow.Context) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourceFuture) Get(ctx workflow.Context) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserFuture) Get(ctx workflow.Context) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateDelegateFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateDelegateFromResourceFuture) Get(ctx workflow.Context) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateMemberFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateMemberFromGroupFuture) Get(ctx workflow.Context) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessControlEffectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessControlEffectFuture) Get(ctx workflow.Context) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDefaultRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDefaultRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMailboxDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMailboxDetailsFuture) Get(ctx workflow.Context) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAccessControlRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAccessControlRulesFuture) Get(ctx workflow.Context) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAliasesFuture) Get(ctx workflow.Context) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupMembersFuture) Get(ctx workflow.Context) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGroupsFuture) Get(ctx workflow.Context) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMailboxExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMailboxExportJobsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOrganizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOrganizationsFuture) Get(ctx workflow.Context) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceDelegatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceDelegatesFuture) Get(ctx workflow.Context) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourcesFuture) Get(ctx workflow.Context) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAccessControlRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterToWorkMailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterToWorkMailFuture) Get(ctx workflow.Context) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetPasswordFuture) Get(ctx workflow.Context) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMailboxQuotaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMailboxQuotaFuture) Get(ctx workflow.Context) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePrimaryEmailAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePrimaryEmailAddressFuture) Get(ctx workflow.Context) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceFuture) Get(ctx workflow.Context) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDelegateToResource(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateDelegateToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDelegateToResourceAsync(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) *AssociateDelegateToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateDelegateToResource", input)
	return &AssociateDelegateToResourceFuture{Future: future}
}

func (a *stub) AssociateMemberToGroup(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateMemberToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateMemberToGroupAsync(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) *AssociateMemberToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateMemberToGroup", input)
	return &AssociateMemberToGroupFuture{Future: future}
}

func (a *stub) CancelMailboxExportJob(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CancelMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelMailboxExportJobAsync(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) *CancelMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CancelMailboxExportJob", input)
	return &CancelMailboxExportJobFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *workmail.CreateAliasInput) *CreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateAlias", input)
	return &CreateAliasFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *workmail.CreateGroupInput) *CreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateGroup", input)
	return &CreateGroupFuture{Future: future}
}

func (a *stub) CreateOrganization(ctx workflow.Context, input *workmail.CreateOrganizationInput) (*workmail.CreateOrganizationOutput, error) {
	var output workmail.CreateOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationAsync(ctx workflow.Context, input *workmail.CreateOrganizationInput) *CreateOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateOrganization", input)
	return &CreateOrganizationFuture{Future: future}
}

func (a *stub) CreateResource(ctx workflow.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceAsync(ctx workflow.Context, input *workmail.CreateResourceInput) *CreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateResource", input)
	return &CreateResourceFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *workmail.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeleteAccessControlRule(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessControlRuleAsync(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) *DeleteAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAccessControlRule", input)
	return &DeleteAccessControlRuleFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *workmail.DeleteAliasInput) *DeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAlias", input)
	return &DeleteAliasFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *workmail.DeleteGroupInput) *DeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteGroup", input)
	return &DeleteGroupFuture{Future: future}
}

func (a *stub) DeleteMailboxPermissions(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMailboxPermissionsAsync(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) *DeleteMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteMailboxPermissions", input)
	return &DeleteMailboxPermissionsFuture{Future: future}
}

func (a *stub) DeleteOrganization(ctx workflow.Context, input *workmail.DeleteOrganizationInput) (*workmail.DeleteOrganizationOutput, error) {
	var output workmail.DeleteOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationAsync(ctx workflow.Context, input *workmail.DeleteOrganizationInput) *DeleteOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteOrganization", input)
	return &DeleteOrganizationFuture{Future: future}
}

func (a *stub) DeleteResource(ctx workflow.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceAsync(ctx workflow.Context, input *workmail.DeleteResourceInput) *DeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteResource", input)
	return &DeleteResourceFuture{Future: future}
}

func (a *stub) DeleteRetentionPolicy(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) *DeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteRetentionPolicy", input)
	return &DeleteRetentionPolicyFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *workmail.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DeregisterFromWorkMail(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeregisterFromWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterFromWorkMailAsync(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) *DeregisterFromWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeregisterFromWorkMail", input)
	return &DeregisterFromWorkMailFuture{Future: future}
}

func (a *stub) DescribeGroup(ctx workflow.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGroupAsync(ctx workflow.Context, input *workmail.DescribeGroupInput) *DescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeGroup", input)
	return &DescribeGroupFuture{Future: future}
}

func (a *stub) DescribeMailboxExportJob(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMailboxExportJobAsync(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) *DescribeMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeMailboxExportJob", input)
	return &DescribeMailboxExportJobFuture{Future: future}
}

func (a *stub) DescribeOrganization(ctx workflow.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationAsync(ctx workflow.Context, input *workmail.DescribeOrganizationInput) *DescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeOrganization", input)
	return &DescribeOrganizationFuture{Future: future}
}

func (a *stub) DescribeResource(ctx workflow.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourceAsync(ctx workflow.Context, input *workmail.DescribeResourceInput) *DescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeResource", input)
	return &DescribeResourceFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *workmail.DescribeUserInput) *DescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeUser", input)
	return &DescribeUserFuture{Future: future}
}

func (a *stub) DisassociateDelegateFromResource(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateDelegateFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDelegateFromResourceAsync(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) *DisassociateDelegateFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateDelegateFromResource", input)
	return &DisassociateDelegateFromResourceFuture{Future: future}
}

func (a *stub) DisassociateMemberFromGroup(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateMemberFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateMemberFromGroupAsync(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) *DisassociateMemberFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateMemberFromGroup", input)
	return &DisassociateMemberFromGroupFuture{Future: future}
}

func (a *stub) GetAccessControlEffect(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetAccessControlEffect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessControlEffectAsync(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) *GetAccessControlEffectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetAccessControlEffect", input)
	return &GetAccessControlEffectFuture{Future: future}
}

func (a *stub) GetDefaultRetentionPolicy(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetDefaultRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDefaultRetentionPolicyAsync(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) *GetDefaultRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetDefaultRetentionPolicy", input)
	return &GetDefaultRetentionPolicyFuture{Future: future}
}

func (a *stub) GetMailboxDetails(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetMailboxDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMailboxDetailsAsync(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) *GetMailboxDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetMailboxDetails", input)
	return &GetMailboxDetailsFuture{Future: future}
}

func (a *stub) ListAccessControlRules(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListAccessControlRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessControlRulesAsync(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) *ListAccessControlRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListAccessControlRules", input)
	return &ListAccessControlRulesFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *workmail.ListAliasesInput) *ListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListAliases", input)
	return &ListAliasesFuture{Future: future}
}

func (a *stub) ListGroupMembers(ctx workflow.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupMembersAsync(ctx workflow.Context, input *workmail.ListGroupMembersInput) *ListGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroupMembers", input)
	return &ListGroupMembersFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *workmail.ListGroupsInput) *ListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroups", input)
	return &ListGroupsFuture{Future: future}
}

func (a *stub) ListMailboxExportJobs(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMailboxExportJobsAsync(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) *ListMailboxExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxExportJobs", input)
	return &ListMailboxExportJobsFuture{Future: future}
}

func (a *stub) ListMailboxPermissions(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMailboxPermissionsAsync(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) *ListMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxPermissions", input)
	return &ListMailboxPermissionsFuture{Future: future}
}

func (a *stub) ListOrganizations(ctx workflow.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListOrganizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationsAsync(ctx workflow.Context, input *workmail.ListOrganizationsInput) *ListOrganizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListOrganizations", input)
	return &ListOrganizationsFuture{Future: future}
}

func (a *stub) ListResourceDelegates(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListResourceDelegates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDelegatesAsync(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) *ListResourceDelegatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListResourceDelegates", input)
	return &ListResourceDelegatesFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *workmail.ListResourcesInput) *ListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListResources", input)
	return &ListResourcesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *workmail.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *workmail.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) PutAccessControlRule(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAccessControlRuleAsync(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) *PutAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutAccessControlRule", input)
	return &PutAccessControlRuleFuture{Future: future}
}

func (a *stub) PutMailboxPermissions(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMailboxPermissionsAsync(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) *PutMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutMailboxPermissions", input)
	return &PutMailboxPermissionsFuture{Future: future}
}

func (a *stub) PutRetentionPolicy(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionPolicyAsync(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) *PutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutRetentionPolicy", input)
	return &PutRetentionPolicyFuture{Future: future}
}

func (a *stub) RegisterToWorkMail(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-RegisterToWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterToWorkMailAsync(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) *RegisterToWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-RegisterToWorkMail", input)
	return &RegisterToWorkMailFuture{Future: future}
}

func (a *stub) ResetPassword(ctx workflow.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ResetPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetPasswordAsync(ctx workflow.Context, input *workmail.ResetPasswordInput) *ResetPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ResetPassword", input)
	return &ResetPasswordFuture{Future: future}
}

func (a *stub) StartMailboxExportJob(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-StartMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMailboxExportJobAsync(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) *StartMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-StartMailboxExportJob", input)
	return &StartMailboxExportJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *workmail.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *workmail.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateMailboxQuota(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateMailboxQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMailboxQuotaAsync(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) *UpdateMailboxQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateMailboxQuota", input)
	return &UpdateMailboxQuotaFuture{Future: future}
}

func (a *stub) UpdatePrimaryEmailAddress(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdatePrimaryEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePrimaryEmailAddressAsync(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) *UpdatePrimaryEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdatePrimaryEmailAddress", input)
	return &UpdatePrimaryEmailAddressFuture{Future: future}
}

func (a *stub) UpdateResource(ctx workflow.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceAsync(ctx workflow.Context, input *workmail.UpdateResourceInput) *UpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateResource", input)
	return &UpdateResourceFuture{Future: future}
}
