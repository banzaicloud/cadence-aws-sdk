// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workmailstub

import (
	"github.com/aws/aws-sdk-go/service/workmail"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type WorkMailAssociateDelegateToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailAssociateDelegateToResourceFuture) Get(ctx workflow.Context) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailAssociateMemberToGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailAssociateMemberToGroupFuture) Get(ctx workflow.Context) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCancelMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCancelMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCreateAliasFuture) Get(ctx workflow.Context) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCreateGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCreateGroupFuture) Get(ctx workflow.Context) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCreateOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCreateOrganizationFuture) Get(ctx workflow.Context) (*workmail.CreateOrganizationOutput, error) {
	var output workmail.CreateOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCreateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCreateResourceFuture) Get(ctx workflow.Context) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailCreateUserFuture) Get(ctx workflow.Context) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteAccessControlRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteAliasFuture) Get(ctx workflow.Context) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteGroupFuture) Get(ctx workflow.Context) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteOrganizationFuture) Get(ctx workflow.Context) (*workmail.DeleteOrganizationOutput, error) {
	var output workmail.DeleteOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteResourceFuture) Get(ctx workflow.Context) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeleteUserFuture) Get(ctx workflow.Context) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDeregisterFromWorkMailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDeregisterFromWorkMailFuture) Get(ctx workflow.Context) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDescribeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDescribeGroupFuture) Get(ctx workflow.Context) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDescribeMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDescribeMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDescribeOrganizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDescribeOrganizationFuture) Get(ctx workflow.Context) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDescribeResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDescribeResourceFuture) Get(ctx workflow.Context) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDescribeUserFuture) Get(ctx workflow.Context) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDisassociateDelegateFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDisassociateDelegateFromResourceFuture) Get(ctx workflow.Context) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailDisassociateMemberFromGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailDisassociateMemberFromGroupFuture) Get(ctx workflow.Context) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailGetAccessControlEffectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailGetAccessControlEffectFuture) Get(ctx workflow.Context) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailGetDefaultRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailGetDefaultRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailGetMailboxDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailGetMailboxDetailsFuture) Get(ctx workflow.Context) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListAccessControlRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListAccessControlRulesFuture) Get(ctx workflow.Context) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListAliasesFuture) Get(ctx workflow.Context) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListGroupMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListGroupMembersFuture) Get(ctx workflow.Context) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListGroupsFuture) Get(ctx workflow.Context) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListMailboxExportJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListMailboxExportJobsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListOrganizationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListOrganizationsFuture) Get(ctx workflow.Context) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListResourceDelegatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListResourceDelegatesFuture) Get(ctx workflow.Context) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListResourcesFuture) Get(ctx workflow.Context) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListTagsForResourceFuture) Get(ctx workflow.Context) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailListUsersFuture) Get(ctx workflow.Context) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailPutAccessControlRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailPutAccessControlRuleFuture) Get(ctx workflow.Context) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailPutMailboxPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailPutMailboxPermissionsFuture) Get(ctx workflow.Context) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailPutRetentionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailPutRetentionPolicyFuture) Get(ctx workflow.Context) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailRegisterToWorkMailFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailRegisterToWorkMailFuture) Get(ctx workflow.Context) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailResetPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailResetPasswordFuture) Get(ctx workflow.Context) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailStartMailboxExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailStartMailboxExportJobFuture) Get(ctx workflow.Context) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailTagResourceFuture) Get(ctx workflow.Context) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailUntagResourceFuture) Get(ctx workflow.Context) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailUpdateMailboxQuotaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailUpdateMailboxQuotaFuture) Get(ctx workflow.Context) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailUpdatePrimaryEmailAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailUpdatePrimaryEmailAddressFuture) Get(ctx workflow.Context) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WorkMailUpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WorkMailUpdateResourceFuture) Get(ctx workflow.Context) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDelegateToResource(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	var output workmail.AssociateDelegateToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateDelegateToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDelegateToResourceAsync(ctx workflow.Context, input *workmail.AssociateDelegateToResourceInput) *WorkMailAssociateDelegateToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateDelegateToResource", input)
	return &WorkMailAssociateDelegateToResourceFuture{Future: future}
}

func (a *stub) AssociateMemberToGroup(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	var output workmail.AssociateMemberToGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateMemberToGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateMemberToGroupAsync(ctx workflow.Context, input *workmail.AssociateMemberToGroupInput) *WorkMailAssociateMemberToGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-AssociateMemberToGroup", input)
	return &WorkMailAssociateMemberToGroupFuture{Future: future}
}

func (a *stub) CancelMailboxExportJob(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error) {
	var output workmail.CancelMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CancelMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelMailboxExportJobAsync(ctx workflow.Context, input *workmail.CancelMailboxExportJobInput) *WorkMailCancelMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CancelMailboxExportJob", input)
	return &WorkMailCancelMailboxExportJobFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	var output workmail.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *workmail.CreateAliasInput) *WorkMailCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateAlias", input)
	return &WorkMailCreateAliasFuture{Future: future}
}

func (a *stub) CreateGroup(ctx workflow.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	var output workmail.CreateGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGroupAsync(ctx workflow.Context, input *workmail.CreateGroupInput) *WorkMailCreateGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateGroup", input)
	return &WorkMailCreateGroupFuture{Future: future}
}

func (a *stub) CreateOrganization(ctx workflow.Context, input *workmail.CreateOrganizationInput) (*workmail.CreateOrganizationOutput, error) {
	var output workmail.CreateOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOrganizationAsync(ctx workflow.Context, input *workmail.CreateOrganizationInput) *WorkMailCreateOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateOrganization", input)
	return &WorkMailCreateOrganizationFuture{Future: future}
}

func (a *stub) CreateResource(ctx workflow.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	var output workmail.CreateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateResourceAsync(ctx workflow.Context, input *workmail.CreateResourceInput) *WorkMailCreateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateResource", input)
	return &WorkMailCreateResourceFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	var output workmail.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *workmail.CreateUserInput) *WorkMailCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-CreateUser", input)
	return &WorkMailCreateUserFuture{Future: future}
}

func (a *stub) DeleteAccessControlRule(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	var output workmail.DeleteAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessControlRuleAsync(ctx workflow.Context, input *workmail.DeleteAccessControlRuleInput) *WorkMailDeleteAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAccessControlRule", input)
	return &WorkMailDeleteAccessControlRuleFuture{Future: future}
}

func (a *stub) DeleteAlias(ctx workflow.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	var output workmail.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAliasAsync(ctx workflow.Context, input *workmail.DeleteAliasInput) *WorkMailDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteAlias", input)
	return &WorkMailDeleteAliasFuture{Future: future}
}

func (a *stub) DeleteGroup(ctx workflow.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	var output workmail.DeleteGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGroupAsync(ctx workflow.Context, input *workmail.DeleteGroupInput) *WorkMailDeleteGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteGroup", input)
	return &WorkMailDeleteGroupFuture{Future: future}
}

func (a *stub) DeleteMailboxPermissions(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	var output workmail.DeleteMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMailboxPermissionsAsync(ctx workflow.Context, input *workmail.DeleteMailboxPermissionsInput) *WorkMailDeleteMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteMailboxPermissions", input)
	return &WorkMailDeleteMailboxPermissionsFuture{Future: future}
}

func (a *stub) DeleteOrganization(ctx workflow.Context, input *workmail.DeleteOrganizationInput) (*workmail.DeleteOrganizationOutput, error) {
	var output workmail.DeleteOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOrganizationAsync(ctx workflow.Context, input *workmail.DeleteOrganizationInput) *WorkMailDeleteOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteOrganization", input)
	return &WorkMailDeleteOrganizationFuture{Future: future}
}

func (a *stub) DeleteResource(ctx workflow.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	var output workmail.DeleteResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourceAsync(ctx workflow.Context, input *workmail.DeleteResourceInput) *WorkMailDeleteResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteResource", input)
	return &WorkMailDeleteResourceFuture{Future: future}
}

func (a *stub) DeleteRetentionPolicy(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	var output workmail.DeleteRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRetentionPolicyAsync(ctx workflow.Context, input *workmail.DeleteRetentionPolicyInput) *WorkMailDeleteRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteRetentionPolicy", input)
	return &WorkMailDeleteRetentionPolicyFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	var output workmail.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *workmail.DeleteUserInput) *WorkMailDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeleteUser", input)
	return &WorkMailDeleteUserFuture{Future: future}
}

func (a *stub) DeregisterFromWorkMail(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	var output workmail.DeregisterFromWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DeregisterFromWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterFromWorkMailAsync(ctx workflow.Context, input *workmail.DeregisterFromWorkMailInput) *WorkMailDeregisterFromWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DeregisterFromWorkMail", input)
	return &WorkMailDeregisterFromWorkMailFuture{Future: future}
}

func (a *stub) DescribeGroup(ctx workflow.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	var output workmail.DescribeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGroupAsync(ctx workflow.Context, input *workmail.DescribeGroupInput) *WorkMailDescribeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeGroup", input)
	return &WorkMailDescribeGroupFuture{Future: future}
}

func (a *stub) DescribeMailboxExportJob(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error) {
	var output workmail.DescribeMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMailboxExportJobAsync(ctx workflow.Context, input *workmail.DescribeMailboxExportJobInput) *WorkMailDescribeMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeMailboxExportJob", input)
	return &WorkMailDescribeMailboxExportJobFuture{Future: future}
}

func (a *stub) DescribeOrganization(ctx workflow.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	var output workmail.DescribeOrganizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeOrganization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationAsync(ctx workflow.Context, input *workmail.DescribeOrganizationInput) *WorkMailDescribeOrganizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeOrganization", input)
	return &WorkMailDescribeOrganizationFuture{Future: future}
}

func (a *stub) DescribeResource(ctx workflow.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	var output workmail.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourceAsync(ctx workflow.Context, input *workmail.DescribeResourceInput) *WorkMailDescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeResource", input)
	return &WorkMailDescribeResourceFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	var output workmail.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *workmail.DescribeUserInput) *WorkMailDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DescribeUser", input)
	return &WorkMailDescribeUserFuture{Future: future}
}

func (a *stub) DisassociateDelegateFromResource(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	var output workmail.DisassociateDelegateFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateDelegateFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDelegateFromResourceAsync(ctx workflow.Context, input *workmail.DisassociateDelegateFromResourceInput) *WorkMailDisassociateDelegateFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateDelegateFromResource", input)
	return &WorkMailDisassociateDelegateFromResourceFuture{Future: future}
}

func (a *stub) DisassociateMemberFromGroup(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	var output workmail.DisassociateMemberFromGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateMemberFromGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateMemberFromGroupAsync(ctx workflow.Context, input *workmail.DisassociateMemberFromGroupInput) *WorkMailDisassociateMemberFromGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-DisassociateMemberFromGroup", input)
	return &WorkMailDisassociateMemberFromGroupFuture{Future: future}
}

func (a *stub) GetAccessControlEffect(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	var output workmail.GetAccessControlEffectOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetAccessControlEffect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessControlEffectAsync(ctx workflow.Context, input *workmail.GetAccessControlEffectInput) *WorkMailGetAccessControlEffectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetAccessControlEffect", input)
	return &WorkMailGetAccessControlEffectFuture{Future: future}
}

func (a *stub) GetDefaultRetentionPolicy(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	var output workmail.GetDefaultRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetDefaultRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDefaultRetentionPolicyAsync(ctx workflow.Context, input *workmail.GetDefaultRetentionPolicyInput) *WorkMailGetDefaultRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetDefaultRetentionPolicy", input)
	return &WorkMailGetDefaultRetentionPolicyFuture{Future: future}
}

func (a *stub) GetMailboxDetails(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	var output workmail.GetMailboxDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-GetMailboxDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMailboxDetailsAsync(ctx workflow.Context, input *workmail.GetMailboxDetailsInput) *WorkMailGetMailboxDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-GetMailboxDetails", input)
	return &WorkMailGetMailboxDetailsFuture{Future: future}
}

func (a *stub) ListAccessControlRules(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	var output workmail.ListAccessControlRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListAccessControlRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAccessControlRulesAsync(ctx workflow.Context, input *workmail.ListAccessControlRulesInput) *WorkMailListAccessControlRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListAccessControlRules", input)
	return &WorkMailListAccessControlRulesFuture{Future: future}
}

func (a *stub) ListAliases(ctx workflow.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	var output workmail.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAliasesAsync(ctx workflow.Context, input *workmail.ListAliasesInput) *WorkMailListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListAliases", input)
	return &WorkMailListAliasesFuture{Future: future}
}

func (a *stub) ListGroupMembers(ctx workflow.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	var output workmail.ListGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupMembersAsync(ctx workflow.Context, input *workmail.ListGroupMembersInput) *WorkMailListGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroupMembers", input)
	return &WorkMailListGroupMembersFuture{Future: future}
}

func (a *stub) ListGroups(ctx workflow.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	var output workmail.ListGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGroupsAsync(ctx workflow.Context, input *workmail.ListGroupsInput) *WorkMailListGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListGroups", input)
	return &WorkMailListGroupsFuture{Future: future}
}

func (a *stub) ListMailboxExportJobs(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error) {
	var output workmail.ListMailboxExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMailboxExportJobsAsync(ctx workflow.Context, input *workmail.ListMailboxExportJobsInput) *WorkMailListMailboxExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxExportJobs", input)
	return &WorkMailListMailboxExportJobsFuture{Future: future}
}

func (a *stub) ListMailboxPermissions(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	var output workmail.ListMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMailboxPermissionsAsync(ctx workflow.Context, input *workmail.ListMailboxPermissionsInput) *WorkMailListMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListMailboxPermissions", input)
	return &WorkMailListMailboxPermissionsFuture{Future: future}
}

func (a *stub) ListOrganizations(ctx workflow.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	var output workmail.ListOrganizationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListOrganizations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationsAsync(ctx workflow.Context, input *workmail.ListOrganizationsInput) *WorkMailListOrganizationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListOrganizations", input)
	return &WorkMailListOrganizationsFuture{Future: future}
}

func (a *stub) ListResourceDelegates(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	var output workmail.ListResourceDelegatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListResourceDelegates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceDelegatesAsync(ctx workflow.Context, input *workmail.ListResourceDelegatesInput) *WorkMailListResourceDelegatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListResourceDelegates", input)
	return &WorkMailListResourceDelegatesFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	var output workmail.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *workmail.ListResourcesInput) *WorkMailListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListResources", input)
	return &WorkMailListResourcesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	var output workmail.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *workmail.ListTagsForResourceInput) *WorkMailListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListTagsForResource", input)
	return &WorkMailListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	var output workmail.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *workmail.ListUsersInput) *WorkMailListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ListUsers", input)
	return &WorkMailListUsersFuture{Future: future}
}

func (a *stub) PutAccessControlRule(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	var output workmail.PutAccessControlRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutAccessControlRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAccessControlRuleAsync(ctx workflow.Context, input *workmail.PutAccessControlRuleInput) *WorkMailPutAccessControlRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutAccessControlRule", input)
	return &WorkMailPutAccessControlRuleFuture{Future: future}
}

func (a *stub) PutMailboxPermissions(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	var output workmail.PutMailboxPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutMailboxPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMailboxPermissionsAsync(ctx workflow.Context, input *workmail.PutMailboxPermissionsInput) *WorkMailPutMailboxPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutMailboxPermissions", input)
	return &WorkMailPutMailboxPermissionsFuture{Future: future}
}

func (a *stub) PutRetentionPolicy(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	var output workmail.PutRetentionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-PutRetentionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRetentionPolicyAsync(ctx workflow.Context, input *workmail.PutRetentionPolicyInput) *WorkMailPutRetentionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-PutRetentionPolicy", input)
	return &WorkMailPutRetentionPolicyFuture{Future: future}
}

func (a *stub) RegisterToWorkMail(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	var output workmail.RegisterToWorkMailOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-RegisterToWorkMail", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterToWorkMailAsync(ctx workflow.Context, input *workmail.RegisterToWorkMailInput) *WorkMailRegisterToWorkMailFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-RegisterToWorkMail", input)
	return &WorkMailRegisterToWorkMailFuture{Future: future}
}

func (a *stub) ResetPassword(ctx workflow.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	var output workmail.ResetPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-ResetPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetPasswordAsync(ctx workflow.Context, input *workmail.ResetPasswordInput) *WorkMailResetPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-ResetPassword", input)
	return &WorkMailResetPasswordFuture{Future: future}
}

func (a *stub) StartMailboxExportJob(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error) {
	var output workmail.StartMailboxExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-StartMailboxExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMailboxExportJobAsync(ctx workflow.Context, input *workmail.StartMailboxExportJobInput) *WorkMailStartMailboxExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-StartMailboxExportJob", input)
	return &WorkMailStartMailboxExportJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	var output workmail.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *workmail.TagResourceInput) *WorkMailTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-TagResource", input)
	return &WorkMailTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	var output workmail.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *workmail.UntagResourceInput) *WorkMailUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UntagResource", input)
	return &WorkMailUntagResourceFuture{Future: future}
}

func (a *stub) UpdateMailboxQuota(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	var output workmail.UpdateMailboxQuotaOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateMailboxQuota", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMailboxQuotaAsync(ctx workflow.Context, input *workmail.UpdateMailboxQuotaInput) *WorkMailUpdateMailboxQuotaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateMailboxQuota", input)
	return &WorkMailUpdateMailboxQuotaFuture{Future: future}
}

func (a *stub) UpdatePrimaryEmailAddress(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	var output workmail.UpdatePrimaryEmailAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdatePrimaryEmailAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePrimaryEmailAddressAsync(ctx workflow.Context, input *workmail.UpdatePrimaryEmailAddressInput) *WorkMailUpdatePrimaryEmailAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdatePrimaryEmailAddress", input)
	return &WorkMailUpdatePrimaryEmailAddressFuture{Future: future}
}

func (a *stub) UpdateResource(ctx workflow.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	var output workmail.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceAsync(ctx workflow.Context, input *workmail.UpdateResourceInput) *WorkMailUpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-workmail-UpdateResource", input)
	return &WorkMailUpdateResourceFuture{Future: future}
}
