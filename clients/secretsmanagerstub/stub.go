// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package secretsmanagerstub

import (
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelRotateSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelRotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSecretFuture) Get(ctx workflow.Context) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRandomPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRandomPasswordFuture) Get(ctx workflow.Context) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSecretValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSecretVersionIdsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSecretVersionIdsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSecretsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSecretsFuture) Get(ctx workflow.Context) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSecretValueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSecretValueFuture) Get(ctx workflow.Context) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RotateSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RotateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSecretFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSecretFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSecretVersionStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSecretVersionStageFuture) Get(ctx workflow.Context) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateResourcePolicyFuture) Get(ctx workflow.Context) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelRotateSecret(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	var output secretsmanager.CancelRotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-CancelRotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelRotateSecretAsync(ctx workflow.Context, input *secretsmanager.CancelRotateSecretInput) *CancelRotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-CancelRotateSecret", input)
	return &CancelRotateSecretFuture{Future: future}
}

func (a *stub) CreateSecret(ctx workflow.Context, input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	var output secretsmanager.CreateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-CreateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSecretAsync(ctx workflow.Context, input *secretsmanager.CreateSecretInput) *CreateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-CreateSecret", input)
	return &CreateSecretFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	var output secretsmanager.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.DeleteResourcePolicyInput) *DeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DeleteResourcePolicy", input)
	return &DeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteSecret(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	var output secretsmanager.DeleteSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DeleteSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSecretAsync(ctx workflow.Context, input *secretsmanager.DeleteSecretInput) *DeleteSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DeleteSecret", input)
	return &DeleteSecretFuture{Future: future}
}

func (a *stub) DescribeSecret(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	var output secretsmanager.DescribeSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DescribeSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSecretAsync(ctx workflow.Context, input *secretsmanager.DescribeSecretInput) *DescribeSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-DescribeSecret", input)
	return &DescribeSecretFuture{Future: future}
}

func (a *stub) GetRandomPassword(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	var output secretsmanager.GetRandomPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetRandomPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRandomPasswordAsync(ctx workflow.Context, input *secretsmanager.GetRandomPasswordInput) *GetRandomPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetRandomPassword", input)
	return &GetRandomPasswordFuture{Future: future}
}

func (a *stub) GetResourcePolicy(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	var output secretsmanager.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.GetResourcePolicyInput) *GetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetResourcePolicy", input)
	return &GetResourcePolicyFuture{Future: future}
}

func (a *stub) GetSecretValue(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	var output secretsmanager.GetSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSecretValueAsync(ctx workflow.Context, input *secretsmanager.GetSecretValueInput) *GetSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-GetSecretValue", input)
	return &GetSecretValueFuture{Future: future}
}

func (a *stub) ListSecretVersionIds(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	var output secretsmanager.ListSecretVersionIdsOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ListSecretVersionIds", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecretVersionIdsAsync(ctx workflow.Context, input *secretsmanager.ListSecretVersionIdsInput) *ListSecretVersionIdsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ListSecretVersionIds", input)
	return &ListSecretVersionIdsFuture{Future: future}
}

func (a *stub) ListSecrets(ctx workflow.Context, input *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	var output secretsmanager.ListSecretsOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ListSecrets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecretsAsync(ctx workflow.Context, input *secretsmanager.ListSecretsInput) *ListSecretsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ListSecrets", input)
	return &ListSecretsFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	var output secretsmanager.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.PutResourcePolicyInput) *PutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-PutResourcePolicy", input)
	return &PutResourcePolicyFuture{Future: future}
}

func (a *stub) PutSecretValue(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	var output secretsmanager.PutSecretValueOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-PutSecretValue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSecretValueAsync(ctx workflow.Context, input *secretsmanager.PutSecretValueInput) *PutSecretValueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-PutSecretValue", input)
	return &PutSecretValueFuture{Future: future}
}

func (a *stub) RestoreSecret(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	var output secretsmanager.RestoreSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-RestoreSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreSecretAsync(ctx workflow.Context, input *secretsmanager.RestoreSecretInput) *RestoreSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-RestoreSecret", input)
	return &RestoreSecretFuture{Future: future}
}

func (a *stub) RotateSecret(ctx workflow.Context, input *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	var output secretsmanager.RotateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-RotateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RotateSecretAsync(ctx workflow.Context, input *secretsmanager.RotateSecretInput) *RotateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-RotateSecret", input)
	return &RotateSecretFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	var output secretsmanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *secretsmanager.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	var output secretsmanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *secretsmanager.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateSecret(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	var output secretsmanager.UpdateSecretOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UpdateSecret", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecretAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretInput) *UpdateSecretFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UpdateSecret", input)
	return &UpdateSecretFuture{Future: future}
}

func (a *stub) UpdateSecretVersionStage(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	var output secretsmanager.UpdateSecretVersionStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UpdateSecretVersionStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecretVersionStageAsync(ctx workflow.Context, input *secretsmanager.UpdateSecretVersionStageInput) *UpdateSecretVersionStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-UpdateSecretVersionStage", input)
	return &UpdateSecretVersionStageFuture{Future: future}
}

func (a *stub) ValidateResourcePolicy(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	var output secretsmanager.ValidateResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ValidateResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateResourcePolicyAsync(ctx workflow.Context, input *secretsmanager.ValidateResourcePolicyInput) *ValidateResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-secretsmanager-ValidateResourcePolicy", input)
	return &ValidateResourcePolicyFuture{Future: future}
}
