// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package simpledbstub

import (
	"github.com/aws/aws-sdk-go/service/simpledb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchDeleteAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteAttributesFuture) Get(ctx workflow.Context) (*simpledb.BatchDeleteAttributesOutput, error) {
	var output simpledb.BatchDeleteAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchPutAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchPutAttributesFuture) Get(ctx workflow.Context) (*simpledb.BatchPutAttributesOutput, error) {
	var output simpledb.BatchPutAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDomainFuture) Get(ctx workflow.Context) (*simpledb.CreateDomainOutput, error) {
	var output simpledb.CreateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAttributesFuture) Get(ctx workflow.Context) (*simpledb.DeleteAttributesOutput, error) {
	var output simpledb.DeleteAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDomainFuture) Get(ctx workflow.Context) (*simpledb.DeleteDomainOutput, error) {
	var output simpledb.DeleteDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DomainMetadataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DomainMetadataFuture) Get(ctx workflow.Context) (*simpledb.DomainMetadataOutput, error) {
	var output simpledb.DomainMetadataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAttributesFuture) Get(ctx workflow.Context) (*simpledb.GetAttributesOutput, error) {
	var output simpledb.GetAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*simpledb.ListDomainsOutput, error) {
	var output simpledb.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutAttributesFuture) Get(ctx workflow.Context) (*simpledb.PutAttributesOutput, error) {
	var output simpledb.PutAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SelectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SelectFuture) Get(ctx workflow.Context) (*simpledb.SelectOutput, error) {
	var output simpledb.SelectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteAttributes(ctx workflow.Context, input *simpledb.BatchDeleteAttributesInput) (*simpledb.BatchDeleteAttributesOutput, error) {
	var output simpledb.BatchDeleteAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-BatchDeleteAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteAttributesAsync(ctx workflow.Context, input *simpledb.BatchDeleteAttributesInput) *BatchDeleteAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-BatchDeleteAttributes", input)
	return &BatchDeleteAttributesFuture{Future: future}
}

func (a *stub) BatchPutAttributes(ctx workflow.Context, input *simpledb.BatchPutAttributesInput) (*simpledb.BatchPutAttributesOutput, error) {
	var output simpledb.BatchPutAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-BatchPutAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutAttributesAsync(ctx workflow.Context, input *simpledb.BatchPutAttributesInput) *BatchPutAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-BatchPutAttributes", input)
	return &BatchPutAttributesFuture{Future: future}
}

func (a *stub) CreateDomain(ctx workflow.Context, input *simpledb.CreateDomainInput) (*simpledb.CreateDomainOutput, error) {
	var output simpledb.CreateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-CreateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainAsync(ctx workflow.Context, input *simpledb.CreateDomainInput) *CreateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-CreateDomain", input)
	return &CreateDomainFuture{Future: future}
}

func (a *stub) DeleteAttributes(ctx workflow.Context, input *simpledb.DeleteAttributesInput) (*simpledb.DeleteAttributesOutput, error) {
	var output simpledb.DeleteAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-DeleteAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAttributesAsync(ctx workflow.Context, input *simpledb.DeleteAttributesInput) *DeleteAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-DeleteAttributes", input)
	return &DeleteAttributesFuture{Future: future}
}

func (a *stub) DeleteDomain(ctx workflow.Context, input *simpledb.DeleteDomainInput) (*simpledb.DeleteDomainOutput, error) {
	var output simpledb.DeleteDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-DeleteDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainAsync(ctx workflow.Context, input *simpledb.DeleteDomainInput) *DeleteDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-DeleteDomain", input)
	return &DeleteDomainFuture{Future: future}
}

func (a *stub) DomainMetadata(ctx workflow.Context, input *simpledb.DomainMetadataInput) (*simpledb.DomainMetadataOutput, error) {
	var output simpledb.DomainMetadataOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-DomainMetadata", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DomainMetadataAsync(ctx workflow.Context, input *simpledb.DomainMetadataInput) *DomainMetadataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-DomainMetadata", input)
	return &DomainMetadataFuture{Future: future}
}

func (a *stub) GetAttributes(ctx workflow.Context, input *simpledb.GetAttributesInput) (*simpledb.GetAttributesOutput, error) {
	var output simpledb.GetAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-GetAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAttributesAsync(ctx workflow.Context, input *simpledb.GetAttributesInput) *GetAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-GetAttributes", input)
	return &GetAttributesFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *simpledb.ListDomainsInput) (*simpledb.ListDomainsOutput, error) {
	var output simpledb.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *simpledb.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) PutAttributes(ctx workflow.Context, input *simpledb.PutAttributesInput) (*simpledb.PutAttributesOutput, error) {
	var output simpledb.PutAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-PutAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutAttributesAsync(ctx workflow.Context, input *simpledb.PutAttributesInput) *PutAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-PutAttributes", input)
	return &PutAttributesFuture{Future: future}
}

func (a *stub) Select(ctx workflow.Context, input *simpledb.SelectInput) (*simpledb.SelectOutput, error) {
	var output simpledb.SelectOutput
	err := workflow.ExecuteActivity(ctx, "aws-simpledb-Select", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SelectAsync(ctx workflow.Context, input *simpledb.SelectInput) *SelectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-simpledb-Select", input)
	return &SelectFuture{Future: future}
}
