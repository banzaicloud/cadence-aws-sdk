// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package applicationautoscalingstub

import (
	"github.com/aws/aws-sdk-go/service/applicationautoscaling"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DeleteScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScalingPolicyFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeleteScalingPolicyOutput, error) {
	var output applicationautoscaling.DeleteScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteScheduledActionFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeleteScheduledActionOutput, error) {
	var output applicationautoscaling.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterScalableTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterScalableTargetFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeregisterScalableTargetOutput, error) {
	var output applicationautoscaling.DeregisterScalableTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalableTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalableTargetsFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalableTargetsOutput, error) {
	var output applicationautoscaling.DescribeScalableTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingActivitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingActivitiesFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalingActivitiesOutput, error) {
	var output applicationautoscaling.DescribeScalingActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScalingPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScalingPoliciesFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalingPoliciesOutput, error) {
	var output applicationautoscaling.DescribeScalingPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduledActionsFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScheduledActionsOutput, error) {
	var output applicationautoscaling.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutScalingPolicyFuture) Get(ctx workflow.Context) (*applicationautoscaling.PutScalingPolicyOutput, error) {
	var output applicationautoscaling.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutScheduledActionFuture) Get(ctx workflow.Context) (*applicationautoscaling.PutScheduledActionOutput, error) {
	var output applicationautoscaling.PutScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterScalableTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterScalableTargetFuture) Get(ctx workflow.Context) (*applicationautoscaling.RegisterScalableTargetOutput, error) {
	var output applicationautoscaling.RegisterScalableTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicy(ctx workflow.Context, input *applicationautoscaling.DeleteScalingPolicyInput) (*applicationautoscaling.DeleteScalingPolicyOutput, error) {
	var output applicationautoscaling.DeleteScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicyAsync(ctx workflow.Context, input *applicationautoscaling.DeleteScalingPolicyInput) *DeleteScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScalingPolicy", input)
	return &DeleteScalingPolicyFuture{Future: future}
}

func (a *stub) DeleteScheduledAction(ctx workflow.Context, input *applicationautoscaling.DeleteScheduledActionInput) (*applicationautoscaling.DeleteScheduledActionOutput, error) {
	var output applicationautoscaling.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledActionAsync(ctx workflow.Context, input *applicationautoscaling.DeleteScheduledActionInput) *DeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScheduledAction", input)
	return &DeleteScheduledActionFuture{Future: future}
}

func (a *stub) DeregisterScalableTarget(ctx workflow.Context, input *applicationautoscaling.DeregisterScalableTargetInput) (*applicationautoscaling.DeregisterScalableTargetOutput, error) {
	var output applicationautoscaling.DeregisterScalableTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeregisterScalableTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterScalableTargetAsync(ctx workflow.Context, input *applicationautoscaling.DeregisterScalableTargetInput) *DeregisterScalableTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeregisterScalableTarget", input)
	return &DeregisterScalableTargetFuture{Future: future}
}

func (a *stub) DescribeScalableTargets(ctx workflow.Context, input *applicationautoscaling.DescribeScalableTargetsInput) (*applicationautoscaling.DescribeScalableTargetsOutput, error) {
	var output applicationautoscaling.DescribeScalableTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalableTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalableTargetsAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalableTargetsInput) *DescribeScalableTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalableTargets", input)
	return &DescribeScalableTargetsFuture{Future: future}
}

func (a *stub) DescribeScalingActivities(ctx workflow.Context, input *applicationautoscaling.DescribeScalingActivitiesInput) (*applicationautoscaling.DescribeScalingActivitiesOutput, error) {
	var output applicationautoscaling.DescribeScalingActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingActivitiesAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalingActivitiesInput) *DescribeScalingActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingActivities", input)
	return &DescribeScalingActivitiesFuture{Future: future}
}

func (a *stub) DescribeScalingPolicies(ctx workflow.Context, input *applicationautoscaling.DescribeScalingPoliciesInput) (*applicationautoscaling.DescribeScalingPoliciesOutput, error) {
	var output applicationautoscaling.DescribeScalingPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingPoliciesAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalingPoliciesInput) *DescribeScalingPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingPolicies", input)
	return &DescribeScalingPoliciesFuture{Future: future}
}

func (a *stub) DescribeScheduledActions(ctx workflow.Context, input *applicationautoscaling.DescribeScheduledActionsInput) (*applicationautoscaling.DescribeScheduledActionsOutput, error) {
	var output applicationautoscaling.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledActionsAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScheduledActionsInput) *DescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScheduledActions", input)
	return &DescribeScheduledActionsFuture{Future: future}
}

func (a *stub) PutScalingPolicy(ctx workflow.Context, input *applicationautoscaling.PutScalingPolicyInput) (*applicationautoscaling.PutScalingPolicyOutput, error) {
	var output applicationautoscaling.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScalingPolicyAsync(ctx workflow.Context, input *applicationautoscaling.PutScalingPolicyInput) *PutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScalingPolicy", input)
	return &PutScalingPolicyFuture{Future: future}
}

func (a *stub) PutScheduledAction(ctx workflow.Context, input *applicationautoscaling.PutScheduledActionInput) (*applicationautoscaling.PutScheduledActionOutput, error) {
	var output applicationautoscaling.PutScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScheduledActionAsync(ctx workflow.Context, input *applicationautoscaling.PutScheduledActionInput) *PutScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScheduledAction", input)
	return &PutScheduledActionFuture{Future: future}
}

func (a *stub) RegisterScalableTarget(ctx workflow.Context, input *applicationautoscaling.RegisterScalableTargetInput) (*applicationautoscaling.RegisterScalableTargetOutput, error) {
	var output applicationautoscaling.RegisterScalableTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-RegisterScalableTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterScalableTargetAsync(ctx workflow.Context, input *applicationautoscaling.RegisterScalableTargetInput) *RegisterScalableTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-RegisterScalableTarget", input)
	return &RegisterScalableTargetFuture{Future: future}
}
