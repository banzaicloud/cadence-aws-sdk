// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package applicationautoscalingstub

import (
	"github.com/aws/aws-sdk-go/service/applicationautoscaling"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ApplicationAutoScalingDeleteScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDeleteScalingPolicyFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeleteScalingPolicyOutput, error) {
	var output applicationautoscaling.DeleteScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDeleteScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDeleteScheduledActionFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeleteScheduledActionOutput, error) {
	var output applicationautoscaling.DeleteScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDeregisterScalableTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDeregisterScalableTargetFuture) Get(ctx workflow.Context) (*applicationautoscaling.DeregisterScalableTargetOutput, error) {
	var output applicationautoscaling.DeregisterScalableTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDescribeScalableTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDescribeScalableTargetsFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalableTargetsOutput, error) {
	var output applicationautoscaling.DescribeScalableTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDescribeScalingActivitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDescribeScalingActivitiesFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalingActivitiesOutput, error) {
	var output applicationautoscaling.DescribeScalingActivitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDescribeScalingPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDescribeScalingPoliciesFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScalingPoliciesOutput, error) {
	var output applicationautoscaling.DescribeScalingPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingDescribeScheduledActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingDescribeScheduledActionsFuture) Get(ctx workflow.Context) (*applicationautoscaling.DescribeScheduledActionsOutput, error) {
	var output applicationautoscaling.DescribeScheduledActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingPutScalingPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingPutScalingPolicyFuture) Get(ctx workflow.Context) (*applicationautoscaling.PutScalingPolicyOutput, error) {
	var output applicationautoscaling.PutScalingPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingPutScheduledActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingPutScheduledActionFuture) Get(ctx workflow.Context) (*applicationautoscaling.PutScheduledActionOutput, error) {
	var output applicationautoscaling.PutScheduledActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplicationAutoScalingRegisterScalableTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplicationAutoScalingRegisterScalableTargetFuture) Get(ctx workflow.Context) (*applicationautoscaling.RegisterScalableTargetOutput, error) {
	var output applicationautoscaling.RegisterScalableTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicy(ctx workflow.Context, input *applicationautoscaling.DeleteScalingPolicyInput) (*applicationautoscaling.DeleteScalingPolicyOutput, error) {
	var output applicationautoscaling.DeleteScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScalingPolicyAsync(ctx workflow.Context, input *applicationautoscaling.DeleteScalingPolicyInput) *ApplicationAutoScalingDeleteScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScalingPolicy", input)
	return &ApplicationAutoScalingDeleteScalingPolicyFuture{Future: future}
}

func (a *stub) DeleteScheduledAction(ctx workflow.Context, input *applicationautoscaling.DeleteScheduledActionInput) (*applicationautoscaling.DeleteScheduledActionOutput, error) {
	var output applicationautoscaling.DeleteScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledActionAsync(ctx workflow.Context, input *applicationautoscaling.DeleteScheduledActionInput) *ApplicationAutoScalingDeleteScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeleteScheduledAction", input)
	return &ApplicationAutoScalingDeleteScheduledActionFuture{Future: future}
}

func (a *stub) DeregisterScalableTarget(ctx workflow.Context, input *applicationautoscaling.DeregisterScalableTargetInput) (*applicationautoscaling.DeregisterScalableTargetOutput, error) {
	var output applicationautoscaling.DeregisterScalableTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeregisterScalableTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterScalableTargetAsync(ctx workflow.Context, input *applicationautoscaling.DeregisterScalableTargetInput) *ApplicationAutoScalingDeregisterScalableTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DeregisterScalableTarget", input)
	return &ApplicationAutoScalingDeregisterScalableTargetFuture{Future: future}
}

func (a *stub) DescribeScalableTargets(ctx workflow.Context, input *applicationautoscaling.DescribeScalableTargetsInput) (*applicationautoscaling.DescribeScalableTargetsOutput, error) {
	var output applicationautoscaling.DescribeScalableTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalableTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalableTargetsAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalableTargetsInput) *ApplicationAutoScalingDescribeScalableTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalableTargets", input)
	return &ApplicationAutoScalingDescribeScalableTargetsFuture{Future: future}
}

func (a *stub) DescribeScalingActivities(ctx workflow.Context, input *applicationautoscaling.DescribeScalingActivitiesInput) (*applicationautoscaling.DescribeScalingActivitiesOutput, error) {
	var output applicationautoscaling.DescribeScalingActivitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingActivities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingActivitiesAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalingActivitiesInput) *ApplicationAutoScalingDescribeScalingActivitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingActivities", input)
	return &ApplicationAutoScalingDescribeScalingActivitiesFuture{Future: future}
}

func (a *stub) DescribeScalingPolicies(ctx workflow.Context, input *applicationautoscaling.DescribeScalingPoliciesInput) (*applicationautoscaling.DescribeScalingPoliciesOutput, error) {
	var output applicationautoscaling.DescribeScalingPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScalingPoliciesAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScalingPoliciesInput) *ApplicationAutoScalingDescribeScalingPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScalingPolicies", input)
	return &ApplicationAutoScalingDescribeScalingPoliciesFuture{Future: future}
}

func (a *stub) DescribeScheduledActions(ctx workflow.Context, input *applicationautoscaling.DescribeScheduledActionsInput) (*applicationautoscaling.DescribeScheduledActionsOutput, error) {
	var output applicationautoscaling.DescribeScheduledActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScheduledActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledActionsAsync(ctx workflow.Context, input *applicationautoscaling.DescribeScheduledActionsInput) *ApplicationAutoScalingDescribeScheduledActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-DescribeScheduledActions", input)
	return &ApplicationAutoScalingDescribeScheduledActionsFuture{Future: future}
}

func (a *stub) PutScalingPolicy(ctx workflow.Context, input *applicationautoscaling.PutScalingPolicyInput) (*applicationautoscaling.PutScalingPolicyOutput, error) {
	var output applicationautoscaling.PutScalingPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScalingPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScalingPolicyAsync(ctx workflow.Context, input *applicationautoscaling.PutScalingPolicyInput) *ApplicationAutoScalingPutScalingPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScalingPolicy", input)
	return &ApplicationAutoScalingPutScalingPolicyFuture{Future: future}
}

func (a *stub) PutScheduledAction(ctx workflow.Context, input *applicationautoscaling.PutScheduledActionInput) (*applicationautoscaling.PutScheduledActionOutput, error) {
	var output applicationautoscaling.PutScheduledActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScheduledAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutScheduledActionAsync(ctx workflow.Context, input *applicationautoscaling.PutScheduledActionInput) *ApplicationAutoScalingPutScheduledActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-PutScheduledAction", input)
	return &ApplicationAutoScalingPutScheduledActionFuture{Future: future}
}

func (a *stub) RegisterScalableTarget(ctx workflow.Context, input *applicationautoscaling.RegisterScalableTargetInput) (*applicationautoscaling.RegisterScalableTargetOutput, error) {
	var output applicationautoscaling.RegisterScalableTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-RegisterScalableTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterScalableTargetAsync(ctx workflow.Context, input *applicationautoscaling.RegisterScalableTargetInput) *ApplicationAutoScalingRegisterScalableTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-applicationautoscaling-RegisterScalableTarget", input)
	return &ApplicationAutoScalingRegisterScalableTargetFuture{Future: future}
}
