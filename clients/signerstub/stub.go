// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package signerstub

import (
	"github.com/aws/aws-sdk-go/service/signer"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelSigningProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSigningProfileFuture) Get(ctx workflow.Context) (*signer.CancelSigningProfileOutput, error) {
	var output signer.CancelSigningProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSigningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSigningJobFuture) Get(ctx workflow.Context) (*signer.DescribeSigningJobOutput, error) {
	var output signer.DescribeSigningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSigningPlatformFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSigningPlatformFuture) Get(ctx workflow.Context) (*signer.GetSigningPlatformOutput, error) {
	var output signer.GetSigningPlatformOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSigningProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSigningProfileFuture) Get(ctx workflow.Context) (*signer.GetSigningProfileOutput, error) {
	var output signer.GetSigningProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSigningJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSigningJobsFuture) Get(ctx workflow.Context) (*signer.ListSigningJobsOutput, error) {
	var output signer.ListSigningJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSigningPlatformsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSigningPlatformsFuture) Get(ctx workflow.Context) (*signer.ListSigningPlatformsOutput, error) {
	var output signer.ListSigningPlatformsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSigningProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSigningProfilesFuture) Get(ctx workflow.Context) (*signer.ListSigningProfilesOutput, error) {
	var output signer.ListSigningProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*signer.ListTagsForResourceOutput, error) {
	var output signer.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutSigningProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutSigningProfileFuture) Get(ctx workflow.Context) (*signer.PutSigningProfileOutput, error) {
	var output signer.PutSigningProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSigningJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSigningJobFuture) Get(ctx workflow.Context) (*signer.StartSigningJobOutput, error) {
	var output signer.StartSigningJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*signer.TagResourceOutput, error) {
	var output signer.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*signer.UntagResourceOutput, error) {
	var output signer.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSigningProfile(ctx workflow.Context, input *signer.CancelSigningProfileInput) (*signer.CancelSigningProfileOutput, error) {
	var output signer.CancelSigningProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-CancelSigningProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSigningProfileAsync(ctx workflow.Context, input *signer.CancelSigningProfileInput) *CancelSigningProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-CancelSigningProfile", input)
	return &CancelSigningProfileFuture{Future: future}
}

func (a *stub) DescribeSigningJob(ctx workflow.Context, input *signer.DescribeSigningJobInput) (*signer.DescribeSigningJobOutput, error) {
	var output signer.DescribeSigningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-DescribeSigningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSigningJobAsync(ctx workflow.Context, input *signer.DescribeSigningJobInput) *DescribeSigningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-DescribeSigningJob", input)
	return &DescribeSigningJobFuture{Future: future}
}

func (a *stub) GetSigningPlatform(ctx workflow.Context, input *signer.GetSigningPlatformInput) (*signer.GetSigningPlatformOutput, error) {
	var output signer.GetSigningPlatformOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-GetSigningPlatform", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSigningPlatformAsync(ctx workflow.Context, input *signer.GetSigningPlatformInput) *GetSigningPlatformFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-GetSigningPlatform", input)
	return &GetSigningPlatformFuture{Future: future}
}

func (a *stub) GetSigningProfile(ctx workflow.Context, input *signer.GetSigningProfileInput) (*signer.GetSigningProfileOutput, error) {
	var output signer.GetSigningProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-GetSigningProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSigningProfileAsync(ctx workflow.Context, input *signer.GetSigningProfileInput) *GetSigningProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-GetSigningProfile", input)
	return &GetSigningProfileFuture{Future: future}
}

func (a *stub) ListSigningJobs(ctx workflow.Context, input *signer.ListSigningJobsInput) (*signer.ListSigningJobsOutput, error) {
	var output signer.ListSigningJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSigningJobsAsync(ctx workflow.Context, input *signer.ListSigningJobsInput) *ListSigningJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningJobs", input)
	return &ListSigningJobsFuture{Future: future}
}

func (a *stub) ListSigningPlatforms(ctx workflow.Context, input *signer.ListSigningPlatformsInput) (*signer.ListSigningPlatformsOutput, error) {
	var output signer.ListSigningPlatformsOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningPlatforms", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSigningPlatformsAsync(ctx workflow.Context, input *signer.ListSigningPlatformsInput) *ListSigningPlatformsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningPlatforms", input)
	return &ListSigningPlatformsFuture{Future: future}
}

func (a *stub) ListSigningProfiles(ctx workflow.Context, input *signer.ListSigningProfilesInput) (*signer.ListSigningProfilesOutput, error) {
	var output signer.ListSigningProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSigningProfilesAsync(ctx workflow.Context, input *signer.ListSigningProfilesInput) *ListSigningProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-ListSigningProfiles", input)
	return &ListSigningProfilesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *signer.ListTagsForResourceInput) (*signer.ListTagsForResourceOutput, error) {
	var output signer.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *signer.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutSigningProfile(ctx workflow.Context, input *signer.PutSigningProfileInput) (*signer.PutSigningProfileOutput, error) {
	var output signer.PutSigningProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-PutSigningProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutSigningProfileAsync(ctx workflow.Context, input *signer.PutSigningProfileInput) *PutSigningProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-PutSigningProfile", input)
	return &PutSigningProfileFuture{Future: future}
}

func (a *stub) StartSigningJob(ctx workflow.Context, input *signer.StartSigningJobInput) (*signer.StartSigningJobOutput, error) {
	var output signer.StartSigningJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-StartSigningJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSigningJobAsync(ctx workflow.Context, input *signer.StartSigningJobInput) *StartSigningJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-StartSigningJob", input)
	return &StartSigningJobFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *signer.TagResourceInput) (*signer.TagResourceOutput, error) {
	var output signer.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *signer.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *signer.UntagResourceInput) (*signer.UntagResourceOutput, error) {
	var output signer.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-signer-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *signer.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) WaitUntilSuccessfulSigningJob(ctx workflow.Context, input *signer.DescribeSigningJobInput) error {
	return workflow.ExecuteActivity(ctx, "aws-signer-WaitUntilSuccessfulSigningJob", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSuccessfulSigningJobAsync(ctx workflow.Context, input *signer.DescribeSigningJobInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-signer-WaitUntilSuccessfulSigningJob", input)
	return clients.NewVoidFuture(future)
}
