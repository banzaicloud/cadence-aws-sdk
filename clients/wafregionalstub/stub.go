// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package wafregionalstub

import (
	"github.com/aws/aws-sdk-go/service/waf"
	"github.com/aws/aws-sdk-go/service/wafregional"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type WAFRegionalAssociateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalAssociateWebACLFuture) Get(ctx workflow.Context) (*wafregional.AssociateWebACLOutput, error) {
	var output wafregional.AssociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateIPSetFuture) Get(ctx workflow.Context) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateRuleFuture) Get(ctx workflow.Context) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateRuleGroupFuture) Get(ctx workflow.Context) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateWebACLFuture) Get(ctx workflow.Context) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateWebACLMigrationStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateWebACLMigrationStackFuture) Get(ctx workflow.Context) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalCreateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalCreateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteByteMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteIPSetFuture) Get(ctx workflow.Context) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeletePermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeletePermissionPolicyFuture) Get(ctx workflow.Context) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteRuleGroupFuture) Get(ctx workflow.Context) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteWebACLFuture) Get(ctx workflow.Context) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDeleteXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDeleteXssMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalDisassociateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalDisassociateWebACLFuture) Get(ctx workflow.Context) (*wafregional.DisassociateWebACLOutput, error) {
	var output wafregional.DisassociateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetByteMatchSetFuture) Get(ctx workflow.Context) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetChangeTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetChangeTokenFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetChangeTokenStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetChangeTokenStatusFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetIPSetFuture) Get(ctx workflow.Context) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRateBasedRuleManagedKeysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRateBasedRuleManagedKeysFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRuleFuture) Get(ctx workflow.Context) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetRuleGroupFuture) Get(ctx workflow.Context) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetSampledRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetSampledRequestsFuture) Get(ctx workflow.Context) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetWebACLFuture) Get(ctx workflow.Context) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetWebACLForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetWebACLForResourceFuture) Get(ctx workflow.Context) (*wafregional.GetWebACLForResourceOutput, error) {
	var output wafregional.GetWebACLForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalGetXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalGetXssMatchSetFuture) Get(ctx workflow.Context) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListActivatedRulesInRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListActivatedRulesInRuleGroupFuture) Get(ctx workflow.Context) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListByteMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListByteMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListGeoMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListGeoMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListIPSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListIPSetsFuture) Get(ctx workflow.Context) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListLoggingConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListLoggingConfigurationsFuture) Get(ctx workflow.Context) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListRateBasedRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListRateBasedRulesFuture) Get(ctx workflow.Context) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListRegexMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListRegexMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListRegexPatternSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListRegexPatternSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListResourcesForWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListResourcesForWebACLFuture) Get(ctx workflow.Context) (*wafregional.ListResourcesForWebACLOutput, error) {
	var output wafregional.ListResourcesForWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListRulesFuture) Get(ctx workflow.Context) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListSizeConstraintSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListSizeConstraintSetsFuture) Get(ctx workflow.Context) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListSqlInjectionMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListSqlInjectionMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListSubscribedRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListSubscribedRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListTagsForResourceFuture) Get(ctx workflow.Context) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListWebACLsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListWebACLsFuture) Get(ctx workflow.Context) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalListXssMatchSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalListXssMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalPutLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalPutLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalPutPermissionPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalPutPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalTagResourceFuture) Get(ctx workflow.Context) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUntagResourceFuture) Get(ctx workflow.Context) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateByteMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateGeoMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateIPSetFuture) Get(ctx workflow.Context) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateRateBasedRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateRegexMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateRegexPatternSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateRuleGroupFuture) Get(ctx workflow.Context) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateSizeConstraintSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateSqlInjectionMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateWebACLFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateWebACLFuture) Get(ctx workflow.Context) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFRegionalUpdateXssMatchSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WAFRegionalUpdateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWebACL(ctx workflow.Context, input *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error) {
	var output wafregional.AssociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-AssociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateWebACLAsync(ctx workflow.Context, input *wafregional.AssociateWebACLInput) *WAFRegionalAssociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-AssociateWebACL", input)
	return &WAFRegionalAssociateWebACLFuture{Future: future}
}

func (a *stub) CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WAFRegionalCreateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateByteMatchSet", input)
	return &WAFRegionalCreateByteMatchSetFuture{Future: future}
}

func (a *stub) CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WAFRegionalCreateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateGeoMatchSet", input)
	return &WAFRegionalCreateGeoMatchSetFuture{Future: future}
}

func (a *stub) CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WAFRegionalCreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateIPSet", input)
	return &WAFRegionalCreateIPSetFuture{Future: future}
}

func (a *stub) CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WAFRegionalCreateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRateBasedRule", input)
	return &WAFRegionalCreateRateBasedRuleFuture{Future: future}
}

func (a *stub) CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WAFRegionalCreateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRegexMatchSet", input)
	return &WAFRegionalCreateRegexMatchSetFuture{Future: future}
}

func (a *stub) CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WAFRegionalCreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRegexPatternSet", input)
	return &WAFRegionalCreateRegexPatternSetFuture{Future: future}
}

func (a *stub) CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WAFRegionalCreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRule", input)
	return &WAFRegionalCreateRuleFuture{Future: future}
}

func (a *stub) CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WAFRegionalCreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateRuleGroup", input)
	return &WAFRegionalCreateRuleGroupFuture{Future: future}
}

func (a *stub) CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WAFRegionalCreateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateSizeConstraintSet", input)
	return &WAFRegionalCreateSizeConstraintSetFuture{Future: future}
}

func (a *stub) CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WAFRegionalCreateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateSqlInjectionMatchSet", input)
	return &WAFRegionalCreateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WAFRegionalCreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateWebACL", input)
	return &WAFRegionalCreateWebACLFuture{Future: future}
}

func (a *stub) CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateWebACLMigrationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WAFRegionalCreateWebACLMigrationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateWebACLMigrationStack", input)
	return &WAFRegionalCreateWebACLMigrationStackFuture{Future: future}
}

func (a *stub) CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WAFRegionalCreateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-CreateXssMatchSet", input)
	return &WAFRegionalCreateXssMatchSetFuture{Future: future}
}

func (a *stub) DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WAFRegionalDeleteByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteByteMatchSet", input)
	return &WAFRegionalDeleteByteMatchSetFuture{Future: future}
}

func (a *stub) DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WAFRegionalDeleteGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteGeoMatchSet", input)
	return &WAFRegionalDeleteGeoMatchSetFuture{Future: future}
}

func (a *stub) DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WAFRegionalDeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteIPSet", input)
	return &WAFRegionalDeleteIPSetFuture{Future: future}
}

func (a *stub) DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WAFRegionalDeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteLoggingConfiguration", input)
	return &WAFRegionalDeleteLoggingConfigurationFuture{Future: future}
}

func (a *stub) DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WAFRegionalDeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeletePermissionPolicy", input)
	return &WAFRegionalDeletePermissionPolicyFuture{Future: future}
}

func (a *stub) DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WAFRegionalDeleteRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRateBasedRule", input)
	return &WAFRegionalDeleteRateBasedRuleFuture{Future: future}
}

func (a *stub) DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WAFRegionalDeleteRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRegexMatchSet", input)
	return &WAFRegionalDeleteRegexMatchSetFuture{Future: future}
}

func (a *stub) DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WAFRegionalDeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRegexPatternSet", input)
	return &WAFRegionalDeleteRegexPatternSetFuture{Future: future}
}

func (a *stub) DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WAFRegionalDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRule", input)
	return &WAFRegionalDeleteRuleFuture{Future: future}
}

func (a *stub) DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WAFRegionalDeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteRuleGroup", input)
	return &WAFRegionalDeleteRuleGroupFuture{Future: future}
}

func (a *stub) DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WAFRegionalDeleteSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteSizeConstraintSet", input)
	return &WAFRegionalDeleteSizeConstraintSetFuture{Future: future}
}

func (a *stub) DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WAFRegionalDeleteSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteSqlInjectionMatchSet", input)
	return &WAFRegionalDeleteSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WAFRegionalDeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteWebACL", input)
	return &WAFRegionalDeleteWebACLFuture{Future: future}
}

func (a *stub) DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WAFRegionalDeleteXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DeleteXssMatchSet", input)
	return &WAFRegionalDeleteXssMatchSetFuture{Future: future}
}

func (a *stub) DisassociateWebACL(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error) {
	var output wafregional.DisassociateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-DisassociateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateWebACLAsync(ctx workflow.Context, input *wafregional.DisassociateWebACLInput) *WAFRegionalDisassociateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-DisassociateWebACL", input)
	return &WAFRegionalDisassociateWebACLFuture{Future: future}
}

func (a *stub) GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WAFRegionalGetByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetByteMatchSet", input)
	return &WAFRegionalGetByteMatchSetFuture{Future: future}
}

func (a *stub) GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetChangeToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WAFRegionalGetChangeTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetChangeToken", input)
	return &WAFRegionalGetChangeTokenFuture{Future: future}
}

func (a *stub) GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetChangeTokenStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WAFRegionalGetChangeTokenStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetChangeTokenStatus", input)
	return &WAFRegionalGetChangeTokenStatusFuture{Future: future}
}

func (a *stub) GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WAFRegionalGetGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetGeoMatchSet", input)
	return &WAFRegionalGetGeoMatchSetFuture{Future: future}
}

func (a *stub) GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WAFRegionalGetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetIPSet", input)
	return &WAFRegionalGetIPSetFuture{Future: future}
}

func (a *stub) GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WAFRegionalGetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetLoggingConfiguration", input)
	return &WAFRegionalGetLoggingConfigurationFuture{Future: future}
}

func (a *stub) GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WAFRegionalGetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetPermissionPolicy", input)
	return &WAFRegionalGetPermissionPolicyFuture{Future: future}
}

func (a *stub) GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WAFRegionalGetRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRateBasedRule", input)
	return &WAFRegionalGetRateBasedRuleFuture{Future: future}
}

func (a *stub) GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRateBasedRuleManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WAFRegionalGetRateBasedRuleManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRateBasedRuleManagedKeys", input)
	return &WAFRegionalGetRateBasedRuleManagedKeysFuture{Future: future}
}

func (a *stub) GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WAFRegionalGetRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRegexMatchSet", input)
	return &WAFRegionalGetRegexMatchSetFuture{Future: future}
}

func (a *stub) GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WAFRegionalGetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRegexPatternSet", input)
	return &WAFRegionalGetRegexPatternSetFuture{Future: future}
}

func (a *stub) GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WAFRegionalGetRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRule", input)
	return &WAFRegionalGetRuleFuture{Future: future}
}

func (a *stub) GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WAFRegionalGetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetRuleGroup", input)
	return &WAFRegionalGetRuleGroupFuture{Future: future}
}

func (a *stub) GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WAFRegionalGetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSampledRequests", input)
	return &WAFRegionalGetSampledRequestsFuture{Future: future}
}

func (a *stub) GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WAFRegionalGetSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSizeConstraintSet", input)
	return &WAFRegionalGetSizeConstraintSetFuture{Future: future}
}

func (a *stub) GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WAFRegionalGetSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetSqlInjectionMatchSet", input)
	return &WAFRegionalGetSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WAFRegionalGetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetWebACL", input)
	return &WAFRegionalGetWebACLFuture{Future: future}
}

func (a *stub) GetWebACLForResource(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error) {
	var output wafregional.GetWebACLForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetWebACLForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWebACLForResourceAsync(ctx workflow.Context, input *wafregional.GetWebACLForResourceInput) *WAFRegionalGetWebACLForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetWebACLForResource", input)
	return &WAFRegionalGetWebACLForResourceFuture{Future: future}
}

func (a *stub) GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-GetXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WAFRegionalGetXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-GetXssMatchSet", input)
	return &WAFRegionalGetXssMatchSetFuture{Future: future}
}

func (a *stub) ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListActivatedRulesInRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WAFRegionalListActivatedRulesInRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListActivatedRulesInRuleGroup", input)
	return &WAFRegionalListActivatedRulesInRuleGroupFuture{Future: future}
}

func (a *stub) ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListByteMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WAFRegionalListByteMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListByteMatchSets", input)
	return &WAFRegionalListByteMatchSetsFuture{Future: future}
}

func (a *stub) ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListGeoMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WAFRegionalListGeoMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListGeoMatchSets", input)
	return &WAFRegionalListGeoMatchSetsFuture{Future: future}
}

func (a *stub) ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WAFRegionalListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListIPSets", input)
	return &WAFRegionalListIPSetsFuture{Future: future}
}

func (a *stub) ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WAFRegionalListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListLoggingConfigurations", input)
	return &WAFRegionalListLoggingConfigurationsFuture{Future: future}
}

func (a *stub) ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRateBasedRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WAFRegionalListRateBasedRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRateBasedRules", input)
	return &WAFRegionalListRateBasedRulesFuture{Future: future}
}

func (a *stub) ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRegexMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WAFRegionalListRegexMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRegexMatchSets", input)
	return &WAFRegionalListRegexMatchSetsFuture{Future: future}
}

func (a *stub) ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WAFRegionalListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRegexPatternSets", input)
	return &WAFRegionalListRegexPatternSetsFuture{Future: future}
}

func (a *stub) ListResourcesForWebACL(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) (*wafregional.ListResourcesForWebACLOutput, error) {
	var output wafregional.ListResourcesForWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListResourcesForWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesForWebACLAsync(ctx workflow.Context, input *wafregional.ListResourcesForWebACLInput) *WAFRegionalListResourcesForWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListResourcesForWebACL", input)
	return &WAFRegionalListResourcesForWebACLFuture{Future: future}
}

func (a *stub) ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WAFRegionalListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRuleGroups", input)
	return &WAFRegionalListRuleGroupsFuture{Future: future}
}

func (a *stub) ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WAFRegionalListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListRules", input)
	return &WAFRegionalListRulesFuture{Future: future}
}

func (a *stub) ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSizeConstraintSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WAFRegionalListSizeConstraintSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSizeConstraintSets", input)
	return &WAFRegionalListSizeConstraintSetsFuture{Future: future}
}

func (a *stub) ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSqlInjectionMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WAFRegionalListSqlInjectionMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSqlInjectionMatchSets", input)
	return &WAFRegionalListSqlInjectionMatchSetsFuture{Future: future}
}

func (a *stub) ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSubscribedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WAFRegionalListSubscribedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListSubscribedRuleGroups", input)
	return &WAFRegionalListSubscribedRuleGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WAFRegionalListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListTagsForResource", input)
	return &WAFRegionalListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WAFRegionalListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListWebACLs", input)
	return &WAFRegionalListWebACLsFuture{Future: future}
}

func (a *stub) ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-ListXssMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WAFRegionalListXssMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-ListXssMatchSets", input)
	return &WAFRegionalListXssMatchSetsFuture{Future: future}
}

func (a *stub) PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WAFRegionalPutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-PutLoggingConfiguration", input)
	return &WAFRegionalPutLoggingConfigurationFuture{Future: future}
}

func (a *stub) PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WAFRegionalPutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-PutPermissionPolicy", input)
	return &WAFRegionalPutPermissionPolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WAFRegionalTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-TagResource", input)
	return &WAFRegionalTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WAFRegionalUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UntagResource", input)
	return &WAFRegionalUntagResourceFuture{Future: future}
}

func (a *stub) UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WAFRegionalUpdateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateByteMatchSet", input)
	return &WAFRegionalUpdateByteMatchSetFuture{Future: future}
}

func (a *stub) UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WAFRegionalUpdateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateGeoMatchSet", input)
	return &WAFRegionalUpdateGeoMatchSetFuture{Future: future}
}

func (a *stub) UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WAFRegionalUpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateIPSet", input)
	return &WAFRegionalUpdateIPSetFuture{Future: future}
}

func (a *stub) UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WAFRegionalUpdateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRateBasedRule", input)
	return &WAFRegionalUpdateRateBasedRuleFuture{Future: future}
}

func (a *stub) UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WAFRegionalUpdateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRegexMatchSet", input)
	return &WAFRegionalUpdateRegexMatchSetFuture{Future: future}
}

func (a *stub) UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WAFRegionalUpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRegexPatternSet", input)
	return &WAFRegionalUpdateRegexPatternSetFuture{Future: future}
}

func (a *stub) UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WAFRegionalUpdateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRule", input)
	return &WAFRegionalUpdateRuleFuture{Future: future}
}

func (a *stub) UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WAFRegionalUpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateRuleGroup", input)
	return &WAFRegionalUpdateRuleGroupFuture{Future: future}
}

func (a *stub) UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WAFRegionalUpdateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateSizeConstraintSet", input)
	return &WAFRegionalUpdateSizeConstraintSetFuture{Future: future}
}

func (a *stub) UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WAFRegionalUpdateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateSqlInjectionMatchSet", input)
	return &WAFRegionalUpdateSqlInjectionMatchSetFuture{Future: future}
}

func (a *stub) UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WAFRegionalUpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateWebACL", input)
	return &WAFRegionalUpdateWebACLFuture{Future: future}
}

func (a *stub) UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WAFRegionalUpdateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-wafregional-UpdateXssMatchSet", input)
	return &WAFRegionalUpdateXssMatchSetFuture{Future: future}
}
