// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package locationservicestub

import (
	"github.com/aws/aws-sdk-go/service/locationservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	AssociateTrackerConsumer(ctx workflow.Context, input *locationservice.AssociateTrackerConsumerInput) (*locationservice.AssociateTrackerConsumerOutput, error)
	AssociateTrackerConsumerAsync(ctx workflow.Context, input *locationservice.AssociateTrackerConsumerInput) *AssociateTrackerConsumerFuture

	BatchDeleteGeofence(ctx workflow.Context, input *locationservice.BatchDeleteGeofenceInput) (*locationservice.BatchDeleteGeofenceOutput, error)
	BatchDeleteGeofenceAsync(ctx workflow.Context, input *locationservice.BatchDeleteGeofenceInput) *BatchDeleteGeofenceFuture

	BatchEvaluateGeofences(ctx workflow.Context, input *locationservice.BatchEvaluateGeofencesInput) (*locationservice.BatchEvaluateGeofencesOutput, error)
	BatchEvaluateGeofencesAsync(ctx workflow.Context, input *locationservice.BatchEvaluateGeofencesInput) *BatchEvaluateGeofencesFuture

	BatchGetDevicePosition(ctx workflow.Context, input *locationservice.BatchGetDevicePositionInput) (*locationservice.BatchGetDevicePositionOutput, error)
	BatchGetDevicePositionAsync(ctx workflow.Context, input *locationservice.BatchGetDevicePositionInput) *BatchGetDevicePositionFuture

	BatchPutGeofence(ctx workflow.Context, input *locationservice.BatchPutGeofenceInput) (*locationservice.BatchPutGeofenceOutput, error)
	BatchPutGeofenceAsync(ctx workflow.Context, input *locationservice.BatchPutGeofenceInput) *BatchPutGeofenceFuture

	BatchUpdateDevicePosition(ctx workflow.Context, input *locationservice.BatchUpdateDevicePositionInput) (*locationservice.BatchUpdateDevicePositionOutput, error)
	BatchUpdateDevicePositionAsync(ctx workflow.Context, input *locationservice.BatchUpdateDevicePositionInput) *BatchUpdateDevicePositionFuture

	CreateGeofenceCollection(ctx workflow.Context, input *locationservice.CreateGeofenceCollectionInput) (*locationservice.CreateGeofenceCollectionOutput, error)
	CreateGeofenceCollectionAsync(ctx workflow.Context, input *locationservice.CreateGeofenceCollectionInput) *CreateGeofenceCollectionFuture

	CreateMap(ctx workflow.Context, input *locationservice.CreateMapInput) (*locationservice.CreateMapOutput, error)
	CreateMapAsync(ctx workflow.Context, input *locationservice.CreateMapInput) *CreateMapFuture

	CreatePlaceIndex(ctx workflow.Context, input *locationservice.CreatePlaceIndexInput) (*locationservice.CreatePlaceIndexOutput, error)
	CreatePlaceIndexAsync(ctx workflow.Context, input *locationservice.CreatePlaceIndexInput) *CreatePlaceIndexFuture

	CreateTracker(ctx workflow.Context, input *locationservice.CreateTrackerInput) (*locationservice.CreateTrackerOutput, error)
	CreateTrackerAsync(ctx workflow.Context, input *locationservice.CreateTrackerInput) *CreateTrackerFuture

	DeleteGeofenceCollection(ctx workflow.Context, input *locationservice.DeleteGeofenceCollectionInput) (*locationservice.DeleteGeofenceCollectionOutput, error)
	DeleteGeofenceCollectionAsync(ctx workflow.Context, input *locationservice.DeleteGeofenceCollectionInput) *DeleteGeofenceCollectionFuture

	DeleteMap(ctx workflow.Context, input *locationservice.DeleteMapInput) (*locationservice.DeleteMapOutput, error)
	DeleteMapAsync(ctx workflow.Context, input *locationservice.DeleteMapInput) *DeleteMapFuture

	DeletePlaceIndex(ctx workflow.Context, input *locationservice.DeletePlaceIndexInput) (*locationservice.DeletePlaceIndexOutput, error)
	DeletePlaceIndexAsync(ctx workflow.Context, input *locationservice.DeletePlaceIndexInput) *DeletePlaceIndexFuture

	DeleteTracker(ctx workflow.Context, input *locationservice.DeleteTrackerInput) (*locationservice.DeleteTrackerOutput, error)
	DeleteTrackerAsync(ctx workflow.Context, input *locationservice.DeleteTrackerInput) *DeleteTrackerFuture

	DescribeGeofenceCollection(ctx workflow.Context, input *locationservice.DescribeGeofenceCollectionInput) (*locationservice.DescribeGeofenceCollectionOutput, error)
	DescribeGeofenceCollectionAsync(ctx workflow.Context, input *locationservice.DescribeGeofenceCollectionInput) *DescribeGeofenceCollectionFuture

	DescribeMap(ctx workflow.Context, input *locationservice.DescribeMapInput) (*locationservice.DescribeMapOutput, error)
	DescribeMapAsync(ctx workflow.Context, input *locationservice.DescribeMapInput) *DescribeMapFuture

	DescribePlaceIndex(ctx workflow.Context, input *locationservice.DescribePlaceIndexInput) (*locationservice.DescribePlaceIndexOutput, error)
	DescribePlaceIndexAsync(ctx workflow.Context, input *locationservice.DescribePlaceIndexInput) *DescribePlaceIndexFuture

	DescribeTracker(ctx workflow.Context, input *locationservice.DescribeTrackerInput) (*locationservice.DescribeTrackerOutput, error)
	DescribeTrackerAsync(ctx workflow.Context, input *locationservice.DescribeTrackerInput) *DescribeTrackerFuture

	DisassociateTrackerConsumer(ctx workflow.Context, input *locationservice.DisassociateTrackerConsumerInput) (*locationservice.DisassociateTrackerConsumerOutput, error)
	DisassociateTrackerConsumerAsync(ctx workflow.Context, input *locationservice.DisassociateTrackerConsumerInput) *DisassociateTrackerConsumerFuture

	GetDevicePosition(ctx workflow.Context, input *locationservice.GetDevicePositionInput) (*locationservice.GetDevicePositionOutput, error)
	GetDevicePositionAsync(ctx workflow.Context, input *locationservice.GetDevicePositionInput) *GetDevicePositionFuture

	GetDevicePositionHistory(ctx workflow.Context, input *locationservice.GetDevicePositionHistoryInput) (*locationservice.GetDevicePositionHistoryOutput, error)
	GetDevicePositionHistoryAsync(ctx workflow.Context, input *locationservice.GetDevicePositionHistoryInput) *GetDevicePositionHistoryFuture

	GetGeofence(ctx workflow.Context, input *locationservice.GetGeofenceInput) (*locationservice.GetGeofenceOutput, error)
	GetGeofenceAsync(ctx workflow.Context, input *locationservice.GetGeofenceInput) *GetGeofenceFuture

	GetMapGlyphs(ctx workflow.Context, input *locationservice.GetMapGlyphsInput) (*locationservice.GetMapGlyphsOutput, error)
	GetMapGlyphsAsync(ctx workflow.Context, input *locationservice.GetMapGlyphsInput) *GetMapGlyphsFuture

	GetMapSprites(ctx workflow.Context, input *locationservice.GetMapSpritesInput) (*locationservice.GetMapSpritesOutput, error)
	GetMapSpritesAsync(ctx workflow.Context, input *locationservice.GetMapSpritesInput) *GetMapSpritesFuture

	GetMapStyleDescriptor(ctx workflow.Context, input *locationservice.GetMapStyleDescriptorInput) (*locationservice.GetMapStyleDescriptorOutput, error)
	GetMapStyleDescriptorAsync(ctx workflow.Context, input *locationservice.GetMapStyleDescriptorInput) *GetMapStyleDescriptorFuture

	GetMapTile(ctx workflow.Context, input *locationservice.GetMapTileInput) (*locationservice.GetMapTileOutput, error)
	GetMapTileAsync(ctx workflow.Context, input *locationservice.GetMapTileInput) *GetMapTileFuture

	ListGeofenceCollections(ctx workflow.Context, input *locationservice.ListGeofenceCollectionsInput) (*locationservice.ListGeofenceCollectionsOutput, error)
	ListGeofenceCollectionsAsync(ctx workflow.Context, input *locationservice.ListGeofenceCollectionsInput) *ListGeofenceCollectionsFuture

	ListGeofences(ctx workflow.Context, input *locationservice.ListGeofencesInput) (*locationservice.ListGeofencesOutput, error)
	ListGeofencesAsync(ctx workflow.Context, input *locationservice.ListGeofencesInput) *ListGeofencesFuture

	ListMaps(ctx workflow.Context, input *locationservice.ListMapsInput) (*locationservice.ListMapsOutput, error)
	ListMapsAsync(ctx workflow.Context, input *locationservice.ListMapsInput) *ListMapsFuture

	ListPlaceIndexes(ctx workflow.Context, input *locationservice.ListPlaceIndexesInput) (*locationservice.ListPlaceIndexesOutput, error)
	ListPlaceIndexesAsync(ctx workflow.Context, input *locationservice.ListPlaceIndexesInput) *ListPlaceIndexesFuture

	ListTrackerConsumers(ctx workflow.Context, input *locationservice.ListTrackerConsumersInput) (*locationservice.ListTrackerConsumersOutput, error)
	ListTrackerConsumersAsync(ctx workflow.Context, input *locationservice.ListTrackerConsumersInput) *ListTrackerConsumersFuture

	ListTrackers(ctx workflow.Context, input *locationservice.ListTrackersInput) (*locationservice.ListTrackersOutput, error)
	ListTrackersAsync(ctx workflow.Context, input *locationservice.ListTrackersInput) *ListTrackersFuture

	PutGeofence(ctx workflow.Context, input *locationservice.PutGeofenceInput) (*locationservice.PutGeofenceOutput, error)
	PutGeofenceAsync(ctx workflow.Context, input *locationservice.PutGeofenceInput) *PutGeofenceFuture

	SearchPlaceIndexForPosition(ctx workflow.Context, input *locationservice.SearchPlaceIndexForPositionInput) (*locationservice.SearchPlaceIndexForPositionOutput, error)
	SearchPlaceIndexForPositionAsync(ctx workflow.Context, input *locationservice.SearchPlaceIndexForPositionInput) *SearchPlaceIndexForPositionFuture

	SearchPlaceIndexForText(ctx workflow.Context, input *locationservice.SearchPlaceIndexForTextInput) (*locationservice.SearchPlaceIndexForTextOutput, error)
	SearchPlaceIndexForTextAsync(ctx workflow.Context, input *locationservice.SearchPlaceIndexForTextInput) *SearchPlaceIndexForTextFuture
}

func NewClient() Client {
	return &stub{}
}
