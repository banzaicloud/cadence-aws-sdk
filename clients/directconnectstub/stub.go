// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package directconnectstub

import (
	"github.com/aws/aws-sdk-go/service/directconnect"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DirectConnectAcceptDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAcceptDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAllocateConnectionOnInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAllocateConnectionOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAllocateHostedConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAllocateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAllocatePrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAllocatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAllocatePublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAllocatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAllocateTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAllocateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAssociateConnectionWithLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAssociateConnectionWithLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAssociateHostedConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAssociateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectAssociateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectAssociateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectConfirmConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectConfirmConnectionFuture) Get(ctx workflow.Context) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectConfirmPrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectConfirmPrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectConfirmPublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectConfirmPublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectConfirmTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectConfirmTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateBGPPeerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateDirectConnectGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreatePrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreatePublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectCreateTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectCreateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteBGPPeerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteDirectConnectGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteInterconnectFuture) Get(ctx workflow.Context) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDeleteVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDeleteVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeConnectionLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeConnectionLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeConnectionsOnInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeConnectionsOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeDirectConnectGatewayAssociationProposalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeDirectConnectGatewayAssociationProposalsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeDirectConnectGatewayAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeDirectConnectGatewayAssociationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeDirectConnectGatewayAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeDirectConnectGatewayAttachmentsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeDirectConnectGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeDirectConnectGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeHostedConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeHostedConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeInterconnectLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeInterconnectLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeInterconnectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeInterconnectsFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeLagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeLagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeLoaFuture) Get(ctx workflow.Context) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeLocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeLocationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeTagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeVirtualGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeVirtualGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDescribeVirtualInterfacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDescribeVirtualInterfacesFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectDisassociateConnectionFromLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectDisassociateConnectionFromLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectListVirtualInterfaceTestHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectListVirtualInterfaceTestHistoryFuture) Get(ctx workflow.Context) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectStartBgpFailoverTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectStartBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectStopBgpFailoverTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectStopBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectTagResourceFuture) Get(ctx workflow.Context) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectUntagResourceFuture) Get(ctx workflow.Context) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectUpdateDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectUpdateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectUpdateLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectUpdateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectConnectUpdateVirtualInterfaceAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectConnectUpdateVirtualInterfaceAttributesFuture) Get(ctx workflow.Context) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AcceptDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) *DirectConnectAcceptDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AcceptDirectConnectGatewayAssociationProposal", input)
	return &DirectConnectAcceptDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) AllocateConnectionOnInterconnect(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateConnectionOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateConnectionOnInterconnectAsync(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) *DirectConnectAllocateConnectionOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateConnectionOnInterconnect", input)
	return &DirectConnectAllocateConnectionOnInterconnectFuture{Future: future}
}

func (a *stub) AllocateHostedConnection(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) *DirectConnectAllocateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateHostedConnection", input)
	return &DirectConnectAllocateHostedConnectionFuture{Future: future}
}

func (a *stub) AllocatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) *DirectConnectAllocatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePrivateVirtualInterface", input)
	return &DirectConnectAllocatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) AllocatePublicVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) *DirectConnectAllocatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePublicVirtualInterface", input)
	return &DirectConnectAllocatePublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) AllocateTransitVirtualInterface(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) *DirectConnectAllocateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateTransitVirtualInterface", input)
	return &DirectConnectAllocateTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) AssociateConnectionWithLag(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateConnectionWithLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionWithLagAsync(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) *DirectConnectAssociateConnectionWithLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateConnectionWithLag", input)
	return &DirectConnectAssociateConnectionWithLagFuture{Future: future}
}

func (a *stub) AssociateHostedConnection(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) *DirectConnectAssociateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateHostedConnection", input)
	return &DirectConnectAssociateHostedConnectionFuture{Future: future}
}

func (a *stub) AssociateVirtualInterface(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) *DirectConnectAssociateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateVirtualInterface", input)
	return &DirectConnectAssociateVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmConnection(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmConnectionAsync(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) *DirectConnectConfirmConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmConnection", input)
	return &DirectConnectConfirmConnectionFuture{Future: future}
}

func (a *stub) ConfirmPrivateVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmPrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) *DirectConnectConfirmPrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPrivateVirtualInterface", input)
	return &DirectConnectConfirmPrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmPublicVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmPublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) *DirectConnectConfirmPublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPublicVirtualInterface", input)
	return &DirectConnectConfirmPublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmTransitVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) *DirectConnectConfirmTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmTransitVirtualInterface", input)
	return &DirectConnectConfirmTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreateBGPPeer(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBGPPeerAsync(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) *DirectConnectCreateBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateBGPPeer", input)
	return &DirectConnectCreateBGPPeerFuture{Future: future}
}

func (a *stub) CreateConnection(ctx workflow.Context, input *directconnect.CreateConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAsync(ctx workflow.Context, input *directconnect.CreateConnectionInput) *DirectConnectCreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateConnection", input)
	return &DirectConnectCreateConnectionFuture{Future: future}
}

func (a *stub) CreateDirectConnectGateway(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) *DirectConnectCreateDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGateway", input)
	return &DirectConnectCreateDirectConnectGatewayFuture{Future: future}
}

func (a *stub) CreateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) *DirectConnectCreateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociation", input)
	return &DirectConnectCreateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) CreateDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) *DirectConnectCreateDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociationProposal", input)
	return &DirectConnectCreateDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) CreateInterconnect(ctx workflow.Context, input *directconnect.CreateInterconnectInput) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInterconnectAsync(ctx workflow.Context, input *directconnect.CreateInterconnectInput) *DirectConnectCreateInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateInterconnect", input)
	return &DirectConnectCreateInterconnectFuture{Future: future}
}

func (a *stub) CreateLag(ctx workflow.Context, input *directconnect.CreateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLagAsync(ctx workflow.Context, input *directconnect.CreateLagInput) *DirectConnectCreateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateLag", input)
	return &DirectConnectCreateLagFuture{Future: future}
}

func (a *stub) CreatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) *DirectConnectCreatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePrivateVirtualInterface", input)
	return &DirectConnectCreatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreatePublicVirtualInterface(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) *DirectConnectCreatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePublicVirtualInterface", input)
	return &DirectConnectCreatePublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreateTransitVirtualInterface(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) *DirectConnectCreateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateTransitVirtualInterface", input)
	return &DirectConnectCreateTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) DeleteBGPPeer(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBGPPeerAsync(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) *DirectConnectDeleteBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteBGPPeer", input)
	return &DirectConnectDeleteBGPPeerFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *directconnect.DeleteConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *directconnect.DeleteConnectionInput) *DirectConnectDeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteConnection", input)
	return &DirectConnectDeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGateway(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) *DirectConnectDeleteDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGateway", input)
	return &DirectConnectDeleteDirectConnectGatewayFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) *DirectConnectDeleteDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociation", input)
	return &DirectConnectDeleteDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) *DirectConnectDeleteDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociationProposal", input)
	return &DirectConnectDeleteDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) DeleteInterconnect(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInterconnectAsync(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) *DirectConnectDeleteInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteInterconnect", input)
	return &DirectConnectDeleteInterconnectFuture{Future: future}
}

func (a *stub) DeleteLag(ctx workflow.Context, input *directconnect.DeleteLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLagAsync(ctx workflow.Context, input *directconnect.DeleteLagInput) *DirectConnectDeleteLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteLag", input)
	return &DirectConnectDeleteLagFuture{Future: future}
}

func (a *stub) DeleteVirtualInterface(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) *DirectConnectDeleteVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteVirtualInterface", input)
	return &DirectConnectDeleteVirtualInterfaceFuture{Future: future}
}

func (a *stub) DescribeConnectionLoa(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionLoaAsync(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) *DirectConnectDescribeConnectionLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionLoa", input)
	return &DirectConnectDescribeConnectionLoaFuture{Future: future}
}

func (a *stub) DescribeConnections(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) *DirectConnectDescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnections", input)
	return &DirectConnectDescribeConnectionsFuture{Future: future}
}

func (a *stub) DescribeConnectionsOnInterconnect(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionsOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsOnInterconnectAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) *DirectConnectDescribeConnectionsOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionsOnInterconnect", input)
	return &DirectConnectDescribeConnectionsOnInterconnectFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAssociationProposals(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociationProposals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAssociationProposalsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) *DirectConnectDescribeDirectConnectGatewayAssociationProposalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociationProposals", input)
	return &DirectConnectDescribeDirectConnectGatewayAssociationProposalsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAssociations(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAssociationsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) *DirectConnectDescribeDirectConnectGatewayAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociations", input)
	return &DirectConnectDescribeDirectConnectGatewayAssociationsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAttachments(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAttachmentsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) *DirectConnectDescribeDirectConnectGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAttachments", input)
	return &DirectConnectDescribeDirectConnectGatewayAttachmentsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGateways(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) *DirectConnectDescribeDirectConnectGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGateways", input)
	return &DirectConnectDescribeDirectConnectGatewaysFuture{Future: future}
}

func (a *stub) DescribeHostedConnections(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeHostedConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHostedConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) *DirectConnectDescribeHostedConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeHostedConnections", input)
	return &DirectConnectDescribeHostedConnectionsFuture{Future: future}
}

func (a *stub) DescribeInterconnectLoa(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnectLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInterconnectLoaAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) *DirectConnectDescribeInterconnectLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnectLoa", input)
	return &DirectConnectDescribeInterconnectLoaFuture{Future: future}
}

func (a *stub) DescribeInterconnects(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInterconnectsAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) *DirectConnectDescribeInterconnectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnects", input)
	return &DirectConnectDescribeInterconnectsFuture{Future: future}
}

func (a *stub) DescribeLags(ctx workflow.Context, input *directconnect.DescribeLagsInput) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLagsAsync(ctx workflow.Context, input *directconnect.DescribeLagsInput) *DirectConnectDescribeLagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLags", input)
	return &DirectConnectDescribeLagsFuture{Future: future}
}

func (a *stub) DescribeLoa(ctx workflow.Context, input *directconnect.DescribeLoaInput) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoaAsync(ctx workflow.Context, input *directconnect.DescribeLoaInput) *DirectConnectDescribeLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLoa", input)
	return &DirectConnectDescribeLoaFuture{Future: future}
}

func (a *stub) DescribeLocations(ctx workflow.Context, input *directconnect.DescribeLocationsInput) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationsAsync(ctx workflow.Context, input *directconnect.DescribeLocationsInput) *DirectConnectDescribeLocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLocations", input)
	return &DirectConnectDescribeLocationsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *directconnect.DescribeTagsInput) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *directconnect.DescribeTagsInput) *DirectConnectDescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeTags", input)
	return &DirectConnectDescribeTagsFuture{Future: future}
}

func (a *stub) DescribeVirtualGateways(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) *DirectConnectDescribeVirtualGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualGateways", input)
	return &DirectConnectDescribeVirtualGatewaysFuture{Future: future}
}

func (a *stub) DescribeVirtualInterfaces(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualInterfacesAsync(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) *DirectConnectDescribeVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualInterfaces", input)
	return &DirectConnectDescribeVirtualInterfacesFuture{Future: future}
}

func (a *stub) DisassociateConnectionFromLag(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DisassociateConnectionFromLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateConnectionFromLagAsync(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) *DirectConnectDisassociateConnectionFromLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DisassociateConnectionFromLag", input)
	return &DirectConnectDisassociateConnectionFromLagFuture{Future: future}
}

func (a *stub) ListVirtualInterfaceTestHistory(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ListVirtualInterfaceTestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualInterfaceTestHistoryAsync(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) *DirectConnectListVirtualInterfaceTestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ListVirtualInterfaceTestHistory", input)
	return &DirectConnectListVirtualInterfaceTestHistoryFuture{Future: future}
}

func (a *stub) StartBgpFailoverTest(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-StartBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) *DirectConnectStartBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-StartBgpFailoverTest", input)
	return &DirectConnectStartBgpFailoverTestFuture{Future: future}
}

func (a *stub) StopBgpFailoverTest(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-StopBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) *DirectConnectStopBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-StopBgpFailoverTest", input)
	return &DirectConnectStopBgpFailoverTestFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *directconnect.TagResourceInput) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *directconnect.TagResourceInput) *DirectConnectTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-TagResource", input)
	return &DirectConnectTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *directconnect.UntagResourceInput) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *directconnect.UntagResourceInput) *DirectConnectUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UntagResource", input)
	return &DirectConnectUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) *DirectConnectUpdateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateDirectConnectGatewayAssociation", input)
	return &DirectConnectUpdateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) UpdateLag(ctx workflow.Context, input *directconnect.UpdateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLagAsync(ctx workflow.Context, input *directconnect.UpdateLagInput) *DirectConnectUpdateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateLag", input)
	return &DirectConnectUpdateLagFuture{Future: future}
}

func (a *stub) UpdateVirtualInterfaceAttributes(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateVirtualInterfaceAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualInterfaceAttributesAsync(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) *DirectConnectUpdateVirtualInterfaceAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateVirtualInterfaceAttributes", input)
	return &DirectConnectUpdateVirtualInterfaceAttributesFuture{Future: future}
}
