// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package directconnectstub

import (
	"github.com/aws/aws-sdk-go/service/directconnect"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocateConnectionOnInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateConnectionOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocateHostedConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocatePrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocatePublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocateTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateConnectionWithLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateConnectionWithLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateHostedConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateHostedConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmConnectionFuture) Get(ctx workflow.Context) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmPrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmPrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmPublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmPublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBGPPeerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectConnectGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePrivateVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePrivateVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePublicVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePublicVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBGPPeerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBGPPeerFuture) Get(ctx workflow.Context) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConnectionFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectConnectGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectConnectGatewayFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectConnectGatewayAssociationProposalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectConnectGatewayAssociationProposalFuture) Get(ctx workflow.Context) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInterconnectFuture) Get(ctx workflow.Context) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVirtualInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVirtualInterfaceFuture) Get(ctx workflow.Context) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConnectionsOnInterconnectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConnectionsOnInterconnectFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectConnectGatewayAssociationProposalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectConnectGatewayAssociationProposalsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectConnectGatewayAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectConnectGatewayAssociationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectConnectGatewayAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectConnectGatewayAttachmentsFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectConnectGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectConnectGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHostedConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHostedConnectionsFuture) Get(ctx workflow.Context) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInterconnectLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInterconnectLoaFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInterconnectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInterconnectsFuture) Get(ctx workflow.Context) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoaFuture) Get(ctx workflow.Context) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocationsFuture) Get(ctx workflow.Context) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualGatewaysFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVirtualInterfacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVirtualInterfacesFuture) Get(ctx workflow.Context) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateConnectionFromLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateConnectionFromLagFuture) Get(ctx workflow.Context) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVirtualInterfaceTestHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVirtualInterfaceTestHistoryFuture) Get(ctx workflow.Context) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartBgpFailoverTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopBgpFailoverTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopBgpFailoverTestFuture) Get(ctx workflow.Context) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDirectConnectGatewayAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDirectConnectGatewayAssociationFuture) Get(ctx workflow.Context) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLagFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLagFuture) Get(ctx workflow.Context) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVirtualInterfaceAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVirtualInterfaceAttributesFuture) Get(ctx workflow.Context) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AcceptDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) *AcceptDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AcceptDirectConnectGatewayAssociationProposal", input)
	return &AcceptDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) AllocateConnectionOnInterconnect(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateConnectionOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateConnectionOnInterconnectAsync(ctx workflow.Context, input *directconnect.AllocateConnectionOnInterconnectInput) *AllocateConnectionOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateConnectionOnInterconnect", input)
	return &AllocateConnectionOnInterconnectFuture{Future: future}
}

func (a *stub) AllocateHostedConnection(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AllocateHostedConnectionInput) *AllocateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateHostedConnection", input)
	return &AllocateHostedConnectionFuture{Future: future}
}

func (a *stub) AllocatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePrivateVirtualInterfaceInput) *AllocatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePrivateVirtualInterface", input)
	return &AllocatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) AllocatePublicVirtualInterface(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocatePublicVirtualInterfaceInput) *AllocatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocatePublicVirtualInterface", input)
	return &AllocatePublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) AllocateTransitVirtualInterface(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	var output directconnect.AllocateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AllocateTransitVirtualInterfaceInput) *AllocateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AllocateTransitVirtualInterface", input)
	return &AllocateTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) AssociateConnectionWithLag(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateConnectionWithLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateConnectionWithLagAsync(ctx workflow.Context, input *directconnect.AssociateConnectionWithLagInput) *AssociateConnectionWithLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateConnectionWithLag", input)
	return &AssociateConnectionWithLagFuture{Future: future}
}

func (a *stub) AssociateHostedConnection(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateHostedConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateHostedConnectionAsync(ctx workflow.Context, input *directconnect.AssociateHostedConnectionInput) *AssociateHostedConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateHostedConnection", input)
	return &AssociateHostedConnectionFuture{Future: future}
}

func (a *stub) AssociateVirtualInterface(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.AssociateVirtualInterfaceInput) *AssociateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-AssociateVirtualInterface", input)
	return &AssociateVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmConnection(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) (*directconnect.ConfirmConnectionOutput, error) {
	var output directconnect.ConfirmConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmConnectionAsync(ctx workflow.Context, input *directconnect.ConfirmConnectionInput) *ConfirmConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmConnection", input)
	return &ConfirmConnectionFuture{Future: future}
}

func (a *stub) ConfirmPrivateVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPrivateVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmPrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPrivateVirtualInterfaceInput) *ConfirmPrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPrivateVirtualInterface", input)
	return &ConfirmPrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmPublicVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmPublicVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmPublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmPublicVirtualInterfaceInput) *ConfirmPublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmPublicVirtualInterface", input)
	return &ConfirmPublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) ConfirmTransitVirtualInterface(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	var output directconnect.ConfirmTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.ConfirmTransitVirtualInterfaceInput) *ConfirmTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ConfirmTransitVirtualInterface", input)
	return &ConfirmTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreateBGPPeer(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) (*directconnect.CreateBGPPeerOutput, error) {
	var output directconnect.CreateBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBGPPeerAsync(ctx workflow.Context, input *directconnect.CreateBGPPeerInput) *CreateBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateBGPPeer", input)
	return &CreateBGPPeerFuture{Future: future}
}

func (a *stub) CreateConnection(ctx workflow.Context, input *directconnect.CreateConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConnectionAsync(ctx workflow.Context, input *directconnect.CreateConnectionInput) *CreateConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateConnection", input)
	return &CreateConnectionFuture{Future: future}
}

func (a *stub) CreateDirectConnectGateway(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	var output directconnect.CreateDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayInput) *CreateDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGateway", input)
	return &CreateDirectConnectGatewayFuture{Future: future}
}

func (a *stub) CreateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationInput) *CreateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociation", input)
	return &CreateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) CreateDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.CreateDirectConnectGatewayAssociationProposalInput) *CreateDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateDirectConnectGatewayAssociationProposal", input)
	return &CreateDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) CreateInterconnect(ctx workflow.Context, input *directconnect.CreateInterconnectInput) (*directconnect.Interconnect, error) {
	var output directconnect.Interconnect
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInterconnectAsync(ctx workflow.Context, input *directconnect.CreateInterconnectInput) *CreateInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateInterconnect", input)
	return &CreateInterconnectFuture{Future: future}
}

func (a *stub) CreateLag(ctx workflow.Context, input *directconnect.CreateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLagAsync(ctx workflow.Context, input *directconnect.CreateLagInput) *CreateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateLag", input)
	return &CreateLagFuture{Future: future}
}

func (a *stub) CreatePrivateVirtualInterface(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePrivateVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePrivateVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePrivateVirtualInterfaceInput) *CreatePrivateVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePrivateVirtualInterface", input)
	return &CreatePrivateVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreatePublicVirtualInterface(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) (*directconnect.VirtualInterface, error) {
	var output directconnect.VirtualInterface
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePublicVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublicVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreatePublicVirtualInterfaceInput) *CreatePublicVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreatePublicVirtualInterface", input)
	return &CreatePublicVirtualInterfaceFuture{Future: future}
}

func (a *stub) CreateTransitVirtualInterface(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	var output directconnect.CreateTransitVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateTransitVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.CreateTransitVirtualInterfaceInput) *CreateTransitVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-CreateTransitVirtualInterface", input)
	return &CreateTransitVirtualInterfaceFuture{Future: future}
}

func (a *stub) DeleteBGPPeer(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) (*directconnect.DeleteBGPPeerOutput, error) {
	var output directconnect.DeleteBGPPeerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteBGPPeer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBGPPeerAsync(ctx workflow.Context, input *directconnect.DeleteBGPPeerInput) *DeleteBGPPeerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteBGPPeer", input)
	return &DeleteBGPPeerFuture{Future: future}
}

func (a *stub) DeleteConnection(ctx workflow.Context, input *directconnect.DeleteConnectionInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConnectionAsync(ctx workflow.Context, input *directconnect.DeleteConnectionInput) *DeleteConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteConnection", input)
	return &DeleteConnectionFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGateway(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayInput) *DeleteDirectConnectGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGateway", input)
	return &DeleteDirectConnectGatewayFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationInput) *DeleteDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociation", input)
	return &DeleteDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) DeleteDirectConnectGatewayAssociationProposal(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	var output directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociationProposal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectConnectGatewayAssociationProposalAsync(ctx workflow.Context, input *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) *DeleteDirectConnectGatewayAssociationProposalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteDirectConnectGatewayAssociationProposal", input)
	return &DeleteDirectConnectGatewayAssociationProposalFuture{Future: future}
}

func (a *stub) DeleteInterconnect(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) (*directconnect.DeleteInterconnectOutput, error) {
	var output directconnect.DeleteInterconnectOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInterconnectAsync(ctx workflow.Context, input *directconnect.DeleteInterconnectInput) *DeleteInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteInterconnect", input)
	return &DeleteInterconnectFuture{Future: future}
}

func (a *stub) DeleteLag(ctx workflow.Context, input *directconnect.DeleteLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLagAsync(ctx workflow.Context, input *directconnect.DeleteLagInput) *DeleteLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteLag", input)
	return &DeleteLagFuture{Future: future}
}

func (a *stub) DeleteVirtualInterface(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	var output directconnect.DeleteVirtualInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteVirtualInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVirtualInterfaceAsync(ctx workflow.Context, input *directconnect.DeleteVirtualInterfaceInput) *DeleteVirtualInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DeleteVirtualInterface", input)
	return &DeleteVirtualInterfaceFuture{Future: future}
}

func (a *stub) DescribeConnectionLoa(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) (*directconnect.DescribeConnectionLoaOutput, error) {
	var output directconnect.DescribeConnectionLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionLoaAsync(ctx workflow.Context, input *directconnect.DescribeConnectionLoaInput) *DescribeConnectionLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionLoa", input)
	return &DescribeConnectionLoaFuture{Future: future}
}

func (a *stub) DescribeConnections(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsInput) *DescribeConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnections", input)
	return &DescribeConnectionsFuture{Future: future}
}

func (a *stub) DescribeConnectionsOnInterconnect(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionsOnInterconnect", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConnectionsOnInterconnectAsync(ctx workflow.Context, input *directconnect.DescribeConnectionsOnInterconnectInput) *DescribeConnectionsOnInterconnectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeConnectionsOnInterconnect", input)
	return &DescribeConnectionsOnInterconnectFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAssociationProposals(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociationProposals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAssociationProposalsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) *DescribeDirectConnectGatewayAssociationProposalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociationProposals", input)
	return &DescribeDirectConnectGatewayAssociationProposalsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAssociations(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAssociationsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAssociationsInput) *DescribeDirectConnectGatewayAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAssociations", input)
	return &DescribeDirectConnectGatewayAssociationsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGatewayAttachments(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	var output directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewayAttachmentsAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewayAttachmentsInput) *DescribeDirectConnectGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGatewayAttachments", input)
	return &DescribeDirectConnectGatewayAttachmentsFuture{Future: future}
}

func (a *stub) DescribeDirectConnectGateways(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	var output directconnect.DescribeDirectConnectGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectConnectGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeDirectConnectGatewaysInput) *DescribeDirectConnectGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeDirectConnectGateways", input)
	return &DescribeDirectConnectGatewaysFuture{Future: future}
}

func (a *stub) DescribeHostedConnections(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) (*directconnect.Connections, error) {
	var output directconnect.Connections
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeHostedConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHostedConnectionsAsync(ctx workflow.Context, input *directconnect.DescribeHostedConnectionsInput) *DescribeHostedConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeHostedConnections", input)
	return &DescribeHostedConnectionsFuture{Future: future}
}

func (a *stub) DescribeInterconnectLoa(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) (*directconnect.DescribeInterconnectLoaOutput, error) {
	var output directconnect.DescribeInterconnectLoaOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnectLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInterconnectLoaAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectLoaInput) *DescribeInterconnectLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnectLoa", input)
	return &DescribeInterconnectLoaFuture{Future: future}
}

func (a *stub) DescribeInterconnects(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) (*directconnect.DescribeInterconnectsOutput, error) {
	var output directconnect.DescribeInterconnectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInterconnectsAsync(ctx workflow.Context, input *directconnect.DescribeInterconnectsInput) *DescribeInterconnectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeInterconnects", input)
	return &DescribeInterconnectsFuture{Future: future}
}

func (a *stub) DescribeLags(ctx workflow.Context, input *directconnect.DescribeLagsInput) (*directconnect.DescribeLagsOutput, error) {
	var output directconnect.DescribeLagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLagsAsync(ctx workflow.Context, input *directconnect.DescribeLagsInput) *DescribeLagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLags", input)
	return &DescribeLagsFuture{Future: future}
}

func (a *stub) DescribeLoa(ctx workflow.Context, input *directconnect.DescribeLoaInput) (*directconnect.Loa, error) {
	var output directconnect.Loa
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLoa", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoaAsync(ctx workflow.Context, input *directconnect.DescribeLoaInput) *DescribeLoaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLoa", input)
	return &DescribeLoaFuture{Future: future}
}

func (a *stub) DescribeLocations(ctx workflow.Context, input *directconnect.DescribeLocationsInput) (*directconnect.DescribeLocationsOutput, error) {
	var output directconnect.DescribeLocationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLocations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocationsAsync(ctx workflow.Context, input *directconnect.DescribeLocationsInput) *DescribeLocationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeLocations", input)
	return &DescribeLocationsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *directconnect.DescribeTagsInput) (*directconnect.DescribeTagsOutput, error) {
	var output directconnect.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *directconnect.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) DescribeVirtualGateways(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	var output directconnect.DescribeVirtualGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualGatewaysAsync(ctx workflow.Context, input *directconnect.DescribeVirtualGatewaysInput) *DescribeVirtualGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualGateways", input)
	return &DescribeVirtualGatewaysFuture{Future: future}
}

func (a *stub) DescribeVirtualInterfaces(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	var output directconnect.DescribeVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVirtualInterfacesAsync(ctx workflow.Context, input *directconnect.DescribeVirtualInterfacesInput) *DescribeVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DescribeVirtualInterfaces", input)
	return &DescribeVirtualInterfacesFuture{Future: future}
}

func (a *stub) DisassociateConnectionFromLag(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) (*directconnect.Connection, error) {
	var output directconnect.Connection
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-DisassociateConnectionFromLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateConnectionFromLagAsync(ctx workflow.Context, input *directconnect.DisassociateConnectionFromLagInput) *DisassociateConnectionFromLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-DisassociateConnectionFromLag", input)
	return &DisassociateConnectionFromLagFuture{Future: future}
}

func (a *stub) ListVirtualInterfaceTestHistory(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	var output directconnect.ListVirtualInterfaceTestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-ListVirtualInterfaceTestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVirtualInterfaceTestHistoryAsync(ctx workflow.Context, input *directconnect.ListVirtualInterfaceTestHistoryInput) *ListVirtualInterfaceTestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-ListVirtualInterfaceTestHistory", input)
	return &ListVirtualInterfaceTestHistoryFuture{Future: future}
}

func (a *stub) StartBgpFailoverTest(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) (*directconnect.StartBgpFailoverTestOutput, error) {
	var output directconnect.StartBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-StartBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StartBgpFailoverTestInput) *StartBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-StartBgpFailoverTest", input)
	return &StartBgpFailoverTestFuture{Future: future}
}

func (a *stub) StopBgpFailoverTest(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) (*directconnect.StopBgpFailoverTestOutput, error) {
	var output directconnect.StopBgpFailoverTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-StopBgpFailoverTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopBgpFailoverTestAsync(ctx workflow.Context, input *directconnect.StopBgpFailoverTestInput) *StopBgpFailoverTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-StopBgpFailoverTest", input)
	return &StopBgpFailoverTestFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *directconnect.TagResourceInput) (*directconnect.TagResourceOutput, error) {
	var output directconnect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *directconnect.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *directconnect.UntagResourceInput) (*directconnect.UntagResourceOutput, error) {
	var output directconnect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *directconnect.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDirectConnectGatewayAssociation(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	var output directconnect.UpdateDirectConnectGatewayAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateDirectConnectGatewayAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDirectConnectGatewayAssociationAsync(ctx workflow.Context, input *directconnect.UpdateDirectConnectGatewayAssociationInput) *UpdateDirectConnectGatewayAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateDirectConnectGatewayAssociation", input)
	return &UpdateDirectConnectGatewayAssociationFuture{Future: future}
}

func (a *stub) UpdateLag(ctx workflow.Context, input *directconnect.UpdateLagInput) (*directconnect.Lag, error) {
	var output directconnect.Lag
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateLag", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLagAsync(ctx workflow.Context, input *directconnect.UpdateLagInput) *UpdateLagFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateLag", input)
	return &UpdateLagFuture{Future: future}
}

func (a *stub) UpdateVirtualInterfaceAttributes(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	var output directconnect.UpdateVirtualInterfaceAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateVirtualInterfaceAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVirtualInterfaceAttributesAsync(ctx workflow.Context, input *directconnect.UpdateVirtualInterfaceAttributesInput) *UpdateVirtualInterfaceAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directconnect-UpdateVirtualInterfaceAttributes", input)
	return &UpdateVirtualInterfaceAttributesFuture{Future: future}
}
