// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package devicefarmstub

import (
	"github.com/aws/aws-sdk-go/service/devicefarm"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTestGridUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTestGridUrlFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUploadFuture) Get(ctx workflow.Context) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRunFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUploadFuture) Get(ctx workflow.Context) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountSettingsFuture) Get(ctx workflow.Context) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDeviceInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDevicePoolCompatibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDevicePoolCompatibilityFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobFuture) Get(ctx workflow.Context) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOfferingStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOfferingStatusFuture) Get(ctx workflow.Context) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRunFuture) Get(ctx workflow.Context) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSuiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSuiteFuture) Get(ctx workflow.Context) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTestFuture) Get(ctx workflow.Context) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTestGridSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTestGridSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUploadFuture) Get(ctx workflow.Context) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InstallToRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InstallToRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeviceInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeviceInstancesFuture) Get(ctx workflow.Context) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevicePoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevicePoolsFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDevicesFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInstanceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInstanceProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJobsFuture) Get(ctx workflow.Context) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNetworkProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNetworkProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOfferingPromotionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOfferingPromotionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOfferingTransactionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOfferingTransactionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOfferingsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRemoteAccessSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRemoteAccessSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRunsFuture) Get(ctx workflow.Context) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSamplesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSamplesFuture) Get(ctx workflow.Context) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSuitesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSuitesFuture) Get(ctx workflow.Context) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestGridProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestGridProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestGridSessionActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestGridSessionActionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestGridSessionArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestGridSessionArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestGridSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestGridSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTestsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUniqueProblemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUniqueProblemsFuture) Get(ctx workflow.Context) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUploadsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUploadsFuture) Get(ctx workflow.Context) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListVPCEConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListVPCEConfigurationsFuture) Get(ctx workflow.Context) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseOfferingFuture) Get(ctx workflow.Context) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RenewOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RenewOfferingFuture) Get(ctx workflow.Context) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ScheduleRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ScheduleRunFuture) Get(ctx workflow.Context) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopJobFuture) Get(ctx workflow.Context) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopRunFuture) Get(ctx workflow.Context) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDeviceInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUploadFuture) Get(ctx workflow.Context) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDevicePool(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDevicePoolAsync(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) *CreateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateDevicePool", input)
	return &CreateDevicePoolFuture{Future: future}
}

func (a *stub) CreateInstanceProfile(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) *CreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateInstanceProfile", input)
	return &CreateInstanceProfileFuture{Future: future}
}

func (a *stub) CreateNetworkProfile(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) *CreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateNetworkProfile", input)
	return &CreateNetworkProfileFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *devicefarm.CreateProjectInput) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *devicefarm.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) CreateRemoteAccessSession(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) *CreateRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateRemoteAccessSession", input)
	return &CreateRemoteAccessSessionFuture{Future: future}
}

func (a *stub) CreateTestGridProject(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) *CreateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridProject", input)
	return &CreateTestGridProjectFuture{Future: future}
}

func (a *stub) CreateTestGridUrl(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTestGridUrlAsync(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) *CreateTestGridUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridUrl", input)
	return &CreateTestGridUrlFuture{Future: future}
}

func (a *stub) CreateUpload(ctx workflow.Context, input *devicefarm.CreateUploadInput) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUploadAsync(ctx workflow.Context, input *devicefarm.CreateUploadInput) *CreateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateUpload", input)
	return &CreateUploadFuture{Future: future}
}

func (a *stub) CreateVPCEConfiguration(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) *CreateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateVPCEConfiguration", input)
	return &CreateVPCEConfigurationFuture{Future: future}
}

func (a *stub) DeleteDevicePool(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDevicePoolAsync(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) *DeleteDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteDevicePool", input)
	return &DeleteDevicePoolFuture{Future: future}
}

func (a *stub) DeleteInstanceProfile(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceProfileAsync(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) *DeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteInstanceProfile", input)
	return &DeleteInstanceProfileFuture{Future: future}
}

func (a *stub) DeleteNetworkProfile(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkProfileAsync(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) *DeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteNetworkProfile", input)
	return &DeleteNetworkProfileFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *devicefarm.DeleteProjectInput) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *devicefarm.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DeleteRemoteAccessSession(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) *DeleteRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRemoteAccessSession", input)
	return &DeleteRemoteAccessSessionFuture{Future: future}
}

func (a *stub) DeleteRun(ctx workflow.Context, input *devicefarm.DeleteRunInput) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRunAsync(ctx workflow.Context, input *devicefarm.DeleteRunInput) *DeleteRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRun", input)
	return &DeleteRunFuture{Future: future}
}

func (a *stub) DeleteTestGridProject(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTestGridProjectAsync(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) *DeleteTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteTestGridProject", input)
	return &DeleteTestGridProjectFuture{Future: future}
}

func (a *stub) DeleteUpload(ctx workflow.Context, input *devicefarm.DeleteUploadInput) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUploadAsync(ctx workflow.Context, input *devicefarm.DeleteUploadInput) *DeleteUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteUpload", input)
	return &DeleteUploadFuture{Future: future}
}

func (a *stub) DeleteVPCEConfiguration(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) *DeleteVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteVPCEConfiguration", input)
	return &DeleteVPCEConfigurationFuture{Future: future}
}

func (a *stub) GetAccountSettings(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSettingsAsync(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) *GetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetAccountSettings", input)
	return &GetAccountSettingsFuture{Future: future}
}

func (a *stub) GetDevice(ctx workflow.Context, input *devicefarm.GetDeviceInput) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInput) *GetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevice", input)
	return &GetDeviceFuture{Future: future}
}

func (a *stub) GetDeviceInstance(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) *GetDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDeviceInstance", input)
	return &GetDeviceInstanceFuture{Future: future}
}

func (a *stub) GetDevicePool(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicePoolAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) *GetDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePool", input)
	return &GetDevicePoolFuture{Future: future}
}

func (a *stub) GetDevicePoolCompatibility(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePoolCompatibility", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicePoolCompatibilityAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) *GetDevicePoolCompatibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePoolCompatibility", input)
	return &GetDevicePoolCompatibilityFuture{Future: future}
}

func (a *stub) GetInstanceProfile(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceProfileAsync(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) *GetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetInstanceProfile", input)
	return &GetInstanceProfileFuture{Future: future}
}

func (a *stub) GetJob(ctx workflow.Context, input *devicefarm.GetJobInput) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobAsync(ctx workflow.Context, input *devicefarm.GetJobInput) *GetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetJob", input)
	return &GetJobFuture{Future: future}
}

func (a *stub) GetNetworkProfile(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNetworkProfileAsync(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) *GetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetNetworkProfile", input)
	return &GetNetworkProfileFuture{Future: future}
}

func (a *stub) GetOfferingStatus(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetOfferingStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOfferingStatusAsync(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) *GetOfferingStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetOfferingStatus", input)
	return &GetOfferingStatusFuture{Future: future}
}

func (a *stub) GetProject(ctx workflow.Context, input *devicefarm.GetProjectInput) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProjectAsync(ctx workflow.Context, input *devicefarm.GetProjectInput) *GetProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetProject", input)
	return &GetProjectFuture{Future: future}
}

func (a *stub) GetRemoteAccessSession(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) *GetRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRemoteAccessSession", input)
	return &GetRemoteAccessSessionFuture{Future: future}
}

func (a *stub) GetRun(ctx workflow.Context, input *devicefarm.GetRunInput) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRunAsync(ctx workflow.Context, input *devicefarm.GetRunInput) *GetRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRun", input)
	return &GetRunFuture{Future: future}
}

func (a *stub) GetSuite(ctx workflow.Context, input *devicefarm.GetSuiteInput) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetSuite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSuiteAsync(ctx workflow.Context, input *devicefarm.GetSuiteInput) *GetSuiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetSuite", input)
	return &GetSuiteFuture{Future: future}
}

func (a *stub) GetTest(ctx workflow.Context, input *devicefarm.GetTestInput) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestAsync(ctx workflow.Context, input *devicefarm.GetTestInput) *GetTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTest", input)
	return &GetTestFuture{Future: future}
}

func (a *stub) GetTestGridProject(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestGridProjectAsync(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) *GetTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridProject", input)
	return &GetTestGridProjectFuture{Future: future}
}

func (a *stub) GetTestGridSession(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestGridSessionAsync(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) *GetTestGridSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridSession", input)
	return &GetTestGridSessionFuture{Future: future}
}

func (a *stub) GetUpload(ctx workflow.Context, input *devicefarm.GetUploadInput) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUploadAsync(ctx workflow.Context, input *devicefarm.GetUploadInput) *GetUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetUpload", input)
	return &GetUploadFuture{Future: future}
}

func (a *stub) GetVPCEConfiguration(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) *GetVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetVPCEConfiguration", input)
	return &GetVPCEConfigurationFuture{Future: future}
}

func (a *stub) InstallToRemoteAccessSession(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-InstallToRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InstallToRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) *InstallToRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-InstallToRemoteAccessSession", input)
	return &InstallToRemoteAccessSessionFuture{Future: future}
}

func (a *stub) ListArtifacts(ctx workflow.Context, input *devicefarm.ListArtifactsInput) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListArtifactsAsync(ctx workflow.Context, input *devicefarm.ListArtifactsInput) *ListArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListArtifacts", input)
	return &ListArtifactsFuture{Future: future}
}

func (a *stub) ListDeviceInstances(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDeviceInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceInstancesAsync(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) *ListDeviceInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDeviceInstances", input)
	return &ListDeviceInstancesFuture{Future: future}
}

func (a *stub) ListDevicePools(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevicePools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicePoolsAsync(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) *ListDevicePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevicePools", input)
	return &ListDevicePoolsFuture{Future: future}
}

func (a *stub) ListDevices(ctx workflow.Context, input *devicefarm.ListDevicesInput) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicesAsync(ctx workflow.Context, input *devicefarm.ListDevicesInput) *ListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevices", input)
	return &ListDevicesFuture{Future: future}
}

func (a *stub) ListInstanceProfiles(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceProfilesAsync(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) *ListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListInstanceProfiles", input)
	return &ListInstanceProfilesFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *devicefarm.ListJobsInput) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *devicefarm.ListJobsInput) *ListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListJobs", input)
	return &ListJobsFuture{Future: future}
}

func (a *stub) ListNetworkProfiles(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNetworkProfilesAsync(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) *ListNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListNetworkProfiles", input)
	return &ListNetworkProfilesFuture{Future: future}
}

func (a *stub) ListOfferingPromotions(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingPromotions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingPromotionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) *ListOfferingPromotionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingPromotions", input)
	return &ListOfferingPromotionsFuture{Future: future}
}

func (a *stub) ListOfferingTransactions(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingTransactions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingTransactionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) *ListOfferingTransactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingTransactions", input)
	return &ListOfferingTransactionsFuture{Future: future}
}

func (a *stub) ListOfferings(ctx workflow.Context, input *devicefarm.ListOfferingsInput) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingsAsync(ctx workflow.Context, input *devicefarm.ListOfferingsInput) *ListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferings", input)
	return &ListOfferingsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *devicefarm.ListProjectsInput) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *devicefarm.ListProjectsInput) *ListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListProjects", input)
	return &ListProjectsFuture{Future: future}
}

func (a *stub) ListRemoteAccessSessions(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRemoteAccessSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRemoteAccessSessionsAsync(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) *ListRemoteAccessSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRemoteAccessSessions", input)
	return &ListRemoteAccessSessionsFuture{Future: future}
}

func (a *stub) ListRuns(ctx workflow.Context, input *devicefarm.ListRunsInput) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRunsAsync(ctx workflow.Context, input *devicefarm.ListRunsInput) *ListRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRuns", input)
	return &ListRunsFuture{Future: future}
}

func (a *stub) ListSamples(ctx workflow.Context, input *devicefarm.ListSamplesInput) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSamples", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSamplesAsync(ctx workflow.Context, input *devicefarm.ListSamplesInput) *ListSamplesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSamples", input)
	return &ListSamplesFuture{Future: future}
}

func (a *stub) ListSuites(ctx workflow.Context, input *devicefarm.ListSuitesInput) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSuites", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSuitesAsync(ctx workflow.Context, input *devicefarm.ListSuitesInput) *ListSuitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSuites", input)
	return &ListSuitesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTestGridProjects(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridProjectsAsync(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) *ListTestGridProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridProjects", input)
	return &ListTestGridProjectsFuture{Future: future}
}

func (a *stub) ListTestGridSessionActions(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionActionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) *ListTestGridSessionActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionActions", input)
	return &ListTestGridSessionActionsFuture{Future: future}
}

func (a *stub) ListTestGridSessionArtifacts(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionArtifactsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) *ListTestGridSessionArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionArtifacts", input)
	return &ListTestGridSessionArtifactsFuture{Future: future}
}

func (a *stub) ListTestGridSessions(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) *ListTestGridSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessions", input)
	return &ListTestGridSessionsFuture{Future: future}
}

func (a *stub) ListTests(ctx workflow.Context, input *devicefarm.ListTestsInput) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestsAsync(ctx workflow.Context, input *devicefarm.ListTestsInput) *ListTestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTests", input)
	return &ListTestsFuture{Future: future}
}

func (a *stub) ListUniqueProblems(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUniqueProblems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUniqueProblemsAsync(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) *ListUniqueProblemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUniqueProblems", input)
	return &ListUniqueProblemsFuture{Future: future}
}

func (a *stub) ListUploads(ctx workflow.Context, input *devicefarm.ListUploadsInput) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUploads", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUploadsAsync(ctx workflow.Context, input *devicefarm.ListUploadsInput) *ListUploadsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUploads", input)
	return &ListUploadsFuture{Future: future}
}

func (a *stub) ListVPCEConfigurations(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListVPCEConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVPCEConfigurationsAsync(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) *ListVPCEConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListVPCEConfigurations", input)
	return &ListVPCEConfigurationsFuture{Future: future}
}

func (a *stub) PurchaseOffering(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseOfferingAsync(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) *PurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-PurchaseOffering", input)
	return &PurchaseOfferingFuture{Future: future}
}

func (a *stub) RenewOffering(ctx workflow.Context, input *devicefarm.RenewOfferingInput) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-RenewOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenewOfferingAsync(ctx workflow.Context, input *devicefarm.RenewOfferingInput) *RenewOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-RenewOffering", input)
	return &RenewOfferingFuture{Future: future}
}

func (a *stub) ScheduleRun(ctx workflow.Context, input *devicefarm.ScheduleRunInput) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ScheduleRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScheduleRunAsync(ctx workflow.Context, input *devicefarm.ScheduleRunInput) *ScheduleRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ScheduleRun", input)
	return &ScheduleRunFuture{Future: future}
}

func (a *stub) StopJob(ctx workflow.Context, input *devicefarm.StopJobInput) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopJobAsync(ctx workflow.Context, input *devicefarm.StopJobInput) *StopJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopJob", input)
	return &StopJobFuture{Future: future}
}

func (a *stub) StopRemoteAccessSession(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) *StopRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRemoteAccessSession", input)
	return &StopRemoteAccessSessionFuture{Future: future}
}

func (a *stub) StopRun(ctx workflow.Context, input *devicefarm.StopRunInput) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRunAsync(ctx workflow.Context, input *devicefarm.StopRunInput) *StopRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRun", input)
	return &StopRunFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *devicefarm.TagResourceInput) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *devicefarm.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *devicefarm.UntagResourceInput) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *devicefarm.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDeviceInstance(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) *UpdateDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDeviceInstance", input)
	return &UpdateDeviceInstanceFuture{Future: future}
}

func (a *stub) UpdateDevicePool(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDevicePoolAsync(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) *UpdateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDevicePool", input)
	return &UpdateDevicePoolFuture{Future: future}
}

func (a *stub) UpdateInstanceProfile(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) *UpdateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateInstanceProfile", input)
	return &UpdateInstanceProfileFuture{Future: future}
}

func (a *stub) UpdateNetworkProfile(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) *UpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateNetworkProfile", input)
	return &UpdateNetworkProfileFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *devicefarm.UpdateProjectInput) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *devicefarm.UpdateProjectInput) *UpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateProject", input)
	return &UpdateProjectFuture{Future: future}
}

func (a *stub) UpdateTestGridProject(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) *UpdateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateTestGridProject", input)
	return &UpdateTestGridProjectFuture{Future: future}
}

func (a *stub) UpdateUpload(ctx workflow.Context, input *devicefarm.UpdateUploadInput) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUploadAsync(ctx workflow.Context, input *devicefarm.UpdateUploadInput) *UpdateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateUpload", input)
	return &UpdateUploadFuture{Future: future}
}

func (a *stub) UpdateVPCEConfiguration(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) *UpdateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateVPCEConfiguration", input)
	return &UpdateVPCEConfigurationFuture{Future: future}
}
