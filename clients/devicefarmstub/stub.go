// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package devicefarmstub

import (
	"github.com/aws/aws-sdk-go/service/devicefarm"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DeviceFarmCreateDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateTestGridUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateTestGridUrlFuture) Get(ctx workflow.Context) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateUploadFuture) Get(ctx workflow.Context) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmCreateVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmCreateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteRunFuture) Get(ctx workflow.Context) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteUploadFuture) Get(ctx workflow.Context) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmDeleteVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmDeleteVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetAccountSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetAccountSettingsFuture) Get(ctx workflow.Context) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetDeviceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetDeviceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetDeviceInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetDevicePoolCompatibilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetDevicePoolCompatibilityFuture) Get(ctx workflow.Context) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetJobFuture) Get(ctx workflow.Context) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetOfferingStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetOfferingStatusFuture) Get(ctx workflow.Context) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetRunFuture) Get(ctx workflow.Context) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetSuiteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetSuiteFuture) Get(ctx workflow.Context) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetTestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetTestFuture) Get(ctx workflow.Context) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetTestGridSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetTestGridSessionFuture) Get(ctx workflow.Context) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetUploadFuture) Get(ctx workflow.Context) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmGetVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmGetVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmInstallToRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmInstallToRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListDeviceInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListDeviceInstancesFuture) Get(ctx workflow.Context) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListDevicePoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListDevicePoolsFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListDevicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListDevicesFuture) Get(ctx workflow.Context) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListInstanceProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListInstanceProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListJobsFuture) Get(ctx workflow.Context) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListNetworkProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListNetworkProfilesFuture) Get(ctx workflow.Context) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListOfferingPromotionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListOfferingPromotionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListOfferingTransactionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListOfferingTransactionsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListOfferingsFuture) Get(ctx workflow.Context) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListRemoteAccessSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListRemoteAccessSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListRunsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListRunsFuture) Get(ctx workflow.Context) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListSamplesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListSamplesFuture) Get(ctx workflow.Context) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListSuitesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListSuitesFuture) Get(ctx workflow.Context) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTagsForResourceFuture) Get(ctx workflow.Context) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTestGridProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTestGridProjectsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTestGridSessionActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTestGridSessionActionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTestGridSessionArtifactsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTestGridSessionArtifactsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTestGridSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTestGridSessionsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListTestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListTestsFuture) Get(ctx workflow.Context) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListUniqueProblemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListUniqueProblemsFuture) Get(ctx workflow.Context) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListUploadsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListUploadsFuture) Get(ctx workflow.Context) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmListVPCEConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmListVPCEConfigurationsFuture) Get(ctx workflow.Context) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmPurchaseOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmPurchaseOfferingFuture) Get(ctx workflow.Context) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmRenewOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmRenewOfferingFuture) Get(ctx workflow.Context) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmScheduleRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmScheduleRunFuture) Get(ctx workflow.Context) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmStopJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmStopJobFuture) Get(ctx workflow.Context) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmStopRemoteAccessSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmStopRemoteAccessSessionFuture) Get(ctx workflow.Context) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmStopRunFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmStopRunFuture) Get(ctx workflow.Context) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmTagResourceFuture) Get(ctx workflow.Context) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUntagResourceFuture) Get(ctx workflow.Context) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateDeviceInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateDeviceInstanceFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateDevicePoolFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateDevicePoolFuture) Get(ctx workflow.Context) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateInstanceProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateNetworkProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateNetworkProfileFuture) Get(ctx workflow.Context) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateTestGridProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateTestGridProjectFuture) Get(ctx workflow.Context) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateUploadFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateUploadFuture) Get(ctx workflow.Context) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeviceFarmUpdateVPCEConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeviceFarmUpdateVPCEConfigurationFuture) Get(ctx workflow.Context) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDevicePool(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) (*devicefarm.CreateDevicePoolOutput, error) {
	var output devicefarm.CreateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDevicePoolAsync(ctx workflow.Context, input *devicefarm.CreateDevicePoolInput) *DeviceFarmCreateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateDevicePool", input)
	return &DeviceFarmCreateDevicePoolFuture{Future: future}
}

func (a *stub) CreateInstanceProfile(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) (*devicefarm.CreateInstanceProfileOutput, error) {
	var output devicefarm.CreateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.CreateInstanceProfileInput) *DeviceFarmCreateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateInstanceProfile", input)
	return &DeviceFarmCreateInstanceProfileFuture{Future: future}
}

func (a *stub) CreateNetworkProfile(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) (*devicefarm.CreateNetworkProfileOutput, error) {
	var output devicefarm.CreateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.CreateNetworkProfileInput) *DeviceFarmCreateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateNetworkProfile", input)
	return &DeviceFarmCreateNetworkProfileFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *devicefarm.CreateProjectInput) (*devicefarm.CreateProjectOutput, error) {
	var output devicefarm.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *devicefarm.CreateProjectInput) *DeviceFarmCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateProject", input)
	return &DeviceFarmCreateProjectFuture{Future: future}
}

func (a *stub) CreateRemoteAccessSession(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	var output devicefarm.CreateRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.CreateRemoteAccessSessionInput) *DeviceFarmCreateRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateRemoteAccessSession", input)
	return &DeviceFarmCreateRemoteAccessSessionFuture{Future: future}
}

func (a *stub) CreateTestGridProject(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) (*devicefarm.CreateTestGridProjectOutput, error) {
	var output devicefarm.CreateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.CreateTestGridProjectInput) *DeviceFarmCreateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridProject", input)
	return &DeviceFarmCreateTestGridProjectFuture{Future: future}
}

func (a *stub) CreateTestGridUrl(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) (*devicefarm.CreateTestGridUrlOutput, error) {
	var output devicefarm.CreateTestGridUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTestGridUrlAsync(ctx workflow.Context, input *devicefarm.CreateTestGridUrlInput) *DeviceFarmCreateTestGridUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateTestGridUrl", input)
	return &DeviceFarmCreateTestGridUrlFuture{Future: future}
}

func (a *stub) CreateUpload(ctx workflow.Context, input *devicefarm.CreateUploadInput) (*devicefarm.CreateUploadOutput, error) {
	var output devicefarm.CreateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUploadAsync(ctx workflow.Context, input *devicefarm.CreateUploadInput) *DeviceFarmCreateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateUpload", input)
	return &DeviceFarmCreateUploadFuture{Future: future}
}

func (a *stub) CreateVPCEConfiguration(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	var output devicefarm.CreateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.CreateVPCEConfigurationInput) *DeviceFarmCreateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-CreateVPCEConfiguration", input)
	return &DeviceFarmCreateVPCEConfigurationFuture{Future: future}
}

func (a *stub) DeleteDevicePool(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) (*devicefarm.DeleteDevicePoolOutput, error) {
	var output devicefarm.DeleteDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDevicePoolAsync(ctx workflow.Context, input *devicefarm.DeleteDevicePoolInput) *DeviceFarmDeleteDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteDevicePool", input)
	return &DeviceFarmDeleteDevicePoolFuture{Future: future}
}

func (a *stub) DeleteInstanceProfile(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) (*devicefarm.DeleteInstanceProfileOutput, error) {
	var output devicefarm.DeleteInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceProfileAsync(ctx workflow.Context, input *devicefarm.DeleteInstanceProfileInput) *DeviceFarmDeleteInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteInstanceProfile", input)
	return &DeviceFarmDeleteInstanceProfileFuture{Future: future}
}

func (a *stub) DeleteNetworkProfile(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) (*devicefarm.DeleteNetworkProfileOutput, error) {
	var output devicefarm.DeleteNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkProfileAsync(ctx workflow.Context, input *devicefarm.DeleteNetworkProfileInput) *DeviceFarmDeleteNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteNetworkProfile", input)
	return &DeviceFarmDeleteNetworkProfileFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *devicefarm.DeleteProjectInput) (*devicefarm.DeleteProjectOutput, error) {
	var output devicefarm.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *devicefarm.DeleteProjectInput) *DeviceFarmDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteProject", input)
	return &DeviceFarmDeleteProjectFuture{Future: future}
}

func (a *stub) DeleteRemoteAccessSession(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	var output devicefarm.DeleteRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.DeleteRemoteAccessSessionInput) *DeviceFarmDeleteRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRemoteAccessSession", input)
	return &DeviceFarmDeleteRemoteAccessSessionFuture{Future: future}
}

func (a *stub) DeleteRun(ctx workflow.Context, input *devicefarm.DeleteRunInput) (*devicefarm.DeleteRunOutput, error) {
	var output devicefarm.DeleteRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRunAsync(ctx workflow.Context, input *devicefarm.DeleteRunInput) *DeviceFarmDeleteRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteRun", input)
	return &DeviceFarmDeleteRunFuture{Future: future}
}

func (a *stub) DeleteTestGridProject(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) (*devicefarm.DeleteTestGridProjectOutput, error) {
	var output devicefarm.DeleteTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTestGridProjectAsync(ctx workflow.Context, input *devicefarm.DeleteTestGridProjectInput) *DeviceFarmDeleteTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteTestGridProject", input)
	return &DeviceFarmDeleteTestGridProjectFuture{Future: future}
}

func (a *stub) DeleteUpload(ctx workflow.Context, input *devicefarm.DeleteUploadInput) (*devicefarm.DeleteUploadOutput, error) {
	var output devicefarm.DeleteUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUploadAsync(ctx workflow.Context, input *devicefarm.DeleteUploadInput) *DeviceFarmDeleteUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteUpload", input)
	return &DeviceFarmDeleteUploadFuture{Future: future}
}

func (a *stub) DeleteVPCEConfiguration(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	var output devicefarm.DeleteVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.DeleteVPCEConfigurationInput) *DeviceFarmDeleteVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-DeleteVPCEConfiguration", input)
	return &DeviceFarmDeleteVPCEConfigurationFuture{Future: future}
}

func (a *stub) GetAccountSettings(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) (*devicefarm.GetAccountSettingsOutput, error) {
	var output devicefarm.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountSettingsAsync(ctx workflow.Context, input *devicefarm.GetAccountSettingsInput) *DeviceFarmGetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetAccountSettings", input)
	return &DeviceFarmGetAccountSettingsFuture{Future: future}
}

func (a *stub) GetDevice(ctx workflow.Context, input *devicefarm.GetDeviceInput) (*devicefarm.GetDeviceOutput, error) {
	var output devicefarm.GetDeviceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevice", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInput) *DeviceFarmGetDeviceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevice", input)
	return &DeviceFarmGetDeviceFuture{Future: future}
}

func (a *stub) GetDeviceInstance(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) (*devicefarm.GetDeviceInstanceOutput, error) {
	var output devicefarm.GetDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.GetDeviceInstanceInput) *DeviceFarmGetDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDeviceInstance", input)
	return &DeviceFarmGetDeviceInstanceFuture{Future: future}
}

func (a *stub) GetDevicePool(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) (*devicefarm.GetDevicePoolOutput, error) {
	var output devicefarm.GetDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicePoolAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolInput) *DeviceFarmGetDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePool", input)
	return &DeviceFarmGetDevicePoolFuture{Future: future}
}

func (a *stub) GetDevicePoolCompatibility(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	var output devicefarm.GetDevicePoolCompatibilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePoolCompatibility", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicePoolCompatibilityAsync(ctx workflow.Context, input *devicefarm.GetDevicePoolCompatibilityInput) *DeviceFarmGetDevicePoolCompatibilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetDevicePoolCompatibility", input)
	return &DeviceFarmGetDevicePoolCompatibilityFuture{Future: future}
}

func (a *stub) GetInstanceProfile(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) (*devicefarm.GetInstanceProfileOutput, error) {
	var output devicefarm.GetInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInstanceProfileAsync(ctx workflow.Context, input *devicefarm.GetInstanceProfileInput) *DeviceFarmGetInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetInstanceProfile", input)
	return &DeviceFarmGetInstanceProfileFuture{Future: future}
}

func (a *stub) GetJob(ctx workflow.Context, input *devicefarm.GetJobInput) (*devicefarm.GetJobOutput, error) {
	var output devicefarm.GetJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobAsync(ctx workflow.Context, input *devicefarm.GetJobInput) *DeviceFarmGetJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetJob", input)
	return &DeviceFarmGetJobFuture{Future: future}
}

func (a *stub) GetNetworkProfile(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) (*devicefarm.GetNetworkProfileOutput, error) {
	var output devicefarm.GetNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNetworkProfileAsync(ctx workflow.Context, input *devicefarm.GetNetworkProfileInput) *DeviceFarmGetNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetNetworkProfile", input)
	return &DeviceFarmGetNetworkProfileFuture{Future: future}
}

func (a *stub) GetOfferingStatus(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) (*devicefarm.GetOfferingStatusOutput, error) {
	var output devicefarm.GetOfferingStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetOfferingStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOfferingStatusAsync(ctx workflow.Context, input *devicefarm.GetOfferingStatusInput) *DeviceFarmGetOfferingStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetOfferingStatus", input)
	return &DeviceFarmGetOfferingStatusFuture{Future: future}
}

func (a *stub) GetProject(ctx workflow.Context, input *devicefarm.GetProjectInput) (*devicefarm.GetProjectOutput, error) {
	var output devicefarm.GetProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProjectAsync(ctx workflow.Context, input *devicefarm.GetProjectInput) *DeviceFarmGetProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetProject", input)
	return &DeviceFarmGetProjectFuture{Future: future}
}

func (a *stub) GetRemoteAccessSession(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	var output devicefarm.GetRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.GetRemoteAccessSessionInput) *DeviceFarmGetRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRemoteAccessSession", input)
	return &DeviceFarmGetRemoteAccessSessionFuture{Future: future}
}

func (a *stub) GetRun(ctx workflow.Context, input *devicefarm.GetRunInput) (*devicefarm.GetRunOutput, error) {
	var output devicefarm.GetRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRunAsync(ctx workflow.Context, input *devicefarm.GetRunInput) *DeviceFarmGetRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetRun", input)
	return &DeviceFarmGetRunFuture{Future: future}
}

func (a *stub) GetSuite(ctx workflow.Context, input *devicefarm.GetSuiteInput) (*devicefarm.GetSuiteOutput, error) {
	var output devicefarm.GetSuiteOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetSuite", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSuiteAsync(ctx workflow.Context, input *devicefarm.GetSuiteInput) *DeviceFarmGetSuiteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetSuite", input)
	return &DeviceFarmGetSuiteFuture{Future: future}
}

func (a *stub) GetTest(ctx workflow.Context, input *devicefarm.GetTestInput) (*devicefarm.GetTestOutput, error) {
	var output devicefarm.GetTestOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestAsync(ctx workflow.Context, input *devicefarm.GetTestInput) *DeviceFarmGetTestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTest", input)
	return &DeviceFarmGetTestFuture{Future: future}
}

func (a *stub) GetTestGridProject(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) (*devicefarm.GetTestGridProjectOutput, error) {
	var output devicefarm.GetTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestGridProjectAsync(ctx workflow.Context, input *devicefarm.GetTestGridProjectInput) *DeviceFarmGetTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridProject", input)
	return &DeviceFarmGetTestGridProjectFuture{Future: future}
}

func (a *stub) GetTestGridSession(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) (*devicefarm.GetTestGridSessionOutput, error) {
	var output devicefarm.GetTestGridSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTestGridSessionAsync(ctx workflow.Context, input *devicefarm.GetTestGridSessionInput) *DeviceFarmGetTestGridSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetTestGridSession", input)
	return &DeviceFarmGetTestGridSessionFuture{Future: future}
}

func (a *stub) GetUpload(ctx workflow.Context, input *devicefarm.GetUploadInput) (*devicefarm.GetUploadOutput, error) {
	var output devicefarm.GetUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUploadAsync(ctx workflow.Context, input *devicefarm.GetUploadInput) *DeviceFarmGetUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetUpload", input)
	return &DeviceFarmGetUploadFuture{Future: future}
}

func (a *stub) GetVPCEConfiguration(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) (*devicefarm.GetVPCEConfigurationOutput, error) {
	var output devicefarm.GetVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.GetVPCEConfigurationInput) *DeviceFarmGetVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-GetVPCEConfiguration", input)
	return &DeviceFarmGetVPCEConfigurationFuture{Future: future}
}

func (a *stub) InstallToRemoteAccessSession(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	var output devicefarm.InstallToRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-InstallToRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InstallToRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.InstallToRemoteAccessSessionInput) *DeviceFarmInstallToRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-InstallToRemoteAccessSession", input)
	return &DeviceFarmInstallToRemoteAccessSessionFuture{Future: future}
}

func (a *stub) ListArtifacts(ctx workflow.Context, input *devicefarm.ListArtifactsInput) (*devicefarm.ListArtifactsOutput, error) {
	var output devicefarm.ListArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListArtifactsAsync(ctx workflow.Context, input *devicefarm.ListArtifactsInput) *DeviceFarmListArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListArtifacts", input)
	return &DeviceFarmListArtifactsFuture{Future: future}
}

func (a *stub) ListDeviceInstances(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) (*devicefarm.ListDeviceInstancesOutput, error) {
	var output devicefarm.ListDeviceInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDeviceInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeviceInstancesAsync(ctx workflow.Context, input *devicefarm.ListDeviceInstancesInput) *DeviceFarmListDeviceInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDeviceInstances", input)
	return &DeviceFarmListDeviceInstancesFuture{Future: future}
}

func (a *stub) ListDevicePools(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) (*devicefarm.ListDevicePoolsOutput, error) {
	var output devicefarm.ListDevicePoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevicePools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicePoolsAsync(ctx workflow.Context, input *devicefarm.ListDevicePoolsInput) *DeviceFarmListDevicePoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevicePools", input)
	return &DeviceFarmListDevicePoolsFuture{Future: future}
}

func (a *stub) ListDevices(ctx workflow.Context, input *devicefarm.ListDevicesInput) (*devicefarm.ListDevicesOutput, error) {
	var output devicefarm.ListDevicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDevicesAsync(ctx workflow.Context, input *devicefarm.ListDevicesInput) *DeviceFarmListDevicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListDevices", input)
	return &DeviceFarmListDevicesFuture{Future: future}
}

func (a *stub) ListInstanceProfiles(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) (*devicefarm.ListInstanceProfilesOutput, error) {
	var output devicefarm.ListInstanceProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListInstanceProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInstanceProfilesAsync(ctx workflow.Context, input *devicefarm.ListInstanceProfilesInput) *DeviceFarmListInstanceProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListInstanceProfiles", input)
	return &DeviceFarmListInstanceProfilesFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *devicefarm.ListJobsInput) (*devicefarm.ListJobsOutput, error) {
	var output devicefarm.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *devicefarm.ListJobsInput) *DeviceFarmListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListJobs", input)
	return &DeviceFarmListJobsFuture{Future: future}
}

func (a *stub) ListNetworkProfiles(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) (*devicefarm.ListNetworkProfilesOutput, error) {
	var output devicefarm.ListNetworkProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListNetworkProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNetworkProfilesAsync(ctx workflow.Context, input *devicefarm.ListNetworkProfilesInput) *DeviceFarmListNetworkProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListNetworkProfiles", input)
	return &DeviceFarmListNetworkProfilesFuture{Future: future}
}

func (a *stub) ListOfferingPromotions(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) (*devicefarm.ListOfferingPromotionsOutput, error) {
	var output devicefarm.ListOfferingPromotionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingPromotions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingPromotionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingPromotionsInput) *DeviceFarmListOfferingPromotionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingPromotions", input)
	return &DeviceFarmListOfferingPromotionsFuture{Future: future}
}

func (a *stub) ListOfferingTransactions(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) (*devicefarm.ListOfferingTransactionsOutput, error) {
	var output devicefarm.ListOfferingTransactionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingTransactions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingTransactionsAsync(ctx workflow.Context, input *devicefarm.ListOfferingTransactionsInput) *DeviceFarmListOfferingTransactionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferingTransactions", input)
	return &DeviceFarmListOfferingTransactionsFuture{Future: future}
}

func (a *stub) ListOfferings(ctx workflow.Context, input *devicefarm.ListOfferingsInput) (*devicefarm.ListOfferingsOutput, error) {
	var output devicefarm.ListOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOfferingsAsync(ctx workflow.Context, input *devicefarm.ListOfferingsInput) *DeviceFarmListOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListOfferings", input)
	return &DeviceFarmListOfferingsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *devicefarm.ListProjectsInput) (*devicefarm.ListProjectsOutput, error) {
	var output devicefarm.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *devicefarm.ListProjectsInput) *DeviceFarmListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListProjects", input)
	return &DeviceFarmListProjectsFuture{Future: future}
}

func (a *stub) ListRemoteAccessSessions(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	var output devicefarm.ListRemoteAccessSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRemoteAccessSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRemoteAccessSessionsAsync(ctx workflow.Context, input *devicefarm.ListRemoteAccessSessionsInput) *DeviceFarmListRemoteAccessSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRemoteAccessSessions", input)
	return &DeviceFarmListRemoteAccessSessionsFuture{Future: future}
}

func (a *stub) ListRuns(ctx workflow.Context, input *devicefarm.ListRunsInput) (*devicefarm.ListRunsOutput, error) {
	var output devicefarm.ListRunsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRuns", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRunsAsync(ctx workflow.Context, input *devicefarm.ListRunsInput) *DeviceFarmListRunsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListRuns", input)
	return &DeviceFarmListRunsFuture{Future: future}
}

func (a *stub) ListSamples(ctx workflow.Context, input *devicefarm.ListSamplesInput) (*devicefarm.ListSamplesOutput, error) {
	var output devicefarm.ListSamplesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSamples", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSamplesAsync(ctx workflow.Context, input *devicefarm.ListSamplesInput) *DeviceFarmListSamplesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSamples", input)
	return &DeviceFarmListSamplesFuture{Future: future}
}

func (a *stub) ListSuites(ctx workflow.Context, input *devicefarm.ListSuitesInput) (*devicefarm.ListSuitesOutput, error) {
	var output devicefarm.ListSuitesOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSuites", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSuitesAsync(ctx workflow.Context, input *devicefarm.ListSuitesInput) *DeviceFarmListSuitesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListSuites", input)
	return &DeviceFarmListSuitesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) (*devicefarm.ListTagsForResourceOutput, error) {
	var output devicefarm.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *devicefarm.ListTagsForResourceInput) *DeviceFarmListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTagsForResource", input)
	return &DeviceFarmListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTestGridProjects(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) (*devicefarm.ListTestGridProjectsOutput, error) {
	var output devicefarm.ListTestGridProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridProjectsAsync(ctx workflow.Context, input *devicefarm.ListTestGridProjectsInput) *DeviceFarmListTestGridProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridProjects", input)
	return &DeviceFarmListTestGridProjectsFuture{Future: future}
}

func (a *stub) ListTestGridSessionActions(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	var output devicefarm.ListTestGridSessionActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionActionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionActionsInput) *DeviceFarmListTestGridSessionActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionActions", input)
	return &DeviceFarmListTestGridSessionActionsFuture{Future: future}
}

func (a *stub) ListTestGridSessionArtifacts(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	var output devicefarm.ListTestGridSessionArtifactsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionArtifacts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionArtifactsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionArtifactsInput) *DeviceFarmListTestGridSessionArtifactsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessionArtifacts", input)
	return &DeviceFarmListTestGridSessionArtifactsFuture{Future: future}
}

func (a *stub) ListTestGridSessions(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) (*devicefarm.ListTestGridSessionsOutput, error) {
	var output devicefarm.ListTestGridSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestGridSessionsAsync(ctx workflow.Context, input *devicefarm.ListTestGridSessionsInput) *DeviceFarmListTestGridSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTestGridSessions", input)
	return &DeviceFarmListTestGridSessionsFuture{Future: future}
}

func (a *stub) ListTests(ctx workflow.Context, input *devicefarm.ListTestsInput) (*devicefarm.ListTestsOutput, error) {
	var output devicefarm.ListTestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTestsAsync(ctx workflow.Context, input *devicefarm.ListTestsInput) *DeviceFarmListTestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListTests", input)
	return &DeviceFarmListTestsFuture{Future: future}
}

func (a *stub) ListUniqueProblems(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) (*devicefarm.ListUniqueProblemsOutput, error) {
	var output devicefarm.ListUniqueProblemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUniqueProblems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUniqueProblemsAsync(ctx workflow.Context, input *devicefarm.ListUniqueProblemsInput) *DeviceFarmListUniqueProblemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUniqueProblems", input)
	return &DeviceFarmListUniqueProblemsFuture{Future: future}
}

func (a *stub) ListUploads(ctx workflow.Context, input *devicefarm.ListUploadsInput) (*devicefarm.ListUploadsOutput, error) {
	var output devicefarm.ListUploadsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUploads", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUploadsAsync(ctx workflow.Context, input *devicefarm.ListUploadsInput) *DeviceFarmListUploadsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListUploads", input)
	return &DeviceFarmListUploadsFuture{Future: future}
}

func (a *stub) ListVPCEConfigurations(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	var output devicefarm.ListVPCEConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListVPCEConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListVPCEConfigurationsAsync(ctx workflow.Context, input *devicefarm.ListVPCEConfigurationsInput) *DeviceFarmListVPCEConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ListVPCEConfigurations", input)
	return &DeviceFarmListVPCEConfigurationsFuture{Future: future}
}

func (a *stub) PurchaseOffering(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) (*devicefarm.PurchaseOfferingOutput, error) {
	var output devicefarm.PurchaseOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-PurchaseOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseOfferingAsync(ctx workflow.Context, input *devicefarm.PurchaseOfferingInput) *DeviceFarmPurchaseOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-PurchaseOffering", input)
	return &DeviceFarmPurchaseOfferingFuture{Future: future}
}

func (a *stub) RenewOffering(ctx workflow.Context, input *devicefarm.RenewOfferingInput) (*devicefarm.RenewOfferingOutput, error) {
	var output devicefarm.RenewOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-RenewOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RenewOfferingAsync(ctx workflow.Context, input *devicefarm.RenewOfferingInput) *DeviceFarmRenewOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-RenewOffering", input)
	return &DeviceFarmRenewOfferingFuture{Future: future}
}

func (a *stub) ScheduleRun(ctx workflow.Context, input *devicefarm.ScheduleRunInput) (*devicefarm.ScheduleRunOutput, error) {
	var output devicefarm.ScheduleRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-ScheduleRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScheduleRunAsync(ctx workflow.Context, input *devicefarm.ScheduleRunInput) *DeviceFarmScheduleRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-ScheduleRun", input)
	return &DeviceFarmScheduleRunFuture{Future: future}
}

func (a *stub) StopJob(ctx workflow.Context, input *devicefarm.StopJobInput) (*devicefarm.StopJobOutput, error) {
	var output devicefarm.StopJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopJobAsync(ctx workflow.Context, input *devicefarm.StopJobInput) *DeviceFarmStopJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopJob", input)
	return &DeviceFarmStopJobFuture{Future: future}
}

func (a *stub) StopRemoteAccessSession(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	var output devicefarm.StopRemoteAccessSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRemoteAccessSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRemoteAccessSessionAsync(ctx workflow.Context, input *devicefarm.StopRemoteAccessSessionInput) *DeviceFarmStopRemoteAccessSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRemoteAccessSession", input)
	return &DeviceFarmStopRemoteAccessSessionFuture{Future: future}
}

func (a *stub) StopRun(ctx workflow.Context, input *devicefarm.StopRunInput) (*devicefarm.StopRunOutput, error) {
	var output devicefarm.StopRunOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRun", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopRunAsync(ctx workflow.Context, input *devicefarm.StopRunInput) *DeviceFarmStopRunFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-StopRun", input)
	return &DeviceFarmStopRunFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *devicefarm.TagResourceInput) (*devicefarm.TagResourceOutput, error) {
	var output devicefarm.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *devicefarm.TagResourceInput) *DeviceFarmTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-TagResource", input)
	return &DeviceFarmTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *devicefarm.UntagResourceInput) (*devicefarm.UntagResourceOutput, error) {
	var output devicefarm.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *devicefarm.UntagResourceInput) *DeviceFarmUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UntagResource", input)
	return &DeviceFarmUntagResourceFuture{Future: future}
}

func (a *stub) UpdateDeviceInstance(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	var output devicefarm.UpdateDeviceInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDeviceInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeviceInstanceAsync(ctx workflow.Context, input *devicefarm.UpdateDeviceInstanceInput) *DeviceFarmUpdateDeviceInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDeviceInstance", input)
	return &DeviceFarmUpdateDeviceInstanceFuture{Future: future}
}

func (a *stub) UpdateDevicePool(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) (*devicefarm.UpdateDevicePoolOutput, error) {
	var output devicefarm.UpdateDevicePoolOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDevicePool", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDevicePoolAsync(ctx workflow.Context, input *devicefarm.UpdateDevicePoolInput) *DeviceFarmUpdateDevicePoolFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateDevicePool", input)
	return &DeviceFarmUpdateDevicePoolFuture{Future: future}
}

func (a *stub) UpdateInstanceProfile(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) (*devicefarm.UpdateInstanceProfileOutput, error) {
	var output devicefarm.UpdateInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceProfileAsync(ctx workflow.Context, input *devicefarm.UpdateInstanceProfileInput) *DeviceFarmUpdateInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateInstanceProfile", input)
	return &DeviceFarmUpdateInstanceProfileFuture{Future: future}
}

func (a *stub) UpdateNetworkProfile(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) (*devicefarm.UpdateNetworkProfileOutput, error) {
	var output devicefarm.UpdateNetworkProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateNetworkProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNetworkProfileAsync(ctx workflow.Context, input *devicefarm.UpdateNetworkProfileInput) *DeviceFarmUpdateNetworkProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateNetworkProfile", input)
	return &DeviceFarmUpdateNetworkProfileFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *devicefarm.UpdateProjectInput) (*devicefarm.UpdateProjectOutput, error) {
	var output devicefarm.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *devicefarm.UpdateProjectInput) *DeviceFarmUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateProject", input)
	return &DeviceFarmUpdateProjectFuture{Future: future}
}

func (a *stub) UpdateTestGridProject(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) (*devicefarm.UpdateTestGridProjectOutput, error) {
	var output devicefarm.UpdateTestGridProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateTestGridProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTestGridProjectAsync(ctx workflow.Context, input *devicefarm.UpdateTestGridProjectInput) *DeviceFarmUpdateTestGridProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateTestGridProject", input)
	return &DeviceFarmUpdateTestGridProjectFuture{Future: future}
}

func (a *stub) UpdateUpload(ctx workflow.Context, input *devicefarm.UpdateUploadInput) (*devicefarm.UpdateUploadOutput, error) {
	var output devicefarm.UpdateUploadOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateUpload", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUploadAsync(ctx workflow.Context, input *devicefarm.UpdateUploadInput) *DeviceFarmUpdateUploadFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateUpload", input)
	return &DeviceFarmUpdateUploadFuture{Future: future}
}

func (a *stub) UpdateVPCEConfiguration(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	var output devicefarm.UpdateVPCEConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateVPCEConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVPCEConfigurationAsync(ctx workflow.Context, input *devicefarm.UpdateVPCEConfigurationInput) *DeviceFarmUpdateVPCEConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-devicefarm-UpdateVPCEConfiguration", input)
	return &DeviceFarmUpdateVPCEConfigurationFuture{Future: future}
}
