// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package opsworksstub

import (
	"github.com/aws/aws-sdk-go/service/opsworks"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssignInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssignInstanceFuture) Get(ctx workflow.Context) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssignVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssignVolumeFuture) Get(ctx workflow.Context) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachElasticLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloneStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloneStackFuture) Get(ctx workflow.Context) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAppFuture) Get(ctx workflow.Context) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeploymentFuture) Get(ctx workflow.Context) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceFuture) Get(ctx workflow.Context) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLayerFuture) Get(ctx workflow.Context) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStackFuture) Get(ctx workflow.Context) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAppFuture) Get(ctx workflow.Context) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLayerFuture) Get(ctx workflow.Context) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStackFuture) Get(ctx workflow.Context) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterEcsClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAgentVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAgentVersionsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAppsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAppsFuture) Get(ctx workflow.Context) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCommandsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCommandsFuture) Get(ctx workflow.Context) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeploymentsFuture) Get(ctx workflow.Context) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEcsClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEcsClustersFuture) Get(ctx workflow.Context) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticIpsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticIpsFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticLoadBalancersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticLoadBalancersFuture) Get(ctx workflow.Context) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLayersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLayersFuture) Get(ctx workflow.Context) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoadBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMyUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOperatingSystemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOperatingSystemsFuture) Get(ctx workflow.Context) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePermissionsFuture) Get(ctx workflow.Context) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRaidArraysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRaidArraysFuture) Get(ctx workflow.Context) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRdsDbInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRdsDbInstancesFuture) Get(ctx workflow.Context) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeServiceErrorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeServiceErrorsFuture) Get(ctx workflow.Context) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackProvisioningParametersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackProvisioningParametersFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStackSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStackSummaryFuture) Get(ctx workflow.Context) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStacksFuture) Get(ctx workflow.Context) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTimeBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserProfilesFuture) Get(ctx workflow.Context) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVolumesFuture) Get(ctx workflow.Context) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachElasticLoadBalancerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachElasticLoadBalancerFuture) Get(ctx workflow.Context) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetHostnameSuggestionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetHostnameSuggestionFuture) Get(ctx workflow.Context) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GrantAccessFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GrantAccessFuture) Get(ctx workflow.Context) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsFuture) Get(ctx workflow.Context) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootInstanceFuture) Get(ctx workflow.Context) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterEcsClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterEcsClusterFuture) Get(ctx workflow.Context) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterElasticIpFuture) Get(ctx workflow.Context) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterVolumeFuture) Get(ctx workflow.Context) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetLoadBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetLoadBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetPermissionFuture) Get(ctx workflow.Context) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SetTimeBasedAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SetTimeBasedAutoScalingFuture) Get(ctx workflow.Context) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartInstanceFuture) Get(ctx workflow.Context) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartStackFuture) Get(ctx workflow.Context) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopInstanceFuture) Get(ctx workflow.Context) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopStackFuture) Get(ctx workflow.Context) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnassignInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnassignInstanceFuture) Get(ctx workflow.Context) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnassignVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnassignVolumeFuture) Get(ctx workflow.Context) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAppFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAppFuture) Get(ctx workflow.Context) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateElasticIpFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateElasticIpFuture) Get(ctx workflow.Context) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLayerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLayerFuture) Get(ctx workflow.Context) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMyUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMyUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRdsDbInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRdsDbInstanceFuture) Get(ctx workflow.Context) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateStackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateStackFuture) Get(ctx workflow.Context) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserProfileFuture) Get(ctx workflow.Context) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateVolumeFuture) Get(ctx workflow.Context) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignInstance(ctx workflow.Context, input *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error) {
	var output opsworks.AssignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-AssignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignInstanceAsync(ctx workflow.Context, input *opsworks.AssignInstanceInput) *AssignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-AssignInstance", input)
	return &AssignInstanceFuture{Future: future}
}

func (a *stub) AssignVolume(ctx workflow.Context, input *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error) {
	var output opsworks.AssignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-AssignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignVolumeAsync(ctx workflow.Context, input *opsworks.AssignVolumeInput) *AssignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-AssignVolume", input)
	return &AssignVolumeFuture{Future: future}
}

func (a *stub) AssociateElasticIp(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error) {
	var output opsworks.AssociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-AssociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateElasticIpAsync(ctx workflow.Context, input *opsworks.AssociateElasticIpInput) *AssociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-AssociateElasticIp", input)
	return &AssociateElasticIpFuture{Future: future}
}

func (a *stub) AttachElasticLoadBalancer(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	var output opsworks.AttachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-AttachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.AttachElasticLoadBalancerInput) *AttachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-AttachElasticLoadBalancer", input)
	return &AttachElasticLoadBalancerFuture{Future: future}
}

func (a *stub) CloneStack(ctx workflow.Context, input *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error) {
	var output opsworks.CloneStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CloneStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CloneStackAsync(ctx workflow.Context, input *opsworks.CloneStackInput) *CloneStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CloneStack", input)
	return &CloneStackFuture{Future: future}
}

func (a *stub) CreateApp(ctx workflow.Context, input *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error) {
	var output opsworks.CreateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAppAsync(ctx workflow.Context, input *opsworks.CreateAppInput) *CreateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateApp", input)
	return &CreateAppFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error) {
	var output opsworks.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *opsworks.CreateDeploymentInput) *CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateDeployment", input)
	return &CreateDeploymentFuture{Future: future}
}

func (a *stub) CreateInstance(ctx workflow.Context, input *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error) {
	var output opsworks.CreateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceAsync(ctx workflow.Context, input *opsworks.CreateInstanceInput) *CreateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateInstance", input)
	return &CreateInstanceFuture{Future: future}
}

func (a *stub) CreateLayer(ctx workflow.Context, input *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error) {
	var output opsworks.CreateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLayerAsync(ctx workflow.Context, input *opsworks.CreateLayerInput) *CreateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateLayer", input)
	return &CreateLayerFuture{Future: future}
}

func (a *stub) CreateStack(ctx workflow.Context, input *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error) {
	var output opsworks.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStackAsync(ctx workflow.Context, input *opsworks.CreateStackInput) *CreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateStack", input)
	return &CreateStackFuture{Future: future}
}

func (a *stub) CreateUserProfile(ctx workflow.Context, input *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error) {
	var output opsworks.CreateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserProfileAsync(ctx workflow.Context, input *opsworks.CreateUserProfileInput) *CreateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-CreateUserProfile", input)
	return &CreateUserProfileFuture{Future: future}
}

func (a *stub) DeleteApp(ctx workflow.Context, input *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error) {
	var output opsworks.DeleteAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAppAsync(ctx workflow.Context, input *opsworks.DeleteAppInput) *DeleteAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteApp", input)
	return &DeleteAppFuture{Future: future}
}

func (a *stub) DeleteInstance(ctx workflow.Context, input *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error) {
	var output opsworks.DeleteInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInstanceAsync(ctx workflow.Context, input *opsworks.DeleteInstanceInput) *DeleteInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteInstance", input)
	return &DeleteInstanceFuture{Future: future}
}

func (a *stub) DeleteLayer(ctx workflow.Context, input *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error) {
	var output opsworks.DeleteLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLayerAsync(ctx workflow.Context, input *opsworks.DeleteLayerInput) *DeleteLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteLayer", input)
	return &DeleteLayerFuture{Future: future}
}

func (a *stub) DeleteStack(ctx workflow.Context, input *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error) {
	var output opsworks.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStackAsync(ctx workflow.Context, input *opsworks.DeleteStackInput) *DeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteStack", input)
	return &DeleteStackFuture{Future: future}
}

func (a *stub) DeleteUserProfile(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error) {
	var output opsworks.DeleteUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserProfileAsync(ctx workflow.Context, input *opsworks.DeleteUserProfileInput) *DeleteUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeleteUserProfile", input)
	return &DeleteUserProfileFuture{Future: future}
}

func (a *stub) DeregisterEcsCluster(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error) {
	var output opsworks.DeregisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterEcsClusterAsync(ctx workflow.Context, input *opsworks.DeregisterEcsClusterInput) *DeregisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterEcsCluster", input)
	return &DeregisterEcsClusterFuture{Future: future}
}

func (a *stub) DeregisterElasticIp(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error) {
	var output opsworks.DeregisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterElasticIpAsync(ctx workflow.Context, input *opsworks.DeregisterElasticIpInput) *DeregisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterElasticIp", input)
	return &DeregisterElasticIpFuture{Future: future}
}

func (a *stub) DeregisterInstance(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error) {
	var output opsworks.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterInstanceInput) *DeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterInstance", input)
	return &DeregisterInstanceFuture{Future: future}
}

func (a *stub) DeregisterRdsDbInstance(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	var output opsworks.DeregisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.DeregisterRdsDbInstanceInput) *DeregisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterRdsDbInstance", input)
	return &DeregisterRdsDbInstanceFuture{Future: future}
}

func (a *stub) DeregisterVolume(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error) {
	var output opsworks.DeregisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterVolumeAsync(ctx workflow.Context, input *opsworks.DeregisterVolumeInput) *DeregisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DeregisterVolume", input)
	return &DeregisterVolumeFuture{Future: future}
}

func (a *stub) DescribeAgentVersions(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error) {
	var output opsworks.DescribeAgentVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeAgentVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAgentVersionsAsync(ctx workflow.Context, input *opsworks.DescribeAgentVersionsInput) *DescribeAgentVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeAgentVersions", input)
	return &DescribeAgentVersionsFuture{Future: future}
}

func (a *stub) DescribeApps(ctx workflow.Context, input *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error) {
	var output opsworks.DescribeAppsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeApps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAppsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *DescribeAppsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeApps", input)
	return &DescribeAppsFuture{Future: future}
}

func (a *stub) DescribeCommands(ctx workflow.Context, input *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error) {
	var output opsworks.DescribeCommandsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeCommands", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCommandsAsync(ctx workflow.Context, input *opsworks.DescribeCommandsInput) *DescribeCommandsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeCommands", input)
	return &DescribeCommandsFuture{Future: future}
}

func (a *stub) DescribeDeployments(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error) {
	var output opsworks.DescribeDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeploymentsAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *DescribeDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeDeployments", input)
	return &DescribeDeploymentsFuture{Future: future}
}

func (a *stub) DescribeEcsClusters(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error) {
	var output opsworks.DescribeEcsClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeEcsClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEcsClustersAsync(ctx workflow.Context, input *opsworks.DescribeEcsClustersInput) *DescribeEcsClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeEcsClusters", input)
	return &DescribeEcsClustersFuture{Future: future}
}

func (a *stub) DescribeElasticIps(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error) {
	var output opsworks.DescribeElasticIpsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeElasticIps", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticIpsAsync(ctx workflow.Context, input *opsworks.DescribeElasticIpsInput) *DescribeElasticIpsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeElasticIps", input)
	return &DescribeElasticIpsFuture{Future: future}
}

func (a *stub) DescribeElasticLoadBalancers(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	var output opsworks.DescribeElasticLoadBalancersOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeElasticLoadBalancers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticLoadBalancersAsync(ctx workflow.Context, input *opsworks.DescribeElasticLoadBalancersInput) *DescribeElasticLoadBalancersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeElasticLoadBalancers", input)
	return &DescribeElasticLoadBalancersFuture{Future: future}
}

func (a *stub) DescribeInstances(ctx workflow.Context, input *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error) {
	var output opsworks.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *DescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeInstances", input)
	return &DescribeInstancesFuture{Future: future}
}

func (a *stub) DescribeLayers(ctx workflow.Context, input *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error) {
	var output opsworks.DescribeLayersOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeLayers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLayersAsync(ctx workflow.Context, input *opsworks.DescribeLayersInput) *DescribeLayersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeLayers", input)
	return &DescribeLayersFuture{Future: future}
}

func (a *stub) DescribeLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	var output opsworks.DescribeLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeLoadBasedAutoScalingInput) *DescribeLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeLoadBasedAutoScaling", input)
	return &DescribeLoadBasedAutoScalingFuture{Future: future}
}

func (a *stub) DescribeMyUserProfile(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error) {
	var output opsworks.DescribeMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMyUserProfileAsync(ctx workflow.Context, input *opsworks.DescribeMyUserProfileInput) *DescribeMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeMyUserProfile", input)
	return &DescribeMyUserProfileFuture{Future: future}
}

func (a *stub) DescribeOperatingSystems(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error) {
	var output opsworks.DescribeOperatingSystemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeOperatingSystems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOperatingSystemsAsync(ctx workflow.Context, input *opsworks.DescribeOperatingSystemsInput) *DescribeOperatingSystemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeOperatingSystems", input)
	return &DescribeOperatingSystemsFuture{Future: future}
}

func (a *stub) DescribePermissions(ctx workflow.Context, input *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error) {
	var output opsworks.DescribePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePermissionsAsync(ctx workflow.Context, input *opsworks.DescribePermissionsInput) *DescribePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribePermissions", input)
	return &DescribePermissionsFuture{Future: future}
}

func (a *stub) DescribeRaidArrays(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error) {
	var output opsworks.DescribeRaidArraysOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeRaidArrays", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRaidArraysAsync(ctx workflow.Context, input *opsworks.DescribeRaidArraysInput) *DescribeRaidArraysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeRaidArrays", input)
	return &DescribeRaidArraysFuture{Future: future}
}

func (a *stub) DescribeRdsDbInstances(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	var output opsworks.DescribeRdsDbInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeRdsDbInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRdsDbInstancesAsync(ctx workflow.Context, input *opsworks.DescribeRdsDbInstancesInput) *DescribeRdsDbInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeRdsDbInstances", input)
	return &DescribeRdsDbInstancesFuture{Future: future}
}

func (a *stub) DescribeServiceErrors(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error) {
	var output opsworks.DescribeServiceErrorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeServiceErrors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeServiceErrorsAsync(ctx workflow.Context, input *opsworks.DescribeServiceErrorsInput) *DescribeServiceErrorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeServiceErrors", input)
	return &DescribeServiceErrorsFuture{Future: future}
}

func (a *stub) DescribeStackProvisioningParameters(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	var output opsworks.DescribeStackProvisioningParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStackProvisioningParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackProvisioningParametersAsync(ctx workflow.Context, input *opsworks.DescribeStackProvisioningParametersInput) *DescribeStackProvisioningParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStackProvisioningParameters", input)
	return &DescribeStackProvisioningParametersFuture{Future: future}
}

func (a *stub) DescribeStackSummary(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error) {
	var output opsworks.DescribeStackSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStackSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStackSummaryAsync(ctx workflow.Context, input *opsworks.DescribeStackSummaryInput) *DescribeStackSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStackSummary", input)
	return &DescribeStackSummaryFuture{Future: future}
}

func (a *stub) DescribeStacks(ctx workflow.Context, input *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error) {
	var output opsworks.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStacksAsync(ctx workflow.Context, input *opsworks.DescribeStacksInput) *DescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeStacks", input)
	return &DescribeStacksFuture{Future: future}
}

func (a *stub) DescribeTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	var output opsworks.DescribeTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.DescribeTimeBasedAutoScalingInput) *DescribeTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeTimeBasedAutoScaling", input)
	return &DescribeTimeBasedAutoScalingFuture{Future: future}
}

func (a *stub) DescribeUserProfiles(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error) {
	var output opsworks.DescribeUserProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeUserProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserProfilesAsync(ctx workflow.Context, input *opsworks.DescribeUserProfilesInput) *DescribeUserProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeUserProfiles", input)
	return &DescribeUserProfilesFuture{Future: future}
}

func (a *stub) DescribeVolumes(ctx workflow.Context, input *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error) {
	var output opsworks.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVolumesAsync(ctx workflow.Context, input *opsworks.DescribeVolumesInput) *DescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DescribeVolumes", input)
	return &DescribeVolumesFuture{Future: future}
}

func (a *stub) DetachElasticLoadBalancer(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	var output opsworks.DetachElasticLoadBalancerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DetachElasticLoadBalancer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachElasticLoadBalancerAsync(ctx workflow.Context, input *opsworks.DetachElasticLoadBalancerInput) *DetachElasticLoadBalancerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DetachElasticLoadBalancer", input)
	return &DetachElasticLoadBalancerFuture{Future: future}
}

func (a *stub) DisassociateElasticIp(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error) {
	var output opsworks.DisassociateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-DisassociateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateElasticIpAsync(ctx workflow.Context, input *opsworks.DisassociateElasticIpInput) *DisassociateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-DisassociateElasticIp", input)
	return &DisassociateElasticIpFuture{Future: future}
}

func (a *stub) GetHostnameSuggestion(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error) {
	var output opsworks.GetHostnameSuggestionOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-GetHostnameSuggestion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostnameSuggestionAsync(ctx workflow.Context, input *opsworks.GetHostnameSuggestionInput) *GetHostnameSuggestionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-GetHostnameSuggestion", input)
	return &GetHostnameSuggestionFuture{Future: future}
}

func (a *stub) GrantAccess(ctx workflow.Context, input *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error) {
	var output opsworks.GrantAccessOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-GrantAccess", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GrantAccessAsync(ctx workflow.Context, input *opsworks.GrantAccessInput) *GrantAccessFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-GrantAccess", input)
	return &GrantAccessFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error) {
	var output opsworks.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *opsworks.ListTagsInput) *ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-ListTags", input)
	return &ListTagsFuture{Future: future}
}

func (a *stub) RebootInstance(ctx workflow.Context, input *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error) {
	var output opsworks.RebootInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RebootInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootInstanceAsync(ctx workflow.Context, input *opsworks.RebootInstanceInput) *RebootInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RebootInstance", input)
	return &RebootInstanceFuture{Future: future}
}

func (a *stub) RegisterEcsCluster(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error) {
	var output opsworks.RegisterEcsClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterEcsCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterEcsClusterAsync(ctx workflow.Context, input *opsworks.RegisterEcsClusterInput) *RegisterEcsClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterEcsCluster", input)
	return &RegisterEcsClusterFuture{Future: future}
}

func (a *stub) RegisterElasticIp(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error) {
	var output opsworks.RegisterElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterElasticIpAsync(ctx workflow.Context, input *opsworks.RegisterElasticIpInput) *RegisterElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterElasticIp", input)
	return &RegisterElasticIpFuture{Future: future}
}

func (a *stub) RegisterInstance(ctx workflow.Context, input *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error) {
	var output opsworks.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterInstanceAsync(ctx workflow.Context, input *opsworks.RegisterInstanceInput) *RegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterInstance", input)
	return &RegisterInstanceFuture{Future: future}
}

func (a *stub) RegisterRdsDbInstance(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	var output opsworks.RegisterRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.RegisterRdsDbInstanceInput) *RegisterRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterRdsDbInstance", input)
	return &RegisterRdsDbInstanceFuture{Future: future}
}

func (a *stub) RegisterVolume(ctx workflow.Context, input *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error) {
	var output opsworks.RegisterVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterVolumeAsync(ctx workflow.Context, input *opsworks.RegisterVolumeInput) *RegisterVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-RegisterVolume", input)
	return &RegisterVolumeFuture{Future: future}
}

func (a *stub) SetLoadBasedAutoScaling(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	var output opsworks.SetLoadBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-SetLoadBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetLoadBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetLoadBasedAutoScalingInput) *SetLoadBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-SetLoadBasedAutoScaling", input)
	return &SetLoadBasedAutoScalingFuture{Future: future}
}

func (a *stub) SetPermission(ctx workflow.Context, input *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error) {
	var output opsworks.SetPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-SetPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetPermissionAsync(ctx workflow.Context, input *opsworks.SetPermissionInput) *SetPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-SetPermission", input)
	return &SetPermissionFuture{Future: future}
}

func (a *stub) SetTimeBasedAutoScaling(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	var output opsworks.SetTimeBasedAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-SetTimeBasedAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetTimeBasedAutoScalingAsync(ctx workflow.Context, input *opsworks.SetTimeBasedAutoScalingInput) *SetTimeBasedAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-SetTimeBasedAutoScaling", input)
	return &SetTimeBasedAutoScalingFuture{Future: future}
}

func (a *stub) StartInstance(ctx workflow.Context, input *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error) {
	var output opsworks.StartInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-StartInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartInstanceAsync(ctx workflow.Context, input *opsworks.StartInstanceInput) *StartInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-StartInstance", input)
	return &StartInstanceFuture{Future: future}
}

func (a *stub) StartStack(ctx workflow.Context, input *opsworks.StartStackInput) (*opsworks.StartStackOutput, error) {
	var output opsworks.StartStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-StartStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartStackAsync(ctx workflow.Context, input *opsworks.StartStackInput) *StartStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-StartStack", input)
	return &StartStackFuture{Future: future}
}

func (a *stub) StopInstance(ctx workflow.Context, input *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error) {
	var output opsworks.StopInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-StopInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopInstanceAsync(ctx workflow.Context, input *opsworks.StopInstanceInput) *StopInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-StopInstance", input)
	return &StopInstanceFuture{Future: future}
}

func (a *stub) StopStack(ctx workflow.Context, input *opsworks.StopStackInput) (*opsworks.StopStackOutput, error) {
	var output opsworks.StopStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-StopStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStackAsync(ctx workflow.Context, input *opsworks.StopStackInput) *StopStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-StopStack", input)
	return &StopStackFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error) {
	var output opsworks.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *opsworks.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UnassignInstance(ctx workflow.Context, input *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error) {
	var output opsworks.UnassignInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UnassignInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnassignInstanceAsync(ctx workflow.Context, input *opsworks.UnassignInstanceInput) *UnassignInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UnassignInstance", input)
	return &UnassignInstanceFuture{Future: future}
}

func (a *stub) UnassignVolume(ctx workflow.Context, input *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error) {
	var output opsworks.UnassignVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UnassignVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnassignVolumeAsync(ctx workflow.Context, input *opsworks.UnassignVolumeInput) *UnassignVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UnassignVolume", input)
	return &UnassignVolumeFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error) {
	var output opsworks.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *opsworks.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApp(ctx workflow.Context, input *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error) {
	var output opsworks.UpdateAppOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateApp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAppAsync(ctx workflow.Context, input *opsworks.UpdateAppInput) *UpdateAppFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateApp", input)
	return &UpdateAppFuture{Future: future}
}

func (a *stub) UpdateElasticIp(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error) {
	var output opsworks.UpdateElasticIpOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateElasticIp", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateElasticIpAsync(ctx workflow.Context, input *opsworks.UpdateElasticIpInput) *UpdateElasticIpFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateElasticIp", input)
	return &UpdateElasticIpFuture{Future: future}
}

func (a *stub) UpdateInstance(ctx workflow.Context, input *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error) {
	var output opsworks.UpdateInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateInstanceAsync(ctx workflow.Context, input *opsworks.UpdateInstanceInput) *UpdateInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateInstance", input)
	return &UpdateInstanceFuture{Future: future}
}

func (a *stub) UpdateLayer(ctx workflow.Context, input *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error) {
	var output opsworks.UpdateLayerOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateLayer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLayerAsync(ctx workflow.Context, input *opsworks.UpdateLayerInput) *UpdateLayerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateLayer", input)
	return &UpdateLayerFuture{Future: future}
}

func (a *stub) UpdateMyUserProfile(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error) {
	var output opsworks.UpdateMyUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateMyUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMyUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateMyUserProfileInput) *UpdateMyUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateMyUserProfile", input)
	return &UpdateMyUserProfileFuture{Future: future}
}

func (a *stub) UpdateRdsDbInstance(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	var output opsworks.UpdateRdsDbInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateRdsDbInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRdsDbInstanceAsync(ctx workflow.Context, input *opsworks.UpdateRdsDbInstanceInput) *UpdateRdsDbInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateRdsDbInstance", input)
	return &UpdateRdsDbInstanceFuture{Future: future}
}

func (a *stub) UpdateStack(ctx workflow.Context, input *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error) {
	var output opsworks.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStackAsync(ctx workflow.Context, input *opsworks.UpdateStackInput) *UpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateStack", input)
	return &UpdateStackFuture{Future: future}
}

func (a *stub) UpdateUserProfile(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error) {
	var output opsworks.UpdateUserProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateUserProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserProfileAsync(ctx workflow.Context, input *opsworks.UpdateUserProfileInput) *UpdateUserProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateUserProfile", input)
	return &UpdateUserProfileFuture{Future: future}
}

func (a *stub) UpdateVolume(ctx workflow.Context, input *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error) {
	var output opsworks.UpdateVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVolumeAsync(ctx workflow.Context, input *opsworks.UpdateVolumeInput) *UpdateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-UpdateVolume", input)
	return &UpdateVolumeFuture{Future: future}
}

func (a *stub) WaitUntilAppExists(ctx workflow.Context, input *opsworks.DescribeAppsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilAppExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilAppExistsAsync(ctx workflow.Context, input *opsworks.DescribeAppsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilAppExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilDeploymentSuccessful(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilDeploymentSuccessful", input).Get(ctx, nil)
}

func (a *stub) WaitUntilDeploymentSuccessfulAsync(ctx workflow.Context, input *opsworks.DescribeDeploymentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilDeploymentSuccessful", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceOnline(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceOnline", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceOnlineAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceOnline", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceRegistered(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceRegistered", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceRegisteredAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceRegistered", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceStopped(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceTerminated(ctx workflow.Context, input *opsworks.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *opsworks.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-opsworks-WaitUntilInstanceTerminated", input)
	return clients.NewVoidFuture(future)
}
