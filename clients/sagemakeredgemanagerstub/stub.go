// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sagemakeredgemanagerstub

import (
	"github.com/aws/aws-sdk-go/service/sagemakeredgemanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type GetDeviceRegistrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDeviceRegistrationFuture) Get(ctx workflow.Context) (*sagemakeredgemanager.GetDeviceRegistrationOutput, error) {
	var output sagemakeredgemanager.GetDeviceRegistrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendHeartbeatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendHeartbeatFuture) Get(ctx workflow.Context) (*sagemakeredgemanager.SendHeartbeatOutput, error) {
	var output sagemakeredgemanager.SendHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceRegistration(ctx workflow.Context, input *sagemakeredgemanager.GetDeviceRegistrationInput) (*sagemakeredgemanager.GetDeviceRegistrationOutput, error) {
	var output sagemakeredgemanager.GetDeviceRegistrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemakeredgemanager-GetDeviceRegistration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeviceRegistrationAsync(ctx workflow.Context, input *sagemakeredgemanager.GetDeviceRegistrationInput) *GetDeviceRegistrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemakeredgemanager-GetDeviceRegistration", input)
	return &GetDeviceRegistrationFuture{Future: future}
}

func (a *stub) SendHeartbeat(ctx workflow.Context, input *sagemakeredgemanager.SendHeartbeatInput) (*sagemakeredgemanager.SendHeartbeatOutput, error) {
	var output sagemakeredgemanager.SendHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws-sagemakeredgemanager-SendHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendHeartbeatAsync(ctx workflow.Context, input *sagemakeredgemanager.SendHeartbeatInput) *SendHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-sagemakeredgemanager-SendHeartbeat", input)
	return &SendHeartbeatFuture{Future: future}
}
