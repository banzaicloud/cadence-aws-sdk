// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package guarddutystub

import (
	"github.com/aws/aws-sdk-go/service/guardduty"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptInvitationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptInvitationFuture) Get(ctx workflow.Context) (*guardduty.AcceptInvitationOutput, error) {
	var output guardduty.AcceptInvitationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ArchiveFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ArchiveFindingsFuture) Get(ctx workflow.Context) (*guardduty.ArchiveFindingsOutput, error) {
	var output guardduty.ArchiveFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDetectorFuture) Get(ctx workflow.Context) (*guardduty.CreateDetectorOutput, error) {
	var output guardduty.CreateDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFilterFuture) Get(ctx workflow.Context) (*guardduty.CreateFilterOutput, error) {
	var output guardduty.CreateFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateIPSetFuture) Get(ctx workflow.Context) (*guardduty.CreateIPSetOutput, error) {
	var output guardduty.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMembersFuture) Get(ctx workflow.Context) (*guardduty.CreateMembersOutput, error) {
	var output guardduty.CreateMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePublishingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePublishingDestinationFuture) Get(ctx workflow.Context) (*guardduty.CreatePublishingDestinationOutput, error) {
	var output guardduty.CreatePublishingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSampleFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSampleFindingsFuture) Get(ctx workflow.Context) (*guardduty.CreateSampleFindingsOutput, error) {
	var output guardduty.CreateSampleFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateThreatIntelSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateThreatIntelSetFuture) Get(ctx workflow.Context) (*guardduty.CreateThreatIntelSetOutput, error) {
	var output guardduty.CreateThreatIntelSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeclineInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeclineInvitationsFuture) Get(ctx workflow.Context) (*guardduty.DeclineInvitationsOutput, error) {
	var output guardduty.DeclineInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDetectorFuture) Get(ctx workflow.Context) (*guardduty.DeleteDetectorOutput, error) {
	var output guardduty.DeleteDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFilterFuture) Get(ctx workflow.Context) (*guardduty.DeleteFilterOutput, error) {
	var output guardduty.DeleteFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteIPSetFuture) Get(ctx workflow.Context) (*guardduty.DeleteIPSetOutput, error) {
	var output guardduty.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInvitationsFuture) Get(ctx workflow.Context) (*guardduty.DeleteInvitationsOutput, error) {
	var output guardduty.DeleteInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMembersFuture) Get(ctx workflow.Context) (*guardduty.DeleteMembersOutput, error) {
	var output guardduty.DeleteMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePublishingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePublishingDestinationFuture) Get(ctx workflow.Context) (*guardduty.DeletePublishingDestinationOutput, error) {
	var output guardduty.DeletePublishingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteThreatIntelSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteThreatIntelSetFuture) Get(ctx workflow.Context) (*guardduty.DeleteThreatIntelSetOutput, error) {
	var output guardduty.DeleteThreatIntelSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeOrganizationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeOrganizationConfigurationFuture) Get(ctx workflow.Context) (*guardduty.DescribeOrganizationConfigurationOutput, error) {
	var output guardduty.DescribeOrganizationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePublishingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePublishingDestinationFuture) Get(ctx workflow.Context) (*guardduty.DescribePublishingDestinationOutput, error) {
	var output guardduty.DescribePublishingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*guardduty.DisableOrganizationAdminAccountOutput, error) {
	var output guardduty.DisableOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateFromMasterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateFromMasterAccountFuture) Get(ctx workflow.Context) (*guardduty.DisassociateFromMasterAccountOutput, error) {
	var output guardduty.DisassociateFromMasterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateMembersFuture) Get(ctx workflow.Context) (*guardduty.DisassociateMembersOutput, error) {
	var output guardduty.DisassociateMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*guardduty.EnableOrganizationAdminAccountOutput, error) {
	var output guardduty.EnableOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDetectorFuture) Get(ctx workflow.Context) (*guardduty.GetDetectorOutput, error) {
	var output guardduty.GetDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFilterFuture) Get(ctx workflow.Context) (*guardduty.GetFilterOutput, error) {
	var output guardduty.GetFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFindingsFuture) Get(ctx workflow.Context) (*guardduty.GetFindingsOutput, error) {
	var output guardduty.GetFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFindingsStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFindingsStatisticsFuture) Get(ctx workflow.Context) (*guardduty.GetFindingsStatisticsOutput, error) {
	var output guardduty.GetFindingsStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetIPSetFuture) Get(ctx workflow.Context) (*guardduty.GetIPSetOutput, error) {
	var output guardduty.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetInvitationsCountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetInvitationsCountFuture) Get(ctx workflow.Context) (*guardduty.GetInvitationsCountOutput, error) {
	var output guardduty.GetInvitationsCountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMasterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMasterAccountFuture) Get(ctx workflow.Context) (*guardduty.GetMasterAccountOutput, error) {
	var output guardduty.GetMasterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMemberDetectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMemberDetectorsFuture) Get(ctx workflow.Context) (*guardduty.GetMemberDetectorsOutput, error) {
	var output guardduty.GetMemberDetectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMembersFuture) Get(ctx workflow.Context) (*guardduty.GetMembersOutput, error) {
	var output guardduty.GetMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetThreatIntelSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetThreatIntelSetFuture) Get(ctx workflow.Context) (*guardduty.GetThreatIntelSetOutput, error) {
	var output guardduty.GetThreatIntelSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetUsageStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetUsageStatisticsFuture) Get(ctx workflow.Context) (*guardduty.GetUsageStatisticsOutput, error) {
	var output guardduty.GetUsageStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type InviteMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *InviteMembersFuture) Get(ctx workflow.Context) (*guardduty.InviteMembersOutput, error) {
	var output guardduty.InviteMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDetectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDetectorsFuture) Get(ctx workflow.Context) (*guardduty.ListDetectorsOutput, error) {
	var output guardduty.ListDetectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFiltersFuture) Get(ctx workflow.Context) (*guardduty.ListFiltersOutput, error) {
	var output guardduty.ListFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFindingsFuture) Get(ctx workflow.Context) (*guardduty.ListFindingsOutput, error) {
	var output guardduty.ListFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIPSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIPSetsFuture) Get(ctx workflow.Context) (*guardduty.ListIPSetsOutput, error) {
	var output guardduty.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListInvitationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListInvitationsFuture) Get(ctx workflow.Context) (*guardduty.ListInvitationsOutput, error) {
	var output guardduty.ListInvitationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListMembersFuture) Get(ctx workflow.Context) (*guardduty.ListMembersOutput, error) {
	var output guardduty.ListMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOrganizationAdminAccountsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOrganizationAdminAccountsFuture) Get(ctx workflow.Context) (*guardduty.ListOrganizationAdminAccountsOutput, error) {
	var output guardduty.ListOrganizationAdminAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPublishingDestinationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPublishingDestinationsFuture) Get(ctx workflow.Context) (*guardduty.ListPublishingDestinationsOutput, error) {
	var output guardduty.ListPublishingDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*guardduty.ListTagsForResourceOutput, error) {
	var output guardduty.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListThreatIntelSetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListThreatIntelSetsFuture) Get(ctx workflow.Context) (*guardduty.ListThreatIntelSetsOutput, error) {
	var output guardduty.ListThreatIntelSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartMonitoringMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartMonitoringMembersFuture) Get(ctx workflow.Context) (*guardduty.StartMonitoringMembersOutput, error) {
	var output guardduty.StartMonitoringMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopMonitoringMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopMonitoringMembersFuture) Get(ctx workflow.Context) (*guardduty.StopMonitoringMembersOutput, error) {
	var output guardduty.StopMonitoringMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*guardduty.TagResourceOutput, error) {
	var output guardduty.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnarchiveFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnarchiveFindingsFuture) Get(ctx workflow.Context) (*guardduty.UnarchiveFindingsOutput, error) {
	var output guardduty.UnarchiveFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*guardduty.UntagResourceOutput, error) {
	var output guardduty.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDetectorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDetectorFuture) Get(ctx workflow.Context) (*guardduty.UpdateDetectorOutput, error) {
	var output guardduty.UpdateDetectorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFilterFuture) Get(ctx workflow.Context) (*guardduty.UpdateFilterOutput, error) {
	var output guardduty.UpdateFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFindingsFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFindingsFeedbackFuture) Get(ctx workflow.Context) (*guardduty.UpdateFindingsFeedbackOutput, error) {
	var output guardduty.UpdateFindingsFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateIPSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateIPSetFuture) Get(ctx workflow.Context) (*guardduty.UpdateIPSetOutput, error) {
	var output guardduty.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateMemberDetectorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateMemberDetectorsFuture) Get(ctx workflow.Context) (*guardduty.UpdateMemberDetectorsOutput, error) {
	var output guardduty.UpdateMemberDetectorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateOrganizationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateOrganizationConfigurationFuture) Get(ctx workflow.Context) (*guardduty.UpdateOrganizationConfigurationOutput, error) {
	var output guardduty.UpdateOrganizationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePublishingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePublishingDestinationFuture) Get(ctx workflow.Context) (*guardduty.UpdatePublishingDestinationOutput, error) {
	var output guardduty.UpdatePublishingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateThreatIntelSetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateThreatIntelSetFuture) Get(ctx workflow.Context) (*guardduty.UpdateThreatIntelSetOutput, error) {
	var output guardduty.UpdateThreatIntelSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInvitation(ctx workflow.Context, input *guardduty.AcceptInvitationInput) (*guardduty.AcceptInvitationOutput, error) {
	var output guardduty.AcceptInvitationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-AcceptInvitation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptInvitationAsync(ctx workflow.Context, input *guardduty.AcceptInvitationInput) *AcceptInvitationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-AcceptInvitation", input)
	return &AcceptInvitationFuture{Future: future}
}

func (a *stub) ArchiveFindings(ctx workflow.Context, input *guardduty.ArchiveFindingsInput) (*guardduty.ArchiveFindingsOutput, error) {
	var output guardduty.ArchiveFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ArchiveFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ArchiveFindingsAsync(ctx workflow.Context, input *guardduty.ArchiveFindingsInput) *ArchiveFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ArchiveFindings", input)
	return &ArchiveFindingsFuture{Future: future}
}

func (a *stub) CreateDetector(ctx workflow.Context, input *guardduty.CreateDetectorInput) (*guardduty.CreateDetectorOutput, error) {
	var output guardduty.CreateDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDetectorAsync(ctx workflow.Context, input *guardduty.CreateDetectorInput) *CreateDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateDetector", input)
	return &CreateDetectorFuture{Future: future}
}

func (a *stub) CreateFilter(ctx workflow.Context, input *guardduty.CreateFilterInput) (*guardduty.CreateFilterOutput, error) {
	var output guardduty.CreateFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFilterAsync(ctx workflow.Context, input *guardduty.CreateFilterInput) *CreateFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateFilter", input)
	return &CreateFilterFuture{Future: future}
}

func (a *stub) CreateIPSet(ctx workflow.Context, input *guardduty.CreateIPSetInput) (*guardduty.CreateIPSetOutput, error) {
	var output guardduty.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIPSetAsync(ctx workflow.Context, input *guardduty.CreateIPSetInput) *CreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateIPSet", input)
	return &CreateIPSetFuture{Future: future}
}

func (a *stub) CreateMembers(ctx workflow.Context, input *guardduty.CreateMembersInput) (*guardduty.CreateMembersOutput, error) {
	var output guardduty.CreateMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMembersAsync(ctx workflow.Context, input *guardduty.CreateMembersInput) *CreateMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateMembers", input)
	return &CreateMembersFuture{Future: future}
}

func (a *stub) CreatePublishingDestination(ctx workflow.Context, input *guardduty.CreatePublishingDestinationInput) (*guardduty.CreatePublishingDestinationOutput, error) {
	var output guardduty.CreatePublishingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreatePublishingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePublishingDestinationAsync(ctx workflow.Context, input *guardduty.CreatePublishingDestinationInput) *CreatePublishingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreatePublishingDestination", input)
	return &CreatePublishingDestinationFuture{Future: future}
}

func (a *stub) CreateSampleFindings(ctx workflow.Context, input *guardduty.CreateSampleFindingsInput) (*guardduty.CreateSampleFindingsOutput, error) {
	var output guardduty.CreateSampleFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateSampleFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSampleFindingsAsync(ctx workflow.Context, input *guardduty.CreateSampleFindingsInput) *CreateSampleFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateSampleFindings", input)
	return &CreateSampleFindingsFuture{Future: future}
}

func (a *stub) CreateThreatIntelSet(ctx workflow.Context, input *guardduty.CreateThreatIntelSetInput) (*guardduty.CreateThreatIntelSetOutput, error) {
	var output guardduty.CreateThreatIntelSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateThreatIntelSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThreatIntelSetAsync(ctx workflow.Context, input *guardduty.CreateThreatIntelSetInput) *CreateThreatIntelSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-CreateThreatIntelSet", input)
	return &CreateThreatIntelSetFuture{Future: future}
}

func (a *stub) DeclineInvitations(ctx workflow.Context, input *guardduty.DeclineInvitationsInput) (*guardduty.DeclineInvitationsOutput, error) {
	var output guardduty.DeclineInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeclineInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeclineInvitationsAsync(ctx workflow.Context, input *guardduty.DeclineInvitationsInput) *DeclineInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeclineInvitations", input)
	return &DeclineInvitationsFuture{Future: future}
}

func (a *stub) DeleteDetector(ctx workflow.Context, input *guardduty.DeleteDetectorInput) (*guardduty.DeleteDetectorOutput, error) {
	var output guardduty.DeleteDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDetectorAsync(ctx workflow.Context, input *guardduty.DeleteDetectorInput) *DeleteDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteDetector", input)
	return &DeleteDetectorFuture{Future: future}
}

func (a *stub) DeleteFilter(ctx workflow.Context, input *guardduty.DeleteFilterInput) (*guardduty.DeleteFilterOutput, error) {
	var output guardduty.DeleteFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFilterAsync(ctx workflow.Context, input *guardduty.DeleteFilterInput) *DeleteFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteFilter", input)
	return &DeleteFilterFuture{Future: future}
}

func (a *stub) DeleteIPSet(ctx workflow.Context, input *guardduty.DeleteIPSetInput) (*guardduty.DeleteIPSetOutput, error) {
	var output guardduty.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIPSetAsync(ctx workflow.Context, input *guardduty.DeleteIPSetInput) *DeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteIPSet", input)
	return &DeleteIPSetFuture{Future: future}
}

func (a *stub) DeleteInvitations(ctx workflow.Context, input *guardduty.DeleteInvitationsInput) (*guardduty.DeleteInvitationsOutput, error) {
	var output guardduty.DeleteInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInvitationsAsync(ctx workflow.Context, input *guardduty.DeleteInvitationsInput) *DeleteInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteInvitations", input)
	return &DeleteInvitationsFuture{Future: future}
}

func (a *stub) DeleteMembers(ctx workflow.Context, input *guardduty.DeleteMembersInput) (*guardduty.DeleteMembersOutput, error) {
	var output guardduty.DeleteMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMembersAsync(ctx workflow.Context, input *guardduty.DeleteMembersInput) *DeleteMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteMembers", input)
	return &DeleteMembersFuture{Future: future}
}

func (a *stub) DeletePublishingDestination(ctx workflow.Context, input *guardduty.DeletePublishingDestinationInput) (*guardduty.DeletePublishingDestinationOutput, error) {
	var output guardduty.DeletePublishingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeletePublishingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePublishingDestinationAsync(ctx workflow.Context, input *guardduty.DeletePublishingDestinationInput) *DeletePublishingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeletePublishingDestination", input)
	return &DeletePublishingDestinationFuture{Future: future}
}

func (a *stub) DeleteThreatIntelSet(ctx workflow.Context, input *guardduty.DeleteThreatIntelSetInput) (*guardduty.DeleteThreatIntelSetOutput, error) {
	var output guardduty.DeleteThreatIntelSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteThreatIntelSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThreatIntelSetAsync(ctx workflow.Context, input *guardduty.DeleteThreatIntelSetInput) *DeleteThreatIntelSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DeleteThreatIntelSet", input)
	return &DeleteThreatIntelSetFuture{Future: future}
}

func (a *stub) DescribeOrganizationConfiguration(ctx workflow.Context, input *guardduty.DescribeOrganizationConfigurationInput) (*guardduty.DescribeOrganizationConfigurationOutput, error) {
	var output guardduty.DescribeOrganizationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DescribeOrganizationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeOrganizationConfigurationAsync(ctx workflow.Context, input *guardduty.DescribeOrganizationConfigurationInput) *DescribeOrganizationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DescribeOrganizationConfiguration", input)
	return &DescribeOrganizationConfigurationFuture{Future: future}
}

func (a *stub) DescribePublishingDestination(ctx workflow.Context, input *guardduty.DescribePublishingDestinationInput) (*guardduty.DescribePublishingDestinationOutput, error) {
	var output guardduty.DescribePublishingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DescribePublishingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePublishingDestinationAsync(ctx workflow.Context, input *guardduty.DescribePublishingDestinationInput) *DescribePublishingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DescribePublishingDestination", input)
	return &DescribePublishingDestinationFuture{Future: future}
}

func (a *stub) DisableOrganizationAdminAccount(ctx workflow.Context, input *guardduty.DisableOrganizationAdminAccountInput) (*guardduty.DisableOrganizationAdminAccountOutput, error) {
	var output guardduty.DisableOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DisableOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableOrganizationAdminAccountAsync(ctx workflow.Context, input *guardduty.DisableOrganizationAdminAccountInput) *DisableOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DisableOrganizationAdminAccount", input)
	return &DisableOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) DisassociateFromMasterAccount(ctx workflow.Context, input *guardduty.DisassociateFromMasterAccountInput) (*guardduty.DisassociateFromMasterAccountOutput, error) {
	var output guardduty.DisassociateFromMasterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DisassociateFromMasterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateFromMasterAccountAsync(ctx workflow.Context, input *guardduty.DisassociateFromMasterAccountInput) *DisassociateFromMasterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DisassociateFromMasterAccount", input)
	return &DisassociateFromMasterAccountFuture{Future: future}
}

func (a *stub) DisassociateMembers(ctx workflow.Context, input *guardduty.DisassociateMembersInput) (*guardduty.DisassociateMembersOutput, error) {
	var output guardduty.DisassociateMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-DisassociateMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateMembersAsync(ctx workflow.Context, input *guardduty.DisassociateMembersInput) *DisassociateMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-DisassociateMembers", input)
	return &DisassociateMembersFuture{Future: future}
}

func (a *stub) EnableOrganizationAdminAccount(ctx workflow.Context, input *guardduty.EnableOrganizationAdminAccountInput) (*guardduty.EnableOrganizationAdminAccountOutput, error) {
	var output guardduty.EnableOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-EnableOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableOrganizationAdminAccountAsync(ctx workflow.Context, input *guardduty.EnableOrganizationAdminAccountInput) *EnableOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-EnableOrganizationAdminAccount", input)
	return &EnableOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) GetDetector(ctx workflow.Context, input *guardduty.GetDetectorInput) (*guardduty.GetDetectorOutput, error) {
	var output guardduty.GetDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDetectorAsync(ctx workflow.Context, input *guardduty.GetDetectorInput) *GetDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetDetector", input)
	return &GetDetectorFuture{Future: future}
}

func (a *stub) GetFilter(ctx workflow.Context, input *guardduty.GetFilterInput) (*guardduty.GetFilterOutput, error) {
	var output guardduty.GetFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFilterAsync(ctx workflow.Context, input *guardduty.GetFilterInput) *GetFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFilter", input)
	return &GetFilterFuture{Future: future}
}

func (a *stub) GetFindings(ctx workflow.Context, input *guardduty.GetFindingsInput) (*guardduty.GetFindingsOutput, error) {
	var output guardduty.GetFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFindingsAsync(ctx workflow.Context, input *guardduty.GetFindingsInput) *GetFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFindings", input)
	return &GetFindingsFuture{Future: future}
}

func (a *stub) GetFindingsStatistics(ctx workflow.Context, input *guardduty.GetFindingsStatisticsInput) (*guardduty.GetFindingsStatisticsOutput, error) {
	var output guardduty.GetFindingsStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFindingsStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFindingsStatisticsAsync(ctx workflow.Context, input *guardduty.GetFindingsStatisticsInput) *GetFindingsStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetFindingsStatistics", input)
	return &GetFindingsStatisticsFuture{Future: future}
}

func (a *stub) GetIPSet(ctx workflow.Context, input *guardduty.GetIPSetInput) (*guardduty.GetIPSetOutput, error) {
	var output guardduty.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIPSetAsync(ctx workflow.Context, input *guardduty.GetIPSetInput) *GetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetIPSet", input)
	return &GetIPSetFuture{Future: future}
}

func (a *stub) GetInvitationsCount(ctx workflow.Context, input *guardduty.GetInvitationsCountInput) (*guardduty.GetInvitationsCountOutput, error) {
	var output guardduty.GetInvitationsCountOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetInvitationsCount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetInvitationsCountAsync(ctx workflow.Context, input *guardduty.GetInvitationsCountInput) *GetInvitationsCountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetInvitationsCount", input)
	return &GetInvitationsCountFuture{Future: future}
}

func (a *stub) GetMasterAccount(ctx workflow.Context, input *guardduty.GetMasterAccountInput) (*guardduty.GetMasterAccountOutput, error) {
	var output guardduty.GetMasterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMasterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMasterAccountAsync(ctx workflow.Context, input *guardduty.GetMasterAccountInput) *GetMasterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMasterAccount", input)
	return &GetMasterAccountFuture{Future: future}
}

func (a *stub) GetMemberDetectors(ctx workflow.Context, input *guardduty.GetMemberDetectorsInput) (*guardduty.GetMemberDetectorsOutput, error) {
	var output guardduty.GetMemberDetectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMemberDetectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMemberDetectorsAsync(ctx workflow.Context, input *guardduty.GetMemberDetectorsInput) *GetMemberDetectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMemberDetectors", input)
	return &GetMemberDetectorsFuture{Future: future}
}

func (a *stub) GetMembers(ctx workflow.Context, input *guardduty.GetMembersInput) (*guardduty.GetMembersOutput, error) {
	var output guardduty.GetMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMembersAsync(ctx workflow.Context, input *guardduty.GetMembersInput) *GetMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetMembers", input)
	return &GetMembersFuture{Future: future}
}

func (a *stub) GetThreatIntelSet(ctx workflow.Context, input *guardduty.GetThreatIntelSetInput) (*guardduty.GetThreatIntelSetOutput, error) {
	var output guardduty.GetThreatIntelSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetThreatIntelSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetThreatIntelSetAsync(ctx workflow.Context, input *guardduty.GetThreatIntelSetInput) *GetThreatIntelSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetThreatIntelSet", input)
	return &GetThreatIntelSetFuture{Future: future}
}

func (a *stub) GetUsageStatistics(ctx workflow.Context, input *guardduty.GetUsageStatisticsInput) (*guardduty.GetUsageStatisticsOutput, error) {
	var output guardduty.GetUsageStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-GetUsageStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetUsageStatisticsAsync(ctx workflow.Context, input *guardduty.GetUsageStatisticsInput) *GetUsageStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-GetUsageStatistics", input)
	return &GetUsageStatisticsFuture{Future: future}
}

func (a *stub) InviteMembers(ctx workflow.Context, input *guardduty.InviteMembersInput) (*guardduty.InviteMembersOutput, error) {
	var output guardduty.InviteMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-InviteMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InviteMembersAsync(ctx workflow.Context, input *guardduty.InviteMembersInput) *InviteMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-InviteMembers", input)
	return &InviteMembersFuture{Future: future}
}

func (a *stub) ListDetectors(ctx workflow.Context, input *guardduty.ListDetectorsInput) (*guardduty.ListDetectorsOutput, error) {
	var output guardduty.ListDetectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListDetectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDetectorsAsync(ctx workflow.Context, input *guardduty.ListDetectorsInput) *ListDetectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListDetectors", input)
	return &ListDetectorsFuture{Future: future}
}

func (a *stub) ListFilters(ctx workflow.Context, input *guardduty.ListFiltersInput) (*guardduty.ListFiltersOutput, error) {
	var output guardduty.ListFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFiltersAsync(ctx workflow.Context, input *guardduty.ListFiltersInput) *ListFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListFilters", input)
	return &ListFiltersFuture{Future: future}
}

func (a *stub) ListFindings(ctx workflow.Context, input *guardduty.ListFindingsInput) (*guardduty.ListFindingsOutput, error) {
	var output guardduty.ListFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFindingsAsync(ctx workflow.Context, input *guardduty.ListFindingsInput) *ListFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListFindings", input)
	return &ListFindingsFuture{Future: future}
}

func (a *stub) ListIPSets(ctx workflow.Context, input *guardduty.ListIPSetsInput) (*guardduty.ListIPSetsOutput, error) {
	var output guardduty.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIPSetsAsync(ctx workflow.Context, input *guardduty.ListIPSetsInput) *ListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListIPSets", input)
	return &ListIPSetsFuture{Future: future}
}

func (a *stub) ListInvitations(ctx workflow.Context, input *guardduty.ListInvitationsInput) (*guardduty.ListInvitationsOutput, error) {
	var output guardduty.ListInvitationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListInvitations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListInvitationsAsync(ctx workflow.Context, input *guardduty.ListInvitationsInput) *ListInvitationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListInvitations", input)
	return &ListInvitationsFuture{Future: future}
}

func (a *stub) ListMembers(ctx workflow.Context, input *guardduty.ListMembersInput) (*guardduty.ListMembersOutput, error) {
	var output guardduty.ListMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMembersAsync(ctx workflow.Context, input *guardduty.ListMembersInput) *ListMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListMembers", input)
	return &ListMembersFuture{Future: future}
}

func (a *stub) ListOrganizationAdminAccounts(ctx workflow.Context, input *guardduty.ListOrganizationAdminAccountsInput) (*guardduty.ListOrganizationAdminAccountsOutput, error) {
	var output guardduty.ListOrganizationAdminAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListOrganizationAdminAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOrganizationAdminAccountsAsync(ctx workflow.Context, input *guardduty.ListOrganizationAdminAccountsInput) *ListOrganizationAdminAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListOrganizationAdminAccounts", input)
	return &ListOrganizationAdminAccountsFuture{Future: future}
}

func (a *stub) ListPublishingDestinations(ctx workflow.Context, input *guardduty.ListPublishingDestinationsInput) (*guardduty.ListPublishingDestinationsOutput, error) {
	var output guardduty.ListPublishingDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListPublishingDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPublishingDestinationsAsync(ctx workflow.Context, input *guardduty.ListPublishingDestinationsInput) *ListPublishingDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListPublishingDestinations", input)
	return &ListPublishingDestinationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *guardduty.ListTagsForResourceInput) (*guardduty.ListTagsForResourceOutput, error) {
	var output guardduty.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *guardduty.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListThreatIntelSets(ctx workflow.Context, input *guardduty.ListThreatIntelSetsInput) (*guardduty.ListThreatIntelSetsOutput, error) {
	var output guardduty.ListThreatIntelSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-ListThreatIntelSets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThreatIntelSetsAsync(ctx workflow.Context, input *guardduty.ListThreatIntelSetsInput) *ListThreatIntelSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-ListThreatIntelSets", input)
	return &ListThreatIntelSetsFuture{Future: future}
}

func (a *stub) StartMonitoringMembers(ctx workflow.Context, input *guardduty.StartMonitoringMembersInput) (*guardduty.StartMonitoringMembersOutput, error) {
	var output guardduty.StartMonitoringMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-StartMonitoringMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartMonitoringMembersAsync(ctx workflow.Context, input *guardduty.StartMonitoringMembersInput) *StartMonitoringMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-StartMonitoringMembers", input)
	return &StartMonitoringMembersFuture{Future: future}
}

func (a *stub) StopMonitoringMembers(ctx workflow.Context, input *guardduty.StopMonitoringMembersInput) (*guardduty.StopMonitoringMembersOutput, error) {
	var output guardduty.StopMonitoringMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-StopMonitoringMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopMonitoringMembersAsync(ctx workflow.Context, input *guardduty.StopMonitoringMembersInput) *StopMonitoringMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-StopMonitoringMembers", input)
	return &StopMonitoringMembersFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *guardduty.TagResourceInput) (*guardduty.TagResourceOutput, error) {
	var output guardduty.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *guardduty.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UnarchiveFindings(ctx workflow.Context, input *guardduty.UnarchiveFindingsInput) (*guardduty.UnarchiveFindingsOutput, error) {
	var output guardduty.UnarchiveFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UnarchiveFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnarchiveFindingsAsync(ctx workflow.Context, input *guardduty.UnarchiveFindingsInput) *UnarchiveFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UnarchiveFindings", input)
	return &UnarchiveFindingsFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *guardduty.UntagResourceInput) (*guardduty.UntagResourceOutput, error) {
	var output guardduty.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *guardduty.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateDetector(ctx workflow.Context, input *guardduty.UpdateDetectorInput) (*guardduty.UpdateDetectorOutput, error) {
	var output guardduty.UpdateDetectorOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateDetector", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDetectorAsync(ctx workflow.Context, input *guardduty.UpdateDetectorInput) *UpdateDetectorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateDetector", input)
	return &UpdateDetectorFuture{Future: future}
}

func (a *stub) UpdateFilter(ctx workflow.Context, input *guardduty.UpdateFilterInput) (*guardduty.UpdateFilterOutput, error) {
	var output guardduty.UpdateFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFilterAsync(ctx workflow.Context, input *guardduty.UpdateFilterInput) *UpdateFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateFilter", input)
	return &UpdateFilterFuture{Future: future}
}

func (a *stub) UpdateFindingsFeedback(ctx workflow.Context, input *guardduty.UpdateFindingsFeedbackInput) (*guardduty.UpdateFindingsFeedbackOutput, error) {
	var output guardduty.UpdateFindingsFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateFindingsFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFindingsFeedbackAsync(ctx workflow.Context, input *guardduty.UpdateFindingsFeedbackInput) *UpdateFindingsFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateFindingsFeedback", input)
	return &UpdateFindingsFeedbackFuture{Future: future}
}

func (a *stub) UpdateIPSet(ctx workflow.Context, input *guardduty.UpdateIPSetInput) (*guardduty.UpdateIPSetOutput, error) {
	var output guardduty.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIPSetAsync(ctx workflow.Context, input *guardduty.UpdateIPSetInput) *UpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateIPSet", input)
	return &UpdateIPSetFuture{Future: future}
}

func (a *stub) UpdateMemberDetectors(ctx workflow.Context, input *guardduty.UpdateMemberDetectorsInput) (*guardduty.UpdateMemberDetectorsOutput, error) {
	var output guardduty.UpdateMemberDetectorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateMemberDetectors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMemberDetectorsAsync(ctx workflow.Context, input *guardduty.UpdateMemberDetectorsInput) *UpdateMemberDetectorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateMemberDetectors", input)
	return &UpdateMemberDetectorsFuture{Future: future}
}

func (a *stub) UpdateOrganizationConfiguration(ctx workflow.Context, input *guardduty.UpdateOrganizationConfigurationInput) (*guardduty.UpdateOrganizationConfigurationOutput, error) {
	var output guardduty.UpdateOrganizationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateOrganizationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateOrganizationConfigurationAsync(ctx workflow.Context, input *guardduty.UpdateOrganizationConfigurationInput) *UpdateOrganizationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateOrganizationConfiguration", input)
	return &UpdateOrganizationConfigurationFuture{Future: future}
}

func (a *stub) UpdatePublishingDestination(ctx workflow.Context, input *guardduty.UpdatePublishingDestinationInput) (*guardduty.UpdatePublishingDestinationOutput, error) {
	var output guardduty.UpdatePublishingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdatePublishingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePublishingDestinationAsync(ctx workflow.Context, input *guardduty.UpdatePublishingDestinationInput) *UpdatePublishingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdatePublishingDestination", input)
	return &UpdatePublishingDestinationFuture{Future: future}
}

func (a *stub) UpdateThreatIntelSet(ctx workflow.Context, input *guardduty.UpdateThreatIntelSetInput) (*guardduty.UpdateThreatIntelSetOutput, error) {
	var output guardduty.UpdateThreatIntelSetOutput
	err := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateThreatIntelSet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThreatIntelSetAsync(ctx workflow.Context, input *guardduty.UpdateThreatIntelSetInput) *UpdateThreatIntelSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-guardduty-UpdateThreatIntelSet", input)
	return &UpdateThreatIntelSetFuture{Future: future}
}
