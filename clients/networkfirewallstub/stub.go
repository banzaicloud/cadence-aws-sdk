// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package networkfirewallstub

import (
	"github.com/aws/aws-sdk-go/service/networkfirewall"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateFirewallPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateFirewallPolicyFuture) Get(ctx workflow.Context) (*networkfirewall.AssociateFirewallPolicyOutput, error) {
	var output networkfirewall.AssociateFirewallPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSubnetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSubnetsFuture) Get(ctx workflow.Context) (*networkfirewall.AssociateSubnetsOutput, error) {
	var output networkfirewall.AssociateSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFirewallFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFirewallFuture) Get(ctx workflow.Context) (*networkfirewall.CreateFirewallOutput, error) {
	var output networkfirewall.CreateFirewallOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFirewallPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFirewallPolicyFuture) Get(ctx workflow.Context) (*networkfirewall.CreateFirewallPolicyOutput, error) {
	var output networkfirewall.CreateFirewallPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRuleGroupFuture) Get(ctx workflow.Context) (*networkfirewall.CreateRuleGroupOutput, error) {
	var output networkfirewall.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFirewallFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFirewallFuture) Get(ctx workflow.Context) (*networkfirewall.DeleteFirewallOutput, error) {
	var output networkfirewall.DeleteFirewallOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFirewallPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFirewallPolicyFuture) Get(ctx workflow.Context) (*networkfirewall.DeleteFirewallPolicyOutput, error) {
	var output networkfirewall.DeleteFirewallPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteResourcePolicyFuture) Get(ctx workflow.Context) (*networkfirewall.DeleteResourcePolicyOutput, error) {
	var output networkfirewall.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRuleGroupFuture) Get(ctx workflow.Context) (*networkfirewall.DeleteRuleGroupOutput, error) {
	var output networkfirewall.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFirewallFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFirewallFuture) Get(ctx workflow.Context) (*networkfirewall.DescribeFirewallOutput, error) {
	var output networkfirewall.DescribeFirewallOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFirewallPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFirewallPolicyFuture) Get(ctx workflow.Context) (*networkfirewall.DescribeFirewallPolicyOutput, error) {
	var output networkfirewall.DescribeFirewallPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoggingConfigurationFuture) Get(ctx workflow.Context) (*networkfirewall.DescribeLoggingConfigurationOutput, error) {
	var output networkfirewall.DescribeLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourcePolicyFuture) Get(ctx workflow.Context) (*networkfirewall.DescribeResourcePolicyOutput, error) {
	var output networkfirewall.DescribeResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRuleGroupFuture) Get(ctx workflow.Context) (*networkfirewall.DescribeRuleGroupOutput, error) {
	var output networkfirewall.DescribeRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSubnetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSubnetsFuture) Get(ctx workflow.Context) (*networkfirewall.DisassociateSubnetsOutput, error) {
	var output networkfirewall.DisassociateSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFirewallPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFirewallPoliciesFuture) Get(ctx workflow.Context) (*networkfirewall.ListFirewallPoliciesOutput, error) {
	var output networkfirewall.ListFirewallPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFirewallsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFirewallsFuture) Get(ctx workflow.Context) (*networkfirewall.ListFirewallsOutput, error) {
	var output networkfirewall.ListFirewallsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRuleGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRuleGroupsFuture) Get(ctx workflow.Context) (*networkfirewall.ListRuleGroupsOutput, error) {
	var output networkfirewall.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*networkfirewall.ListTagsForResourceOutput, error) {
	var output networkfirewall.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutResourcePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutResourcePolicyFuture) Get(ctx workflow.Context) (*networkfirewall.PutResourcePolicyOutput, error) {
	var output networkfirewall.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*networkfirewall.TagResourceOutput, error) {
	var output networkfirewall.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*networkfirewall.UntagResourceOutput, error) {
	var output networkfirewall.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFirewallDeleteProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFirewallDeleteProtectionFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateFirewallDeleteProtectionOutput, error) {
	var output networkfirewall.UpdateFirewallDeleteProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFirewallDescriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFirewallDescriptionFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateFirewallDescriptionOutput, error) {
	var output networkfirewall.UpdateFirewallDescriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFirewallPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFirewallPolicyFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateFirewallPolicyOutput, error) {
	var output networkfirewall.UpdateFirewallPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFirewallPolicyChangeProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFirewallPolicyChangeProtectionFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateFirewallPolicyChangeProtectionOutput, error) {
	var output networkfirewall.UpdateFirewallPolicyChangeProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLoggingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLoggingConfigurationFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateLoggingConfigurationOutput, error) {
	var output networkfirewall.UpdateLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRuleGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRuleGroupFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateRuleGroupOutput, error) {
	var output networkfirewall.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSubnetChangeProtectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSubnetChangeProtectionFuture) Get(ctx workflow.Context) (*networkfirewall.UpdateSubnetChangeProtectionOutput, error) {
	var output networkfirewall.UpdateSubnetChangeProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFirewallPolicy(ctx workflow.Context, input *networkfirewall.AssociateFirewallPolicyInput) (*networkfirewall.AssociateFirewallPolicyOutput, error) {
	var output networkfirewall.AssociateFirewallPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-AssociateFirewallPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateFirewallPolicyAsync(ctx workflow.Context, input *networkfirewall.AssociateFirewallPolicyInput) *AssociateFirewallPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-AssociateFirewallPolicy", input)
	return &AssociateFirewallPolicyFuture{Future: future}
}

func (a *stub) AssociateSubnets(ctx workflow.Context, input *networkfirewall.AssociateSubnetsInput) (*networkfirewall.AssociateSubnetsOutput, error) {
	var output networkfirewall.AssociateSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-AssociateSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSubnetsAsync(ctx workflow.Context, input *networkfirewall.AssociateSubnetsInput) *AssociateSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-AssociateSubnets", input)
	return &AssociateSubnetsFuture{Future: future}
}

func (a *stub) CreateFirewall(ctx workflow.Context, input *networkfirewall.CreateFirewallInput) (*networkfirewall.CreateFirewallOutput, error) {
	var output networkfirewall.CreateFirewallOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateFirewall", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFirewallAsync(ctx workflow.Context, input *networkfirewall.CreateFirewallInput) *CreateFirewallFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateFirewall", input)
	return &CreateFirewallFuture{Future: future}
}

func (a *stub) CreateFirewallPolicy(ctx workflow.Context, input *networkfirewall.CreateFirewallPolicyInput) (*networkfirewall.CreateFirewallPolicyOutput, error) {
	var output networkfirewall.CreateFirewallPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateFirewallPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFirewallPolicyAsync(ctx workflow.Context, input *networkfirewall.CreateFirewallPolicyInput) *CreateFirewallPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateFirewallPolicy", input)
	return &CreateFirewallPolicyFuture{Future: future}
}

func (a *stub) CreateRuleGroup(ctx workflow.Context, input *networkfirewall.CreateRuleGroupInput) (*networkfirewall.CreateRuleGroupOutput, error) {
	var output networkfirewall.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRuleGroupAsync(ctx workflow.Context, input *networkfirewall.CreateRuleGroupInput) *CreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-CreateRuleGroup", input)
	return &CreateRuleGroupFuture{Future: future}
}

func (a *stub) DeleteFirewall(ctx workflow.Context, input *networkfirewall.DeleteFirewallInput) (*networkfirewall.DeleteFirewallOutput, error) {
	var output networkfirewall.DeleteFirewallOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteFirewall", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFirewallAsync(ctx workflow.Context, input *networkfirewall.DeleteFirewallInput) *DeleteFirewallFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteFirewall", input)
	return &DeleteFirewallFuture{Future: future}
}

func (a *stub) DeleteFirewallPolicy(ctx workflow.Context, input *networkfirewall.DeleteFirewallPolicyInput) (*networkfirewall.DeleteFirewallPolicyOutput, error) {
	var output networkfirewall.DeleteFirewallPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteFirewallPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFirewallPolicyAsync(ctx workflow.Context, input *networkfirewall.DeleteFirewallPolicyInput) *DeleteFirewallPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteFirewallPolicy", input)
	return &DeleteFirewallPolicyFuture{Future: future}
}

func (a *stub) DeleteResourcePolicy(ctx workflow.Context, input *networkfirewall.DeleteResourcePolicyInput) (*networkfirewall.DeleteResourcePolicyOutput, error) {
	var output networkfirewall.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteResourcePolicyAsync(ctx workflow.Context, input *networkfirewall.DeleteResourcePolicyInput) *DeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteResourcePolicy", input)
	return &DeleteResourcePolicyFuture{Future: future}
}

func (a *stub) DeleteRuleGroup(ctx workflow.Context, input *networkfirewall.DeleteRuleGroupInput) (*networkfirewall.DeleteRuleGroupOutput, error) {
	var output networkfirewall.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRuleGroupAsync(ctx workflow.Context, input *networkfirewall.DeleteRuleGroupInput) *DeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DeleteRuleGroup", input)
	return &DeleteRuleGroupFuture{Future: future}
}

func (a *stub) DescribeFirewall(ctx workflow.Context, input *networkfirewall.DescribeFirewallInput) (*networkfirewall.DescribeFirewallOutput, error) {
	var output networkfirewall.DescribeFirewallOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeFirewall", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFirewallAsync(ctx workflow.Context, input *networkfirewall.DescribeFirewallInput) *DescribeFirewallFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeFirewall", input)
	return &DescribeFirewallFuture{Future: future}
}

func (a *stub) DescribeFirewallPolicy(ctx workflow.Context, input *networkfirewall.DescribeFirewallPolicyInput) (*networkfirewall.DescribeFirewallPolicyOutput, error) {
	var output networkfirewall.DescribeFirewallPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeFirewallPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFirewallPolicyAsync(ctx workflow.Context, input *networkfirewall.DescribeFirewallPolicyInput) *DescribeFirewallPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeFirewallPolicy", input)
	return &DescribeFirewallPolicyFuture{Future: future}
}

func (a *stub) DescribeLoggingConfiguration(ctx workflow.Context, input *networkfirewall.DescribeLoggingConfigurationInput) (*networkfirewall.DescribeLoggingConfigurationOutput, error) {
	var output networkfirewall.DescribeLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingConfigurationAsync(ctx workflow.Context, input *networkfirewall.DescribeLoggingConfigurationInput) *DescribeLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeLoggingConfiguration", input)
	return &DescribeLoggingConfigurationFuture{Future: future}
}

func (a *stub) DescribeResourcePolicy(ctx workflow.Context, input *networkfirewall.DescribeResourcePolicyInput) (*networkfirewall.DescribeResourcePolicyOutput, error) {
	var output networkfirewall.DescribeResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourcePolicyAsync(ctx workflow.Context, input *networkfirewall.DescribeResourcePolicyInput) *DescribeResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeResourcePolicy", input)
	return &DescribeResourcePolicyFuture{Future: future}
}

func (a *stub) DescribeRuleGroup(ctx workflow.Context, input *networkfirewall.DescribeRuleGroupInput) (*networkfirewall.DescribeRuleGroupOutput, error) {
	var output networkfirewall.DescribeRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRuleGroupAsync(ctx workflow.Context, input *networkfirewall.DescribeRuleGroupInput) *DescribeRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DescribeRuleGroup", input)
	return &DescribeRuleGroupFuture{Future: future}
}

func (a *stub) DisassociateSubnets(ctx workflow.Context, input *networkfirewall.DisassociateSubnetsInput) (*networkfirewall.DisassociateSubnetsOutput, error) {
	var output networkfirewall.DisassociateSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DisassociateSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSubnetsAsync(ctx workflow.Context, input *networkfirewall.DisassociateSubnetsInput) *DisassociateSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-DisassociateSubnets", input)
	return &DisassociateSubnetsFuture{Future: future}
}

func (a *stub) ListFirewallPolicies(ctx workflow.Context, input *networkfirewall.ListFirewallPoliciesInput) (*networkfirewall.ListFirewallPoliciesOutput, error) {
	var output networkfirewall.ListFirewallPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListFirewallPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFirewallPoliciesAsync(ctx workflow.Context, input *networkfirewall.ListFirewallPoliciesInput) *ListFirewallPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListFirewallPolicies", input)
	return &ListFirewallPoliciesFuture{Future: future}
}

func (a *stub) ListFirewalls(ctx workflow.Context, input *networkfirewall.ListFirewallsInput) (*networkfirewall.ListFirewallsOutput, error) {
	var output networkfirewall.ListFirewallsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListFirewalls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFirewallsAsync(ctx workflow.Context, input *networkfirewall.ListFirewallsInput) *ListFirewallsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListFirewalls", input)
	return &ListFirewallsFuture{Future: future}
}

func (a *stub) ListRuleGroups(ctx workflow.Context, input *networkfirewall.ListRuleGroupsInput) (*networkfirewall.ListRuleGroupsOutput, error) {
	var output networkfirewall.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRuleGroupsAsync(ctx workflow.Context, input *networkfirewall.ListRuleGroupsInput) *ListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListRuleGroups", input)
	return &ListRuleGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *networkfirewall.ListTagsForResourceInput) (*networkfirewall.ListTagsForResourceOutput, error) {
	var output networkfirewall.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *networkfirewall.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutResourcePolicy(ctx workflow.Context, input *networkfirewall.PutResourcePolicyInput) (*networkfirewall.PutResourcePolicyOutput, error) {
	var output networkfirewall.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutResourcePolicyAsync(ctx workflow.Context, input *networkfirewall.PutResourcePolicyInput) *PutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-PutResourcePolicy", input)
	return &PutResourcePolicyFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *networkfirewall.TagResourceInput) (*networkfirewall.TagResourceOutput, error) {
	var output networkfirewall.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *networkfirewall.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *networkfirewall.UntagResourceInput) (*networkfirewall.UntagResourceOutput, error) {
	var output networkfirewall.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *networkfirewall.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateFirewallDeleteProtection(ctx workflow.Context, input *networkfirewall.UpdateFirewallDeleteProtectionInput) (*networkfirewall.UpdateFirewallDeleteProtectionOutput, error) {
	var output networkfirewall.UpdateFirewallDeleteProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallDeleteProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFirewallDeleteProtectionAsync(ctx workflow.Context, input *networkfirewall.UpdateFirewallDeleteProtectionInput) *UpdateFirewallDeleteProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallDeleteProtection", input)
	return &UpdateFirewallDeleteProtectionFuture{Future: future}
}

func (a *stub) UpdateFirewallDescription(ctx workflow.Context, input *networkfirewall.UpdateFirewallDescriptionInput) (*networkfirewall.UpdateFirewallDescriptionOutput, error) {
	var output networkfirewall.UpdateFirewallDescriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallDescription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFirewallDescriptionAsync(ctx workflow.Context, input *networkfirewall.UpdateFirewallDescriptionInput) *UpdateFirewallDescriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallDescription", input)
	return &UpdateFirewallDescriptionFuture{Future: future}
}

func (a *stub) UpdateFirewallPolicy(ctx workflow.Context, input *networkfirewall.UpdateFirewallPolicyInput) (*networkfirewall.UpdateFirewallPolicyOutput, error) {
	var output networkfirewall.UpdateFirewallPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFirewallPolicyAsync(ctx workflow.Context, input *networkfirewall.UpdateFirewallPolicyInput) *UpdateFirewallPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallPolicy", input)
	return &UpdateFirewallPolicyFuture{Future: future}
}

func (a *stub) UpdateFirewallPolicyChangeProtection(ctx workflow.Context, input *networkfirewall.UpdateFirewallPolicyChangeProtectionInput) (*networkfirewall.UpdateFirewallPolicyChangeProtectionOutput, error) {
	var output networkfirewall.UpdateFirewallPolicyChangeProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallPolicyChangeProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFirewallPolicyChangeProtectionAsync(ctx workflow.Context, input *networkfirewall.UpdateFirewallPolicyChangeProtectionInput) *UpdateFirewallPolicyChangeProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateFirewallPolicyChangeProtection", input)
	return &UpdateFirewallPolicyChangeProtectionFuture{Future: future}
}

func (a *stub) UpdateLoggingConfiguration(ctx workflow.Context, input *networkfirewall.UpdateLoggingConfigurationInput) (*networkfirewall.UpdateLoggingConfigurationOutput, error) {
	var output networkfirewall.UpdateLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLoggingConfigurationAsync(ctx workflow.Context, input *networkfirewall.UpdateLoggingConfigurationInput) *UpdateLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateLoggingConfiguration", input)
	return &UpdateLoggingConfigurationFuture{Future: future}
}

func (a *stub) UpdateRuleGroup(ctx workflow.Context, input *networkfirewall.UpdateRuleGroupInput) (*networkfirewall.UpdateRuleGroupOutput, error) {
	var output networkfirewall.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRuleGroupAsync(ctx workflow.Context, input *networkfirewall.UpdateRuleGroupInput) *UpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateRuleGroup", input)
	return &UpdateRuleGroupFuture{Future: future}
}

func (a *stub) UpdateSubnetChangeProtection(ctx workflow.Context, input *networkfirewall.UpdateSubnetChangeProtectionInput) (*networkfirewall.UpdateSubnetChangeProtectionOutput, error) {
	var output networkfirewall.UpdateSubnetChangeProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateSubnetChangeProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSubnetChangeProtectionAsync(ctx workflow.Context, input *networkfirewall.UpdateSubnetChangeProtectionInput) *UpdateSubnetChangeProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-networkfirewall-UpdateSubnetChangeProtection", input)
	return &UpdateSubnetChangeProtectionFuture{Future: future}
}
