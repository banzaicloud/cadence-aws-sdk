// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package rekognitionstub

import (
	"github.com/aws/aws-sdk-go/service/rekognition"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type RekognitionCompareFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionCompareFacesFuture) Get(ctx workflow.Context) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionCreateCollectionFuture) Get(ctx workflow.Context) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionCreateProjectFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionCreateProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionCreateStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionCreateStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDeleteCollectionFuture) Get(ctx workflow.Context) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDeleteFacesFuture) Get(ctx workflow.Context) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDeleteProjectFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDeleteProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDeleteStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDeleteStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDescribeCollectionFuture) Get(ctx workflow.Context) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeProjectVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDescribeProjectVersionsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDescribeProjectsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDescribeStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDescribeStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectCustomLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectCustomLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectFacesFuture) Get(ctx workflow.Context) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectModerationLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectModerationLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectProtectiveEquipmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectProtectiveEquipmentFuture) Get(ctx workflow.Context) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	var output rekognition.DetectProtectiveEquipmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionDetectTextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionDetectTextFuture) Get(ctx workflow.Context) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetCelebrityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetCelebrityInfoFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetCelebrityRecognitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetContentModerationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetContentModerationFuture) Get(ctx workflow.Context) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetFaceDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetFaceSearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetLabelDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetPersonTrackingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetSegmentDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionGetTextDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionGetTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionIndexFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionIndexFacesFuture) Get(ctx workflow.Context) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListCollectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionListCollectionsFuture) Get(ctx workflow.Context) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionListFacesFuture) Get(ctx workflow.Context) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionListStreamProcessorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionListStreamProcessorsFuture) Get(ctx workflow.Context) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionRecognizeCelebritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionRecognizeCelebritiesFuture) Get(ctx workflow.Context) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionSearchFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionSearchFacesFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionSearchFacesByImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionSearchFacesByImageFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartCelebrityRecognitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartContentModerationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartContentModerationFuture) Get(ctx workflow.Context) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartFaceDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartFaceSearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartLabelDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartPersonTrackingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartSegmentDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStartTextDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStartTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStopProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStopProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RekognitionStopStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RekognitionStopStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CompareFaces(ctx workflow.Context, input *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CompareFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompareFacesAsync(ctx workflow.Context, input *rekognition.CompareFacesInput) *RekognitionCompareFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CompareFaces", input)
	return &RekognitionCompareFacesFuture{Future: future}
}

func (a *stub) CreateCollection(ctx workflow.Context, input *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCollectionAsync(ctx workflow.Context, input *rekognition.CreateCollectionInput) *RekognitionCreateCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateCollection", input)
	return &RekognitionCreateCollectionFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *rekognition.CreateProjectInput) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *rekognition.CreateProjectInput) *RekognitionCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProject", input)
	return &RekognitionCreateProjectFuture{Future: future}
}

func (a *stub) CreateProjectVersion(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectVersionAsync(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) *RekognitionCreateProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProjectVersion", input)
	return &RekognitionCreateProjectVersionFuture{Future: future}
}

func (a *stub) CreateStreamProcessor(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamProcessorAsync(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) *RekognitionCreateStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateStreamProcessor", input)
	return &RekognitionCreateStreamProcessorFuture{Future: future}
}

func (a *stub) DeleteCollection(ctx workflow.Context, input *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCollectionAsync(ctx workflow.Context, input *rekognition.DeleteCollectionInput) *RekognitionDeleteCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteCollection", input)
	return &RekognitionDeleteCollectionFuture{Future: future}
}

func (a *stub) DeleteFaces(ctx workflow.Context, input *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFacesAsync(ctx workflow.Context, input *rekognition.DeleteFacesInput) *RekognitionDeleteFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteFaces", input)
	return &RekognitionDeleteFacesFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *rekognition.DeleteProjectInput) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *rekognition.DeleteProjectInput) *RekognitionDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProject", input)
	return &RekognitionDeleteProjectFuture{Future: future}
}

func (a *stub) DeleteProjectVersion(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectVersionAsync(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) *RekognitionDeleteProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProjectVersion", input)
	return &RekognitionDeleteProjectVersionFuture{Future: future}
}

func (a *stub) DeleteStreamProcessor(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamProcessorAsync(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) *RekognitionDeleteStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteStreamProcessor", input)
	return &RekognitionDeleteStreamProcessorFuture{Future: future}
}

func (a *stub) DescribeCollection(ctx workflow.Context, input *rekognition.DescribeCollectionInput) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCollectionAsync(ctx workflow.Context, input *rekognition.DescribeCollectionInput) *RekognitionDescribeCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeCollection", input)
	return &RekognitionDescribeCollectionFuture{Future: future}
}

func (a *stub) DescribeProjectVersions(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjectVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectVersionsAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *RekognitionDescribeProjectVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjectVersions", input)
	return &RekognitionDescribeProjectVersionsFuture{Future: future}
}

func (a *stub) DescribeProjects(ctx workflow.Context, input *rekognition.DescribeProjectsInput) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectsAsync(ctx workflow.Context, input *rekognition.DescribeProjectsInput) *RekognitionDescribeProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjects", input)
	return &RekognitionDescribeProjectsFuture{Future: future}
}

func (a *stub) DescribeStreamProcessor(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStreamProcessorAsync(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) *RekognitionDescribeStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeStreamProcessor", input)
	return &RekognitionDescribeStreamProcessorFuture{Future: future}
}

func (a *stub) DetectCustomLabels(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectCustomLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectCustomLabelsAsync(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) *RekognitionDetectCustomLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectCustomLabels", input)
	return &RekognitionDetectCustomLabelsFuture{Future: future}
}

func (a *stub) DetectFaces(ctx workflow.Context, input *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectFacesAsync(ctx workflow.Context, input *rekognition.DetectFacesInput) *RekognitionDetectFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectFaces", input)
	return &RekognitionDetectFacesFuture{Future: future}
}

func (a *stub) DetectLabels(ctx workflow.Context, input *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectLabelsAsync(ctx workflow.Context, input *rekognition.DetectLabelsInput) *RekognitionDetectLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectLabels", input)
	return &RekognitionDetectLabelsFuture{Future: future}
}

func (a *stub) DetectModerationLabels(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectModerationLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectModerationLabelsAsync(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) *RekognitionDetectModerationLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectModerationLabels", input)
	return &RekognitionDetectModerationLabelsFuture{Future: future}
}

func (a *stub) DetectProtectiveEquipment(ctx workflow.Context, input *rekognition.DetectProtectiveEquipmentInput) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	var output rekognition.DetectProtectiveEquipmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectProtectiveEquipment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectProtectiveEquipmentAsync(ctx workflow.Context, input *rekognition.DetectProtectiveEquipmentInput) *RekognitionDetectProtectiveEquipmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectProtectiveEquipment", input)
	return &RekognitionDetectProtectiveEquipmentFuture{Future: future}
}

func (a *stub) DetectText(ctx workflow.Context, input *rekognition.DetectTextInput) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectText", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectTextAsync(ctx workflow.Context, input *rekognition.DetectTextInput) *RekognitionDetectTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectText", input)
	return &RekognitionDetectTextFuture{Future: future}
}

func (a *stub) GetCelebrityInfo(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCelebrityInfoAsync(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) *RekognitionGetCelebrityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityInfo", input)
	return &RekognitionGetCelebrityInfoFuture{Future: future}
}

func (a *stub) GetCelebrityRecognition(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) *RekognitionGetCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityRecognition", input)
	return &RekognitionGetCelebrityRecognitionFuture{Future: future}
}

func (a *stub) GetContentModeration(ctx workflow.Context, input *rekognition.GetContentModerationInput) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContentModerationAsync(ctx workflow.Context, input *rekognition.GetContentModerationInput) *RekognitionGetContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetContentModeration", input)
	return &RekognitionGetContentModerationFuture{Future: future}
}

func (a *stub) GetFaceDetection(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFaceDetectionAsync(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) *RekognitionGetFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceDetection", input)
	return &RekognitionGetFaceDetectionFuture{Future: future}
}

func (a *stub) GetFaceSearch(ctx workflow.Context, input *rekognition.GetFaceSearchInput) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFaceSearchAsync(ctx workflow.Context, input *rekognition.GetFaceSearchInput) *RekognitionGetFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceSearch", input)
	return &RekognitionGetFaceSearchFuture{Future: future}
}

func (a *stub) GetLabelDetection(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLabelDetectionAsync(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) *RekognitionGetLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetLabelDetection", input)
	return &RekognitionGetLabelDetectionFuture{Future: future}
}

func (a *stub) GetPersonTracking(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPersonTrackingAsync(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) *RekognitionGetPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetPersonTracking", input)
	return &RekognitionGetPersonTrackingFuture{Future: future}
}

func (a *stub) GetSegmentDetection(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSegmentDetectionAsync(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) *RekognitionGetSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetSegmentDetection", input)
	return &RekognitionGetSegmentDetectionFuture{Future: future}
}

func (a *stub) GetTextDetection(ctx workflow.Context, input *rekognition.GetTextDetectionInput) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTextDetectionAsync(ctx workflow.Context, input *rekognition.GetTextDetectionInput) *RekognitionGetTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetTextDetection", input)
	return &RekognitionGetTextDetectionFuture{Future: future}
}

func (a *stub) IndexFaces(ctx workflow.Context, input *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-IndexFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IndexFacesAsync(ctx workflow.Context, input *rekognition.IndexFacesInput) *RekognitionIndexFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-IndexFaces", input)
	return &RekognitionIndexFacesFuture{Future: future}
}

func (a *stub) ListCollections(ctx workflow.Context, input *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListCollections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCollectionsAsync(ctx workflow.Context, input *rekognition.ListCollectionsInput) *RekognitionListCollectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListCollections", input)
	return &RekognitionListCollectionsFuture{Future: future}
}

func (a *stub) ListFaces(ctx workflow.Context, input *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacesAsync(ctx workflow.Context, input *rekognition.ListFacesInput) *RekognitionListFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListFaces", input)
	return &RekognitionListFacesFuture{Future: future}
}

func (a *stub) ListStreamProcessors(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListStreamProcessors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamProcessorsAsync(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) *RekognitionListStreamProcessorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListStreamProcessors", input)
	return &RekognitionListStreamProcessorsFuture{Future: future}
}

func (a *stub) RecognizeCelebrities(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-RecognizeCelebrities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecognizeCelebritiesAsync(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) *RekognitionRecognizeCelebritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-RecognizeCelebrities", input)
	return &RekognitionRecognizeCelebritiesFuture{Future: future}
}

func (a *stub) SearchFaces(ctx workflow.Context, input *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchFacesAsync(ctx workflow.Context, input *rekognition.SearchFacesInput) *RekognitionSearchFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFaces", input)
	return &RekognitionSearchFacesFuture{Future: future}
}

func (a *stub) SearchFacesByImage(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFacesByImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchFacesByImageAsync(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) *RekognitionSearchFacesByImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFacesByImage", input)
	return &RekognitionSearchFacesByImageFuture{Future: future}
}

func (a *stub) StartCelebrityRecognition(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) *RekognitionStartCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartCelebrityRecognition", input)
	return &RekognitionStartCelebrityRecognitionFuture{Future: future}
}

func (a *stub) StartContentModeration(ctx workflow.Context, input *rekognition.StartContentModerationInput) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartContentModerationAsync(ctx workflow.Context, input *rekognition.StartContentModerationInput) *RekognitionStartContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartContentModeration", input)
	return &RekognitionStartContentModerationFuture{Future: future}
}

func (a *stub) StartFaceDetection(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFaceDetectionAsync(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) *RekognitionStartFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceDetection", input)
	return &RekognitionStartFaceDetectionFuture{Future: future}
}

func (a *stub) StartFaceSearch(ctx workflow.Context, input *rekognition.StartFaceSearchInput) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFaceSearchAsync(ctx workflow.Context, input *rekognition.StartFaceSearchInput) *RekognitionStartFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceSearch", input)
	return &RekognitionStartFaceSearchFuture{Future: future}
}

func (a *stub) StartLabelDetection(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartLabelDetectionAsync(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) *RekognitionStartLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartLabelDetection", input)
	return &RekognitionStartLabelDetectionFuture{Future: future}
}

func (a *stub) StartPersonTracking(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPersonTrackingAsync(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) *RekognitionStartPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartPersonTracking", input)
	return &RekognitionStartPersonTrackingFuture{Future: future}
}

func (a *stub) StartProjectVersion(ctx workflow.Context, input *rekognition.StartProjectVersionInput) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartProjectVersionAsync(ctx workflow.Context, input *rekognition.StartProjectVersionInput) *RekognitionStartProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartProjectVersion", input)
	return &RekognitionStartProjectVersionFuture{Future: future}
}

func (a *stub) StartSegmentDetection(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSegmentDetectionAsync(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) *RekognitionStartSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartSegmentDetection", input)
	return &RekognitionStartSegmentDetectionFuture{Future: future}
}

func (a *stub) StartStreamProcessor(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartStreamProcessorAsync(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) *RekognitionStartStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartStreamProcessor", input)
	return &RekognitionStartStreamProcessorFuture{Future: future}
}

func (a *stub) StartTextDetection(ctx workflow.Context, input *rekognition.StartTextDetectionInput) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTextDetectionAsync(ctx workflow.Context, input *rekognition.StartTextDetectionInput) *RekognitionStartTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartTextDetection", input)
	return &RekognitionStartTextDetectionFuture{Future: future}
}

func (a *stub) StopProjectVersion(ctx workflow.Context, input *rekognition.StopProjectVersionInput) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StopProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopProjectVersionAsync(ctx workflow.Context, input *rekognition.StopProjectVersionInput) *RekognitionStopProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StopProjectVersion", input)
	return &RekognitionStopProjectVersionFuture{Future: future}
}

func (a *stub) StopStreamProcessor(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StopStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStreamProcessorAsync(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) *RekognitionStopStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StopStreamProcessor", input)
	return &RekognitionStopStreamProcessorFuture{Future: future}
}

func (a *stub) WaitUntilProjectVersionRunning(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProjectVersionRunningAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilProjectVersionTrainingCompleted(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionTrainingCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProjectVersionTrainingCompletedAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionTrainingCompleted", input)
	return clients.NewVoidFuture(future)
}
