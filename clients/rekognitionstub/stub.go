// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package rekognitionstub

import (
	"github.com/aws/aws-sdk-go/service/rekognition"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CompareFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CompareFacesFuture) Get(ctx workflow.Context) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCollectionFuture) Get(ctx workflow.Context) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCollectionFuture) Get(ctx workflow.Context) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFacesFuture) Get(ctx workflow.Context) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCollectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCollectionFuture) Get(ctx workflow.Context) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProjectVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProjectVersionsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProjectsFuture) Get(ctx workflow.Context) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectCustomLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectCustomLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectFacesFuture) Get(ctx workflow.Context) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectModerationLabelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectModerationLabelsFuture) Get(ctx workflow.Context) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectProtectiveEquipmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectProtectiveEquipmentFuture) Get(ctx workflow.Context) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	var output rekognition.DetectProtectiveEquipmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectTextFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectTextFuture) Get(ctx workflow.Context) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCelebrityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCelebrityInfoFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCelebrityRecognitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContentModerationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContentModerationFuture) Get(ctx workflow.Context) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFaceDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFaceSearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLabelDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPersonTrackingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSegmentDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTextDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IndexFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IndexFacesFuture) Get(ctx workflow.Context) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCollectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCollectionsFuture) Get(ctx workflow.Context) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFacesFuture) Get(ctx workflow.Context) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListStreamProcessorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListStreamProcessorsFuture) Get(ctx workflow.Context) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecognizeCelebritiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecognizeCelebritiesFuture) Get(ctx workflow.Context) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchFacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchFacesFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchFacesByImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchFacesByImageFuture) Get(ctx workflow.Context) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartCelebrityRecognitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartCelebrityRecognitionFuture) Get(ctx workflow.Context) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartContentModerationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartContentModerationFuture) Get(ctx workflow.Context) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFaceDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFaceDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFaceSearchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFaceSearchFuture) Get(ctx workflow.Context) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartLabelDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartLabelDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartPersonTrackingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartPersonTrackingFuture) Get(ctx workflow.Context) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSegmentDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSegmentDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTextDetectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTextDetectionFuture) Get(ctx workflow.Context) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopProjectVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopProjectVersionFuture) Get(ctx workflow.Context) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopStreamProcessorFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopStreamProcessorFuture) Get(ctx workflow.Context) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CompareFaces(ctx workflow.Context, input *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error) {
	var output rekognition.CompareFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CompareFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CompareFacesAsync(ctx workflow.Context, input *rekognition.CompareFacesInput) *CompareFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CompareFaces", input)
	return &CompareFacesFuture{Future: future}
}

func (a *stub) CreateCollection(ctx workflow.Context, input *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error) {
	var output rekognition.CreateCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCollectionAsync(ctx workflow.Context, input *rekognition.CreateCollectionInput) *CreateCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateCollection", input)
	return &CreateCollectionFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *rekognition.CreateProjectInput) (*rekognition.CreateProjectOutput, error) {
	var output rekognition.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *rekognition.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) CreateProjectVersion(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) (*rekognition.CreateProjectVersionOutput, error) {
	var output rekognition.CreateProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectVersionAsync(ctx workflow.Context, input *rekognition.CreateProjectVersionInput) *CreateProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateProjectVersion", input)
	return &CreateProjectVersionFuture{Future: future}
}

func (a *stub) CreateStreamProcessor(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) (*rekognition.CreateStreamProcessorOutput, error) {
	var output rekognition.CreateStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamProcessorAsync(ctx workflow.Context, input *rekognition.CreateStreamProcessorInput) *CreateStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-CreateStreamProcessor", input)
	return &CreateStreamProcessorFuture{Future: future}
}

func (a *stub) DeleteCollection(ctx workflow.Context, input *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error) {
	var output rekognition.DeleteCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCollectionAsync(ctx workflow.Context, input *rekognition.DeleteCollectionInput) *DeleteCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteCollection", input)
	return &DeleteCollectionFuture{Future: future}
}

func (a *stub) DeleteFaces(ctx workflow.Context, input *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error) {
	var output rekognition.DeleteFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFacesAsync(ctx workflow.Context, input *rekognition.DeleteFacesInput) *DeleteFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteFaces", input)
	return &DeleteFacesFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *rekognition.DeleteProjectInput) (*rekognition.DeleteProjectOutput, error) {
	var output rekognition.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *rekognition.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DeleteProjectVersion(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) (*rekognition.DeleteProjectVersionOutput, error) {
	var output rekognition.DeleteProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectVersionAsync(ctx workflow.Context, input *rekognition.DeleteProjectVersionInput) *DeleteProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteProjectVersion", input)
	return &DeleteProjectVersionFuture{Future: future}
}

func (a *stub) DeleteStreamProcessor(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) (*rekognition.DeleteStreamProcessorOutput, error) {
	var output rekognition.DeleteStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamProcessorAsync(ctx workflow.Context, input *rekognition.DeleteStreamProcessorInput) *DeleteStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DeleteStreamProcessor", input)
	return &DeleteStreamProcessorFuture{Future: future}
}

func (a *stub) DescribeCollection(ctx workflow.Context, input *rekognition.DescribeCollectionInput) (*rekognition.DescribeCollectionOutput, error) {
	var output rekognition.DescribeCollectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeCollection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCollectionAsync(ctx workflow.Context, input *rekognition.DescribeCollectionInput) *DescribeCollectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeCollection", input)
	return &DescribeCollectionFuture{Future: future}
}

func (a *stub) DescribeProjectVersions(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) (*rekognition.DescribeProjectVersionsOutput, error) {
	var output rekognition.DescribeProjectVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjectVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectVersionsAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *DescribeProjectVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjectVersions", input)
	return &DescribeProjectVersionsFuture{Future: future}
}

func (a *stub) DescribeProjects(ctx workflow.Context, input *rekognition.DescribeProjectsInput) (*rekognition.DescribeProjectsOutput, error) {
	var output rekognition.DescribeProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectsAsync(ctx workflow.Context, input *rekognition.DescribeProjectsInput) *DescribeProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeProjects", input)
	return &DescribeProjectsFuture{Future: future}
}

func (a *stub) DescribeStreamProcessor(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) (*rekognition.DescribeStreamProcessorOutput, error) {
	var output rekognition.DescribeStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStreamProcessorAsync(ctx workflow.Context, input *rekognition.DescribeStreamProcessorInput) *DescribeStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DescribeStreamProcessor", input)
	return &DescribeStreamProcessorFuture{Future: future}
}

func (a *stub) DetectCustomLabels(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) (*rekognition.DetectCustomLabelsOutput, error) {
	var output rekognition.DetectCustomLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectCustomLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectCustomLabelsAsync(ctx workflow.Context, input *rekognition.DetectCustomLabelsInput) *DetectCustomLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectCustomLabels", input)
	return &DetectCustomLabelsFuture{Future: future}
}

func (a *stub) DetectFaces(ctx workflow.Context, input *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error) {
	var output rekognition.DetectFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectFacesAsync(ctx workflow.Context, input *rekognition.DetectFacesInput) *DetectFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectFaces", input)
	return &DetectFacesFuture{Future: future}
}

func (a *stub) DetectLabels(ctx workflow.Context, input *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error) {
	var output rekognition.DetectLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectLabelsAsync(ctx workflow.Context, input *rekognition.DetectLabelsInput) *DetectLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectLabels", input)
	return &DetectLabelsFuture{Future: future}
}

func (a *stub) DetectModerationLabels(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error) {
	var output rekognition.DetectModerationLabelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectModerationLabels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectModerationLabelsAsync(ctx workflow.Context, input *rekognition.DetectModerationLabelsInput) *DetectModerationLabelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectModerationLabels", input)
	return &DetectModerationLabelsFuture{Future: future}
}

func (a *stub) DetectProtectiveEquipment(ctx workflow.Context, input *rekognition.DetectProtectiveEquipmentInput) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	var output rekognition.DetectProtectiveEquipmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectProtectiveEquipment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectProtectiveEquipmentAsync(ctx workflow.Context, input *rekognition.DetectProtectiveEquipmentInput) *DetectProtectiveEquipmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectProtectiveEquipment", input)
	return &DetectProtectiveEquipmentFuture{Future: future}
}

func (a *stub) DetectText(ctx workflow.Context, input *rekognition.DetectTextInput) (*rekognition.DetectTextOutput, error) {
	var output rekognition.DetectTextOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectText", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectTextAsync(ctx workflow.Context, input *rekognition.DetectTextInput) *DetectTextFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-DetectText", input)
	return &DetectTextFuture{Future: future}
}

func (a *stub) GetCelebrityInfo(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error) {
	var output rekognition.GetCelebrityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCelebrityInfoAsync(ctx workflow.Context, input *rekognition.GetCelebrityInfoInput) *GetCelebrityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityInfo", input)
	return &GetCelebrityInfoFuture{Future: future}
}

func (a *stub) GetCelebrityRecognition(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) (*rekognition.GetCelebrityRecognitionOutput, error) {
	var output rekognition.GetCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.GetCelebrityRecognitionInput) *GetCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetCelebrityRecognition", input)
	return &GetCelebrityRecognitionFuture{Future: future}
}

func (a *stub) GetContentModeration(ctx workflow.Context, input *rekognition.GetContentModerationInput) (*rekognition.GetContentModerationOutput, error) {
	var output rekognition.GetContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContentModerationAsync(ctx workflow.Context, input *rekognition.GetContentModerationInput) *GetContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetContentModeration", input)
	return &GetContentModerationFuture{Future: future}
}

func (a *stub) GetFaceDetection(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) (*rekognition.GetFaceDetectionOutput, error) {
	var output rekognition.GetFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFaceDetectionAsync(ctx workflow.Context, input *rekognition.GetFaceDetectionInput) *GetFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceDetection", input)
	return &GetFaceDetectionFuture{Future: future}
}

func (a *stub) GetFaceSearch(ctx workflow.Context, input *rekognition.GetFaceSearchInput) (*rekognition.GetFaceSearchOutput, error) {
	var output rekognition.GetFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFaceSearchAsync(ctx workflow.Context, input *rekognition.GetFaceSearchInput) *GetFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetFaceSearch", input)
	return &GetFaceSearchFuture{Future: future}
}

func (a *stub) GetLabelDetection(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) (*rekognition.GetLabelDetectionOutput, error) {
	var output rekognition.GetLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLabelDetectionAsync(ctx workflow.Context, input *rekognition.GetLabelDetectionInput) *GetLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetLabelDetection", input)
	return &GetLabelDetectionFuture{Future: future}
}

func (a *stub) GetPersonTracking(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) (*rekognition.GetPersonTrackingOutput, error) {
	var output rekognition.GetPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPersonTrackingAsync(ctx workflow.Context, input *rekognition.GetPersonTrackingInput) *GetPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetPersonTracking", input)
	return &GetPersonTrackingFuture{Future: future}
}

func (a *stub) GetSegmentDetection(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) (*rekognition.GetSegmentDetectionOutput, error) {
	var output rekognition.GetSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSegmentDetectionAsync(ctx workflow.Context, input *rekognition.GetSegmentDetectionInput) *GetSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetSegmentDetection", input)
	return &GetSegmentDetectionFuture{Future: future}
}

func (a *stub) GetTextDetection(ctx workflow.Context, input *rekognition.GetTextDetectionInput) (*rekognition.GetTextDetectionOutput, error) {
	var output rekognition.GetTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-GetTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTextDetectionAsync(ctx workflow.Context, input *rekognition.GetTextDetectionInput) *GetTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-GetTextDetection", input)
	return &GetTextDetectionFuture{Future: future}
}

func (a *stub) IndexFaces(ctx workflow.Context, input *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error) {
	var output rekognition.IndexFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-IndexFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) IndexFacesAsync(ctx workflow.Context, input *rekognition.IndexFacesInput) *IndexFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-IndexFaces", input)
	return &IndexFacesFuture{Future: future}
}

func (a *stub) ListCollections(ctx workflow.Context, input *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error) {
	var output rekognition.ListCollectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListCollections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCollectionsAsync(ctx workflow.Context, input *rekognition.ListCollectionsInput) *ListCollectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListCollections", input)
	return &ListCollectionsFuture{Future: future}
}

func (a *stub) ListFaces(ctx workflow.Context, input *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error) {
	var output rekognition.ListFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFacesAsync(ctx workflow.Context, input *rekognition.ListFacesInput) *ListFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListFaces", input)
	return &ListFacesFuture{Future: future}
}

func (a *stub) ListStreamProcessors(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) (*rekognition.ListStreamProcessorsOutput, error) {
	var output rekognition.ListStreamProcessorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-ListStreamProcessors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamProcessorsAsync(ctx workflow.Context, input *rekognition.ListStreamProcessorsInput) *ListStreamProcessorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-ListStreamProcessors", input)
	return &ListStreamProcessorsFuture{Future: future}
}

func (a *stub) RecognizeCelebrities(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error) {
	var output rekognition.RecognizeCelebritiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-RecognizeCelebrities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecognizeCelebritiesAsync(ctx workflow.Context, input *rekognition.RecognizeCelebritiesInput) *RecognizeCelebritiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-RecognizeCelebrities", input)
	return &RecognizeCelebritiesFuture{Future: future}
}

func (a *stub) SearchFaces(ctx workflow.Context, input *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error) {
	var output rekognition.SearchFacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchFacesAsync(ctx workflow.Context, input *rekognition.SearchFacesInput) *SearchFacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFaces", input)
	return &SearchFacesFuture{Future: future}
}

func (a *stub) SearchFacesByImage(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error) {
	var output rekognition.SearchFacesByImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFacesByImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchFacesByImageAsync(ctx workflow.Context, input *rekognition.SearchFacesByImageInput) *SearchFacesByImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-SearchFacesByImage", input)
	return &SearchFacesByImageFuture{Future: future}
}

func (a *stub) StartCelebrityRecognition(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) (*rekognition.StartCelebrityRecognitionOutput, error) {
	var output rekognition.StartCelebrityRecognitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartCelebrityRecognition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartCelebrityRecognitionAsync(ctx workflow.Context, input *rekognition.StartCelebrityRecognitionInput) *StartCelebrityRecognitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartCelebrityRecognition", input)
	return &StartCelebrityRecognitionFuture{Future: future}
}

func (a *stub) StartContentModeration(ctx workflow.Context, input *rekognition.StartContentModerationInput) (*rekognition.StartContentModerationOutput, error) {
	var output rekognition.StartContentModerationOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartContentModeration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartContentModerationAsync(ctx workflow.Context, input *rekognition.StartContentModerationInput) *StartContentModerationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartContentModeration", input)
	return &StartContentModerationFuture{Future: future}
}

func (a *stub) StartFaceDetection(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) (*rekognition.StartFaceDetectionOutput, error) {
	var output rekognition.StartFaceDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFaceDetectionAsync(ctx workflow.Context, input *rekognition.StartFaceDetectionInput) *StartFaceDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceDetection", input)
	return &StartFaceDetectionFuture{Future: future}
}

func (a *stub) StartFaceSearch(ctx workflow.Context, input *rekognition.StartFaceSearchInput) (*rekognition.StartFaceSearchOutput, error) {
	var output rekognition.StartFaceSearchOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceSearch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFaceSearchAsync(ctx workflow.Context, input *rekognition.StartFaceSearchInput) *StartFaceSearchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartFaceSearch", input)
	return &StartFaceSearchFuture{Future: future}
}

func (a *stub) StartLabelDetection(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) (*rekognition.StartLabelDetectionOutput, error) {
	var output rekognition.StartLabelDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartLabelDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartLabelDetectionAsync(ctx workflow.Context, input *rekognition.StartLabelDetectionInput) *StartLabelDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartLabelDetection", input)
	return &StartLabelDetectionFuture{Future: future}
}

func (a *stub) StartPersonTracking(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) (*rekognition.StartPersonTrackingOutput, error) {
	var output rekognition.StartPersonTrackingOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartPersonTracking", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPersonTrackingAsync(ctx workflow.Context, input *rekognition.StartPersonTrackingInput) *StartPersonTrackingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartPersonTracking", input)
	return &StartPersonTrackingFuture{Future: future}
}

func (a *stub) StartProjectVersion(ctx workflow.Context, input *rekognition.StartProjectVersionInput) (*rekognition.StartProjectVersionOutput, error) {
	var output rekognition.StartProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartProjectVersionAsync(ctx workflow.Context, input *rekognition.StartProjectVersionInput) *StartProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartProjectVersion", input)
	return &StartProjectVersionFuture{Future: future}
}

func (a *stub) StartSegmentDetection(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) (*rekognition.StartSegmentDetectionOutput, error) {
	var output rekognition.StartSegmentDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartSegmentDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSegmentDetectionAsync(ctx workflow.Context, input *rekognition.StartSegmentDetectionInput) *StartSegmentDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartSegmentDetection", input)
	return &StartSegmentDetectionFuture{Future: future}
}

func (a *stub) StartStreamProcessor(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) (*rekognition.StartStreamProcessorOutput, error) {
	var output rekognition.StartStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartStreamProcessorAsync(ctx workflow.Context, input *rekognition.StartStreamProcessorInput) *StartStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartStreamProcessor", input)
	return &StartStreamProcessorFuture{Future: future}
}

func (a *stub) StartTextDetection(ctx workflow.Context, input *rekognition.StartTextDetectionInput) (*rekognition.StartTextDetectionOutput, error) {
	var output rekognition.StartTextDetectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StartTextDetection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTextDetectionAsync(ctx workflow.Context, input *rekognition.StartTextDetectionInput) *StartTextDetectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StartTextDetection", input)
	return &StartTextDetectionFuture{Future: future}
}

func (a *stub) StopProjectVersion(ctx workflow.Context, input *rekognition.StopProjectVersionInput) (*rekognition.StopProjectVersionOutput, error) {
	var output rekognition.StopProjectVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StopProjectVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopProjectVersionAsync(ctx workflow.Context, input *rekognition.StopProjectVersionInput) *StopProjectVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StopProjectVersion", input)
	return &StopProjectVersionFuture{Future: future}
}

func (a *stub) StopStreamProcessor(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) (*rekognition.StopStreamProcessorOutput, error) {
	var output rekognition.StopStreamProcessorOutput
	err := workflow.ExecuteActivity(ctx, "aws-rekognition-StopStreamProcessor", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopStreamProcessorAsync(ctx workflow.Context, input *rekognition.StopStreamProcessorInput) *StopStreamProcessorFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-StopStreamProcessor", input)
	return &StopStreamProcessorFuture{Future: future}
}

func (a *stub) WaitUntilProjectVersionRunning(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProjectVersionRunningAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilProjectVersionTrainingCompleted(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionTrainingCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilProjectVersionTrainingCompletedAsync(ctx workflow.Context, input *rekognition.DescribeProjectVersionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-rekognition-WaitUntilProjectVersionTrainingCompleted", input)
	return clients.NewVoidFuture(future)
}
