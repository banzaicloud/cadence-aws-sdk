// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package appregistrystub

import (
	"github.com/aws/aws-sdk-go/service/appregistry"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.AssociateAttributeGroupOutput, error) {
	var output appregistry.AssociateAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateResourceFuture) Get(ctx workflow.Context) (*appregistry.AssociateResourceOutput, error) {
	var output appregistry.AssociateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*appregistry.CreateApplicationOutput, error) {
	var output appregistry.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.CreateAttributeGroupOutput, error) {
	var output appregistry.CreateAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*appregistry.DeleteApplicationOutput, error) {
	var output appregistry.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.DeleteAttributeGroupOutput, error) {
	var output appregistry.DeleteAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.DisassociateAttributeGroupOutput, error) {
	var output appregistry.DisassociateAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateResourceFuture) Get(ctx workflow.Context) (*appregistry.DisassociateResourceOutput, error) {
	var output appregistry.DisassociateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetApplicationFuture) Get(ctx workflow.Context) (*appregistry.GetApplicationOutput, error) {
	var output appregistry.GetApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.GetAttributeGroupOutput, error) {
	var output appregistry.GetAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListApplicationsFuture) Get(ctx workflow.Context) (*appregistry.ListApplicationsOutput, error) {
	var output appregistry.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedAttributeGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedAttributeGroupsFuture) Get(ctx workflow.Context) (*appregistry.ListAssociatedAttributeGroupsOutput, error) {
	var output appregistry.ListAssociatedAttributeGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociatedResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociatedResourcesFuture) Get(ctx workflow.Context) (*appregistry.ListAssociatedResourcesOutput, error) {
	var output appregistry.ListAssociatedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAttributeGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAttributeGroupsFuture) Get(ctx workflow.Context) (*appregistry.ListAttributeGroupsOutput, error) {
	var output appregistry.ListAttributeGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*appregistry.ListTagsForResourceOutput, error) {
	var output appregistry.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SyncResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SyncResourceFuture) Get(ctx workflow.Context) (*appregistry.SyncResourceOutput, error) {
	var output appregistry.SyncResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*appregistry.TagResourceOutput, error) {
	var output appregistry.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*appregistry.UntagResourceOutput, error) {
	var output appregistry.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*appregistry.UpdateApplicationOutput, error) {
	var output appregistry.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAttributeGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAttributeGroupFuture) Get(ctx workflow.Context) (*appregistry.UpdateAttributeGroupOutput, error) {
	var output appregistry.UpdateAttributeGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAttributeGroup(ctx workflow.Context, input *appregistry.AssociateAttributeGroupInput) (*appregistry.AssociateAttributeGroupOutput, error) {
	var output appregistry.AssociateAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-AssociateAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAttributeGroupAsync(ctx workflow.Context, input *appregistry.AssociateAttributeGroupInput) *AssociateAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-AssociateAttributeGroup", input)
	return &AssociateAttributeGroupFuture{Future: future}
}

func (a *stub) AssociateResource(ctx workflow.Context, input *appregistry.AssociateResourceInput) (*appregistry.AssociateResourceOutput, error) {
	var output appregistry.AssociateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-AssociateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateResourceAsync(ctx workflow.Context, input *appregistry.AssociateResourceInput) *AssociateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-AssociateResource", input)
	return &AssociateResourceFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *appregistry.CreateApplicationInput) (*appregistry.CreateApplicationOutput, error) {
	var output appregistry.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *appregistry.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateAttributeGroup(ctx workflow.Context, input *appregistry.CreateAttributeGroupInput) (*appregistry.CreateAttributeGroupOutput, error) {
	var output appregistry.CreateAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-CreateAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAttributeGroupAsync(ctx workflow.Context, input *appregistry.CreateAttributeGroupInput) *CreateAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-CreateAttributeGroup", input)
	return &CreateAttributeGroupFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *appregistry.DeleteApplicationInput) (*appregistry.DeleteApplicationOutput, error) {
	var output appregistry.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *appregistry.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteAttributeGroup(ctx workflow.Context, input *appregistry.DeleteAttributeGroupInput) (*appregistry.DeleteAttributeGroupOutput, error) {
	var output appregistry.DeleteAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-DeleteAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAttributeGroupAsync(ctx workflow.Context, input *appregistry.DeleteAttributeGroupInput) *DeleteAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-DeleteAttributeGroup", input)
	return &DeleteAttributeGroupFuture{Future: future}
}

func (a *stub) DisassociateAttributeGroup(ctx workflow.Context, input *appregistry.DisassociateAttributeGroupInput) (*appregistry.DisassociateAttributeGroupOutput, error) {
	var output appregistry.DisassociateAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-DisassociateAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAttributeGroupAsync(ctx workflow.Context, input *appregistry.DisassociateAttributeGroupInput) *DisassociateAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-DisassociateAttributeGroup", input)
	return &DisassociateAttributeGroupFuture{Future: future}
}

func (a *stub) DisassociateResource(ctx workflow.Context, input *appregistry.DisassociateResourceInput) (*appregistry.DisassociateResourceOutput, error) {
	var output appregistry.DisassociateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-DisassociateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateResourceAsync(ctx workflow.Context, input *appregistry.DisassociateResourceInput) *DisassociateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-DisassociateResource", input)
	return &DisassociateResourceFuture{Future: future}
}

func (a *stub) GetApplication(ctx workflow.Context, input *appregistry.GetApplicationInput) (*appregistry.GetApplicationOutput, error) {
	var output appregistry.GetApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-GetApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApplicationAsync(ctx workflow.Context, input *appregistry.GetApplicationInput) *GetApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-GetApplication", input)
	return &GetApplicationFuture{Future: future}
}

func (a *stub) GetAttributeGroup(ctx workflow.Context, input *appregistry.GetAttributeGroupInput) (*appregistry.GetAttributeGroupOutput, error) {
	var output appregistry.GetAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-GetAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAttributeGroupAsync(ctx workflow.Context, input *appregistry.GetAttributeGroupInput) *GetAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-GetAttributeGroup", input)
	return &GetAttributeGroupFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *appregistry.ListApplicationsInput) (*appregistry.ListApplicationsOutput, error) {
	var output appregistry.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *appregistry.ListApplicationsInput) *ListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-ListApplications", input)
	return &ListApplicationsFuture{Future: future}
}

func (a *stub) ListAssociatedAttributeGroups(ctx workflow.Context, input *appregistry.ListAssociatedAttributeGroupsInput) (*appregistry.ListAssociatedAttributeGroupsOutput, error) {
	var output appregistry.ListAssociatedAttributeGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAssociatedAttributeGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedAttributeGroupsAsync(ctx workflow.Context, input *appregistry.ListAssociatedAttributeGroupsInput) *ListAssociatedAttributeGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAssociatedAttributeGroups", input)
	return &ListAssociatedAttributeGroupsFuture{Future: future}
}

func (a *stub) ListAssociatedResources(ctx workflow.Context, input *appregistry.ListAssociatedResourcesInput) (*appregistry.ListAssociatedResourcesOutput, error) {
	var output appregistry.ListAssociatedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAssociatedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociatedResourcesAsync(ctx workflow.Context, input *appregistry.ListAssociatedResourcesInput) *ListAssociatedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAssociatedResources", input)
	return &ListAssociatedResourcesFuture{Future: future}
}

func (a *stub) ListAttributeGroups(ctx workflow.Context, input *appregistry.ListAttributeGroupsInput) (*appregistry.ListAttributeGroupsOutput, error) {
	var output appregistry.ListAttributeGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAttributeGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttributeGroupsAsync(ctx workflow.Context, input *appregistry.ListAttributeGroupsInput) *ListAttributeGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-ListAttributeGroups", input)
	return &ListAttributeGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *appregistry.ListTagsForResourceInput) (*appregistry.ListTagsForResourceOutput, error) {
	var output appregistry.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *appregistry.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) SyncResource(ctx workflow.Context, input *appregistry.SyncResourceInput) (*appregistry.SyncResourceOutput, error) {
	var output appregistry.SyncResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-SyncResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SyncResourceAsync(ctx workflow.Context, input *appregistry.SyncResourceInput) *SyncResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-SyncResource", input)
	return &SyncResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *appregistry.TagResourceInput) (*appregistry.TagResourceOutput, error) {
	var output appregistry.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *appregistry.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *appregistry.UntagResourceInput) (*appregistry.UntagResourceOutput, error) {
	var output appregistry.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *appregistry.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *appregistry.UpdateApplicationInput) (*appregistry.UpdateApplicationOutput, error) {
	var output appregistry.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *appregistry.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateAttributeGroup(ctx workflow.Context, input *appregistry.UpdateAttributeGroupInput) (*appregistry.UpdateAttributeGroupOutput, error) {
	var output appregistry.UpdateAttributeGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-appregistry-UpdateAttributeGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAttributeGroupAsync(ctx workflow.Context, input *appregistry.UpdateAttributeGroupInput) *UpdateAttributeGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-appregistry-UpdateAttributeGroup", input)
	return &UpdateAttributeGroupFuture{Future: future}
}
