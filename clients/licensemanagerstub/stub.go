// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package licensemanagerstub

import (
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptGrantFuture) Get(ctx workflow.Context) (*licensemanager.AcceptGrantOutput, error) {
	var output licensemanager.AcceptGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckInLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckInLicenseFuture) Get(ctx workflow.Context) (*licensemanager.CheckInLicenseOutput, error) {
	var output licensemanager.CheckInLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckoutBorrowLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckoutBorrowLicenseFuture) Get(ctx workflow.Context) (*licensemanager.CheckoutBorrowLicenseOutput, error) {
	var output licensemanager.CheckoutBorrowLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckoutLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckoutLicenseFuture) Get(ctx workflow.Context) (*licensemanager.CheckoutLicenseOutput, error) {
	var output licensemanager.CheckoutLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGrantFuture) Get(ctx workflow.Context) (*licensemanager.CreateGrantOutput, error) {
	var output licensemanager.CreateGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGrantVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGrantVersionFuture) Get(ctx workflow.Context) (*licensemanager.CreateGrantVersionOutput, error) {
	var output licensemanager.CreateGrantVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLicenseFuture) Get(ctx workflow.Context) (*licensemanager.CreateLicenseOutput, error) {
	var output licensemanager.CreateLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	var output licensemanager.CreateLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLicenseVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLicenseVersionFuture) Get(ctx workflow.Context) (*licensemanager.CreateLicenseVersionOutput, error) {
	var output licensemanager.CreateLicenseVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTokenFuture) Get(ctx workflow.Context) (*licensemanager.CreateTokenOutput, error) {
	var output licensemanager.CreateTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteGrantFuture) Get(ctx workflow.Context) (*licensemanager.DeleteGrantOutput, error) {
	var output licensemanager.DeleteGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLicenseFuture) Get(ctx workflow.Context) (*licensemanager.DeleteLicenseOutput, error) {
	var output licensemanager.DeleteLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	var output licensemanager.DeleteLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTokenFuture) Get(ctx workflow.Context) (*licensemanager.DeleteTokenOutput, error) {
	var output licensemanager.DeleteTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExtendLicenseConsumptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExtendLicenseConsumptionFuture) Get(ctx workflow.Context) (*licensemanager.ExtendLicenseConsumptionOutput, error) {
	var output licensemanager.ExtendLicenseConsumptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccessTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccessTokenFuture) Get(ctx workflow.Context) (*licensemanager.GetAccessTokenOutput, error) {
	var output licensemanager.GetAccessTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGrantFuture) Get(ctx workflow.Context) (*licensemanager.GetGrantOutput, error) {
	var output licensemanager.GetGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLicenseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLicenseFuture) Get(ctx workflow.Context) (*licensemanager.GetLicenseOutput, error) {
	var output licensemanager.GetLicenseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.GetLicenseConfigurationOutput, error) {
	var output licensemanager.GetLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLicenseUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLicenseUsageFuture) Get(ctx workflow.Context) (*licensemanager.GetLicenseUsageOutput, error) {
	var output licensemanager.GetLicenseUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceSettingsFuture) Get(ctx workflow.Context) (*licensemanager.GetServiceSettingsOutput, error) {
	var output licensemanager.GetServiceSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociationsForLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociationsForLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	var output licensemanager.ListAssociationsForLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDistributedGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDistributedGrantsFuture) Get(ctx workflow.Context) (*licensemanager.ListDistributedGrantsOutput, error) {
	var output licensemanager.ListDistributedGrantsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFailuresForLicenseConfigurationOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFailuresForLicenseConfigurationOperationsFuture) Get(ctx workflow.Context) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	var output licensemanager.ListFailuresForLicenseConfigurationOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicenseConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicenseConfigurationsFuture) Get(ctx workflow.Context) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	var output licensemanager.ListLicenseConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicenseSpecificationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicenseSpecificationsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.ListLicenseSpecificationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicenseVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicenseVersionsFuture) Get(ctx workflow.Context) (*licensemanager.ListLicenseVersionsOutput, error) {
	var output licensemanager.ListLicenseVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicensesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicensesFuture) Get(ctx workflow.Context) (*licensemanager.ListLicensesOutput, error) {
	var output licensemanager.ListLicensesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReceivedGrantsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReceivedGrantsFuture) Get(ctx workflow.Context) (*licensemanager.ListReceivedGrantsOutput, error) {
	var output licensemanager.ListReceivedGrantsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListReceivedLicensesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListReceivedLicensesFuture) Get(ctx workflow.Context) (*licensemanager.ListReceivedLicensesOutput, error) {
	var output licensemanager.ListReceivedLicensesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceInventoryFuture) Get(ctx workflow.Context) (*licensemanager.ListResourceInventoryOutput, error) {
	var output licensemanager.ListResourceInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.ListTagsForResourceOutput, error) {
	var output licensemanager.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTokensFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTokensFuture) Get(ctx workflow.Context) (*licensemanager.ListTokensOutput, error) {
	var output licensemanager.ListTokensOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsageForLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsageForLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	var output licensemanager.ListUsageForLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectGrantFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectGrantFuture) Get(ctx workflow.Context) (*licensemanager.RejectGrantOutput, error) {
	var output licensemanager.RejectGrantOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*licensemanager.TagResourceOutput, error) {
	var output licensemanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*licensemanager.UntagResourceOutput, error) {
	var output licensemanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	var output licensemanager.UpdateLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLicenseSpecificationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLicenseSpecificationsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.UpdateLicenseSpecificationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceSettingsFuture) Get(ctx workflow.Context) (*licensemanager.UpdateServiceSettingsOutput, error) {
	var output licensemanager.UpdateServiceSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptGrant(ctx workflow.Context, input *licensemanager.AcceptGrantInput) (*licensemanager.AcceptGrantOutput, error) {
	var output licensemanager.AcceptGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-AcceptGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptGrantAsync(ctx workflow.Context, input *licensemanager.AcceptGrantInput) *AcceptGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-AcceptGrant", input)
	return &AcceptGrantFuture{Future: future}
}

func (a *stub) CheckInLicense(ctx workflow.Context, input *licensemanager.CheckInLicenseInput) (*licensemanager.CheckInLicenseOutput, error) {
	var output licensemanager.CheckInLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckInLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckInLicenseAsync(ctx workflow.Context, input *licensemanager.CheckInLicenseInput) *CheckInLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckInLicense", input)
	return &CheckInLicenseFuture{Future: future}
}

func (a *stub) CheckoutBorrowLicense(ctx workflow.Context, input *licensemanager.CheckoutBorrowLicenseInput) (*licensemanager.CheckoutBorrowLicenseOutput, error) {
	var output licensemanager.CheckoutBorrowLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckoutBorrowLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckoutBorrowLicenseAsync(ctx workflow.Context, input *licensemanager.CheckoutBorrowLicenseInput) *CheckoutBorrowLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckoutBorrowLicense", input)
	return &CheckoutBorrowLicenseFuture{Future: future}
}

func (a *stub) CheckoutLicense(ctx workflow.Context, input *licensemanager.CheckoutLicenseInput) (*licensemanager.CheckoutLicenseOutput, error) {
	var output licensemanager.CheckoutLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckoutLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckoutLicenseAsync(ctx workflow.Context, input *licensemanager.CheckoutLicenseInput) *CheckoutLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CheckoutLicense", input)
	return &CheckoutLicenseFuture{Future: future}
}

func (a *stub) CreateGrant(ctx workflow.Context, input *licensemanager.CreateGrantInput) (*licensemanager.CreateGrantOutput, error) {
	var output licensemanager.CreateGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGrantAsync(ctx workflow.Context, input *licensemanager.CreateGrantInput) *CreateGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateGrant", input)
	return &CreateGrantFuture{Future: future}
}

func (a *stub) CreateGrantVersion(ctx workflow.Context, input *licensemanager.CreateGrantVersionInput) (*licensemanager.CreateGrantVersionOutput, error) {
	var output licensemanager.CreateGrantVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateGrantVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGrantVersionAsync(ctx workflow.Context, input *licensemanager.CreateGrantVersionInput) *CreateGrantVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateGrantVersion", input)
	return &CreateGrantVersionFuture{Future: future}
}

func (a *stub) CreateLicense(ctx workflow.Context, input *licensemanager.CreateLicenseInput) (*licensemanager.CreateLicenseOutput, error) {
	var output licensemanager.CreateLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLicenseAsync(ctx workflow.Context, input *licensemanager.CreateLicenseInput) *CreateLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicense", input)
	return &CreateLicenseFuture{Future: future}
}

func (a *stub) CreateLicenseConfiguration(ctx workflow.Context, input *licensemanager.CreateLicenseConfigurationInput) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	var output licensemanager.CreateLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.CreateLicenseConfigurationInput) *CreateLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseConfiguration", input)
	return &CreateLicenseConfigurationFuture{Future: future}
}

func (a *stub) CreateLicenseVersion(ctx workflow.Context, input *licensemanager.CreateLicenseVersionInput) (*licensemanager.CreateLicenseVersionOutput, error) {
	var output licensemanager.CreateLicenseVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLicenseVersionAsync(ctx workflow.Context, input *licensemanager.CreateLicenseVersionInput) *CreateLicenseVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseVersion", input)
	return &CreateLicenseVersionFuture{Future: future}
}

func (a *stub) CreateToken(ctx workflow.Context, input *licensemanager.CreateTokenInput) (*licensemanager.CreateTokenOutput, error) {
	var output licensemanager.CreateTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTokenAsync(ctx workflow.Context, input *licensemanager.CreateTokenInput) *CreateTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateToken", input)
	return &CreateTokenFuture{Future: future}
}

func (a *stub) DeleteGrant(ctx workflow.Context, input *licensemanager.DeleteGrantInput) (*licensemanager.DeleteGrantOutput, error) {
	var output licensemanager.DeleteGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteGrantAsync(ctx workflow.Context, input *licensemanager.DeleteGrantInput) *DeleteGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteGrant", input)
	return &DeleteGrantFuture{Future: future}
}

func (a *stub) DeleteLicense(ctx workflow.Context, input *licensemanager.DeleteLicenseInput) (*licensemanager.DeleteLicenseOutput, error) {
	var output licensemanager.DeleteLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLicenseAsync(ctx workflow.Context, input *licensemanager.DeleteLicenseInput) *DeleteLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicense", input)
	return &DeleteLicenseFuture{Future: future}
}

func (a *stub) DeleteLicenseConfiguration(ctx workflow.Context, input *licensemanager.DeleteLicenseConfigurationInput) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	var output licensemanager.DeleteLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.DeleteLicenseConfigurationInput) *DeleteLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicenseConfiguration", input)
	return &DeleteLicenseConfigurationFuture{Future: future}
}

func (a *stub) DeleteToken(ctx workflow.Context, input *licensemanager.DeleteTokenInput) (*licensemanager.DeleteTokenOutput, error) {
	var output licensemanager.DeleteTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTokenAsync(ctx workflow.Context, input *licensemanager.DeleteTokenInput) *DeleteTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteToken", input)
	return &DeleteTokenFuture{Future: future}
}

func (a *stub) ExtendLicenseConsumption(ctx workflow.Context, input *licensemanager.ExtendLicenseConsumptionInput) (*licensemanager.ExtendLicenseConsumptionOutput, error) {
	var output licensemanager.ExtendLicenseConsumptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ExtendLicenseConsumption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExtendLicenseConsumptionAsync(ctx workflow.Context, input *licensemanager.ExtendLicenseConsumptionInput) *ExtendLicenseConsumptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ExtendLicenseConsumption", input)
	return &ExtendLicenseConsumptionFuture{Future: future}
}

func (a *stub) GetAccessToken(ctx workflow.Context, input *licensemanager.GetAccessTokenInput) (*licensemanager.GetAccessTokenOutput, error) {
	var output licensemanager.GetAccessTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetAccessToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccessTokenAsync(ctx workflow.Context, input *licensemanager.GetAccessTokenInput) *GetAccessTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetAccessToken", input)
	return &GetAccessTokenFuture{Future: future}
}

func (a *stub) GetGrant(ctx workflow.Context, input *licensemanager.GetGrantInput) (*licensemanager.GetGrantOutput, error) {
	var output licensemanager.GetGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGrantAsync(ctx workflow.Context, input *licensemanager.GetGrantInput) *GetGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetGrant", input)
	return &GetGrantFuture{Future: future}
}

func (a *stub) GetLicense(ctx workflow.Context, input *licensemanager.GetLicenseInput) (*licensemanager.GetLicenseOutput, error) {
	var output licensemanager.GetLicenseOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicense", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLicenseAsync(ctx workflow.Context, input *licensemanager.GetLicenseInput) *GetLicenseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicense", input)
	return &GetLicenseFuture{Future: future}
}

func (a *stub) GetLicenseConfiguration(ctx workflow.Context, input *licensemanager.GetLicenseConfigurationInput) (*licensemanager.GetLicenseConfigurationOutput, error) {
	var output licensemanager.GetLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.GetLicenseConfigurationInput) *GetLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseConfiguration", input)
	return &GetLicenseConfigurationFuture{Future: future}
}

func (a *stub) GetLicenseUsage(ctx workflow.Context, input *licensemanager.GetLicenseUsageInput) (*licensemanager.GetLicenseUsageOutput, error) {
	var output licensemanager.GetLicenseUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLicenseUsageAsync(ctx workflow.Context, input *licensemanager.GetLicenseUsageInput) *GetLicenseUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseUsage", input)
	return &GetLicenseUsageFuture{Future: future}
}

func (a *stub) GetServiceSettings(ctx workflow.Context, input *licensemanager.GetServiceSettingsInput) (*licensemanager.GetServiceSettingsOutput, error) {
	var output licensemanager.GetServiceSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetServiceSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceSettingsAsync(ctx workflow.Context, input *licensemanager.GetServiceSettingsInput) *GetServiceSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetServiceSettings", input)
	return &GetServiceSettingsFuture{Future: future}
}

func (a *stub) ListAssociationsForLicenseConfiguration(ctx workflow.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	var output licensemanager.ListAssociationsForLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListAssociationsForLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociationsForLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput) *ListAssociationsForLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListAssociationsForLicenseConfiguration", input)
	return &ListAssociationsForLicenseConfigurationFuture{Future: future}
}

func (a *stub) ListDistributedGrants(ctx workflow.Context, input *licensemanager.ListDistributedGrantsInput) (*licensemanager.ListDistributedGrantsOutput, error) {
	var output licensemanager.ListDistributedGrantsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListDistributedGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDistributedGrantsAsync(ctx workflow.Context, input *licensemanager.ListDistributedGrantsInput) *ListDistributedGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListDistributedGrants", input)
	return &ListDistributedGrantsFuture{Future: future}
}

func (a *stub) ListFailuresForLicenseConfigurationOperations(ctx workflow.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	var output licensemanager.ListFailuresForLicenseConfigurationOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListFailuresForLicenseConfigurationOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFailuresForLicenseConfigurationOperationsAsync(ctx workflow.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) *ListFailuresForLicenseConfigurationOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListFailuresForLicenseConfigurationOperations", input)
	return &ListFailuresForLicenseConfigurationOperationsFuture{Future: future}
}

func (a *stub) ListLicenseConfigurations(ctx workflow.Context, input *licensemanager.ListLicenseConfigurationsInput) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	var output licensemanager.ListLicenseConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicenseConfigurationsAsync(ctx workflow.Context, input *licensemanager.ListLicenseConfigurationsInput) *ListLicenseConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseConfigurations", input)
	return &ListLicenseConfigurationsFuture{Future: future}
}

func (a *stub) ListLicenseSpecificationsForResource(ctx workflow.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.ListLicenseSpecificationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseSpecificationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicenseSpecificationsForResourceAsync(ctx workflow.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput) *ListLicenseSpecificationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseSpecificationsForResource", input)
	return &ListLicenseSpecificationsForResourceFuture{Future: future}
}

func (a *stub) ListLicenseVersions(ctx workflow.Context, input *licensemanager.ListLicenseVersionsInput) (*licensemanager.ListLicenseVersionsOutput, error) {
	var output licensemanager.ListLicenseVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicenseVersionsAsync(ctx workflow.Context, input *licensemanager.ListLicenseVersionsInput) *ListLicenseVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseVersions", input)
	return &ListLicenseVersionsFuture{Future: future}
}

func (a *stub) ListLicenses(ctx workflow.Context, input *licensemanager.ListLicensesInput) (*licensemanager.ListLicensesOutput, error) {
	var output licensemanager.ListLicensesOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicensesAsync(ctx workflow.Context, input *licensemanager.ListLicensesInput) *ListLicensesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenses", input)
	return &ListLicensesFuture{Future: future}
}

func (a *stub) ListReceivedGrants(ctx workflow.Context, input *licensemanager.ListReceivedGrantsInput) (*licensemanager.ListReceivedGrantsOutput, error) {
	var output licensemanager.ListReceivedGrantsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListReceivedGrants", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReceivedGrantsAsync(ctx workflow.Context, input *licensemanager.ListReceivedGrantsInput) *ListReceivedGrantsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListReceivedGrants", input)
	return &ListReceivedGrantsFuture{Future: future}
}

func (a *stub) ListReceivedLicenses(ctx workflow.Context, input *licensemanager.ListReceivedLicensesInput) (*licensemanager.ListReceivedLicensesOutput, error) {
	var output licensemanager.ListReceivedLicensesOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListReceivedLicenses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListReceivedLicensesAsync(ctx workflow.Context, input *licensemanager.ListReceivedLicensesInput) *ListReceivedLicensesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListReceivedLicenses", input)
	return &ListReceivedLicensesFuture{Future: future}
}

func (a *stub) ListResourceInventory(ctx workflow.Context, input *licensemanager.ListResourceInventoryInput) (*licensemanager.ListResourceInventoryOutput, error) {
	var output licensemanager.ListResourceInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListResourceInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceInventoryAsync(ctx workflow.Context, input *licensemanager.ListResourceInventoryInput) *ListResourceInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListResourceInventory", input)
	return &ListResourceInventoryFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *licensemanager.ListTagsForResourceInput) (*licensemanager.ListTagsForResourceOutput, error) {
	var output licensemanager.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *licensemanager.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTokens(ctx workflow.Context, input *licensemanager.ListTokensInput) (*licensemanager.ListTokensOutput, error) {
	var output licensemanager.ListTokensOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTokens", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTokensAsync(ctx workflow.Context, input *licensemanager.ListTokensInput) *ListTokensFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTokens", input)
	return &ListTokensFuture{Future: future}
}

func (a *stub) ListUsageForLicenseConfiguration(ctx workflow.Context, input *licensemanager.ListUsageForLicenseConfigurationInput) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	var output licensemanager.ListUsageForLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListUsageForLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsageForLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.ListUsageForLicenseConfigurationInput) *ListUsageForLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListUsageForLicenseConfiguration", input)
	return &ListUsageForLicenseConfigurationFuture{Future: future}
}

func (a *stub) RejectGrant(ctx workflow.Context, input *licensemanager.RejectGrantInput) (*licensemanager.RejectGrantOutput, error) {
	var output licensemanager.RejectGrantOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-RejectGrant", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectGrantAsync(ctx workflow.Context, input *licensemanager.RejectGrantInput) *RejectGrantFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-RejectGrant", input)
	return &RejectGrantFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *licensemanager.TagResourceInput) (*licensemanager.TagResourceOutput, error) {
	var output licensemanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *licensemanager.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *licensemanager.UntagResourceInput) (*licensemanager.UntagResourceOutput, error) {
	var output licensemanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *licensemanager.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateLicenseConfiguration(ctx workflow.Context, input *licensemanager.UpdateLicenseConfigurationInput) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	var output licensemanager.UpdateLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.UpdateLicenseConfigurationInput) *UpdateLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseConfiguration", input)
	return &UpdateLicenseConfigurationFuture{Future: future}
}

func (a *stub) UpdateLicenseSpecificationsForResource(ctx workflow.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.UpdateLicenseSpecificationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseSpecificationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLicenseSpecificationsForResourceAsync(ctx workflow.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput) *UpdateLicenseSpecificationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseSpecificationsForResource", input)
	return &UpdateLicenseSpecificationsForResourceFuture{Future: future}
}

func (a *stub) UpdateServiceSettings(ctx workflow.Context, input *licensemanager.UpdateServiceSettingsInput) (*licensemanager.UpdateServiceSettingsOutput, error) {
	var output licensemanager.UpdateServiceSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateServiceSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceSettingsAsync(ctx workflow.Context, input *licensemanager.UpdateServiceSettingsInput) *UpdateServiceSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateServiceSettings", input)
	return &UpdateServiceSettingsFuture{Future: future}
}
