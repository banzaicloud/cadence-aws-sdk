// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package licensemanagerstub

import (
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	var output licensemanager.CreateLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	var output licensemanager.DeleteLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.GetLicenseConfigurationOutput, error) {
	var output licensemanager.GetLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServiceSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServiceSettingsFuture) Get(ctx workflow.Context) (*licensemanager.GetServiceSettingsOutput, error) {
	var output licensemanager.GetServiceSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssociationsForLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssociationsForLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	var output licensemanager.ListAssociationsForLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFailuresForLicenseConfigurationOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFailuresForLicenseConfigurationOperationsFuture) Get(ctx workflow.Context) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	var output licensemanager.ListFailuresForLicenseConfigurationOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicenseConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicenseConfigurationsFuture) Get(ctx workflow.Context) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	var output licensemanager.ListLicenseConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLicenseSpecificationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLicenseSpecificationsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.ListLicenseSpecificationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourceInventoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourceInventoryFuture) Get(ctx workflow.Context) (*licensemanager.ListResourceInventoryOutput, error) {
	var output licensemanager.ListResourceInventoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.ListTagsForResourceOutput, error) {
	var output licensemanager.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsageForLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsageForLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	var output licensemanager.ListUsageForLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*licensemanager.TagResourceOutput, error) {
	var output licensemanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*licensemanager.UntagResourceOutput, error) {
	var output licensemanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLicenseConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLicenseConfigurationFuture) Get(ctx workflow.Context) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	var output licensemanager.UpdateLicenseConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLicenseSpecificationsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLicenseSpecificationsForResourceFuture) Get(ctx workflow.Context) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.UpdateLicenseSpecificationsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateServiceSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateServiceSettingsFuture) Get(ctx workflow.Context) (*licensemanager.UpdateServiceSettingsOutput, error) {
	var output licensemanager.UpdateServiceSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLicenseConfiguration(ctx workflow.Context, input *licensemanager.CreateLicenseConfigurationInput) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	var output licensemanager.CreateLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.CreateLicenseConfigurationInput) *CreateLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-CreateLicenseConfiguration", input)
	return &CreateLicenseConfigurationFuture{Future: future}
}

func (a *stub) DeleteLicenseConfiguration(ctx workflow.Context, input *licensemanager.DeleteLicenseConfigurationInput) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	var output licensemanager.DeleteLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.DeleteLicenseConfigurationInput) *DeleteLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-DeleteLicenseConfiguration", input)
	return &DeleteLicenseConfigurationFuture{Future: future}
}

func (a *stub) GetLicenseConfiguration(ctx workflow.Context, input *licensemanager.GetLicenseConfigurationInput) (*licensemanager.GetLicenseConfigurationOutput, error) {
	var output licensemanager.GetLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.GetLicenseConfigurationInput) *GetLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetLicenseConfiguration", input)
	return &GetLicenseConfigurationFuture{Future: future}
}

func (a *stub) GetServiceSettings(ctx workflow.Context, input *licensemanager.GetServiceSettingsInput) (*licensemanager.GetServiceSettingsOutput, error) {
	var output licensemanager.GetServiceSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetServiceSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServiceSettingsAsync(ctx workflow.Context, input *licensemanager.GetServiceSettingsInput) *GetServiceSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-GetServiceSettings", input)
	return &GetServiceSettingsFuture{Future: future}
}

func (a *stub) ListAssociationsForLicenseConfiguration(ctx workflow.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	var output licensemanager.ListAssociationsForLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListAssociationsForLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssociationsForLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput) *ListAssociationsForLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListAssociationsForLicenseConfiguration", input)
	return &ListAssociationsForLicenseConfigurationFuture{Future: future}
}

func (a *stub) ListFailuresForLicenseConfigurationOperations(ctx workflow.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	var output licensemanager.ListFailuresForLicenseConfigurationOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListFailuresForLicenseConfigurationOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFailuresForLicenseConfigurationOperationsAsync(ctx workflow.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) *ListFailuresForLicenseConfigurationOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListFailuresForLicenseConfigurationOperations", input)
	return &ListFailuresForLicenseConfigurationOperationsFuture{Future: future}
}

func (a *stub) ListLicenseConfigurations(ctx workflow.Context, input *licensemanager.ListLicenseConfigurationsInput) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	var output licensemanager.ListLicenseConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicenseConfigurationsAsync(ctx workflow.Context, input *licensemanager.ListLicenseConfigurationsInput) *ListLicenseConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseConfigurations", input)
	return &ListLicenseConfigurationsFuture{Future: future}
}

func (a *stub) ListLicenseSpecificationsForResource(ctx workflow.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.ListLicenseSpecificationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseSpecificationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLicenseSpecificationsForResourceAsync(ctx workflow.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput) *ListLicenseSpecificationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListLicenseSpecificationsForResource", input)
	return &ListLicenseSpecificationsForResourceFuture{Future: future}
}

func (a *stub) ListResourceInventory(ctx workflow.Context, input *licensemanager.ListResourceInventoryInput) (*licensemanager.ListResourceInventoryOutput, error) {
	var output licensemanager.ListResourceInventoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListResourceInventory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourceInventoryAsync(ctx workflow.Context, input *licensemanager.ListResourceInventoryInput) *ListResourceInventoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListResourceInventory", input)
	return &ListResourceInventoryFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *licensemanager.ListTagsForResourceInput) (*licensemanager.ListTagsForResourceOutput, error) {
	var output licensemanager.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *licensemanager.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUsageForLicenseConfiguration(ctx workflow.Context, input *licensemanager.ListUsageForLicenseConfigurationInput) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	var output licensemanager.ListUsageForLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListUsageForLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsageForLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.ListUsageForLicenseConfigurationInput) *ListUsageForLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-ListUsageForLicenseConfiguration", input)
	return &ListUsageForLicenseConfigurationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *licensemanager.TagResourceInput) (*licensemanager.TagResourceOutput, error) {
	var output licensemanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *licensemanager.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *licensemanager.UntagResourceInput) (*licensemanager.UntagResourceOutput, error) {
	var output licensemanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *licensemanager.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateLicenseConfiguration(ctx workflow.Context, input *licensemanager.UpdateLicenseConfigurationInput) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	var output licensemanager.UpdateLicenseConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLicenseConfigurationAsync(ctx workflow.Context, input *licensemanager.UpdateLicenseConfigurationInput) *UpdateLicenseConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseConfiguration", input)
	return &UpdateLicenseConfigurationFuture{Future: future}
}

func (a *stub) UpdateLicenseSpecificationsForResource(ctx workflow.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	var output licensemanager.UpdateLicenseSpecificationsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseSpecificationsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLicenseSpecificationsForResourceAsync(ctx workflow.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput) *UpdateLicenseSpecificationsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateLicenseSpecificationsForResource", input)
	return &UpdateLicenseSpecificationsForResourceFuture{Future: future}
}

func (a *stub) UpdateServiceSettings(ctx workflow.Context, input *licensemanager.UpdateServiceSettingsInput) (*licensemanager.UpdateServiceSettingsOutput, error) {
	var output licensemanager.UpdateServiceSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateServiceSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateServiceSettingsAsync(ctx workflow.Context, input *licensemanager.UpdateServiceSettingsInput) *UpdateServiceSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-licensemanager-UpdateServiceSettings", input)
	return &UpdateServiceSettingsFuture{Future: future}
}
