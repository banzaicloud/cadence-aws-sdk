// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lookoutforvisionstub

import (
	"github.com/aws/aws-sdk-go/service/lookoutforvision"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CreateDataset(ctx workflow.Context, input *lookoutforvision.CreateDatasetInput) (*lookoutforvision.CreateDatasetOutput, error)
	CreateDatasetAsync(ctx workflow.Context, input *lookoutforvision.CreateDatasetInput) *CreateDatasetFuture

	CreateModel(ctx workflow.Context, input *lookoutforvision.CreateModelInput) (*lookoutforvision.CreateModelOutput, error)
	CreateModelAsync(ctx workflow.Context, input *lookoutforvision.CreateModelInput) *CreateModelFuture

	CreateProject(ctx workflow.Context, input *lookoutforvision.CreateProjectInput) (*lookoutforvision.CreateProjectOutput, error)
	CreateProjectAsync(ctx workflow.Context, input *lookoutforvision.CreateProjectInput) *CreateProjectFuture

	DeleteDataset(ctx workflow.Context, input *lookoutforvision.DeleteDatasetInput) (*lookoutforvision.DeleteDatasetOutput, error)
	DeleteDatasetAsync(ctx workflow.Context, input *lookoutforvision.DeleteDatasetInput) *DeleteDatasetFuture

	DeleteModel(ctx workflow.Context, input *lookoutforvision.DeleteModelInput) (*lookoutforvision.DeleteModelOutput, error)
	DeleteModelAsync(ctx workflow.Context, input *lookoutforvision.DeleteModelInput) *DeleteModelFuture

	DeleteProject(ctx workflow.Context, input *lookoutforvision.DeleteProjectInput) (*lookoutforvision.DeleteProjectOutput, error)
	DeleteProjectAsync(ctx workflow.Context, input *lookoutforvision.DeleteProjectInput) *DeleteProjectFuture

	DescribeDataset(ctx workflow.Context, input *lookoutforvision.DescribeDatasetInput) (*lookoutforvision.DescribeDatasetOutput, error)
	DescribeDatasetAsync(ctx workflow.Context, input *lookoutforvision.DescribeDatasetInput) *DescribeDatasetFuture

	DescribeModel(ctx workflow.Context, input *lookoutforvision.DescribeModelInput) (*lookoutforvision.DescribeModelOutput, error)
	DescribeModelAsync(ctx workflow.Context, input *lookoutforvision.DescribeModelInput) *DescribeModelFuture

	DescribeProject(ctx workflow.Context, input *lookoutforvision.DescribeProjectInput) (*lookoutforvision.DescribeProjectOutput, error)
	DescribeProjectAsync(ctx workflow.Context, input *lookoutforvision.DescribeProjectInput) *DescribeProjectFuture

	DetectAnomalies(ctx workflow.Context, input *lookoutforvision.DetectAnomaliesInput) (*lookoutforvision.DetectAnomaliesOutput, error)
	DetectAnomaliesAsync(ctx workflow.Context, input *lookoutforvision.DetectAnomaliesInput) *DetectAnomaliesFuture

	ListDatasetEntries(ctx workflow.Context, input *lookoutforvision.ListDatasetEntriesInput) (*lookoutforvision.ListDatasetEntriesOutput, error)
	ListDatasetEntriesAsync(ctx workflow.Context, input *lookoutforvision.ListDatasetEntriesInput) *ListDatasetEntriesFuture

	ListModels(ctx workflow.Context, input *lookoutforvision.ListModelsInput) (*lookoutforvision.ListModelsOutput, error)
	ListModelsAsync(ctx workflow.Context, input *lookoutforvision.ListModelsInput) *ListModelsFuture

	ListProjects(ctx workflow.Context, input *lookoutforvision.ListProjectsInput) (*lookoutforvision.ListProjectsOutput, error)
	ListProjectsAsync(ctx workflow.Context, input *lookoutforvision.ListProjectsInput) *ListProjectsFuture

	StartModel(ctx workflow.Context, input *lookoutforvision.StartModelInput) (*lookoutforvision.StartModelOutput, error)
	StartModelAsync(ctx workflow.Context, input *lookoutforvision.StartModelInput) *StartModelFuture

	StopModel(ctx workflow.Context, input *lookoutforvision.StopModelInput) (*lookoutforvision.StopModelOutput, error)
	StopModelAsync(ctx workflow.Context, input *lookoutforvision.StopModelInput) *StopModelFuture

	UpdateDatasetEntries(ctx workflow.Context, input *lookoutforvision.UpdateDatasetEntriesInput) (*lookoutforvision.UpdateDatasetEntriesOutput, error)
	UpdateDatasetEntriesAsync(ctx workflow.Context, input *lookoutforvision.UpdateDatasetEntriesInput) *UpdateDatasetEntriesFuture
}

func NewClient() Client {
	return &stub{}
}
