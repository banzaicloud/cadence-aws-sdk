// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lakeformationstub

import (
	"github.com/aws/aws-sdk-go/service/lakeformation"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchGrantPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchRevokePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchRevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeResourceFuture) Get(ctx workflow.Context) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDataLakeSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEffectivePermissionsForPathFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEffectivePermissionsForPathFuture) Get(ctx workflow.Context) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GrantPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GrantPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPermissionsFuture) Get(ctx workflow.Context) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListResourcesFuture) Get(ctx workflow.Context) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutDataLakeSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutDataLakeSettingsFuture) Get(ctx workflow.Context) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterResourceFuture) Get(ctx workflow.Context) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokePermissionsFuture) Get(ctx workflow.Context) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateResourceFuture) Get(ctx workflow.Context) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGrantPermissions(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error) {
	var output lakeformation.BatchGrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-BatchGrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGrantPermissionsAsync(ctx workflow.Context, input *lakeformation.BatchGrantPermissionsInput) *BatchGrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-BatchGrantPermissions", input)
	return &BatchGrantPermissionsFuture{Future: future}
}

func (a *stub) BatchRevokePermissions(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error) {
	var output lakeformation.BatchRevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-BatchRevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchRevokePermissionsAsync(ctx workflow.Context, input *lakeformation.BatchRevokePermissionsInput) *BatchRevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-BatchRevokePermissions", input)
	return &BatchRevokePermissionsFuture{Future: future}
}

func (a *stub) DeregisterResource(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error) {
	var output lakeformation.DeregisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-DeregisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterResourceAsync(ctx workflow.Context, input *lakeformation.DeregisterResourceInput) *DeregisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-DeregisterResource", input)
	return &DeregisterResourceFuture{Future: future}
}

func (a *stub) DescribeResource(ctx workflow.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error) {
	var output lakeformation.DescribeResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-DescribeResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeResourceAsync(ctx workflow.Context, input *lakeformation.DescribeResourceInput) *DescribeResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-DescribeResource", input)
	return &DescribeResourceFuture{Future: future}
}

func (a *stub) GetDataLakeSettings(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error) {
	var output lakeformation.GetDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-GetDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.GetDataLakeSettingsInput) *GetDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-GetDataLakeSettings", input)
	return &GetDataLakeSettingsFuture{Future: future}
}

func (a *stub) GetEffectivePermissionsForPath(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	var output lakeformation.GetEffectivePermissionsForPathOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-GetEffectivePermissionsForPath", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEffectivePermissionsForPathAsync(ctx workflow.Context, input *lakeformation.GetEffectivePermissionsForPathInput) *GetEffectivePermissionsForPathFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-GetEffectivePermissionsForPath", input)
	return &GetEffectivePermissionsForPathFuture{Future: future}
}

func (a *stub) GrantPermissions(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error) {
	var output lakeformation.GrantPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-GrantPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GrantPermissionsAsync(ctx workflow.Context, input *lakeformation.GrantPermissionsInput) *GrantPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-GrantPermissions", input)
	return &GrantPermissionsFuture{Future: future}
}

func (a *stub) ListPermissions(ctx workflow.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error) {
	var output lakeformation.ListPermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-ListPermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPermissionsAsync(ctx workflow.Context, input *lakeformation.ListPermissionsInput) *ListPermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-ListPermissions", input)
	return &ListPermissionsFuture{Future: future}
}

func (a *stub) ListResources(ctx workflow.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error) {
	var output lakeformation.ListResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-ListResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListResourcesAsync(ctx workflow.Context, input *lakeformation.ListResourcesInput) *ListResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-ListResources", input)
	return &ListResourcesFuture{Future: future}
}

func (a *stub) PutDataLakeSettings(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error) {
	var output lakeformation.PutDataLakeSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-PutDataLakeSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutDataLakeSettingsAsync(ctx workflow.Context, input *lakeformation.PutDataLakeSettingsInput) *PutDataLakeSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-PutDataLakeSettings", input)
	return &PutDataLakeSettingsFuture{Future: future}
}

func (a *stub) RegisterResource(ctx workflow.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error) {
	var output lakeformation.RegisterResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-RegisterResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterResourceAsync(ctx workflow.Context, input *lakeformation.RegisterResourceInput) *RegisterResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-RegisterResource", input)
	return &RegisterResourceFuture{Future: future}
}

func (a *stub) RevokePermissions(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error) {
	var output lakeformation.RevokePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-RevokePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokePermissionsAsync(ctx workflow.Context, input *lakeformation.RevokePermissionsInput) *RevokePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-RevokePermissions", input)
	return &RevokePermissionsFuture{Future: future}
}

func (a *stub) UpdateResource(ctx workflow.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error) {
	var output lakeformation.UpdateResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-lakeformation-UpdateResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateResourceAsync(ctx workflow.Context, input *lakeformation.UpdateResourceInput) *UpdateResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-lakeformation-UpdateResource", input)
	return &UpdateResourceFuture{Future: future}
}
