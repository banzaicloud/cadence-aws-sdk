// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package firehosestub

import (
	"github.com/aws/aws-sdk-go/service/firehose"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.CreateDeliveryStreamOutput, error) {
	var output firehose.CreateDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.DeleteDeliveryStreamOutput, error) {
	var output firehose.DeleteDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.DescribeDeliveryStreamOutput, error) {
	var output firehose.DescribeDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDeliveryStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDeliveryStreamsFuture) Get(ctx workflow.Context) (*firehose.ListDeliveryStreamsOutput, error) {
	var output firehose.ListDeliveryStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	var output firehose.ListTagsForDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRecordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRecordFuture) Get(ctx workflow.Context) (*firehose.PutRecordOutput, error) {
	var output firehose.PutRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutRecordBatchFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutRecordBatchFuture) Get(ctx workflow.Context) (*firehose.PutRecordBatchOutput, error) {
	var output firehose.PutRecordBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDeliveryStreamEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDeliveryStreamEncryptionFuture) Get(ctx workflow.Context) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	var output firehose.StartDeliveryStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDeliveryStreamEncryptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDeliveryStreamEncryptionFuture) Get(ctx workflow.Context) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	var output firehose.StopDeliveryStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.TagDeliveryStreamOutput, error) {
	var output firehose.TagDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagDeliveryStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.UntagDeliveryStreamOutput, error) {
	var output firehose.UntagDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDestinationFuture) Get(ctx workflow.Context) (*firehose.UpdateDestinationOutput, error) {
	var output firehose.UpdateDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeliveryStream(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) (*firehose.CreateDeliveryStreamOutput, error) {
	var output firehose.CreateDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-CreateDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeliveryStreamAsync(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) *CreateDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-CreateDeliveryStream", input)
	return &CreateDeliveryStreamFuture{Future: future}
}

func (a *stub) DeleteDeliveryStream(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) (*firehose.DeleteDeliveryStreamOutput, error) {
	var output firehose.DeleteDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-DeleteDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeliveryStreamAsync(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) *DeleteDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-DeleteDeliveryStream", input)
	return &DeleteDeliveryStreamFuture{Future: future}
}

func (a *stub) DescribeDeliveryStream(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) (*firehose.DescribeDeliveryStreamOutput, error) {
	var output firehose.DescribeDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-DescribeDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDeliveryStreamAsync(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) *DescribeDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-DescribeDeliveryStream", input)
	return &DescribeDeliveryStreamFuture{Future: future}
}

func (a *stub) ListDeliveryStreams(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) (*firehose.ListDeliveryStreamsOutput, error) {
	var output firehose.ListDeliveryStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-ListDeliveryStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDeliveryStreamsAsync(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) *ListDeliveryStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-ListDeliveryStreams", input)
	return &ListDeliveryStreamsFuture{Future: future}
}

func (a *stub) ListTagsForDeliveryStream(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	var output firehose.ListTagsForDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-ListTagsForDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForDeliveryStreamAsync(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) *ListTagsForDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-ListTagsForDeliveryStream", input)
	return &ListTagsForDeliveryStreamFuture{Future: future}
}

func (a *stub) PutRecord(ctx workflow.Context, input *firehose.PutRecordInput) (*firehose.PutRecordOutput, error) {
	var output firehose.PutRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-PutRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRecordAsync(ctx workflow.Context, input *firehose.PutRecordInput) *PutRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-PutRecord", input)
	return &PutRecordFuture{Future: future}
}

func (a *stub) PutRecordBatch(ctx workflow.Context, input *firehose.PutRecordBatchInput) (*firehose.PutRecordBatchOutput, error) {
	var output firehose.PutRecordBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-PutRecordBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutRecordBatchAsync(ctx workflow.Context, input *firehose.PutRecordBatchInput) *PutRecordBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-PutRecordBatch", input)
	return &PutRecordBatchFuture{Future: future}
}

func (a *stub) StartDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	var output firehose.StartDeliveryStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-StartDeliveryStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) *StartDeliveryStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-StartDeliveryStreamEncryption", input)
	return &StartDeliveryStreamEncryptionFuture{Future: future}
}

func (a *stub) StopDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	var output firehose.StopDeliveryStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-StopDeliveryStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) *StopDeliveryStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-StopDeliveryStreamEncryption", input)
	return &StopDeliveryStreamEncryptionFuture{Future: future}
}

func (a *stub) TagDeliveryStream(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) (*firehose.TagDeliveryStreamOutput, error) {
	var output firehose.TagDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-TagDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagDeliveryStreamAsync(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) *TagDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-TagDeliveryStream", input)
	return &TagDeliveryStreamFuture{Future: future}
}

func (a *stub) UntagDeliveryStream(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) (*firehose.UntagDeliveryStreamOutput, error) {
	var output firehose.UntagDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-UntagDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagDeliveryStreamAsync(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) *UntagDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-UntagDeliveryStream", input)
	return &UntagDeliveryStreamFuture{Future: future}
}

func (a *stub) UpdateDestination(ctx workflow.Context, input *firehose.UpdateDestinationInput) (*firehose.UpdateDestinationOutput, error) {
	var output firehose.UpdateDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-firehose-UpdateDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDestinationAsync(ctx workflow.Context, input *firehose.UpdateDestinationInput) *UpdateDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-firehose-UpdateDestination", input)
	return &UpdateDestinationFuture{Future: future}
}
