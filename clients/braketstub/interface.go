// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package braketstub

import (
	"github.com/aws/aws-sdk-go/service/braket"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	CancelQuantumTask(ctx workflow.Context, input *braket.CancelQuantumTaskInput) (*braket.CancelQuantumTaskOutput, error)
	CancelQuantumTaskAsync(ctx workflow.Context, input *braket.CancelQuantumTaskInput) *CancelQuantumTaskFuture

	CreateQuantumTask(ctx workflow.Context, input *braket.CreateQuantumTaskInput) (*braket.CreateQuantumTaskOutput, error)
	CreateQuantumTaskAsync(ctx workflow.Context, input *braket.CreateQuantumTaskInput) *CreateQuantumTaskFuture

	GetDevice(ctx workflow.Context, input *braket.GetDeviceInput) (*braket.GetDeviceOutput, error)
	GetDeviceAsync(ctx workflow.Context, input *braket.GetDeviceInput) *GetDeviceFuture

	GetQuantumTask(ctx workflow.Context, input *braket.GetQuantumTaskInput) (*braket.GetQuantumTaskOutput, error)
	GetQuantumTaskAsync(ctx workflow.Context, input *braket.GetQuantumTaskInput) *GetQuantumTaskFuture

	ListTagsForResource(ctx workflow.Context, input *braket.ListTagsForResourceInput) (*braket.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *braket.ListTagsForResourceInput) *ListTagsForResourceFuture

	SearchDevices(ctx workflow.Context, input *braket.SearchDevicesInput) (*braket.SearchDevicesOutput, error)
	SearchDevicesAsync(ctx workflow.Context, input *braket.SearchDevicesInput) *SearchDevicesFuture

	SearchQuantumTasks(ctx workflow.Context, input *braket.SearchQuantumTasksInput) (*braket.SearchQuantumTasksOutput, error)
	SearchQuantumTasksAsync(ctx workflow.Context, input *braket.SearchQuantumTasksInput) *SearchQuantumTasksFuture

	TagResource(ctx workflow.Context, input *braket.TagResourceInput) (*braket.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *braket.TagResourceInput) *TagResourceFuture

	UntagResource(ctx workflow.Context, input *braket.UntagResourceInput) (*braket.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *braket.UntagResourceInput) *UntagResourceFuture
}

func NewClient() Client {
	return &stub{}
}
