// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package healthlakestub

import (
	"github.com/aws/aws-sdk-go/service/healthlake"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateFHIRDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFHIRDatastoreFuture) Get(ctx workflow.Context) (*healthlake.CreateFHIRDatastoreOutput, error) {
	var output healthlake.CreateFHIRDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFHIRDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFHIRDatastoreFuture) Get(ctx workflow.Context) (*healthlake.DeleteFHIRDatastoreOutput, error) {
	var output healthlake.DeleteFHIRDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFHIRDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFHIRDatastoreFuture) Get(ctx workflow.Context) (*healthlake.DescribeFHIRDatastoreOutput, error) {
	var output healthlake.DescribeFHIRDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFHIRExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFHIRExportJobFuture) Get(ctx workflow.Context) (*healthlake.DescribeFHIRExportJobOutput, error) {
	var output healthlake.DescribeFHIRExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFHIRImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFHIRImportJobFuture) Get(ctx workflow.Context) (*healthlake.DescribeFHIRImportJobOutput, error) {
	var output healthlake.DescribeFHIRImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFHIRDatastoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFHIRDatastoresFuture) Get(ctx workflow.Context) (*healthlake.ListFHIRDatastoresOutput, error) {
	var output healthlake.ListFHIRDatastoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFHIRExportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFHIRExportJobFuture) Get(ctx workflow.Context) (*healthlake.StartFHIRExportJobOutput, error) {
	var output healthlake.StartFHIRExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartFHIRImportJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartFHIRImportJobFuture) Get(ctx workflow.Context) (*healthlake.StartFHIRImportJobOutput, error) {
	var output healthlake.StartFHIRImportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFHIRDatastore(ctx workflow.Context, input *healthlake.CreateFHIRDatastoreInput) (*healthlake.CreateFHIRDatastoreOutput, error) {
	var output healthlake.CreateFHIRDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-CreateFHIRDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFHIRDatastoreAsync(ctx workflow.Context, input *healthlake.CreateFHIRDatastoreInput) *CreateFHIRDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-CreateFHIRDatastore", input)
	return &CreateFHIRDatastoreFuture{Future: future}
}

func (a *stub) DeleteFHIRDatastore(ctx workflow.Context, input *healthlake.DeleteFHIRDatastoreInput) (*healthlake.DeleteFHIRDatastoreOutput, error) {
	var output healthlake.DeleteFHIRDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-DeleteFHIRDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFHIRDatastoreAsync(ctx workflow.Context, input *healthlake.DeleteFHIRDatastoreInput) *DeleteFHIRDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-DeleteFHIRDatastore", input)
	return &DeleteFHIRDatastoreFuture{Future: future}
}

func (a *stub) DescribeFHIRDatastore(ctx workflow.Context, input *healthlake.DescribeFHIRDatastoreInput) (*healthlake.DescribeFHIRDatastoreOutput, error) {
	var output healthlake.DescribeFHIRDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFHIRDatastoreAsync(ctx workflow.Context, input *healthlake.DescribeFHIRDatastoreInput) *DescribeFHIRDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRDatastore", input)
	return &DescribeFHIRDatastoreFuture{Future: future}
}

func (a *stub) DescribeFHIRExportJob(ctx workflow.Context, input *healthlake.DescribeFHIRExportJobInput) (*healthlake.DescribeFHIRExportJobOutput, error) {
	var output healthlake.DescribeFHIRExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFHIRExportJobAsync(ctx workflow.Context, input *healthlake.DescribeFHIRExportJobInput) *DescribeFHIRExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRExportJob", input)
	return &DescribeFHIRExportJobFuture{Future: future}
}

func (a *stub) DescribeFHIRImportJob(ctx workflow.Context, input *healthlake.DescribeFHIRImportJobInput) (*healthlake.DescribeFHIRImportJobOutput, error) {
	var output healthlake.DescribeFHIRImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFHIRImportJobAsync(ctx workflow.Context, input *healthlake.DescribeFHIRImportJobInput) *DescribeFHIRImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-DescribeFHIRImportJob", input)
	return &DescribeFHIRImportJobFuture{Future: future}
}

func (a *stub) ListFHIRDatastores(ctx workflow.Context, input *healthlake.ListFHIRDatastoresInput) (*healthlake.ListFHIRDatastoresOutput, error) {
	var output healthlake.ListFHIRDatastoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-ListFHIRDatastores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFHIRDatastoresAsync(ctx workflow.Context, input *healthlake.ListFHIRDatastoresInput) *ListFHIRDatastoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-ListFHIRDatastores", input)
	return &ListFHIRDatastoresFuture{Future: future}
}

func (a *stub) StartFHIRExportJob(ctx workflow.Context, input *healthlake.StartFHIRExportJobInput) (*healthlake.StartFHIRExportJobOutput, error) {
	var output healthlake.StartFHIRExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-StartFHIRExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFHIRExportJobAsync(ctx workflow.Context, input *healthlake.StartFHIRExportJobInput) *StartFHIRExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-StartFHIRExportJob", input)
	return &StartFHIRExportJobFuture{Future: future}
}

func (a *stub) StartFHIRImportJob(ctx workflow.Context, input *healthlake.StartFHIRImportJobInput) (*healthlake.StartFHIRImportJobOutput, error) {
	var output healthlake.StartFHIRImportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-healthlake-StartFHIRImportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartFHIRImportJobAsync(ctx workflow.Context, input *healthlake.StartFHIRImportJobInput) *StartFHIRImportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-healthlake-StartFHIRImportJob", input)
	return &StartFHIRImportJobFuture{Future: future}
}
