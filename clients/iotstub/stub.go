// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotstub

import (
	"github.com/aws/aws-sdk-go/service/iot"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type IoTAcceptCertificateTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAcceptCertificateTransferFuture) Get(ctx workflow.Context) (*iot.AcceptCertificateTransferOutput, error) {
	var output iot.AcceptCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAddThingToBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAddThingToBillingGroupFuture) Get(ctx workflow.Context) (*iot.AddThingToBillingGroupOutput, error) {
	var output iot.AddThingToBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAddThingToThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAddThingToThingGroupFuture) Get(ctx workflow.Context) (*iot.AddThingToThingGroupOutput, error) {
	var output iot.AddThingToThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAssociateTargetsWithJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAssociateTargetsWithJobFuture) Get(ctx workflow.Context) (*iot.AssociateTargetsWithJobOutput, error) {
	var output iot.AssociateTargetsWithJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAttachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAttachPolicyFuture) Get(ctx workflow.Context) (*iot.AttachPolicyOutput, error) {
	var output iot.AttachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAttachPrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAttachPrincipalPolicyFuture) Get(ctx workflow.Context) (*iot.AttachPrincipalPolicyOutput, error) {
	var output iot.AttachPrincipalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAttachSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAttachSecurityProfileFuture) Get(ctx workflow.Context) (*iot.AttachSecurityProfileOutput, error) {
	var output iot.AttachSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAttachThingPrincipalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAttachThingPrincipalFuture) Get(ctx workflow.Context) (*iot.AttachThingPrincipalOutput, error) {
	var output iot.AttachThingPrincipalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCancelAuditMitigationActionsTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCancelAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	var output iot.CancelAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCancelAuditTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCancelAuditTaskFuture) Get(ctx workflow.Context) (*iot.CancelAuditTaskOutput, error) {
	var output iot.CancelAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCancelCertificateTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCancelCertificateTransferFuture) Get(ctx workflow.Context) (*iot.CancelCertificateTransferOutput, error) {
	var output iot.CancelCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCancelJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCancelJobFuture) Get(ctx workflow.Context) (*iot.CancelJobOutput, error) {
	var output iot.CancelJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCancelJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCancelJobExecutionFuture) Get(ctx workflow.Context) (*iot.CancelJobExecutionOutput, error) {
	var output iot.CancelJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTClearDefaultAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTClearDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.ClearDefaultAuthorizerOutput, error) {
	var output iot.ClearDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTConfirmTopicRuleDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTConfirmTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	var output iot.ConfirmTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateAuditSuppressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.CreateAuditSuppressionOutput, error) {
	var output iot.CreateAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateAuthorizerFuture) Get(ctx workflow.Context) (*iot.CreateAuthorizerOutput, error) {
	var output iot.CreateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateBillingGroupFuture) Get(ctx workflow.Context) (*iot.CreateBillingGroupOutput, error) {
	var output iot.CreateBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateCertificateFromCsrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateCertificateFromCsrFuture) Get(ctx workflow.Context) (*iot.CreateCertificateFromCsrOutput, error) {
	var output iot.CreateCertificateFromCsrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateDimensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateDimensionFuture) Get(ctx workflow.Context) (*iot.CreateDimensionOutput, error) {
	var output iot.CreateDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateDomainConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.CreateDomainConfigurationOutput, error) {
	var output iot.CreateDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateDynamicThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.CreateDynamicThingGroupOutput, error) {
	var output iot.CreateDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateJobFuture) Get(ctx workflow.Context) (*iot.CreateJobOutput, error) {
	var output iot.CreateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateKeysAndCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateKeysAndCertificateFuture) Get(ctx workflow.Context) (*iot.CreateKeysAndCertificateOutput, error) {
	var output iot.CreateKeysAndCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateMitigationActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateMitigationActionFuture) Get(ctx workflow.Context) (*iot.CreateMitigationActionOutput, error) {
	var output iot.CreateMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateOTAUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateOTAUpdateFuture) Get(ctx workflow.Context) (*iot.CreateOTAUpdateOutput, error) {
	var output iot.CreateOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreatePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreatePolicyFuture) Get(ctx workflow.Context) (*iot.CreatePolicyOutput, error) {
	var output iot.CreatePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreatePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreatePolicyVersionFuture) Get(ctx workflow.Context) (*iot.CreatePolicyVersionOutput, error) {
	var output iot.CreatePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateProvisioningClaimFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateProvisioningClaimFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningClaimOutput, error) {
	var output iot.CreateProvisioningClaimOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateProvisioningTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningTemplateOutput, error) {
	var output iot.CreateProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateProvisioningTemplateVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	var output iot.CreateProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateRoleAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateRoleAliasFuture) Get(ctx workflow.Context) (*iot.CreateRoleAliasOutput, error) {
	var output iot.CreateRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateScheduledAuditFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateScheduledAuditFuture) Get(ctx workflow.Context) (*iot.CreateScheduledAuditOutput, error) {
	var output iot.CreateScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateSecurityProfileFuture) Get(ctx workflow.Context) (*iot.CreateSecurityProfileOutput, error) {
	var output iot.CreateSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateStreamFuture) Get(ctx workflow.Context) (*iot.CreateStreamOutput, error) {
	var output iot.CreateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateThingFuture) Get(ctx workflow.Context) (*iot.CreateThingOutput, error) {
	var output iot.CreateThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateThingGroupFuture) Get(ctx workflow.Context) (*iot.CreateThingGroupOutput, error) {
	var output iot.CreateThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateThingTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateThingTypeFuture) Get(ctx workflow.Context) (*iot.CreateThingTypeOutput, error) {
	var output iot.CreateThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateTopicRuleFuture) Get(ctx workflow.Context) (*iot.CreateTopicRuleOutput, error) {
	var output iot.CreateTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTCreateTopicRuleDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTCreateTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.CreateTopicRuleDestinationOutput, error) {
	var output iot.CreateTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteAccountAuditConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	var output iot.DeleteAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteAuditSuppressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.DeleteAuditSuppressionOutput, error) {
	var output iot.DeleteAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteAuthorizerFuture) Get(ctx workflow.Context) (*iot.DeleteAuthorizerOutput, error) {
	var output iot.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteBillingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteBillingGroupOutput, error) {
	var output iot.DeleteBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteCACertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteCACertificateFuture) Get(ctx workflow.Context) (*iot.DeleteCACertificateOutput, error) {
	var output iot.DeleteCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteCertificateFuture) Get(ctx workflow.Context) (*iot.DeleteCertificateOutput, error) {
	var output iot.DeleteCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteDimensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteDimensionFuture) Get(ctx workflow.Context) (*iot.DeleteDimensionOutput, error) {
	var output iot.DeleteDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteDomainConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.DeleteDomainConfigurationOutput, error) {
	var output iot.DeleteDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteDynamicThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteDynamicThingGroupOutput, error) {
	var output iot.DeleteDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteJobFuture) Get(ctx workflow.Context) (*iot.DeleteJobOutput, error) {
	var output iot.DeleteJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteJobExecutionFuture) Get(ctx workflow.Context) (*iot.DeleteJobExecutionOutput, error) {
	var output iot.DeleteJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteMitigationActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteMitigationActionFuture) Get(ctx workflow.Context) (*iot.DeleteMitigationActionOutput, error) {
	var output iot.DeleteMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteOTAUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteOTAUpdateFuture) Get(ctx workflow.Context) (*iot.DeleteOTAUpdateOutput, error) {
	var output iot.DeleteOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeletePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeletePolicyFuture) Get(ctx workflow.Context) (*iot.DeletePolicyOutput, error) {
	var output iot.DeletePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeletePolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeletePolicyVersionFuture) Get(ctx workflow.Context) (*iot.DeletePolicyVersionOutput, error) {
	var output iot.DeletePolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteProvisioningTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.DeleteProvisioningTemplateOutput, error) {
	var output iot.DeleteProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteProvisioningTemplateVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	var output iot.DeleteProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteRegistrationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteRegistrationCodeFuture) Get(ctx workflow.Context) (*iot.DeleteRegistrationCodeOutput, error) {
	var output iot.DeleteRegistrationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteRoleAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteRoleAliasFuture) Get(ctx workflow.Context) (*iot.DeleteRoleAliasOutput, error) {
	var output iot.DeleteRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteScheduledAuditFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteScheduledAuditFuture) Get(ctx workflow.Context) (*iot.DeleteScheduledAuditOutput, error) {
	var output iot.DeleteScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DeleteSecurityProfileOutput, error) {
	var output iot.DeleteSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteStreamFuture) Get(ctx workflow.Context) (*iot.DeleteStreamOutput, error) {
	var output iot.DeleteStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteThingFuture) Get(ctx workflow.Context) (*iot.DeleteThingOutput, error) {
	var output iot.DeleteThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteThingGroupFuture) Get(ctx workflow.Context) (*iot.DeleteThingGroupOutput, error) {
	var output iot.DeleteThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteThingTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteThingTypeFuture) Get(ctx workflow.Context) (*iot.DeleteThingTypeOutput, error) {
	var output iot.DeleteThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteTopicRuleFuture) Get(ctx workflow.Context) (*iot.DeleteTopicRuleOutput, error) {
	var output iot.DeleteTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteTopicRuleDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.DeleteTopicRuleDestinationOutput, error) {
	var output iot.DeleteTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeleteV2LoggingLevelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeleteV2LoggingLevelFuture) Get(ctx workflow.Context) (*iot.DeleteV2LoggingLevelOutput, error) {
	var output iot.DeleteV2LoggingLevelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDeprecateThingTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDeprecateThingTypeFuture) Get(ctx workflow.Context) (*iot.DeprecateThingTypeOutput, error) {
	var output iot.DeprecateThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAccountAuditConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	var output iot.DescribeAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAuditFindingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAuditFindingFuture) Get(ctx workflow.Context) (*iot.DescribeAuditFindingOutput, error) {
	var output iot.DescribeAuditFindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAuditMitigationActionsTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	var output iot.DescribeAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAuditSuppressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.DescribeAuditSuppressionOutput, error) {
	var output iot.DescribeAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAuditTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAuditTaskFuture) Get(ctx workflow.Context) (*iot.DescribeAuditTaskOutput, error) {
	var output iot.DescribeAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeAuthorizerFuture) Get(ctx workflow.Context) (*iot.DescribeAuthorizerOutput, error) {
	var output iot.DescribeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeBillingGroupFuture) Get(ctx workflow.Context) (*iot.DescribeBillingGroupOutput, error) {
	var output iot.DescribeBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeCACertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeCACertificateFuture) Get(ctx workflow.Context) (*iot.DescribeCACertificateOutput, error) {
	var output iot.DescribeCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeCertificateFuture) Get(ctx workflow.Context) (*iot.DescribeCertificateOutput, error) {
	var output iot.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeDefaultAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.DescribeDefaultAuthorizerOutput, error) {
	var output iot.DescribeDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeDimensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeDimensionFuture) Get(ctx workflow.Context) (*iot.DescribeDimensionOutput, error) {
	var output iot.DescribeDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeDomainConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.DescribeDomainConfigurationOutput, error) {
	var output iot.DescribeDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeEndpointFuture) Get(ctx workflow.Context) (*iot.DescribeEndpointOutput, error) {
	var output iot.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeEventConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeEventConfigurationsFuture) Get(ctx workflow.Context) (*iot.DescribeEventConfigurationsOutput, error) {
	var output iot.DescribeEventConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeIndexFuture) Get(ctx workflow.Context) (*iot.DescribeIndexOutput, error) {
	var output iot.DescribeIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeJobFuture) Get(ctx workflow.Context) (*iot.DescribeJobOutput, error) {
	var output iot.DescribeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeJobExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeJobExecutionFuture) Get(ctx workflow.Context) (*iot.DescribeJobExecutionOutput, error) {
	var output iot.DescribeJobExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeMitigationActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeMitigationActionFuture) Get(ctx workflow.Context) (*iot.DescribeMitigationActionOutput, error) {
	var output iot.DescribeMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeProvisioningTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.DescribeProvisioningTemplateOutput, error) {
	var output iot.DescribeProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeProvisioningTemplateVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeProvisioningTemplateVersionFuture) Get(ctx workflow.Context) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	var output iot.DescribeProvisioningTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeRoleAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeRoleAliasFuture) Get(ctx workflow.Context) (*iot.DescribeRoleAliasOutput, error) {
	var output iot.DescribeRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeScheduledAuditFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeScheduledAuditFuture) Get(ctx workflow.Context) (*iot.DescribeScheduledAuditOutput, error) {
	var output iot.DescribeScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DescribeSecurityProfileOutput, error) {
	var output iot.DescribeSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeStreamFuture) Get(ctx workflow.Context) (*iot.DescribeStreamOutput, error) {
	var output iot.DescribeStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeThingFuture) Get(ctx workflow.Context) (*iot.DescribeThingOutput, error) {
	var output iot.DescribeThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeThingGroupFuture) Get(ctx workflow.Context) (*iot.DescribeThingGroupOutput, error) {
	var output iot.DescribeThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeThingRegistrationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.DescribeThingRegistrationTaskOutput, error) {
	var output iot.DescribeThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDescribeThingTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDescribeThingTypeFuture) Get(ctx workflow.Context) (*iot.DescribeThingTypeOutput, error) {
	var output iot.DescribeThingTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDetachPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDetachPolicyFuture) Get(ctx workflow.Context) (*iot.DetachPolicyOutput, error) {
	var output iot.DetachPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDetachPrincipalPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDetachPrincipalPolicyFuture) Get(ctx workflow.Context) (*iot.DetachPrincipalPolicyOutput, error) {
	var output iot.DetachPrincipalPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDetachSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDetachSecurityProfileFuture) Get(ctx workflow.Context) (*iot.DetachSecurityProfileOutput, error) {
	var output iot.DetachSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDetachThingPrincipalFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDetachThingPrincipalFuture) Get(ctx workflow.Context) (*iot.DetachThingPrincipalOutput, error) {
	var output iot.DetachThingPrincipalOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTDisableTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTDisableTopicRuleFuture) Get(ctx workflow.Context) (*iot.DisableTopicRuleOutput, error) {
	var output iot.DisableTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTEnableTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTEnableTopicRuleFuture) Get(ctx workflow.Context) (*iot.EnableTopicRuleOutput, error) {
	var output iot.EnableTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetCardinalityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetCardinalityFuture) Get(ctx workflow.Context) (*iot.GetCardinalityOutput, error) {
	var output iot.GetCardinalityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetEffectivePoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetEffectivePoliciesFuture) Get(ctx workflow.Context) (*iot.GetEffectivePoliciesOutput, error) {
	var output iot.GetEffectivePoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetIndexingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetIndexingConfigurationFuture) Get(ctx workflow.Context) (*iot.GetIndexingConfigurationOutput, error) {
	var output iot.GetIndexingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetJobDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetJobDocumentFuture) Get(ctx workflow.Context) (*iot.GetJobDocumentOutput, error) {
	var output iot.GetJobDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetLoggingOptionsFuture) Get(ctx workflow.Context) (*iot.GetLoggingOptionsOutput, error) {
	var output iot.GetLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetOTAUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetOTAUpdateFuture) Get(ctx workflow.Context) (*iot.GetOTAUpdateOutput, error) {
	var output iot.GetOTAUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetPercentilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetPercentilesFuture) Get(ctx workflow.Context) (*iot.GetPercentilesOutput, error) {
	var output iot.GetPercentilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetPolicyFuture) Get(ctx workflow.Context) (*iot.GetPolicyOutput, error) {
	var output iot.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetPolicyVersionFuture) Get(ctx workflow.Context) (*iot.GetPolicyVersionOutput, error) {
	var output iot.GetPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetRegistrationCodeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetRegistrationCodeFuture) Get(ctx workflow.Context) (*iot.GetRegistrationCodeOutput, error) {
	var output iot.GetRegistrationCodeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetStatisticsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetStatisticsFuture) Get(ctx workflow.Context) (*iot.GetStatisticsOutput, error) {
	var output iot.GetStatisticsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetTopicRuleFuture) Get(ctx workflow.Context) (*iot.GetTopicRuleOutput, error) {
	var output iot.GetTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetTopicRuleDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.GetTopicRuleDestinationOutput, error) {
	var output iot.GetTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTGetV2LoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTGetV2LoggingOptionsFuture) Get(ctx workflow.Context) (*iot.GetV2LoggingOptionsOutput, error) {
	var output iot.GetV2LoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListActiveViolationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListActiveViolationsFuture) Get(ctx workflow.Context) (*iot.ListActiveViolationsOutput, error) {
	var output iot.ListActiveViolationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAttachedPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAttachedPoliciesFuture) Get(ctx workflow.Context) (*iot.ListAttachedPoliciesOutput, error) {
	var output iot.ListAttachedPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuditFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuditFindingsFuture) Get(ctx workflow.Context) (*iot.ListAuditFindingsOutput, error) {
	var output iot.ListAuditFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuditMitigationActionsExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuditMitigationActionsExecutionsFuture) Get(ctx workflow.Context) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	var output iot.ListAuditMitigationActionsExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuditMitigationActionsTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuditMitigationActionsTasksFuture) Get(ctx workflow.Context) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	var output iot.ListAuditMitigationActionsTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuditSuppressionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuditSuppressionsFuture) Get(ctx workflow.Context) (*iot.ListAuditSuppressionsOutput, error) {
	var output iot.ListAuditSuppressionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuditTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuditTasksFuture) Get(ctx workflow.Context) (*iot.ListAuditTasksOutput, error) {
	var output iot.ListAuditTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListAuthorizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListAuthorizersFuture) Get(ctx workflow.Context) (*iot.ListAuthorizersOutput, error) {
	var output iot.ListAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListBillingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListBillingGroupsFuture) Get(ctx workflow.Context) (*iot.ListBillingGroupsOutput, error) {
	var output iot.ListBillingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListCACertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListCACertificatesFuture) Get(ctx workflow.Context) (*iot.ListCACertificatesOutput, error) {
	var output iot.ListCACertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListCertificatesFuture) Get(ctx workflow.Context) (*iot.ListCertificatesOutput, error) {
	var output iot.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListCertificatesByCAFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListCertificatesByCAFuture) Get(ctx workflow.Context) (*iot.ListCertificatesByCAOutput, error) {
	var output iot.ListCertificatesByCAOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListDimensionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListDimensionsFuture) Get(ctx workflow.Context) (*iot.ListDimensionsOutput, error) {
	var output iot.ListDimensionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListDomainConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListDomainConfigurationsFuture) Get(ctx workflow.Context) (*iot.ListDomainConfigurationsOutput, error) {
	var output iot.ListDomainConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListIndicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListIndicesFuture) Get(ctx workflow.Context) (*iot.ListIndicesOutput, error) {
	var output iot.ListIndicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListJobExecutionsForJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListJobExecutionsForJobFuture) Get(ctx workflow.Context) (*iot.ListJobExecutionsForJobOutput, error) {
	var output iot.ListJobExecutionsForJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListJobExecutionsForThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListJobExecutionsForThingFuture) Get(ctx workflow.Context) (*iot.ListJobExecutionsForThingOutput, error) {
	var output iot.ListJobExecutionsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListJobsFuture) Get(ctx workflow.Context) (*iot.ListJobsOutput, error) {
	var output iot.ListJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListMitigationActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListMitigationActionsFuture) Get(ctx workflow.Context) (*iot.ListMitigationActionsOutput, error) {
	var output iot.ListMitigationActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListOTAUpdatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListOTAUpdatesFuture) Get(ctx workflow.Context) (*iot.ListOTAUpdatesOutput, error) {
	var output iot.ListOTAUpdatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListOutgoingCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListOutgoingCertificatesFuture) Get(ctx workflow.Context) (*iot.ListOutgoingCertificatesOutput, error) {
	var output iot.ListOutgoingCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListPoliciesFuture) Get(ctx workflow.Context) (*iot.ListPoliciesOutput, error) {
	var output iot.ListPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListPolicyPrincipalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListPolicyPrincipalsFuture) Get(ctx workflow.Context) (*iot.ListPolicyPrincipalsOutput, error) {
	var output iot.ListPolicyPrincipalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListPolicyVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListPolicyVersionsFuture) Get(ctx workflow.Context) (*iot.ListPolicyVersionsOutput, error) {
	var output iot.ListPolicyVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListPrincipalPoliciesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListPrincipalPoliciesFuture) Get(ctx workflow.Context) (*iot.ListPrincipalPoliciesOutput, error) {
	var output iot.ListPrincipalPoliciesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListPrincipalThingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListPrincipalThingsFuture) Get(ctx workflow.Context) (*iot.ListPrincipalThingsOutput, error) {
	var output iot.ListPrincipalThingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListProvisioningTemplateVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListProvisioningTemplateVersionsFuture) Get(ctx workflow.Context) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	var output iot.ListProvisioningTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListProvisioningTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListProvisioningTemplatesFuture) Get(ctx workflow.Context) (*iot.ListProvisioningTemplatesOutput, error) {
	var output iot.ListProvisioningTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListRoleAliasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListRoleAliasesFuture) Get(ctx workflow.Context) (*iot.ListRoleAliasesOutput, error) {
	var output iot.ListRoleAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListScheduledAuditsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListScheduledAuditsFuture) Get(ctx workflow.Context) (*iot.ListScheduledAuditsOutput, error) {
	var output iot.ListScheduledAuditsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListSecurityProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListSecurityProfilesFuture) Get(ctx workflow.Context) (*iot.ListSecurityProfilesOutput, error) {
	var output iot.ListSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListSecurityProfilesForTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListSecurityProfilesForTargetFuture) Get(ctx workflow.Context) (*iot.ListSecurityProfilesForTargetOutput, error) {
	var output iot.ListSecurityProfilesForTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListStreamsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListStreamsFuture) Get(ctx workflow.Context) (*iot.ListStreamsOutput, error) {
	var output iot.ListStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListTagsForResourceFuture) Get(ctx workflow.Context) (*iot.ListTagsForResourceOutput, error) {
	var output iot.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListTargetsForPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListTargetsForPolicyFuture) Get(ctx workflow.Context) (*iot.ListTargetsForPolicyOutput, error) {
	var output iot.ListTargetsForPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListTargetsForSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListTargetsForSecurityProfileFuture) Get(ctx workflow.Context) (*iot.ListTargetsForSecurityProfileOutput, error) {
	var output iot.ListTargetsForSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingGroupsFuture) Get(ctx workflow.Context) (*iot.ListThingGroupsOutput, error) {
	var output iot.ListThingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingGroupsForThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingGroupsForThingFuture) Get(ctx workflow.Context) (*iot.ListThingGroupsForThingOutput, error) {
	var output iot.ListThingGroupsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingPrincipalsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingPrincipalsFuture) Get(ctx workflow.Context) (*iot.ListThingPrincipalsOutput, error) {
	var output iot.ListThingPrincipalsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingRegistrationTaskReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingRegistrationTaskReportsFuture) Get(ctx workflow.Context) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	var output iot.ListThingRegistrationTaskReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingRegistrationTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingRegistrationTasksFuture) Get(ctx workflow.Context) (*iot.ListThingRegistrationTasksOutput, error) {
	var output iot.ListThingRegistrationTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingTypesFuture) Get(ctx workflow.Context) (*iot.ListThingTypesOutput, error) {
	var output iot.ListThingTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingsFuture) Get(ctx workflow.Context) (*iot.ListThingsOutput, error) {
	var output iot.ListThingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingsInBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingsInBillingGroupFuture) Get(ctx workflow.Context) (*iot.ListThingsInBillingGroupOutput, error) {
	var output iot.ListThingsInBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListThingsInThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListThingsInThingGroupFuture) Get(ctx workflow.Context) (*iot.ListThingsInThingGroupOutput, error) {
	var output iot.ListThingsInThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListTopicRuleDestinationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListTopicRuleDestinationsFuture) Get(ctx workflow.Context) (*iot.ListTopicRuleDestinationsOutput, error) {
	var output iot.ListTopicRuleDestinationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListTopicRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListTopicRulesFuture) Get(ctx workflow.Context) (*iot.ListTopicRulesOutput, error) {
	var output iot.ListTopicRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListV2LoggingLevelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListV2LoggingLevelsFuture) Get(ctx workflow.Context) (*iot.ListV2LoggingLevelsOutput, error) {
	var output iot.ListV2LoggingLevelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTListViolationEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTListViolationEventsFuture) Get(ctx workflow.Context) (*iot.ListViolationEventsOutput, error) {
	var output iot.ListViolationEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRegisterCACertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRegisterCACertificateFuture) Get(ctx workflow.Context) (*iot.RegisterCACertificateOutput, error) {
	var output iot.RegisterCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRegisterCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRegisterCertificateFuture) Get(ctx workflow.Context) (*iot.RegisterCertificateOutput, error) {
	var output iot.RegisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRegisterCertificateWithoutCAFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRegisterCertificateWithoutCAFuture) Get(ctx workflow.Context) (*iot.RegisterCertificateWithoutCAOutput, error) {
	var output iot.RegisterCertificateWithoutCAOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRegisterThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRegisterThingFuture) Get(ctx workflow.Context) (*iot.RegisterThingOutput, error) {
	var output iot.RegisterThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRejectCertificateTransferFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRejectCertificateTransferFuture) Get(ctx workflow.Context) (*iot.RejectCertificateTransferOutput, error) {
	var output iot.RejectCertificateTransferOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRemoveThingFromBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRemoveThingFromBillingGroupFuture) Get(ctx workflow.Context) (*iot.RemoveThingFromBillingGroupOutput, error) {
	var output iot.RemoveThingFromBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTRemoveThingFromThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTRemoveThingFromThingGroupFuture) Get(ctx workflow.Context) (*iot.RemoveThingFromThingGroupOutput, error) {
	var output iot.RemoveThingFromThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTReplaceTopicRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTReplaceTopicRuleFuture) Get(ctx workflow.Context) (*iot.ReplaceTopicRuleOutput, error) {
	var output iot.ReplaceTopicRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSearchIndexFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSearchIndexFuture) Get(ctx workflow.Context) (*iot.SearchIndexOutput, error) {
	var output iot.SearchIndexOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSetDefaultAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSetDefaultAuthorizerFuture) Get(ctx workflow.Context) (*iot.SetDefaultAuthorizerOutput, error) {
	var output iot.SetDefaultAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSetDefaultPolicyVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSetDefaultPolicyVersionFuture) Get(ctx workflow.Context) (*iot.SetDefaultPolicyVersionOutput, error) {
	var output iot.SetDefaultPolicyVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSetLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSetLoggingOptionsFuture) Get(ctx workflow.Context) (*iot.SetLoggingOptionsOutput, error) {
	var output iot.SetLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSetV2LoggingLevelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSetV2LoggingLevelFuture) Get(ctx workflow.Context) (*iot.SetV2LoggingLevelOutput, error) {
	var output iot.SetV2LoggingLevelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTSetV2LoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTSetV2LoggingOptionsFuture) Get(ctx workflow.Context) (*iot.SetV2LoggingOptionsOutput, error) {
	var output iot.SetV2LoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTStartAuditMitigationActionsTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTStartAuditMitigationActionsTaskFuture) Get(ctx workflow.Context) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	var output iot.StartAuditMitigationActionsTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTStartOnDemandAuditTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTStartOnDemandAuditTaskFuture) Get(ctx workflow.Context) (*iot.StartOnDemandAuditTaskOutput, error) {
	var output iot.StartOnDemandAuditTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTStartThingRegistrationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTStartThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.StartThingRegistrationTaskOutput, error) {
	var output iot.StartThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTStopThingRegistrationTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTStopThingRegistrationTaskFuture) Get(ctx workflow.Context) (*iot.StopThingRegistrationTaskOutput, error) {
	var output iot.StopThingRegistrationTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTTagResourceFuture) Get(ctx workflow.Context) (*iot.TagResourceOutput, error) {
	var output iot.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTTestAuthorizationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTTestAuthorizationFuture) Get(ctx workflow.Context) (*iot.TestAuthorizationOutput, error) {
	var output iot.TestAuthorizationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTTestInvokeAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTTestInvokeAuthorizerFuture) Get(ctx workflow.Context) (*iot.TestInvokeAuthorizerOutput, error) {
	var output iot.TestInvokeAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTTransferCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTTransferCertificateFuture) Get(ctx workflow.Context) (*iot.TransferCertificateOutput, error) {
	var output iot.TransferCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUntagResourceFuture) Get(ctx workflow.Context) (*iot.UntagResourceOutput, error) {
	var output iot.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateAccountAuditConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateAccountAuditConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	var output iot.UpdateAccountAuditConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateAuditSuppressionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateAuditSuppressionFuture) Get(ctx workflow.Context) (*iot.UpdateAuditSuppressionOutput, error) {
	var output iot.UpdateAuditSuppressionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateAuthorizerFuture) Get(ctx workflow.Context) (*iot.UpdateAuthorizerOutput, error) {
	var output iot.UpdateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateBillingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateBillingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateBillingGroupOutput, error) {
	var output iot.UpdateBillingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateCACertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateCACertificateFuture) Get(ctx workflow.Context) (*iot.UpdateCACertificateOutput, error) {
	var output iot.UpdateCACertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateCertificateFuture) Get(ctx workflow.Context) (*iot.UpdateCertificateOutput, error) {
	var output iot.UpdateCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateDimensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateDimensionFuture) Get(ctx workflow.Context) (*iot.UpdateDimensionOutput, error) {
	var output iot.UpdateDimensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateDomainConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateDomainConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateDomainConfigurationOutput, error) {
	var output iot.UpdateDomainConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateDynamicThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateDynamicThingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateDynamicThingGroupOutput, error) {
	var output iot.UpdateDynamicThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateEventConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateEventConfigurationsFuture) Get(ctx workflow.Context) (*iot.UpdateEventConfigurationsOutput, error) {
	var output iot.UpdateEventConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateIndexingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateIndexingConfigurationFuture) Get(ctx workflow.Context) (*iot.UpdateIndexingConfigurationOutput, error) {
	var output iot.UpdateIndexingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateJobFuture) Get(ctx workflow.Context) (*iot.UpdateJobOutput, error) {
	var output iot.UpdateJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateMitigationActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateMitigationActionFuture) Get(ctx workflow.Context) (*iot.UpdateMitigationActionOutput, error) {
	var output iot.UpdateMitigationActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateProvisioningTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateProvisioningTemplateFuture) Get(ctx workflow.Context) (*iot.UpdateProvisioningTemplateOutput, error) {
	var output iot.UpdateProvisioningTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateRoleAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateRoleAliasFuture) Get(ctx workflow.Context) (*iot.UpdateRoleAliasOutput, error) {
	var output iot.UpdateRoleAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateScheduledAuditFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateScheduledAuditFuture) Get(ctx workflow.Context) (*iot.UpdateScheduledAuditOutput, error) {
	var output iot.UpdateScheduledAuditOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateSecurityProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateSecurityProfileFuture) Get(ctx workflow.Context) (*iot.UpdateSecurityProfileOutput, error) {
	var output iot.UpdateSecurityProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateStreamFuture) Get(ctx workflow.Context) (*iot.UpdateStreamOutput, error) {
	var output iot.UpdateStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateThingFuture) Get(ctx workflow.Context) (*iot.UpdateThingOutput, error) {
	var output iot.UpdateThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateThingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateThingGroupFuture) Get(ctx workflow.Context) (*iot.UpdateThingGroupOutput, error) {
	var output iot.UpdateThingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateThingGroupsForThingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateThingGroupsForThingFuture) Get(ctx workflow.Context) (*iot.UpdateThingGroupsForThingOutput, error) {
	var output iot.UpdateThingGroupsForThingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTUpdateTopicRuleDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTUpdateTopicRuleDestinationFuture) Get(ctx workflow.Context) (*iot.UpdateTopicRuleDestinationOutput, error) {
	var output iot.UpdateTopicRuleDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTValidateSecurityProfileBehaviorsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTValidateSecurityProfileBehaviorsFuture) Get(ctx workflow.Context) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	var output iot.ValidateSecurityProfileBehaviorsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptCertificateTransfer(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) (*iot.AcceptCertificateTransferOutput, error) {
	var output iot.AcceptCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AcceptCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptCertificateTransferAsync(ctx workflow.Context, input *iot.AcceptCertificateTransferInput) *IoTAcceptCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AcceptCertificateTransfer", input)
	return &IoTAcceptCertificateTransferFuture{Future: future}
}

func (a *stub) AddThingToBillingGroup(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) (*iot.AddThingToBillingGroupOutput, error) {
	var output iot.AddThingToBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AddThingToBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddThingToBillingGroupAsync(ctx workflow.Context, input *iot.AddThingToBillingGroupInput) *IoTAddThingToBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AddThingToBillingGroup", input)
	return &IoTAddThingToBillingGroupFuture{Future: future}
}

func (a *stub) AddThingToThingGroup(ctx workflow.Context, input *iot.AddThingToThingGroupInput) (*iot.AddThingToThingGroupOutput, error) {
	var output iot.AddThingToThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AddThingToThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddThingToThingGroupAsync(ctx workflow.Context, input *iot.AddThingToThingGroupInput) *IoTAddThingToThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AddThingToThingGroup", input)
	return &IoTAddThingToThingGroupFuture{Future: future}
}

func (a *stub) AssociateTargetsWithJob(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) (*iot.AssociateTargetsWithJobOutput, error) {
	var output iot.AssociateTargetsWithJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AssociateTargetsWithJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTargetsWithJobAsync(ctx workflow.Context, input *iot.AssociateTargetsWithJobInput) *IoTAssociateTargetsWithJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AssociateTargetsWithJob", input)
	return &IoTAssociateTargetsWithJobFuture{Future: future}
}

func (a *stub) AttachPolicy(ctx workflow.Context, input *iot.AttachPolicyInput) (*iot.AttachPolicyOutput, error) {
	var output iot.AttachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AttachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPolicyAsync(ctx workflow.Context, input *iot.AttachPolicyInput) *IoTAttachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AttachPolicy", input)
	return &IoTAttachPolicyFuture{Future: future}
}

func (a *stub) AttachPrincipalPolicy(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) (*iot.AttachPrincipalPolicyOutput, error) {
	var output iot.AttachPrincipalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AttachPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachPrincipalPolicyAsync(ctx workflow.Context, input *iot.AttachPrincipalPolicyInput) *IoTAttachPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AttachPrincipalPolicy", input)
	return &IoTAttachPrincipalPolicyFuture{Future: future}
}

func (a *stub) AttachSecurityProfile(ctx workflow.Context, input *iot.AttachSecurityProfileInput) (*iot.AttachSecurityProfileOutput, error) {
	var output iot.AttachSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AttachSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachSecurityProfileAsync(ctx workflow.Context, input *iot.AttachSecurityProfileInput) *IoTAttachSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AttachSecurityProfile", input)
	return &IoTAttachSecurityProfileFuture{Future: future}
}

func (a *stub) AttachThingPrincipal(ctx workflow.Context, input *iot.AttachThingPrincipalInput) (*iot.AttachThingPrincipalOutput, error) {
	var output iot.AttachThingPrincipalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-AttachThingPrincipal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachThingPrincipalAsync(ctx workflow.Context, input *iot.AttachThingPrincipalInput) *IoTAttachThingPrincipalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-AttachThingPrincipal", input)
	return &IoTAttachThingPrincipalFuture{Future: future}
}

func (a *stub) CancelAuditMitigationActionsTask(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	var output iot.CancelAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CancelAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.CancelAuditMitigationActionsTaskInput) *IoTCancelAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CancelAuditMitigationActionsTask", input)
	return &IoTCancelAuditMitigationActionsTaskFuture{Future: future}
}

func (a *stub) CancelAuditTask(ctx workflow.Context, input *iot.CancelAuditTaskInput) (*iot.CancelAuditTaskOutput, error) {
	var output iot.CancelAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CancelAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelAuditTaskAsync(ctx workflow.Context, input *iot.CancelAuditTaskInput) *IoTCancelAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CancelAuditTask", input)
	return &IoTCancelAuditTaskFuture{Future: future}
}

func (a *stub) CancelCertificateTransfer(ctx workflow.Context, input *iot.CancelCertificateTransferInput) (*iot.CancelCertificateTransferOutput, error) {
	var output iot.CancelCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CancelCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelCertificateTransferAsync(ctx workflow.Context, input *iot.CancelCertificateTransferInput) *IoTCancelCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CancelCertificateTransfer", input)
	return &IoTCancelCertificateTransferFuture{Future: future}
}

func (a *stub) CancelJob(ctx workflow.Context, input *iot.CancelJobInput) (*iot.CancelJobOutput, error) {
	var output iot.CancelJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CancelJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobAsync(ctx workflow.Context, input *iot.CancelJobInput) *IoTCancelJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CancelJob", input)
	return &IoTCancelJobFuture{Future: future}
}

func (a *stub) CancelJobExecution(ctx workflow.Context, input *iot.CancelJobExecutionInput) (*iot.CancelJobExecutionOutput, error) {
	var output iot.CancelJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CancelJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJobExecutionAsync(ctx workflow.Context, input *iot.CancelJobExecutionInput) *IoTCancelJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CancelJobExecution", input)
	return &IoTCancelJobExecutionFuture{Future: future}
}

func (a *stub) ClearDefaultAuthorizer(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) (*iot.ClearDefaultAuthorizerOutput, error) {
	var output iot.ClearDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ClearDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClearDefaultAuthorizerAsync(ctx workflow.Context, input *iot.ClearDefaultAuthorizerInput) *IoTClearDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ClearDefaultAuthorizer", input)
	return &IoTClearDefaultAuthorizerFuture{Future: future}
}

func (a *stub) ConfirmTopicRuleDestination(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	var output iot.ConfirmTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ConfirmTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmTopicRuleDestinationAsync(ctx workflow.Context, input *iot.ConfirmTopicRuleDestinationInput) *IoTConfirmTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ConfirmTopicRuleDestination", input)
	return &IoTConfirmTopicRuleDestinationFuture{Future: future}
}

func (a *stub) CreateAuditSuppression(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) (*iot.CreateAuditSuppressionOutput, error) {
	var output iot.CreateAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAuditSuppressionAsync(ctx workflow.Context, input *iot.CreateAuditSuppressionInput) *IoTCreateAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateAuditSuppression", input)
	return &IoTCreateAuditSuppressionFuture{Future: future}
}

func (a *stub) CreateAuthorizer(ctx workflow.Context, input *iot.CreateAuthorizerInput) (*iot.CreateAuthorizerOutput, error) {
	var output iot.CreateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAuthorizerAsync(ctx workflow.Context, input *iot.CreateAuthorizerInput) *IoTCreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateAuthorizer", input)
	return &IoTCreateAuthorizerFuture{Future: future}
}

func (a *stub) CreateBillingGroup(ctx workflow.Context, input *iot.CreateBillingGroupInput) (*iot.CreateBillingGroupOutput, error) {
	var output iot.CreateBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBillingGroupAsync(ctx workflow.Context, input *iot.CreateBillingGroupInput) *IoTCreateBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateBillingGroup", input)
	return &IoTCreateBillingGroupFuture{Future: future}
}

func (a *stub) CreateCertificateFromCsr(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) (*iot.CreateCertificateFromCsrOutput, error) {
	var output iot.CreateCertificateFromCsrOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateCertificateFromCsr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCertificateFromCsrAsync(ctx workflow.Context, input *iot.CreateCertificateFromCsrInput) *IoTCreateCertificateFromCsrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateCertificateFromCsr", input)
	return &IoTCreateCertificateFromCsrFuture{Future: future}
}

func (a *stub) CreateDimension(ctx workflow.Context, input *iot.CreateDimensionInput) (*iot.CreateDimensionOutput, error) {
	var output iot.CreateDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDimensionAsync(ctx workflow.Context, input *iot.CreateDimensionInput) *IoTCreateDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateDimension", input)
	return &IoTCreateDimensionFuture{Future: future}
}

func (a *stub) CreateDomainConfiguration(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) (*iot.CreateDomainConfigurationOutput, error) {
	var output iot.CreateDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainConfigurationAsync(ctx workflow.Context, input *iot.CreateDomainConfigurationInput) *IoTCreateDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateDomainConfiguration", input)
	return &IoTCreateDomainConfigurationFuture{Future: future}
}

func (a *stub) CreateDynamicThingGroup(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) (*iot.CreateDynamicThingGroupOutput, error) {
	var output iot.CreateDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDynamicThingGroupAsync(ctx workflow.Context, input *iot.CreateDynamicThingGroupInput) *IoTCreateDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateDynamicThingGroup", input)
	return &IoTCreateDynamicThingGroupFuture{Future: future}
}

func (a *stub) CreateJob(ctx workflow.Context, input *iot.CreateJobInput) (*iot.CreateJobOutput, error) {
	var output iot.CreateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateJobAsync(ctx workflow.Context, input *iot.CreateJobInput) *IoTCreateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateJob", input)
	return &IoTCreateJobFuture{Future: future}
}

func (a *stub) CreateKeysAndCertificate(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) (*iot.CreateKeysAndCertificateOutput, error) {
	var output iot.CreateKeysAndCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateKeysAndCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeysAndCertificateAsync(ctx workflow.Context, input *iot.CreateKeysAndCertificateInput) *IoTCreateKeysAndCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateKeysAndCertificate", input)
	return &IoTCreateKeysAndCertificateFuture{Future: future}
}

func (a *stub) CreateMitigationAction(ctx workflow.Context, input *iot.CreateMitigationActionInput) (*iot.CreateMitigationActionOutput, error) {
	var output iot.CreateMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMitigationActionAsync(ctx workflow.Context, input *iot.CreateMitigationActionInput) *IoTCreateMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateMitigationAction", input)
	return &IoTCreateMitigationActionFuture{Future: future}
}

func (a *stub) CreateOTAUpdate(ctx workflow.Context, input *iot.CreateOTAUpdateInput) (*iot.CreateOTAUpdateOutput, error) {
	var output iot.CreateOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateOTAUpdateAsync(ctx workflow.Context, input *iot.CreateOTAUpdateInput) *IoTCreateOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateOTAUpdate", input)
	return &IoTCreateOTAUpdateFuture{Future: future}
}

func (a *stub) CreatePolicy(ctx workflow.Context, input *iot.CreatePolicyInput) (*iot.CreatePolicyOutput, error) {
	var output iot.CreatePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreatePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyAsync(ctx workflow.Context, input *iot.CreatePolicyInput) *IoTCreatePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreatePolicy", input)
	return &IoTCreatePolicyFuture{Future: future}
}

func (a *stub) CreatePolicyVersion(ctx workflow.Context, input *iot.CreatePolicyVersionInput) (*iot.CreatePolicyVersionOutput, error) {
	var output iot.CreatePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreatePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePolicyVersionAsync(ctx workflow.Context, input *iot.CreatePolicyVersionInput) *IoTCreatePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreatePolicyVersion", input)
	return &IoTCreatePolicyVersionFuture{Future: future}
}

func (a *stub) CreateProvisioningClaim(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) (*iot.CreateProvisioningClaimOutput, error) {
	var output iot.CreateProvisioningClaimOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningClaim", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisioningClaimAsync(ctx workflow.Context, input *iot.CreateProvisioningClaimInput) *IoTCreateProvisioningClaimFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningClaim", input)
	return &IoTCreateProvisioningClaimFuture{Future: future}
}

func (a *stub) CreateProvisioningTemplate(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) (*iot.CreateProvisioningTemplateOutput, error) {
	var output iot.CreateProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisioningTemplateAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateInput) *IoTCreateProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningTemplate", input)
	return &IoTCreateProvisioningTemplateFuture{Future: future}
}

func (a *stub) CreateProvisioningTemplateVersion(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	var output iot.CreateProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.CreateProvisioningTemplateVersionInput) *IoTCreateProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateProvisioningTemplateVersion", input)
	return &IoTCreateProvisioningTemplateVersionFuture{Future: future}
}

func (a *stub) CreateRoleAlias(ctx workflow.Context, input *iot.CreateRoleAliasInput) (*iot.CreateRoleAliasOutput, error) {
	var output iot.CreateRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoleAliasAsync(ctx workflow.Context, input *iot.CreateRoleAliasInput) *IoTCreateRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateRoleAlias", input)
	return &IoTCreateRoleAliasFuture{Future: future}
}

func (a *stub) CreateScheduledAudit(ctx workflow.Context, input *iot.CreateScheduledAuditInput) (*iot.CreateScheduledAuditOutput, error) {
	var output iot.CreateScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateScheduledAuditAsync(ctx workflow.Context, input *iot.CreateScheduledAuditInput) *IoTCreateScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateScheduledAudit", input)
	return &IoTCreateScheduledAuditFuture{Future: future}
}

func (a *stub) CreateSecurityProfile(ctx workflow.Context, input *iot.CreateSecurityProfileInput) (*iot.CreateSecurityProfileOutput, error) {
	var output iot.CreateSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSecurityProfileAsync(ctx workflow.Context, input *iot.CreateSecurityProfileInput) *IoTCreateSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateSecurityProfile", input)
	return &IoTCreateSecurityProfileFuture{Future: future}
}

func (a *stub) CreateStream(ctx workflow.Context, input *iot.CreateStreamInput) (*iot.CreateStreamOutput, error) {
	var output iot.CreateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStreamAsync(ctx workflow.Context, input *iot.CreateStreamInput) *IoTCreateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateStream", input)
	return &IoTCreateStreamFuture{Future: future}
}

func (a *stub) CreateThing(ctx workflow.Context, input *iot.CreateThingInput) (*iot.CreateThingOutput, error) {
	var output iot.CreateThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThingAsync(ctx workflow.Context, input *iot.CreateThingInput) *IoTCreateThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateThing", input)
	return &IoTCreateThingFuture{Future: future}
}

func (a *stub) CreateThingGroup(ctx workflow.Context, input *iot.CreateThingGroupInput) (*iot.CreateThingGroupOutput, error) {
	var output iot.CreateThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThingGroupAsync(ctx workflow.Context, input *iot.CreateThingGroupInput) *IoTCreateThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateThingGroup", input)
	return &IoTCreateThingGroupFuture{Future: future}
}

func (a *stub) CreateThingType(ctx workflow.Context, input *iot.CreateThingTypeInput) (*iot.CreateThingTypeOutput, error) {
	var output iot.CreateThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateThingTypeAsync(ctx workflow.Context, input *iot.CreateThingTypeInput) *IoTCreateThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateThingType", input)
	return &IoTCreateThingTypeFuture{Future: future}
}

func (a *stub) CreateTopicRule(ctx workflow.Context, input *iot.CreateTopicRuleInput) (*iot.CreateTopicRuleOutput, error) {
	var output iot.CreateTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTopicRuleAsync(ctx workflow.Context, input *iot.CreateTopicRuleInput) *IoTCreateTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateTopicRule", input)
	return &IoTCreateTopicRuleFuture{Future: future}
}

func (a *stub) CreateTopicRuleDestination(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) (*iot.CreateTopicRuleDestinationOutput, error) {
	var output iot.CreateTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-CreateTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.CreateTopicRuleDestinationInput) *IoTCreateTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-CreateTopicRuleDestination", input)
	return &IoTCreateTopicRuleDestinationFuture{Future: future}
}

func (a *stub) DeleteAccountAuditConfiguration(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	var output iot.DeleteAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DeleteAccountAuditConfigurationInput) *IoTDeleteAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAccountAuditConfiguration", input)
	return &IoTDeleteAccountAuditConfigurationFuture{Future: future}
}

func (a *stub) DeleteAuditSuppression(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) (*iot.DeleteAuditSuppressionOutput, error) {
	var output iot.DeleteAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAuditSuppressionAsync(ctx workflow.Context, input *iot.DeleteAuditSuppressionInput) *IoTDeleteAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAuditSuppression", input)
	return &IoTDeleteAuditSuppressionFuture{Future: future}
}

func (a *stub) DeleteAuthorizer(ctx workflow.Context, input *iot.DeleteAuthorizerInput) (*iot.DeleteAuthorizerOutput, error) {
	var output iot.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAuthorizerAsync(ctx workflow.Context, input *iot.DeleteAuthorizerInput) *IoTDeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteAuthorizer", input)
	return &IoTDeleteAuthorizerFuture{Future: future}
}

func (a *stub) DeleteBillingGroup(ctx workflow.Context, input *iot.DeleteBillingGroupInput) (*iot.DeleteBillingGroupOutput, error) {
	var output iot.DeleteBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBillingGroupAsync(ctx workflow.Context, input *iot.DeleteBillingGroupInput) *IoTDeleteBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteBillingGroup", input)
	return &IoTDeleteBillingGroupFuture{Future: future}
}

func (a *stub) DeleteCACertificate(ctx workflow.Context, input *iot.DeleteCACertificateInput) (*iot.DeleteCACertificateOutput, error) {
	var output iot.DeleteCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCACertificateAsync(ctx workflow.Context, input *iot.DeleteCACertificateInput) *IoTDeleteCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteCACertificate", input)
	return &IoTDeleteCACertificateFuture{Future: future}
}

func (a *stub) DeleteCertificate(ctx workflow.Context, input *iot.DeleteCertificateInput) (*iot.DeleteCertificateOutput, error) {
	var output iot.DeleteCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCertificateAsync(ctx workflow.Context, input *iot.DeleteCertificateInput) *IoTDeleteCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteCertificate", input)
	return &IoTDeleteCertificateFuture{Future: future}
}

func (a *stub) DeleteDimension(ctx workflow.Context, input *iot.DeleteDimensionInput) (*iot.DeleteDimensionOutput, error) {
	var output iot.DeleteDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDimensionAsync(ctx workflow.Context, input *iot.DeleteDimensionInput) *IoTDeleteDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDimension", input)
	return &IoTDeleteDimensionFuture{Future: future}
}

func (a *stub) DeleteDomainConfiguration(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) (*iot.DeleteDomainConfigurationOutput, error) {
	var output iot.DeleteDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainConfigurationAsync(ctx workflow.Context, input *iot.DeleteDomainConfigurationInput) *IoTDeleteDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDomainConfiguration", input)
	return &IoTDeleteDomainConfigurationFuture{Future: future}
}

func (a *stub) DeleteDynamicThingGroup(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) (*iot.DeleteDynamicThingGroupOutput, error) {
	var output iot.DeleteDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDynamicThingGroupAsync(ctx workflow.Context, input *iot.DeleteDynamicThingGroupInput) *IoTDeleteDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteDynamicThingGroup", input)
	return &IoTDeleteDynamicThingGroupFuture{Future: future}
}

func (a *stub) DeleteJob(ctx workflow.Context, input *iot.DeleteJobInput) (*iot.DeleteJobOutput, error) {
	var output iot.DeleteJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobAsync(ctx workflow.Context, input *iot.DeleteJobInput) *IoTDeleteJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteJob", input)
	return &IoTDeleteJobFuture{Future: future}
}

func (a *stub) DeleteJobExecution(ctx workflow.Context, input *iot.DeleteJobExecutionInput) (*iot.DeleteJobExecutionOutput, error) {
	var output iot.DeleteJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteJobExecutionAsync(ctx workflow.Context, input *iot.DeleteJobExecutionInput) *IoTDeleteJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteJobExecution", input)
	return &IoTDeleteJobExecutionFuture{Future: future}
}

func (a *stub) DeleteMitigationAction(ctx workflow.Context, input *iot.DeleteMitigationActionInput) (*iot.DeleteMitigationActionOutput, error) {
	var output iot.DeleteMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMitigationActionAsync(ctx workflow.Context, input *iot.DeleteMitigationActionInput) *IoTDeleteMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteMitigationAction", input)
	return &IoTDeleteMitigationActionFuture{Future: future}
}

func (a *stub) DeleteOTAUpdate(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) (*iot.DeleteOTAUpdateOutput, error) {
	var output iot.DeleteOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteOTAUpdateAsync(ctx workflow.Context, input *iot.DeleteOTAUpdateInput) *IoTDeleteOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteOTAUpdate", input)
	return &IoTDeleteOTAUpdateFuture{Future: future}
}

func (a *stub) DeletePolicy(ctx workflow.Context, input *iot.DeletePolicyInput) (*iot.DeletePolicyOutput, error) {
	var output iot.DeletePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeletePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyAsync(ctx workflow.Context, input *iot.DeletePolicyInput) *IoTDeletePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeletePolicy", input)
	return &IoTDeletePolicyFuture{Future: future}
}

func (a *stub) DeletePolicyVersion(ctx workflow.Context, input *iot.DeletePolicyVersionInput) (*iot.DeletePolicyVersionOutput, error) {
	var output iot.DeletePolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeletePolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePolicyVersionAsync(ctx workflow.Context, input *iot.DeletePolicyVersionInput) *IoTDeletePolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeletePolicyVersion", input)
	return &IoTDeletePolicyVersionFuture{Future: future}
}

func (a *stub) DeleteProvisioningTemplate(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) (*iot.DeleteProvisioningTemplateOutput, error) {
	var output iot.DeleteProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisioningTemplateAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateInput) *IoTDeleteProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteProvisioningTemplate", input)
	return &IoTDeleteProvisioningTemplateFuture{Future: future}
}

func (a *stub) DeleteProvisioningTemplateVersion(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	var output iot.DeleteProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DeleteProvisioningTemplateVersionInput) *IoTDeleteProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteProvisioningTemplateVersion", input)
	return &IoTDeleteProvisioningTemplateVersionFuture{Future: future}
}

func (a *stub) DeleteRegistrationCode(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) (*iot.DeleteRegistrationCodeOutput, error) {
	var output iot.DeleteRegistrationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteRegistrationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRegistrationCodeAsync(ctx workflow.Context, input *iot.DeleteRegistrationCodeInput) *IoTDeleteRegistrationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteRegistrationCode", input)
	return &IoTDeleteRegistrationCodeFuture{Future: future}
}

func (a *stub) DeleteRoleAlias(ctx workflow.Context, input *iot.DeleteRoleAliasInput) (*iot.DeleteRoleAliasOutput, error) {
	var output iot.DeleteRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRoleAliasAsync(ctx workflow.Context, input *iot.DeleteRoleAliasInput) *IoTDeleteRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteRoleAlias", input)
	return &IoTDeleteRoleAliasFuture{Future: future}
}

func (a *stub) DeleteScheduledAudit(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) (*iot.DeleteScheduledAuditOutput, error) {
	var output iot.DeleteScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteScheduledAuditAsync(ctx workflow.Context, input *iot.DeleteScheduledAuditInput) *IoTDeleteScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteScheduledAudit", input)
	return &IoTDeleteScheduledAuditFuture{Future: future}
}

func (a *stub) DeleteSecurityProfile(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) (*iot.DeleteSecurityProfileOutput, error) {
	var output iot.DeleteSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSecurityProfileAsync(ctx workflow.Context, input *iot.DeleteSecurityProfileInput) *IoTDeleteSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteSecurityProfile", input)
	return &IoTDeleteSecurityProfileFuture{Future: future}
}

func (a *stub) DeleteStream(ctx workflow.Context, input *iot.DeleteStreamInput) (*iot.DeleteStreamOutput, error) {
	var output iot.DeleteStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStreamAsync(ctx workflow.Context, input *iot.DeleteStreamInput) *IoTDeleteStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteStream", input)
	return &IoTDeleteStreamFuture{Future: future}
}

func (a *stub) DeleteThing(ctx workflow.Context, input *iot.DeleteThingInput) (*iot.DeleteThingOutput, error) {
	var output iot.DeleteThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThingAsync(ctx workflow.Context, input *iot.DeleteThingInput) *IoTDeleteThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThing", input)
	return &IoTDeleteThingFuture{Future: future}
}

func (a *stub) DeleteThingGroup(ctx workflow.Context, input *iot.DeleteThingGroupInput) (*iot.DeleteThingGroupOutput, error) {
	var output iot.DeleteThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThingGroupAsync(ctx workflow.Context, input *iot.DeleteThingGroupInput) *IoTDeleteThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThingGroup", input)
	return &IoTDeleteThingGroupFuture{Future: future}
}

func (a *stub) DeleteThingType(ctx workflow.Context, input *iot.DeleteThingTypeInput) (*iot.DeleteThingTypeOutput, error) {
	var output iot.DeleteThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteThingTypeAsync(ctx workflow.Context, input *iot.DeleteThingTypeInput) *IoTDeleteThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteThingType", input)
	return &IoTDeleteThingTypeFuture{Future: future}
}

func (a *stub) DeleteTopicRule(ctx workflow.Context, input *iot.DeleteTopicRuleInput) (*iot.DeleteTopicRuleOutput, error) {
	var output iot.DeleteTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTopicRuleAsync(ctx workflow.Context, input *iot.DeleteTopicRuleInput) *IoTDeleteTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteTopicRule", input)
	return &IoTDeleteTopicRuleFuture{Future: future}
}

func (a *stub) DeleteTopicRuleDestination(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) (*iot.DeleteTopicRuleDestinationOutput, error) {
	var output iot.DeleteTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTopicRuleDestinationAsync(ctx workflow.Context, input *iot.DeleteTopicRuleDestinationInput) *IoTDeleteTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteTopicRuleDestination", input)
	return &IoTDeleteTopicRuleDestinationFuture{Future: future}
}

func (a *stub) DeleteV2LoggingLevel(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) (*iot.DeleteV2LoggingLevelOutput, error) {
	var output iot.DeleteV2LoggingLevelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeleteV2LoggingLevel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteV2LoggingLevelAsync(ctx workflow.Context, input *iot.DeleteV2LoggingLevelInput) *IoTDeleteV2LoggingLevelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeleteV2LoggingLevel", input)
	return &IoTDeleteV2LoggingLevelFuture{Future: future}
}

func (a *stub) DeprecateThingType(ctx workflow.Context, input *iot.DeprecateThingTypeInput) (*iot.DeprecateThingTypeOutput, error) {
	var output iot.DeprecateThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DeprecateThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeprecateThingTypeAsync(ctx workflow.Context, input *iot.DeprecateThingTypeInput) *IoTDeprecateThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DeprecateThingType", input)
	return &IoTDeprecateThingTypeFuture{Future: future}
}

func (a *stub) DescribeAccountAuditConfiguration(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	var output iot.DescribeAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.DescribeAccountAuditConfigurationInput) *IoTDescribeAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAccountAuditConfiguration", input)
	return &IoTDescribeAccountAuditConfigurationFuture{Future: future}
}

func (a *stub) DescribeAuditFinding(ctx workflow.Context, input *iot.DescribeAuditFindingInput) (*iot.DescribeAuditFindingOutput, error) {
	var output iot.DescribeAuditFindingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditFinding", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuditFindingAsync(ctx workflow.Context, input *iot.DescribeAuditFindingInput) *IoTDescribeAuditFindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditFinding", input)
	return &IoTDescribeAuditFindingFuture{Future: future}
}

func (a *stub) DescribeAuditMitigationActionsTask(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	var output iot.DescribeAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.DescribeAuditMitigationActionsTaskInput) *IoTDescribeAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditMitigationActionsTask", input)
	return &IoTDescribeAuditMitigationActionsTaskFuture{Future: future}
}

func (a *stub) DescribeAuditSuppression(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) (*iot.DescribeAuditSuppressionOutput, error) {
	var output iot.DescribeAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuditSuppressionAsync(ctx workflow.Context, input *iot.DescribeAuditSuppressionInput) *IoTDescribeAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditSuppression", input)
	return &IoTDescribeAuditSuppressionFuture{Future: future}
}

func (a *stub) DescribeAuditTask(ctx workflow.Context, input *iot.DescribeAuditTaskInput) (*iot.DescribeAuditTaskOutput, error) {
	var output iot.DescribeAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuditTaskAsync(ctx workflow.Context, input *iot.DescribeAuditTaskInput) *IoTDescribeAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuditTask", input)
	return &IoTDescribeAuditTaskFuture{Future: future}
}

func (a *stub) DescribeAuthorizer(ctx workflow.Context, input *iot.DescribeAuthorizerInput) (*iot.DescribeAuthorizerOutput, error) {
	var output iot.DescribeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAuthorizerAsync(ctx workflow.Context, input *iot.DescribeAuthorizerInput) *IoTDescribeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeAuthorizer", input)
	return &IoTDescribeAuthorizerFuture{Future: future}
}

func (a *stub) DescribeBillingGroup(ctx workflow.Context, input *iot.DescribeBillingGroupInput) (*iot.DescribeBillingGroupOutput, error) {
	var output iot.DescribeBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBillingGroupAsync(ctx workflow.Context, input *iot.DescribeBillingGroupInput) *IoTDescribeBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeBillingGroup", input)
	return &IoTDescribeBillingGroupFuture{Future: future}
}

func (a *stub) DescribeCACertificate(ctx workflow.Context, input *iot.DescribeCACertificateInput) (*iot.DescribeCACertificateOutput, error) {
	var output iot.DescribeCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCACertificateAsync(ctx workflow.Context, input *iot.DescribeCACertificateInput) *IoTDescribeCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeCACertificate", input)
	return &IoTDescribeCACertificateFuture{Future: future}
}

func (a *stub) DescribeCertificate(ctx workflow.Context, input *iot.DescribeCertificateInput) (*iot.DescribeCertificateOutput, error) {
	var output iot.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAsync(ctx workflow.Context, input *iot.DescribeCertificateInput) *IoTDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeCertificate", input)
	return &IoTDescribeCertificateFuture{Future: future}
}

func (a *stub) DescribeDefaultAuthorizer(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) (*iot.DescribeDefaultAuthorizerOutput, error) {
	var output iot.DescribeDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDefaultAuthorizerAsync(ctx workflow.Context, input *iot.DescribeDefaultAuthorizerInput) *IoTDescribeDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDefaultAuthorizer", input)
	return &IoTDescribeDefaultAuthorizerFuture{Future: future}
}

func (a *stub) DescribeDimension(ctx workflow.Context, input *iot.DescribeDimensionInput) (*iot.DescribeDimensionOutput, error) {
	var output iot.DescribeDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDimensionAsync(ctx workflow.Context, input *iot.DescribeDimensionInput) *IoTDescribeDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDimension", input)
	return &IoTDescribeDimensionFuture{Future: future}
}

func (a *stub) DescribeDomainConfiguration(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) (*iot.DescribeDomainConfigurationOutput, error) {
	var output iot.DescribeDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainConfigurationAsync(ctx workflow.Context, input *iot.DescribeDomainConfigurationInput) *IoTDescribeDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeDomainConfiguration", input)
	return &IoTDescribeDomainConfigurationFuture{Future: future}
}

func (a *stub) DescribeEndpoint(ctx workflow.Context, input *iot.DescribeEndpointInput) (*iot.DescribeEndpointOutput, error) {
	var output iot.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointAsync(ctx workflow.Context, input *iot.DescribeEndpointInput) *IoTDescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeEndpoint", input)
	return &IoTDescribeEndpointFuture{Future: future}
}

func (a *stub) DescribeEventConfigurations(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) (*iot.DescribeEventConfigurationsOutput, error) {
	var output iot.DescribeEventConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeEventConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventConfigurationsAsync(ctx workflow.Context, input *iot.DescribeEventConfigurationsInput) *IoTDescribeEventConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeEventConfigurations", input)
	return &IoTDescribeEventConfigurationsFuture{Future: future}
}

func (a *stub) DescribeIndex(ctx workflow.Context, input *iot.DescribeIndexInput) (*iot.DescribeIndexOutput, error) {
	var output iot.DescribeIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIndexAsync(ctx workflow.Context, input *iot.DescribeIndexInput) *IoTDescribeIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeIndex", input)
	return &IoTDescribeIndexFuture{Future: future}
}

func (a *stub) DescribeJob(ctx workflow.Context, input *iot.DescribeJobInput) (*iot.DescribeJobOutput, error) {
	var output iot.DescribeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobAsync(ctx workflow.Context, input *iot.DescribeJobInput) *IoTDescribeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeJob", input)
	return &IoTDescribeJobFuture{Future: future}
}

func (a *stub) DescribeJobExecution(ctx workflow.Context, input *iot.DescribeJobExecutionInput) (*iot.DescribeJobExecutionOutput, error) {
	var output iot.DescribeJobExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeJobExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJobExecutionAsync(ctx workflow.Context, input *iot.DescribeJobExecutionInput) *IoTDescribeJobExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeJobExecution", input)
	return &IoTDescribeJobExecutionFuture{Future: future}
}

func (a *stub) DescribeMitigationAction(ctx workflow.Context, input *iot.DescribeMitigationActionInput) (*iot.DescribeMitigationActionOutput, error) {
	var output iot.DescribeMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMitigationActionAsync(ctx workflow.Context, input *iot.DescribeMitigationActionInput) *IoTDescribeMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeMitigationAction", input)
	return &IoTDescribeMitigationActionFuture{Future: future}
}

func (a *stub) DescribeProvisioningTemplate(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) (*iot.DescribeProvisioningTemplateOutput, error) {
	var output iot.DescribeProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningTemplateAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateInput) *IoTDescribeProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeProvisioningTemplate", input)
	return &IoTDescribeProvisioningTemplateFuture{Future: future}
}

func (a *stub) DescribeProvisioningTemplateVersion(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	var output iot.DescribeProvisioningTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeProvisioningTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProvisioningTemplateVersionAsync(ctx workflow.Context, input *iot.DescribeProvisioningTemplateVersionInput) *IoTDescribeProvisioningTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeProvisioningTemplateVersion", input)
	return &IoTDescribeProvisioningTemplateVersionFuture{Future: future}
}

func (a *stub) DescribeRoleAlias(ctx workflow.Context, input *iot.DescribeRoleAliasInput) (*iot.DescribeRoleAliasOutput, error) {
	var output iot.DescribeRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRoleAliasAsync(ctx workflow.Context, input *iot.DescribeRoleAliasInput) *IoTDescribeRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeRoleAlias", input)
	return &IoTDescribeRoleAliasFuture{Future: future}
}

func (a *stub) DescribeScheduledAudit(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) (*iot.DescribeScheduledAuditOutput, error) {
	var output iot.DescribeScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledAuditAsync(ctx workflow.Context, input *iot.DescribeScheduledAuditInput) *IoTDescribeScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeScheduledAudit", input)
	return &IoTDescribeScheduledAuditFuture{Future: future}
}

func (a *stub) DescribeSecurityProfile(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) (*iot.DescribeSecurityProfileOutput, error) {
	var output iot.DescribeSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSecurityProfileAsync(ctx workflow.Context, input *iot.DescribeSecurityProfileInput) *IoTDescribeSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeSecurityProfile", input)
	return &IoTDescribeSecurityProfileFuture{Future: future}
}

func (a *stub) DescribeStream(ctx workflow.Context, input *iot.DescribeStreamInput) (*iot.DescribeStreamOutput, error) {
	var output iot.DescribeStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStreamAsync(ctx workflow.Context, input *iot.DescribeStreamInput) *IoTDescribeStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeStream", input)
	return &IoTDescribeStreamFuture{Future: future}
}

func (a *stub) DescribeThing(ctx workflow.Context, input *iot.DescribeThingInput) (*iot.DescribeThingOutput, error) {
	var output iot.DescribeThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThingAsync(ctx workflow.Context, input *iot.DescribeThingInput) *IoTDescribeThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThing", input)
	return &IoTDescribeThingFuture{Future: future}
}

func (a *stub) DescribeThingGroup(ctx workflow.Context, input *iot.DescribeThingGroupInput) (*iot.DescribeThingGroupOutput, error) {
	var output iot.DescribeThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThingGroupAsync(ctx workflow.Context, input *iot.DescribeThingGroupInput) *IoTDescribeThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingGroup", input)
	return &IoTDescribeThingGroupFuture{Future: future}
}

func (a *stub) DescribeThingRegistrationTask(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) (*iot.DescribeThingRegistrationTaskOutput, error) {
	var output iot.DescribeThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThingRegistrationTaskAsync(ctx workflow.Context, input *iot.DescribeThingRegistrationTaskInput) *IoTDescribeThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingRegistrationTask", input)
	return &IoTDescribeThingRegistrationTaskFuture{Future: future}
}

func (a *stub) DescribeThingType(ctx workflow.Context, input *iot.DescribeThingTypeInput) (*iot.DescribeThingTypeOutput, error) {
	var output iot.DescribeThingTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeThingTypeAsync(ctx workflow.Context, input *iot.DescribeThingTypeInput) *IoTDescribeThingTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DescribeThingType", input)
	return &IoTDescribeThingTypeFuture{Future: future}
}

func (a *stub) DetachPolicy(ctx workflow.Context, input *iot.DetachPolicyInput) (*iot.DetachPolicyOutput, error) {
	var output iot.DetachPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DetachPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPolicyAsync(ctx workflow.Context, input *iot.DetachPolicyInput) *IoTDetachPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DetachPolicy", input)
	return &IoTDetachPolicyFuture{Future: future}
}

func (a *stub) DetachPrincipalPolicy(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) (*iot.DetachPrincipalPolicyOutput, error) {
	var output iot.DetachPrincipalPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DetachPrincipalPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachPrincipalPolicyAsync(ctx workflow.Context, input *iot.DetachPrincipalPolicyInput) *IoTDetachPrincipalPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DetachPrincipalPolicy", input)
	return &IoTDetachPrincipalPolicyFuture{Future: future}
}

func (a *stub) DetachSecurityProfile(ctx workflow.Context, input *iot.DetachSecurityProfileInput) (*iot.DetachSecurityProfileOutput, error) {
	var output iot.DetachSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DetachSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachSecurityProfileAsync(ctx workflow.Context, input *iot.DetachSecurityProfileInput) *IoTDetachSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DetachSecurityProfile", input)
	return &IoTDetachSecurityProfileFuture{Future: future}
}

func (a *stub) DetachThingPrincipal(ctx workflow.Context, input *iot.DetachThingPrincipalInput) (*iot.DetachThingPrincipalOutput, error) {
	var output iot.DetachThingPrincipalOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DetachThingPrincipal", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachThingPrincipalAsync(ctx workflow.Context, input *iot.DetachThingPrincipalInput) *IoTDetachThingPrincipalFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DetachThingPrincipal", input)
	return &IoTDetachThingPrincipalFuture{Future: future}
}

func (a *stub) DisableTopicRule(ctx workflow.Context, input *iot.DisableTopicRuleInput) (*iot.DisableTopicRuleOutput, error) {
	var output iot.DisableTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-DisableTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableTopicRuleAsync(ctx workflow.Context, input *iot.DisableTopicRuleInput) *IoTDisableTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-DisableTopicRule", input)
	return &IoTDisableTopicRuleFuture{Future: future}
}

func (a *stub) EnableTopicRule(ctx workflow.Context, input *iot.EnableTopicRuleInput) (*iot.EnableTopicRuleOutput, error) {
	var output iot.EnableTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-EnableTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableTopicRuleAsync(ctx workflow.Context, input *iot.EnableTopicRuleInput) *IoTEnableTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-EnableTopicRule", input)
	return &IoTEnableTopicRuleFuture{Future: future}
}

func (a *stub) GetCardinality(ctx workflow.Context, input *iot.GetCardinalityInput) (*iot.GetCardinalityOutput, error) {
	var output iot.GetCardinalityOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetCardinality", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCardinalityAsync(ctx workflow.Context, input *iot.GetCardinalityInput) *IoTGetCardinalityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetCardinality", input)
	return &IoTGetCardinalityFuture{Future: future}
}

func (a *stub) GetEffectivePolicies(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) (*iot.GetEffectivePoliciesOutput, error) {
	var output iot.GetEffectivePoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetEffectivePolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEffectivePoliciesAsync(ctx workflow.Context, input *iot.GetEffectivePoliciesInput) *IoTGetEffectivePoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetEffectivePolicies", input)
	return &IoTGetEffectivePoliciesFuture{Future: future}
}

func (a *stub) GetIndexingConfiguration(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) (*iot.GetIndexingConfigurationOutput, error) {
	var output iot.GetIndexingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetIndexingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIndexingConfigurationAsync(ctx workflow.Context, input *iot.GetIndexingConfigurationInput) *IoTGetIndexingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetIndexingConfiguration", input)
	return &IoTGetIndexingConfigurationFuture{Future: future}
}

func (a *stub) GetJobDocument(ctx workflow.Context, input *iot.GetJobDocumentInput) (*iot.GetJobDocumentOutput, error) {
	var output iot.GetJobDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetJobDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobDocumentAsync(ctx workflow.Context, input *iot.GetJobDocumentInput) *IoTGetJobDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetJobDocument", input)
	return &IoTGetJobDocumentFuture{Future: future}
}

func (a *stub) GetLoggingOptions(ctx workflow.Context, input *iot.GetLoggingOptionsInput) (*iot.GetLoggingOptionsOutput, error) {
	var output iot.GetLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLoggingOptionsAsync(ctx workflow.Context, input *iot.GetLoggingOptionsInput) *IoTGetLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetLoggingOptions", input)
	return &IoTGetLoggingOptionsFuture{Future: future}
}

func (a *stub) GetOTAUpdate(ctx workflow.Context, input *iot.GetOTAUpdateInput) (*iot.GetOTAUpdateOutput, error) {
	var output iot.GetOTAUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetOTAUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOTAUpdateAsync(ctx workflow.Context, input *iot.GetOTAUpdateInput) *IoTGetOTAUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetOTAUpdate", input)
	return &IoTGetOTAUpdateFuture{Future: future}
}

func (a *stub) GetPercentiles(ctx workflow.Context, input *iot.GetPercentilesInput) (*iot.GetPercentilesOutput, error) {
	var output iot.GetPercentilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetPercentiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPercentilesAsync(ctx workflow.Context, input *iot.GetPercentilesInput) *IoTGetPercentilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetPercentiles", input)
	return &IoTGetPercentilesFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *iot.GetPolicyInput) (*iot.GetPolicyOutput, error) {
	var output iot.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *iot.GetPolicyInput) *IoTGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetPolicy", input)
	return &IoTGetPolicyFuture{Future: future}
}

func (a *stub) GetPolicyVersion(ctx workflow.Context, input *iot.GetPolicyVersionInput) (*iot.GetPolicyVersionOutput, error) {
	var output iot.GetPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyVersionAsync(ctx workflow.Context, input *iot.GetPolicyVersionInput) *IoTGetPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetPolicyVersion", input)
	return &IoTGetPolicyVersionFuture{Future: future}
}

func (a *stub) GetRegistrationCode(ctx workflow.Context, input *iot.GetRegistrationCodeInput) (*iot.GetRegistrationCodeOutput, error) {
	var output iot.GetRegistrationCodeOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetRegistrationCode", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRegistrationCodeAsync(ctx workflow.Context, input *iot.GetRegistrationCodeInput) *IoTGetRegistrationCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetRegistrationCode", input)
	return &IoTGetRegistrationCodeFuture{Future: future}
}

func (a *stub) GetStatistics(ctx workflow.Context, input *iot.GetStatisticsInput) (*iot.GetStatisticsOutput, error) {
	var output iot.GetStatisticsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetStatistics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStatisticsAsync(ctx workflow.Context, input *iot.GetStatisticsInput) *IoTGetStatisticsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetStatistics", input)
	return &IoTGetStatisticsFuture{Future: future}
}

func (a *stub) GetTopicRule(ctx workflow.Context, input *iot.GetTopicRuleInput) (*iot.GetTopicRuleOutput, error) {
	var output iot.GetTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTopicRuleAsync(ctx workflow.Context, input *iot.GetTopicRuleInput) *IoTGetTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetTopicRule", input)
	return &IoTGetTopicRuleFuture{Future: future}
}

func (a *stub) GetTopicRuleDestination(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) (*iot.GetTopicRuleDestinationOutput, error) {
	var output iot.GetTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTopicRuleDestinationAsync(ctx workflow.Context, input *iot.GetTopicRuleDestinationInput) *IoTGetTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetTopicRuleDestination", input)
	return &IoTGetTopicRuleDestinationFuture{Future: future}
}

func (a *stub) GetV2LoggingOptions(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) (*iot.GetV2LoggingOptionsOutput, error) {
	var output iot.GetV2LoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-GetV2LoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.GetV2LoggingOptionsInput) *IoTGetV2LoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-GetV2LoggingOptions", input)
	return &IoTGetV2LoggingOptionsFuture{Future: future}
}

func (a *stub) ListActiveViolations(ctx workflow.Context, input *iot.ListActiveViolationsInput) (*iot.ListActiveViolationsOutput, error) {
	var output iot.ListActiveViolationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListActiveViolations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActiveViolationsAsync(ctx workflow.Context, input *iot.ListActiveViolationsInput) *IoTListActiveViolationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListActiveViolations", input)
	return &IoTListActiveViolationsFuture{Future: future}
}

func (a *stub) ListAttachedPolicies(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) (*iot.ListAttachedPoliciesOutput, error) {
	var output iot.ListAttachedPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAttachedPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAttachedPoliciesAsync(ctx workflow.Context, input *iot.ListAttachedPoliciesInput) *IoTListAttachedPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAttachedPolicies", input)
	return &IoTListAttachedPoliciesFuture{Future: future}
}

func (a *stub) ListAuditFindings(ctx workflow.Context, input *iot.ListAuditFindingsInput) (*iot.ListAuditFindingsOutput, error) {
	var output iot.ListAuditFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuditFindingsAsync(ctx workflow.Context, input *iot.ListAuditFindingsInput) *IoTListAuditFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditFindings", input)
	return &IoTListAuditFindingsFuture{Future: future}
}

func (a *stub) ListAuditMitigationActionsExecutions(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	var output iot.ListAuditMitigationActionsExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditMitigationActionsExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuditMitigationActionsExecutionsAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsExecutionsInput) *IoTListAuditMitigationActionsExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditMitigationActionsExecutions", input)
	return &IoTListAuditMitigationActionsExecutionsFuture{Future: future}
}

func (a *stub) ListAuditMitigationActionsTasks(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	var output iot.ListAuditMitigationActionsTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditMitigationActionsTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuditMitigationActionsTasksAsync(ctx workflow.Context, input *iot.ListAuditMitigationActionsTasksInput) *IoTListAuditMitigationActionsTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditMitigationActionsTasks", input)
	return &IoTListAuditMitigationActionsTasksFuture{Future: future}
}

func (a *stub) ListAuditSuppressions(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) (*iot.ListAuditSuppressionsOutput, error) {
	var output iot.ListAuditSuppressionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditSuppressions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuditSuppressionsAsync(ctx workflow.Context, input *iot.ListAuditSuppressionsInput) *IoTListAuditSuppressionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditSuppressions", input)
	return &IoTListAuditSuppressionsFuture{Future: future}
}

func (a *stub) ListAuditTasks(ctx workflow.Context, input *iot.ListAuditTasksInput) (*iot.ListAuditTasksOutput, error) {
	var output iot.ListAuditTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuditTasksAsync(ctx workflow.Context, input *iot.ListAuditTasksInput) *IoTListAuditTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuditTasks", input)
	return &IoTListAuditTasksFuture{Future: future}
}

func (a *stub) ListAuthorizers(ctx workflow.Context, input *iot.ListAuthorizersInput) (*iot.ListAuthorizersOutput, error) {
	var output iot.ListAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAuthorizersAsync(ctx workflow.Context, input *iot.ListAuthorizersInput) *IoTListAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListAuthorizers", input)
	return &IoTListAuthorizersFuture{Future: future}
}

func (a *stub) ListBillingGroups(ctx workflow.Context, input *iot.ListBillingGroupsInput) (*iot.ListBillingGroupsOutput, error) {
	var output iot.ListBillingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListBillingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBillingGroupsAsync(ctx workflow.Context, input *iot.ListBillingGroupsInput) *IoTListBillingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListBillingGroups", input)
	return &IoTListBillingGroupsFuture{Future: future}
}

func (a *stub) ListCACertificates(ctx workflow.Context, input *iot.ListCACertificatesInput) (*iot.ListCACertificatesOutput, error) {
	var output iot.ListCACertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListCACertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCACertificatesAsync(ctx workflow.Context, input *iot.ListCACertificatesInput) *IoTListCACertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListCACertificates", input)
	return &IoTListCACertificatesFuture{Future: future}
}

func (a *stub) ListCertificates(ctx workflow.Context, input *iot.ListCertificatesInput) (*iot.ListCertificatesOutput, error) {
	var output iot.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificatesAsync(ctx workflow.Context, input *iot.ListCertificatesInput) *IoTListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListCertificates", input)
	return &IoTListCertificatesFuture{Future: future}
}

func (a *stub) ListCertificatesByCA(ctx workflow.Context, input *iot.ListCertificatesByCAInput) (*iot.ListCertificatesByCAOutput, error) {
	var output iot.ListCertificatesByCAOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListCertificatesByCA", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificatesByCAAsync(ctx workflow.Context, input *iot.ListCertificatesByCAInput) *IoTListCertificatesByCAFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListCertificatesByCA", input)
	return &IoTListCertificatesByCAFuture{Future: future}
}

func (a *stub) ListDimensions(ctx workflow.Context, input *iot.ListDimensionsInput) (*iot.ListDimensionsOutput, error) {
	var output iot.ListDimensionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListDimensions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDimensionsAsync(ctx workflow.Context, input *iot.ListDimensionsInput) *IoTListDimensionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListDimensions", input)
	return &IoTListDimensionsFuture{Future: future}
}

func (a *stub) ListDomainConfigurations(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) (*iot.ListDomainConfigurationsOutput, error) {
	var output iot.ListDomainConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListDomainConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainConfigurationsAsync(ctx workflow.Context, input *iot.ListDomainConfigurationsInput) *IoTListDomainConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListDomainConfigurations", input)
	return &IoTListDomainConfigurationsFuture{Future: future}
}

func (a *stub) ListIndices(ctx workflow.Context, input *iot.ListIndicesInput) (*iot.ListIndicesOutput, error) {
	var output iot.ListIndicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListIndices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIndicesAsync(ctx workflow.Context, input *iot.ListIndicesInput) *IoTListIndicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListIndices", input)
	return &IoTListIndicesFuture{Future: future}
}

func (a *stub) ListJobExecutionsForJob(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) (*iot.ListJobExecutionsForJobOutput, error) {
	var output iot.ListJobExecutionsForJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListJobExecutionsForJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobExecutionsForJobAsync(ctx workflow.Context, input *iot.ListJobExecutionsForJobInput) *IoTListJobExecutionsForJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListJobExecutionsForJob", input)
	return &IoTListJobExecutionsForJobFuture{Future: future}
}

func (a *stub) ListJobExecutionsForThing(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) (*iot.ListJobExecutionsForThingOutput, error) {
	var output iot.ListJobExecutionsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListJobExecutionsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobExecutionsForThingAsync(ctx workflow.Context, input *iot.ListJobExecutionsForThingInput) *IoTListJobExecutionsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListJobExecutionsForThing", input)
	return &IoTListJobExecutionsForThingFuture{Future: future}
}

func (a *stub) ListJobs(ctx workflow.Context, input *iot.ListJobsInput) (*iot.ListJobsOutput, error) {
	var output iot.ListJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJobsAsync(ctx workflow.Context, input *iot.ListJobsInput) *IoTListJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListJobs", input)
	return &IoTListJobsFuture{Future: future}
}

func (a *stub) ListMitigationActions(ctx workflow.Context, input *iot.ListMitigationActionsInput) (*iot.ListMitigationActionsOutput, error) {
	var output iot.ListMitigationActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListMitigationActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListMitigationActionsAsync(ctx workflow.Context, input *iot.ListMitigationActionsInput) *IoTListMitigationActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListMitigationActions", input)
	return &IoTListMitigationActionsFuture{Future: future}
}

func (a *stub) ListOTAUpdates(ctx workflow.Context, input *iot.ListOTAUpdatesInput) (*iot.ListOTAUpdatesOutput, error) {
	var output iot.ListOTAUpdatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListOTAUpdates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOTAUpdatesAsync(ctx workflow.Context, input *iot.ListOTAUpdatesInput) *IoTListOTAUpdatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListOTAUpdates", input)
	return &IoTListOTAUpdatesFuture{Future: future}
}

func (a *stub) ListOutgoingCertificates(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) (*iot.ListOutgoingCertificatesOutput, error) {
	var output iot.ListOutgoingCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListOutgoingCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOutgoingCertificatesAsync(ctx workflow.Context, input *iot.ListOutgoingCertificatesInput) *IoTListOutgoingCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListOutgoingCertificates", input)
	return &IoTListOutgoingCertificatesFuture{Future: future}
}

func (a *stub) ListPolicies(ctx workflow.Context, input *iot.ListPoliciesInput) (*iot.ListPoliciesOutput, error) {
	var output iot.ListPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPoliciesAsync(ctx workflow.Context, input *iot.ListPoliciesInput) *IoTListPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicies", input)
	return &IoTListPoliciesFuture{Future: future}
}

func (a *stub) ListPolicyPrincipals(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) (*iot.ListPolicyPrincipalsOutput, error) {
	var output iot.ListPolicyPrincipalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicyPrincipals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPolicyPrincipalsAsync(ctx workflow.Context, input *iot.ListPolicyPrincipalsInput) *IoTListPolicyPrincipalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicyPrincipals", input)
	return &IoTListPolicyPrincipalsFuture{Future: future}
}

func (a *stub) ListPolicyVersions(ctx workflow.Context, input *iot.ListPolicyVersionsInput) (*iot.ListPolicyVersionsOutput, error) {
	var output iot.ListPolicyVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicyVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPolicyVersionsAsync(ctx workflow.Context, input *iot.ListPolicyVersionsInput) *IoTListPolicyVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListPolicyVersions", input)
	return &IoTListPolicyVersionsFuture{Future: future}
}

func (a *stub) ListPrincipalPolicies(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) (*iot.ListPrincipalPoliciesOutput, error) {
	var output iot.ListPrincipalPoliciesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListPrincipalPolicies", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPrincipalPoliciesAsync(ctx workflow.Context, input *iot.ListPrincipalPoliciesInput) *IoTListPrincipalPoliciesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListPrincipalPolicies", input)
	return &IoTListPrincipalPoliciesFuture{Future: future}
}

func (a *stub) ListPrincipalThings(ctx workflow.Context, input *iot.ListPrincipalThingsInput) (*iot.ListPrincipalThingsOutput, error) {
	var output iot.ListPrincipalThingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListPrincipalThings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPrincipalThingsAsync(ctx workflow.Context, input *iot.ListPrincipalThingsInput) *IoTListPrincipalThingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListPrincipalThings", input)
	return &IoTListPrincipalThingsFuture{Future: future}
}

func (a *stub) ListProvisioningTemplateVersions(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	var output iot.ListProvisioningTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListProvisioningTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningTemplateVersionsAsync(ctx workflow.Context, input *iot.ListProvisioningTemplateVersionsInput) *IoTListProvisioningTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListProvisioningTemplateVersions", input)
	return &IoTListProvisioningTemplateVersionsFuture{Future: future}
}

func (a *stub) ListProvisioningTemplates(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) (*iot.ListProvisioningTemplatesOutput, error) {
	var output iot.ListProvisioningTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListProvisioningTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProvisioningTemplatesAsync(ctx workflow.Context, input *iot.ListProvisioningTemplatesInput) *IoTListProvisioningTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListProvisioningTemplates", input)
	return &IoTListProvisioningTemplatesFuture{Future: future}
}

func (a *stub) ListRoleAliases(ctx workflow.Context, input *iot.ListRoleAliasesInput) (*iot.ListRoleAliasesOutput, error) {
	var output iot.ListRoleAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListRoleAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoleAliasesAsync(ctx workflow.Context, input *iot.ListRoleAliasesInput) *IoTListRoleAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListRoleAliases", input)
	return &IoTListRoleAliasesFuture{Future: future}
}

func (a *stub) ListScheduledAudits(ctx workflow.Context, input *iot.ListScheduledAuditsInput) (*iot.ListScheduledAuditsOutput, error) {
	var output iot.ListScheduledAuditsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListScheduledAudits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListScheduledAuditsAsync(ctx workflow.Context, input *iot.ListScheduledAuditsInput) *IoTListScheduledAuditsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListScheduledAudits", input)
	return &IoTListScheduledAuditsFuture{Future: future}
}

func (a *stub) ListSecurityProfiles(ctx workflow.Context, input *iot.ListSecurityProfilesInput) (*iot.ListSecurityProfilesOutput, error) {
	var output iot.ListSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecurityProfilesAsync(ctx workflow.Context, input *iot.ListSecurityProfilesInput) *IoTListSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListSecurityProfiles", input)
	return &IoTListSecurityProfilesFuture{Future: future}
}

func (a *stub) ListSecurityProfilesForTarget(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) (*iot.ListSecurityProfilesForTargetOutput, error) {
	var output iot.ListSecurityProfilesForTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListSecurityProfilesForTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecurityProfilesForTargetAsync(ctx workflow.Context, input *iot.ListSecurityProfilesForTargetInput) *IoTListSecurityProfilesForTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListSecurityProfilesForTarget", input)
	return &IoTListSecurityProfilesForTargetFuture{Future: future}
}

func (a *stub) ListStreams(ctx workflow.Context, input *iot.ListStreamsInput) (*iot.ListStreamsOutput, error) {
	var output iot.ListStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListStreamsAsync(ctx workflow.Context, input *iot.ListStreamsInput) *IoTListStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListStreams", input)
	return &IoTListStreamsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iot.ListTagsForResourceInput) (*iot.ListTagsForResourceOutput, error) {
	var output iot.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iot.ListTagsForResourceInput) *IoTListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListTagsForResource", input)
	return &IoTListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargetsForPolicy(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) (*iot.ListTargetsForPolicyOutput, error) {
	var output iot.ListTargetsForPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListTargetsForPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsForPolicyAsync(ctx workflow.Context, input *iot.ListTargetsForPolicyInput) *IoTListTargetsForPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListTargetsForPolicy", input)
	return &IoTListTargetsForPolicyFuture{Future: future}
}

func (a *stub) ListTargetsForSecurityProfile(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) (*iot.ListTargetsForSecurityProfileOutput, error) {
	var output iot.ListTargetsForSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListTargetsForSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsForSecurityProfileAsync(ctx workflow.Context, input *iot.ListTargetsForSecurityProfileInput) *IoTListTargetsForSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListTargetsForSecurityProfile", input)
	return &IoTListTargetsForSecurityProfileFuture{Future: future}
}

func (a *stub) ListThingGroups(ctx workflow.Context, input *iot.ListThingGroupsInput) (*iot.ListThingGroupsOutput, error) {
	var output iot.ListThingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingGroupsAsync(ctx workflow.Context, input *iot.ListThingGroupsInput) *IoTListThingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingGroups", input)
	return &IoTListThingGroupsFuture{Future: future}
}

func (a *stub) ListThingGroupsForThing(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) (*iot.ListThingGroupsForThingOutput, error) {
	var output iot.ListThingGroupsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingGroupsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingGroupsForThingAsync(ctx workflow.Context, input *iot.ListThingGroupsForThingInput) *IoTListThingGroupsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingGroupsForThing", input)
	return &IoTListThingGroupsForThingFuture{Future: future}
}

func (a *stub) ListThingPrincipals(ctx workflow.Context, input *iot.ListThingPrincipalsInput) (*iot.ListThingPrincipalsOutput, error) {
	var output iot.ListThingPrincipalsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingPrincipals", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingPrincipalsAsync(ctx workflow.Context, input *iot.ListThingPrincipalsInput) *IoTListThingPrincipalsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingPrincipals", input)
	return &IoTListThingPrincipalsFuture{Future: future}
}

func (a *stub) ListThingRegistrationTaskReports(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	var output iot.ListThingRegistrationTaskReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingRegistrationTaskReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingRegistrationTaskReportsAsync(ctx workflow.Context, input *iot.ListThingRegistrationTaskReportsInput) *IoTListThingRegistrationTaskReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingRegistrationTaskReports", input)
	return &IoTListThingRegistrationTaskReportsFuture{Future: future}
}

func (a *stub) ListThingRegistrationTasks(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) (*iot.ListThingRegistrationTasksOutput, error) {
	var output iot.ListThingRegistrationTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingRegistrationTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingRegistrationTasksAsync(ctx workflow.Context, input *iot.ListThingRegistrationTasksInput) *IoTListThingRegistrationTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingRegistrationTasks", input)
	return &IoTListThingRegistrationTasksFuture{Future: future}
}

func (a *stub) ListThingTypes(ctx workflow.Context, input *iot.ListThingTypesInput) (*iot.ListThingTypesOutput, error) {
	var output iot.ListThingTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingTypesAsync(ctx workflow.Context, input *iot.ListThingTypesInput) *IoTListThingTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingTypes", input)
	return &IoTListThingTypesFuture{Future: future}
}

func (a *stub) ListThings(ctx workflow.Context, input *iot.ListThingsInput) (*iot.ListThingsOutput, error) {
	var output iot.ListThingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingsAsync(ctx workflow.Context, input *iot.ListThingsInput) *IoTListThingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThings", input)
	return &IoTListThingsFuture{Future: future}
}

func (a *stub) ListThingsInBillingGroup(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) (*iot.ListThingsInBillingGroupOutput, error) {
	var output iot.ListThingsInBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingsInBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingsInBillingGroupAsync(ctx workflow.Context, input *iot.ListThingsInBillingGroupInput) *IoTListThingsInBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingsInBillingGroup", input)
	return &IoTListThingsInBillingGroupFuture{Future: future}
}

func (a *stub) ListThingsInThingGroup(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) (*iot.ListThingsInThingGroupOutput, error) {
	var output iot.ListThingsInThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListThingsInThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListThingsInThingGroupAsync(ctx workflow.Context, input *iot.ListThingsInThingGroupInput) *IoTListThingsInThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListThingsInThingGroup", input)
	return &IoTListThingsInThingGroupFuture{Future: future}
}

func (a *stub) ListTopicRuleDestinations(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) (*iot.ListTopicRuleDestinationsOutput, error) {
	var output iot.ListTopicRuleDestinationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListTopicRuleDestinations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTopicRuleDestinationsAsync(ctx workflow.Context, input *iot.ListTopicRuleDestinationsInput) *IoTListTopicRuleDestinationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListTopicRuleDestinations", input)
	return &IoTListTopicRuleDestinationsFuture{Future: future}
}

func (a *stub) ListTopicRules(ctx workflow.Context, input *iot.ListTopicRulesInput) (*iot.ListTopicRulesOutput, error) {
	var output iot.ListTopicRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListTopicRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTopicRulesAsync(ctx workflow.Context, input *iot.ListTopicRulesInput) *IoTListTopicRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListTopicRules", input)
	return &IoTListTopicRulesFuture{Future: future}
}

func (a *stub) ListV2LoggingLevels(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) (*iot.ListV2LoggingLevelsOutput, error) {
	var output iot.ListV2LoggingLevelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListV2LoggingLevels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListV2LoggingLevelsAsync(ctx workflow.Context, input *iot.ListV2LoggingLevelsInput) *IoTListV2LoggingLevelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListV2LoggingLevels", input)
	return &IoTListV2LoggingLevelsFuture{Future: future}
}

func (a *stub) ListViolationEvents(ctx workflow.Context, input *iot.ListViolationEventsInput) (*iot.ListViolationEventsOutput, error) {
	var output iot.ListViolationEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ListViolationEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListViolationEventsAsync(ctx workflow.Context, input *iot.ListViolationEventsInput) *IoTListViolationEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ListViolationEvents", input)
	return &IoTListViolationEventsFuture{Future: future}
}

func (a *stub) RegisterCACertificate(ctx workflow.Context, input *iot.RegisterCACertificateInput) (*iot.RegisterCACertificateOutput, error) {
	var output iot.RegisterCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCACertificateAsync(ctx workflow.Context, input *iot.RegisterCACertificateInput) *IoTRegisterCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCACertificate", input)
	return &IoTRegisterCACertificateFuture{Future: future}
}

func (a *stub) RegisterCertificate(ctx workflow.Context, input *iot.RegisterCertificateInput) (*iot.RegisterCertificateOutput, error) {
	var output iot.RegisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCertificateAsync(ctx workflow.Context, input *iot.RegisterCertificateInput) *IoTRegisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCertificate", input)
	return &IoTRegisterCertificateFuture{Future: future}
}

func (a *stub) RegisterCertificateWithoutCA(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) (*iot.RegisterCertificateWithoutCAOutput, error) {
	var output iot.RegisterCertificateWithoutCAOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCertificateWithoutCA", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCertificateWithoutCAAsync(ctx workflow.Context, input *iot.RegisterCertificateWithoutCAInput) *IoTRegisterCertificateWithoutCAFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RegisterCertificateWithoutCA", input)
	return &IoTRegisterCertificateWithoutCAFuture{Future: future}
}

func (a *stub) RegisterThing(ctx workflow.Context, input *iot.RegisterThingInput) (*iot.RegisterThingOutput, error) {
	var output iot.RegisterThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RegisterThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterThingAsync(ctx workflow.Context, input *iot.RegisterThingInput) *IoTRegisterThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RegisterThing", input)
	return &IoTRegisterThingFuture{Future: future}
}

func (a *stub) RejectCertificateTransfer(ctx workflow.Context, input *iot.RejectCertificateTransferInput) (*iot.RejectCertificateTransferOutput, error) {
	var output iot.RejectCertificateTransferOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RejectCertificateTransfer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectCertificateTransferAsync(ctx workflow.Context, input *iot.RejectCertificateTransferInput) *IoTRejectCertificateTransferFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RejectCertificateTransfer", input)
	return &IoTRejectCertificateTransferFuture{Future: future}
}

func (a *stub) RemoveThingFromBillingGroup(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) (*iot.RemoveThingFromBillingGroupOutput, error) {
	var output iot.RemoveThingFromBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RemoveThingFromBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveThingFromBillingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromBillingGroupInput) *IoTRemoveThingFromBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RemoveThingFromBillingGroup", input)
	return &IoTRemoveThingFromBillingGroupFuture{Future: future}
}

func (a *stub) RemoveThingFromThingGroup(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) (*iot.RemoveThingFromThingGroupOutput, error) {
	var output iot.RemoveThingFromThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-RemoveThingFromThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveThingFromThingGroupAsync(ctx workflow.Context, input *iot.RemoveThingFromThingGroupInput) *IoTRemoveThingFromThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-RemoveThingFromThingGroup", input)
	return &IoTRemoveThingFromThingGroupFuture{Future: future}
}

func (a *stub) ReplaceTopicRule(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) (*iot.ReplaceTopicRuleOutput, error) {
	var output iot.ReplaceTopicRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ReplaceTopicRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceTopicRuleAsync(ctx workflow.Context, input *iot.ReplaceTopicRuleInput) *IoTReplaceTopicRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ReplaceTopicRule", input)
	return &IoTReplaceTopicRuleFuture{Future: future}
}

func (a *stub) SearchIndex(ctx workflow.Context, input *iot.SearchIndexInput) (*iot.SearchIndexOutput, error) {
	var output iot.SearchIndexOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SearchIndex", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchIndexAsync(ctx workflow.Context, input *iot.SearchIndexInput) *IoTSearchIndexFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SearchIndex", input)
	return &IoTSearchIndexFuture{Future: future}
}

func (a *stub) SetDefaultAuthorizer(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) (*iot.SetDefaultAuthorizerOutput, error) {
	var output iot.SetDefaultAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SetDefaultAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetDefaultAuthorizerAsync(ctx workflow.Context, input *iot.SetDefaultAuthorizerInput) *IoTSetDefaultAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SetDefaultAuthorizer", input)
	return &IoTSetDefaultAuthorizerFuture{Future: future}
}

func (a *stub) SetDefaultPolicyVersion(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) (*iot.SetDefaultPolicyVersionOutput, error) {
	var output iot.SetDefaultPolicyVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SetDefaultPolicyVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetDefaultPolicyVersionAsync(ctx workflow.Context, input *iot.SetDefaultPolicyVersionInput) *IoTSetDefaultPolicyVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SetDefaultPolicyVersion", input)
	return &IoTSetDefaultPolicyVersionFuture{Future: future}
}

func (a *stub) SetLoggingOptions(ctx workflow.Context, input *iot.SetLoggingOptionsInput) (*iot.SetLoggingOptionsOutput, error) {
	var output iot.SetLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SetLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetLoggingOptionsAsync(ctx workflow.Context, input *iot.SetLoggingOptionsInput) *IoTSetLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SetLoggingOptions", input)
	return &IoTSetLoggingOptionsFuture{Future: future}
}

func (a *stub) SetV2LoggingLevel(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) (*iot.SetV2LoggingLevelOutput, error) {
	var output iot.SetV2LoggingLevelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SetV2LoggingLevel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetV2LoggingLevelAsync(ctx workflow.Context, input *iot.SetV2LoggingLevelInput) *IoTSetV2LoggingLevelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SetV2LoggingLevel", input)
	return &IoTSetV2LoggingLevelFuture{Future: future}
}

func (a *stub) SetV2LoggingOptions(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) (*iot.SetV2LoggingOptionsOutput, error) {
	var output iot.SetV2LoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-SetV2LoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SetV2LoggingOptionsAsync(ctx workflow.Context, input *iot.SetV2LoggingOptionsInput) *IoTSetV2LoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-SetV2LoggingOptions", input)
	return &IoTSetV2LoggingOptionsFuture{Future: future}
}

func (a *stub) StartAuditMitigationActionsTask(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	var output iot.StartAuditMitigationActionsTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-StartAuditMitigationActionsTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAuditMitigationActionsTaskAsync(ctx workflow.Context, input *iot.StartAuditMitigationActionsTaskInput) *IoTStartAuditMitigationActionsTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-StartAuditMitigationActionsTask", input)
	return &IoTStartAuditMitigationActionsTaskFuture{Future: future}
}

func (a *stub) StartOnDemandAuditTask(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) (*iot.StartOnDemandAuditTaskOutput, error) {
	var output iot.StartOnDemandAuditTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-StartOnDemandAuditTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartOnDemandAuditTaskAsync(ctx workflow.Context, input *iot.StartOnDemandAuditTaskInput) *IoTStartOnDemandAuditTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-StartOnDemandAuditTask", input)
	return &IoTStartOnDemandAuditTaskFuture{Future: future}
}

func (a *stub) StartThingRegistrationTask(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) (*iot.StartThingRegistrationTaskOutput, error) {
	var output iot.StartThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-StartThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StartThingRegistrationTaskInput) *IoTStartThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-StartThingRegistrationTask", input)
	return &IoTStartThingRegistrationTaskFuture{Future: future}
}

func (a *stub) StopThingRegistrationTask(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) (*iot.StopThingRegistrationTaskOutput, error) {
	var output iot.StopThingRegistrationTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-StopThingRegistrationTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopThingRegistrationTaskAsync(ctx workflow.Context, input *iot.StopThingRegistrationTaskInput) *IoTStopThingRegistrationTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-StopThingRegistrationTask", input)
	return &IoTStopThingRegistrationTaskFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iot.TagResourceInput) (*iot.TagResourceOutput, error) {
	var output iot.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iot.TagResourceInput) *IoTTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-TagResource", input)
	return &IoTTagResourceFuture{Future: future}
}

func (a *stub) TestAuthorization(ctx workflow.Context, input *iot.TestAuthorizationInput) (*iot.TestAuthorizationOutput, error) {
	var output iot.TestAuthorizationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-TestAuthorization", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestAuthorizationAsync(ctx workflow.Context, input *iot.TestAuthorizationInput) *IoTTestAuthorizationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-TestAuthorization", input)
	return &IoTTestAuthorizationFuture{Future: future}
}

func (a *stub) TestInvokeAuthorizer(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) (*iot.TestInvokeAuthorizerOutput, error) {
	var output iot.TestInvokeAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-TestInvokeAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TestInvokeAuthorizerAsync(ctx workflow.Context, input *iot.TestInvokeAuthorizerInput) *IoTTestInvokeAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-TestInvokeAuthorizer", input)
	return &IoTTestInvokeAuthorizerFuture{Future: future}
}

func (a *stub) TransferCertificate(ctx workflow.Context, input *iot.TransferCertificateInput) (*iot.TransferCertificateOutput, error) {
	var output iot.TransferCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-TransferCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransferCertificateAsync(ctx workflow.Context, input *iot.TransferCertificateInput) *IoTTransferCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-TransferCertificate", input)
	return &IoTTransferCertificateFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iot.UntagResourceInput) (*iot.UntagResourceOutput, error) {
	var output iot.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iot.UntagResourceInput) *IoTUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UntagResource", input)
	return &IoTUntagResourceFuture{Future: future}
}

func (a *stub) UpdateAccountAuditConfiguration(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	var output iot.UpdateAccountAuditConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAccountAuditConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAccountAuditConfigurationAsync(ctx workflow.Context, input *iot.UpdateAccountAuditConfigurationInput) *IoTUpdateAccountAuditConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAccountAuditConfiguration", input)
	return &IoTUpdateAccountAuditConfigurationFuture{Future: future}
}

func (a *stub) UpdateAuditSuppression(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) (*iot.UpdateAuditSuppressionOutput, error) {
	var output iot.UpdateAuditSuppressionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAuditSuppression", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuditSuppressionAsync(ctx workflow.Context, input *iot.UpdateAuditSuppressionInput) *IoTUpdateAuditSuppressionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAuditSuppression", input)
	return &IoTUpdateAuditSuppressionFuture{Future: future}
}

func (a *stub) UpdateAuthorizer(ctx workflow.Context, input *iot.UpdateAuthorizerInput) (*iot.UpdateAuthorizerOutput, error) {
	var output iot.UpdateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuthorizerAsync(ctx workflow.Context, input *iot.UpdateAuthorizerInput) *IoTUpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateAuthorizer", input)
	return &IoTUpdateAuthorizerFuture{Future: future}
}

func (a *stub) UpdateBillingGroup(ctx workflow.Context, input *iot.UpdateBillingGroupInput) (*iot.UpdateBillingGroupOutput, error) {
	var output iot.UpdateBillingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateBillingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateBillingGroupAsync(ctx workflow.Context, input *iot.UpdateBillingGroupInput) *IoTUpdateBillingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateBillingGroup", input)
	return &IoTUpdateBillingGroupFuture{Future: future}
}

func (a *stub) UpdateCACertificate(ctx workflow.Context, input *iot.UpdateCACertificateInput) (*iot.UpdateCACertificateOutput, error) {
	var output iot.UpdateCACertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateCACertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCACertificateAsync(ctx workflow.Context, input *iot.UpdateCACertificateInput) *IoTUpdateCACertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateCACertificate", input)
	return &IoTUpdateCACertificateFuture{Future: future}
}

func (a *stub) UpdateCertificate(ctx workflow.Context, input *iot.UpdateCertificateInput) (*iot.UpdateCertificateOutput, error) {
	var output iot.UpdateCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateCertificateAsync(ctx workflow.Context, input *iot.UpdateCertificateInput) *IoTUpdateCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateCertificate", input)
	return &IoTUpdateCertificateFuture{Future: future}
}

func (a *stub) UpdateDimension(ctx workflow.Context, input *iot.UpdateDimensionInput) (*iot.UpdateDimensionOutput, error) {
	var output iot.UpdateDimensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDimension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDimensionAsync(ctx workflow.Context, input *iot.UpdateDimensionInput) *IoTUpdateDimensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDimension", input)
	return &IoTUpdateDimensionFuture{Future: future}
}

func (a *stub) UpdateDomainConfiguration(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) (*iot.UpdateDomainConfigurationOutput, error) {
	var output iot.UpdateDomainConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDomainConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainConfigurationAsync(ctx workflow.Context, input *iot.UpdateDomainConfigurationInput) *IoTUpdateDomainConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDomainConfiguration", input)
	return &IoTUpdateDomainConfigurationFuture{Future: future}
}

func (a *stub) UpdateDynamicThingGroup(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) (*iot.UpdateDynamicThingGroupOutput, error) {
	var output iot.UpdateDynamicThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDynamicThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDynamicThingGroupAsync(ctx workflow.Context, input *iot.UpdateDynamicThingGroupInput) *IoTUpdateDynamicThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateDynamicThingGroup", input)
	return &IoTUpdateDynamicThingGroupFuture{Future: future}
}

func (a *stub) UpdateEventConfigurations(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) (*iot.UpdateEventConfigurationsOutput, error) {
	var output iot.UpdateEventConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateEventConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEventConfigurationsAsync(ctx workflow.Context, input *iot.UpdateEventConfigurationsInput) *IoTUpdateEventConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateEventConfigurations", input)
	return &IoTUpdateEventConfigurationsFuture{Future: future}
}

func (a *stub) UpdateIndexingConfiguration(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) (*iot.UpdateIndexingConfigurationOutput, error) {
	var output iot.UpdateIndexingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateIndexingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIndexingConfigurationAsync(ctx workflow.Context, input *iot.UpdateIndexingConfigurationInput) *IoTUpdateIndexingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateIndexingConfiguration", input)
	return &IoTUpdateIndexingConfigurationFuture{Future: future}
}

func (a *stub) UpdateJob(ctx workflow.Context, input *iot.UpdateJobInput) (*iot.UpdateJobOutput, error) {
	var output iot.UpdateJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateJobAsync(ctx workflow.Context, input *iot.UpdateJobInput) *IoTUpdateJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateJob", input)
	return &IoTUpdateJobFuture{Future: future}
}

func (a *stub) UpdateMitigationAction(ctx workflow.Context, input *iot.UpdateMitigationActionInput) (*iot.UpdateMitigationActionOutput, error) {
	var output iot.UpdateMitigationActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateMitigationAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateMitigationActionAsync(ctx workflow.Context, input *iot.UpdateMitigationActionInput) *IoTUpdateMitigationActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateMitigationAction", input)
	return &IoTUpdateMitigationActionFuture{Future: future}
}

func (a *stub) UpdateProvisioningTemplate(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) (*iot.UpdateProvisioningTemplateOutput, error) {
	var output iot.UpdateProvisioningTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateProvisioningTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProvisioningTemplateAsync(ctx workflow.Context, input *iot.UpdateProvisioningTemplateInput) *IoTUpdateProvisioningTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateProvisioningTemplate", input)
	return &IoTUpdateProvisioningTemplateFuture{Future: future}
}

func (a *stub) UpdateRoleAlias(ctx workflow.Context, input *iot.UpdateRoleAliasInput) (*iot.UpdateRoleAliasOutput, error) {
	var output iot.UpdateRoleAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateRoleAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoleAliasAsync(ctx workflow.Context, input *iot.UpdateRoleAliasInput) *IoTUpdateRoleAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateRoleAlias", input)
	return &IoTUpdateRoleAliasFuture{Future: future}
}

func (a *stub) UpdateScheduledAudit(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) (*iot.UpdateScheduledAuditOutput, error) {
	var output iot.UpdateScheduledAuditOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateScheduledAudit", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateScheduledAuditAsync(ctx workflow.Context, input *iot.UpdateScheduledAuditInput) *IoTUpdateScheduledAuditFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateScheduledAudit", input)
	return &IoTUpdateScheduledAuditFuture{Future: future}
}

func (a *stub) UpdateSecurityProfile(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) (*iot.UpdateSecurityProfileOutput, error) {
	var output iot.UpdateSecurityProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateSecurityProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecurityProfileAsync(ctx workflow.Context, input *iot.UpdateSecurityProfileInput) *IoTUpdateSecurityProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateSecurityProfile", input)
	return &IoTUpdateSecurityProfileFuture{Future: future}
}

func (a *stub) UpdateStream(ctx workflow.Context, input *iot.UpdateStreamInput) (*iot.UpdateStreamOutput, error) {
	var output iot.UpdateStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStreamAsync(ctx workflow.Context, input *iot.UpdateStreamInput) *IoTUpdateStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateStream", input)
	return &IoTUpdateStreamFuture{Future: future}
}

func (a *stub) UpdateThing(ctx workflow.Context, input *iot.UpdateThingInput) (*iot.UpdateThingOutput, error) {
	var output iot.UpdateThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThingAsync(ctx workflow.Context, input *iot.UpdateThingInput) *IoTUpdateThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThing", input)
	return &IoTUpdateThingFuture{Future: future}
}

func (a *stub) UpdateThingGroup(ctx workflow.Context, input *iot.UpdateThingGroupInput) (*iot.UpdateThingGroupOutput, error) {
	var output iot.UpdateThingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThingGroupAsync(ctx workflow.Context, input *iot.UpdateThingGroupInput) *IoTUpdateThingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThingGroup", input)
	return &IoTUpdateThingGroupFuture{Future: future}
}

func (a *stub) UpdateThingGroupsForThing(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) (*iot.UpdateThingGroupsForThingOutput, error) {
	var output iot.UpdateThingGroupsForThingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThingGroupsForThing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateThingGroupsForThingAsync(ctx workflow.Context, input *iot.UpdateThingGroupsForThingInput) *IoTUpdateThingGroupsForThingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateThingGroupsForThing", input)
	return &IoTUpdateThingGroupsForThingFuture{Future: future}
}

func (a *stub) UpdateTopicRuleDestination(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) (*iot.UpdateTopicRuleDestinationOutput, error) {
	var output iot.UpdateTopicRuleDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-UpdateTopicRuleDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTopicRuleDestinationAsync(ctx workflow.Context, input *iot.UpdateTopicRuleDestinationInput) *IoTUpdateTopicRuleDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-UpdateTopicRuleDestination", input)
	return &IoTUpdateTopicRuleDestinationFuture{Future: future}
}

func (a *stub) ValidateSecurityProfileBehaviors(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	var output iot.ValidateSecurityProfileBehaviorsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot-ValidateSecurityProfileBehaviors", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateSecurityProfileBehaviorsAsync(ctx workflow.Context, input *iot.ValidateSecurityProfileBehaviorsInput) *IoTValidateSecurityProfileBehaviorsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot-ValidateSecurityProfileBehaviors", input)
	return &IoTValidateSecurityProfileBehaviorsFuture{Future: future}
}
