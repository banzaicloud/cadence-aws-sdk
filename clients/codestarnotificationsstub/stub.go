// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codestarnotificationsstub

import (
	"github.com/aws/aws-sdk-go/service/codestarnotifications"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	var output codestarnotifications.CreateNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	var output codestarnotifications.DeleteNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTargetFuture) Get(ctx workflow.Context) (*codestarnotifications.DeleteTargetOutput, error) {
	var output codestarnotifications.DeleteTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	var output codestarnotifications.DescribeNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventTypesFuture) Get(ctx workflow.Context) (*codestarnotifications.ListEventTypesOutput, error) {
	var output codestarnotifications.ListEventTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNotificationRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNotificationRulesFuture) Get(ctx workflow.Context) (*codestarnotifications.ListNotificationRulesOutput, error) {
	var output codestarnotifications.ListNotificationRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.ListTagsForResourceOutput, error) {
	var output codestarnotifications.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTargetsFuture) Get(ctx workflow.Context) (*codestarnotifications.ListTargetsOutput, error) {
	var output codestarnotifications.ListTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubscribeFuture) Get(ctx workflow.Context) (*codestarnotifications.SubscribeOutput, error) {
	var output codestarnotifications.SubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.TagResourceOutput, error) {
	var output codestarnotifications.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnsubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnsubscribeFuture) Get(ctx workflow.Context) (*codestarnotifications.UnsubscribeOutput, error) {
	var output codestarnotifications.UnsubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.UntagResourceOutput, error) {
	var output codestarnotifications.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	var output codestarnotifications.UpdateNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationRule(ctx workflow.Context, input *codestarnotifications.CreateNotificationRuleInput) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	var output codestarnotifications.CreateNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-CreateNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.CreateNotificationRuleInput) *CreateNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-CreateNotificationRule", input)
	return &CreateNotificationRuleFuture{Future: future}
}

func (a *stub) DeleteNotificationRule(ctx workflow.Context, input *codestarnotifications.DeleteNotificationRuleInput) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	var output codestarnotifications.DeleteNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.DeleteNotificationRuleInput) *DeleteNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteNotificationRule", input)
	return &DeleteNotificationRuleFuture{Future: future}
}

func (a *stub) DeleteTarget(ctx workflow.Context, input *codestarnotifications.DeleteTargetInput) (*codestarnotifications.DeleteTargetOutput, error) {
	var output codestarnotifications.DeleteTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTargetAsync(ctx workflow.Context, input *codestarnotifications.DeleteTargetInput) *DeleteTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteTarget", input)
	return &DeleteTargetFuture{Future: future}
}

func (a *stub) DescribeNotificationRule(ctx workflow.Context, input *codestarnotifications.DescribeNotificationRuleInput) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	var output codestarnotifications.DescribeNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DescribeNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.DescribeNotificationRuleInput) *DescribeNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DescribeNotificationRule", input)
	return &DescribeNotificationRuleFuture{Future: future}
}

func (a *stub) ListEventTypes(ctx workflow.Context, input *codestarnotifications.ListEventTypesInput) (*codestarnotifications.ListEventTypesOutput, error) {
	var output codestarnotifications.ListEventTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListEventTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventTypesAsync(ctx workflow.Context, input *codestarnotifications.ListEventTypesInput) *ListEventTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListEventTypes", input)
	return &ListEventTypesFuture{Future: future}
}

func (a *stub) ListNotificationRules(ctx workflow.Context, input *codestarnotifications.ListNotificationRulesInput) (*codestarnotifications.ListNotificationRulesOutput, error) {
	var output codestarnotifications.ListNotificationRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListNotificationRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotificationRulesAsync(ctx workflow.Context, input *codestarnotifications.ListNotificationRulesInput) *ListNotificationRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListNotificationRules", input)
	return &ListNotificationRulesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codestarnotifications.ListTagsForResourceInput) (*codestarnotifications.ListTagsForResourceOutput, error) {
	var output codestarnotifications.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codestarnotifications.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargets(ctx workflow.Context, input *codestarnotifications.ListTargetsInput) (*codestarnotifications.ListTargetsOutput, error) {
	var output codestarnotifications.ListTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsAsync(ctx workflow.Context, input *codestarnotifications.ListTargetsInput) *ListTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTargets", input)
	return &ListTargetsFuture{Future: future}
}

func (a *stub) Subscribe(ctx workflow.Context, input *codestarnotifications.SubscribeInput) (*codestarnotifications.SubscribeOutput, error) {
	var output codestarnotifications.SubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Subscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubscribeAsync(ctx workflow.Context, input *codestarnotifications.SubscribeInput) *SubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Subscribe", input)
	return &SubscribeFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codestarnotifications.TagResourceInput) (*codestarnotifications.TagResourceOutput, error) {
	var output codestarnotifications.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codestarnotifications.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) Unsubscribe(ctx workflow.Context, input *codestarnotifications.UnsubscribeInput) (*codestarnotifications.UnsubscribeOutput, error) {
	var output codestarnotifications.UnsubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Unsubscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnsubscribeAsync(ctx workflow.Context, input *codestarnotifications.UnsubscribeInput) *UnsubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Unsubscribe", input)
	return &UnsubscribeFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codestarnotifications.UntagResourceInput) (*codestarnotifications.UntagResourceOutput, error) {
	var output codestarnotifications.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codestarnotifications.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateNotificationRule(ctx workflow.Context, input *codestarnotifications.UpdateNotificationRuleInput) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	var output codestarnotifications.UpdateNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UpdateNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.UpdateNotificationRuleInput) *UpdateNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UpdateNotificationRule", input)
	return &UpdateNotificationRuleFuture{Future: future}
}
