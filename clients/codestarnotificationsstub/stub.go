// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codestarnotificationsstub

import (
	"github.com/aws/aws-sdk-go/service/codestarnotifications"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodeStarNotificationsCreateNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsCreateNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	var output codestarnotifications.CreateNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsDeleteNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsDeleteNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	var output codestarnotifications.DeleteNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsDeleteTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsDeleteTargetFuture) Get(ctx workflow.Context) (*codestarnotifications.DeleteTargetOutput, error) {
	var output codestarnotifications.DeleteTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsDescribeNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsDescribeNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	var output codestarnotifications.DescribeNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsListEventTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsListEventTypesFuture) Get(ctx workflow.Context) (*codestarnotifications.ListEventTypesOutput, error) {
	var output codestarnotifications.ListEventTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsListNotificationRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsListNotificationRulesFuture) Get(ctx workflow.Context) (*codestarnotifications.ListNotificationRulesOutput, error) {
	var output codestarnotifications.ListNotificationRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsListTagsForResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.ListTagsForResourceOutput, error) {
	var output codestarnotifications.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsListTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsListTargetsFuture) Get(ctx workflow.Context) (*codestarnotifications.ListTargetsOutput, error) {
	var output codestarnotifications.ListTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsSubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsSubscribeFuture) Get(ctx workflow.Context) (*codestarnotifications.SubscribeOutput, error) {
	var output codestarnotifications.SubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsTagResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.TagResourceOutput, error) {
	var output codestarnotifications.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsUnsubscribeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsUnsubscribeFuture) Get(ctx workflow.Context) (*codestarnotifications.UnsubscribeOutput, error) {
	var output codestarnotifications.UnsubscribeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsUntagResourceFuture) Get(ctx workflow.Context) (*codestarnotifications.UntagResourceOutput, error) {
	var output codestarnotifications.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodeStarNotificationsUpdateNotificationRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodeStarNotificationsUpdateNotificationRuleFuture) Get(ctx workflow.Context) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	var output codestarnotifications.UpdateNotificationRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationRule(ctx workflow.Context, input *codestarnotifications.CreateNotificationRuleInput) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	var output codestarnotifications.CreateNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-CreateNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.CreateNotificationRuleInput) *CodeStarNotificationsCreateNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-CreateNotificationRule", input)
	return &CodeStarNotificationsCreateNotificationRuleFuture{Future: future}
}

func (a *stub) DeleteNotificationRule(ctx workflow.Context, input *codestarnotifications.DeleteNotificationRuleInput) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	var output codestarnotifications.DeleteNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.DeleteNotificationRuleInput) *CodeStarNotificationsDeleteNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteNotificationRule", input)
	return &CodeStarNotificationsDeleteNotificationRuleFuture{Future: future}
}

func (a *stub) DeleteTarget(ctx workflow.Context, input *codestarnotifications.DeleteTargetInput) (*codestarnotifications.DeleteTargetOutput, error) {
	var output codestarnotifications.DeleteTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTargetAsync(ctx workflow.Context, input *codestarnotifications.DeleteTargetInput) *CodeStarNotificationsDeleteTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DeleteTarget", input)
	return &CodeStarNotificationsDeleteTargetFuture{Future: future}
}

func (a *stub) DescribeNotificationRule(ctx workflow.Context, input *codestarnotifications.DescribeNotificationRuleInput) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	var output codestarnotifications.DescribeNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DescribeNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.DescribeNotificationRuleInput) *CodeStarNotificationsDescribeNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-DescribeNotificationRule", input)
	return &CodeStarNotificationsDescribeNotificationRuleFuture{Future: future}
}

func (a *stub) ListEventTypes(ctx workflow.Context, input *codestarnotifications.ListEventTypesInput) (*codestarnotifications.ListEventTypesOutput, error) {
	var output codestarnotifications.ListEventTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListEventTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventTypesAsync(ctx workflow.Context, input *codestarnotifications.ListEventTypesInput) *CodeStarNotificationsListEventTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListEventTypes", input)
	return &CodeStarNotificationsListEventTypesFuture{Future: future}
}

func (a *stub) ListNotificationRules(ctx workflow.Context, input *codestarnotifications.ListNotificationRulesInput) (*codestarnotifications.ListNotificationRulesOutput, error) {
	var output codestarnotifications.ListNotificationRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListNotificationRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotificationRulesAsync(ctx workflow.Context, input *codestarnotifications.ListNotificationRulesInput) *CodeStarNotificationsListNotificationRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListNotificationRules", input)
	return &CodeStarNotificationsListNotificationRulesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codestarnotifications.ListTagsForResourceInput) (*codestarnotifications.ListTagsForResourceOutput, error) {
	var output codestarnotifications.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codestarnotifications.ListTagsForResourceInput) *CodeStarNotificationsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTagsForResource", input)
	return &CodeStarNotificationsListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTargets(ctx workflow.Context, input *codestarnotifications.ListTargetsInput) (*codestarnotifications.ListTargetsOutput, error) {
	var output codestarnotifications.ListTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTargetsAsync(ctx workflow.Context, input *codestarnotifications.ListTargetsInput) *CodeStarNotificationsListTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-ListTargets", input)
	return &CodeStarNotificationsListTargetsFuture{Future: future}
}

func (a *stub) Subscribe(ctx workflow.Context, input *codestarnotifications.SubscribeInput) (*codestarnotifications.SubscribeOutput, error) {
	var output codestarnotifications.SubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Subscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubscribeAsync(ctx workflow.Context, input *codestarnotifications.SubscribeInput) *CodeStarNotificationsSubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Subscribe", input)
	return &CodeStarNotificationsSubscribeFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codestarnotifications.TagResourceInput) (*codestarnotifications.TagResourceOutput, error) {
	var output codestarnotifications.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codestarnotifications.TagResourceInput) *CodeStarNotificationsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-TagResource", input)
	return &CodeStarNotificationsTagResourceFuture{Future: future}
}

func (a *stub) Unsubscribe(ctx workflow.Context, input *codestarnotifications.UnsubscribeInput) (*codestarnotifications.UnsubscribeOutput, error) {
	var output codestarnotifications.UnsubscribeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Unsubscribe", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnsubscribeAsync(ctx workflow.Context, input *codestarnotifications.UnsubscribeInput) *CodeStarNotificationsUnsubscribeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-Unsubscribe", input)
	return &CodeStarNotificationsUnsubscribeFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codestarnotifications.UntagResourceInput) (*codestarnotifications.UntagResourceOutput, error) {
	var output codestarnotifications.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codestarnotifications.UntagResourceInput) *CodeStarNotificationsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UntagResource", input)
	return &CodeStarNotificationsUntagResourceFuture{Future: future}
}

func (a *stub) UpdateNotificationRule(ctx workflow.Context, input *codestarnotifications.UpdateNotificationRuleInput) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	var output codestarnotifications.UpdateNotificationRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UpdateNotificationRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNotificationRuleAsync(ctx workflow.Context, input *codestarnotifications.UpdateNotificationRuleInput) *CodeStarNotificationsUpdateNotificationRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codestarnotifications-UpdateNotificationRule", input)
	return &CodeStarNotificationsUpdateNotificationRuleFuture{Future: future}
}
