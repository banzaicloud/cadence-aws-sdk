// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package comprehendstub

import (
	"github.com/aws/aws-sdk-go/service/comprehend"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchDetectDominantLanguageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDetectDominantLanguageFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	var output comprehend.BatchDetectDominantLanguageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDetectEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDetectEntitiesFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectEntitiesOutput, error) {
	var output comprehend.BatchDetectEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDetectKeyPhrasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDetectKeyPhrasesFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	var output comprehend.BatchDetectKeyPhrasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDetectSentimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDetectSentimentFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectSentimentOutput, error) {
	var output comprehend.BatchDetectSentimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDetectSyntaxFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDetectSyntaxFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectSyntaxOutput, error) {
	var output comprehend.BatchDetectSyntaxOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ClassifyDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ClassifyDocumentFuture) Get(ctx workflow.Context) (*comprehend.ClassifyDocumentOutput, error) {
	var output comprehend.ClassifyDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.CreateDocumentClassifierOutput, error) {
	var output comprehend.CreateDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEndpointFuture) Get(ctx workflow.Context) (*comprehend.CreateEndpointOutput, error) {
	var output comprehend.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.CreateEntityRecognizerOutput, error) {
	var output comprehend.CreateEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.DeleteDocumentClassifierOutput, error) {
	var output comprehend.DeleteDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEndpointFuture) Get(ctx workflow.Context) (*comprehend.DeleteEndpointOutput, error) {
	var output comprehend.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.DeleteEntityRecognizerOutput, error) {
	var output comprehend.DeleteEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDocumentClassificationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDocumentClassificationJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeDocumentClassificationJobOutput, error) {
	var output comprehend.DescribeDocumentClassificationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.DescribeDocumentClassifierOutput, error) {
	var output comprehend.DescribeDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	var output comprehend.DescribeDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointFuture) Get(ctx workflow.Context) (*comprehend.DescribeEndpointOutput, error) {
	var output comprehend.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribeEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.DescribeEntityRecognizerOutput, error) {
	var output comprehend.DescribeEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeEventsDetectionJobOutput, error) {
	var output comprehend.DescribeEventsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.DescribeKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribePiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	var output comprehend.DescribeSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTopicsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTopicsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	var output comprehend.DescribeTopicsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectDominantLanguageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectDominantLanguageFuture) Get(ctx workflow.Context) (*comprehend.DetectDominantLanguageOutput, error) {
	var output comprehend.DetectDominantLanguageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectEntitiesFuture) Get(ctx workflow.Context) (*comprehend.DetectEntitiesOutput, error) {
	var output comprehend.DetectEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectKeyPhrasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectKeyPhrasesFuture) Get(ctx workflow.Context) (*comprehend.DetectKeyPhrasesOutput, error) {
	var output comprehend.DetectKeyPhrasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectPiiEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectPiiEntitiesFuture) Get(ctx workflow.Context) (*comprehend.DetectPiiEntitiesOutput, error) {
	var output comprehend.DetectPiiEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectSentimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectSentimentFuture) Get(ctx workflow.Context) (*comprehend.DetectSentimentOutput, error) {
	var output comprehend.DetectSentimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetectSyntaxFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetectSyntaxFuture) Get(ctx workflow.Context) (*comprehend.DetectSyntaxOutput, error) {
	var output comprehend.DetectSyntaxOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDocumentClassificationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDocumentClassificationJobsFuture) Get(ctx workflow.Context) (*comprehend.ListDocumentClassificationJobsOutput, error) {
	var output comprehend.ListDocumentClassificationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDocumentClassifiersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDocumentClassifiersFuture) Get(ctx workflow.Context) (*comprehend.ListDocumentClassifiersOutput, error) {
	var output comprehend.ListDocumentClassifiersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDominantLanguageDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDominantLanguageDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	var output comprehend.ListDominantLanguageDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEndpointsFuture) Get(ctx workflow.Context) (*comprehend.ListEndpointsOutput, error) {
	var output comprehend.ListEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEntitiesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEntitiesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListEntitiesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEntityRecognizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEntityRecognizersFuture) Get(ctx workflow.Context) (*comprehend.ListEntityRecognizersOutput, error) {
	var output comprehend.ListEntityRecognizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListEventsDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListEventsDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListEventsDetectionJobsOutput, error) {
	var output comprehend.ListEventsDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListKeyPhrasesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListKeyPhrasesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	var output comprehend.ListKeyPhrasesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPiiEntitiesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPiiEntitiesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListPiiEntitiesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSentimentDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSentimentDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	var output comprehend.ListSentimentDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*comprehend.ListTagsForResourceOutput, error) {
	var output comprehend.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTopicsDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTopicsDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	var output comprehend.ListTopicsDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDocumentClassificationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDocumentClassificationJobFuture) Get(ctx workflow.Context) (*comprehend.StartDocumentClassificationJobOutput, error) {
	var output comprehend.StartDocumentClassificationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StartDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	var output comprehend.StartEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartEventsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartEventsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartEventsDetectionJobOutput, error) {
	var output comprehend.StartEventsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StartKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartPiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartPiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StartPiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartSentimentDetectionJobOutput, error) {
	var output comprehend.StartSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartTopicsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartTopicsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartTopicsDetectionJobOutput, error) {
	var output comprehend.StartTopicsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StopDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	var output comprehend.StopEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopEventsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopEventsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopEventsDetectionJobOutput, error) {
	var output comprehend.StopEventsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StopKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopPiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopPiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StopPiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopSentimentDetectionJobOutput, error) {
	var output comprehend.StopSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTrainingDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTrainingDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.StopTrainingDocumentClassifierOutput, error) {
	var output comprehend.StopTrainingDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopTrainingEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopTrainingEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.StopTrainingEntityRecognizerOutput, error) {
	var output comprehend.StopTrainingEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*comprehend.TagResourceOutput, error) {
	var output comprehend.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*comprehend.UntagResourceOutput, error) {
	var output comprehend.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEndpointFuture) Get(ctx workflow.Context) (*comprehend.UpdateEndpointOutput, error) {
	var output comprehend.UpdateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectDominantLanguage(ctx workflow.Context, input *comprehend.BatchDetectDominantLanguageInput) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	var output comprehend.BatchDetectDominantLanguageOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectDominantLanguage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectDominantLanguageAsync(ctx workflow.Context, input *comprehend.BatchDetectDominantLanguageInput) *BatchDetectDominantLanguageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectDominantLanguage", input)
	return &BatchDetectDominantLanguageFuture{Future: future}
}

func (a *stub) BatchDetectEntities(ctx workflow.Context, input *comprehend.BatchDetectEntitiesInput) (*comprehend.BatchDetectEntitiesOutput, error) {
	var output comprehend.BatchDetectEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectEntitiesAsync(ctx workflow.Context, input *comprehend.BatchDetectEntitiesInput) *BatchDetectEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectEntities", input)
	return &BatchDetectEntitiesFuture{Future: future}
}

func (a *stub) BatchDetectKeyPhrases(ctx workflow.Context, input *comprehend.BatchDetectKeyPhrasesInput) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	var output comprehend.BatchDetectKeyPhrasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectKeyPhrases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectKeyPhrasesAsync(ctx workflow.Context, input *comprehend.BatchDetectKeyPhrasesInput) *BatchDetectKeyPhrasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectKeyPhrases", input)
	return &BatchDetectKeyPhrasesFuture{Future: future}
}

func (a *stub) BatchDetectSentiment(ctx workflow.Context, input *comprehend.BatchDetectSentimentInput) (*comprehend.BatchDetectSentimentOutput, error) {
	var output comprehend.BatchDetectSentimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSentiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectSentimentAsync(ctx workflow.Context, input *comprehend.BatchDetectSentimentInput) *BatchDetectSentimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSentiment", input)
	return &BatchDetectSentimentFuture{Future: future}
}

func (a *stub) BatchDetectSyntax(ctx workflow.Context, input *comprehend.BatchDetectSyntaxInput) (*comprehend.BatchDetectSyntaxOutput, error) {
	var output comprehend.BatchDetectSyntaxOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSyntax", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectSyntaxAsync(ctx workflow.Context, input *comprehend.BatchDetectSyntaxInput) *BatchDetectSyntaxFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSyntax", input)
	return &BatchDetectSyntaxFuture{Future: future}
}

func (a *stub) ClassifyDocument(ctx workflow.Context, input *comprehend.ClassifyDocumentInput) (*comprehend.ClassifyDocumentOutput, error) {
	var output comprehend.ClassifyDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ClassifyDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClassifyDocumentAsync(ctx workflow.Context, input *comprehend.ClassifyDocumentInput) *ClassifyDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ClassifyDocument", input)
	return &ClassifyDocumentFuture{Future: future}
}

func (a *stub) CreateDocumentClassifier(ctx workflow.Context, input *comprehend.CreateDocumentClassifierInput) (*comprehend.CreateDocumentClassifierOutput, error) {
	var output comprehend.CreateDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentClassifierAsync(ctx workflow.Context, input *comprehend.CreateDocumentClassifierInput) *CreateDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateDocumentClassifier", input)
	return &CreateDocumentClassifierFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *comprehend.CreateEndpointInput) (*comprehend.CreateEndpointOutput, error) {
	var output comprehend.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *comprehend.CreateEndpointInput) *CreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEndpoint", input)
	return &CreateEndpointFuture{Future: future}
}

func (a *stub) CreateEntityRecognizer(ctx workflow.Context, input *comprehend.CreateEntityRecognizerInput) (*comprehend.CreateEntityRecognizerOutput, error) {
	var output comprehend.CreateEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEntityRecognizerAsync(ctx workflow.Context, input *comprehend.CreateEntityRecognizerInput) *CreateEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEntityRecognizer", input)
	return &CreateEntityRecognizerFuture{Future: future}
}

func (a *stub) DeleteDocumentClassifier(ctx workflow.Context, input *comprehend.DeleteDocumentClassifierInput) (*comprehend.DeleteDocumentClassifierOutput, error) {
	var output comprehend.DeleteDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentClassifierAsync(ctx workflow.Context, input *comprehend.DeleteDocumentClassifierInput) *DeleteDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteDocumentClassifier", input)
	return &DeleteDocumentClassifierFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *comprehend.DeleteEndpointInput) (*comprehend.DeleteEndpointOutput, error) {
	var output comprehend.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *comprehend.DeleteEndpointInput) *DeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEndpoint", input)
	return &DeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEntityRecognizer(ctx workflow.Context, input *comprehend.DeleteEntityRecognizerInput) (*comprehend.DeleteEntityRecognizerOutput, error) {
	var output comprehend.DeleteEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEntityRecognizerAsync(ctx workflow.Context, input *comprehend.DeleteEntityRecognizerInput) *DeleteEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEntityRecognizer", input)
	return &DeleteEntityRecognizerFuture{Future: future}
}

func (a *stub) DescribeDocumentClassificationJob(ctx workflow.Context, input *comprehend.DescribeDocumentClassificationJobInput) (*comprehend.DescribeDocumentClassificationJobOutput, error) {
	var output comprehend.DescribeDocumentClassificationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassificationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentClassificationJobAsync(ctx workflow.Context, input *comprehend.DescribeDocumentClassificationJobInput) *DescribeDocumentClassificationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassificationJob", input)
	return &DescribeDocumentClassificationJobFuture{Future: future}
}

func (a *stub) DescribeDocumentClassifier(ctx workflow.Context, input *comprehend.DescribeDocumentClassifierInput) (*comprehend.DescribeDocumentClassifierOutput, error) {
	var output comprehend.DescribeDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentClassifierAsync(ctx workflow.Context, input *comprehend.DescribeDocumentClassifierInput) *DescribeDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassifier", input)
	return &DescribeDocumentClassifierFuture{Future: future}
}

func (a *stub) DescribeDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	var output comprehend.DescribeDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput) *DescribeDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDominantLanguageDetectionJob", input)
	return &DescribeDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) DescribeEndpoint(ctx workflow.Context, input *comprehend.DescribeEndpointInput) (*comprehend.DescribeEndpointOutput, error) {
	var output comprehend.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointAsync(ctx workflow.Context, input *comprehend.DescribeEndpointInput) *DescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEndpoint", input)
	return &DescribeEndpointFuture{Future: future}
}

func (a *stub) DescribeEntitiesDetectionJob(ctx workflow.Context, input *comprehend.DescribeEntitiesDetectionJobInput) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribeEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeEntitiesDetectionJobInput) *DescribeEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntitiesDetectionJob", input)
	return &DescribeEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) DescribeEntityRecognizer(ctx workflow.Context, input *comprehend.DescribeEntityRecognizerInput) (*comprehend.DescribeEntityRecognizerOutput, error) {
	var output comprehend.DescribeEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEntityRecognizerAsync(ctx workflow.Context, input *comprehend.DescribeEntityRecognizerInput) *DescribeEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntityRecognizer", input)
	return &DescribeEntityRecognizerFuture{Future: future}
}

func (a *stub) DescribeEventsDetectionJob(ctx workflow.Context, input *comprehend.DescribeEventsDetectionJobInput) (*comprehend.DescribeEventsDetectionJobOutput, error) {
	var output comprehend.DescribeEventsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEventsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeEventsDetectionJobInput) *DescribeEventsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEventsDetectionJob", input)
	return &DescribeEventsDetectionJobFuture{Future: future}
}

func (a *stub) DescribeKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.DescribeKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput) *DescribeKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeKeyPhrasesDetectionJob", input)
	return &DescribeKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) DescribePiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribePiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribePiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput) *DescribePiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribePiiEntitiesDetectionJob", input)
	return &DescribePiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) DescribeSentimentDetectionJob(ctx workflow.Context, input *comprehend.DescribeSentimentDetectionJobInput) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	var output comprehend.DescribeSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeSentimentDetectionJobInput) *DescribeSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeSentimentDetectionJob", input)
	return &DescribeSentimentDetectionJobFuture{Future: future}
}

func (a *stub) DescribeTopicsDetectionJob(ctx workflow.Context, input *comprehend.DescribeTopicsDetectionJobInput) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	var output comprehend.DescribeTopicsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeTopicsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTopicsDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeTopicsDetectionJobInput) *DescribeTopicsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeTopicsDetectionJob", input)
	return &DescribeTopicsDetectionJobFuture{Future: future}
}

func (a *stub) DetectDominantLanguage(ctx workflow.Context, input *comprehend.DetectDominantLanguageInput) (*comprehend.DetectDominantLanguageOutput, error) {
	var output comprehend.DetectDominantLanguageOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectDominantLanguage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectDominantLanguageAsync(ctx workflow.Context, input *comprehend.DetectDominantLanguageInput) *DetectDominantLanguageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectDominantLanguage", input)
	return &DetectDominantLanguageFuture{Future: future}
}

func (a *stub) DetectEntities(ctx workflow.Context, input *comprehend.DetectEntitiesInput) (*comprehend.DetectEntitiesOutput, error) {
	var output comprehend.DetectEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectEntitiesAsync(ctx workflow.Context, input *comprehend.DetectEntitiesInput) *DetectEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectEntities", input)
	return &DetectEntitiesFuture{Future: future}
}

func (a *stub) DetectKeyPhrases(ctx workflow.Context, input *comprehend.DetectKeyPhrasesInput) (*comprehend.DetectKeyPhrasesOutput, error) {
	var output comprehend.DetectKeyPhrasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectKeyPhrases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectKeyPhrasesAsync(ctx workflow.Context, input *comprehend.DetectKeyPhrasesInput) *DetectKeyPhrasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectKeyPhrases", input)
	return &DetectKeyPhrasesFuture{Future: future}
}

func (a *stub) DetectPiiEntities(ctx workflow.Context, input *comprehend.DetectPiiEntitiesInput) (*comprehend.DetectPiiEntitiesOutput, error) {
	var output comprehend.DetectPiiEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectPiiEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectPiiEntitiesAsync(ctx workflow.Context, input *comprehend.DetectPiiEntitiesInput) *DetectPiiEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectPiiEntities", input)
	return &DetectPiiEntitiesFuture{Future: future}
}

func (a *stub) DetectSentiment(ctx workflow.Context, input *comprehend.DetectSentimentInput) (*comprehend.DetectSentimentOutput, error) {
	var output comprehend.DetectSentimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSentiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectSentimentAsync(ctx workflow.Context, input *comprehend.DetectSentimentInput) *DetectSentimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSentiment", input)
	return &DetectSentimentFuture{Future: future}
}

func (a *stub) DetectSyntax(ctx workflow.Context, input *comprehend.DetectSyntaxInput) (*comprehend.DetectSyntaxOutput, error) {
	var output comprehend.DetectSyntaxOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSyntax", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectSyntaxAsync(ctx workflow.Context, input *comprehend.DetectSyntaxInput) *DetectSyntaxFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSyntax", input)
	return &DetectSyntaxFuture{Future: future}
}

func (a *stub) ListDocumentClassificationJobs(ctx workflow.Context, input *comprehend.ListDocumentClassificationJobsInput) (*comprehend.ListDocumentClassificationJobsOutput, error) {
	var output comprehend.ListDocumentClassificationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassificationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentClassificationJobsAsync(ctx workflow.Context, input *comprehend.ListDocumentClassificationJobsInput) *ListDocumentClassificationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassificationJobs", input)
	return &ListDocumentClassificationJobsFuture{Future: future}
}

func (a *stub) ListDocumentClassifiers(ctx workflow.Context, input *comprehend.ListDocumentClassifiersInput) (*comprehend.ListDocumentClassifiersOutput, error) {
	var output comprehend.ListDocumentClassifiersOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassifiers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentClassifiersAsync(ctx workflow.Context, input *comprehend.ListDocumentClassifiersInput) *ListDocumentClassifiersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassifiers", input)
	return &ListDocumentClassifiersFuture{Future: future}
}

func (a *stub) ListDominantLanguageDetectionJobs(ctx workflow.Context, input *comprehend.ListDominantLanguageDetectionJobsInput) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	var output comprehend.ListDominantLanguageDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDominantLanguageDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDominantLanguageDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListDominantLanguageDetectionJobsInput) *ListDominantLanguageDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDominantLanguageDetectionJobs", input)
	return &ListDominantLanguageDetectionJobsFuture{Future: future}
}

func (a *stub) ListEndpoints(ctx workflow.Context, input *comprehend.ListEndpointsInput) (*comprehend.ListEndpointsOutput, error) {
	var output comprehend.ListEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointsAsync(ctx workflow.Context, input *comprehend.ListEndpointsInput) *ListEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEndpoints", input)
	return &ListEndpointsFuture{Future: future}
}

func (a *stub) ListEntitiesDetectionJobs(ctx workflow.Context, input *comprehend.ListEntitiesDetectionJobsInput) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListEntitiesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntitiesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntitiesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListEntitiesDetectionJobsInput) *ListEntitiesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntitiesDetectionJobs", input)
	return &ListEntitiesDetectionJobsFuture{Future: future}
}

func (a *stub) ListEntityRecognizers(ctx workflow.Context, input *comprehend.ListEntityRecognizersInput) (*comprehend.ListEntityRecognizersOutput, error) {
	var output comprehend.ListEntityRecognizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntityRecognizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntityRecognizersAsync(ctx workflow.Context, input *comprehend.ListEntityRecognizersInput) *ListEntityRecognizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntityRecognizers", input)
	return &ListEntityRecognizersFuture{Future: future}
}

func (a *stub) ListEventsDetectionJobs(ctx workflow.Context, input *comprehend.ListEventsDetectionJobsInput) (*comprehend.ListEventsDetectionJobsOutput, error) {
	var output comprehend.ListEventsDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEventsDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEventsDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListEventsDetectionJobsInput) *ListEventsDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEventsDetectionJobs", input)
	return &ListEventsDetectionJobsFuture{Future: future}
}

func (a *stub) ListKeyPhrasesDetectionJobs(ctx workflow.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	var output comprehend.ListKeyPhrasesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListKeyPhrasesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeyPhrasesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput) *ListKeyPhrasesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListKeyPhrasesDetectionJobs", input)
	return &ListKeyPhrasesDetectionJobsFuture{Future: future}
}

func (a *stub) ListPiiEntitiesDetectionJobs(ctx workflow.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListPiiEntitiesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListPiiEntitiesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPiiEntitiesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput) *ListPiiEntitiesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListPiiEntitiesDetectionJobs", input)
	return &ListPiiEntitiesDetectionJobsFuture{Future: future}
}

func (a *stub) ListSentimentDetectionJobs(ctx workflow.Context, input *comprehend.ListSentimentDetectionJobsInput) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	var output comprehend.ListSentimentDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListSentimentDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSentimentDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListSentimentDetectionJobsInput) *ListSentimentDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListSentimentDetectionJobs", input)
	return &ListSentimentDetectionJobsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *comprehend.ListTagsForResourceInput) (*comprehend.ListTagsForResourceOutput, error) {
	var output comprehend.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *comprehend.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTopicsDetectionJobs(ctx workflow.Context, input *comprehend.ListTopicsDetectionJobsInput) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	var output comprehend.ListTopicsDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTopicsDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTopicsDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListTopicsDetectionJobsInput) *ListTopicsDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTopicsDetectionJobs", input)
	return &ListTopicsDetectionJobsFuture{Future: future}
}

func (a *stub) StartDocumentClassificationJob(ctx workflow.Context, input *comprehend.StartDocumentClassificationJobInput) (*comprehend.StartDocumentClassificationJobOutput, error) {
	var output comprehend.StartDocumentClassificationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDocumentClassificationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDocumentClassificationJobAsync(ctx workflow.Context, input *comprehend.StartDocumentClassificationJobInput) *StartDocumentClassificationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDocumentClassificationJob", input)
	return &StartDocumentClassificationJobFuture{Future: future}
}

func (a *stub) StartDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.StartDominantLanguageDetectionJobInput) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StartDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.StartDominantLanguageDetectionJobInput) *StartDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDominantLanguageDetectionJob", input)
	return &StartDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) StartEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StartEntitiesDetectionJobInput) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	var output comprehend.StartEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartEntitiesDetectionJobInput) *StartEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEntitiesDetectionJob", input)
	return &StartEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StartEventsDetectionJob(ctx workflow.Context, input *comprehend.StartEventsDetectionJobInput) (*comprehend.StartEventsDetectionJobOutput, error) {
	var output comprehend.StartEventsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEventsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartEventsDetectionJobAsync(ctx workflow.Context, input *comprehend.StartEventsDetectionJobInput) *StartEventsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEventsDetectionJob", input)
	return &StartEventsDetectionJobFuture{Future: future}
}

func (a *stub) StartKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.StartKeyPhrasesDetectionJobInput) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StartKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartKeyPhrasesDetectionJobInput) *StartKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartKeyPhrasesDetectionJob", input)
	return &StartKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) StartPiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StartPiiEntitiesDetectionJobInput) (*comprehend.StartPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StartPiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartPiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartPiiEntitiesDetectionJobInput) *StartPiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartPiiEntitiesDetectionJob", input)
	return &StartPiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StartSentimentDetectionJob(ctx workflow.Context, input *comprehend.StartSentimentDetectionJobInput) (*comprehend.StartSentimentDetectionJobOutput, error) {
	var output comprehend.StartSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.StartSentimentDetectionJobInput) *StartSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartSentimentDetectionJob", input)
	return &StartSentimentDetectionJobFuture{Future: future}
}

func (a *stub) StartTopicsDetectionJob(ctx workflow.Context, input *comprehend.StartTopicsDetectionJobInput) (*comprehend.StartTopicsDetectionJobOutput, error) {
	var output comprehend.StartTopicsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartTopicsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTopicsDetectionJobAsync(ctx workflow.Context, input *comprehend.StartTopicsDetectionJobInput) *StartTopicsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartTopicsDetectionJob", input)
	return &StartTopicsDetectionJobFuture{Future: future}
}

func (a *stub) StopDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.StopDominantLanguageDetectionJobInput) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StopDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.StopDominantLanguageDetectionJobInput) *StopDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopDominantLanguageDetectionJob", input)
	return &StopDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) StopEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StopEntitiesDetectionJobInput) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	var output comprehend.StopEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopEntitiesDetectionJobInput) *StopEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEntitiesDetectionJob", input)
	return &StopEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StopEventsDetectionJob(ctx workflow.Context, input *comprehend.StopEventsDetectionJobInput) (*comprehend.StopEventsDetectionJobOutput, error) {
	var output comprehend.StopEventsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEventsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopEventsDetectionJobAsync(ctx workflow.Context, input *comprehend.StopEventsDetectionJobInput) *StopEventsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEventsDetectionJob", input)
	return &StopEventsDetectionJobFuture{Future: future}
}

func (a *stub) StopKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.StopKeyPhrasesDetectionJobInput) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StopKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopKeyPhrasesDetectionJobInput) *StopKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopKeyPhrasesDetectionJob", input)
	return &StopKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) StopPiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StopPiiEntitiesDetectionJobInput) (*comprehend.StopPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StopPiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopPiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopPiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopPiiEntitiesDetectionJobInput) *StopPiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopPiiEntitiesDetectionJob", input)
	return &StopPiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StopSentimentDetectionJob(ctx workflow.Context, input *comprehend.StopSentimentDetectionJobInput) (*comprehend.StopSentimentDetectionJobOutput, error) {
	var output comprehend.StopSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.StopSentimentDetectionJobInput) *StopSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopSentimentDetectionJob", input)
	return &StopSentimentDetectionJobFuture{Future: future}
}

func (a *stub) StopTrainingDocumentClassifier(ctx workflow.Context, input *comprehend.StopTrainingDocumentClassifierInput) (*comprehend.StopTrainingDocumentClassifierOutput, error) {
	var output comprehend.StopTrainingDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingDocumentClassifierAsync(ctx workflow.Context, input *comprehend.StopTrainingDocumentClassifierInput) *StopTrainingDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingDocumentClassifier", input)
	return &StopTrainingDocumentClassifierFuture{Future: future}
}

func (a *stub) StopTrainingEntityRecognizer(ctx workflow.Context, input *comprehend.StopTrainingEntityRecognizerInput) (*comprehend.StopTrainingEntityRecognizerOutput, error) {
	var output comprehend.StopTrainingEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingEntityRecognizerAsync(ctx workflow.Context, input *comprehend.StopTrainingEntityRecognizerInput) *StopTrainingEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingEntityRecognizer", input)
	return &StopTrainingEntityRecognizerFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *comprehend.TagResourceInput) (*comprehend.TagResourceOutput, error) {
	var output comprehend.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *comprehend.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *comprehend.UntagResourceInput) (*comprehend.UntagResourceOutput, error) {
	var output comprehend.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *comprehend.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateEndpoint(ctx workflow.Context, input *comprehend.UpdateEndpointInput) (*comprehend.UpdateEndpointOutput, error) {
	var output comprehend.UpdateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-UpdateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointAsync(ctx workflow.Context, input *comprehend.UpdateEndpointInput) *UpdateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-UpdateEndpoint", input)
	return &UpdateEndpointFuture{Future: future}
}
