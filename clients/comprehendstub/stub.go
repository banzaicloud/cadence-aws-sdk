// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package comprehendstub

import (
	"github.com/aws/aws-sdk-go/service/comprehend"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ComprehendBatchDetectDominantLanguageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendBatchDetectDominantLanguageFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	var output comprehend.BatchDetectDominantLanguageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendBatchDetectEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendBatchDetectEntitiesFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectEntitiesOutput, error) {
	var output comprehend.BatchDetectEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendBatchDetectKeyPhrasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendBatchDetectKeyPhrasesFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	var output comprehend.BatchDetectKeyPhrasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendBatchDetectSentimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendBatchDetectSentimentFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectSentimentOutput, error) {
	var output comprehend.BatchDetectSentimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendBatchDetectSyntaxFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendBatchDetectSyntaxFuture) Get(ctx workflow.Context) (*comprehend.BatchDetectSyntaxOutput, error) {
	var output comprehend.BatchDetectSyntaxOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendClassifyDocumentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendClassifyDocumentFuture) Get(ctx workflow.Context) (*comprehend.ClassifyDocumentOutput, error) {
	var output comprehend.ClassifyDocumentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendCreateDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendCreateDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.CreateDocumentClassifierOutput, error) {
	var output comprehend.CreateDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendCreateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendCreateEndpointFuture) Get(ctx workflow.Context) (*comprehend.CreateEndpointOutput, error) {
	var output comprehend.CreateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendCreateEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendCreateEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.CreateEntityRecognizerOutput, error) {
	var output comprehend.CreateEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDeleteDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDeleteDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.DeleteDocumentClassifierOutput, error) {
	var output comprehend.DeleteDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDeleteEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDeleteEndpointFuture) Get(ctx workflow.Context) (*comprehend.DeleteEndpointOutput, error) {
	var output comprehend.DeleteEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDeleteEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDeleteEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.DeleteEntityRecognizerOutput, error) {
	var output comprehend.DeleteEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeDocumentClassificationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeDocumentClassificationJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeDocumentClassificationJobOutput, error) {
	var output comprehend.DescribeDocumentClassificationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.DescribeDocumentClassifierOutput, error) {
	var output comprehend.DescribeDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	var output comprehend.DescribeDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeEndpointFuture) Get(ctx workflow.Context) (*comprehend.DescribeEndpointOutput, error) {
	var output comprehend.DescribeEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribeEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.DescribeEntityRecognizerOutput, error) {
	var output comprehend.DescribeEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.DescribeKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribePiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribePiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribePiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	var output comprehend.DescribeSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDescribeTopicsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDescribeTopicsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	var output comprehend.DescribeTopicsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectDominantLanguageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectDominantLanguageFuture) Get(ctx workflow.Context) (*comprehend.DetectDominantLanguageOutput, error) {
	var output comprehend.DetectDominantLanguageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectEntitiesFuture) Get(ctx workflow.Context) (*comprehend.DetectEntitiesOutput, error) {
	var output comprehend.DetectEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectKeyPhrasesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectKeyPhrasesFuture) Get(ctx workflow.Context) (*comprehend.DetectKeyPhrasesOutput, error) {
	var output comprehend.DetectKeyPhrasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectPiiEntitiesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectPiiEntitiesFuture) Get(ctx workflow.Context) (*comprehend.DetectPiiEntitiesOutput, error) {
	var output comprehend.DetectPiiEntitiesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectSentimentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectSentimentFuture) Get(ctx workflow.Context) (*comprehend.DetectSentimentOutput, error) {
	var output comprehend.DetectSentimentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendDetectSyntaxFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendDetectSyntaxFuture) Get(ctx workflow.Context) (*comprehend.DetectSyntaxOutput, error) {
	var output comprehend.DetectSyntaxOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListDocumentClassificationJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListDocumentClassificationJobsFuture) Get(ctx workflow.Context) (*comprehend.ListDocumentClassificationJobsOutput, error) {
	var output comprehend.ListDocumentClassificationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListDocumentClassifiersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListDocumentClassifiersFuture) Get(ctx workflow.Context) (*comprehend.ListDocumentClassifiersOutput, error) {
	var output comprehend.ListDocumentClassifiersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListDominantLanguageDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListDominantLanguageDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	var output comprehend.ListDominantLanguageDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListEndpointsFuture) Get(ctx workflow.Context) (*comprehend.ListEndpointsOutput, error) {
	var output comprehend.ListEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListEntitiesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListEntitiesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListEntitiesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListEntityRecognizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListEntityRecognizersFuture) Get(ctx workflow.Context) (*comprehend.ListEntityRecognizersOutput, error) {
	var output comprehend.ListEntityRecognizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListKeyPhrasesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListKeyPhrasesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	var output comprehend.ListKeyPhrasesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListPiiEntitiesDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListPiiEntitiesDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListPiiEntitiesDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListSentimentDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListSentimentDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	var output comprehend.ListSentimentDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListTagsForResourceFuture) Get(ctx workflow.Context) (*comprehend.ListTagsForResourceOutput, error) {
	var output comprehend.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendListTopicsDetectionJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendListTopicsDetectionJobsFuture) Get(ctx workflow.Context) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	var output comprehend.ListTopicsDetectionJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartDocumentClassificationJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartDocumentClassificationJobFuture) Get(ctx workflow.Context) (*comprehend.StartDocumentClassificationJobOutput, error) {
	var output comprehend.StartDocumentClassificationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StartDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	var output comprehend.StartEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StartKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartPiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartPiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StartPiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartSentimentDetectionJobOutput, error) {
	var output comprehend.StartSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStartTopicsDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStartTopicsDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StartTopicsDetectionJobOutput, error) {
	var output comprehend.StartTopicsDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopDominantLanguageDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopDominantLanguageDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StopDominantLanguageDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	var output comprehend.StopEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopKeyPhrasesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopKeyPhrasesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StopKeyPhrasesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopPiiEntitiesDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopPiiEntitiesDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StopPiiEntitiesDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopSentimentDetectionJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopSentimentDetectionJobFuture) Get(ctx workflow.Context) (*comprehend.StopSentimentDetectionJobOutput, error) {
	var output comprehend.StopSentimentDetectionJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopTrainingDocumentClassifierFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopTrainingDocumentClassifierFuture) Get(ctx workflow.Context) (*comprehend.StopTrainingDocumentClassifierOutput, error) {
	var output comprehend.StopTrainingDocumentClassifierOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendStopTrainingEntityRecognizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendStopTrainingEntityRecognizerFuture) Get(ctx workflow.Context) (*comprehend.StopTrainingEntityRecognizerOutput, error) {
	var output comprehend.StopTrainingEntityRecognizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendTagResourceFuture) Get(ctx workflow.Context) (*comprehend.TagResourceOutput, error) {
	var output comprehend.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendUntagResourceFuture) Get(ctx workflow.Context) (*comprehend.UntagResourceOutput, error) {
	var output comprehend.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComprehendUpdateEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComprehendUpdateEndpointFuture) Get(ctx workflow.Context) (*comprehend.UpdateEndpointOutput, error) {
	var output comprehend.UpdateEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectDominantLanguage(ctx workflow.Context, input *comprehend.BatchDetectDominantLanguageInput) (*comprehend.BatchDetectDominantLanguageOutput, error) {
	var output comprehend.BatchDetectDominantLanguageOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectDominantLanguage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectDominantLanguageAsync(ctx workflow.Context, input *comprehend.BatchDetectDominantLanguageInput) *ComprehendBatchDetectDominantLanguageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectDominantLanguage", input)
	return &ComprehendBatchDetectDominantLanguageFuture{Future: future}
}

func (a *stub) BatchDetectEntities(ctx workflow.Context, input *comprehend.BatchDetectEntitiesInput) (*comprehend.BatchDetectEntitiesOutput, error) {
	var output comprehend.BatchDetectEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectEntitiesAsync(ctx workflow.Context, input *comprehend.BatchDetectEntitiesInput) *ComprehendBatchDetectEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectEntities", input)
	return &ComprehendBatchDetectEntitiesFuture{Future: future}
}

func (a *stub) BatchDetectKeyPhrases(ctx workflow.Context, input *comprehend.BatchDetectKeyPhrasesInput) (*comprehend.BatchDetectKeyPhrasesOutput, error) {
	var output comprehend.BatchDetectKeyPhrasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectKeyPhrases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectKeyPhrasesAsync(ctx workflow.Context, input *comprehend.BatchDetectKeyPhrasesInput) *ComprehendBatchDetectKeyPhrasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectKeyPhrases", input)
	return &ComprehendBatchDetectKeyPhrasesFuture{Future: future}
}

func (a *stub) BatchDetectSentiment(ctx workflow.Context, input *comprehend.BatchDetectSentimentInput) (*comprehend.BatchDetectSentimentOutput, error) {
	var output comprehend.BatchDetectSentimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSentiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectSentimentAsync(ctx workflow.Context, input *comprehend.BatchDetectSentimentInput) *ComprehendBatchDetectSentimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSentiment", input)
	return &ComprehendBatchDetectSentimentFuture{Future: future}
}

func (a *stub) BatchDetectSyntax(ctx workflow.Context, input *comprehend.BatchDetectSyntaxInput) (*comprehend.BatchDetectSyntaxOutput, error) {
	var output comprehend.BatchDetectSyntaxOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSyntax", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDetectSyntaxAsync(ctx workflow.Context, input *comprehend.BatchDetectSyntaxInput) *ComprehendBatchDetectSyntaxFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-BatchDetectSyntax", input)
	return &ComprehendBatchDetectSyntaxFuture{Future: future}
}

func (a *stub) ClassifyDocument(ctx workflow.Context, input *comprehend.ClassifyDocumentInput) (*comprehend.ClassifyDocumentOutput, error) {
	var output comprehend.ClassifyDocumentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ClassifyDocument", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ClassifyDocumentAsync(ctx workflow.Context, input *comprehend.ClassifyDocumentInput) *ComprehendClassifyDocumentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ClassifyDocument", input)
	return &ComprehendClassifyDocumentFuture{Future: future}
}

func (a *stub) CreateDocumentClassifier(ctx workflow.Context, input *comprehend.CreateDocumentClassifierInput) (*comprehend.CreateDocumentClassifierOutput, error) {
	var output comprehend.CreateDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDocumentClassifierAsync(ctx workflow.Context, input *comprehend.CreateDocumentClassifierInput) *ComprehendCreateDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateDocumentClassifier", input)
	return &ComprehendCreateDocumentClassifierFuture{Future: future}
}

func (a *stub) CreateEndpoint(ctx workflow.Context, input *comprehend.CreateEndpointInput) (*comprehend.CreateEndpointOutput, error) {
	var output comprehend.CreateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEndpointAsync(ctx workflow.Context, input *comprehend.CreateEndpointInput) *ComprehendCreateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEndpoint", input)
	return &ComprehendCreateEndpointFuture{Future: future}
}

func (a *stub) CreateEntityRecognizer(ctx workflow.Context, input *comprehend.CreateEntityRecognizerInput) (*comprehend.CreateEntityRecognizerOutput, error) {
	var output comprehend.CreateEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEntityRecognizerAsync(ctx workflow.Context, input *comprehend.CreateEntityRecognizerInput) *ComprehendCreateEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-CreateEntityRecognizer", input)
	return &ComprehendCreateEntityRecognizerFuture{Future: future}
}

func (a *stub) DeleteDocumentClassifier(ctx workflow.Context, input *comprehend.DeleteDocumentClassifierInput) (*comprehend.DeleteDocumentClassifierOutput, error) {
	var output comprehend.DeleteDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDocumentClassifierAsync(ctx workflow.Context, input *comprehend.DeleteDocumentClassifierInput) *ComprehendDeleteDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteDocumentClassifier", input)
	return &ComprehendDeleteDocumentClassifierFuture{Future: future}
}

func (a *stub) DeleteEndpoint(ctx workflow.Context, input *comprehend.DeleteEndpointInput) (*comprehend.DeleteEndpointOutput, error) {
	var output comprehend.DeleteEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEndpointAsync(ctx workflow.Context, input *comprehend.DeleteEndpointInput) *ComprehendDeleteEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEndpoint", input)
	return &ComprehendDeleteEndpointFuture{Future: future}
}

func (a *stub) DeleteEntityRecognizer(ctx workflow.Context, input *comprehend.DeleteEntityRecognizerInput) (*comprehend.DeleteEntityRecognizerOutput, error) {
	var output comprehend.DeleteEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEntityRecognizerAsync(ctx workflow.Context, input *comprehend.DeleteEntityRecognizerInput) *ComprehendDeleteEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DeleteEntityRecognizer", input)
	return &ComprehendDeleteEntityRecognizerFuture{Future: future}
}

func (a *stub) DescribeDocumentClassificationJob(ctx workflow.Context, input *comprehend.DescribeDocumentClassificationJobInput) (*comprehend.DescribeDocumentClassificationJobOutput, error) {
	var output comprehend.DescribeDocumentClassificationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassificationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentClassificationJobAsync(ctx workflow.Context, input *comprehend.DescribeDocumentClassificationJobInput) *ComprehendDescribeDocumentClassificationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassificationJob", input)
	return &ComprehendDescribeDocumentClassificationJobFuture{Future: future}
}

func (a *stub) DescribeDocumentClassifier(ctx workflow.Context, input *comprehend.DescribeDocumentClassifierInput) (*comprehend.DescribeDocumentClassifierOutput, error) {
	var output comprehend.DescribeDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDocumentClassifierAsync(ctx workflow.Context, input *comprehend.DescribeDocumentClassifierInput) *ComprehendDescribeDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDocumentClassifier", input)
	return &ComprehendDescribeDocumentClassifierFuture{Future: future}
}

func (a *stub) DescribeDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {
	var output comprehend.DescribeDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeDominantLanguageDetectionJobInput) *ComprehendDescribeDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeDominantLanguageDetectionJob", input)
	return &ComprehendDescribeDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) DescribeEndpoint(ctx workflow.Context, input *comprehend.DescribeEndpointInput) (*comprehend.DescribeEndpointOutput, error) {
	var output comprehend.DescribeEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointAsync(ctx workflow.Context, input *comprehend.DescribeEndpointInput) *ComprehendDescribeEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEndpoint", input)
	return &ComprehendDescribeEndpointFuture{Future: future}
}

func (a *stub) DescribeEntitiesDetectionJob(ctx workflow.Context, input *comprehend.DescribeEntitiesDetectionJobInput) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribeEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeEntitiesDetectionJobInput) *ComprehendDescribeEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntitiesDetectionJob", input)
	return &ComprehendDescribeEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) DescribeEntityRecognizer(ctx workflow.Context, input *comprehend.DescribeEntityRecognizerInput) (*comprehend.DescribeEntityRecognizerOutput, error) {
	var output comprehend.DescribeEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEntityRecognizerAsync(ctx workflow.Context, input *comprehend.DescribeEntityRecognizerInput) *ComprehendDescribeEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeEntityRecognizer", input)
	return &ComprehendDescribeEntityRecognizerFuture{Future: future}
}

func (a *stub) DescribeKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.DescribeKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeKeyPhrasesDetectionJobInput) *ComprehendDescribeKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeKeyPhrasesDetectionJob", input)
	return &ComprehendDescribeKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) DescribePiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput) (*comprehend.DescribePiiEntitiesDetectionJobOutput, error) {
	var output comprehend.DescribePiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribePiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribePiiEntitiesDetectionJobInput) *ComprehendDescribePiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribePiiEntitiesDetectionJob", input)
	return &ComprehendDescribePiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) DescribeSentimentDetectionJob(ctx workflow.Context, input *comprehend.DescribeSentimentDetectionJobInput) (*comprehend.DescribeSentimentDetectionJobOutput, error) {
	var output comprehend.DescribeSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeSentimentDetectionJobInput) *ComprehendDescribeSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeSentimentDetectionJob", input)
	return &ComprehendDescribeSentimentDetectionJobFuture{Future: future}
}

func (a *stub) DescribeTopicsDetectionJob(ctx workflow.Context, input *comprehend.DescribeTopicsDetectionJobInput) (*comprehend.DescribeTopicsDetectionJobOutput, error) {
	var output comprehend.DescribeTopicsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeTopicsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTopicsDetectionJobAsync(ctx workflow.Context, input *comprehend.DescribeTopicsDetectionJobInput) *ComprehendDescribeTopicsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DescribeTopicsDetectionJob", input)
	return &ComprehendDescribeTopicsDetectionJobFuture{Future: future}
}

func (a *stub) DetectDominantLanguage(ctx workflow.Context, input *comprehend.DetectDominantLanguageInput) (*comprehend.DetectDominantLanguageOutput, error) {
	var output comprehend.DetectDominantLanguageOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectDominantLanguage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectDominantLanguageAsync(ctx workflow.Context, input *comprehend.DetectDominantLanguageInput) *ComprehendDetectDominantLanguageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectDominantLanguage", input)
	return &ComprehendDetectDominantLanguageFuture{Future: future}
}

func (a *stub) DetectEntities(ctx workflow.Context, input *comprehend.DetectEntitiesInput) (*comprehend.DetectEntitiesOutput, error) {
	var output comprehend.DetectEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectEntitiesAsync(ctx workflow.Context, input *comprehend.DetectEntitiesInput) *ComprehendDetectEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectEntities", input)
	return &ComprehendDetectEntitiesFuture{Future: future}
}

func (a *stub) DetectKeyPhrases(ctx workflow.Context, input *comprehend.DetectKeyPhrasesInput) (*comprehend.DetectKeyPhrasesOutput, error) {
	var output comprehend.DetectKeyPhrasesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectKeyPhrases", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectKeyPhrasesAsync(ctx workflow.Context, input *comprehend.DetectKeyPhrasesInput) *ComprehendDetectKeyPhrasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectKeyPhrases", input)
	return &ComprehendDetectKeyPhrasesFuture{Future: future}
}

func (a *stub) DetectPiiEntities(ctx workflow.Context, input *comprehend.DetectPiiEntitiesInput) (*comprehend.DetectPiiEntitiesOutput, error) {
	var output comprehend.DetectPiiEntitiesOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectPiiEntities", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectPiiEntitiesAsync(ctx workflow.Context, input *comprehend.DetectPiiEntitiesInput) *ComprehendDetectPiiEntitiesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectPiiEntities", input)
	return &ComprehendDetectPiiEntitiesFuture{Future: future}
}

func (a *stub) DetectSentiment(ctx workflow.Context, input *comprehend.DetectSentimentInput) (*comprehend.DetectSentimentOutput, error) {
	var output comprehend.DetectSentimentOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSentiment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectSentimentAsync(ctx workflow.Context, input *comprehend.DetectSentimentInput) *ComprehendDetectSentimentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSentiment", input)
	return &ComprehendDetectSentimentFuture{Future: future}
}

func (a *stub) DetectSyntax(ctx workflow.Context, input *comprehend.DetectSyntaxInput) (*comprehend.DetectSyntaxOutput, error) {
	var output comprehend.DetectSyntaxOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSyntax", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetectSyntaxAsync(ctx workflow.Context, input *comprehend.DetectSyntaxInput) *ComprehendDetectSyntaxFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-DetectSyntax", input)
	return &ComprehendDetectSyntaxFuture{Future: future}
}

func (a *stub) ListDocumentClassificationJobs(ctx workflow.Context, input *comprehend.ListDocumentClassificationJobsInput) (*comprehend.ListDocumentClassificationJobsOutput, error) {
	var output comprehend.ListDocumentClassificationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassificationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentClassificationJobsAsync(ctx workflow.Context, input *comprehend.ListDocumentClassificationJobsInput) *ComprehendListDocumentClassificationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassificationJobs", input)
	return &ComprehendListDocumentClassificationJobsFuture{Future: future}
}

func (a *stub) ListDocumentClassifiers(ctx workflow.Context, input *comprehend.ListDocumentClassifiersInput) (*comprehend.ListDocumentClassifiersOutput, error) {
	var output comprehend.ListDocumentClassifiersOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassifiers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDocumentClassifiersAsync(ctx workflow.Context, input *comprehend.ListDocumentClassifiersInput) *ComprehendListDocumentClassifiersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDocumentClassifiers", input)
	return &ComprehendListDocumentClassifiersFuture{Future: future}
}

func (a *stub) ListDominantLanguageDetectionJobs(ctx workflow.Context, input *comprehend.ListDominantLanguageDetectionJobsInput) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {
	var output comprehend.ListDominantLanguageDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDominantLanguageDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDominantLanguageDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListDominantLanguageDetectionJobsInput) *ComprehendListDominantLanguageDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListDominantLanguageDetectionJobs", input)
	return &ComprehendListDominantLanguageDetectionJobsFuture{Future: future}
}

func (a *stub) ListEndpoints(ctx workflow.Context, input *comprehend.ListEndpointsInput) (*comprehend.ListEndpointsOutput, error) {
	var output comprehend.ListEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEndpointsAsync(ctx workflow.Context, input *comprehend.ListEndpointsInput) *ComprehendListEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEndpoints", input)
	return &ComprehendListEndpointsFuture{Future: future}
}

func (a *stub) ListEntitiesDetectionJobs(ctx workflow.Context, input *comprehend.ListEntitiesDetectionJobsInput) (*comprehend.ListEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListEntitiesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntitiesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntitiesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListEntitiesDetectionJobsInput) *ComprehendListEntitiesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntitiesDetectionJobs", input)
	return &ComprehendListEntitiesDetectionJobsFuture{Future: future}
}

func (a *stub) ListEntityRecognizers(ctx workflow.Context, input *comprehend.ListEntityRecognizersInput) (*comprehend.ListEntityRecognizersOutput, error) {
	var output comprehend.ListEntityRecognizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntityRecognizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListEntityRecognizersAsync(ctx workflow.Context, input *comprehend.ListEntityRecognizersInput) *ComprehendListEntityRecognizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListEntityRecognizers", input)
	return &ComprehendListEntityRecognizersFuture{Future: future}
}

func (a *stub) ListKeyPhrasesDetectionJobs(ctx workflow.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {
	var output comprehend.ListKeyPhrasesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListKeyPhrasesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeyPhrasesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListKeyPhrasesDetectionJobsInput) *ComprehendListKeyPhrasesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListKeyPhrasesDetectionJobs", input)
	return &ComprehendListKeyPhrasesDetectionJobsFuture{Future: future}
}

func (a *stub) ListPiiEntitiesDetectionJobs(ctx workflow.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput) (*comprehend.ListPiiEntitiesDetectionJobsOutput, error) {
	var output comprehend.ListPiiEntitiesDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListPiiEntitiesDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPiiEntitiesDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListPiiEntitiesDetectionJobsInput) *ComprehendListPiiEntitiesDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListPiiEntitiesDetectionJobs", input)
	return &ComprehendListPiiEntitiesDetectionJobsFuture{Future: future}
}

func (a *stub) ListSentimentDetectionJobs(ctx workflow.Context, input *comprehend.ListSentimentDetectionJobsInput) (*comprehend.ListSentimentDetectionJobsOutput, error) {
	var output comprehend.ListSentimentDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListSentimentDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSentimentDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListSentimentDetectionJobsInput) *ComprehendListSentimentDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListSentimentDetectionJobs", input)
	return &ComprehendListSentimentDetectionJobsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *comprehend.ListTagsForResourceInput) (*comprehend.ListTagsForResourceOutput, error) {
	var output comprehend.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *comprehend.ListTagsForResourceInput) *ComprehendListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTagsForResource", input)
	return &ComprehendListTagsForResourceFuture{Future: future}
}

func (a *stub) ListTopicsDetectionJobs(ctx workflow.Context, input *comprehend.ListTopicsDetectionJobsInput) (*comprehend.ListTopicsDetectionJobsOutput, error) {
	var output comprehend.ListTopicsDetectionJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTopicsDetectionJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTopicsDetectionJobsAsync(ctx workflow.Context, input *comprehend.ListTopicsDetectionJobsInput) *ComprehendListTopicsDetectionJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-ListTopicsDetectionJobs", input)
	return &ComprehendListTopicsDetectionJobsFuture{Future: future}
}

func (a *stub) StartDocumentClassificationJob(ctx workflow.Context, input *comprehend.StartDocumentClassificationJobInput) (*comprehend.StartDocumentClassificationJobOutput, error) {
	var output comprehend.StartDocumentClassificationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDocumentClassificationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDocumentClassificationJobAsync(ctx workflow.Context, input *comprehend.StartDocumentClassificationJobInput) *ComprehendStartDocumentClassificationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDocumentClassificationJob", input)
	return &ComprehendStartDocumentClassificationJobFuture{Future: future}
}

func (a *stub) StartDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.StartDominantLanguageDetectionJobInput) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StartDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.StartDominantLanguageDetectionJobInput) *ComprehendStartDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartDominantLanguageDetectionJob", input)
	return &ComprehendStartDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) StartEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StartEntitiesDetectionJobInput) (*comprehend.StartEntitiesDetectionJobOutput, error) {
	var output comprehend.StartEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartEntitiesDetectionJobInput) *ComprehendStartEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartEntitiesDetectionJob", input)
	return &ComprehendStartEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StartKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.StartKeyPhrasesDetectionJobInput) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StartKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartKeyPhrasesDetectionJobInput) *ComprehendStartKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartKeyPhrasesDetectionJob", input)
	return &ComprehendStartKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) StartPiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StartPiiEntitiesDetectionJobInput) (*comprehend.StartPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StartPiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartPiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StartPiiEntitiesDetectionJobInput) *ComprehendStartPiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartPiiEntitiesDetectionJob", input)
	return &ComprehendStartPiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StartSentimentDetectionJob(ctx workflow.Context, input *comprehend.StartSentimentDetectionJobInput) (*comprehend.StartSentimentDetectionJobOutput, error) {
	var output comprehend.StartSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.StartSentimentDetectionJobInput) *ComprehendStartSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartSentimentDetectionJob", input)
	return &ComprehendStartSentimentDetectionJobFuture{Future: future}
}

func (a *stub) StartTopicsDetectionJob(ctx workflow.Context, input *comprehend.StartTopicsDetectionJobInput) (*comprehend.StartTopicsDetectionJobOutput, error) {
	var output comprehend.StartTopicsDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StartTopicsDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartTopicsDetectionJobAsync(ctx workflow.Context, input *comprehend.StartTopicsDetectionJobInput) *ComprehendStartTopicsDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StartTopicsDetectionJob", input)
	return &ComprehendStartTopicsDetectionJobFuture{Future: future}
}

func (a *stub) StopDominantLanguageDetectionJob(ctx workflow.Context, input *comprehend.StopDominantLanguageDetectionJobInput) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {
	var output comprehend.StopDominantLanguageDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopDominantLanguageDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopDominantLanguageDetectionJobAsync(ctx workflow.Context, input *comprehend.StopDominantLanguageDetectionJobInput) *ComprehendStopDominantLanguageDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopDominantLanguageDetectionJob", input)
	return &ComprehendStopDominantLanguageDetectionJobFuture{Future: future}
}

func (a *stub) StopEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StopEntitiesDetectionJobInput) (*comprehend.StopEntitiesDetectionJobOutput, error) {
	var output comprehend.StopEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopEntitiesDetectionJobInput) *ComprehendStopEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopEntitiesDetectionJob", input)
	return &ComprehendStopEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StopKeyPhrasesDetectionJob(ctx workflow.Context, input *comprehend.StopKeyPhrasesDetectionJobInput) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {
	var output comprehend.StopKeyPhrasesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopKeyPhrasesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopKeyPhrasesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopKeyPhrasesDetectionJobInput) *ComprehendStopKeyPhrasesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopKeyPhrasesDetectionJob", input)
	return &ComprehendStopKeyPhrasesDetectionJobFuture{Future: future}
}

func (a *stub) StopPiiEntitiesDetectionJob(ctx workflow.Context, input *comprehend.StopPiiEntitiesDetectionJobInput) (*comprehend.StopPiiEntitiesDetectionJobOutput, error) {
	var output comprehend.StopPiiEntitiesDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopPiiEntitiesDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopPiiEntitiesDetectionJobAsync(ctx workflow.Context, input *comprehend.StopPiiEntitiesDetectionJobInput) *ComprehendStopPiiEntitiesDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopPiiEntitiesDetectionJob", input)
	return &ComprehendStopPiiEntitiesDetectionJobFuture{Future: future}
}

func (a *stub) StopSentimentDetectionJob(ctx workflow.Context, input *comprehend.StopSentimentDetectionJobInput) (*comprehend.StopSentimentDetectionJobOutput, error) {
	var output comprehend.StopSentimentDetectionJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopSentimentDetectionJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopSentimentDetectionJobAsync(ctx workflow.Context, input *comprehend.StopSentimentDetectionJobInput) *ComprehendStopSentimentDetectionJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopSentimentDetectionJob", input)
	return &ComprehendStopSentimentDetectionJobFuture{Future: future}
}

func (a *stub) StopTrainingDocumentClassifier(ctx workflow.Context, input *comprehend.StopTrainingDocumentClassifierInput) (*comprehend.StopTrainingDocumentClassifierOutput, error) {
	var output comprehend.StopTrainingDocumentClassifierOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingDocumentClassifier", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingDocumentClassifierAsync(ctx workflow.Context, input *comprehend.StopTrainingDocumentClassifierInput) *ComprehendStopTrainingDocumentClassifierFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingDocumentClassifier", input)
	return &ComprehendStopTrainingDocumentClassifierFuture{Future: future}
}

func (a *stub) StopTrainingEntityRecognizer(ctx workflow.Context, input *comprehend.StopTrainingEntityRecognizerInput) (*comprehend.StopTrainingEntityRecognizerOutput, error) {
	var output comprehend.StopTrainingEntityRecognizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingEntityRecognizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopTrainingEntityRecognizerAsync(ctx workflow.Context, input *comprehend.StopTrainingEntityRecognizerInput) *ComprehendStopTrainingEntityRecognizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-StopTrainingEntityRecognizer", input)
	return &ComprehendStopTrainingEntityRecognizerFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *comprehend.TagResourceInput) (*comprehend.TagResourceOutput, error) {
	var output comprehend.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *comprehend.TagResourceInput) *ComprehendTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-TagResource", input)
	return &ComprehendTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *comprehend.UntagResourceInput) (*comprehend.UntagResourceOutput, error) {
	var output comprehend.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *comprehend.UntagResourceInput) *ComprehendUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-UntagResource", input)
	return &ComprehendUntagResourceFuture{Future: future}
}

func (a *stub) UpdateEndpoint(ctx workflow.Context, input *comprehend.UpdateEndpointInput) (*comprehend.UpdateEndpointOutput, error) {
	var output comprehend.UpdateEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-comprehend-UpdateEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEndpointAsync(ctx workflow.Context, input *comprehend.UpdateEndpointInput) *ComprehendUpdateEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-comprehend-UpdateEndpoint", input)
	return &ComprehendUpdateEndpointFuture{Future: future}
}
