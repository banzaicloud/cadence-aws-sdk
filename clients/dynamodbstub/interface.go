// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package dynamodbstub

import (
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
	BatchExecuteStatement(ctx workflow.Context, input *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error)
	BatchExecuteStatementAsync(ctx workflow.Context, input *dynamodb.BatchExecuteStatementInput) *BatchExecuteStatementFuture

	BatchGetItem(ctx workflow.Context, input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error)
	BatchGetItemAsync(ctx workflow.Context, input *dynamodb.BatchGetItemInput) *BatchGetItemFuture

	BatchWriteItem(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error)
	BatchWriteItemAsync(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) *BatchWriteItemFuture

	CreateBackup(ctx workflow.Context, input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error)
	CreateBackupAsync(ctx workflow.Context, input *dynamodb.CreateBackupInput) *CreateBackupFuture

	CreateGlobalTable(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error)
	CreateGlobalTableAsync(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) *CreateGlobalTableFuture

	CreateTable(ctx workflow.Context, input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error)
	CreateTableAsync(ctx workflow.Context, input *dynamodb.CreateTableInput) *CreateTableFuture

	DeleteBackup(ctx workflow.Context, input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error)
	DeleteBackupAsync(ctx workflow.Context, input *dynamodb.DeleteBackupInput) *DeleteBackupFuture

	DeleteItem(ctx workflow.Context, input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error)
	DeleteItemAsync(ctx workflow.Context, input *dynamodb.DeleteItemInput) *DeleteItemFuture

	DeleteTable(ctx workflow.Context, input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error)
	DeleteTableAsync(ctx workflow.Context, input *dynamodb.DeleteTableInput) *DeleteTableFuture

	DescribeBackup(ctx workflow.Context, input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error)
	DescribeBackupAsync(ctx workflow.Context, input *dynamodb.DescribeBackupInput) *DescribeBackupFuture

	DescribeContinuousBackups(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error)
	DescribeContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) *DescribeContinuousBackupsFuture

	DescribeContributorInsights(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error)
	DescribeContributorInsightsAsync(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) *DescribeContributorInsightsFuture

	DescribeEndpoints(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) *DescribeEndpointsFuture

	DescribeExport(ctx workflow.Context, input *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error)
	DescribeExportAsync(ctx workflow.Context, input *dynamodb.DescribeExportInput) *DescribeExportFuture

	DescribeGlobalTable(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error)
	DescribeGlobalTableAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) *DescribeGlobalTableFuture

	DescribeGlobalTableSettings(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error)
	DescribeGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) *DescribeGlobalTableSettingsFuture

	DescribeKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)
	DescribeKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.DescribeKinesisStreamingDestinationInput) *DescribeKinesisStreamingDestinationFuture

	DescribeLimits(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error)
	DescribeLimitsAsync(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) *DescribeLimitsFuture

	DescribeTable(ctx workflow.Context, input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error)
	DescribeTableAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *DescribeTableFuture

	DescribeTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)
	DescribeTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) *DescribeTableReplicaAutoScalingFuture

	DescribeTimeToLive(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error)
	DescribeTimeToLiveAsync(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) *DescribeTimeToLiveFuture

	DisableKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)
	DisableKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.DisableKinesisStreamingDestinationInput) *DisableKinesisStreamingDestinationFuture

	EnableKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)
	EnableKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.EnableKinesisStreamingDestinationInput) *EnableKinesisStreamingDestinationFuture

	ExecuteStatement(ctx workflow.Context, input *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error)
	ExecuteStatementAsync(ctx workflow.Context, input *dynamodb.ExecuteStatementInput) *ExecuteStatementFuture

	ExecuteTransaction(ctx workflow.Context, input *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error)
	ExecuteTransactionAsync(ctx workflow.Context, input *dynamodb.ExecuteTransactionInput) *ExecuteTransactionFuture

	ExportTableToPointInTime(ctx workflow.Context, input *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error)
	ExportTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.ExportTableToPointInTimeInput) *ExportTableToPointInTimeFuture

	GetItem(ctx workflow.Context, input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error)
	GetItemAsync(ctx workflow.Context, input *dynamodb.GetItemInput) *GetItemFuture

	ListBackups(ctx workflow.Context, input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error)
	ListBackupsAsync(ctx workflow.Context, input *dynamodb.ListBackupsInput) *ListBackupsFuture

	ListContributorInsights(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error)
	ListContributorInsightsAsync(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) *ListContributorInsightsFuture

	ListExports(ctx workflow.Context, input *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error)
	ListExportsAsync(ctx workflow.Context, input *dynamodb.ListExportsInput) *ListExportsFuture

	ListGlobalTables(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error)
	ListGlobalTablesAsync(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) *ListGlobalTablesFuture

	ListTables(ctx workflow.Context, input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error)
	ListTablesAsync(ctx workflow.Context, input *dynamodb.ListTablesInput) *ListTablesFuture

	ListTagsOfResource(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error)
	ListTagsOfResourceAsync(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) *ListTagsOfResourceFuture

	PutItem(ctx workflow.Context, input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error)
	PutItemAsync(ctx workflow.Context, input *dynamodb.PutItemInput) *PutItemFuture

	Query(ctx workflow.Context, input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error)
	QueryAsync(ctx workflow.Context, input *dynamodb.QueryInput) *QueryFuture

	RestoreTableFromBackup(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error)
	RestoreTableFromBackupAsync(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) *RestoreTableFromBackupFuture

	RestoreTableToPointInTime(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error)
	RestoreTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) *RestoreTableToPointInTimeFuture

	Scan(ctx workflow.Context, input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error)
	ScanAsync(ctx workflow.Context, input *dynamodb.ScanInput) *ScanFuture

	TagResource(ctx workflow.Context, input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *dynamodb.TagResourceInput) *TagResourceFuture

	TransactGetItems(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error)
	TransactGetItemsAsync(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) *TransactGetItemsFuture

	TransactWriteItems(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)
	TransactWriteItemsAsync(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) *TransactWriteItemsFuture

	UntagResource(ctx workflow.Context, input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *dynamodb.UntagResourceInput) *UntagResourceFuture

	UpdateContinuousBackups(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error)
	UpdateContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) *UpdateContinuousBackupsFuture

	UpdateContributorInsights(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error)
	UpdateContributorInsightsAsync(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) *UpdateContributorInsightsFuture

	UpdateGlobalTable(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error)
	UpdateGlobalTableAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) *UpdateGlobalTableFuture

	UpdateGlobalTableSettings(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error)
	UpdateGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) *UpdateGlobalTableSettingsFuture

	UpdateItem(ctx workflow.Context, input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error)
	UpdateItemAsync(ctx workflow.Context, input *dynamodb.UpdateItemInput) *UpdateItemFuture

	UpdateTable(ctx workflow.Context, input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error)
	UpdateTableAsync(ctx workflow.Context, input *dynamodb.UpdateTableInput) *UpdateTableFuture

	UpdateTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)
	UpdateTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) *UpdateTableReplicaAutoScalingFuture

	UpdateTimeToLive(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error)
	UpdateTimeToLiveAsync(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) *UpdateTimeToLiveFuture

	WaitUntilTableExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error
	WaitUntilTableExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture

	WaitUntilTableNotExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error
	WaitUntilTableNotExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture
}

func NewClient() Client {
	return &stub{}
}
