// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package dynamodbstub

import (
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchExecuteStatementFuture) Get(ctx workflow.Context) (*dynamodb.BatchExecuteStatementOutput, error) {
	var output dynamodb.BatchExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchWriteItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchWriteItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateBackupFuture) Get(ctx workflow.Context) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteBackupFuture) Get(ctx workflow.Context) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteItemFuture) Get(ctx workflow.Context) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTableFuture) Get(ctx workflow.Context) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBackupFuture) Get(ctx workflow.Context) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeContinuousBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEndpointsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExportFuture) Get(ctx workflow.Context) (*dynamodb.DescribeExportOutput, error) {
	var output dynamodb.DescribeExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeGlobalTableSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeKinesisStreamingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeKinesisStreamingDestinationFuture) Get(ctx workflow.Context) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	var output dynamodb.DescribeKinesisStreamingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLimitsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTableReplicaAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTimeToLiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableKinesisStreamingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableKinesisStreamingDestinationFuture) Get(ctx workflow.Context) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	var output dynamodb.DisableKinesisStreamingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableKinesisStreamingDestinationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableKinesisStreamingDestinationFuture) Get(ctx workflow.Context) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	var output dynamodb.EnableKinesisStreamingDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteStatementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteStatementFuture) Get(ctx workflow.Context) (*dynamodb.ExecuteStatementOutput, error) {
	var output dynamodb.ExecuteStatementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExecuteTransactionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExecuteTransactionFuture) Get(ctx workflow.Context) (*dynamodb.ExecuteTransactionOutput, error) {
	var output dynamodb.ExecuteTransactionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportTableToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportTableToPointInTimeFuture) Get(ctx workflow.Context) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	var output dynamodb.ExportTableToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetItemFuture) Get(ctx workflow.Context) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListBackupsFuture) Get(ctx workflow.Context) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListExportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListExportsFuture) Get(ctx workflow.Context) (*dynamodb.ListExportsOutput, error) {
	var output dynamodb.ListExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListGlobalTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListGlobalTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsOfResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsOfResourceFuture) Get(ctx workflow.Context) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutItemFuture) Get(ctx workflow.Context) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type QueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *QueryFuture) Get(ctx workflow.Context) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreTableFromBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreTableFromBackupFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreTableToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreTableToPointInTimeFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ScanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ScanFuture) Get(ctx workflow.Context) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TransactGetItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TransactGetItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TransactWriteItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TransactWriteItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContinuousBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateGlobalTableSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateItemFuture) Get(ctx workflow.Context) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTableReplicaAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTimeToLiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchExecuteStatement(ctx workflow.Context, input *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error) {
	var output dynamodb.BatchExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchExecuteStatementAsync(ctx workflow.Context, input *dynamodb.BatchExecuteStatementInput) *BatchExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchExecuteStatement", input)
	return &BatchExecuteStatementFuture{Future: future}
}

func (a *stub) BatchGetItem(ctx workflow.Context, input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchGetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetItemAsync(ctx workflow.Context, input *dynamodb.BatchGetItemInput) *BatchGetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchGetItem", input)
	return &BatchGetItemFuture{Future: future}
}

func (a *stub) BatchWriteItem(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchWriteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchWriteItemAsync(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) *BatchWriteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchWriteItem", input)
	return &BatchWriteItemFuture{Future: future}
}

func (a *stub) CreateBackup(ctx workflow.Context, input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupAsync(ctx workflow.Context, input *dynamodb.CreateBackupInput) *CreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateBackup", input)
	return &CreateBackupFuture{Future: future}
}

func (a *stub) CreateGlobalTable(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGlobalTableAsync(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) *CreateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateGlobalTable", input)
	return &CreateGlobalTableFuture{Future: future}
}

func (a *stub) CreateTable(ctx workflow.Context, input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTableAsync(ctx workflow.Context, input *dynamodb.CreateTableInput) *CreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateTable", input)
	return &CreateTableFuture{Future: future}
}

func (a *stub) DeleteBackup(ctx workflow.Context, input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupAsync(ctx workflow.Context, input *dynamodb.DeleteBackupInput) *DeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteBackup", input)
	return &DeleteBackupFuture{Future: future}
}

func (a *stub) DeleteItem(ctx workflow.Context, input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteItemAsync(ctx workflow.Context, input *dynamodb.DeleteItemInput) *DeleteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteItem", input)
	return &DeleteItemFuture{Future: future}
}

func (a *stub) DeleteTable(ctx workflow.Context, input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTableAsync(ctx workflow.Context, input *dynamodb.DeleteTableInput) *DeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteTable", input)
	return &DeleteTableFuture{Future: future}
}

func (a *stub) DescribeBackup(ctx workflow.Context, input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupAsync(ctx workflow.Context, input *dynamodb.DescribeBackupInput) *DescribeBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeBackup", input)
	return &DescribeBackupFuture{Future: future}
}

func (a *stub) DescribeContinuousBackups(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) *DescribeContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContinuousBackups", input)
	return &DescribeContinuousBackupsFuture{Future: future}
}

func (a *stub) DescribeContributorInsights(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContributorInsightsAsync(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) *DescribeContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContributorInsights", input)
	return &DescribeContributorInsightsFuture{Future: future}
}

func (a *stub) DescribeEndpoints(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointsAsync(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) *DescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeEndpoints", input)
	return &DescribeEndpointsFuture{Future: future}
}

func (a *stub) DescribeExport(ctx workflow.Context, input *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error) {
	var output dynamodb.DescribeExportOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeExport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExportAsync(ctx workflow.Context, input *dynamodb.DescribeExportInput) *DescribeExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeExport", input)
	return &DescribeExportFuture{Future: future}
}

func (a *stub) DescribeGlobalTable(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalTableAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) *DescribeGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTable", input)
	return &DescribeGlobalTableFuture{Future: future}
}

func (a *stub) DescribeGlobalTableSettings(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) *DescribeGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTableSettings", input)
	return &DescribeGlobalTableSettingsFuture{Future: future}
}

func (a *stub) DescribeKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	var output dynamodb.DescribeKinesisStreamingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeKinesisStreamingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.DescribeKinesisStreamingDestinationInput) *DescribeKinesisStreamingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeKinesisStreamingDestination", input)
	return &DescribeKinesisStreamingDestinationFuture{Future: future}
}

func (a *stub) DescribeLimits(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLimitsAsync(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) *DescribeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeLimits", input)
	return &DescribeLimitsFuture{Future: future}
}

func (a *stub) DescribeTable(ctx workflow.Context, input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *DescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTable", input)
	return &DescribeTableFuture{Future: future}
}

func (a *stub) DescribeTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) *DescribeTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTableReplicaAutoScaling", input)
	return &DescribeTableReplicaAutoScalingFuture{Future: future}
}

func (a *stub) DescribeTimeToLive(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTimeToLiveAsync(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) *DescribeTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTimeToLive", input)
	return &DescribeTimeToLiveFuture{Future: future}
}

func (a *stub) DisableKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	var output dynamodb.DisableKinesisStreamingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DisableKinesisStreamingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.DisableKinesisStreamingDestinationInput) *DisableKinesisStreamingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DisableKinesisStreamingDestination", input)
	return &DisableKinesisStreamingDestinationFuture{Future: future}
}

func (a *stub) EnableKinesisStreamingDestination(ctx workflow.Context, input *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	var output dynamodb.EnableKinesisStreamingDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-EnableKinesisStreamingDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableKinesisStreamingDestinationAsync(ctx workflow.Context, input *dynamodb.EnableKinesisStreamingDestinationInput) *EnableKinesisStreamingDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-EnableKinesisStreamingDestination", input)
	return &EnableKinesisStreamingDestinationFuture{Future: future}
}

func (a *stub) ExecuteStatement(ctx workflow.Context, input *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error) {
	var output dynamodb.ExecuteStatementOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExecuteStatement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteStatementAsync(ctx workflow.Context, input *dynamodb.ExecuteStatementInput) *ExecuteStatementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExecuteStatement", input)
	return &ExecuteStatementFuture{Future: future}
}

func (a *stub) ExecuteTransaction(ctx workflow.Context, input *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error) {
	var output dynamodb.ExecuteTransactionOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExecuteTransaction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExecuteTransactionAsync(ctx workflow.Context, input *dynamodb.ExecuteTransactionInput) *ExecuteTransactionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExecuteTransaction", input)
	return &ExecuteTransactionFuture{Future: future}
}

func (a *stub) ExportTableToPointInTime(ctx workflow.Context, input *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	var output dynamodb.ExportTableToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExportTableToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.ExportTableToPointInTimeInput) *ExportTableToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ExportTableToPointInTime", input)
	return &ExportTableToPointInTimeFuture{Future: future}
}

func (a *stub) GetItem(ctx workflow.Context, input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-GetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetItemAsync(ctx workflow.Context, input *dynamodb.GetItemInput) *GetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-GetItem", input)
	return &GetItemFuture{Future: future}
}

func (a *stub) ListBackups(ctx workflow.Context, input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupsAsync(ctx workflow.Context, input *dynamodb.ListBackupsInput) *ListBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListBackups", input)
	return &ListBackupsFuture{Future: future}
}

func (a *stub) ListContributorInsights(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContributorInsightsAsync(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) *ListContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListContributorInsights", input)
	return &ListContributorInsightsFuture{Future: future}
}

func (a *stub) ListExports(ctx workflow.Context, input *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error) {
	var output dynamodb.ListExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListExports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListExportsAsync(ctx workflow.Context, input *dynamodb.ListExportsInput) *ListExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListExports", input)
	return &ListExportsFuture{Future: future}
}

func (a *stub) ListGlobalTables(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListGlobalTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGlobalTablesAsync(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) *ListGlobalTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListGlobalTables", input)
	return &ListGlobalTablesFuture{Future: future}
}

func (a *stub) ListTables(ctx workflow.Context, input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTablesAsync(ctx workflow.Context, input *dynamodb.ListTablesInput) *ListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTables", input)
	return &ListTablesFuture{Future: future}
}

func (a *stub) ListTagsOfResource(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTagsOfResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsOfResourceAsync(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) *ListTagsOfResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTagsOfResource", input)
	return &ListTagsOfResourceFuture{Future: future}
}

func (a *stub) PutItem(ctx workflow.Context, input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-PutItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutItemAsync(ctx workflow.Context, input *dynamodb.PutItemInput) *PutItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-PutItem", input)
	return &PutItemFuture{Future: future}
}

func (a *stub) Query(ctx workflow.Context, input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-Query", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) QueryAsync(ctx workflow.Context, input *dynamodb.QueryInput) *QueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-Query", input)
	return &QueryFuture{Future: future}
}

func (a *stub) RestoreTableFromBackup(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableFromBackupAsync(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) *RestoreTableFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableFromBackup", input)
	return &RestoreTableFromBackupFuture{Future: future}
}

func (a *stub) RestoreTableToPointInTime(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) *RestoreTableToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableToPointInTime", input)
	return &RestoreTableToPointInTimeFuture{Future: future}
}

func (a *stub) Scan(ctx workflow.Context, input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-Scan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScanAsync(ctx workflow.Context, input *dynamodb.ScanInput) *ScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-Scan", input)
	return &ScanFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *dynamodb.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TransactGetItems(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactGetItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransactGetItemsAsync(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) *TransactGetItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactGetItems", input)
	return &TransactGetItemsFuture{Future: future}
}

func (a *stub) TransactWriteItems(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactWriteItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransactWriteItemsAsync(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) *TransactWriteItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactWriteItems", input)
	return &TransactWriteItemsFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *dynamodb.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateContinuousBackups(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) *UpdateContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContinuousBackups", input)
	return &UpdateContinuousBackupsFuture{Future: future}
}

func (a *stub) UpdateContributorInsights(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContributorInsightsAsync(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) *UpdateContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContributorInsights", input)
	return &UpdateContributorInsightsFuture{Future: future}
}

func (a *stub) UpdateGlobalTable(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalTableAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) *UpdateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTable", input)
	return &UpdateGlobalTableFuture{Future: future}
}

func (a *stub) UpdateGlobalTableSettings(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) *UpdateGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTableSettings", input)
	return &UpdateGlobalTableSettingsFuture{Future: future}
}

func (a *stub) UpdateItem(ctx workflow.Context, input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateItemAsync(ctx workflow.Context, input *dynamodb.UpdateItemInput) *UpdateItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateItem", input)
	return &UpdateItemFuture{Future: future}
}

func (a *stub) UpdateTable(ctx workflow.Context, input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTableAsync(ctx workflow.Context, input *dynamodb.UpdateTableInput) *UpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTable", input)
	return &UpdateTableFuture{Future: future}
}

func (a *stub) UpdateTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) *UpdateTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTableReplicaAutoScaling", input)
	return &UpdateTableReplicaAutoScalingFuture{Future: future}
}

func (a *stub) UpdateTimeToLive(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTimeToLiveAsync(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) *UpdateTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTimeToLive", input)
	return &UpdateTimeToLiveFuture{Future: future}
}

func (a *stub) WaitUntilTableExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTableExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTableNotExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTableNotExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableNotExists", input)
	return clients.NewVoidFuture(future)
}
