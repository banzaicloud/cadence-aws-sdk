// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package dynamodbstub

import (
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DynamoDBBatchGetItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBBatchGetItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBBatchWriteItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBBatchWriteItemFuture) Get(ctx workflow.Context) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBCreateBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBCreateBackupFuture) Get(ctx workflow.Context) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBCreateGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBCreateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBCreateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBCreateTableFuture) Get(ctx workflow.Context) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDeleteBackupFuture) Get(ctx workflow.Context) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDeleteItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDeleteItemFuture) Get(ctx workflow.Context) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDeleteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDeleteTableFuture) Get(ctx workflow.Context) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeBackupFuture) Get(ctx workflow.Context) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeContinuousBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeEndpointsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeGlobalTableSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeLimitsFuture) Get(ctx workflow.Context) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeTableFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeTableReplicaAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBDescribeTimeToLiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBDescribeTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBGetItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBGetItemFuture) Get(ctx workflow.Context) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBListBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBListBackupsFuture) Get(ctx workflow.Context) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBListContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBListContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBListGlobalTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBListGlobalTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBListTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBListTablesFuture) Get(ctx workflow.Context) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBListTagsOfResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBListTagsOfResourceFuture) Get(ctx workflow.Context) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBPutItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBPutItemFuture) Get(ctx workflow.Context) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBQueryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBQueryFuture) Get(ctx workflow.Context) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBRestoreTableFromBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBRestoreTableFromBackupFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBRestoreTableToPointInTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBRestoreTableToPointInTimeFuture) Get(ctx workflow.Context) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBScanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBScanFuture) Get(ctx workflow.Context) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBTagResourceFuture) Get(ctx workflow.Context) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBTransactGetItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBTransactGetItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBTransactWriteItemsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBTransactWriteItemsFuture) Get(ctx workflow.Context) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUntagResourceFuture) Get(ctx workflow.Context) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateContinuousBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateContinuousBackupsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateContributorInsightsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateContributorInsightsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateGlobalTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateGlobalTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateGlobalTableSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateGlobalTableSettingsFuture) Get(ctx workflow.Context) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateItemFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateItemFuture) Get(ctx workflow.Context) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateTableFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateTableReplicaAutoScalingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateTableReplicaAutoScalingFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DynamoDBUpdateTimeToLiveFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DynamoDBUpdateTimeToLiveFuture) Get(ctx workflow.Context) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetItem(ctx workflow.Context, input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	var output dynamodb.BatchGetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchGetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetItemAsync(ctx workflow.Context, input *dynamodb.BatchGetItemInput) *DynamoDBBatchGetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchGetItem", input)
	return &DynamoDBBatchGetItemFuture{Future: future}
}

func (a *stub) BatchWriteItem(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	var output dynamodb.BatchWriteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchWriteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchWriteItemAsync(ctx workflow.Context, input *dynamodb.BatchWriteItemInput) *DynamoDBBatchWriteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-BatchWriteItem", input)
	return &DynamoDBBatchWriteItemFuture{Future: future}
}

func (a *stub) CreateBackup(ctx workflow.Context, input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	var output dynamodb.CreateBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateBackupAsync(ctx workflow.Context, input *dynamodb.CreateBackupInput) *DynamoDBCreateBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateBackup", input)
	return &DynamoDBCreateBackupFuture{Future: future}
}

func (a *stub) CreateGlobalTable(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	var output dynamodb.CreateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateGlobalTableAsync(ctx workflow.Context, input *dynamodb.CreateGlobalTableInput) *DynamoDBCreateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateGlobalTable", input)
	return &DynamoDBCreateGlobalTableFuture{Future: future}
}

func (a *stub) CreateTable(ctx workflow.Context, input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	var output dynamodb.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTableAsync(ctx workflow.Context, input *dynamodb.CreateTableInput) *DynamoDBCreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-CreateTable", input)
	return &DynamoDBCreateTableFuture{Future: future}
}

func (a *stub) DeleteBackup(ctx workflow.Context, input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	var output dynamodb.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupAsync(ctx workflow.Context, input *dynamodb.DeleteBackupInput) *DynamoDBDeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteBackup", input)
	return &DynamoDBDeleteBackupFuture{Future: future}
}

func (a *stub) DeleteItem(ctx workflow.Context, input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	var output dynamodb.DeleteItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteItemAsync(ctx workflow.Context, input *dynamodb.DeleteItemInput) *DynamoDBDeleteItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteItem", input)
	return &DynamoDBDeleteItemFuture{Future: future}
}

func (a *stub) DeleteTable(ctx workflow.Context, input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	var output dynamodb.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTableAsync(ctx workflow.Context, input *dynamodb.DeleteTableInput) *DynamoDBDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DeleteTable", input)
	return &DynamoDBDeleteTableFuture{Future: future}
}

func (a *stub) DescribeBackup(ctx workflow.Context, input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	var output dynamodb.DescribeBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupAsync(ctx workflow.Context, input *dynamodb.DescribeBackupInput) *DynamoDBDescribeBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeBackup", input)
	return &DynamoDBDescribeBackupFuture{Future: future}
}

func (a *stub) DescribeContinuousBackups(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	var output dynamodb.DescribeContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.DescribeContinuousBackupsInput) *DynamoDBDescribeContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContinuousBackups", input)
	return &DynamoDBDescribeContinuousBackupsFuture{Future: future}
}

func (a *stub) DescribeContributorInsights(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	var output dynamodb.DescribeContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContributorInsightsAsync(ctx workflow.Context, input *dynamodb.DescribeContributorInsightsInput) *DynamoDBDescribeContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeContributorInsights", input)
	return &DynamoDBDescribeContributorInsightsFuture{Future: future}
}

func (a *stub) DescribeEndpoints(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	var output dynamodb.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEndpointsAsync(ctx workflow.Context, input *dynamodb.DescribeEndpointsInput) *DynamoDBDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeEndpoints", input)
	return &DynamoDBDescribeEndpointsFuture{Future: future}
}

func (a *stub) DescribeGlobalTable(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	var output dynamodb.DescribeGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalTableAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableInput) *DynamoDBDescribeGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTable", input)
	return &DynamoDBDescribeGlobalTableFuture{Future: future}
}

func (a *stub) DescribeGlobalTableSettings(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	var output dynamodb.DescribeGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.DescribeGlobalTableSettingsInput) *DynamoDBDescribeGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeGlobalTableSettings", input)
	return &DynamoDBDescribeGlobalTableSettingsFuture{Future: future}
}

func (a *stub) DescribeLimits(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	var output dynamodb.DescribeLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLimitsAsync(ctx workflow.Context, input *dynamodb.DescribeLimitsInput) *DynamoDBDescribeLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeLimits", input)
	return &DynamoDBDescribeLimitsFuture{Future: future}
}

func (a *stub) DescribeTable(ctx workflow.Context, input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	var output dynamodb.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *DynamoDBDescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTable", input)
	return &DynamoDBDescribeTableFuture{Future: future}
}

func (a *stub) DescribeTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	var output dynamodb.DescribeTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.DescribeTableReplicaAutoScalingInput) *DynamoDBDescribeTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTableReplicaAutoScaling", input)
	return &DynamoDBDescribeTableReplicaAutoScalingFuture{Future: future}
}

func (a *stub) DescribeTimeToLive(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	var output dynamodb.DescribeTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTimeToLiveAsync(ctx workflow.Context, input *dynamodb.DescribeTimeToLiveInput) *DynamoDBDescribeTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-DescribeTimeToLive", input)
	return &DynamoDBDescribeTimeToLiveFuture{Future: future}
}

func (a *stub) GetItem(ctx workflow.Context, input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	var output dynamodb.GetItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-GetItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetItemAsync(ctx workflow.Context, input *dynamodb.GetItemInput) *DynamoDBGetItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-GetItem", input)
	return &DynamoDBGetItemFuture{Future: future}
}

func (a *stub) ListBackups(ctx workflow.Context, input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	var output dynamodb.ListBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListBackupsAsync(ctx workflow.Context, input *dynamodb.ListBackupsInput) *DynamoDBListBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListBackups", input)
	return &DynamoDBListBackupsFuture{Future: future}
}

func (a *stub) ListContributorInsights(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	var output dynamodb.ListContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContributorInsightsAsync(ctx workflow.Context, input *dynamodb.ListContributorInsightsInput) *DynamoDBListContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListContributorInsights", input)
	return &DynamoDBListContributorInsightsFuture{Future: future}
}

func (a *stub) ListGlobalTables(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	var output dynamodb.ListGlobalTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListGlobalTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListGlobalTablesAsync(ctx workflow.Context, input *dynamodb.ListGlobalTablesInput) *DynamoDBListGlobalTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListGlobalTables", input)
	return &DynamoDBListGlobalTablesFuture{Future: future}
}

func (a *stub) ListTables(ctx workflow.Context, input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	var output dynamodb.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTablesAsync(ctx workflow.Context, input *dynamodb.ListTablesInput) *DynamoDBListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTables", input)
	return &DynamoDBListTablesFuture{Future: future}
}

func (a *stub) ListTagsOfResource(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	var output dynamodb.ListTagsOfResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTagsOfResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsOfResourceAsync(ctx workflow.Context, input *dynamodb.ListTagsOfResourceInput) *DynamoDBListTagsOfResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-ListTagsOfResource", input)
	return &DynamoDBListTagsOfResourceFuture{Future: future}
}

func (a *stub) PutItem(ctx workflow.Context, input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	var output dynamodb.PutItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-PutItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutItemAsync(ctx workflow.Context, input *dynamodb.PutItemInput) *DynamoDBPutItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-PutItem", input)
	return &DynamoDBPutItemFuture{Future: future}
}

func (a *stub) Query(ctx workflow.Context, input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	var output dynamodb.QueryOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-Query", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) QueryAsync(ctx workflow.Context, input *dynamodb.QueryInput) *DynamoDBQueryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-Query", input)
	return &DynamoDBQueryFuture{Future: future}
}

func (a *stub) RestoreTableFromBackup(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	var output dynamodb.RestoreTableFromBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableFromBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableFromBackupAsync(ctx workflow.Context, input *dynamodb.RestoreTableFromBackupInput) *DynamoDBRestoreTableFromBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableFromBackup", input)
	return &DynamoDBRestoreTableFromBackupFuture{Future: future}
}

func (a *stub) RestoreTableToPointInTime(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	var output dynamodb.RestoreTableToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreTableToPointInTimeAsync(ctx workflow.Context, input *dynamodb.RestoreTableToPointInTimeInput) *DynamoDBRestoreTableToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-RestoreTableToPointInTime", input)
	return &DynamoDBRestoreTableToPointInTimeFuture{Future: future}
}

func (a *stub) Scan(ctx workflow.Context, input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	var output dynamodb.ScanOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-Scan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ScanAsync(ctx workflow.Context, input *dynamodb.ScanInput) *DynamoDBScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-Scan", input)
	return &DynamoDBScanFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	var output dynamodb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *dynamodb.TagResourceInput) *DynamoDBTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TagResource", input)
	return &DynamoDBTagResourceFuture{Future: future}
}

func (a *stub) TransactGetItems(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	var output dynamodb.TransactGetItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactGetItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransactGetItemsAsync(ctx workflow.Context, input *dynamodb.TransactGetItemsInput) *DynamoDBTransactGetItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactGetItems", input)
	return &DynamoDBTransactGetItemsFuture{Future: future}
}

func (a *stub) TransactWriteItems(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	var output dynamodb.TransactWriteItemsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactWriteItems", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TransactWriteItemsAsync(ctx workflow.Context, input *dynamodb.TransactWriteItemsInput) *DynamoDBTransactWriteItemsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-TransactWriteItems", input)
	return &DynamoDBTransactWriteItemsFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	var output dynamodb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *dynamodb.UntagResourceInput) *DynamoDBUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UntagResource", input)
	return &DynamoDBUntagResourceFuture{Future: future}
}

func (a *stub) UpdateContinuousBackups(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	var output dynamodb.UpdateContinuousBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContinuousBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContinuousBackupsAsync(ctx workflow.Context, input *dynamodb.UpdateContinuousBackupsInput) *DynamoDBUpdateContinuousBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContinuousBackups", input)
	return &DynamoDBUpdateContinuousBackupsFuture{Future: future}
}

func (a *stub) UpdateContributorInsights(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	var output dynamodb.UpdateContributorInsightsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContributorInsights", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContributorInsightsAsync(ctx workflow.Context, input *dynamodb.UpdateContributorInsightsInput) *DynamoDBUpdateContributorInsightsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateContributorInsights", input)
	return &DynamoDBUpdateContributorInsightsFuture{Future: future}
}

func (a *stub) UpdateGlobalTable(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	var output dynamodb.UpdateGlobalTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalTableAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableInput) *DynamoDBUpdateGlobalTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTable", input)
	return &DynamoDBUpdateGlobalTableFuture{Future: future}
}

func (a *stub) UpdateGlobalTableSettings(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	var output dynamodb.UpdateGlobalTableSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTableSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateGlobalTableSettingsAsync(ctx workflow.Context, input *dynamodb.UpdateGlobalTableSettingsInput) *DynamoDBUpdateGlobalTableSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateGlobalTableSettings", input)
	return &DynamoDBUpdateGlobalTableSettingsFuture{Future: future}
}

func (a *stub) UpdateItem(ctx workflow.Context, input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	var output dynamodb.UpdateItemOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateItem", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateItemAsync(ctx workflow.Context, input *dynamodb.UpdateItemInput) *DynamoDBUpdateItemFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateItem", input)
	return &DynamoDBUpdateItemFuture{Future: future}
}

func (a *stub) UpdateTable(ctx workflow.Context, input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	var output dynamodb.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTableAsync(ctx workflow.Context, input *dynamodb.UpdateTableInput) *DynamoDBUpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTable", input)
	return &DynamoDBUpdateTableFuture{Future: future}
}

func (a *stub) UpdateTableReplicaAutoScaling(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	var output dynamodb.UpdateTableReplicaAutoScalingOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTableReplicaAutoScaling", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTableReplicaAutoScalingAsync(ctx workflow.Context, input *dynamodb.UpdateTableReplicaAutoScalingInput) *DynamoDBUpdateTableReplicaAutoScalingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTableReplicaAutoScaling", input)
	return &DynamoDBUpdateTableReplicaAutoScalingFuture{Future: future}
}

func (a *stub) UpdateTimeToLive(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	var output dynamodb.UpdateTimeToLiveOutput
	err := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTimeToLive", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTimeToLiveAsync(ctx workflow.Context, input *dynamodb.UpdateTimeToLiveInput) *DynamoDBUpdateTimeToLiveFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-UpdateTimeToLive", input)
	return &DynamoDBUpdateTimeToLiveFuture{Future: future}
}

func (a *stub) WaitUntilTableExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTableExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilTableNotExists(ctx workflow.Context, input *dynamodb.DescribeTableInput) error {
	return workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableNotExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilTableNotExistsAsync(ctx workflow.Context, input *dynamodb.DescribeTableInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-dynamodb-WaitUntilTableNotExists", input)
	return clients.NewVoidFuture(future)
}
