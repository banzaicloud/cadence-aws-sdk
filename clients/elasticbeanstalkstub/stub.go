// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elasticbeanstalkstub

import (
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ElasticBeanstalkAbortEnvironmentUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkAbortEnvironmentUpdateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkApplyEnvironmentManagedActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkApplyEnvironmentManagedActionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCheckDNSAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCheckDNSAvailabilityFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkComposeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkComposeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreatePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreatePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkCreateStorageLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkCreateStorageLocationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeleteEnvironmentConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeleteEnvironmentConfigurationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDeletePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDeletePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeAccountAttributesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeApplicationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeApplicationVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeApplicationsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeConfigurationOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeConfigurationOptionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentManagedActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentManagedActionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentResourcesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeEventsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribeInstancesHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribeInstancesHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDescribePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDescribePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListAvailableSolutionStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListAvailableSolutionStacksFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListPlatformBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListPlatformBranchesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListPlatformVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListPlatformVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRebuildEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRebuildEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRequestEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRequestEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRestartAppServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRestartAppServerFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkRetrieveEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkRetrieveEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkSwapEnvironmentCNAMEsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkSwapEnvironmentCNAMEsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkTerminateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkTerminateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationResourceLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationResourceLifecycleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkUpdateTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkUpdateTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ElasticBeanstalkValidateConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ElasticBeanstalkValidateConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AbortEnvironmentUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *ElasticBeanstalkAbortEnvironmentUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AbortEnvironmentUpdate", input)
	return &ElasticBeanstalkAbortEnvironmentUpdateFuture{Future: future}
}

func (a *stub) ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ApplyEnvironmentManagedAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ElasticBeanstalkApplyEnvironmentManagedActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ApplyEnvironmentManagedAction", input)
	return &ElasticBeanstalkApplyEnvironmentManagedActionFuture{Future: future}
}

func (a *stub) AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AssociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AssociateEnvironmentOperationsRole", input)
	return &ElasticBeanstalkAssociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *stub) CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CheckDNSAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *ElasticBeanstalkCheckDNSAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CheckDNSAvailability", input)
	return &ElasticBeanstalkCheckDNSAvailabilityFuture{Future: future}
}

func (a *stub) ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ComposeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ElasticBeanstalkComposeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ComposeEnvironments", input)
	return &ElasticBeanstalkComposeEnvironmentsFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *ElasticBeanstalkCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplication", input)
	return &ElasticBeanstalkCreateApplicationFuture{Future: future}
}

func (a *stub) CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *ElasticBeanstalkCreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplicationVersion", input)
	return &ElasticBeanstalkCreateApplicationVersionFuture{Future: future}
}

func (a *stub) CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *ElasticBeanstalkCreateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateConfigurationTemplate", input)
	return &ElasticBeanstalkCreateConfigurationTemplateFuture{Future: future}
}

func (a *stub) CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *ElasticBeanstalkCreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateEnvironment", input)
	return &ElasticBeanstalkCreateEnvironmentFuture{Future: future}
}

func (a *stub) CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreatePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *ElasticBeanstalkCreatePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreatePlatformVersion", input)
	return &ElasticBeanstalkCreatePlatformVersionFuture{Future: future}
}

func (a *stub) CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateStorageLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *ElasticBeanstalkCreateStorageLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateStorageLocation", input)
	return &ElasticBeanstalkCreateStorageLocationFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *ElasticBeanstalkDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplication", input)
	return &ElasticBeanstalkDeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *ElasticBeanstalkDeleteApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplicationVersion", input)
	return &ElasticBeanstalkDeleteApplicationVersionFuture{Future: future}
}

func (a *stub) DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *ElasticBeanstalkDeleteConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteConfigurationTemplate", input)
	return &ElasticBeanstalkDeleteConfigurationTemplateFuture{Future: future}
}

func (a *stub) DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteEnvironmentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *ElasticBeanstalkDeleteEnvironmentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteEnvironmentConfiguration", input)
	return &ElasticBeanstalkDeleteEnvironmentConfigurationFuture{Future: future}
}

func (a *stub) DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeletePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *ElasticBeanstalkDeletePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeletePlatformVersion", input)
	return &ElasticBeanstalkDeletePlatformVersionFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *ElasticBeanstalkDescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeAccountAttributes", input)
	return &ElasticBeanstalkDescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *ElasticBeanstalkDescribeApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplicationVersions", input)
	return &ElasticBeanstalkDescribeApplicationVersionsFuture{Future: future}
}

func (a *stub) DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *ElasticBeanstalkDescribeApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplications", input)
	return &ElasticBeanstalkDescribeApplicationsFuture{Future: future}
}

func (a *stub) DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *ElasticBeanstalkDescribeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationOptions", input)
	return &ElasticBeanstalkDescribeConfigurationOptionsFuture{Future: future}
}

func (a *stub) DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *ElasticBeanstalkDescribeConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationSettings", input)
	return &ElasticBeanstalkDescribeConfigurationSettingsFuture{Future: future}
}

func (a *stub) DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *ElasticBeanstalkDescribeEnvironmentHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentHealth", input)
	return &ElasticBeanstalkDescribeEnvironmentHealthFuture{Future: future}
}

func (a *stub) DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActionHistory", input)
	return &ElasticBeanstalkDescribeEnvironmentManagedActionHistoryFuture{Future: future}
}

func (a *stub) DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *ElasticBeanstalkDescribeEnvironmentManagedActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActions", input)
	return &ElasticBeanstalkDescribeEnvironmentManagedActionsFuture{Future: future}
}

func (a *stub) DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *ElasticBeanstalkDescribeEnvironmentResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentResources", input)
	return &ElasticBeanstalkDescribeEnvironmentResourcesFuture{Future: future}
}

func (a *stub) DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *ElasticBeanstalkDescribeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironments", input)
	return &ElasticBeanstalkDescribeEnvironmentsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *ElasticBeanstalkDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEvents", input)
	return &ElasticBeanstalkDescribeEventsFuture{Future: future}
}

func (a *stub) DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeInstancesHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *ElasticBeanstalkDescribeInstancesHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeInstancesHealth", input)
	return &ElasticBeanstalkDescribeInstancesHealthFuture{Future: future}
}

func (a *stub) DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *ElasticBeanstalkDescribePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribePlatformVersion", input)
	return &ElasticBeanstalkDescribePlatformVersionFuture{Future: future}
}

func (a *stub) DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DisassociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DisassociateEnvironmentOperationsRole", input)
	return &ElasticBeanstalkDisassociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *stub) ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListAvailableSolutionStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ElasticBeanstalkListAvailableSolutionStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListAvailableSolutionStacks", input)
	return &ElasticBeanstalkListAvailableSolutionStacksFuture{Future: future}
}

func (a *stub) ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ElasticBeanstalkListPlatformBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformBranches", input)
	return &ElasticBeanstalkListPlatformBranchesFuture{Future: future}
}

func (a *stub) ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ElasticBeanstalkListPlatformVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformVersions", input)
	return &ElasticBeanstalkListPlatformVersionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ElasticBeanstalkListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListTagsForResource", input)
	return &ElasticBeanstalkListTagsForResourceFuture{Future: future}
}

func (a *stub) RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RebuildEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *ElasticBeanstalkRebuildEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RebuildEnvironment", input)
	return &ElasticBeanstalkRebuildEnvironmentFuture{Future: future}
}

func (a *stub) RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RequestEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *ElasticBeanstalkRequestEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RequestEnvironmentInfo", input)
	return &ElasticBeanstalkRequestEnvironmentInfoFuture{Future: future}
}

func (a *stub) RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RestartAppServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *ElasticBeanstalkRestartAppServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RestartAppServer", input)
	return &ElasticBeanstalkRestartAppServerFuture{Future: future}
}

func (a *stub) RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RetrieveEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *ElasticBeanstalkRetrieveEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RetrieveEnvironmentInfo", input)
	return &ElasticBeanstalkRetrieveEnvironmentInfoFuture{Future: future}
}

func (a *stub) SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-SwapEnvironmentCNAMEs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *ElasticBeanstalkSwapEnvironmentCNAMEsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-SwapEnvironmentCNAMEs", input)
	return &ElasticBeanstalkSwapEnvironmentCNAMEsFuture{Future: future}
}

func (a *stub) TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-TerminateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *ElasticBeanstalkTerminateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-TerminateEnvironment", input)
	return &ElasticBeanstalkTerminateEnvironmentFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *ElasticBeanstalkUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplication", input)
	return &ElasticBeanstalkUpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationResourceLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *ElasticBeanstalkUpdateApplicationResourceLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationResourceLifecycle", input)
	return &ElasticBeanstalkUpdateApplicationResourceLifecycleFuture{Future: future}
}

func (a *stub) UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *ElasticBeanstalkUpdateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationVersion", input)
	return &ElasticBeanstalkUpdateApplicationVersionFuture{Future: future}
}

func (a *stub) UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *ElasticBeanstalkUpdateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateConfigurationTemplate", input)
	return &ElasticBeanstalkUpdateConfigurationTemplateFuture{Future: future}
}

func (a *stub) UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *ElasticBeanstalkUpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateEnvironment", input)
	return &ElasticBeanstalkUpdateEnvironmentFuture{Future: future}
}

func (a *stub) UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *ElasticBeanstalkUpdateTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateTagsForResource", input)
	return &ElasticBeanstalkUpdateTagsForResourceFuture{Future: future}
}

func (a *stub) ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ValidateConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ElasticBeanstalkValidateConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ValidateConfigurationSettings", input)
	return &ElasticBeanstalkValidateConfigurationSettingsFuture{Future: future}
}

func (a *stub) WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentTerminated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentTerminated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentUpdated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentUpdated", input)
	return clients.NewVoidFuture(future)
}
