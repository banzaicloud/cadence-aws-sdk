// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package elasticbeanstalkstub

import (
	"github.com/aws/aws-sdk-go/service/elasticbeanstalk"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AbortEnvironmentUpdateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AbortEnvironmentUpdateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplyEnvironmentManagedActionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplyEnvironmentManagedActionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CheckDNSAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CheckDNSAvailabilityFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ComposeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ComposeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateStorageLocationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateStorageLocationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEnvironmentConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEnvironmentConfigurationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeApplicationVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeApplicationVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeApplicationsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationOptionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEnvironmentHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEnvironmentHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEnvironmentManagedActionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEnvironmentManagedActionHistoryFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEnvironmentManagedActionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEnvironmentManagedActionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEnvironmentResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEnvironmentResourcesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEnvironmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEnvironmentsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancesHealthFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancesHealthFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePlatformVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePlatformVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateEnvironmentOperationsRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateEnvironmentOperationsRoleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAvailableSolutionStacksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAvailableSolutionStacksFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPlatformBranchesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPlatformBranchesFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPlatformVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPlatformVersionsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebuildEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebuildEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RequestEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RequestEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestartAppServerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestartAppServerFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetrieveEnvironmentInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetrieveEnvironmentInfoFuture) Get(ctx workflow.Context) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SwapEnvironmentCNAMEsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SwapEnvironmentCNAMEsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationResourceLifecycleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationResourceLifecycleFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateApplicationVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateApplicationVersionFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConfigurationTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConfigurationTemplateFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateEnvironmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateEnvironmentFuture) Get(ctx workflow.Context) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTagsForResourceFuture) Get(ctx workflow.Context) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateConfigurationSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateConfigurationSettingsFuture) Get(ctx workflow.Context) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortEnvironmentUpdate(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	var output elasticbeanstalk.AbortEnvironmentUpdateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AbortEnvironmentUpdate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AbortEnvironmentUpdateAsync(ctx workflow.Context, input *elasticbeanstalk.AbortEnvironmentUpdateInput) *AbortEnvironmentUpdateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AbortEnvironmentUpdate", input)
	return &AbortEnvironmentUpdateFuture{Future: future}
}

func (a *stub) ApplyEnvironmentManagedAction(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	var output elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ApplyEnvironmentManagedAction", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyEnvironmentManagedActionAsync(ctx workflow.Context, input *elasticbeanstalk.ApplyEnvironmentManagedActionInput) *ApplyEnvironmentManagedActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ApplyEnvironmentManagedAction", input)
	return &ApplyEnvironmentManagedActionFuture{Future: future}
}

func (a *stub) AssociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AssociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput) *AssociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-AssociateEnvironmentOperationsRole", input)
	return &AssociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *stub) CheckDNSAvailability(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	var output elasticbeanstalk.CheckDNSAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CheckDNSAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CheckDNSAvailabilityAsync(ctx workflow.Context, input *elasticbeanstalk.CheckDNSAvailabilityInput) *CheckDNSAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CheckDNSAvailability", input)
	return &CheckDNSAvailabilityFuture{Future: future}
}

func (a *stub) ComposeEnvironments(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ComposeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ComposeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.ComposeEnvironmentsInput) *ComposeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ComposeEnvironments", input)
	return &ComposeEnvironmentsFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationInput) *CreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplication", input)
	return &CreateApplicationFuture{Future: future}
}

func (a *stub) CreateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreateApplicationVersionInput) *CreateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateApplicationVersion", input)
	return &CreateApplicationVersionFuture{Future: future}
}

func (a *stub) CreateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.CreateConfigurationTemplateInput) *CreateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateConfigurationTemplate", input)
	return &CreateConfigurationTemplateFuture{Future: future}
}

func (a *stub) CreateEnvironment(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.CreateEnvironmentInput) *CreateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateEnvironment", input)
	return &CreateEnvironmentFuture{Future: future}
}

func (a *stub) CreatePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	var output elasticbeanstalk.CreatePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreatePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.CreatePlatformVersionInput) *CreatePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreatePlatformVersion", input)
	return &CreatePlatformVersionFuture{Future: future}
}

func (a *stub) CreateStorageLocation(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	var output elasticbeanstalk.CreateStorageLocationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateStorageLocation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStorageLocationAsync(ctx workflow.Context, input *elasticbeanstalk.CreateStorageLocationInput) *CreateStorageLocationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-CreateStorageLocation", input)
	return &CreateStorageLocationFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	var output elasticbeanstalk.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationInput) *DeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplication", input)
	return &DeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	var output elasticbeanstalk.DeleteApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteApplicationVersionInput) *DeleteApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteApplicationVersion", input)
	return &DeleteApplicationVersionFuture{Future: future}
}

func (a *stub) DeleteConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	var output elasticbeanstalk.DeleteConfigurationTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteConfigurationTemplateInput) *DeleteConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteConfigurationTemplate", input)
	return &DeleteConfigurationTemplateFuture{Future: future}
}

func (a *stub) DeleteEnvironmentConfiguration(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	var output elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteEnvironmentConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEnvironmentConfigurationAsync(ctx workflow.Context, input *elasticbeanstalk.DeleteEnvironmentConfigurationInput) *DeleteEnvironmentConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeleteEnvironmentConfiguration", input)
	return &DeleteEnvironmentConfigurationFuture{Future: future}
}

func (a *stub) DeletePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	var output elasticbeanstalk.DeletePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeletePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DeletePlatformVersionInput) *DeletePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DeletePlatformVersion", input)
	return &DeletePlatformVersionFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	var output elasticbeanstalk.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeAccountAttributesInput) *DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeAccountAttributes", input)
	return &DescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeApplicationVersions(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplicationVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationVersionsInput) *DescribeApplicationVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplicationVersions", input)
	return &DescribeApplicationVersionsFuture{Future: future}
}

func (a *stub) DescribeApplications(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	var output elasticbeanstalk.DescribeApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeApplicationsInput) *DescribeApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeApplications", input)
	return &DescribeApplicationsFuture{Future: future}
}

func (a *stub) DescribeConfigurationOptions(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationOptionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationOptionsInput) *DescribeConfigurationOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationOptions", input)
	return &DescribeConfigurationOptionsFuture{Future: future}
}

func (a *stub) DescribeConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.DescribeConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeConfigurationSettingsInput) *DescribeConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeConfigurationSettings", input)
	return &DescribeConfigurationSettingsFuture{Future: future}
}

func (a *stub) DescribeEnvironmentHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentHealthInput) *DescribeEnvironmentHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentHealth", input)
	return &DescribeEnvironmentHealthFuture{Future: future}
}

func (a *stub) DescribeEnvironmentManagedActionHistory(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentManagedActionHistoryAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput) *DescribeEnvironmentManagedActionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActionHistory", input)
	return &DescribeEnvironmentManagedActionHistoryFuture{Future: future}
}

func (a *stub) DescribeEnvironmentManagedActions(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentManagedActionsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentManagedActionsInput) *DescribeEnvironmentManagedActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentManagedActions", input)
	return &DescribeEnvironmentManagedActionsFuture{Future: future}
}

func (a *stub) DescribeEnvironmentResources(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	var output elasticbeanstalk.DescribeEnvironmentResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentResourcesAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentResourcesInput) *DescribeEnvironmentResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironmentResources", input)
	return &DescribeEnvironmentResourcesFuture{Future: future}
}

func (a *stub) DescribeEnvironments(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) (*elasticbeanstalk.EnvironmentDescriptionsMessage, error) {
	var output elasticbeanstalk.EnvironmentDescriptionsMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEnvironmentsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *DescribeEnvironmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEnvironments", input)
	return &DescribeEnvironmentsFuture{Future: future}
}

func (a *stub) DescribeEvents(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) (*elasticbeanstalk.DescribeEventsOutput, error) {
	var output elasticbeanstalk.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEventsInput) *DescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeEvents", input)
	return &DescribeEventsFuture{Future: future}
}

func (a *stub) DescribeInstancesHealth(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	var output elasticbeanstalk.DescribeInstancesHealthOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeInstancesHealth", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesHealthAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeInstancesHealthInput) *DescribeInstancesHealthFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribeInstancesHealth", input)
	return &DescribeInstancesHealthFuture{Future: future}
}

func (a *stub) DescribePlatformVersion(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	var output elasticbeanstalk.DescribePlatformVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribePlatformVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlatformVersionAsync(ctx workflow.Context, input *elasticbeanstalk.DescribePlatformVersionInput) *DescribePlatformVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DescribePlatformVersion", input)
	return &DescribePlatformVersionFuture{Future: future}
}

func (a *stub) DisassociateEnvironmentOperationsRole(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	var output elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DisassociateEnvironmentOperationsRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateEnvironmentOperationsRoleAsync(ctx workflow.Context, input *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput) *DisassociateEnvironmentOperationsRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-DisassociateEnvironmentOperationsRole", input)
	return &DisassociateEnvironmentOperationsRoleFuture{Future: future}
}

func (a *stub) ListAvailableSolutionStacks(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	var output elasticbeanstalk.ListAvailableSolutionStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListAvailableSolutionStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAvailableSolutionStacksAsync(ctx workflow.Context, input *elasticbeanstalk.ListAvailableSolutionStacksInput) *ListAvailableSolutionStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListAvailableSolutionStacks", input)
	return &ListAvailableSolutionStacksFuture{Future: future}
}

func (a *stub) ListPlatformBranches(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	var output elasticbeanstalk.ListPlatformBranchesOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformBranches", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlatformBranchesAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformBranchesInput) *ListPlatformBranchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformBranches", input)
	return &ListPlatformBranchesFuture{Future: future}
}

func (a *stub) ListPlatformVersions(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	var output elasticbeanstalk.ListPlatformVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlatformVersionsAsync(ctx workflow.Context, input *elasticbeanstalk.ListPlatformVersionsInput) *ListPlatformVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListPlatformVersions", input)
	return &ListPlatformVersionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	var output elasticbeanstalk.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RebuildEnvironment(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	var output elasticbeanstalk.RebuildEnvironmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RebuildEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebuildEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.RebuildEnvironmentInput) *RebuildEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RebuildEnvironment", input)
	return &RebuildEnvironmentFuture{Future: future}
}

func (a *stub) RequestEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RequestEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RequestEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RequestEnvironmentInfoInput) *RequestEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RequestEnvironmentInfo", input)
	return &RequestEnvironmentInfoFuture{Future: future}
}

func (a *stub) RestartAppServer(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) (*elasticbeanstalk.RestartAppServerOutput, error) {
	var output elasticbeanstalk.RestartAppServerOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RestartAppServer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestartAppServerAsync(ctx workflow.Context, input *elasticbeanstalk.RestartAppServerInput) *RestartAppServerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RestartAppServer", input)
	return &RestartAppServerFuture{Future: future}
}

func (a *stub) RetrieveEnvironmentInfo(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	var output elasticbeanstalk.RetrieveEnvironmentInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RetrieveEnvironmentInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetrieveEnvironmentInfoAsync(ctx workflow.Context, input *elasticbeanstalk.RetrieveEnvironmentInfoInput) *RetrieveEnvironmentInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-RetrieveEnvironmentInfo", input)
	return &RetrieveEnvironmentInfoFuture{Future: future}
}

func (a *stub) SwapEnvironmentCNAMEs(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	var output elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-SwapEnvironmentCNAMEs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SwapEnvironmentCNAMEsAsync(ctx workflow.Context, input *elasticbeanstalk.SwapEnvironmentCNAMEsInput) *SwapEnvironmentCNAMEsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-SwapEnvironmentCNAMEs", input)
	return &SwapEnvironmentCNAMEsFuture{Future: future}
}

func (a *stub) TerminateEnvironment(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-TerminateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.TerminateEnvironmentInput) *TerminateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-TerminateEnvironment", input)
	return &TerminateEnvironmentFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) (*elasticbeanstalk.ApplicationDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationInput) *UpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplication", input)
	return &UpdateApplicationFuture{Future: future}
}

func (a *stub) UpdateApplicationResourceLifecycle(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	var output elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationResourceLifecycle", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationResourceLifecycleAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationResourceLifecycleInput) *UpdateApplicationResourceLifecycleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationResourceLifecycle", input)
	return &UpdateApplicationResourceLifecycleFuture{Future: future}
}

func (a *stub) UpdateApplicationVersion(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) (*elasticbeanstalk.ApplicationVersionDescriptionMessage, error) {
	var output elasticbeanstalk.ApplicationVersionDescriptionMessage
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationVersionAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateApplicationVersionInput) *UpdateApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateApplicationVersion", input)
	return &UpdateApplicationVersionFuture{Future: future}
}

func (a *stub) UpdateConfigurationTemplate(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) (*elasticbeanstalk.ConfigurationSettingsDescription, error) {
	var output elasticbeanstalk.ConfigurationSettingsDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateConfigurationTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConfigurationTemplateAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateConfigurationTemplateInput) *UpdateConfigurationTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateConfigurationTemplate", input)
	return &UpdateConfigurationTemplateFuture{Future: future}
}

func (a *stub) UpdateEnvironment(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) (*elasticbeanstalk.EnvironmentDescription, error) {
	var output elasticbeanstalk.EnvironmentDescription
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateEnvironment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateEnvironmentAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateEnvironmentInput) *UpdateEnvironmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateEnvironment", input)
	return &UpdateEnvironmentFuture{Future: future}
}

func (a *stub) UpdateTagsForResource(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	var output elasticbeanstalk.UpdateTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTagsForResourceAsync(ctx workflow.Context, input *elasticbeanstalk.UpdateTagsForResourceInput) *UpdateTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-UpdateTagsForResource", input)
	return &UpdateTagsForResourceFuture{Future: future}
}

func (a *stub) ValidateConfigurationSettings(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	var output elasticbeanstalk.ValidateConfigurationSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ValidateConfigurationSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateConfigurationSettingsAsync(ctx workflow.Context, input *elasticbeanstalk.ValidateConfigurationSettingsInput) *ValidateConfigurationSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-ValidateConfigurationSettings", input)
	return &ValidateConfigurationSettingsFuture{Future: future}
}

func (a *stub) WaitUntilEnvironmentExists(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentExistsAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEnvironmentTerminated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentTerminated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentTerminatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentTerminated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilEnvironmentUpdated(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentUpdated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilEnvironmentUpdatedAsync(ctx workflow.Context, input *elasticbeanstalk.DescribeEnvironmentsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-elasticbeanstalk-WaitUntilEnvironmentUpdated", input)
	return clients.NewVoidFuture(future)
}
