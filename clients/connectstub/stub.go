// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package connectstub

import (
	"github.com/aws/aws-sdk-go/service/connect"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	var output connect.AssociateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateContactFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContactFlowFuture) Get(ctx workflow.Context) (*connect.CreateContactFlowOutput, error) {
	var output connect.CreateContactFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRoutingProfileFuture) Get(ctx workflow.Context) (*connect.CreateRoutingProfileOutput, error) {
	var output connect.CreateRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateUserFuture) Get(ctx workflow.Context) (*connect.CreateUserOutput, error) {
	var output connect.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteUserFuture) Get(ctx workflow.Context) (*connect.DeleteUserOutput, error) {
	var output connect.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeContactFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeContactFlowFuture) Get(ctx workflow.Context) (*connect.DescribeContactFlowOutput, error) {
	var output connect.DescribeContactFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRoutingProfileFuture) Get(ctx workflow.Context) (*connect.DescribeRoutingProfileOutput, error) {
	var output connect.DescribeRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserFuture) Get(ctx workflow.Context) (*connect.DescribeUserOutput, error) {
	var output connect.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserHierarchyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserHierarchyGroupFuture) Get(ctx workflow.Context) (*connect.DescribeUserHierarchyGroupOutput, error) {
	var output connect.DescribeUserHierarchyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeUserHierarchyStructureFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeUserHierarchyStructureFuture) Get(ctx workflow.Context) (*connect.DescribeUserHierarchyStructureOutput, error) {
	var output connect.DescribeUserHierarchyStructureOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	var output connect.DisassociateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContactAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContactAttributesFuture) Get(ctx workflow.Context) (*connect.GetContactAttributesOutput, error) {
	var output connect.GetContactAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCurrentMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCurrentMetricDataFuture) Get(ctx workflow.Context) (*connect.GetCurrentMetricDataOutput, error) {
	var output connect.GetCurrentMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFederationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFederationTokenFuture) Get(ctx workflow.Context) (*connect.GetFederationTokenOutput, error) {
	var output connect.GetFederationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMetricDataFuture) Get(ctx workflow.Context) (*connect.GetMetricDataOutput, error) {
	var output connect.GetMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListContactFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListContactFlowsFuture) Get(ctx workflow.Context) (*connect.ListContactFlowsOutput, error) {
	var output connect.ListContactFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListHoursOfOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListHoursOfOperationsFuture) Get(ctx workflow.Context) (*connect.ListHoursOfOperationsOutput, error) {
	var output connect.ListHoursOfOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPhoneNumbersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPhoneNumbersFuture) Get(ctx workflow.Context) (*connect.ListPhoneNumbersOutput, error) {
	var output connect.ListPhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPromptsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPromptsFuture) Get(ctx workflow.Context) (*connect.ListPromptsOutput, error) {
	var output connect.ListPromptsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListQueuesFuture) Get(ctx workflow.Context) (*connect.ListQueuesOutput, error) {
	var output connect.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.ListRoutingProfileQueuesOutput, error) {
	var output connect.ListRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListRoutingProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListRoutingProfilesFuture) Get(ctx workflow.Context) (*connect.ListRoutingProfilesOutput, error) {
	var output connect.ListRoutingProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSecurityProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSecurityProfilesFuture) Get(ctx workflow.Context) (*connect.ListSecurityProfilesOutput, error) {
	var output connect.ListSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*connect.ListTagsForResourceOutput, error) {
	var output connect.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUserHierarchyGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUserHierarchyGroupsFuture) Get(ctx workflow.Context) (*connect.ListUserHierarchyGroupsOutput, error) {
	var output connect.ListUserHierarchyGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListUsersFuture) Get(ctx workflow.Context) (*connect.ListUsersOutput, error) {
	var output connect.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResumeContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResumeContactRecordingFuture) Get(ctx workflow.Context) (*connect.ResumeContactRecordingOutput, error) {
	var output connect.ResumeContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartChatContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartChatContactFuture) Get(ctx workflow.Context) (*connect.StartChatContactOutput, error) {
	var output connect.StartChatContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartContactRecordingFuture) Get(ctx workflow.Context) (*connect.StartContactRecordingOutput, error) {
	var output connect.StartContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartOutboundVoiceContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartOutboundVoiceContactFuture) Get(ctx workflow.Context) (*connect.StartOutboundVoiceContactOutput, error) {
	var output connect.StartOutboundVoiceContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopContactFuture) Get(ctx workflow.Context) (*connect.StopContactOutput, error) {
	var output connect.StopContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopContactRecordingFuture) Get(ctx workflow.Context) (*connect.StopContactRecordingOutput, error) {
	var output connect.StopContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SuspendContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SuspendContactRecordingFuture) Get(ctx workflow.Context) (*connect.SuspendContactRecordingOutput, error) {
	var output connect.SuspendContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*connect.TagResourceOutput, error) {
	var output connect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*connect.UntagResourceOutput, error) {
	var output connect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContactAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContactAttributesFuture) Get(ctx workflow.Context) (*connect.UpdateContactAttributesOutput, error) {
	var output connect.UpdateContactAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContactFlowContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContactFlowContentFuture) Get(ctx workflow.Context) (*connect.UpdateContactFlowContentOutput, error) {
	var output connect.UpdateContactFlowContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateContactFlowNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateContactFlowNameFuture) Get(ctx workflow.Context) (*connect.UpdateContactFlowNameOutput, error) {
	var output connect.UpdateContactFlowNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoutingProfileConcurrencyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoutingProfileConcurrencyFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	var output connect.UpdateRoutingProfileConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoutingProfileDefaultOutboundQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoutingProfileDefaultOutboundQueueFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	var output connect.UpdateRoutingProfileDefaultOutboundQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoutingProfileNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoutingProfileNameFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileNameOutput, error) {
	var output connect.UpdateRoutingProfileNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	var output connect.UpdateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserHierarchyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserHierarchyFuture) Get(ctx workflow.Context) (*connect.UpdateUserHierarchyOutput, error) {
	var output connect.UpdateUserHierarchyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserIdentityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserIdentityInfoFuture) Get(ctx workflow.Context) (*connect.UpdateUserIdentityInfoOutput, error) {
	var output connect.UpdateUserIdentityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserPhoneConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserPhoneConfigFuture) Get(ctx workflow.Context) (*connect.UpdateUserPhoneConfigOutput, error) {
	var output connect.UpdateUserPhoneConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserRoutingProfileFuture) Get(ctx workflow.Context) (*connect.UpdateUserRoutingProfileOutput, error) {
	var output connect.UpdateUserRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateUserSecurityProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateUserSecurityProfilesFuture) Get(ctx workflow.Context) (*connect.UpdateUserSecurityProfilesOutput, error) {
	var output connect.UpdateUserSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoutingProfileQueues(ctx workflow.Context, input *connect.AssociateRoutingProfileQueuesInput) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	var output connect.AssociateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-AssociateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.AssociateRoutingProfileQueuesInput) *AssociateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-AssociateRoutingProfileQueues", input)
	return &AssociateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) CreateContactFlow(ctx workflow.Context, input *connect.CreateContactFlowInput) (*connect.CreateContactFlowOutput, error) {
	var output connect.CreateContactFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateContactFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactFlowAsync(ctx workflow.Context, input *connect.CreateContactFlowInput) *CreateContactFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateContactFlow", input)
	return &CreateContactFlowFuture{Future: future}
}

func (a *stub) CreateRoutingProfile(ctx workflow.Context, input *connect.CreateRoutingProfileInput) (*connect.CreateRoutingProfileOutput, error) {
	var output connect.CreateRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoutingProfileAsync(ctx workflow.Context, input *connect.CreateRoutingProfileInput) *CreateRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateRoutingProfile", input)
	return &CreateRoutingProfileFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *connect.CreateUserInput) (*connect.CreateUserOutput, error) {
	var output connect.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *connect.CreateUserInput) *CreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateUser", input)
	return &CreateUserFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *connect.DeleteUserInput) (*connect.DeleteUserOutput, error) {
	var output connect.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *connect.DeleteUserInput) *DeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DeleteUser", input)
	return &DeleteUserFuture{Future: future}
}

func (a *stub) DescribeContactFlow(ctx workflow.Context, input *connect.DescribeContactFlowInput) (*connect.DescribeContactFlowOutput, error) {
	var output connect.DescribeContactFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeContactFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContactFlowAsync(ctx workflow.Context, input *connect.DescribeContactFlowInput) *DescribeContactFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeContactFlow", input)
	return &DescribeContactFlowFuture{Future: future}
}

func (a *stub) DescribeRoutingProfile(ctx workflow.Context, input *connect.DescribeRoutingProfileInput) (*connect.DescribeRoutingProfileOutput, error) {
	var output connect.DescribeRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRoutingProfileAsync(ctx workflow.Context, input *connect.DescribeRoutingProfileInput) *DescribeRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeRoutingProfile", input)
	return &DescribeRoutingProfileFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *connect.DescribeUserInput) (*connect.DescribeUserOutput, error) {
	var output connect.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *connect.DescribeUserInput) *DescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUser", input)
	return &DescribeUserFuture{Future: future}
}

func (a *stub) DescribeUserHierarchyGroup(ctx workflow.Context, input *connect.DescribeUserHierarchyGroupInput) (*connect.DescribeUserHierarchyGroupOutput, error) {
	var output connect.DescribeUserHierarchyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserHierarchyGroupAsync(ctx workflow.Context, input *connect.DescribeUserHierarchyGroupInput) *DescribeUserHierarchyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyGroup", input)
	return &DescribeUserHierarchyGroupFuture{Future: future}
}

func (a *stub) DescribeUserHierarchyStructure(ctx workflow.Context, input *connect.DescribeUserHierarchyStructureInput) (*connect.DescribeUserHierarchyStructureOutput, error) {
	var output connect.DescribeUserHierarchyStructureOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyStructure", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserHierarchyStructureAsync(ctx workflow.Context, input *connect.DescribeUserHierarchyStructureInput) *DescribeUserHierarchyStructureFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyStructure", input)
	return &DescribeUserHierarchyStructureFuture{Future: future}
}

func (a *stub) DisassociateRoutingProfileQueues(ctx workflow.Context, input *connect.DisassociateRoutingProfileQueuesInput) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	var output connect.DisassociateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DisassociateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.DisassociateRoutingProfileQueuesInput) *DisassociateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DisassociateRoutingProfileQueues", input)
	return &DisassociateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) GetContactAttributes(ctx workflow.Context, input *connect.GetContactAttributesInput) (*connect.GetContactAttributesOutput, error) {
	var output connect.GetContactAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetContactAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactAttributesAsync(ctx workflow.Context, input *connect.GetContactAttributesInput) *GetContactAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetContactAttributes", input)
	return &GetContactAttributesFuture{Future: future}
}

func (a *stub) GetCurrentMetricData(ctx workflow.Context, input *connect.GetCurrentMetricDataInput) (*connect.GetCurrentMetricDataOutput, error) {
	var output connect.GetCurrentMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetCurrentMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCurrentMetricDataAsync(ctx workflow.Context, input *connect.GetCurrentMetricDataInput) *GetCurrentMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetCurrentMetricData", input)
	return &GetCurrentMetricDataFuture{Future: future}
}

func (a *stub) GetFederationToken(ctx workflow.Context, input *connect.GetFederationTokenInput) (*connect.GetFederationTokenOutput, error) {
	var output connect.GetFederationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetFederationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFederationTokenAsync(ctx workflow.Context, input *connect.GetFederationTokenInput) *GetFederationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetFederationToken", input)
	return &GetFederationTokenFuture{Future: future}
}

func (a *stub) GetMetricData(ctx workflow.Context, input *connect.GetMetricDataInput) (*connect.GetMetricDataOutput, error) {
	var output connect.GetMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricDataAsync(ctx workflow.Context, input *connect.GetMetricDataInput) *GetMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetMetricData", input)
	return &GetMetricDataFuture{Future: future}
}

func (a *stub) ListContactFlows(ctx workflow.Context, input *connect.ListContactFlowsInput) (*connect.ListContactFlowsOutput, error) {
	var output connect.ListContactFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListContactFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContactFlowsAsync(ctx workflow.Context, input *connect.ListContactFlowsInput) *ListContactFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListContactFlows", input)
	return &ListContactFlowsFuture{Future: future}
}

func (a *stub) ListHoursOfOperations(ctx workflow.Context, input *connect.ListHoursOfOperationsInput) (*connect.ListHoursOfOperationsOutput, error) {
	var output connect.ListHoursOfOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListHoursOfOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHoursOfOperationsAsync(ctx workflow.Context, input *connect.ListHoursOfOperationsInput) *ListHoursOfOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListHoursOfOperations", input)
	return &ListHoursOfOperationsFuture{Future: future}
}

func (a *stub) ListPhoneNumbers(ctx workflow.Context, input *connect.ListPhoneNumbersInput) (*connect.ListPhoneNumbersOutput, error) {
	var output connect.ListPhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListPhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPhoneNumbersAsync(ctx workflow.Context, input *connect.ListPhoneNumbersInput) *ListPhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListPhoneNumbers", input)
	return &ListPhoneNumbersFuture{Future: future}
}

func (a *stub) ListPrompts(ctx workflow.Context, input *connect.ListPromptsInput) (*connect.ListPromptsOutput, error) {
	var output connect.ListPromptsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListPrompts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPromptsAsync(ctx workflow.Context, input *connect.ListPromptsInput) *ListPromptsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListPrompts", input)
	return &ListPromptsFuture{Future: future}
}

func (a *stub) ListQueues(ctx workflow.Context, input *connect.ListQueuesInput) (*connect.ListQueuesOutput, error) {
	var output connect.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueuesAsync(ctx workflow.Context, input *connect.ListQueuesInput) *ListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListQueues", input)
	return &ListQueuesFuture{Future: future}
}

func (a *stub) ListRoutingProfileQueues(ctx workflow.Context, input *connect.ListRoutingProfileQueuesInput) (*connect.ListRoutingProfileQueuesOutput, error) {
	var output connect.ListRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.ListRoutingProfileQueuesInput) *ListRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfileQueues", input)
	return &ListRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) ListRoutingProfiles(ctx workflow.Context, input *connect.ListRoutingProfilesInput) (*connect.ListRoutingProfilesOutput, error) {
	var output connect.ListRoutingProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoutingProfilesAsync(ctx workflow.Context, input *connect.ListRoutingProfilesInput) *ListRoutingProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfiles", input)
	return &ListRoutingProfilesFuture{Future: future}
}

func (a *stub) ListSecurityProfiles(ctx workflow.Context, input *connect.ListSecurityProfilesInput) (*connect.ListSecurityProfilesOutput, error) {
	var output connect.ListSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecurityProfilesAsync(ctx workflow.Context, input *connect.ListSecurityProfilesInput) *ListSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListSecurityProfiles", input)
	return &ListSecurityProfilesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *connect.ListTagsForResourceInput) (*connect.ListTagsForResourceOutput, error) {
	var output connect.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *connect.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUserHierarchyGroups(ctx workflow.Context, input *connect.ListUserHierarchyGroupsInput) (*connect.ListUserHierarchyGroupsOutput, error) {
	var output connect.ListUserHierarchyGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListUserHierarchyGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserHierarchyGroupsAsync(ctx workflow.Context, input *connect.ListUserHierarchyGroupsInput) *ListUserHierarchyGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListUserHierarchyGroups", input)
	return &ListUserHierarchyGroupsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *connect.ListUsersInput) (*connect.ListUsersOutput, error) {
	var output connect.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *connect.ListUsersInput) *ListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListUsers", input)
	return &ListUsersFuture{Future: future}
}

func (a *stub) ResumeContactRecording(ctx workflow.Context, input *connect.ResumeContactRecordingInput) (*connect.ResumeContactRecordingOutput, error) {
	var output connect.ResumeContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ResumeContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeContactRecordingAsync(ctx workflow.Context, input *connect.ResumeContactRecordingInput) *ResumeContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ResumeContactRecording", input)
	return &ResumeContactRecordingFuture{Future: future}
}

func (a *stub) StartChatContact(ctx workflow.Context, input *connect.StartChatContactInput) (*connect.StartChatContactOutput, error) {
	var output connect.StartChatContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartChatContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartChatContactAsync(ctx workflow.Context, input *connect.StartChatContactInput) *StartChatContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartChatContact", input)
	return &StartChatContactFuture{Future: future}
}

func (a *stub) StartContactRecording(ctx workflow.Context, input *connect.StartContactRecordingInput) (*connect.StartContactRecordingOutput, error) {
	var output connect.StartContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartContactRecordingAsync(ctx workflow.Context, input *connect.StartContactRecordingInput) *StartContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartContactRecording", input)
	return &StartContactRecordingFuture{Future: future}
}

func (a *stub) StartOutboundVoiceContact(ctx workflow.Context, input *connect.StartOutboundVoiceContactInput) (*connect.StartOutboundVoiceContactOutput, error) {
	var output connect.StartOutboundVoiceContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartOutboundVoiceContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartOutboundVoiceContactAsync(ctx workflow.Context, input *connect.StartOutboundVoiceContactInput) *StartOutboundVoiceContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartOutboundVoiceContact", input)
	return &StartOutboundVoiceContactFuture{Future: future}
}

func (a *stub) StopContact(ctx workflow.Context, input *connect.StopContactInput) (*connect.StopContactOutput, error) {
	var output connect.StopContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StopContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopContactAsync(ctx workflow.Context, input *connect.StopContactInput) *StopContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StopContact", input)
	return &StopContactFuture{Future: future}
}

func (a *stub) StopContactRecording(ctx workflow.Context, input *connect.StopContactRecordingInput) (*connect.StopContactRecordingOutput, error) {
	var output connect.StopContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StopContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopContactRecordingAsync(ctx workflow.Context, input *connect.StopContactRecordingInput) *StopContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StopContactRecording", input)
	return &StopContactRecordingFuture{Future: future}
}

func (a *stub) SuspendContactRecording(ctx workflow.Context, input *connect.SuspendContactRecordingInput) (*connect.SuspendContactRecordingOutput, error) {
	var output connect.SuspendContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-SuspendContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SuspendContactRecordingAsync(ctx workflow.Context, input *connect.SuspendContactRecordingInput) *SuspendContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-SuspendContactRecording", input)
	return &SuspendContactRecordingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *connect.TagResourceInput) (*connect.TagResourceOutput, error) {
	var output connect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *connect.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *connect.UntagResourceInput) (*connect.UntagResourceOutput, error) {
	var output connect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *connect.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateContactAttributes(ctx workflow.Context, input *connect.UpdateContactAttributesInput) (*connect.UpdateContactAttributesOutput, error) {
	var output connect.UpdateContactAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactAttributesAsync(ctx workflow.Context, input *connect.UpdateContactAttributesInput) *UpdateContactAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactAttributes", input)
	return &UpdateContactAttributesFuture{Future: future}
}

func (a *stub) UpdateContactFlowContent(ctx workflow.Context, input *connect.UpdateContactFlowContentInput) (*connect.UpdateContactFlowContentOutput, error) {
	var output connect.UpdateContactFlowContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactFlowContentAsync(ctx workflow.Context, input *connect.UpdateContactFlowContentInput) *UpdateContactFlowContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowContent", input)
	return &UpdateContactFlowContentFuture{Future: future}
}

func (a *stub) UpdateContactFlowName(ctx workflow.Context, input *connect.UpdateContactFlowNameInput) (*connect.UpdateContactFlowNameOutput, error) {
	var output connect.UpdateContactFlowNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactFlowNameAsync(ctx workflow.Context, input *connect.UpdateContactFlowNameInput) *UpdateContactFlowNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowName", input)
	return &UpdateContactFlowNameFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileConcurrency(ctx workflow.Context, input *connect.UpdateRoutingProfileConcurrencyInput) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	var output connect.UpdateRoutingProfileConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileConcurrencyAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileConcurrencyInput) *UpdateRoutingProfileConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileConcurrency", input)
	return &UpdateRoutingProfileConcurrencyFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileDefaultOutboundQueue(ctx workflow.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	var output connect.UpdateRoutingProfileDefaultOutboundQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileDefaultOutboundQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileDefaultOutboundQueueAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput) *UpdateRoutingProfileDefaultOutboundQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileDefaultOutboundQueue", input)
	return &UpdateRoutingProfileDefaultOutboundQueueFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileName(ctx workflow.Context, input *connect.UpdateRoutingProfileNameInput) (*connect.UpdateRoutingProfileNameOutput, error) {
	var output connect.UpdateRoutingProfileNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileNameAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileNameInput) *UpdateRoutingProfileNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileName", input)
	return &UpdateRoutingProfileNameFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileQueues(ctx workflow.Context, input *connect.UpdateRoutingProfileQueuesInput) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	var output connect.UpdateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileQueuesInput) *UpdateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileQueues", input)
	return &UpdateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) UpdateUserHierarchy(ctx workflow.Context, input *connect.UpdateUserHierarchyInput) (*connect.UpdateUserHierarchyOutput, error) {
	var output connect.UpdateUserHierarchyOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserHierarchy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserHierarchyAsync(ctx workflow.Context, input *connect.UpdateUserHierarchyInput) *UpdateUserHierarchyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserHierarchy", input)
	return &UpdateUserHierarchyFuture{Future: future}
}

func (a *stub) UpdateUserIdentityInfo(ctx workflow.Context, input *connect.UpdateUserIdentityInfoInput) (*connect.UpdateUserIdentityInfoOutput, error) {
	var output connect.UpdateUserIdentityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserIdentityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserIdentityInfoAsync(ctx workflow.Context, input *connect.UpdateUserIdentityInfoInput) *UpdateUserIdentityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserIdentityInfo", input)
	return &UpdateUserIdentityInfoFuture{Future: future}
}

func (a *stub) UpdateUserPhoneConfig(ctx workflow.Context, input *connect.UpdateUserPhoneConfigInput) (*connect.UpdateUserPhoneConfigOutput, error) {
	var output connect.UpdateUserPhoneConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserPhoneConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserPhoneConfigAsync(ctx workflow.Context, input *connect.UpdateUserPhoneConfigInput) *UpdateUserPhoneConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserPhoneConfig", input)
	return &UpdateUserPhoneConfigFuture{Future: future}
}

func (a *stub) UpdateUserRoutingProfile(ctx workflow.Context, input *connect.UpdateUserRoutingProfileInput) (*connect.UpdateUserRoutingProfileOutput, error) {
	var output connect.UpdateUserRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserRoutingProfileAsync(ctx workflow.Context, input *connect.UpdateUserRoutingProfileInput) *UpdateUserRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserRoutingProfile", input)
	return &UpdateUserRoutingProfileFuture{Future: future}
}

func (a *stub) UpdateUserSecurityProfiles(ctx workflow.Context, input *connect.UpdateUserSecurityProfilesInput) (*connect.UpdateUserSecurityProfilesOutput, error) {
	var output connect.UpdateUserSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserSecurityProfilesAsync(ctx workflow.Context, input *connect.UpdateUserSecurityProfilesInput) *UpdateUserSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserSecurityProfiles", input)
	return &UpdateUserSecurityProfilesFuture{Future: future}
}
