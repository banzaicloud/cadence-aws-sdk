// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package connectstub

import (
	"github.com/aws/aws-sdk-go/service/connect"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ConnectAssociateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectAssociateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	var output connect.AssociateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectCreateContactFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectCreateContactFlowFuture) Get(ctx workflow.Context) (*connect.CreateContactFlowOutput, error) {
	var output connect.CreateContactFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectCreateRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectCreateRoutingProfileFuture) Get(ctx workflow.Context) (*connect.CreateRoutingProfileOutput, error) {
	var output connect.CreateRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectCreateUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectCreateUserFuture) Get(ctx workflow.Context) (*connect.CreateUserOutput, error) {
	var output connect.CreateUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDeleteUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDeleteUserFuture) Get(ctx workflow.Context) (*connect.DeleteUserOutput, error) {
	var output connect.DeleteUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDescribeContactFlowFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDescribeContactFlowFuture) Get(ctx workflow.Context) (*connect.DescribeContactFlowOutput, error) {
	var output connect.DescribeContactFlowOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDescribeRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDescribeRoutingProfileFuture) Get(ctx workflow.Context) (*connect.DescribeRoutingProfileOutput, error) {
	var output connect.DescribeRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDescribeUserFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDescribeUserFuture) Get(ctx workflow.Context) (*connect.DescribeUserOutput, error) {
	var output connect.DescribeUserOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDescribeUserHierarchyGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDescribeUserHierarchyGroupFuture) Get(ctx workflow.Context) (*connect.DescribeUserHierarchyGroupOutput, error) {
	var output connect.DescribeUserHierarchyGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDescribeUserHierarchyStructureFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDescribeUserHierarchyStructureFuture) Get(ctx workflow.Context) (*connect.DescribeUserHierarchyStructureOutput, error) {
	var output connect.DescribeUserHierarchyStructureOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDisassociateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDisassociateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	var output connect.DisassociateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectGetContactAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectGetContactAttributesFuture) Get(ctx workflow.Context) (*connect.GetContactAttributesOutput, error) {
	var output connect.GetContactAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectGetCurrentMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectGetCurrentMetricDataFuture) Get(ctx workflow.Context) (*connect.GetCurrentMetricDataOutput, error) {
	var output connect.GetCurrentMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectGetFederationTokenFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectGetFederationTokenFuture) Get(ctx workflow.Context) (*connect.GetFederationTokenOutput, error) {
	var output connect.GetFederationTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectGetMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectGetMetricDataFuture) Get(ctx workflow.Context) (*connect.GetMetricDataOutput, error) {
	var output connect.GetMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListContactFlowsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListContactFlowsFuture) Get(ctx workflow.Context) (*connect.ListContactFlowsOutput, error) {
	var output connect.ListContactFlowsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListHoursOfOperationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListHoursOfOperationsFuture) Get(ctx workflow.Context) (*connect.ListHoursOfOperationsOutput, error) {
	var output connect.ListHoursOfOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListPhoneNumbersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListPhoneNumbersFuture) Get(ctx workflow.Context) (*connect.ListPhoneNumbersOutput, error) {
	var output connect.ListPhoneNumbersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListPromptsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListPromptsFuture) Get(ctx workflow.Context) (*connect.ListPromptsOutput, error) {
	var output connect.ListPromptsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListQueuesFuture) Get(ctx workflow.Context) (*connect.ListQueuesOutput, error) {
	var output connect.ListQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.ListRoutingProfileQueuesOutput, error) {
	var output connect.ListRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListRoutingProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListRoutingProfilesFuture) Get(ctx workflow.Context) (*connect.ListRoutingProfilesOutput, error) {
	var output connect.ListRoutingProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListSecurityProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListSecurityProfilesFuture) Get(ctx workflow.Context) (*connect.ListSecurityProfilesOutput, error) {
	var output connect.ListSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListTagsForResourceFuture) Get(ctx workflow.Context) (*connect.ListTagsForResourceOutput, error) {
	var output connect.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListUserHierarchyGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListUserHierarchyGroupsFuture) Get(ctx workflow.Context) (*connect.ListUserHierarchyGroupsOutput, error) {
	var output connect.ListUserHierarchyGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectListUsersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectListUsersFuture) Get(ctx workflow.Context) (*connect.ListUsersOutput, error) {
	var output connect.ListUsersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectResumeContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectResumeContactRecordingFuture) Get(ctx workflow.Context) (*connect.ResumeContactRecordingOutput, error) {
	var output connect.ResumeContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectStartChatContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectStartChatContactFuture) Get(ctx workflow.Context) (*connect.StartChatContactOutput, error) {
	var output connect.StartChatContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectStartContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectStartContactRecordingFuture) Get(ctx workflow.Context) (*connect.StartContactRecordingOutput, error) {
	var output connect.StartContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectStartOutboundVoiceContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectStartOutboundVoiceContactFuture) Get(ctx workflow.Context) (*connect.StartOutboundVoiceContactOutput, error) {
	var output connect.StartOutboundVoiceContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectStopContactFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectStopContactFuture) Get(ctx workflow.Context) (*connect.StopContactOutput, error) {
	var output connect.StopContactOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectStopContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectStopContactRecordingFuture) Get(ctx workflow.Context) (*connect.StopContactRecordingOutput, error) {
	var output connect.StopContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectSuspendContactRecordingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectSuspendContactRecordingFuture) Get(ctx workflow.Context) (*connect.SuspendContactRecordingOutput, error) {
	var output connect.SuspendContactRecordingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectTagResourceFuture) Get(ctx workflow.Context) (*connect.TagResourceOutput, error) {
	var output connect.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUntagResourceFuture) Get(ctx workflow.Context) (*connect.UntagResourceOutput, error) {
	var output connect.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateContactAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateContactAttributesFuture) Get(ctx workflow.Context) (*connect.UpdateContactAttributesOutput, error) {
	var output connect.UpdateContactAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateContactFlowContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateContactFlowContentFuture) Get(ctx workflow.Context) (*connect.UpdateContactFlowContentOutput, error) {
	var output connect.UpdateContactFlowContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateContactFlowNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateContactFlowNameFuture) Get(ctx workflow.Context) (*connect.UpdateContactFlowNameOutput, error) {
	var output connect.UpdateContactFlowNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateRoutingProfileConcurrencyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateRoutingProfileConcurrencyFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	var output connect.UpdateRoutingProfileConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateRoutingProfileDefaultOutboundQueueFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateRoutingProfileDefaultOutboundQueueFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	var output connect.UpdateRoutingProfileDefaultOutboundQueueOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateRoutingProfileNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateRoutingProfileNameFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileNameOutput, error) {
	var output connect.UpdateRoutingProfileNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateRoutingProfileQueuesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateRoutingProfileQueuesFuture) Get(ctx workflow.Context) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	var output connect.UpdateRoutingProfileQueuesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateUserHierarchyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateUserHierarchyFuture) Get(ctx workflow.Context) (*connect.UpdateUserHierarchyOutput, error) {
	var output connect.UpdateUserHierarchyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateUserIdentityInfoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateUserIdentityInfoFuture) Get(ctx workflow.Context) (*connect.UpdateUserIdentityInfoOutput, error) {
	var output connect.UpdateUserIdentityInfoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateUserPhoneConfigFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateUserPhoneConfigFuture) Get(ctx workflow.Context) (*connect.UpdateUserPhoneConfigOutput, error) {
	var output connect.UpdateUserPhoneConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateUserRoutingProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateUserRoutingProfileFuture) Get(ctx workflow.Context) (*connect.UpdateUserRoutingProfileOutput, error) {
	var output connect.UpdateUserRoutingProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectUpdateUserSecurityProfilesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectUpdateUserSecurityProfilesFuture) Get(ctx workflow.Context) (*connect.UpdateUserSecurityProfilesOutput, error) {
	var output connect.UpdateUserSecurityProfilesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoutingProfileQueues(ctx workflow.Context, input *connect.AssociateRoutingProfileQueuesInput) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	var output connect.AssociateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-AssociateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.AssociateRoutingProfileQueuesInput) *ConnectAssociateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-AssociateRoutingProfileQueues", input)
	return &ConnectAssociateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) CreateContactFlow(ctx workflow.Context, input *connect.CreateContactFlowInput) (*connect.CreateContactFlowOutput, error) {
	var output connect.CreateContactFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateContactFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContactFlowAsync(ctx workflow.Context, input *connect.CreateContactFlowInput) *ConnectCreateContactFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateContactFlow", input)
	return &ConnectCreateContactFlowFuture{Future: future}
}

func (a *stub) CreateRoutingProfile(ctx workflow.Context, input *connect.CreateRoutingProfileInput) (*connect.CreateRoutingProfileOutput, error) {
	var output connect.CreateRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRoutingProfileAsync(ctx workflow.Context, input *connect.CreateRoutingProfileInput) *ConnectCreateRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateRoutingProfile", input)
	return &ConnectCreateRoutingProfileFuture{Future: future}
}

func (a *stub) CreateUser(ctx workflow.Context, input *connect.CreateUserInput) (*connect.CreateUserOutput, error) {
	var output connect.CreateUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-CreateUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateUserAsync(ctx workflow.Context, input *connect.CreateUserInput) *ConnectCreateUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-CreateUser", input)
	return &ConnectCreateUserFuture{Future: future}
}

func (a *stub) DeleteUser(ctx workflow.Context, input *connect.DeleteUserInput) (*connect.DeleteUserOutput, error) {
	var output connect.DeleteUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DeleteUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteUserAsync(ctx workflow.Context, input *connect.DeleteUserInput) *ConnectDeleteUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DeleteUser", input)
	return &ConnectDeleteUserFuture{Future: future}
}

func (a *stub) DescribeContactFlow(ctx workflow.Context, input *connect.DescribeContactFlowInput) (*connect.DescribeContactFlowOutput, error) {
	var output connect.DescribeContactFlowOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeContactFlow", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContactFlowAsync(ctx workflow.Context, input *connect.DescribeContactFlowInput) *ConnectDescribeContactFlowFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeContactFlow", input)
	return &ConnectDescribeContactFlowFuture{Future: future}
}

func (a *stub) DescribeRoutingProfile(ctx workflow.Context, input *connect.DescribeRoutingProfileInput) (*connect.DescribeRoutingProfileOutput, error) {
	var output connect.DescribeRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRoutingProfileAsync(ctx workflow.Context, input *connect.DescribeRoutingProfileInput) *ConnectDescribeRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeRoutingProfile", input)
	return &ConnectDescribeRoutingProfileFuture{Future: future}
}

func (a *stub) DescribeUser(ctx workflow.Context, input *connect.DescribeUserInput) (*connect.DescribeUserOutput, error) {
	var output connect.DescribeUserOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUser", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserAsync(ctx workflow.Context, input *connect.DescribeUserInput) *ConnectDescribeUserFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUser", input)
	return &ConnectDescribeUserFuture{Future: future}
}

func (a *stub) DescribeUserHierarchyGroup(ctx workflow.Context, input *connect.DescribeUserHierarchyGroupInput) (*connect.DescribeUserHierarchyGroupOutput, error) {
	var output connect.DescribeUserHierarchyGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserHierarchyGroupAsync(ctx workflow.Context, input *connect.DescribeUserHierarchyGroupInput) *ConnectDescribeUserHierarchyGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyGroup", input)
	return &ConnectDescribeUserHierarchyGroupFuture{Future: future}
}

func (a *stub) DescribeUserHierarchyStructure(ctx workflow.Context, input *connect.DescribeUserHierarchyStructureInput) (*connect.DescribeUserHierarchyStructureOutput, error) {
	var output connect.DescribeUserHierarchyStructureOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyStructure", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeUserHierarchyStructureAsync(ctx workflow.Context, input *connect.DescribeUserHierarchyStructureInput) *ConnectDescribeUserHierarchyStructureFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DescribeUserHierarchyStructure", input)
	return &ConnectDescribeUserHierarchyStructureFuture{Future: future}
}

func (a *stub) DisassociateRoutingProfileQueues(ctx workflow.Context, input *connect.DisassociateRoutingProfileQueuesInput) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	var output connect.DisassociateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-DisassociateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.DisassociateRoutingProfileQueuesInput) *ConnectDisassociateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-DisassociateRoutingProfileQueues", input)
	return &ConnectDisassociateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) GetContactAttributes(ctx workflow.Context, input *connect.GetContactAttributesInput) (*connect.GetContactAttributesOutput, error) {
	var output connect.GetContactAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetContactAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContactAttributesAsync(ctx workflow.Context, input *connect.GetContactAttributesInput) *ConnectGetContactAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetContactAttributes", input)
	return &ConnectGetContactAttributesFuture{Future: future}
}

func (a *stub) GetCurrentMetricData(ctx workflow.Context, input *connect.GetCurrentMetricDataInput) (*connect.GetCurrentMetricDataOutput, error) {
	var output connect.GetCurrentMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetCurrentMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCurrentMetricDataAsync(ctx workflow.Context, input *connect.GetCurrentMetricDataInput) *ConnectGetCurrentMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetCurrentMetricData", input)
	return &ConnectGetCurrentMetricDataFuture{Future: future}
}

func (a *stub) GetFederationToken(ctx workflow.Context, input *connect.GetFederationTokenInput) (*connect.GetFederationTokenOutput, error) {
	var output connect.GetFederationTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetFederationToken", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFederationTokenAsync(ctx workflow.Context, input *connect.GetFederationTokenInput) *ConnectGetFederationTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetFederationToken", input)
	return &ConnectGetFederationTokenFuture{Future: future}
}

func (a *stub) GetMetricData(ctx workflow.Context, input *connect.GetMetricDataInput) (*connect.GetMetricDataOutput, error) {
	var output connect.GetMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-GetMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricDataAsync(ctx workflow.Context, input *connect.GetMetricDataInput) *ConnectGetMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-GetMetricData", input)
	return &ConnectGetMetricDataFuture{Future: future}
}

func (a *stub) ListContactFlows(ctx workflow.Context, input *connect.ListContactFlowsInput) (*connect.ListContactFlowsOutput, error) {
	var output connect.ListContactFlowsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListContactFlows", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContactFlowsAsync(ctx workflow.Context, input *connect.ListContactFlowsInput) *ConnectListContactFlowsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListContactFlows", input)
	return &ConnectListContactFlowsFuture{Future: future}
}

func (a *stub) ListHoursOfOperations(ctx workflow.Context, input *connect.ListHoursOfOperationsInput) (*connect.ListHoursOfOperationsOutput, error) {
	var output connect.ListHoursOfOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListHoursOfOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListHoursOfOperationsAsync(ctx workflow.Context, input *connect.ListHoursOfOperationsInput) *ConnectListHoursOfOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListHoursOfOperations", input)
	return &ConnectListHoursOfOperationsFuture{Future: future}
}

func (a *stub) ListPhoneNumbers(ctx workflow.Context, input *connect.ListPhoneNumbersInput) (*connect.ListPhoneNumbersOutput, error) {
	var output connect.ListPhoneNumbersOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListPhoneNumbers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPhoneNumbersAsync(ctx workflow.Context, input *connect.ListPhoneNumbersInput) *ConnectListPhoneNumbersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListPhoneNumbers", input)
	return &ConnectListPhoneNumbersFuture{Future: future}
}

func (a *stub) ListPrompts(ctx workflow.Context, input *connect.ListPromptsInput) (*connect.ListPromptsOutput, error) {
	var output connect.ListPromptsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListPrompts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPromptsAsync(ctx workflow.Context, input *connect.ListPromptsInput) *ConnectListPromptsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListPrompts", input)
	return &ConnectListPromptsFuture{Future: future}
}

func (a *stub) ListQueues(ctx workflow.Context, input *connect.ListQueuesInput) (*connect.ListQueuesOutput, error) {
	var output connect.ListQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListQueuesAsync(ctx workflow.Context, input *connect.ListQueuesInput) *ConnectListQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListQueues", input)
	return &ConnectListQueuesFuture{Future: future}
}

func (a *stub) ListRoutingProfileQueues(ctx workflow.Context, input *connect.ListRoutingProfileQueuesInput) (*connect.ListRoutingProfileQueuesOutput, error) {
	var output connect.ListRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.ListRoutingProfileQueuesInput) *ConnectListRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfileQueues", input)
	return &ConnectListRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) ListRoutingProfiles(ctx workflow.Context, input *connect.ListRoutingProfilesInput) (*connect.ListRoutingProfilesOutput, error) {
	var output connect.ListRoutingProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListRoutingProfilesAsync(ctx workflow.Context, input *connect.ListRoutingProfilesInput) *ConnectListRoutingProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListRoutingProfiles", input)
	return &ConnectListRoutingProfilesFuture{Future: future}
}

func (a *stub) ListSecurityProfiles(ctx workflow.Context, input *connect.ListSecurityProfilesInput) (*connect.ListSecurityProfilesOutput, error) {
	var output connect.ListSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSecurityProfilesAsync(ctx workflow.Context, input *connect.ListSecurityProfilesInput) *ConnectListSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListSecurityProfiles", input)
	return &ConnectListSecurityProfilesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *connect.ListTagsForResourceInput) (*connect.ListTagsForResourceOutput, error) {
	var output connect.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *connect.ListTagsForResourceInput) *ConnectListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListTagsForResource", input)
	return &ConnectListTagsForResourceFuture{Future: future}
}

func (a *stub) ListUserHierarchyGroups(ctx workflow.Context, input *connect.ListUserHierarchyGroupsInput) (*connect.ListUserHierarchyGroupsOutput, error) {
	var output connect.ListUserHierarchyGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListUserHierarchyGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUserHierarchyGroupsAsync(ctx workflow.Context, input *connect.ListUserHierarchyGroupsInput) *ConnectListUserHierarchyGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListUserHierarchyGroups", input)
	return &ConnectListUserHierarchyGroupsFuture{Future: future}
}

func (a *stub) ListUsers(ctx workflow.Context, input *connect.ListUsersInput) (*connect.ListUsersOutput, error) {
	var output connect.ListUsersOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ListUsers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListUsersAsync(ctx workflow.Context, input *connect.ListUsersInput) *ConnectListUsersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ListUsers", input)
	return &ConnectListUsersFuture{Future: future}
}

func (a *stub) ResumeContactRecording(ctx workflow.Context, input *connect.ResumeContactRecordingInput) (*connect.ResumeContactRecordingOutput, error) {
	var output connect.ResumeContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-ResumeContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResumeContactRecordingAsync(ctx workflow.Context, input *connect.ResumeContactRecordingInput) *ConnectResumeContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-ResumeContactRecording", input)
	return &ConnectResumeContactRecordingFuture{Future: future}
}

func (a *stub) StartChatContact(ctx workflow.Context, input *connect.StartChatContactInput) (*connect.StartChatContactOutput, error) {
	var output connect.StartChatContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartChatContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartChatContactAsync(ctx workflow.Context, input *connect.StartChatContactInput) *ConnectStartChatContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartChatContact", input)
	return &ConnectStartChatContactFuture{Future: future}
}

func (a *stub) StartContactRecording(ctx workflow.Context, input *connect.StartContactRecordingInput) (*connect.StartContactRecordingOutput, error) {
	var output connect.StartContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartContactRecordingAsync(ctx workflow.Context, input *connect.StartContactRecordingInput) *ConnectStartContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartContactRecording", input)
	return &ConnectStartContactRecordingFuture{Future: future}
}

func (a *stub) StartOutboundVoiceContact(ctx workflow.Context, input *connect.StartOutboundVoiceContactInput) (*connect.StartOutboundVoiceContactOutput, error) {
	var output connect.StartOutboundVoiceContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StartOutboundVoiceContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartOutboundVoiceContactAsync(ctx workflow.Context, input *connect.StartOutboundVoiceContactInput) *ConnectStartOutboundVoiceContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StartOutboundVoiceContact", input)
	return &ConnectStartOutboundVoiceContactFuture{Future: future}
}

func (a *stub) StopContact(ctx workflow.Context, input *connect.StopContactInput) (*connect.StopContactOutput, error) {
	var output connect.StopContactOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StopContact", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopContactAsync(ctx workflow.Context, input *connect.StopContactInput) *ConnectStopContactFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StopContact", input)
	return &ConnectStopContactFuture{Future: future}
}

func (a *stub) StopContactRecording(ctx workflow.Context, input *connect.StopContactRecordingInput) (*connect.StopContactRecordingOutput, error) {
	var output connect.StopContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-StopContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopContactRecordingAsync(ctx workflow.Context, input *connect.StopContactRecordingInput) *ConnectStopContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-StopContactRecording", input)
	return &ConnectStopContactRecordingFuture{Future: future}
}

func (a *stub) SuspendContactRecording(ctx workflow.Context, input *connect.SuspendContactRecordingInput) (*connect.SuspendContactRecordingOutput, error) {
	var output connect.SuspendContactRecordingOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-SuspendContactRecording", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SuspendContactRecordingAsync(ctx workflow.Context, input *connect.SuspendContactRecordingInput) *ConnectSuspendContactRecordingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-SuspendContactRecording", input)
	return &ConnectSuspendContactRecordingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *connect.TagResourceInput) (*connect.TagResourceOutput, error) {
	var output connect.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *connect.TagResourceInput) *ConnectTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-TagResource", input)
	return &ConnectTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *connect.UntagResourceInput) (*connect.UntagResourceOutput, error) {
	var output connect.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *connect.UntagResourceInput) *ConnectUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UntagResource", input)
	return &ConnectUntagResourceFuture{Future: future}
}

func (a *stub) UpdateContactAttributes(ctx workflow.Context, input *connect.UpdateContactAttributesInput) (*connect.UpdateContactAttributesOutput, error) {
	var output connect.UpdateContactAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactAttributesAsync(ctx workflow.Context, input *connect.UpdateContactAttributesInput) *ConnectUpdateContactAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactAttributes", input)
	return &ConnectUpdateContactAttributesFuture{Future: future}
}

func (a *stub) UpdateContactFlowContent(ctx workflow.Context, input *connect.UpdateContactFlowContentInput) (*connect.UpdateContactFlowContentOutput, error) {
	var output connect.UpdateContactFlowContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactFlowContentAsync(ctx workflow.Context, input *connect.UpdateContactFlowContentInput) *ConnectUpdateContactFlowContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowContent", input)
	return &ConnectUpdateContactFlowContentFuture{Future: future}
}

func (a *stub) UpdateContactFlowName(ctx workflow.Context, input *connect.UpdateContactFlowNameInput) (*connect.UpdateContactFlowNameOutput, error) {
	var output connect.UpdateContactFlowNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateContactFlowNameAsync(ctx workflow.Context, input *connect.UpdateContactFlowNameInput) *ConnectUpdateContactFlowNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateContactFlowName", input)
	return &ConnectUpdateContactFlowNameFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileConcurrency(ctx workflow.Context, input *connect.UpdateRoutingProfileConcurrencyInput) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	var output connect.UpdateRoutingProfileConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileConcurrencyAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileConcurrencyInput) *ConnectUpdateRoutingProfileConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileConcurrency", input)
	return &ConnectUpdateRoutingProfileConcurrencyFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileDefaultOutboundQueue(ctx workflow.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	var output connect.UpdateRoutingProfileDefaultOutboundQueueOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileDefaultOutboundQueue", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileDefaultOutboundQueueAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileDefaultOutboundQueueInput) *ConnectUpdateRoutingProfileDefaultOutboundQueueFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileDefaultOutboundQueue", input)
	return &ConnectUpdateRoutingProfileDefaultOutboundQueueFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileName(ctx workflow.Context, input *connect.UpdateRoutingProfileNameInput) (*connect.UpdateRoutingProfileNameOutput, error) {
	var output connect.UpdateRoutingProfileNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileNameAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileNameInput) *ConnectUpdateRoutingProfileNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileName", input)
	return &ConnectUpdateRoutingProfileNameFuture{Future: future}
}

func (a *stub) UpdateRoutingProfileQueues(ctx workflow.Context, input *connect.UpdateRoutingProfileQueuesInput) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	var output connect.UpdateRoutingProfileQueuesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileQueues", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRoutingProfileQueuesAsync(ctx workflow.Context, input *connect.UpdateRoutingProfileQueuesInput) *ConnectUpdateRoutingProfileQueuesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateRoutingProfileQueues", input)
	return &ConnectUpdateRoutingProfileQueuesFuture{Future: future}
}

func (a *stub) UpdateUserHierarchy(ctx workflow.Context, input *connect.UpdateUserHierarchyInput) (*connect.UpdateUserHierarchyOutput, error) {
	var output connect.UpdateUserHierarchyOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserHierarchy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserHierarchyAsync(ctx workflow.Context, input *connect.UpdateUserHierarchyInput) *ConnectUpdateUserHierarchyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserHierarchy", input)
	return &ConnectUpdateUserHierarchyFuture{Future: future}
}

func (a *stub) UpdateUserIdentityInfo(ctx workflow.Context, input *connect.UpdateUserIdentityInfoInput) (*connect.UpdateUserIdentityInfoOutput, error) {
	var output connect.UpdateUserIdentityInfoOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserIdentityInfo", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserIdentityInfoAsync(ctx workflow.Context, input *connect.UpdateUserIdentityInfoInput) *ConnectUpdateUserIdentityInfoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserIdentityInfo", input)
	return &ConnectUpdateUserIdentityInfoFuture{Future: future}
}

func (a *stub) UpdateUserPhoneConfig(ctx workflow.Context, input *connect.UpdateUserPhoneConfigInput) (*connect.UpdateUserPhoneConfigOutput, error) {
	var output connect.UpdateUserPhoneConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserPhoneConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserPhoneConfigAsync(ctx workflow.Context, input *connect.UpdateUserPhoneConfigInput) *ConnectUpdateUserPhoneConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserPhoneConfig", input)
	return &ConnectUpdateUserPhoneConfigFuture{Future: future}
}

func (a *stub) UpdateUserRoutingProfile(ctx workflow.Context, input *connect.UpdateUserRoutingProfileInput) (*connect.UpdateUserRoutingProfileOutput, error) {
	var output connect.UpdateUserRoutingProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserRoutingProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserRoutingProfileAsync(ctx workflow.Context, input *connect.UpdateUserRoutingProfileInput) *ConnectUpdateUserRoutingProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserRoutingProfile", input)
	return &ConnectUpdateUserRoutingProfileFuture{Future: future}
}

func (a *stub) UpdateUserSecurityProfiles(ctx workflow.Context, input *connect.UpdateUserSecurityProfilesInput) (*connect.UpdateUserSecurityProfilesOutput, error) {
	var output connect.UpdateUserSecurityProfilesOutput
	err := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserSecurityProfiles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateUserSecurityProfilesAsync(ctx workflow.Context, input *connect.UpdateUserSecurityProfilesInput) *ConnectUpdateUserSecurityProfilesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-connect-UpdateUserSecurityProfiles", input)
	return &ConnectUpdateUserSecurityProfilesFuture{Future: future}
}
