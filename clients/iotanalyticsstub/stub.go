// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iotanalyticsstub

import (
	"github.com/aws/aws-sdk-go/service/iotanalytics"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type BatchPutMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchPutMessageFuture) Get(ctx workflow.Context) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelPipelineReprocessingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListChannelsFuture) Get(ctx workflow.Context) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetContentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetContentsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatasetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatasetsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDatastoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDatastoresFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPipelinesFuture) Get(ctx workflow.Context) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RunPipelineActivityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RunPipelineActivityFuture) Get(ctx workflow.Context) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SampleChannelDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SampleChannelDataFuture) Get(ctx workflow.Context) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartPipelineReprocessingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutMessage(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-BatchPutMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutMessageAsync(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) *BatchPutMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-BatchPutMessage", input)
	return &BatchPutMessageFuture{Future: future}
}

func (a *stub) CancelPipelineReprocessing(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CancelPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) *CancelPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CancelPipelineReprocessing", input)
	return &CancelPipelineReprocessingFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *iotanalytics.CreateChannelInput) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *iotanalytics.CreateChannelInput) *CreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateChannel", input)
	return &CreateChannelFuture{Future: future}
}

func (a *stub) CreateDataset(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) *CreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDataset", input)
	return &CreateDatasetFuture{Future: future}
}

func (a *stub) CreateDatasetContent(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetContentAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) *CreateDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatasetContent", input)
	return &CreateDatasetContentFuture{Future: future}
}

func (a *stub) CreateDatastore(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatastoreAsync(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) *CreateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatastore", input)
	return &CreateDatastoreFuture{Future: future}
}

func (a *stub) CreatePipeline(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePipelineAsync(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) *CreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreatePipeline", input)
	return &CreatePipelineFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) *DeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteChannel", input)
	return &DeleteChannelFuture{Future: future}
}

func (a *stub) DeleteDataset(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) *DeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDataset", input)
	return &DeleteDatasetFuture{Future: future}
}

func (a *stub) DeleteDatasetContent(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetContentAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) *DeleteDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatasetContent", input)
	return &DeleteDatasetContentFuture{Future: future}
}

func (a *stub) DeleteDatastore(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatastoreAsync(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) *DeleteDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatastore", input)
	return &DeleteDatastoreFuture{Future: future}
}

func (a *stub) DeletePipeline(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePipelineAsync(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) *DeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeletePipeline", input)
	return &DeletePipelineFuture{Future: future}
}

func (a *stub) DescribeChannel(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelAsync(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) *DescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeChannel", input)
	return &DescribeChannelFuture{Future: future}
}

func (a *stub) DescribeDataset(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetAsync(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) *DescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDataset", input)
	return &DescribeDatasetFuture{Future: future}
}

func (a *stub) DescribeDatastore(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatastoreAsync(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) *DescribeDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDatastore", input)
	return &DescribeDatastoreFuture{Future: future}
}

func (a *stub) DescribeLoggingOptions(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) *DescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeLoggingOptions", input)
	return &DescribeLoggingOptionsFuture{Future: future}
}

func (a *stub) DescribePipeline(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePipelineAsync(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) *DescribePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribePipeline", input)
	return &DescribePipelineFuture{Future: future}
}

func (a *stub) GetDatasetContent(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-GetDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDatasetContentAsync(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) *GetDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-GetDatasetContent", input)
	return &GetDatasetContentFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *iotanalytics.ListChannelsInput) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *iotanalytics.ListChannelsInput) *ListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListChannels", input)
	return &ListChannelsFuture{Future: future}
}

func (a *stub) ListDatasetContents(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasetContents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetContentsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) *ListDatasetContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasetContents", input)
	return &ListDatasetContentsFuture{Future: future}
}

func (a *stub) ListDatasets(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) *ListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasets", input)
	return &ListDatasetsFuture{Future: future}
}

func (a *stub) ListDatastores(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatastores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatastoresAsync(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) *ListDatastoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatastores", input)
	return &ListDatastoresFuture{Future: future}
}

func (a *stub) ListPipelines(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelinesAsync(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) *ListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListPipelines", input)
	return &ListPipelinesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutLoggingOptions(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) *PutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-PutLoggingOptions", input)
	return &PutLoggingOptionsFuture{Future: future}
}

func (a *stub) RunPipelineActivity(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-RunPipelineActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunPipelineActivityAsync(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) *RunPipelineActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-RunPipelineActivity", input)
	return &RunPipelineActivityFuture{Future: future}
}

func (a *stub) SampleChannelData(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-SampleChannelData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SampleChannelDataAsync(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) *SampleChannelDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-SampleChannelData", input)
	return &SampleChannelDataFuture{Future: future}
}

func (a *stub) StartPipelineReprocessing(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-StartPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) *StartPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-StartPipelineReprocessing", input)
	return &StartPipelineReprocessingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotanalytics.TagResourceInput) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotanalytics.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotanalytics.UntagResourceInput) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotanalytics.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) *UpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateChannel", input)
	return &UpdateChannelFuture{Future: future}
}

func (a *stub) UpdateDataset(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatasetAsync(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) *UpdateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDataset", input)
	return &UpdateDatasetFuture{Future: future}
}

func (a *stub) UpdateDatastore(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatastoreAsync(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) *UpdateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDatastore", input)
	return &UpdateDatastoreFuture{Future: future}
}

func (a *stub) UpdatePipeline(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineAsync(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) *UpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdatePipeline", input)
	return &UpdatePipelineFuture{Future: future}
}
