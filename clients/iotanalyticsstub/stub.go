// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package iotanalyticsstub

import (
	"github.com/aws/aws-sdk-go/service/iotanalytics"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type IoTAnalyticsBatchPutMessageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsBatchPutMessageFuture) Get(ctx workflow.Context) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCancelPipelineReprocessingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCancelPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCreateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCreateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCreateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCreateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCreateDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCreateDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCreateDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCreateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsCreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsCreatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDeleteChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDeleteChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDeleteDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDeleteDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDeleteDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDeleteDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDeleteDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDeleteDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDeletePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDescribeChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDescribeChannelFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDescribeDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDescribeDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDescribeDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDescribeDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDescribeLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDescribeLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsDescribePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsDescribePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsGetDatasetContentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsGetDatasetContentFuture) Get(ctx workflow.Context) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListChannelsFuture) Get(ctx workflow.Context) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListDatasetContentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListDatasetContentsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListDatasetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListDatasetsFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListDatastoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListDatastoresFuture) Get(ctx workflow.Context) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListPipelinesFuture) Get(ctx workflow.Context) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsListTagsForResourceFuture) Get(ctx workflow.Context) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsPutLoggingOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsPutLoggingOptionsFuture) Get(ctx workflow.Context) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsRunPipelineActivityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsRunPipelineActivityFuture) Get(ctx workflow.Context) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsSampleChannelDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsSampleChannelDataFuture) Get(ctx workflow.Context) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsStartPipelineReprocessingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsStartPipelineReprocessingFuture) Get(ctx workflow.Context) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsTagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsUntagResourceFuture) Get(ctx workflow.Context) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsUpdateChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsUpdateChannelFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsUpdateDatasetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsUpdateDatasetFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsUpdateDatastoreFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsUpdateDatastoreFuture) Get(ctx workflow.Context) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoTAnalyticsUpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoTAnalyticsUpdatePipelineFuture) Get(ctx workflow.Context) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutMessage(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) (*iotanalytics.BatchPutMessageOutput, error) {
	var output iotanalytics.BatchPutMessageOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-BatchPutMessage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchPutMessageAsync(ctx workflow.Context, input *iotanalytics.BatchPutMessageInput) *IoTAnalyticsBatchPutMessageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-BatchPutMessage", input)
	return &IoTAnalyticsBatchPutMessageFuture{Future: future}
}

func (a *stub) CancelPipelineReprocessing(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	var output iotanalytics.CancelPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CancelPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.CancelPipelineReprocessingInput) *IoTAnalyticsCancelPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CancelPipelineReprocessing", input)
	return &IoTAnalyticsCancelPipelineReprocessingFuture{Future: future}
}

func (a *stub) CreateChannel(ctx workflow.Context, input *iotanalytics.CreateChannelInput) (*iotanalytics.CreateChannelOutput, error) {
	var output iotanalytics.CreateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateChannelAsync(ctx workflow.Context, input *iotanalytics.CreateChannelInput) *IoTAnalyticsCreateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateChannel", input)
	return &IoTAnalyticsCreateChannelFuture{Future: future}
}

func (a *stub) CreateDataset(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) (*iotanalytics.CreateDatasetOutput, error) {
	var output iotanalytics.CreateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetInput) *IoTAnalyticsCreateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDataset", input)
	return &IoTAnalyticsCreateDatasetFuture{Future: future}
}

func (a *stub) CreateDatasetContent(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) (*iotanalytics.CreateDatasetContentOutput, error) {
	var output iotanalytics.CreateDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatasetContentAsync(ctx workflow.Context, input *iotanalytics.CreateDatasetContentInput) *IoTAnalyticsCreateDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatasetContent", input)
	return &IoTAnalyticsCreateDatasetContentFuture{Future: future}
}

func (a *stub) CreateDatastore(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) (*iotanalytics.CreateDatastoreOutput, error) {
	var output iotanalytics.CreateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDatastoreAsync(ctx workflow.Context, input *iotanalytics.CreateDatastoreInput) *IoTAnalyticsCreateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreateDatastore", input)
	return &IoTAnalyticsCreateDatastoreFuture{Future: future}
}

func (a *stub) CreatePipeline(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) (*iotanalytics.CreatePipelineOutput, error) {
	var output iotanalytics.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePipelineAsync(ctx workflow.Context, input *iotanalytics.CreatePipelineInput) *IoTAnalyticsCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-CreatePipeline", input)
	return &IoTAnalyticsCreatePipelineFuture{Future: future}
}

func (a *stub) DeleteChannel(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) (*iotanalytics.DeleteChannelOutput, error) {
	var output iotanalytics.DeleteChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteChannelAsync(ctx workflow.Context, input *iotanalytics.DeleteChannelInput) *IoTAnalyticsDeleteChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteChannel", input)
	return &IoTAnalyticsDeleteChannelFuture{Future: future}
}

func (a *stub) DeleteDataset(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) (*iotanalytics.DeleteDatasetOutput, error) {
	var output iotanalytics.DeleteDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetInput) *IoTAnalyticsDeleteDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDataset", input)
	return &IoTAnalyticsDeleteDatasetFuture{Future: future}
}

func (a *stub) DeleteDatasetContent(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) (*iotanalytics.DeleteDatasetContentOutput, error) {
	var output iotanalytics.DeleteDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatasetContentAsync(ctx workflow.Context, input *iotanalytics.DeleteDatasetContentInput) *IoTAnalyticsDeleteDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatasetContent", input)
	return &IoTAnalyticsDeleteDatasetContentFuture{Future: future}
}

func (a *stub) DeleteDatastore(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) (*iotanalytics.DeleteDatastoreOutput, error) {
	var output iotanalytics.DeleteDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDatastoreAsync(ctx workflow.Context, input *iotanalytics.DeleteDatastoreInput) *IoTAnalyticsDeleteDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeleteDatastore", input)
	return &IoTAnalyticsDeleteDatastoreFuture{Future: future}
}

func (a *stub) DeletePipeline(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) (*iotanalytics.DeletePipelineOutput, error) {
	var output iotanalytics.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePipelineAsync(ctx workflow.Context, input *iotanalytics.DeletePipelineInput) *IoTAnalyticsDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DeletePipeline", input)
	return &IoTAnalyticsDeletePipelineFuture{Future: future}
}

func (a *stub) DescribeChannel(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) (*iotanalytics.DescribeChannelOutput, error) {
	var output iotanalytics.DescribeChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeChannelAsync(ctx workflow.Context, input *iotanalytics.DescribeChannelInput) *IoTAnalyticsDescribeChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeChannel", input)
	return &IoTAnalyticsDescribeChannelFuture{Future: future}
}

func (a *stub) DescribeDataset(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) (*iotanalytics.DescribeDatasetOutput, error) {
	var output iotanalytics.DescribeDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatasetAsync(ctx workflow.Context, input *iotanalytics.DescribeDatasetInput) *IoTAnalyticsDescribeDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDataset", input)
	return &IoTAnalyticsDescribeDatasetFuture{Future: future}
}

func (a *stub) DescribeDatastore(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) (*iotanalytics.DescribeDatastoreOutput, error) {
	var output iotanalytics.DescribeDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDatastoreAsync(ctx workflow.Context, input *iotanalytics.DescribeDatastoreInput) *IoTAnalyticsDescribeDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeDatastore", input)
	return &IoTAnalyticsDescribeDatastoreFuture{Future: future}
}

func (a *stub) DescribeLoggingOptions(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	var output iotanalytics.DescribeLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.DescribeLoggingOptionsInput) *IoTAnalyticsDescribeLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribeLoggingOptions", input)
	return &IoTAnalyticsDescribeLoggingOptionsFuture{Future: future}
}

func (a *stub) DescribePipeline(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) (*iotanalytics.DescribePipelineOutput, error) {
	var output iotanalytics.DescribePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePipelineAsync(ctx workflow.Context, input *iotanalytics.DescribePipelineInput) *IoTAnalyticsDescribePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-DescribePipeline", input)
	return &IoTAnalyticsDescribePipelineFuture{Future: future}
}

func (a *stub) GetDatasetContent(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) (*iotanalytics.GetDatasetContentOutput, error) {
	var output iotanalytics.GetDatasetContentOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-GetDatasetContent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDatasetContentAsync(ctx workflow.Context, input *iotanalytics.GetDatasetContentInput) *IoTAnalyticsGetDatasetContentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-GetDatasetContent", input)
	return &IoTAnalyticsGetDatasetContentFuture{Future: future}
}

func (a *stub) ListChannels(ctx workflow.Context, input *iotanalytics.ListChannelsInput) (*iotanalytics.ListChannelsOutput, error) {
	var output iotanalytics.ListChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListChannelsAsync(ctx workflow.Context, input *iotanalytics.ListChannelsInput) *IoTAnalyticsListChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListChannels", input)
	return &IoTAnalyticsListChannelsFuture{Future: future}
}

func (a *stub) ListDatasetContents(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) (*iotanalytics.ListDatasetContentsOutput, error) {
	var output iotanalytics.ListDatasetContentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasetContents", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetContentsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetContentsInput) *IoTAnalyticsListDatasetContentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasetContents", input)
	return &IoTAnalyticsListDatasetContentsFuture{Future: future}
}

func (a *stub) ListDatasets(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) (*iotanalytics.ListDatasetsOutput, error) {
	var output iotanalytics.ListDatasetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatasetsAsync(ctx workflow.Context, input *iotanalytics.ListDatasetsInput) *IoTAnalyticsListDatasetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatasets", input)
	return &IoTAnalyticsListDatasetsFuture{Future: future}
}

func (a *stub) ListDatastores(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) (*iotanalytics.ListDatastoresOutput, error) {
	var output iotanalytics.ListDatastoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatastores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDatastoresAsync(ctx workflow.Context, input *iotanalytics.ListDatastoresInput) *IoTAnalyticsListDatastoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListDatastores", input)
	return &IoTAnalyticsListDatastoresFuture{Future: future}
}

func (a *stub) ListPipelines(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) (*iotanalytics.ListPipelinesOutput, error) {
	var output iotanalytics.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelinesAsync(ctx workflow.Context, input *iotanalytics.ListPipelinesInput) *IoTAnalyticsListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListPipelines", input)
	return &IoTAnalyticsListPipelinesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) (*iotanalytics.ListTagsForResourceOutput, error) {
	var output iotanalytics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iotanalytics.ListTagsForResourceInput) *IoTAnalyticsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-ListTagsForResource", input)
	return &IoTAnalyticsListTagsForResourceFuture{Future: future}
}

func (a *stub) PutLoggingOptions(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) (*iotanalytics.PutLoggingOptionsOutput, error) {
	var output iotanalytics.PutLoggingOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-PutLoggingOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLoggingOptionsAsync(ctx workflow.Context, input *iotanalytics.PutLoggingOptionsInput) *IoTAnalyticsPutLoggingOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-PutLoggingOptions", input)
	return &IoTAnalyticsPutLoggingOptionsFuture{Future: future}
}

func (a *stub) RunPipelineActivity(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) (*iotanalytics.RunPipelineActivityOutput, error) {
	var output iotanalytics.RunPipelineActivityOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-RunPipelineActivity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunPipelineActivityAsync(ctx workflow.Context, input *iotanalytics.RunPipelineActivityInput) *IoTAnalyticsRunPipelineActivityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-RunPipelineActivity", input)
	return &IoTAnalyticsRunPipelineActivityFuture{Future: future}
}

func (a *stub) SampleChannelData(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) (*iotanalytics.SampleChannelDataOutput, error) {
	var output iotanalytics.SampleChannelDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-SampleChannelData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SampleChannelDataAsync(ctx workflow.Context, input *iotanalytics.SampleChannelDataInput) *IoTAnalyticsSampleChannelDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-SampleChannelData", input)
	return &IoTAnalyticsSampleChannelDataFuture{Future: future}
}

func (a *stub) StartPipelineReprocessing(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	var output iotanalytics.StartPipelineReprocessingOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-StartPipelineReprocessing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPipelineReprocessingAsync(ctx workflow.Context, input *iotanalytics.StartPipelineReprocessingInput) *IoTAnalyticsStartPipelineReprocessingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-StartPipelineReprocessing", input)
	return &IoTAnalyticsStartPipelineReprocessingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iotanalytics.TagResourceInput) (*iotanalytics.TagResourceOutput, error) {
	var output iotanalytics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iotanalytics.TagResourceInput) *IoTAnalyticsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-TagResource", input)
	return &IoTAnalyticsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iotanalytics.UntagResourceInput) (*iotanalytics.UntagResourceOutput, error) {
	var output iotanalytics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iotanalytics.UntagResourceInput) *IoTAnalyticsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UntagResource", input)
	return &IoTAnalyticsUntagResourceFuture{Future: future}
}

func (a *stub) UpdateChannel(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) (*iotanalytics.UpdateChannelOutput, error) {
	var output iotanalytics.UpdateChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateChannelAsync(ctx workflow.Context, input *iotanalytics.UpdateChannelInput) *IoTAnalyticsUpdateChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateChannel", input)
	return &IoTAnalyticsUpdateChannelFuture{Future: future}
}

func (a *stub) UpdateDataset(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) (*iotanalytics.UpdateDatasetOutput, error) {
	var output iotanalytics.UpdateDatasetOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDataset", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatasetAsync(ctx workflow.Context, input *iotanalytics.UpdateDatasetInput) *IoTAnalyticsUpdateDatasetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDataset", input)
	return &IoTAnalyticsUpdateDatasetFuture{Future: future}
}

func (a *stub) UpdateDatastore(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) (*iotanalytics.UpdateDatastoreOutput, error) {
	var output iotanalytics.UpdateDatastoreOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDatastore", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDatastoreAsync(ctx workflow.Context, input *iotanalytics.UpdateDatastoreInput) *IoTAnalyticsUpdateDatastoreFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdateDatastore", input)
	return &IoTAnalyticsUpdateDatastoreFuture{Future: future}
}

func (a *stub) UpdatePipeline(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) (*iotanalytics.UpdatePipelineOutput, error) {
	var output iotanalytics.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineAsync(ctx workflow.Context, input *iotanalytics.UpdatePipelineInput) *IoTAnalyticsUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iotanalytics-UpdatePipeline", input)
	return &IoTAnalyticsUpdatePipelineFuture{Future: future}
}
