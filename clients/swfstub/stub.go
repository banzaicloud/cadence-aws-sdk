// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package swfstub

import (
	"github.com/aws/aws-sdk-go/service/swf"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CountClosedWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CountClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CountOpenWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CountOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CountPendingActivityTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CountPendingActivityTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CountPendingDecisionTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CountPendingDecisionTasksFuture) Get(ctx workflow.Context) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeprecateActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeprecateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeprecateDomainFuture) Get(ctx workflow.Context) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeprecateWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeActivityTypeFuture) Get(ctx workflow.Context) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainFuture) Get(ctx workflow.Context) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetWorkflowExecutionHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetWorkflowExecutionHistoryFuture) Get(ctx workflow.Context) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListActivityTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListActivityTypesFuture) Get(ctx workflow.Context) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListClosedWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListClosedWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListDomainsFuture) Get(ctx workflow.Context) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListOpenWorkflowExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListOpenWorkflowExecutionsFuture) Get(ctx workflow.Context) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWorkflowTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWorkflowTypesFuture) Get(ctx workflow.Context) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollForActivityTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollForActivityTaskFuture) Get(ctx workflow.Context) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollForDecisionTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollForDecisionTaskFuture) Get(ctx workflow.Context) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RecordActivityTaskHeartbeatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RecordActivityTaskHeartbeatFuture) Get(ctx workflow.Context) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterActivityTypeFuture) Get(ctx workflow.Context) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterDomainFuture) Get(ctx workflow.Context) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RequestCancelWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RequestCancelWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RespondActivityTaskCanceledFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RespondActivityTaskCanceledFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RespondActivityTaskCompletedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RespondActivityTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RespondActivityTaskFailedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RespondActivityTaskFailedFuture) Get(ctx workflow.Context) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RespondDecisionTaskCompletedFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RespondDecisionTaskCompletedFuture) Get(ctx workflow.Context) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SignalWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SignalWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateWorkflowExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateWorkflowExecutionFuture) Get(ctx workflow.Context) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UndeprecateActivityTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UndeprecateActivityTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UndeprecateDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UndeprecateDomainFuture) Get(ctx workflow.Context) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UndeprecateWorkflowTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UndeprecateWorkflowTypeFuture) Get(ctx workflow.Context) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CountClosedWorkflowExecutions(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws-swf-CountClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CountClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountClosedWorkflowExecutionsInput) *CountClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-CountClosedWorkflowExecutions", input)
	return &CountClosedWorkflowExecutionsFuture{Future: future}
}

func (a *stub) CountOpenWorkflowExecutions(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	var output swf.WorkflowExecutionCount
	err := workflow.ExecuteActivity(ctx, "aws-swf-CountOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CountOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.CountOpenWorkflowExecutionsInput) *CountOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-CountOpenWorkflowExecutions", input)
	return &CountOpenWorkflowExecutionsFuture{Future: future}
}

func (a *stub) CountPendingActivityTasks(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws-swf-CountPendingActivityTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CountPendingActivityTasksAsync(ctx workflow.Context, input *swf.CountPendingActivityTasksInput) *CountPendingActivityTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-CountPendingActivityTasks", input)
	return &CountPendingActivityTasksFuture{Future: future}
}

func (a *stub) CountPendingDecisionTasks(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error) {
	var output swf.PendingTaskCount
	err := workflow.ExecuteActivity(ctx, "aws-swf-CountPendingDecisionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CountPendingDecisionTasksAsync(ctx workflow.Context, input *swf.CountPendingDecisionTasksInput) *CountPendingDecisionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-CountPendingDecisionTasks", input)
	return &CountPendingDecisionTasksFuture{Future: future}
}

func (a *stub) DeprecateActivityType(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error) {
	var output swf.DeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeprecateActivityTypeAsync(ctx workflow.Context, input *swf.DeprecateActivityTypeInput) *DeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateActivityType", input)
	return &DeprecateActivityTypeFuture{Future: future}
}

func (a *stub) DeprecateDomain(ctx workflow.Context, input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error) {
	var output swf.DeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeprecateDomainAsync(ctx workflow.Context, input *swf.DeprecateDomainInput) *DeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateDomain", input)
	return &DeprecateDomainFuture{Future: future}
}

func (a *stub) DeprecateWorkflowType(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error) {
	var output swf.DeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.DeprecateWorkflowTypeInput) *DeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DeprecateWorkflowType", input)
	return &DeprecateWorkflowTypeFuture{Future: future}
}

func (a *stub) DescribeActivityType(ctx workflow.Context, input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error) {
	var output swf.DescribeActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DescribeActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeActivityTypeAsync(ctx workflow.Context, input *swf.DescribeActivityTypeInput) *DescribeActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DescribeActivityType", input)
	return &DescribeActivityTypeFuture{Future: future}
}

func (a *stub) DescribeDomain(ctx workflow.Context, input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error) {
	var output swf.DescribeDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DescribeDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainAsync(ctx workflow.Context, input *swf.DescribeDomainInput) *DescribeDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DescribeDomain", input)
	return &DescribeDomainFuture{Future: future}
}

func (a *stub) DescribeWorkflowExecution(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error) {
	var output swf.DescribeWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DescribeWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkflowExecutionAsync(ctx workflow.Context, input *swf.DescribeWorkflowExecutionInput) *DescribeWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DescribeWorkflowExecution", input)
	return &DescribeWorkflowExecutionFuture{Future: future}
}

func (a *stub) DescribeWorkflowType(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error) {
	var output swf.DescribeWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-DescribeWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeWorkflowTypeAsync(ctx workflow.Context, input *swf.DescribeWorkflowTypeInput) *DescribeWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-DescribeWorkflowType", input)
	return &DescribeWorkflowTypeFuture{Future: future}
}

func (a *stub) GetWorkflowExecutionHistory(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	var output swf.GetWorkflowExecutionHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-GetWorkflowExecutionHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetWorkflowExecutionHistoryAsync(ctx workflow.Context, input *swf.GetWorkflowExecutionHistoryInput) *GetWorkflowExecutionHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-GetWorkflowExecutionHistory", input)
	return &GetWorkflowExecutionHistoryFuture{Future: future}
}

func (a *stub) ListActivityTypes(ctx workflow.Context, input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error) {
	var output swf.ListActivityTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListActivityTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActivityTypesAsync(ctx workflow.Context, input *swf.ListActivityTypesInput) *ListActivityTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListActivityTypes", input)
	return &ListActivityTypesFuture{Future: future}
}

func (a *stub) ListClosedWorkflowExecutions(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListClosedWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListClosedWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListClosedWorkflowExecutionsInput) *ListClosedWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListClosedWorkflowExecutions", input)
	return &ListClosedWorkflowExecutionsFuture{Future: future}
}

func (a *stub) ListDomains(ctx workflow.Context, input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error) {
	var output swf.ListDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListDomainsAsync(ctx workflow.Context, input *swf.ListDomainsInput) *ListDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListDomains", input)
	return &ListDomainsFuture{Future: future}
}

func (a *stub) ListOpenWorkflowExecutions(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	var output swf.WorkflowExecutionInfos
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListOpenWorkflowExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListOpenWorkflowExecutionsAsync(ctx workflow.Context, input *swf.ListOpenWorkflowExecutionsInput) *ListOpenWorkflowExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListOpenWorkflowExecutions", input)
	return &ListOpenWorkflowExecutionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *swf.ListTagsForResourceInput) (*swf.ListTagsForResourceOutput, error) {
	var output swf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *swf.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWorkflowTypes(ctx workflow.Context, input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error) {
	var output swf.ListWorkflowTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-ListWorkflowTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWorkflowTypesAsync(ctx workflow.Context, input *swf.ListWorkflowTypesInput) *ListWorkflowTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-ListWorkflowTypes", input)
	return &ListWorkflowTypesFuture{Future: future}
}

func (a *stub) PollForActivityTask(ctx workflow.Context, input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error) {
	var output swf.PollForActivityTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-PollForActivityTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForActivityTaskAsync(ctx workflow.Context, input *swf.PollForActivityTaskInput) *PollForActivityTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-PollForActivityTask", input)
	return &PollForActivityTaskFuture{Future: future}
}

func (a *stub) PollForDecisionTask(ctx workflow.Context, input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error) {
	var output swf.PollForDecisionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-PollForDecisionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForDecisionTaskAsync(ctx workflow.Context, input *swf.PollForDecisionTaskInput) *PollForDecisionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-PollForDecisionTask", input)
	return &PollForDecisionTaskFuture{Future: future}
}

func (a *stub) RecordActivityTaskHeartbeat(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	var output swf.RecordActivityTaskHeartbeatOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RecordActivityTaskHeartbeat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RecordActivityTaskHeartbeatAsync(ctx workflow.Context, input *swf.RecordActivityTaskHeartbeatInput) *RecordActivityTaskHeartbeatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RecordActivityTaskHeartbeat", input)
	return &RecordActivityTaskHeartbeatFuture{Future: future}
}

func (a *stub) RegisterActivityType(ctx workflow.Context, input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error) {
	var output swf.RegisterActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RegisterActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterActivityTypeAsync(ctx workflow.Context, input *swf.RegisterActivityTypeInput) *RegisterActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RegisterActivityType", input)
	return &RegisterActivityTypeFuture{Future: future}
}

func (a *stub) RegisterDomain(ctx workflow.Context, input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error) {
	var output swf.RegisterDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RegisterDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterDomainAsync(ctx workflow.Context, input *swf.RegisterDomainInput) *RegisterDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RegisterDomain", input)
	return &RegisterDomainFuture{Future: future}
}

func (a *stub) RegisterWorkflowType(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error) {
	var output swf.RegisterWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RegisterWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterWorkflowTypeAsync(ctx workflow.Context, input *swf.RegisterWorkflowTypeInput) *RegisterWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RegisterWorkflowType", input)
	return &RegisterWorkflowTypeFuture{Future: future}
}

func (a *stub) RequestCancelWorkflowExecution(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	var output swf.RequestCancelWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RequestCancelWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestCancelWorkflowExecutionAsync(ctx workflow.Context, input *swf.RequestCancelWorkflowExecutionInput) *RequestCancelWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RequestCancelWorkflowExecution", input)
	return &RequestCancelWorkflowExecutionFuture{Future: future}
}

func (a *stub) RespondActivityTaskCanceled(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error) {
	var output swf.RespondActivityTaskCanceledOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskCanceled", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RespondActivityTaskCanceledAsync(ctx workflow.Context, input *swf.RespondActivityTaskCanceledInput) *RespondActivityTaskCanceledFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskCanceled", input)
	return &RespondActivityTaskCanceledFuture{Future: future}
}

func (a *stub) RespondActivityTaskCompleted(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error) {
	var output swf.RespondActivityTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RespondActivityTaskCompletedAsync(ctx workflow.Context, input *swf.RespondActivityTaskCompletedInput) *RespondActivityTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskCompleted", input)
	return &RespondActivityTaskCompletedFuture{Future: future}
}

func (a *stub) RespondActivityTaskFailed(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error) {
	var output swf.RespondActivityTaskFailedOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskFailed", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RespondActivityTaskFailedAsync(ctx workflow.Context, input *swf.RespondActivityTaskFailedInput) *RespondActivityTaskFailedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RespondActivityTaskFailed", input)
	return &RespondActivityTaskFailedFuture{Future: future}
}

func (a *stub) RespondDecisionTaskCompleted(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error) {
	var output swf.RespondDecisionTaskCompletedOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-RespondDecisionTaskCompleted", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RespondDecisionTaskCompletedAsync(ctx workflow.Context, input *swf.RespondDecisionTaskCompletedInput) *RespondDecisionTaskCompletedFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-RespondDecisionTaskCompleted", input)
	return &RespondDecisionTaskCompletedFuture{Future: future}
}

func (a *stub) SignalWorkflowExecution(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error) {
	var output swf.SignalWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-SignalWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SignalWorkflowExecutionAsync(ctx workflow.Context, input *swf.SignalWorkflowExecutionInput) *SignalWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-SignalWorkflowExecution", input)
	return &SignalWorkflowExecutionFuture{Future: future}
}

func (a *stub) StartWorkflowExecution(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error) {
	var output swf.StartWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-StartWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartWorkflowExecutionAsync(ctx workflow.Context, input *swf.StartWorkflowExecutionInput) *StartWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-StartWorkflowExecution", input)
	return &StartWorkflowExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *swf.TagResourceInput) (*swf.TagResourceOutput, error) {
	var output swf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *swf.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) TerminateWorkflowExecution(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error) {
	var output swf.TerminateWorkflowExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-TerminateWorkflowExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateWorkflowExecutionAsync(ctx workflow.Context, input *swf.TerminateWorkflowExecutionInput) *TerminateWorkflowExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-TerminateWorkflowExecution", input)
	return &TerminateWorkflowExecutionFuture{Future: future}
}

func (a *stub) UndeprecateActivityType(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) (*swf.UndeprecateActivityTypeOutput, error) {
	var output swf.UndeprecateActivityTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateActivityType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UndeprecateActivityTypeAsync(ctx workflow.Context, input *swf.UndeprecateActivityTypeInput) *UndeprecateActivityTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateActivityType", input)
	return &UndeprecateActivityTypeFuture{Future: future}
}

func (a *stub) UndeprecateDomain(ctx workflow.Context, input *swf.UndeprecateDomainInput) (*swf.UndeprecateDomainOutput, error) {
	var output swf.UndeprecateDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UndeprecateDomainAsync(ctx workflow.Context, input *swf.UndeprecateDomainInput) *UndeprecateDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateDomain", input)
	return &UndeprecateDomainFuture{Future: future}
}

func (a *stub) UndeprecateWorkflowType(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) (*swf.UndeprecateWorkflowTypeOutput, error) {
	var output swf.UndeprecateWorkflowTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateWorkflowType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UndeprecateWorkflowTypeAsync(ctx workflow.Context, input *swf.UndeprecateWorkflowTypeInput) *UndeprecateWorkflowTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-UndeprecateWorkflowType", input)
	return &UndeprecateWorkflowTypeFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *swf.UntagResourceInput) (*swf.UntagResourceOutput, error) {
	var output swf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-swf-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *swf.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-swf-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}
