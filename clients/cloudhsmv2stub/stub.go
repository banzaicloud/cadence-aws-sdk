// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package cloudhsmv2stub

import (
	"github.com/aws/aws-sdk-go/service/cloudhsmv2"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CloudHSMV2CopyBackupToRegionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2CopyBackupToRegionFuture) Get(ctx workflow.Context) (*cloudhsmv2.CopyBackupToRegionOutput, error) {
	var output cloudhsmv2.CopyBackupToRegionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2CreateClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2CreateClusterFuture) Get(ctx workflow.Context) (*cloudhsmv2.CreateClusterOutput, error) {
	var output cloudhsmv2.CreateClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2CreateHsmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2CreateHsmFuture) Get(ctx workflow.Context) (*cloudhsmv2.CreateHsmOutput, error) {
	var output cloudhsmv2.CreateHsmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2DeleteBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2DeleteBackupFuture) Get(ctx workflow.Context) (*cloudhsmv2.DeleteBackupOutput, error) {
	var output cloudhsmv2.DeleteBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2DeleteClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2DeleteClusterFuture) Get(ctx workflow.Context) (*cloudhsmv2.DeleteClusterOutput, error) {
	var output cloudhsmv2.DeleteClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2DeleteHsmFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2DeleteHsmFuture) Get(ctx workflow.Context) (*cloudhsmv2.DeleteHsmOutput, error) {
	var output cloudhsmv2.DeleteHsmOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2DescribeBackupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2DescribeBackupsFuture) Get(ctx workflow.Context) (*cloudhsmv2.DescribeBackupsOutput, error) {
	var output cloudhsmv2.DescribeBackupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2DescribeClustersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2DescribeClustersFuture) Get(ctx workflow.Context) (*cloudhsmv2.DescribeClustersOutput, error) {
	var output cloudhsmv2.DescribeClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2InitializeClusterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2InitializeClusterFuture) Get(ctx workflow.Context) (*cloudhsmv2.InitializeClusterOutput, error) {
	var output cloudhsmv2.InitializeClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2ListTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2ListTagsFuture) Get(ctx workflow.Context) (*cloudhsmv2.ListTagsOutput, error) {
	var output cloudhsmv2.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2RestoreBackupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2RestoreBackupFuture) Get(ctx workflow.Context) (*cloudhsmv2.RestoreBackupOutput, error) {
	var output cloudhsmv2.RestoreBackupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2TagResourceFuture) Get(ctx workflow.Context) (*cloudhsmv2.TagResourceOutput, error) {
	var output cloudhsmv2.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudHSMV2UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CloudHSMV2UntagResourceFuture) Get(ctx workflow.Context) (*cloudhsmv2.UntagResourceOutput, error) {
	var output cloudhsmv2.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyBackupToRegion(ctx workflow.Context, input *cloudhsmv2.CopyBackupToRegionInput) (*cloudhsmv2.CopyBackupToRegionOutput, error) {
	var output cloudhsmv2.CopyBackupToRegionOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CopyBackupToRegion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyBackupToRegionAsync(ctx workflow.Context, input *cloudhsmv2.CopyBackupToRegionInput) *CloudHSMV2CopyBackupToRegionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CopyBackupToRegion", input)
	return &CloudHSMV2CopyBackupToRegionFuture{Future: future}
}

func (a *stub) CreateCluster(ctx workflow.Context, input *cloudhsmv2.CreateClusterInput) (*cloudhsmv2.CreateClusterOutput, error) {
	var output cloudhsmv2.CreateClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CreateCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClusterAsync(ctx workflow.Context, input *cloudhsmv2.CreateClusterInput) *CloudHSMV2CreateClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CreateCluster", input)
	return &CloudHSMV2CreateClusterFuture{Future: future}
}

func (a *stub) CreateHsm(ctx workflow.Context, input *cloudhsmv2.CreateHsmInput) (*cloudhsmv2.CreateHsmOutput, error) {
	var output cloudhsmv2.CreateHsmOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CreateHsm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateHsmAsync(ctx workflow.Context, input *cloudhsmv2.CreateHsmInput) *CloudHSMV2CreateHsmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-CreateHsm", input)
	return &CloudHSMV2CreateHsmFuture{Future: future}
}

func (a *stub) DeleteBackup(ctx workflow.Context, input *cloudhsmv2.DeleteBackupInput) (*cloudhsmv2.DeleteBackupOutput, error) {
	var output cloudhsmv2.DeleteBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteBackupAsync(ctx workflow.Context, input *cloudhsmv2.DeleteBackupInput) *CloudHSMV2DeleteBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteBackup", input)
	return &CloudHSMV2DeleteBackupFuture{Future: future}
}

func (a *stub) DeleteCluster(ctx workflow.Context, input *cloudhsmv2.DeleteClusterInput) (*cloudhsmv2.DeleteClusterOutput, error) {
	var output cloudhsmv2.DeleteClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClusterAsync(ctx workflow.Context, input *cloudhsmv2.DeleteClusterInput) *CloudHSMV2DeleteClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteCluster", input)
	return &CloudHSMV2DeleteClusterFuture{Future: future}
}

func (a *stub) DeleteHsm(ctx workflow.Context, input *cloudhsmv2.DeleteHsmInput) (*cloudhsmv2.DeleteHsmOutput, error) {
	var output cloudhsmv2.DeleteHsmOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteHsm", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteHsmAsync(ctx workflow.Context, input *cloudhsmv2.DeleteHsmInput) *CloudHSMV2DeleteHsmFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DeleteHsm", input)
	return &CloudHSMV2DeleteHsmFuture{Future: future}
}

func (a *stub) DescribeBackups(ctx workflow.Context, input *cloudhsmv2.DescribeBackupsInput) (*cloudhsmv2.DescribeBackupsOutput, error) {
	var output cloudhsmv2.DescribeBackupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DescribeBackups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBackupsAsync(ctx workflow.Context, input *cloudhsmv2.DescribeBackupsInput) *CloudHSMV2DescribeBackupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DescribeBackups", input)
	return &CloudHSMV2DescribeBackupsFuture{Future: future}
}

func (a *stub) DescribeClusters(ctx workflow.Context, input *cloudhsmv2.DescribeClustersInput) (*cloudhsmv2.DescribeClustersOutput, error) {
	var output cloudhsmv2.DescribeClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DescribeClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClustersAsync(ctx workflow.Context, input *cloudhsmv2.DescribeClustersInput) *CloudHSMV2DescribeClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-DescribeClusters", input)
	return &CloudHSMV2DescribeClustersFuture{Future: future}
}

func (a *stub) InitializeCluster(ctx workflow.Context, input *cloudhsmv2.InitializeClusterInput) (*cloudhsmv2.InitializeClusterOutput, error) {
	var output cloudhsmv2.InitializeClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-InitializeCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) InitializeClusterAsync(ctx workflow.Context, input *cloudhsmv2.InitializeClusterInput) *CloudHSMV2InitializeClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-InitializeCluster", input)
	return &CloudHSMV2InitializeClusterFuture{Future: future}
}

func (a *stub) ListTags(ctx workflow.Context, input *cloudhsmv2.ListTagsInput) (*cloudhsmv2.ListTagsOutput, error) {
	var output cloudhsmv2.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsAsync(ctx workflow.Context, input *cloudhsmv2.ListTagsInput) *CloudHSMV2ListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-ListTags", input)
	return &CloudHSMV2ListTagsFuture{Future: future}
}

func (a *stub) RestoreBackup(ctx workflow.Context, input *cloudhsmv2.RestoreBackupInput) (*cloudhsmv2.RestoreBackupOutput, error) {
	var output cloudhsmv2.RestoreBackupOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-RestoreBackup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreBackupAsync(ctx workflow.Context, input *cloudhsmv2.RestoreBackupInput) *CloudHSMV2RestoreBackupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-RestoreBackup", input)
	return &CloudHSMV2RestoreBackupFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *cloudhsmv2.TagResourceInput) (*cloudhsmv2.TagResourceOutput, error) {
	var output cloudhsmv2.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *cloudhsmv2.TagResourceInput) *CloudHSMV2TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-TagResource", input)
	return &CloudHSMV2TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *cloudhsmv2.UntagResourceInput) (*cloudhsmv2.UntagResourceOutput, error) {
	var output cloudhsmv2.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *cloudhsmv2.UntagResourceInput) *CloudHSMV2UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-cloudhsmv2-UntagResource", input)
	return &CloudHSMV2UntagResourceFuture{Future: future}
}
