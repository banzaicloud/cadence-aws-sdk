// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package qldbstub

import (
	"github.com/aws/aws-sdk-go/service/qldb"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CancelJournalKinesisStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLedgerFuture) Get(ctx workflow.Context) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLedgerFuture) Get(ctx workflow.Context) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeJournalKinesisStreamFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeJournalKinesisStreamFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeJournalS3ExportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeJournalS3ExportFuture) Get(ctx workflow.Context) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLedgerFuture) Get(ctx workflow.Context) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportJournalToS3Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportJournalToS3Future) Get(ctx workflow.Context) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetBlockFuture) Get(ctx workflow.Context) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDigestFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDigestFuture) Get(ctx workflow.Context) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRevisionFuture) Get(ctx workflow.Context) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJournalKinesisStreamsForLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJournalKinesisStreamsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJournalS3ExportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJournalS3ExportsFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListJournalS3ExportsForLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListJournalS3ExportsForLedgerFuture) Get(ctx workflow.Context) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLedgersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLedgersFuture) Get(ctx workflow.Context) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StreamJournalToKinesisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StreamJournalToKinesisFuture) Get(ctx workflow.Context) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateLedgerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateLedgerFuture) Get(ctx workflow.Context) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJournalKinesisStream(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error) {
	var output qldb.CancelJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-CancelJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.CancelJournalKinesisStreamInput) *CancelJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-CancelJournalKinesisStream", input)
	return &CancelJournalKinesisStreamFuture{Future: future}
}

func (a *stub) CreateLedger(ctx workflow.Context, input *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error) {
	var output qldb.CreateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-CreateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLedgerAsync(ctx workflow.Context, input *qldb.CreateLedgerInput) *CreateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-CreateLedger", input)
	return &CreateLedgerFuture{Future: future}
}

func (a *stub) DeleteLedger(ctx workflow.Context, input *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error) {
	var output qldb.DeleteLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-DeleteLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLedgerAsync(ctx workflow.Context, input *qldb.DeleteLedgerInput) *DeleteLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-DeleteLedger", input)
	return &DeleteLedgerFuture{Future: future}
}

func (a *stub) DescribeJournalKinesisStream(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	var output qldb.DescribeJournalKinesisStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeJournalKinesisStream", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJournalKinesisStreamAsync(ctx workflow.Context, input *qldb.DescribeJournalKinesisStreamInput) *DescribeJournalKinesisStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeJournalKinesisStream", input)
	return &DescribeJournalKinesisStreamFuture{Future: future}
}

func (a *stub) DescribeJournalS3Export(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error) {
	var output qldb.DescribeJournalS3ExportOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeJournalS3Export", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeJournalS3ExportAsync(ctx workflow.Context, input *qldb.DescribeJournalS3ExportInput) *DescribeJournalS3ExportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeJournalS3Export", input)
	return &DescribeJournalS3ExportFuture{Future: future}
}

func (a *stub) DescribeLedger(ctx workflow.Context, input *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error) {
	var output qldb.DescribeLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLedgerAsync(ctx workflow.Context, input *qldb.DescribeLedgerInput) *DescribeLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-DescribeLedger", input)
	return &DescribeLedgerFuture{Future: future}
}

func (a *stub) ExportJournalToS3(ctx workflow.Context, input *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error) {
	var output qldb.ExportJournalToS3Output
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ExportJournalToS3", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportJournalToS3Async(ctx workflow.Context, input *qldb.ExportJournalToS3Input) *ExportJournalToS3Future {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ExportJournalToS3", input)
	return &ExportJournalToS3Future{Future: future}
}

func (a *stub) GetBlock(ctx workflow.Context, input *qldb.GetBlockInput) (*qldb.GetBlockOutput, error) {
	var output qldb.GetBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-GetBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetBlockAsync(ctx workflow.Context, input *qldb.GetBlockInput) *GetBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-GetBlock", input)
	return &GetBlockFuture{Future: future}
}

func (a *stub) GetDigest(ctx workflow.Context, input *qldb.GetDigestInput) (*qldb.GetDigestOutput, error) {
	var output qldb.GetDigestOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-GetDigest", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDigestAsync(ctx workflow.Context, input *qldb.GetDigestInput) *GetDigestFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-GetDigest", input)
	return &GetDigestFuture{Future: future}
}

func (a *stub) GetRevision(ctx workflow.Context, input *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error) {
	var output qldb.GetRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-GetRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRevisionAsync(ctx workflow.Context, input *qldb.GetRevisionInput) *GetRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-GetRevision", input)
	return &GetRevisionFuture{Future: future}
}

func (a *stub) ListJournalKinesisStreamsForLedger(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	var output qldb.ListJournalKinesisStreamsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalKinesisStreamsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJournalKinesisStreamsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalKinesisStreamsForLedgerInput) *ListJournalKinesisStreamsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalKinesisStreamsForLedger", input)
	return &ListJournalKinesisStreamsForLedgerFuture{Future: future}
}

func (a *stub) ListJournalS3Exports(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error) {
	var output qldb.ListJournalS3ExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalS3Exports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJournalS3ExportsAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsInput) *ListJournalS3ExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalS3Exports", input)
	return &ListJournalS3ExportsFuture{Future: future}
}

func (a *stub) ListJournalS3ExportsForLedger(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	var output qldb.ListJournalS3ExportsForLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalS3ExportsForLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListJournalS3ExportsForLedgerAsync(ctx workflow.Context, input *qldb.ListJournalS3ExportsForLedgerInput) *ListJournalS3ExportsForLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ListJournalS3ExportsForLedger", input)
	return &ListJournalS3ExportsForLedgerFuture{Future: future}
}

func (a *stub) ListLedgers(ctx workflow.Context, input *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error) {
	var output qldb.ListLedgersOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ListLedgers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLedgersAsync(ctx workflow.Context, input *qldb.ListLedgersInput) *ListLedgersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ListLedgers", input)
	return &ListLedgersFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error) {
	var output qldb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *qldb.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) StreamJournalToKinesis(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error) {
	var output qldb.StreamJournalToKinesisOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-StreamJournalToKinesis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StreamJournalToKinesisAsync(ctx workflow.Context, input *qldb.StreamJournalToKinesisInput) *StreamJournalToKinesisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-StreamJournalToKinesis", input)
	return &StreamJournalToKinesisFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *qldb.TagResourceInput) (*qldb.TagResourceOutput, error) {
	var output qldb.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *qldb.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error) {
	var output qldb.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *qldb.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateLedger(ctx workflow.Context, input *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error) {
	var output qldb.UpdateLedgerOutput
	err := workflow.ExecuteActivity(ctx, "aws-qldb-UpdateLedger", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateLedgerAsync(ctx workflow.Context, input *qldb.UpdateLedgerInput) *UpdateLedgerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-qldb-UpdateLedger", input)
	return &UpdateLedgerFuture{Future: future}
}
