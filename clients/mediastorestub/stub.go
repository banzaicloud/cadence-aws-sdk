// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mediastorestub

import (
	"github.com/aws/aws-sdk-go/service/mediastore"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CreateContainerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateContainerFuture) Get(ctx workflow.Context) (*mediastore.CreateContainerOutput, error) {
	var output mediastore.CreateContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContainerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContainerFuture) Get(ctx workflow.Context) (*mediastore.DeleteContainerOutput, error) {
	var output mediastore.DeleteContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteContainerPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteContainerPolicyOutput, error) {
	var output mediastore.DeleteContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCorsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteCorsPolicyOutput, error) {
	var output mediastore.DeleteCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteLifecyclePolicyOutput, error) {
	var output mediastore.DeleteLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteMetricPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.DeleteMetricPolicyOutput, error) {
	var output mediastore.DeleteMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeContainerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeContainerFuture) Get(ctx workflow.Context) (*mediastore.DescribeContainerOutput, error) {
	var output mediastore.DescribeContainerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetContainerPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetContainerPolicyOutput, error) {
	var output mediastore.GetContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCorsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetCorsPolicyOutput, error) {
	var output mediastore.GetCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.GetLifecyclePolicyOutput, error) {
	var output mediastore.GetLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetMetricPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.GetMetricPolicyOutput, error) {
	var output mediastore.GetMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListContainersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListContainersFuture) Get(ctx workflow.Context) (*mediastore.ListContainersOutput, error) {
	var output mediastore.ListContainersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*mediastore.ListTagsForResourceOutput, error) {
	var output mediastore.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutContainerPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutContainerPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutContainerPolicyOutput, error) {
	var output mediastore.PutContainerPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutCorsPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutCorsPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutCorsPolicyOutput, error) {
	var output mediastore.PutCorsPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutLifecyclePolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutLifecyclePolicyFuture) Get(ctx workflow.Context) (*mediastore.PutLifecyclePolicyOutput, error) {
	var output mediastore.PutLifecyclePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutMetricPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutMetricPolicyFuture) Get(ctx workflow.Context) (*mediastore.PutMetricPolicyOutput, error) {
	var output mediastore.PutMetricPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartAccessLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartAccessLoggingFuture) Get(ctx workflow.Context) (*mediastore.StartAccessLoggingOutput, error) {
	var output mediastore.StartAccessLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopAccessLoggingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopAccessLoggingFuture) Get(ctx workflow.Context) (*mediastore.StopAccessLoggingOutput, error) {
	var output mediastore.StopAccessLoggingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*mediastore.TagResourceOutput, error) {
	var output mediastore.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*mediastore.UntagResourceOutput, error) {
	var output mediastore.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainer(ctx workflow.Context, input *mediastore.CreateContainerInput) (*mediastore.CreateContainerOutput, error) {
	var output mediastore.CreateContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-CreateContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateContainerAsync(ctx workflow.Context, input *mediastore.CreateContainerInput) *CreateContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-CreateContainer", input)
	return &CreateContainerFuture{Future: future}
}

func (a *stub) DeleteContainer(ctx workflow.Context, input *mediastore.DeleteContainerInput) (*mediastore.DeleteContainerOutput, error) {
	var output mediastore.DeleteContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContainerAsync(ctx workflow.Context, input *mediastore.DeleteContainerInput) *DeleteContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteContainer", input)
	return &DeleteContainerFuture{Future: future}
}

func (a *stub) DeleteContainerPolicy(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) (*mediastore.DeleteContainerPolicyOutput, error) {
	var output mediastore.DeleteContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteContainerPolicyAsync(ctx workflow.Context, input *mediastore.DeleteContainerPolicyInput) *DeleteContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteContainerPolicy", input)
	return &DeleteContainerPolicyFuture{Future: future}
}

func (a *stub) DeleteCorsPolicy(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) (*mediastore.DeleteCorsPolicyOutput, error) {
	var output mediastore.DeleteCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCorsPolicyAsync(ctx workflow.Context, input *mediastore.DeleteCorsPolicyInput) *DeleteCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteCorsPolicy", input)
	return &DeleteCorsPolicyFuture{Future: future}
}

func (a *stub) DeleteLifecyclePolicy(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) (*mediastore.DeleteLifecyclePolicyOutput, error) {
	var output mediastore.DeleteLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.DeleteLifecyclePolicyInput) *DeleteLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteLifecyclePolicy", input)
	return &DeleteLifecyclePolicyFuture{Future: future}
}

func (a *stub) DeleteMetricPolicy(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) (*mediastore.DeleteMetricPolicyOutput, error) {
	var output mediastore.DeleteMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteMetricPolicyAsync(ctx workflow.Context, input *mediastore.DeleteMetricPolicyInput) *DeleteMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DeleteMetricPolicy", input)
	return &DeleteMetricPolicyFuture{Future: future}
}

func (a *stub) DescribeContainer(ctx workflow.Context, input *mediastore.DescribeContainerInput) (*mediastore.DescribeContainerOutput, error) {
	var output mediastore.DescribeContainerOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-DescribeContainer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeContainerAsync(ctx workflow.Context, input *mediastore.DescribeContainerInput) *DescribeContainerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-DescribeContainer", input)
	return &DescribeContainerFuture{Future: future}
}

func (a *stub) GetContainerPolicy(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) (*mediastore.GetContainerPolicyOutput, error) {
	var output mediastore.GetContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-GetContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetContainerPolicyAsync(ctx workflow.Context, input *mediastore.GetContainerPolicyInput) *GetContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-GetContainerPolicy", input)
	return &GetContainerPolicyFuture{Future: future}
}

func (a *stub) GetCorsPolicy(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) (*mediastore.GetCorsPolicyOutput, error) {
	var output mediastore.GetCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-GetCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCorsPolicyAsync(ctx workflow.Context, input *mediastore.GetCorsPolicyInput) *GetCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-GetCorsPolicy", input)
	return &GetCorsPolicyFuture{Future: future}
}

func (a *stub) GetLifecyclePolicy(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) (*mediastore.GetLifecyclePolicyOutput, error) {
	var output mediastore.GetLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-GetLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.GetLifecyclePolicyInput) *GetLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-GetLifecyclePolicy", input)
	return &GetLifecyclePolicyFuture{Future: future}
}

func (a *stub) GetMetricPolicy(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) (*mediastore.GetMetricPolicyOutput, error) {
	var output mediastore.GetMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-GetMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetMetricPolicyAsync(ctx workflow.Context, input *mediastore.GetMetricPolicyInput) *GetMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-GetMetricPolicy", input)
	return &GetMetricPolicyFuture{Future: future}
}

func (a *stub) ListContainers(ctx workflow.Context, input *mediastore.ListContainersInput) (*mediastore.ListContainersOutput, error) {
	var output mediastore.ListContainersOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-ListContainers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListContainersAsync(ctx workflow.Context, input *mediastore.ListContainersInput) *ListContainersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-ListContainers", input)
	return &ListContainersFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) (*mediastore.ListTagsForResourceOutput, error) {
	var output mediastore.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *mediastore.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PutContainerPolicy(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) (*mediastore.PutContainerPolicyOutput, error) {
	var output mediastore.PutContainerPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-PutContainerPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutContainerPolicyAsync(ctx workflow.Context, input *mediastore.PutContainerPolicyInput) *PutContainerPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-PutContainerPolicy", input)
	return &PutContainerPolicyFuture{Future: future}
}

func (a *stub) PutCorsPolicy(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) (*mediastore.PutCorsPolicyOutput, error) {
	var output mediastore.PutCorsPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-PutCorsPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutCorsPolicyAsync(ctx workflow.Context, input *mediastore.PutCorsPolicyInput) *PutCorsPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-PutCorsPolicy", input)
	return &PutCorsPolicyFuture{Future: future}
}

func (a *stub) PutLifecyclePolicy(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) (*mediastore.PutLifecyclePolicyOutput, error) {
	var output mediastore.PutLifecyclePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-PutLifecyclePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutLifecyclePolicyAsync(ctx workflow.Context, input *mediastore.PutLifecyclePolicyInput) *PutLifecyclePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-PutLifecyclePolicy", input)
	return &PutLifecyclePolicyFuture{Future: future}
}

func (a *stub) PutMetricPolicy(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) (*mediastore.PutMetricPolicyOutput, error) {
	var output mediastore.PutMetricPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-PutMetricPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutMetricPolicyAsync(ctx workflow.Context, input *mediastore.PutMetricPolicyInput) *PutMetricPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-PutMetricPolicy", input)
	return &PutMetricPolicyFuture{Future: future}
}

func (a *stub) StartAccessLogging(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) (*mediastore.StartAccessLoggingOutput, error) {
	var output mediastore.StartAccessLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-StartAccessLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartAccessLoggingAsync(ctx workflow.Context, input *mediastore.StartAccessLoggingInput) *StartAccessLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-StartAccessLogging", input)
	return &StartAccessLoggingFuture{Future: future}
}

func (a *stub) StopAccessLogging(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) (*mediastore.StopAccessLoggingOutput, error) {
	var output mediastore.StopAccessLoggingOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-StopAccessLogging", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopAccessLoggingAsync(ctx workflow.Context, input *mediastore.StopAccessLoggingInput) *StopAccessLoggingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-StopAccessLogging", input)
	return &StopAccessLoggingFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *mediastore.TagResourceInput) (*mediastore.TagResourceOutput, error) {
	var output mediastore.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *mediastore.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *mediastore.UntagResourceInput) (*mediastore.UntagResourceOutput, error) {
	var output mediastore.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-mediastore-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *mediastore.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-mediastore-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}
