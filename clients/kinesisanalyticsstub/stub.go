// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kinesisanalyticsstub

import (
	"github.com/aws/aws-sdk-go/service/kinesisanalytics"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type KinesisAnalyticsAddApplicationCloudWatchLoggingOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsAddApplicationCloudWatchLoggingOptionFuture) Get(ctx workflow.Context) (*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsAddApplicationInputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsAddApplicationInputFuture) Get(ctx workflow.Context) (*kinesisanalytics.AddApplicationInputOutput, error) {
	var output kinesisanalytics.AddApplicationInputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsAddApplicationInputProcessingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsAddApplicationInputProcessingConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalytics.AddApplicationInputProcessingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsAddApplicationOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsAddApplicationOutputFuture) Get(ctx workflow.Context) (*kinesisanalytics.AddApplicationOutputOutput, error) {
	var output kinesisanalytics.AddApplicationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsAddApplicationReferenceDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsAddApplicationReferenceDataSourceFuture) Get(ctx workflow.Context) (*kinesisanalytics.AddApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalytics.AddApplicationReferenceDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsCreateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsCreateApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.CreateApplicationOutput, error) {
	var output kinesisanalytics.CreateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDeleteApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDeleteApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.DeleteApplicationOutput, error) {
	var output kinesisanalytics.DeleteApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionFuture) Get(ctx workflow.Context) (*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDeleteApplicationInputProcessingConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDeleteApplicationInputProcessingConfigurationFuture) Get(ctx workflow.Context) (*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDeleteApplicationOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDeleteApplicationOutputFuture) Get(ctx workflow.Context) (*kinesisanalytics.DeleteApplicationOutputOutput, error) {
	var output kinesisanalytics.DeleteApplicationOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDeleteApplicationReferenceDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDeleteApplicationReferenceDataSourceFuture) Get(ctx workflow.Context) (*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalytics.DeleteApplicationReferenceDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDescribeApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDescribeApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.DescribeApplicationOutput, error) {
	var output kinesisanalytics.DescribeApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsDiscoverInputSchemaFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsDiscoverInputSchemaFuture) Get(ctx workflow.Context) (*kinesisanalytics.DiscoverInputSchemaOutput, error) {
	var output kinesisanalytics.DiscoverInputSchemaOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsListApplicationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsListApplicationsFuture) Get(ctx workflow.Context) (*kinesisanalytics.ListApplicationsOutput, error) {
	var output kinesisanalytics.ListApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsListTagsForResourceFuture) Get(ctx workflow.Context) (*kinesisanalytics.ListTagsForResourceOutput, error) {
	var output kinesisanalytics.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsStartApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsStartApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.StartApplicationOutput, error) {
	var output kinesisanalytics.StartApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsStopApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsStopApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.StopApplicationOutput, error) {
	var output kinesisanalytics.StopApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsTagResourceFuture) Get(ctx workflow.Context) (*kinesisanalytics.TagResourceOutput, error) {
	var output kinesisanalytics.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsUntagResourceFuture) Get(ctx workflow.Context) (*kinesisanalytics.UntagResourceOutput, error) {
	var output kinesisanalytics.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type KinesisAnalyticsUpdateApplicationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *KinesisAnalyticsUpdateApplicationFuture) Get(ctx workflow.Context) (*kinesisanalytics.UpdateApplicationOutput, error) {
	var output kinesisanalytics.UpdateApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalytics.AddApplicationCloudWatchLoggingOptionInput) (*kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalytics.AddApplicationCloudWatchLoggingOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationCloudWatchLoggingOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalytics.AddApplicationCloudWatchLoggingOptionInput) *KinesisAnalyticsAddApplicationCloudWatchLoggingOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationCloudWatchLoggingOption", input)
	return &KinesisAnalyticsAddApplicationCloudWatchLoggingOptionFuture{Future: future}
}

func (a *stub) AddApplicationInput(ctx workflow.Context, input *kinesisanalytics.AddApplicationInputInput) (*kinesisanalytics.AddApplicationInputOutput, error) {
	var output kinesisanalytics.AddApplicationInputOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationInput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationInputAsync(ctx workflow.Context, input *kinesisanalytics.AddApplicationInputInput) *KinesisAnalyticsAddApplicationInputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationInput", input)
	return &KinesisAnalyticsAddApplicationInputFuture{Future: future}
}

func (a *stub) AddApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalytics.AddApplicationInputProcessingConfigurationInput) (*kinesisanalytics.AddApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalytics.AddApplicationInputProcessingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationInputProcessingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalytics.AddApplicationInputProcessingConfigurationInput) *KinesisAnalyticsAddApplicationInputProcessingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationInputProcessingConfiguration", input)
	return &KinesisAnalyticsAddApplicationInputProcessingConfigurationFuture{Future: future}
}

func (a *stub) AddApplicationOutput(ctx workflow.Context, input *kinesisanalytics.AddApplicationOutputInput) (*kinesisanalytics.AddApplicationOutputOutput, error) {
	var output kinesisanalytics.AddApplicationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationOutputAsync(ctx workflow.Context, input *kinesisanalytics.AddApplicationOutputInput) *KinesisAnalyticsAddApplicationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationOutput", input)
	return &KinesisAnalyticsAddApplicationOutputFuture{Future: future}
}

func (a *stub) AddApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalytics.AddApplicationReferenceDataSourceInput) (*kinesisanalytics.AddApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalytics.AddApplicationReferenceDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationReferenceDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalytics.AddApplicationReferenceDataSourceInput) *KinesisAnalyticsAddApplicationReferenceDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-AddApplicationReferenceDataSource", input)
	return &KinesisAnalyticsAddApplicationReferenceDataSourceFuture{Future: future}
}

func (a *stub) CreateApplication(ctx workflow.Context, input *kinesisanalytics.CreateApplicationInput) (*kinesisanalytics.CreateApplicationOutput, error) {
	var output kinesisanalytics.CreateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-CreateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApplicationAsync(ctx workflow.Context, input *kinesisanalytics.CreateApplicationInput) *KinesisAnalyticsCreateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-CreateApplication", input)
	return &KinesisAnalyticsCreateApplicationFuture{Future: future}
}

func (a *stub) DeleteApplication(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationInput) (*kinesisanalytics.DeleteApplicationOutput, error) {
	var output kinesisanalytics.DeleteApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationAsync(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationInput) *KinesisAnalyticsDeleteApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplication", input)
	return &KinesisAnalyticsDeleteApplicationFuture{Future: future}
}

func (a *stub) DeleteApplicationCloudWatchLoggingOption(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionInput) (*kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	var output kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationCloudWatchLoggingOption", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationCloudWatchLoggingOptionAsync(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationCloudWatchLoggingOptionInput) *KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationCloudWatchLoggingOption", input)
	return &KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionFuture{Future: future}
}

func (a *stub) DeleteApplicationInputProcessingConfiguration(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationInputProcessingConfigurationInput) (*kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput, error) {
	var output kinesisanalytics.DeleteApplicationInputProcessingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationInputProcessingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationInputProcessingConfigurationAsync(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationInputProcessingConfigurationInput) *KinesisAnalyticsDeleteApplicationInputProcessingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationInputProcessingConfiguration", input)
	return &KinesisAnalyticsDeleteApplicationInputProcessingConfigurationFuture{Future: future}
}

func (a *stub) DeleteApplicationOutput(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationOutputInput) (*kinesisanalytics.DeleteApplicationOutputOutput, error) {
	var output kinesisanalytics.DeleteApplicationOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationOutputAsync(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationOutputInput) *KinesisAnalyticsDeleteApplicationOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationOutput", input)
	return &KinesisAnalyticsDeleteApplicationOutputFuture{Future: future}
}

func (a *stub) DeleteApplicationReferenceDataSource(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationReferenceDataSourceInput) (*kinesisanalytics.DeleteApplicationReferenceDataSourceOutput, error) {
	var output kinesisanalytics.DeleteApplicationReferenceDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationReferenceDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApplicationReferenceDataSourceAsync(ctx workflow.Context, input *kinesisanalytics.DeleteApplicationReferenceDataSourceInput) *KinesisAnalyticsDeleteApplicationReferenceDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DeleteApplicationReferenceDataSource", input)
	return &KinesisAnalyticsDeleteApplicationReferenceDataSourceFuture{Future: future}
}

func (a *stub) DescribeApplication(ctx workflow.Context, input *kinesisanalytics.DescribeApplicationInput) (*kinesisanalytics.DescribeApplicationOutput, error) {
	var output kinesisanalytics.DescribeApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DescribeApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeApplicationAsync(ctx workflow.Context, input *kinesisanalytics.DescribeApplicationInput) *KinesisAnalyticsDescribeApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DescribeApplication", input)
	return &KinesisAnalyticsDescribeApplicationFuture{Future: future}
}

func (a *stub) DiscoverInputSchema(ctx workflow.Context, input *kinesisanalytics.DiscoverInputSchemaInput) (*kinesisanalytics.DiscoverInputSchemaOutput, error) {
	var output kinesisanalytics.DiscoverInputSchemaOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DiscoverInputSchema", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DiscoverInputSchemaAsync(ctx workflow.Context, input *kinesisanalytics.DiscoverInputSchemaInput) *KinesisAnalyticsDiscoverInputSchemaFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-DiscoverInputSchema", input)
	return &KinesisAnalyticsDiscoverInputSchemaFuture{Future: future}
}

func (a *stub) ListApplications(ctx workflow.Context, input *kinesisanalytics.ListApplicationsInput) (*kinesisanalytics.ListApplicationsOutput, error) {
	var output kinesisanalytics.ListApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-ListApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListApplicationsAsync(ctx workflow.Context, input *kinesisanalytics.ListApplicationsInput) *KinesisAnalyticsListApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-ListApplications", input)
	return &KinesisAnalyticsListApplicationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *kinesisanalytics.ListTagsForResourceInput) (*kinesisanalytics.ListTagsForResourceOutput, error) {
	var output kinesisanalytics.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *kinesisanalytics.ListTagsForResourceInput) *KinesisAnalyticsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-ListTagsForResource", input)
	return &KinesisAnalyticsListTagsForResourceFuture{Future: future}
}

func (a *stub) StartApplication(ctx workflow.Context, input *kinesisanalytics.StartApplicationInput) (*kinesisanalytics.StartApplicationOutput, error) {
	var output kinesisanalytics.StartApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-StartApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartApplicationAsync(ctx workflow.Context, input *kinesisanalytics.StartApplicationInput) *KinesisAnalyticsStartApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-StartApplication", input)
	return &KinesisAnalyticsStartApplicationFuture{Future: future}
}

func (a *stub) StopApplication(ctx workflow.Context, input *kinesisanalytics.StopApplicationInput) (*kinesisanalytics.StopApplicationOutput, error) {
	var output kinesisanalytics.StopApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-StopApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopApplicationAsync(ctx workflow.Context, input *kinesisanalytics.StopApplicationInput) *KinesisAnalyticsStopApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-StopApplication", input)
	return &KinesisAnalyticsStopApplicationFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *kinesisanalytics.TagResourceInput) (*kinesisanalytics.TagResourceOutput, error) {
	var output kinesisanalytics.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *kinesisanalytics.TagResourceInput) *KinesisAnalyticsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-TagResource", input)
	return &KinesisAnalyticsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *kinesisanalytics.UntagResourceInput) (*kinesisanalytics.UntagResourceOutput, error) {
	var output kinesisanalytics.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *kinesisanalytics.UntagResourceInput) *KinesisAnalyticsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-UntagResource", input)
	return &KinesisAnalyticsUntagResourceFuture{Future: future}
}

func (a *stub) UpdateApplication(ctx workflow.Context, input *kinesisanalytics.UpdateApplicationInput) (*kinesisanalytics.UpdateApplicationOutput, error) {
	var output kinesisanalytics.UpdateApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-UpdateApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApplicationAsync(ctx workflow.Context, input *kinesisanalytics.UpdateApplicationInput) *KinesisAnalyticsUpdateApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-kinesisanalytics-UpdateApplication", input)
	return &KinesisAnalyticsUpdateApplicationFuture{Future: future}
}
