// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package auditmanagerstub

import (
	"github.com/aws/aws-sdk-go/service/auditmanager"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateAssessmentReportEvidenceFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateAssessmentReportEvidenceFolderFuture) Get(ctx workflow.Context) (*auditmanager.AssociateAssessmentReportEvidenceFolderOutput, error) {
	var output auditmanager.AssociateAssessmentReportEvidenceFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchAssociateAssessmentReportEvidenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchAssociateAssessmentReportEvidenceFuture) Get(ctx workflow.Context) (*auditmanager.BatchAssociateAssessmentReportEvidenceOutput, error) {
	var output auditmanager.BatchAssociateAssessmentReportEvidenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchCreateDelegationByAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchCreateDelegationByAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.BatchCreateDelegationByAssessmentOutput, error) {
	var output auditmanager.BatchCreateDelegationByAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDeleteDelegationByAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDeleteDelegationByAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.BatchDeleteDelegationByAssessmentOutput, error) {
	var output auditmanager.BatchDeleteDelegationByAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchDisassociateAssessmentReportEvidenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchDisassociateAssessmentReportEvidenceFuture) Get(ctx workflow.Context) (*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput, error) {
	var output auditmanager.BatchDisassociateAssessmentReportEvidenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchImportEvidenceToAssessmentControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchImportEvidenceToAssessmentControlFuture) Get(ctx workflow.Context) (*auditmanager.BatchImportEvidenceToAssessmentControlOutput, error) {
	var output auditmanager.BatchImportEvidenceToAssessmentControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.CreateAssessmentOutput, error) {
	var output auditmanager.CreateAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssessmentFrameworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssessmentFrameworkFuture) Get(ctx workflow.Context) (*auditmanager.CreateAssessmentFrameworkOutput, error) {
	var output auditmanager.CreateAssessmentFrameworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAssessmentReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAssessmentReportFuture) Get(ctx workflow.Context) (*auditmanager.CreateAssessmentReportOutput, error) {
	var output auditmanager.CreateAssessmentReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateControlFuture) Get(ctx workflow.Context) (*auditmanager.CreateControlOutput, error) {
	var output auditmanager.CreateControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.DeleteAssessmentOutput, error) {
	var output auditmanager.DeleteAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentFrameworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentFrameworkFuture) Get(ctx workflow.Context) (*auditmanager.DeleteAssessmentFrameworkOutput, error) {
	var output auditmanager.DeleteAssessmentFrameworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAssessmentReportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAssessmentReportFuture) Get(ctx workflow.Context) (*auditmanager.DeleteAssessmentReportOutput, error) {
	var output auditmanager.DeleteAssessmentReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteControlFuture) Get(ctx workflow.Context) (*auditmanager.DeleteControlOutput, error) {
	var output auditmanager.DeleteControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterAccountFuture) Get(ctx workflow.Context) (*auditmanager.DeregisterAccountOutput, error) {
	var output auditmanager.DeregisterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*auditmanager.DeregisterOrganizationAdminAccountOutput, error) {
	var output auditmanager.DeregisterOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateAssessmentReportEvidenceFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateAssessmentReportEvidenceFolderFuture) Get(ctx workflow.Context) (*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput, error) {
	var output auditmanager.DisassociateAssessmentReportEvidenceFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAccountStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAccountStatusFuture) Get(ctx workflow.Context) (*auditmanager.GetAccountStatusOutput, error) {
	var output auditmanager.GetAccountStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.GetAssessmentOutput, error) {
	var output auditmanager.GetAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssessmentFrameworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssessmentFrameworkFuture) Get(ctx workflow.Context) (*auditmanager.GetAssessmentFrameworkOutput, error) {
	var output auditmanager.GetAssessmentFrameworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssessmentReportUrlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssessmentReportUrlFuture) Get(ctx workflow.Context) (*auditmanager.GetAssessmentReportUrlOutput, error) {
	var output auditmanager.GetAssessmentReportUrlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetChangeLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetChangeLogsFuture) Get(ctx workflow.Context) (*auditmanager.GetChangeLogsOutput, error) {
	var output auditmanager.GetChangeLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetControlFuture) Get(ctx workflow.Context) (*auditmanager.GetControlOutput, error) {
	var output auditmanager.GetControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDelegationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDelegationsFuture) Get(ctx workflow.Context) (*auditmanager.GetDelegationsOutput, error) {
	var output auditmanager.GetDelegationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEvidenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEvidenceFuture) Get(ctx workflow.Context) (*auditmanager.GetEvidenceOutput, error) {
	var output auditmanager.GetEvidenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEvidenceByEvidenceFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEvidenceByEvidenceFolderFuture) Get(ctx workflow.Context) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {
	var output auditmanager.GetEvidenceByEvidenceFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEvidenceFolderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEvidenceFolderFuture) Get(ctx workflow.Context) (*auditmanager.GetEvidenceFolderOutput, error) {
	var output auditmanager.GetEvidenceFolderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEvidenceFoldersByAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEvidenceFoldersByAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {
	var output auditmanager.GetEvidenceFoldersByAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEvidenceFoldersByAssessmentControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEvidenceFoldersByAssessmentControlFuture) Get(ctx workflow.Context) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {
	var output auditmanager.GetEvidenceFoldersByAssessmentControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*auditmanager.GetOrganizationAdminAccountOutput, error) {
	var output auditmanager.GetOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetServicesInScopeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetServicesInScopeFuture) Get(ctx workflow.Context) (*auditmanager.GetServicesInScopeOutput, error) {
	var output auditmanager.GetServicesInScopeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSettingsFuture) Get(ctx workflow.Context) (*auditmanager.GetSettingsOutput, error) {
	var output auditmanager.GetSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentFrameworksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentFrameworksFuture) Get(ctx workflow.Context) (*auditmanager.ListAssessmentFrameworksOutput, error) {
	var output auditmanager.ListAssessmentFrameworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentReportsFuture) Get(ctx workflow.Context) (*auditmanager.ListAssessmentReportsOutput, error) {
	var output auditmanager.ListAssessmentReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAssessmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAssessmentsFuture) Get(ctx workflow.Context) (*auditmanager.ListAssessmentsOutput, error) {
	var output auditmanager.ListAssessmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListControlsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListControlsFuture) Get(ctx workflow.Context) (*auditmanager.ListControlsOutput, error) {
	var output auditmanager.ListControlsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListKeywordsForDataSourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListKeywordsForDataSourceFuture) Get(ctx workflow.Context) (*auditmanager.ListKeywordsForDataSourceOutput, error) {
	var output auditmanager.ListKeywordsForDataSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListNotificationsFuture) Get(ctx workflow.Context) (*auditmanager.ListNotificationsOutput, error) {
	var output auditmanager.ListNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*auditmanager.ListTagsForResourceOutput, error) {
	var output auditmanager.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterAccountFuture) Get(ctx workflow.Context) (*auditmanager.RegisterAccountOutput, error) {
	var output auditmanager.RegisterAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterOrganizationAdminAccountFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterOrganizationAdminAccountFuture) Get(ctx workflow.Context) (*auditmanager.RegisterOrganizationAdminAccountOutput, error) {
	var output auditmanager.RegisterOrganizationAdminAccountOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*auditmanager.TagResourceOutput, error) {
	var output auditmanager.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*auditmanager.UntagResourceOutput, error) {
	var output auditmanager.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentFuture) Get(ctx workflow.Context) (*auditmanager.UpdateAssessmentOutput, error) {
	var output auditmanager.UpdateAssessmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentControlFuture) Get(ctx workflow.Context) (*auditmanager.UpdateAssessmentControlOutput, error) {
	var output auditmanager.UpdateAssessmentControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentControlSetStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentControlSetStatusFuture) Get(ctx workflow.Context) (*auditmanager.UpdateAssessmentControlSetStatusOutput, error) {
	var output auditmanager.UpdateAssessmentControlSetStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentFrameworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentFrameworkFuture) Get(ctx workflow.Context) (*auditmanager.UpdateAssessmentFrameworkOutput, error) {
	var output auditmanager.UpdateAssessmentFrameworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateAssessmentStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateAssessmentStatusFuture) Get(ctx workflow.Context) (*auditmanager.UpdateAssessmentStatusOutput, error) {
	var output auditmanager.UpdateAssessmentStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateControlFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateControlFuture) Get(ctx workflow.Context) (*auditmanager.UpdateControlOutput, error) {
	var output auditmanager.UpdateControlOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSettingsFuture) Get(ctx workflow.Context) (*auditmanager.UpdateSettingsOutput, error) {
	var output auditmanager.UpdateSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ValidateAssessmentReportIntegrityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ValidateAssessmentReportIntegrityFuture) Get(ctx workflow.Context) (*auditmanager.ValidateAssessmentReportIntegrityOutput, error) {
	var output auditmanager.ValidateAssessmentReportIntegrityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssessmentReportEvidenceFolder(ctx workflow.Context, input *auditmanager.AssociateAssessmentReportEvidenceFolderInput) (*auditmanager.AssociateAssessmentReportEvidenceFolderOutput, error) {
	var output auditmanager.AssociateAssessmentReportEvidenceFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-AssociateAssessmentReportEvidenceFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAssessmentReportEvidenceFolderAsync(ctx workflow.Context, input *auditmanager.AssociateAssessmentReportEvidenceFolderInput) *AssociateAssessmentReportEvidenceFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-AssociateAssessmentReportEvidenceFolder", input)
	return &AssociateAssessmentReportEvidenceFolderFuture{Future: future}
}

func (a *stub) BatchAssociateAssessmentReportEvidence(ctx workflow.Context, input *auditmanager.BatchAssociateAssessmentReportEvidenceInput) (*auditmanager.BatchAssociateAssessmentReportEvidenceOutput, error) {
	var output auditmanager.BatchAssociateAssessmentReportEvidenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchAssociateAssessmentReportEvidence", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchAssociateAssessmentReportEvidenceAsync(ctx workflow.Context, input *auditmanager.BatchAssociateAssessmentReportEvidenceInput) *BatchAssociateAssessmentReportEvidenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchAssociateAssessmentReportEvidence", input)
	return &BatchAssociateAssessmentReportEvidenceFuture{Future: future}
}

func (a *stub) BatchCreateDelegationByAssessment(ctx workflow.Context, input *auditmanager.BatchCreateDelegationByAssessmentInput) (*auditmanager.BatchCreateDelegationByAssessmentOutput, error) {
	var output auditmanager.BatchCreateDelegationByAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchCreateDelegationByAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchCreateDelegationByAssessmentAsync(ctx workflow.Context, input *auditmanager.BatchCreateDelegationByAssessmentInput) *BatchCreateDelegationByAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchCreateDelegationByAssessment", input)
	return &BatchCreateDelegationByAssessmentFuture{Future: future}
}

func (a *stub) BatchDeleteDelegationByAssessment(ctx workflow.Context, input *auditmanager.BatchDeleteDelegationByAssessmentInput) (*auditmanager.BatchDeleteDelegationByAssessmentOutput, error) {
	var output auditmanager.BatchDeleteDelegationByAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchDeleteDelegationByAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDeleteDelegationByAssessmentAsync(ctx workflow.Context, input *auditmanager.BatchDeleteDelegationByAssessmentInput) *BatchDeleteDelegationByAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchDeleteDelegationByAssessment", input)
	return &BatchDeleteDelegationByAssessmentFuture{Future: future}
}

func (a *stub) BatchDisassociateAssessmentReportEvidence(ctx workflow.Context, input *auditmanager.BatchDisassociateAssessmentReportEvidenceInput) (*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput, error) {
	var output auditmanager.BatchDisassociateAssessmentReportEvidenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchDisassociateAssessmentReportEvidence", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchDisassociateAssessmentReportEvidenceAsync(ctx workflow.Context, input *auditmanager.BatchDisassociateAssessmentReportEvidenceInput) *BatchDisassociateAssessmentReportEvidenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchDisassociateAssessmentReportEvidence", input)
	return &BatchDisassociateAssessmentReportEvidenceFuture{Future: future}
}

func (a *stub) BatchImportEvidenceToAssessmentControl(ctx workflow.Context, input *auditmanager.BatchImportEvidenceToAssessmentControlInput) (*auditmanager.BatchImportEvidenceToAssessmentControlOutput, error) {
	var output auditmanager.BatchImportEvidenceToAssessmentControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchImportEvidenceToAssessmentControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchImportEvidenceToAssessmentControlAsync(ctx workflow.Context, input *auditmanager.BatchImportEvidenceToAssessmentControlInput) *BatchImportEvidenceToAssessmentControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-BatchImportEvidenceToAssessmentControl", input)
	return &BatchImportEvidenceToAssessmentControlFuture{Future: future}
}

func (a *stub) CreateAssessment(ctx workflow.Context, input *auditmanager.CreateAssessmentInput) (*auditmanager.CreateAssessmentOutput, error) {
	var output auditmanager.CreateAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssessmentAsync(ctx workflow.Context, input *auditmanager.CreateAssessmentInput) *CreateAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessment", input)
	return &CreateAssessmentFuture{Future: future}
}

func (a *stub) CreateAssessmentFramework(ctx workflow.Context, input *auditmanager.CreateAssessmentFrameworkInput) (*auditmanager.CreateAssessmentFrameworkOutput, error) {
	var output auditmanager.CreateAssessmentFrameworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessmentFramework", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssessmentFrameworkAsync(ctx workflow.Context, input *auditmanager.CreateAssessmentFrameworkInput) *CreateAssessmentFrameworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessmentFramework", input)
	return &CreateAssessmentFrameworkFuture{Future: future}
}

func (a *stub) CreateAssessmentReport(ctx workflow.Context, input *auditmanager.CreateAssessmentReportInput) (*auditmanager.CreateAssessmentReportOutput, error) {
	var output auditmanager.CreateAssessmentReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessmentReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAssessmentReportAsync(ctx workflow.Context, input *auditmanager.CreateAssessmentReportInput) *CreateAssessmentReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateAssessmentReport", input)
	return &CreateAssessmentReportFuture{Future: future}
}

func (a *stub) CreateControl(ctx workflow.Context, input *auditmanager.CreateControlInput) (*auditmanager.CreateControlOutput, error) {
	var output auditmanager.CreateControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateControlAsync(ctx workflow.Context, input *auditmanager.CreateControlInput) *CreateControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-CreateControl", input)
	return &CreateControlFuture{Future: future}
}

func (a *stub) DeleteAssessment(ctx workflow.Context, input *auditmanager.DeleteAssessmentInput) (*auditmanager.DeleteAssessmentOutput, error) {
	var output auditmanager.DeleteAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentAsync(ctx workflow.Context, input *auditmanager.DeleteAssessmentInput) *DeleteAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessment", input)
	return &DeleteAssessmentFuture{Future: future}
}

func (a *stub) DeleteAssessmentFramework(ctx workflow.Context, input *auditmanager.DeleteAssessmentFrameworkInput) (*auditmanager.DeleteAssessmentFrameworkOutput, error) {
	var output auditmanager.DeleteAssessmentFrameworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessmentFramework", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentFrameworkAsync(ctx workflow.Context, input *auditmanager.DeleteAssessmentFrameworkInput) *DeleteAssessmentFrameworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessmentFramework", input)
	return &DeleteAssessmentFrameworkFuture{Future: future}
}

func (a *stub) DeleteAssessmentReport(ctx workflow.Context, input *auditmanager.DeleteAssessmentReportInput) (*auditmanager.DeleteAssessmentReportOutput, error) {
	var output auditmanager.DeleteAssessmentReportOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessmentReport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAssessmentReportAsync(ctx workflow.Context, input *auditmanager.DeleteAssessmentReportInput) *DeleteAssessmentReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteAssessmentReport", input)
	return &DeleteAssessmentReportFuture{Future: future}
}

func (a *stub) DeleteControl(ctx workflow.Context, input *auditmanager.DeleteControlInput) (*auditmanager.DeleteControlOutput, error) {
	var output auditmanager.DeleteControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteControlAsync(ctx workflow.Context, input *auditmanager.DeleteControlInput) *DeleteControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeleteControl", input)
	return &DeleteControlFuture{Future: future}
}

func (a *stub) DeregisterAccount(ctx workflow.Context, input *auditmanager.DeregisterAccountInput) (*auditmanager.DeregisterAccountOutput, error) {
	var output auditmanager.DeregisterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeregisterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterAccountAsync(ctx workflow.Context, input *auditmanager.DeregisterAccountInput) *DeregisterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeregisterAccount", input)
	return &DeregisterAccountFuture{Future: future}
}

func (a *stub) DeregisterOrganizationAdminAccount(ctx workflow.Context, input *auditmanager.DeregisterOrganizationAdminAccountInput) (*auditmanager.DeregisterOrganizationAdminAccountOutput, error) {
	var output auditmanager.DeregisterOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeregisterOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterOrganizationAdminAccountAsync(ctx workflow.Context, input *auditmanager.DeregisterOrganizationAdminAccountInput) *DeregisterOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DeregisterOrganizationAdminAccount", input)
	return &DeregisterOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) DisassociateAssessmentReportEvidenceFolder(ctx workflow.Context, input *auditmanager.DisassociateAssessmentReportEvidenceFolderInput) (*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput, error) {
	var output auditmanager.DisassociateAssessmentReportEvidenceFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-DisassociateAssessmentReportEvidenceFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAssessmentReportEvidenceFolderAsync(ctx workflow.Context, input *auditmanager.DisassociateAssessmentReportEvidenceFolderInput) *DisassociateAssessmentReportEvidenceFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-DisassociateAssessmentReportEvidenceFolder", input)
	return &DisassociateAssessmentReportEvidenceFolderFuture{Future: future}
}

func (a *stub) GetAccountStatus(ctx workflow.Context, input *auditmanager.GetAccountStatusInput) (*auditmanager.GetAccountStatusOutput, error) {
	var output auditmanager.GetAccountStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAccountStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAccountStatusAsync(ctx workflow.Context, input *auditmanager.GetAccountStatusInput) *GetAccountStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAccountStatus", input)
	return &GetAccountStatusFuture{Future: future}
}

func (a *stub) GetAssessment(ctx workflow.Context, input *auditmanager.GetAssessmentInput) (*auditmanager.GetAssessmentOutput, error) {
	var output auditmanager.GetAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssessmentAsync(ctx workflow.Context, input *auditmanager.GetAssessmentInput) *GetAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessment", input)
	return &GetAssessmentFuture{Future: future}
}

func (a *stub) GetAssessmentFramework(ctx workflow.Context, input *auditmanager.GetAssessmentFrameworkInput) (*auditmanager.GetAssessmentFrameworkOutput, error) {
	var output auditmanager.GetAssessmentFrameworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessmentFramework", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssessmentFrameworkAsync(ctx workflow.Context, input *auditmanager.GetAssessmentFrameworkInput) *GetAssessmentFrameworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessmentFramework", input)
	return &GetAssessmentFrameworkFuture{Future: future}
}

func (a *stub) GetAssessmentReportUrl(ctx workflow.Context, input *auditmanager.GetAssessmentReportUrlInput) (*auditmanager.GetAssessmentReportUrlOutput, error) {
	var output auditmanager.GetAssessmentReportUrlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessmentReportUrl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssessmentReportUrlAsync(ctx workflow.Context, input *auditmanager.GetAssessmentReportUrlInput) *GetAssessmentReportUrlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetAssessmentReportUrl", input)
	return &GetAssessmentReportUrlFuture{Future: future}
}

func (a *stub) GetChangeLogs(ctx workflow.Context, input *auditmanager.GetChangeLogsInput) (*auditmanager.GetChangeLogsOutput, error) {
	var output auditmanager.GetChangeLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetChangeLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetChangeLogsAsync(ctx workflow.Context, input *auditmanager.GetChangeLogsInput) *GetChangeLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetChangeLogs", input)
	return &GetChangeLogsFuture{Future: future}
}

func (a *stub) GetControl(ctx workflow.Context, input *auditmanager.GetControlInput) (*auditmanager.GetControlOutput, error) {
	var output auditmanager.GetControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetControlAsync(ctx workflow.Context, input *auditmanager.GetControlInput) *GetControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetControl", input)
	return &GetControlFuture{Future: future}
}

func (a *stub) GetDelegations(ctx workflow.Context, input *auditmanager.GetDelegationsInput) (*auditmanager.GetDelegationsOutput, error) {
	var output auditmanager.GetDelegationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetDelegations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDelegationsAsync(ctx workflow.Context, input *auditmanager.GetDelegationsInput) *GetDelegationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetDelegations", input)
	return &GetDelegationsFuture{Future: future}
}

func (a *stub) GetEvidence(ctx workflow.Context, input *auditmanager.GetEvidenceInput) (*auditmanager.GetEvidenceOutput, error) {
	var output auditmanager.GetEvidenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidence", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEvidenceAsync(ctx workflow.Context, input *auditmanager.GetEvidenceInput) *GetEvidenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidence", input)
	return &GetEvidenceFuture{Future: future}
}

func (a *stub) GetEvidenceByEvidenceFolder(ctx workflow.Context, input *auditmanager.GetEvidenceByEvidenceFolderInput) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {
	var output auditmanager.GetEvidenceByEvidenceFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceByEvidenceFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEvidenceByEvidenceFolderAsync(ctx workflow.Context, input *auditmanager.GetEvidenceByEvidenceFolderInput) *GetEvidenceByEvidenceFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceByEvidenceFolder", input)
	return &GetEvidenceByEvidenceFolderFuture{Future: future}
}

func (a *stub) GetEvidenceFolder(ctx workflow.Context, input *auditmanager.GetEvidenceFolderInput) (*auditmanager.GetEvidenceFolderOutput, error) {
	var output auditmanager.GetEvidenceFolderOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFolder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEvidenceFolderAsync(ctx workflow.Context, input *auditmanager.GetEvidenceFolderInput) *GetEvidenceFolderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFolder", input)
	return &GetEvidenceFolderFuture{Future: future}
}

func (a *stub) GetEvidenceFoldersByAssessment(ctx workflow.Context, input *auditmanager.GetEvidenceFoldersByAssessmentInput) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {
	var output auditmanager.GetEvidenceFoldersByAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFoldersByAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEvidenceFoldersByAssessmentAsync(ctx workflow.Context, input *auditmanager.GetEvidenceFoldersByAssessmentInput) *GetEvidenceFoldersByAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFoldersByAssessment", input)
	return &GetEvidenceFoldersByAssessmentFuture{Future: future}
}

func (a *stub) GetEvidenceFoldersByAssessmentControl(ctx workflow.Context, input *auditmanager.GetEvidenceFoldersByAssessmentControlInput) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {
	var output auditmanager.GetEvidenceFoldersByAssessmentControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFoldersByAssessmentControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEvidenceFoldersByAssessmentControlAsync(ctx workflow.Context, input *auditmanager.GetEvidenceFoldersByAssessmentControlInput) *GetEvidenceFoldersByAssessmentControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetEvidenceFoldersByAssessmentControl", input)
	return &GetEvidenceFoldersByAssessmentControlFuture{Future: future}
}

func (a *stub) GetOrganizationAdminAccount(ctx workflow.Context, input *auditmanager.GetOrganizationAdminAccountInput) (*auditmanager.GetOrganizationAdminAccountOutput, error) {
	var output auditmanager.GetOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetOrganizationAdminAccountAsync(ctx workflow.Context, input *auditmanager.GetOrganizationAdminAccountInput) *GetOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetOrganizationAdminAccount", input)
	return &GetOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) GetServicesInScope(ctx workflow.Context, input *auditmanager.GetServicesInScopeInput) (*auditmanager.GetServicesInScopeOutput, error) {
	var output auditmanager.GetServicesInScopeOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetServicesInScope", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetServicesInScopeAsync(ctx workflow.Context, input *auditmanager.GetServicesInScopeInput) *GetServicesInScopeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetServicesInScope", input)
	return &GetServicesInScopeFuture{Future: future}
}

func (a *stub) GetSettings(ctx workflow.Context, input *auditmanager.GetSettingsInput) (*auditmanager.GetSettingsOutput, error) {
	var output auditmanager.GetSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSettingsAsync(ctx workflow.Context, input *auditmanager.GetSettingsInput) *GetSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-GetSettings", input)
	return &GetSettingsFuture{Future: future}
}

func (a *stub) ListAssessmentFrameworks(ctx workflow.Context, input *auditmanager.ListAssessmentFrameworksInput) (*auditmanager.ListAssessmentFrameworksOutput, error) {
	var output auditmanager.ListAssessmentFrameworksOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessmentFrameworks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentFrameworksAsync(ctx workflow.Context, input *auditmanager.ListAssessmentFrameworksInput) *ListAssessmentFrameworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessmentFrameworks", input)
	return &ListAssessmentFrameworksFuture{Future: future}
}

func (a *stub) ListAssessmentReports(ctx workflow.Context, input *auditmanager.ListAssessmentReportsInput) (*auditmanager.ListAssessmentReportsOutput, error) {
	var output auditmanager.ListAssessmentReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessmentReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentReportsAsync(ctx workflow.Context, input *auditmanager.ListAssessmentReportsInput) *ListAssessmentReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessmentReports", input)
	return &ListAssessmentReportsFuture{Future: future}
}

func (a *stub) ListAssessments(ctx workflow.Context, input *auditmanager.ListAssessmentsInput) (*auditmanager.ListAssessmentsOutput, error) {
	var output auditmanager.ListAssessmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAssessmentsAsync(ctx workflow.Context, input *auditmanager.ListAssessmentsInput) *ListAssessmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListAssessments", input)
	return &ListAssessmentsFuture{Future: future}
}

func (a *stub) ListControls(ctx workflow.Context, input *auditmanager.ListControlsInput) (*auditmanager.ListControlsOutput, error) {
	var output auditmanager.ListControlsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListControls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListControlsAsync(ctx workflow.Context, input *auditmanager.ListControlsInput) *ListControlsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListControls", input)
	return &ListControlsFuture{Future: future}
}

func (a *stub) ListKeywordsForDataSource(ctx workflow.Context, input *auditmanager.ListKeywordsForDataSourceInput) (*auditmanager.ListKeywordsForDataSourceOutput, error) {
	var output auditmanager.ListKeywordsForDataSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListKeywordsForDataSource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListKeywordsForDataSourceAsync(ctx workflow.Context, input *auditmanager.ListKeywordsForDataSourceInput) *ListKeywordsForDataSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListKeywordsForDataSource", input)
	return &ListKeywordsForDataSourceFuture{Future: future}
}

func (a *stub) ListNotifications(ctx workflow.Context, input *auditmanager.ListNotificationsInput) (*auditmanager.ListNotificationsOutput, error) {
	var output auditmanager.ListNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListNotificationsAsync(ctx workflow.Context, input *auditmanager.ListNotificationsInput) *ListNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListNotifications", input)
	return &ListNotificationsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *auditmanager.ListTagsForResourceInput) (*auditmanager.ListTagsForResourceOutput, error) {
	var output auditmanager.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *auditmanager.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterAccount(ctx workflow.Context, input *auditmanager.RegisterAccountInput) (*auditmanager.RegisterAccountOutput, error) {
	var output auditmanager.RegisterAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-RegisterAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterAccountAsync(ctx workflow.Context, input *auditmanager.RegisterAccountInput) *RegisterAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-RegisterAccount", input)
	return &RegisterAccountFuture{Future: future}
}

func (a *stub) RegisterOrganizationAdminAccount(ctx workflow.Context, input *auditmanager.RegisterOrganizationAdminAccountInput) (*auditmanager.RegisterOrganizationAdminAccountOutput, error) {
	var output auditmanager.RegisterOrganizationAdminAccountOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-RegisterOrganizationAdminAccount", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterOrganizationAdminAccountAsync(ctx workflow.Context, input *auditmanager.RegisterOrganizationAdminAccountInput) *RegisterOrganizationAdminAccountFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-RegisterOrganizationAdminAccount", input)
	return &RegisterOrganizationAdminAccountFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *auditmanager.TagResourceInput) (*auditmanager.TagResourceOutput, error) {
	var output auditmanager.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *auditmanager.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *auditmanager.UntagResourceInput) (*auditmanager.UntagResourceOutput, error) {
	var output auditmanager.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *auditmanager.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateAssessment(ctx workflow.Context, input *auditmanager.UpdateAssessmentInput) (*auditmanager.UpdateAssessmentOutput, error) {
	var output auditmanager.UpdateAssessmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentAsync(ctx workflow.Context, input *auditmanager.UpdateAssessmentInput) *UpdateAssessmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessment", input)
	return &UpdateAssessmentFuture{Future: future}
}

func (a *stub) UpdateAssessmentControl(ctx workflow.Context, input *auditmanager.UpdateAssessmentControlInput) (*auditmanager.UpdateAssessmentControlOutput, error) {
	var output auditmanager.UpdateAssessmentControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentControlAsync(ctx workflow.Context, input *auditmanager.UpdateAssessmentControlInput) *UpdateAssessmentControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentControl", input)
	return &UpdateAssessmentControlFuture{Future: future}
}

func (a *stub) UpdateAssessmentControlSetStatus(ctx workflow.Context, input *auditmanager.UpdateAssessmentControlSetStatusInput) (*auditmanager.UpdateAssessmentControlSetStatusOutput, error) {
	var output auditmanager.UpdateAssessmentControlSetStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentControlSetStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentControlSetStatusAsync(ctx workflow.Context, input *auditmanager.UpdateAssessmentControlSetStatusInput) *UpdateAssessmentControlSetStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentControlSetStatus", input)
	return &UpdateAssessmentControlSetStatusFuture{Future: future}
}

func (a *stub) UpdateAssessmentFramework(ctx workflow.Context, input *auditmanager.UpdateAssessmentFrameworkInput) (*auditmanager.UpdateAssessmentFrameworkOutput, error) {
	var output auditmanager.UpdateAssessmentFrameworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentFramework", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentFrameworkAsync(ctx workflow.Context, input *auditmanager.UpdateAssessmentFrameworkInput) *UpdateAssessmentFrameworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentFramework", input)
	return &UpdateAssessmentFrameworkFuture{Future: future}
}

func (a *stub) UpdateAssessmentStatus(ctx workflow.Context, input *auditmanager.UpdateAssessmentStatusInput) (*auditmanager.UpdateAssessmentStatusOutput, error) {
	var output auditmanager.UpdateAssessmentStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAssessmentStatusAsync(ctx workflow.Context, input *auditmanager.UpdateAssessmentStatusInput) *UpdateAssessmentStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateAssessmentStatus", input)
	return &UpdateAssessmentStatusFuture{Future: future}
}

func (a *stub) UpdateControl(ctx workflow.Context, input *auditmanager.UpdateControlInput) (*auditmanager.UpdateControlOutput, error) {
	var output auditmanager.UpdateControlOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateControl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateControlAsync(ctx workflow.Context, input *auditmanager.UpdateControlInput) *UpdateControlFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateControl", input)
	return &UpdateControlFuture{Future: future}
}

func (a *stub) UpdateSettings(ctx workflow.Context, input *auditmanager.UpdateSettingsInput) (*auditmanager.UpdateSettingsOutput, error) {
	var output auditmanager.UpdateSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSettingsAsync(ctx workflow.Context, input *auditmanager.UpdateSettingsInput) *UpdateSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-UpdateSettings", input)
	return &UpdateSettingsFuture{Future: future}
}

func (a *stub) ValidateAssessmentReportIntegrity(ctx workflow.Context, input *auditmanager.ValidateAssessmentReportIntegrityInput) (*auditmanager.ValidateAssessmentReportIntegrityOutput, error) {
	var output auditmanager.ValidateAssessmentReportIntegrityOutput
	err := workflow.ExecuteActivity(ctx, "aws-auditmanager-ValidateAssessmentReportIntegrity", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ValidateAssessmentReportIntegrityAsync(ctx workflow.Context, input *auditmanager.ValidateAssessmentReportIntegrityInput) *ValidateAssessmentReportIntegrityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-auditmanager-ValidateAssessmentReportIntegrity", input)
	return &ValidateAssessmentReportIntegrityFuture{Future: future}
}
