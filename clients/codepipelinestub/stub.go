// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codepipelinestub

import (
	"github.com/aws/aws-sdk-go/service/codepipeline"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type CodePipelineAcknowledgeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineAcknowledgeJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineAcknowledgeThirdPartyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineAcknowledgeThirdPartyJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineCreateCustomActionTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineCreateCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineCreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineCreatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineDeleteCustomActionTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineDeleteCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineDeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineDeletePipelineFuture) Get(ctx workflow.Context) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineDeleteWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineDeleteWebhookFuture) Get(ctx workflow.Context) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineDeregisterWebhookWithThirdPartyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineDeregisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineDisableStageTransitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineDisableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineEnableStageTransitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineEnableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineGetJobDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineGetJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineGetPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineGetPipelineFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineGetPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineGetPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineGetPipelineStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineGetPipelineStateFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineGetThirdPartyJobDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineGetThirdPartyJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListActionExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListActionExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListActionTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListActionTypesFuture) Get(ctx workflow.Context) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListPipelineExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListPipelineExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListPipelinesFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListTagsForResourceFuture) Get(ctx workflow.Context) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineListWebhooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineListWebhooksFuture) Get(ctx workflow.Context) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePollForJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePollForJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePollForThirdPartyJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePollForThirdPartyJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutActionRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutActionRevisionFuture) Get(ctx workflow.Context) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutApprovalResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutApprovalResultFuture) Get(ctx workflow.Context) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutJobFailureResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutJobSuccessResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutThirdPartyJobFailureResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutThirdPartyJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutThirdPartyJobSuccessResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutThirdPartyJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelinePutWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelinePutWebhookFuture) Get(ctx workflow.Context) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineRegisterWebhookWithThirdPartyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineRegisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineRetryStageExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineRetryStageExecutionFuture) Get(ctx workflow.Context) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineStartPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineStartPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineStopPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineStopPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineTagResourceFuture) Get(ctx workflow.Context) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineUntagResourceFuture) Get(ctx workflow.Context) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodePipelineUpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CodePipelineUpdatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeJob(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) *CodePipelineAcknowledgeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeJob", input)
	return &CodePipelineAcknowledgeJobFuture{Future: future}
}

func (a *stub) AcknowledgeThirdPartyJob(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeThirdPartyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeThirdPartyJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) *CodePipelineAcknowledgeThirdPartyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeThirdPartyJob", input)
	return &CodePipelineAcknowledgeThirdPartyJobFuture{Future: future}
}

func (a *stub) CreateCustomActionType(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreateCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) *CodePipelineCreateCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreateCustomActionType", input)
	return &CodePipelineCreateCustomActionTypeFuture{Future: future}
}

func (a *stub) CreatePipeline(ctx workflow.Context, input *codepipeline.CreatePipelineInput) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePipelineAsync(ctx workflow.Context, input *codepipeline.CreatePipelineInput) *CodePipelineCreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreatePipeline", input)
	return &CodePipelineCreatePipelineFuture{Future: future}
}

func (a *stub) DeleteCustomActionType(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) *CodePipelineDeleteCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteCustomActionType", input)
	return &CodePipelineDeleteCustomActionTypeFuture{Future: future}
}

func (a *stub) DeletePipeline(ctx workflow.Context, input *codepipeline.DeletePipelineInput) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePipelineAsync(ctx workflow.Context, input *codepipeline.DeletePipelineInput) *CodePipelineDeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeletePipeline", input)
	return &CodePipelineDeletePipelineFuture{Future: future}
}

func (a *stub) DeleteWebhook(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebhookAsync(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) *CodePipelineDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteWebhook", input)
	return &CodePipelineDeleteWebhookFuture{Future: future}
}

func (a *stub) DeregisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeregisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) *CodePipelineDeregisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeregisterWebhookWithThirdParty", input)
	return &CodePipelineDeregisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *stub) DisableStageTransition(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DisableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableStageTransitionAsync(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) *CodePipelineDisableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DisableStageTransition", input)
	return &CodePipelineDisableStageTransitionFuture{Future: future}
}

func (a *stub) EnableStageTransition(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-EnableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableStageTransitionAsync(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) *CodePipelineEnableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-EnableStageTransition", input)
	return &CodePipelineEnableStageTransitionFuture{Future: future}
}

func (a *stub) GetJobDetails(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) *CodePipelineGetJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetJobDetails", input)
	return &CodePipelineGetJobDetailsFuture{Future: future}
}

func (a *stub) GetPipeline(ctx workflow.Context, input *codepipeline.GetPipelineInput) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineAsync(ctx workflow.Context, input *codepipeline.GetPipelineInput) *CodePipelineGetPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipeline", input)
	return &CodePipelineGetPipelineFuture{Future: future}
}

func (a *stub) GetPipelineExecution(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) *CodePipelineGetPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineExecution", input)
	return &CodePipelineGetPipelineExecutionFuture{Future: future}
}

func (a *stub) GetPipelineState(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineStateAsync(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) *CodePipelineGetPipelineStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineState", input)
	return &CodePipelineGetPipelineStateFuture{Future: future}
}

func (a *stub) GetThirdPartyJobDetails(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetThirdPartyJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetThirdPartyJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) *CodePipelineGetThirdPartyJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetThirdPartyJobDetails", input)
	return &CodePipelineGetThirdPartyJobDetailsFuture{Future: future}
}

func (a *stub) ListActionExecutions(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActionExecutionsAsync(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) *CodePipelineListActionExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionExecutions", input)
	return &CodePipelineListActionExecutionsFuture{Future: future}
}

func (a *stub) ListActionTypes(ctx workflow.Context, input *codepipeline.ListActionTypesInput) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActionTypesAsync(ctx workflow.Context, input *codepipeline.ListActionTypesInput) *CodePipelineListActionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionTypes", input)
	return &CodePipelineListActionTypesFuture{Future: future}
}

func (a *stub) ListPipelineExecutions(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelineExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelineExecutionsAsync(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) *CodePipelineListPipelineExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelineExecutions", input)
	return &CodePipelineListPipelineExecutionsFuture{Future: future}
}

func (a *stub) ListPipelines(ctx workflow.Context, input *codepipeline.ListPipelinesInput) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelinesAsync(ctx workflow.Context, input *codepipeline.ListPipelinesInput) *CodePipelineListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelines", input)
	return &CodePipelineListPipelinesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) *CodePipelineListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListTagsForResource", input)
	return &CodePipelineListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebhooks(ctx workflow.Context, input *codepipeline.ListWebhooksInput) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListWebhooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebhooksAsync(ctx workflow.Context, input *codepipeline.ListWebhooksInput) *CodePipelineListWebhooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListWebhooks", input)
	return &CodePipelineListWebhooksFuture{Future: future}
}

func (a *stub) PollForJobs(ctx workflow.Context, input *codepipeline.PollForJobsInput) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForJobsAsync(ctx workflow.Context, input *codepipeline.PollForJobsInput) *CodePipelinePollForJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForJobs", input)
	return &CodePipelinePollForJobsFuture{Future: future}
}

func (a *stub) PollForThirdPartyJobs(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForThirdPartyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForThirdPartyJobsAsync(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) *CodePipelinePollForThirdPartyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForThirdPartyJobs", input)
	return &CodePipelinePollForThirdPartyJobsFuture{Future: future}
}

func (a *stub) PutActionRevision(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutActionRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutActionRevisionAsync(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) *CodePipelinePutActionRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutActionRevision", input)
	return &CodePipelinePutActionRevisionFuture{Future: future}
}

func (a *stub) PutApprovalResult(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutApprovalResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutApprovalResultAsync(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) *CodePipelinePutApprovalResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutApprovalResult", input)
	return &CodePipelinePutApprovalResultFuture{Future: future}
}

func (a *stub) PutJobFailureResult(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) *CodePipelinePutJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobFailureResult", input)
	return &CodePipelinePutJobFailureResultFuture{Future: future}
}

func (a *stub) PutJobSuccessResult(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) *CodePipelinePutJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobSuccessResult", input)
	return &CodePipelinePutJobSuccessResultFuture{Future: future}
}

func (a *stub) PutThirdPartyJobFailureResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutThirdPartyJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) *CodePipelinePutThirdPartyJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobFailureResult", input)
	return &CodePipelinePutThirdPartyJobFailureResultFuture{Future: future}
}

func (a *stub) PutThirdPartyJobSuccessResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutThirdPartyJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) *CodePipelinePutThirdPartyJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobSuccessResult", input)
	return &CodePipelinePutThirdPartyJobSuccessResultFuture{Future: future}
}

func (a *stub) PutWebhook(ctx workflow.Context, input *codepipeline.PutWebhookInput) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutWebhookAsync(ctx workflow.Context, input *codepipeline.PutWebhookInput) *CodePipelinePutWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutWebhook", input)
	return &CodePipelinePutWebhookFuture{Future: future}
}

func (a *stub) RegisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-RegisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) *CodePipelineRegisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-RegisterWebhookWithThirdParty", input)
	return &CodePipelineRegisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *stub) RetryStageExecution(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-RetryStageExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryStageExecutionAsync(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) *CodePipelineRetryStageExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-RetryStageExecution", input)
	return &CodePipelineRetryStageExecutionFuture{Future: future}
}

func (a *stub) StartPipelineExecution(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-StartPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) *CodePipelineStartPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-StartPipelineExecution", input)
	return &CodePipelineStartPipelineExecutionFuture{Future: future}
}

func (a *stub) StopPipelineExecution(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-StopPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) *CodePipelineStopPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-StopPipelineExecution", input)
	return &CodePipelineStopPipelineExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codepipeline.TagResourceInput) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codepipeline.TagResourceInput) *CodePipelineTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-TagResource", input)
	return &CodePipelineTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codepipeline.UntagResourceInput) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codepipeline.UntagResourceInput) *CodePipelineUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-UntagResource", input)
	return &CodePipelineUntagResourceFuture{Future: future}
}

func (a *stub) UpdatePipeline(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineAsync(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) *CodePipelineUpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-UpdatePipeline", input)
	return &CodePipelineUpdatePipelineFuture{Future: future}
}
