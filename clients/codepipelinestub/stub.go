// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codepipelinestub

import (
	"github.com/aws/aws-sdk-go/service/codepipeline"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcknowledgeJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcknowledgeJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcknowledgeThirdPartyJobFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcknowledgeThirdPartyJobFuture) Get(ctx workflow.Context) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCustomActionTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCustomActionTypeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCustomActionTypeFuture) Get(ctx workflow.Context) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePipelineFuture) Get(ctx workflow.Context) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteWebhookFuture) Get(ctx workflow.Context) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterWebhookWithThirdPartyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableStageTransitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableStageTransitionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableStageTransitionFuture) Get(ctx workflow.Context) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetJobDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPipelineFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPipelineStateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPipelineStateFuture) Get(ctx workflow.Context) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetThirdPartyJobDetailsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetThirdPartyJobDetailsFuture) Get(ctx workflow.Context) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListActionExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListActionExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListActionTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListActionTypesFuture) Get(ctx workflow.Context) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPipelineExecutionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPipelineExecutionsFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPipelinesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPipelinesFuture) Get(ctx workflow.Context) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListWebhooksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListWebhooksFuture) Get(ctx workflow.Context) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollForJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollForJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PollForThirdPartyJobsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PollForThirdPartyJobsFuture) Get(ctx workflow.Context) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutActionRevisionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutActionRevisionFuture) Get(ctx workflow.Context) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutApprovalResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutApprovalResultFuture) Get(ctx workflow.Context) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutJobFailureResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutJobSuccessResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutThirdPartyJobFailureResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutThirdPartyJobFailureResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutThirdPartyJobSuccessResultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutThirdPartyJobSuccessResultFuture) Get(ctx workflow.Context) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutWebhookFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutWebhookFuture) Get(ctx workflow.Context) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterWebhookWithThirdPartyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterWebhookWithThirdPartyFuture) Get(ctx workflow.Context) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RetryStageExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RetryStageExecutionFuture) Get(ctx workflow.Context) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopPipelineExecutionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopPipelineExecutionFuture) Get(ctx workflow.Context) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePipelineFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePipelineFuture) Get(ctx workflow.Context) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeJob(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) (*codepipeline.AcknowledgeJobOutput, error) {
	var output codepipeline.AcknowledgeJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeJobInput) *AcknowledgeJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeJob", input)
	return &AcknowledgeJobFuture{Future: future}
}

func (a *stub) AcknowledgeThirdPartyJob(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {
	var output codepipeline.AcknowledgeThirdPartyJobOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeThirdPartyJob", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcknowledgeThirdPartyJobAsync(ctx workflow.Context, input *codepipeline.AcknowledgeThirdPartyJobInput) *AcknowledgeThirdPartyJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-AcknowledgeThirdPartyJob", input)
	return &AcknowledgeThirdPartyJobFuture{Future: future}
}

func (a *stub) CreateCustomActionType(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) (*codepipeline.CreateCustomActionTypeOutput, error) {
	var output codepipeline.CreateCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreateCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.CreateCustomActionTypeInput) *CreateCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreateCustomActionType", input)
	return &CreateCustomActionTypeFuture{Future: future}
}

func (a *stub) CreatePipeline(ctx workflow.Context, input *codepipeline.CreatePipelineInput) (*codepipeline.CreatePipelineOutput, error) {
	var output codepipeline.CreatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePipelineAsync(ctx workflow.Context, input *codepipeline.CreatePipelineInput) *CreatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-CreatePipeline", input)
	return &CreatePipelineFuture{Future: future}
}

func (a *stub) DeleteCustomActionType(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) (*codepipeline.DeleteCustomActionTypeOutput, error) {
	var output codepipeline.DeleteCustomActionTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteCustomActionType", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomActionTypeAsync(ctx workflow.Context, input *codepipeline.DeleteCustomActionTypeInput) *DeleteCustomActionTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteCustomActionType", input)
	return &DeleteCustomActionTypeFuture{Future: future}
}

func (a *stub) DeletePipeline(ctx workflow.Context, input *codepipeline.DeletePipelineInput) (*codepipeline.DeletePipelineOutput, error) {
	var output codepipeline.DeletePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeletePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePipelineAsync(ctx workflow.Context, input *codepipeline.DeletePipelineInput) *DeletePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeletePipeline", input)
	return &DeletePipelineFuture{Future: future}
}

func (a *stub) DeleteWebhook(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) (*codepipeline.DeleteWebhookOutput, error) {
	var output codepipeline.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteWebhookAsync(ctx workflow.Context, input *codepipeline.DeleteWebhookInput) *DeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeleteWebhook", input)
	return &DeleteWebhookFuture{Future: future}
}

func (a *stub) DeregisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.DeregisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeregisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.DeregisterWebhookWithThirdPartyInput) *DeregisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DeregisterWebhookWithThirdParty", input)
	return &DeregisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *stub) DisableStageTransition(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) (*codepipeline.DisableStageTransitionOutput, error) {
	var output codepipeline.DisableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-DisableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableStageTransitionAsync(ctx workflow.Context, input *codepipeline.DisableStageTransitionInput) *DisableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-DisableStageTransition", input)
	return &DisableStageTransitionFuture{Future: future}
}

func (a *stub) EnableStageTransition(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) (*codepipeline.EnableStageTransitionOutput, error) {
	var output codepipeline.EnableStageTransitionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-EnableStageTransition", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableStageTransitionAsync(ctx workflow.Context, input *codepipeline.EnableStageTransitionInput) *EnableStageTransitionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-EnableStageTransition", input)
	return &EnableStageTransitionFuture{Future: future}
}

func (a *stub) GetJobDetails(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) (*codepipeline.GetJobDetailsOutput, error) {
	var output codepipeline.GetJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetJobDetailsInput) *GetJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetJobDetails", input)
	return &GetJobDetailsFuture{Future: future}
}

func (a *stub) GetPipeline(ctx workflow.Context, input *codepipeline.GetPipelineInput) (*codepipeline.GetPipelineOutput, error) {
	var output codepipeline.GetPipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineAsync(ctx workflow.Context, input *codepipeline.GetPipelineInput) *GetPipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipeline", input)
	return &GetPipelineFuture{Future: future}
}

func (a *stub) GetPipelineExecution(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) (*codepipeline.GetPipelineExecutionOutput, error) {
	var output codepipeline.GetPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.GetPipelineExecutionInput) *GetPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineExecution", input)
	return &GetPipelineExecutionFuture{Future: future}
}

func (a *stub) GetPipelineState(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) (*codepipeline.GetPipelineStateOutput, error) {
	var output codepipeline.GetPipelineStateOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineState", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPipelineStateAsync(ctx workflow.Context, input *codepipeline.GetPipelineStateInput) *GetPipelineStateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetPipelineState", input)
	return &GetPipelineStateFuture{Future: future}
}

func (a *stub) GetThirdPartyJobDetails(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {
	var output codepipeline.GetThirdPartyJobDetailsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetThirdPartyJobDetails", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetThirdPartyJobDetailsAsync(ctx workflow.Context, input *codepipeline.GetThirdPartyJobDetailsInput) *GetThirdPartyJobDetailsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-GetThirdPartyJobDetails", input)
	return &GetThirdPartyJobDetailsFuture{Future: future}
}

func (a *stub) ListActionExecutions(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) (*codepipeline.ListActionExecutionsOutput, error) {
	var output codepipeline.ListActionExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActionExecutionsAsync(ctx workflow.Context, input *codepipeline.ListActionExecutionsInput) *ListActionExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionExecutions", input)
	return &ListActionExecutionsFuture{Future: future}
}

func (a *stub) ListActionTypes(ctx workflow.Context, input *codepipeline.ListActionTypesInput) (*codepipeline.ListActionTypesOutput, error) {
	var output codepipeline.ListActionTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListActionTypesAsync(ctx workflow.Context, input *codepipeline.ListActionTypesInput) *ListActionTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListActionTypes", input)
	return &ListActionTypesFuture{Future: future}
}

func (a *stub) ListPipelineExecutions(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) (*codepipeline.ListPipelineExecutionsOutput, error) {
	var output codepipeline.ListPipelineExecutionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelineExecutions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelineExecutionsAsync(ctx workflow.Context, input *codepipeline.ListPipelineExecutionsInput) *ListPipelineExecutionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelineExecutions", input)
	return &ListPipelineExecutionsFuture{Future: future}
}

func (a *stub) ListPipelines(ctx workflow.Context, input *codepipeline.ListPipelinesInput) (*codepipeline.ListPipelinesOutput, error) {
	var output codepipeline.ListPipelinesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelines", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPipelinesAsync(ctx workflow.Context, input *codepipeline.ListPipelinesInput) *ListPipelinesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListPipelines", input)
	return &ListPipelinesFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) (*codepipeline.ListTagsForResourceOutput, error) {
	var output codepipeline.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codepipeline.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) ListWebhooks(ctx workflow.Context, input *codepipeline.ListWebhooksInput) (*codepipeline.ListWebhooksOutput, error) {
	var output codepipeline.ListWebhooksOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListWebhooks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListWebhooksAsync(ctx workflow.Context, input *codepipeline.ListWebhooksInput) *ListWebhooksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-ListWebhooks", input)
	return &ListWebhooksFuture{Future: future}
}

func (a *stub) PollForJobs(ctx workflow.Context, input *codepipeline.PollForJobsInput) (*codepipeline.PollForJobsOutput, error) {
	var output codepipeline.PollForJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForJobsAsync(ctx workflow.Context, input *codepipeline.PollForJobsInput) *PollForJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForJobs", input)
	return &PollForJobsFuture{Future: future}
}

func (a *stub) PollForThirdPartyJobs(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) (*codepipeline.PollForThirdPartyJobsOutput, error) {
	var output codepipeline.PollForThirdPartyJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForThirdPartyJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PollForThirdPartyJobsAsync(ctx workflow.Context, input *codepipeline.PollForThirdPartyJobsInput) *PollForThirdPartyJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PollForThirdPartyJobs", input)
	return &PollForThirdPartyJobsFuture{Future: future}
}

func (a *stub) PutActionRevision(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) (*codepipeline.PutActionRevisionOutput, error) {
	var output codepipeline.PutActionRevisionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutActionRevision", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutActionRevisionAsync(ctx workflow.Context, input *codepipeline.PutActionRevisionInput) *PutActionRevisionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutActionRevision", input)
	return &PutActionRevisionFuture{Future: future}
}

func (a *stub) PutApprovalResult(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) (*codepipeline.PutApprovalResultOutput, error) {
	var output codepipeline.PutApprovalResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutApprovalResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutApprovalResultAsync(ctx workflow.Context, input *codepipeline.PutApprovalResultInput) *PutApprovalResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutApprovalResult", input)
	return &PutApprovalResultFuture{Future: future}
}

func (a *stub) PutJobFailureResult(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) (*codepipeline.PutJobFailureResultOutput, error) {
	var output codepipeline.PutJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutJobFailureResultInput) *PutJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobFailureResult", input)
	return &PutJobFailureResultFuture{Future: future}
}

func (a *stub) PutJobSuccessResult(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) (*codepipeline.PutJobSuccessResultOutput, error) {
	var output codepipeline.PutJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutJobSuccessResultInput) *PutJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutJobSuccessResult", input)
	return &PutJobSuccessResultFuture{Future: future}
}

func (a *stub) PutThirdPartyJobFailureResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {
	var output codepipeline.PutThirdPartyJobFailureResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobFailureResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutThirdPartyJobFailureResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobFailureResultInput) *PutThirdPartyJobFailureResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobFailureResult", input)
	return &PutThirdPartyJobFailureResultFuture{Future: future}
}

func (a *stub) PutThirdPartyJobSuccessResult(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {
	var output codepipeline.PutThirdPartyJobSuccessResultOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobSuccessResult", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutThirdPartyJobSuccessResultAsync(ctx workflow.Context, input *codepipeline.PutThirdPartyJobSuccessResultInput) *PutThirdPartyJobSuccessResultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutThirdPartyJobSuccessResult", input)
	return &PutThirdPartyJobSuccessResultFuture{Future: future}
}

func (a *stub) PutWebhook(ctx workflow.Context, input *codepipeline.PutWebhookInput) (*codepipeline.PutWebhookOutput, error) {
	var output codepipeline.PutWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutWebhookAsync(ctx workflow.Context, input *codepipeline.PutWebhookInput) *PutWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-PutWebhook", input)
	return &PutWebhookFuture{Future: future}
}

func (a *stub) RegisterWebhookWithThirdParty(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {
	var output codepipeline.RegisterWebhookWithThirdPartyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-RegisterWebhookWithThirdParty", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterWebhookWithThirdPartyAsync(ctx workflow.Context, input *codepipeline.RegisterWebhookWithThirdPartyInput) *RegisterWebhookWithThirdPartyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-RegisterWebhookWithThirdParty", input)
	return &RegisterWebhookWithThirdPartyFuture{Future: future}
}

func (a *stub) RetryStageExecution(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) (*codepipeline.RetryStageExecutionOutput, error) {
	var output codepipeline.RetryStageExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-RetryStageExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RetryStageExecutionAsync(ctx workflow.Context, input *codepipeline.RetryStageExecutionInput) *RetryStageExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-RetryStageExecution", input)
	return &RetryStageExecutionFuture{Future: future}
}

func (a *stub) StartPipelineExecution(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) (*codepipeline.StartPipelineExecutionOutput, error) {
	var output codepipeline.StartPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-StartPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StartPipelineExecutionInput) *StartPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-StartPipelineExecution", input)
	return &StartPipelineExecutionFuture{Future: future}
}

func (a *stub) StopPipelineExecution(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) (*codepipeline.StopPipelineExecutionOutput, error) {
	var output codepipeline.StopPipelineExecutionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-StopPipelineExecution", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopPipelineExecutionAsync(ctx workflow.Context, input *codepipeline.StopPipelineExecutionInput) *StopPipelineExecutionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-StopPipelineExecution", input)
	return &StopPipelineExecutionFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codepipeline.TagResourceInput) (*codepipeline.TagResourceOutput, error) {
	var output codepipeline.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codepipeline.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codepipeline.UntagResourceInput) (*codepipeline.UntagResourceOutput, error) {
	var output codepipeline.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codepipeline.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdatePipeline(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) (*codepipeline.UpdatePipelineOutput, error) {
	var output codepipeline.UpdatePipelineOutput
	err := workflow.ExecuteActivity(ctx, "aws-codepipeline-UpdatePipeline", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePipelineAsync(ctx workflow.Context, input *codepipeline.UpdatePipelineInput) *UpdatePipelineFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codepipeline-UpdatePipeline", input)
	return &UpdatePipelineFuture{Future: future}
}
