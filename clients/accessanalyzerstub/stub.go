// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package accessanalyzerstub

import (
	"github.com/aws/aws-sdk-go/service/accessanalyzer"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ApplyArchiveRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplyArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.ApplyArchiveRuleOutput, error) {
	var output accessanalyzer.ApplyArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAnalyzerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.CreateAnalyzerOutput, error) {
	var output accessanalyzer.CreateAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateArchiveRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	var output accessanalyzer.CreateArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteAnalyzerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	var output accessanalyzer.DeleteAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteArchiveRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	var output accessanalyzer.DeleteArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAnalyzedResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAnalyzedResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	var output accessanalyzer.GetAnalyzedResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAnalyzerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAnalyzerFuture) Get(ctx workflow.Context) (*accessanalyzer.GetAnalyzerOutput, error) {
	var output accessanalyzer.GetAnalyzerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetArchiveRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.GetArchiveRuleOutput, error) {
	var output accessanalyzer.GetArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFindingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFindingFuture) Get(ctx workflow.Context) (*accessanalyzer.GetFindingOutput, error) {
	var output accessanalyzer.GetFindingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAnalyzedResourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAnalyzedResourcesFuture) Get(ctx workflow.Context) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	var output accessanalyzer.ListAnalyzedResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListAnalyzersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListAnalyzersFuture) Get(ctx workflow.Context) (*accessanalyzer.ListAnalyzersOutput, error) {
	var output accessanalyzer.ListAnalyzersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListArchiveRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListArchiveRulesFuture) Get(ctx workflow.Context) (*accessanalyzer.ListArchiveRulesOutput, error) {
	var output accessanalyzer.ListArchiveRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFindingsFuture) Get(ctx workflow.Context) (*accessanalyzer.ListFindingsOutput, error) {
	var output accessanalyzer.ListFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.ListTagsForResourceOutput, error) {
	var output accessanalyzer.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartResourceScanFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartResourceScanFuture) Get(ctx workflow.Context) (*accessanalyzer.StartResourceScanOutput, error) {
	var output accessanalyzer.StartResourceScanOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.TagResourceOutput, error) {
	var output accessanalyzer.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*accessanalyzer.UntagResourceOutput, error) {
	var output accessanalyzer.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateArchiveRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateArchiveRuleFuture) Get(ctx workflow.Context) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	var output accessanalyzer.UpdateArchiveRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateFindingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateFindingsFuture) Get(ctx workflow.Context) (*accessanalyzer.UpdateFindingsOutput, error) {
	var output accessanalyzer.UpdateFindingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyArchiveRule(ctx workflow.Context, input *accessanalyzer.ApplyArchiveRuleInput) (*accessanalyzer.ApplyArchiveRuleOutput, error) {
	var output accessanalyzer.ApplyArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ApplyArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplyArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.ApplyArchiveRuleInput) *ApplyArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ApplyArchiveRule", input)
	return &ApplyArchiveRuleFuture{Future: future}
}

func (a *stub) CreateAnalyzer(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) (*accessanalyzer.CreateAnalyzerOutput, error) {
	var output accessanalyzer.CreateAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-CreateAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.CreateAnalyzerInput) *CreateAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-CreateAnalyzer", input)
	return &CreateAnalyzerFuture{Future: future}
}

func (a *stub) CreateArchiveRule(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	var output accessanalyzer.CreateArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-CreateArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.CreateArchiveRuleInput) *CreateArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-CreateArchiveRule", input)
	return &CreateArchiveRuleFuture{Future: future}
}

func (a *stub) DeleteAnalyzer(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	var output accessanalyzer.DeleteAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-DeleteAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.DeleteAnalyzerInput) *DeleteAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-DeleteAnalyzer", input)
	return &DeleteAnalyzerFuture{Future: future}
}

func (a *stub) DeleteArchiveRule(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	var output accessanalyzer.DeleteArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-DeleteArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.DeleteArchiveRuleInput) *DeleteArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-DeleteArchiveRule", input)
	return &DeleteArchiveRuleFuture{Future: future}
}

func (a *stub) GetAnalyzedResource(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	var output accessanalyzer.GetAnalyzedResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetAnalyzedResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAnalyzedResourceAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzedResourceInput) *GetAnalyzedResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetAnalyzedResource", input)
	return &GetAnalyzedResourceFuture{Future: future}
}

func (a *stub) GetAnalyzer(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) (*accessanalyzer.GetAnalyzerOutput, error) {
	var output accessanalyzer.GetAnalyzerOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetAnalyzer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAnalyzerAsync(ctx workflow.Context, input *accessanalyzer.GetAnalyzerInput) *GetAnalyzerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetAnalyzer", input)
	return &GetAnalyzerFuture{Future: future}
}

func (a *stub) GetArchiveRule(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) (*accessanalyzer.GetArchiveRuleOutput, error) {
	var output accessanalyzer.GetArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.GetArchiveRuleInput) *GetArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetArchiveRule", input)
	return &GetArchiveRuleFuture{Future: future}
}

func (a *stub) GetFinding(ctx workflow.Context, input *accessanalyzer.GetFindingInput) (*accessanalyzer.GetFindingOutput, error) {
	var output accessanalyzer.GetFindingOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetFinding", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFindingAsync(ctx workflow.Context, input *accessanalyzer.GetFindingInput) *GetFindingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-GetFinding", input)
	return &GetFindingFuture{Future: future}
}

func (a *stub) ListAnalyzedResources(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	var output accessanalyzer.ListAnalyzedResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListAnalyzedResources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAnalyzedResourcesAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzedResourcesInput) *ListAnalyzedResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListAnalyzedResources", input)
	return &ListAnalyzedResourcesFuture{Future: future}
}

func (a *stub) ListAnalyzers(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) (*accessanalyzer.ListAnalyzersOutput, error) {
	var output accessanalyzer.ListAnalyzersOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListAnalyzers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListAnalyzersAsync(ctx workflow.Context, input *accessanalyzer.ListAnalyzersInput) *ListAnalyzersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListAnalyzers", input)
	return &ListAnalyzersFuture{Future: future}
}

func (a *stub) ListArchiveRules(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) (*accessanalyzer.ListArchiveRulesOutput, error) {
	var output accessanalyzer.ListArchiveRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListArchiveRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListArchiveRulesAsync(ctx workflow.Context, input *accessanalyzer.ListArchiveRulesInput) *ListArchiveRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListArchiveRules", input)
	return &ListArchiveRulesFuture{Future: future}
}

func (a *stub) ListFindings(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) (*accessanalyzer.ListFindingsOutput, error) {
	var output accessanalyzer.ListFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFindingsAsync(ctx workflow.Context, input *accessanalyzer.ListFindingsInput) *ListFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListFindings", input)
	return &ListFindingsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) (*accessanalyzer.ListTagsForResourceOutput, error) {
	var output accessanalyzer.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *accessanalyzer.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) StartResourceScan(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) (*accessanalyzer.StartResourceScanOutput, error) {
	var output accessanalyzer.StartResourceScanOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-StartResourceScan", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartResourceScanAsync(ctx workflow.Context, input *accessanalyzer.StartResourceScanInput) *StartResourceScanFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-StartResourceScan", input)
	return &StartResourceScanFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *accessanalyzer.TagResourceInput) (*accessanalyzer.TagResourceOutput, error) {
	var output accessanalyzer.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *accessanalyzer.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) (*accessanalyzer.UntagResourceOutput, error) {
	var output accessanalyzer.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *accessanalyzer.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateArchiveRule(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	var output accessanalyzer.UpdateArchiveRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UpdateArchiveRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateArchiveRuleAsync(ctx workflow.Context, input *accessanalyzer.UpdateArchiveRuleInput) *UpdateArchiveRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UpdateArchiveRule", input)
	return &UpdateArchiveRuleFuture{Future: future}
}

func (a *stub) UpdateFindings(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) (*accessanalyzer.UpdateFindingsOutput, error) {
	var output accessanalyzer.UpdateFindingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UpdateFindings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateFindingsAsync(ctx workflow.Context, input *accessanalyzer.UpdateFindingsInput) *UpdateFindingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-accessanalyzer-UpdateFindings", input)
	return &UpdateFindingsFuture{Future: future}
}
