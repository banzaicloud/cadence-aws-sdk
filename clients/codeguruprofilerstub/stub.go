// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package codeguruprofilerstub

import (
	"github.com/aws/aws-sdk-go/service/codeguruprofiler"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AddNotificationChannelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddNotificationChannelsFuture) Get(ctx workflow.Context) (*codeguruprofiler.AddNotificationChannelsOutput, error) {
	var output codeguruprofiler.AddNotificationChannelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BatchGetFrameMetricDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BatchGetFrameMetricDataFuture) Get(ctx workflow.Context) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error) {
	var output codeguruprofiler.BatchGetFrameMetricDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfigureAgentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfigureAgentFuture) Get(ctx workflow.Context) (*codeguruprofiler.ConfigureAgentOutput, error) {
	var output codeguruprofiler.ConfigureAgentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProfilingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProfilingGroupFuture) Get(ctx workflow.Context) (*codeguruprofiler.CreateProfilingGroupOutput, error) {
	var output codeguruprofiler.CreateProfilingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProfilingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProfilingGroupFuture) Get(ctx workflow.Context) (*codeguruprofiler.DeleteProfilingGroupOutput, error) {
	var output codeguruprofiler.DeleteProfilingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProfilingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProfilingGroupFuture) Get(ctx workflow.Context) (*codeguruprofiler.DescribeProfilingGroupOutput, error) {
	var output codeguruprofiler.DescribeProfilingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetFindingsReportAccountSummaryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetFindingsReportAccountSummaryFuture) Get(ctx workflow.Context) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error) {
	var output codeguruprofiler.GetFindingsReportAccountSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetNotificationConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetNotificationConfigurationFuture) Get(ctx workflow.Context) (*codeguruprofiler.GetNotificationConfigurationOutput, error) {
	var output codeguruprofiler.GetNotificationConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPolicyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPolicyFuture) Get(ctx workflow.Context) (*codeguruprofiler.GetPolicyOutput, error) {
	var output codeguruprofiler.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetProfileFuture) Get(ctx workflow.Context) (*codeguruprofiler.GetProfileOutput, error) {
	var output codeguruprofiler.GetProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetRecommendationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetRecommendationsFuture) Get(ctx workflow.Context) (*codeguruprofiler.GetRecommendationsOutput, error) {
	var output codeguruprofiler.GetRecommendationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListFindingsReportsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListFindingsReportsFuture) Get(ctx workflow.Context) (*codeguruprofiler.ListFindingsReportsOutput, error) {
	var output codeguruprofiler.ListFindingsReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProfileTimesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProfileTimesFuture) Get(ctx workflow.Context) (*codeguruprofiler.ListProfileTimesOutput, error) {
	var output codeguruprofiler.ListProfileTimesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProfilingGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProfilingGroupsFuture) Get(ctx workflow.Context) (*codeguruprofiler.ListProfilingGroupsOutput, error) {
	var output codeguruprofiler.ListProfilingGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*codeguruprofiler.ListTagsForResourceOutput, error) {
	var output codeguruprofiler.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PostAgentProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PostAgentProfileFuture) Get(ctx workflow.Context) (*codeguruprofiler.PostAgentProfileOutput, error) {
	var output codeguruprofiler.PostAgentProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PutPermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PutPermissionFuture) Get(ctx workflow.Context) (*codeguruprofiler.PutPermissionOutput, error) {
	var output codeguruprofiler.PutPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveNotificationChannelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveNotificationChannelFuture) Get(ctx workflow.Context) (*codeguruprofiler.RemoveNotificationChannelOutput, error) {
	var output codeguruprofiler.RemoveNotificationChannelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemovePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemovePermissionFuture) Get(ctx workflow.Context) (*codeguruprofiler.RemovePermissionOutput, error) {
	var output codeguruprofiler.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SubmitFeedbackFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SubmitFeedbackFuture) Get(ctx workflow.Context) (*codeguruprofiler.SubmitFeedbackOutput, error) {
	var output codeguruprofiler.SubmitFeedbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*codeguruprofiler.TagResourceOutput, error) {
	var output codeguruprofiler.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*codeguruprofiler.UntagResourceOutput, error) {
	var output codeguruprofiler.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProfilingGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProfilingGroupFuture) Get(ctx workflow.Context) (*codeguruprofiler.UpdateProfilingGroupOutput, error) {
	var output codeguruprofiler.UpdateProfilingGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AddNotificationChannels(ctx workflow.Context, input *codeguruprofiler.AddNotificationChannelsInput) (*codeguruprofiler.AddNotificationChannelsOutput, error) {
	var output codeguruprofiler.AddNotificationChannelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-AddNotificationChannels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddNotificationChannelsAsync(ctx workflow.Context, input *codeguruprofiler.AddNotificationChannelsInput) *AddNotificationChannelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-AddNotificationChannels", input)
	return &AddNotificationChannelsFuture{Future: future}
}

func (a *stub) BatchGetFrameMetricData(ctx workflow.Context, input *codeguruprofiler.BatchGetFrameMetricDataInput) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error) {
	var output codeguruprofiler.BatchGetFrameMetricDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-BatchGetFrameMetricData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BatchGetFrameMetricDataAsync(ctx workflow.Context, input *codeguruprofiler.BatchGetFrameMetricDataInput) *BatchGetFrameMetricDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-BatchGetFrameMetricData", input)
	return &BatchGetFrameMetricDataFuture{Future: future}
}

func (a *stub) ConfigureAgent(ctx workflow.Context, input *codeguruprofiler.ConfigureAgentInput) (*codeguruprofiler.ConfigureAgentOutput, error) {
	var output codeguruprofiler.ConfigureAgentOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ConfigureAgent", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfigureAgentAsync(ctx workflow.Context, input *codeguruprofiler.ConfigureAgentInput) *ConfigureAgentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ConfigureAgent", input)
	return &ConfigureAgentFuture{Future: future}
}

func (a *stub) CreateProfilingGroup(ctx workflow.Context, input *codeguruprofiler.CreateProfilingGroupInput) (*codeguruprofiler.CreateProfilingGroupOutput, error) {
	var output codeguruprofiler.CreateProfilingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-CreateProfilingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProfilingGroupAsync(ctx workflow.Context, input *codeguruprofiler.CreateProfilingGroupInput) *CreateProfilingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-CreateProfilingGroup", input)
	return &CreateProfilingGroupFuture{Future: future}
}

func (a *stub) DeleteProfilingGroup(ctx workflow.Context, input *codeguruprofiler.DeleteProfilingGroupInput) (*codeguruprofiler.DeleteProfilingGroupOutput, error) {
	var output codeguruprofiler.DeleteProfilingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-DeleteProfilingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProfilingGroupAsync(ctx workflow.Context, input *codeguruprofiler.DeleteProfilingGroupInput) *DeleteProfilingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-DeleteProfilingGroup", input)
	return &DeleteProfilingGroupFuture{Future: future}
}

func (a *stub) DescribeProfilingGroup(ctx workflow.Context, input *codeguruprofiler.DescribeProfilingGroupInput) (*codeguruprofiler.DescribeProfilingGroupOutput, error) {
	var output codeguruprofiler.DescribeProfilingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-DescribeProfilingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProfilingGroupAsync(ctx workflow.Context, input *codeguruprofiler.DescribeProfilingGroupInput) *DescribeProfilingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-DescribeProfilingGroup", input)
	return &DescribeProfilingGroupFuture{Future: future}
}

func (a *stub) GetFindingsReportAccountSummary(ctx workflow.Context, input *codeguruprofiler.GetFindingsReportAccountSummaryInput) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error) {
	var output codeguruprofiler.GetFindingsReportAccountSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetFindingsReportAccountSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetFindingsReportAccountSummaryAsync(ctx workflow.Context, input *codeguruprofiler.GetFindingsReportAccountSummaryInput) *GetFindingsReportAccountSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetFindingsReportAccountSummary", input)
	return &GetFindingsReportAccountSummaryFuture{Future: future}
}

func (a *stub) GetNotificationConfiguration(ctx workflow.Context, input *codeguruprofiler.GetNotificationConfigurationInput) (*codeguruprofiler.GetNotificationConfigurationOutput, error) {
	var output codeguruprofiler.GetNotificationConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetNotificationConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetNotificationConfigurationAsync(ctx workflow.Context, input *codeguruprofiler.GetNotificationConfigurationInput) *GetNotificationConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetNotificationConfiguration", input)
	return &GetNotificationConfigurationFuture{Future: future}
}

func (a *stub) GetPolicy(ctx workflow.Context, input *codeguruprofiler.GetPolicyInput) (*codeguruprofiler.GetPolicyOutput, error) {
	var output codeguruprofiler.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPolicyAsync(ctx workflow.Context, input *codeguruprofiler.GetPolicyInput) *GetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetPolicy", input)
	return &GetPolicyFuture{Future: future}
}

func (a *stub) GetProfile(ctx workflow.Context, input *codeguruprofiler.GetProfileInput) (*codeguruprofiler.GetProfileOutput, error) {
	var output codeguruprofiler.GetProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetProfileAsync(ctx workflow.Context, input *codeguruprofiler.GetProfileInput) *GetProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetProfile", input)
	return &GetProfileFuture{Future: future}
}

func (a *stub) GetRecommendations(ctx workflow.Context, input *codeguruprofiler.GetRecommendationsInput) (*codeguruprofiler.GetRecommendationsOutput, error) {
	var output codeguruprofiler.GetRecommendationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetRecommendations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRecommendationsAsync(ctx workflow.Context, input *codeguruprofiler.GetRecommendationsInput) *GetRecommendationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-GetRecommendations", input)
	return &GetRecommendationsFuture{Future: future}
}

func (a *stub) ListFindingsReports(ctx workflow.Context, input *codeguruprofiler.ListFindingsReportsInput) (*codeguruprofiler.ListFindingsReportsOutput, error) {
	var output codeguruprofiler.ListFindingsReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListFindingsReports", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListFindingsReportsAsync(ctx workflow.Context, input *codeguruprofiler.ListFindingsReportsInput) *ListFindingsReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListFindingsReports", input)
	return &ListFindingsReportsFuture{Future: future}
}

func (a *stub) ListProfileTimes(ctx workflow.Context, input *codeguruprofiler.ListProfileTimesInput) (*codeguruprofiler.ListProfileTimesOutput, error) {
	var output codeguruprofiler.ListProfileTimesOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListProfileTimes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProfileTimesAsync(ctx workflow.Context, input *codeguruprofiler.ListProfileTimesInput) *ListProfileTimesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListProfileTimes", input)
	return &ListProfileTimesFuture{Future: future}
}

func (a *stub) ListProfilingGroups(ctx workflow.Context, input *codeguruprofiler.ListProfilingGroupsInput) (*codeguruprofiler.ListProfilingGroupsOutput, error) {
	var output codeguruprofiler.ListProfilingGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListProfilingGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProfilingGroupsAsync(ctx workflow.Context, input *codeguruprofiler.ListProfilingGroupsInput) *ListProfilingGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListProfilingGroups", input)
	return &ListProfilingGroupsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *codeguruprofiler.ListTagsForResourceInput) (*codeguruprofiler.ListTagsForResourceOutput, error) {
	var output codeguruprofiler.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *codeguruprofiler.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) PostAgentProfile(ctx workflow.Context, input *codeguruprofiler.PostAgentProfileInput) (*codeguruprofiler.PostAgentProfileOutput, error) {
	var output codeguruprofiler.PostAgentProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-PostAgentProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PostAgentProfileAsync(ctx workflow.Context, input *codeguruprofiler.PostAgentProfileInput) *PostAgentProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-PostAgentProfile", input)
	return &PostAgentProfileFuture{Future: future}
}

func (a *stub) PutPermission(ctx workflow.Context, input *codeguruprofiler.PutPermissionInput) (*codeguruprofiler.PutPermissionOutput, error) {
	var output codeguruprofiler.PutPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-PutPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PutPermissionAsync(ctx workflow.Context, input *codeguruprofiler.PutPermissionInput) *PutPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-PutPermission", input)
	return &PutPermissionFuture{Future: future}
}

func (a *stub) RemoveNotificationChannel(ctx workflow.Context, input *codeguruprofiler.RemoveNotificationChannelInput) (*codeguruprofiler.RemoveNotificationChannelOutput, error) {
	var output codeguruprofiler.RemoveNotificationChannelOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-RemoveNotificationChannel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveNotificationChannelAsync(ctx workflow.Context, input *codeguruprofiler.RemoveNotificationChannelInput) *RemoveNotificationChannelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-RemoveNotificationChannel", input)
	return &RemoveNotificationChannelFuture{Future: future}
}

func (a *stub) RemovePermission(ctx workflow.Context, input *codeguruprofiler.RemovePermissionInput) (*codeguruprofiler.RemovePermissionOutput, error) {
	var output codeguruprofiler.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemovePermissionAsync(ctx workflow.Context, input *codeguruprofiler.RemovePermissionInput) *RemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-RemovePermission", input)
	return &RemovePermissionFuture{Future: future}
}

func (a *stub) SubmitFeedback(ctx workflow.Context, input *codeguruprofiler.SubmitFeedbackInput) (*codeguruprofiler.SubmitFeedbackOutput, error) {
	var output codeguruprofiler.SubmitFeedbackOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-SubmitFeedback", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SubmitFeedbackAsync(ctx workflow.Context, input *codeguruprofiler.SubmitFeedbackInput) *SubmitFeedbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-SubmitFeedback", input)
	return &SubmitFeedbackFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *codeguruprofiler.TagResourceInput) (*codeguruprofiler.TagResourceOutput, error) {
	var output codeguruprofiler.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *codeguruprofiler.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *codeguruprofiler.UntagResourceInput) (*codeguruprofiler.UntagResourceOutput, error) {
	var output codeguruprofiler.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *codeguruprofiler.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdateProfilingGroup(ctx workflow.Context, input *codeguruprofiler.UpdateProfilingGroupInput) (*codeguruprofiler.UpdateProfilingGroupOutput, error) {
	var output codeguruprofiler.UpdateProfilingGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-UpdateProfilingGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProfilingGroupAsync(ctx workflow.Context, input *codeguruprofiler.UpdateProfilingGroupInput) *UpdateProfilingGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-codeguruprofiler-UpdateProfilingGroup", input)
	return &UpdateProfilingGroupFuture{Future: future}
}
