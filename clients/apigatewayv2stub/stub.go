// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
// Copyright (c) 2020 Banzai Cloud All rights reserved.

package apigatewayv2stub

import (
	"github.com/aws/aws-sdk-go/service/apigatewayv2"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type ApiGatewayV2CreateApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateApiFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateApiOutput, error) {
	var output apigatewayv2.CreateApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateApiMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateApiMappingOutput, error) {
	var output apigatewayv2.CreateApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateAuthorizerOutput, error) {
	var output apigatewayv2.CreateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateDeploymentOutput, error) {
	var output apigatewayv2.CreateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateDomainNameOutput, error) {
	var output apigatewayv2.CreateDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateIntegrationOutput, error) {
	var output apigatewayv2.CreateIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	var output apigatewayv2.CreateIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateModelFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateModelOutput, error) {
	var output apigatewayv2.CreateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateRouteOutput, error) {
	var output apigatewayv2.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateRouteResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateRouteResponseOutput, error) {
	var output apigatewayv2.CreateRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateStageFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateStageOutput, error) {
	var output apigatewayv2.CreateStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2CreateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2CreateVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.CreateVpcLinkOutput, error) {
	var output apigatewayv2.CreateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteAccessLogSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteAccessLogSettingsFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	var output apigatewayv2.DeleteAccessLogSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteApiFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteApiOutput, error) {
	var output apigatewayv2.DeleteApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteApiMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteApiMappingOutput, error) {
	var output apigatewayv2.DeleteApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	var output apigatewayv2.DeleteAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteCorsConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteCorsConfigurationFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	var output apigatewayv2.DeleteCorsConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteDeploymentOutput, error) {
	var output apigatewayv2.DeleteDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteDomainNameOutput, error) {
	var output apigatewayv2.DeleteDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteIntegrationOutput, error) {
	var output apigatewayv2.DeleteIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	var output apigatewayv2.DeleteIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteModelFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteModelOutput, error) {
	var output apigatewayv2.DeleteModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteOutput, error) {
	var output apigatewayv2.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteRouteRequestParameterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteRouteRequestParameterFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	var output apigatewayv2.DeleteRouteRequestParameterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteRouteResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	var output apigatewayv2.DeleteRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteRouteSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteRouteSettingsFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	var output apigatewayv2.DeleteRouteSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteStageFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteStageOutput, error) {
	var output apigatewayv2.DeleteStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2DeleteVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2DeleteVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	var output apigatewayv2.DeleteVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2ExportApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2ExportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ExportApiOutput, error) {
	var output apigatewayv2.ExportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetApiFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiOutput, error) {
	var output apigatewayv2.GetApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetApiMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiMappingOutput, error) {
	var output apigatewayv2.GetApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetApiMappingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetApiMappingsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApiMappingsOutput, error) {
	var output apigatewayv2.GetApiMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetApisFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetApisFuture) Get(ctx workflow.Context) (*apigatewayv2.GetApisOutput, error) {
	var output apigatewayv2.GetApisOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.GetAuthorizerOutput, error) {
	var output apigatewayv2.GetAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetAuthorizersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetAuthorizersFuture) Get(ctx workflow.Context) (*apigatewayv2.GetAuthorizersOutput, error) {
	var output apigatewayv2.GetAuthorizersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDeploymentOutput, error) {
	var output apigatewayv2.GetDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetDeploymentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetDeploymentsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDeploymentsOutput, error) {
	var output apigatewayv2.GetDeploymentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDomainNameOutput, error) {
	var output apigatewayv2.GetDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetDomainNamesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetDomainNamesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetDomainNamesOutput, error) {
	var output apigatewayv2.GetDomainNamesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationOutput, error) {
	var output apigatewayv2.GetIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	var output apigatewayv2.GetIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetIntegrationResponsesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetIntegrationResponsesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	var output apigatewayv2.GetIntegrationResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetIntegrationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetIntegrationsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetIntegrationsOutput, error) {
	var output apigatewayv2.GetIntegrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetModelFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelOutput, error) {
	var output apigatewayv2.GetModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetModelTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetModelTemplateFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelTemplateOutput, error) {
	var output apigatewayv2.GetModelTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetModelsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetModelsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetModelsOutput, error) {
	var output apigatewayv2.GetModelsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteOutput, error) {
	var output apigatewayv2.GetRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetRouteResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteResponseOutput, error) {
	var output apigatewayv2.GetRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetRouteResponsesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetRouteResponsesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRouteResponsesOutput, error) {
	var output apigatewayv2.GetRouteResponsesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetRoutesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetRoutesOutput, error) {
	var output apigatewayv2.GetRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetStageFuture) Get(ctx workflow.Context) (*apigatewayv2.GetStageOutput, error) {
	var output apigatewayv2.GetStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetStagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetStagesFuture) Get(ctx workflow.Context) (*apigatewayv2.GetStagesOutput, error) {
	var output apigatewayv2.GetStagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetTagsFuture) Get(ctx workflow.Context) (*apigatewayv2.GetTagsOutput, error) {
	var output apigatewayv2.GetTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.GetVpcLinkOutput, error) {
	var output apigatewayv2.GetVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2GetVpcLinksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2GetVpcLinksFuture) Get(ctx workflow.Context) (*apigatewayv2.GetVpcLinksOutput, error) {
	var output apigatewayv2.GetVpcLinksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2ImportApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2ImportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ImportApiOutput, error) {
	var output apigatewayv2.ImportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2ReimportApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2ReimportApiFuture) Get(ctx workflow.Context) (*apigatewayv2.ReimportApiOutput, error) {
	var output apigatewayv2.ReimportApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2ResetAuthorizersCacheFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2ResetAuthorizersCacheFuture) Get(ctx workflow.Context) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	var output apigatewayv2.ResetAuthorizersCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2TagResourceFuture) Get(ctx workflow.Context) (*apigatewayv2.TagResourceOutput, error) {
	var output apigatewayv2.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UntagResourceFuture) Get(ctx workflow.Context) (*apigatewayv2.UntagResourceOutput, error) {
	var output apigatewayv2.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateApiFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateApiFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateApiOutput, error) {
	var output apigatewayv2.UpdateApiOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateApiMappingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateApiMappingFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateApiMappingOutput, error) {
	var output apigatewayv2.UpdateApiMappingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateAuthorizerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateAuthorizerFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	var output apigatewayv2.UpdateAuthorizerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateDeploymentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateDeploymentFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateDeploymentOutput, error) {
	var output apigatewayv2.UpdateDeploymentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateDomainNameFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateDomainNameFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateDomainNameOutput, error) {
	var output apigatewayv2.UpdateDomainNameOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateIntegrationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateIntegrationFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateIntegrationOutput, error) {
	var output apigatewayv2.UpdateIntegrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateIntegrationResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateIntegrationResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	var output apigatewayv2.UpdateIntegrationResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateModelFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateModelFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateModelOutput, error) {
	var output apigatewayv2.UpdateModelOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateRouteFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateRouteOutput, error) {
	var output apigatewayv2.UpdateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateRouteResponseFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateRouteResponseFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	var output apigatewayv2.UpdateRouteResponseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateStageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateStageFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateStageOutput, error) {
	var output apigatewayv2.UpdateStageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApiGatewayV2UpdateVpcLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApiGatewayV2UpdateVpcLinkFuture) Get(ctx workflow.Context) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	var output apigatewayv2.UpdateVpcLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApi(ctx workflow.Context, input *apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error) {
	var output apigatewayv2.CreateApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiAsync(ctx workflow.Context, input *apigatewayv2.CreateApiInput) *ApiGatewayV2CreateApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateApi", input)
	return &ApiGatewayV2CreateApiFuture{Future: future}
}

func (a *stub) CreateApiMapping(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error) {
	var output apigatewayv2.CreateApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.CreateApiMappingInput) *ApiGatewayV2CreateApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateApiMapping", input)
	return &ApiGatewayV2CreateApiMappingFuture{Future: future}
}

func (a *stub) CreateAuthorizer(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error) {
	var output apigatewayv2.CreateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.CreateAuthorizerInput) *ApiGatewayV2CreateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateAuthorizer", input)
	return &ApiGatewayV2CreateAuthorizerFuture{Future: future}
}

func (a *stub) CreateDeployment(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error) {
	var output apigatewayv2.CreateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.CreateDeploymentInput) *ApiGatewayV2CreateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateDeployment", input)
	return &ApiGatewayV2CreateDeploymentFuture{Future: future}
}

func (a *stub) CreateDomainName(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error) {
	var output apigatewayv2.CreateDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.CreateDomainNameInput) *ApiGatewayV2CreateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateDomainName", input)
	return &ApiGatewayV2CreateDomainNameFuture{Future: future}
}

func (a *stub) CreateIntegration(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error) {
	var output apigatewayv2.CreateIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationInput) *ApiGatewayV2CreateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateIntegration", input)
	return &ApiGatewayV2CreateIntegrationFuture{Future: future}
}

func (a *stub) CreateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	var output apigatewayv2.CreateIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateIntegrationResponseInput) *ApiGatewayV2CreateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateIntegrationResponse", input)
	return &ApiGatewayV2CreateIntegrationResponseFuture{Future: future}
}

func (a *stub) CreateModel(ctx workflow.Context, input *apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error) {
	var output apigatewayv2.CreateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateModelAsync(ctx workflow.Context, input *apigatewayv2.CreateModelInput) *ApiGatewayV2CreateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateModel", input)
	return &ApiGatewayV2CreateModelFuture{Future: future}
}

func (a *stub) CreateRoute(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error) {
	var output apigatewayv2.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRouteAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteInput) *ApiGatewayV2CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateRoute", input)
	return &ApiGatewayV2CreateRouteFuture{Future: future}
}

func (a *stub) CreateRouteResponse(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error) {
	var output apigatewayv2.CreateRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.CreateRouteResponseInput) *ApiGatewayV2CreateRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateRouteResponse", input)
	return &ApiGatewayV2CreateRouteResponseFuture{Future: future}
}

func (a *stub) CreateStage(ctx workflow.Context, input *apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error) {
	var output apigatewayv2.CreateStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateStageAsync(ctx workflow.Context, input *apigatewayv2.CreateStageInput) *ApiGatewayV2CreateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateStage", input)
	return &ApiGatewayV2CreateStageFuture{Future: future}
}

func (a *stub) CreateVpcLink(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error) {
	var output apigatewayv2.CreateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.CreateVpcLinkInput) *ApiGatewayV2CreateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-CreateVpcLink", input)
	return &ApiGatewayV2CreateVpcLinkFuture{Future: future}
}

func (a *stub) DeleteAccessLogSettings(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	var output apigatewayv2.DeleteAccessLogSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteAccessLogSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAccessLogSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteAccessLogSettingsInput) *ApiGatewayV2DeleteAccessLogSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteAccessLogSettings", input)
	return &ApiGatewayV2DeleteAccessLogSettingsFuture{Future: future}
}

func (a *stub) DeleteApi(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error) {
	var output apigatewayv2.DeleteApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiInput) *ApiGatewayV2DeleteApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteApi", input)
	return &ApiGatewayV2DeleteApiFuture{Future: future}
}

func (a *stub) DeleteApiMapping(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error) {
	var output apigatewayv2.DeleteApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteApiMappingAsync(ctx workflow.Context, input *apigatewayv2.DeleteApiMappingInput) *ApiGatewayV2DeleteApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteApiMapping", input)
	return &ApiGatewayV2DeleteApiMappingFuture{Future: future}
}

func (a *stub) DeleteAuthorizer(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	var output apigatewayv2.DeleteAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.DeleteAuthorizerInput) *ApiGatewayV2DeleteAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteAuthorizer", input)
	return &ApiGatewayV2DeleteAuthorizerFuture{Future: future}
}

func (a *stub) DeleteCorsConfiguration(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	var output apigatewayv2.DeleteCorsConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteCorsConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCorsConfigurationAsync(ctx workflow.Context, input *apigatewayv2.DeleteCorsConfigurationInput) *ApiGatewayV2DeleteCorsConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteCorsConfiguration", input)
	return &ApiGatewayV2DeleteCorsConfigurationFuture{Future: future}
}

func (a *stub) DeleteDeployment(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error) {
	var output apigatewayv2.DeleteDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDeploymentAsync(ctx workflow.Context, input *apigatewayv2.DeleteDeploymentInput) *ApiGatewayV2DeleteDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteDeployment", input)
	return &ApiGatewayV2DeleteDeploymentFuture{Future: future}
}

func (a *stub) DeleteDomainName(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error) {
	var output apigatewayv2.DeleteDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDomainNameAsync(ctx workflow.Context, input *apigatewayv2.DeleteDomainNameInput) *ApiGatewayV2DeleteDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteDomainName", input)
	return &ApiGatewayV2DeleteDomainNameFuture{Future: future}
}

func (a *stub) DeleteIntegration(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error) {
	var output apigatewayv2.DeleteIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationInput) *ApiGatewayV2DeleteIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteIntegration", input)
	return &ApiGatewayV2DeleteIntegrationFuture{Future: future}
}

func (a *stub) DeleteIntegrationResponse(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	var output apigatewayv2.DeleteIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteIntegrationResponseInput) *ApiGatewayV2DeleteIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteIntegrationResponse", input)
	return &ApiGatewayV2DeleteIntegrationResponseFuture{Future: future}
}

func (a *stub) DeleteModel(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error) {
	var output apigatewayv2.DeleteModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteModelAsync(ctx workflow.Context, input *apigatewayv2.DeleteModelInput) *ApiGatewayV2DeleteModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteModel", input)
	return &ApiGatewayV2DeleteModelFuture{Future: future}
}

func (a *stub) DeleteRoute(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error) {
	var output apigatewayv2.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteInput) *ApiGatewayV2DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRoute", input)
	return &ApiGatewayV2DeleteRouteFuture{Future: future}
}

func (a *stub) DeleteRouteRequestParameter(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	var output apigatewayv2.DeleteRouteRequestParameterOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteRequestParameter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteRequestParameterAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteRequestParameterInput) *ApiGatewayV2DeleteRouteRequestParameterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteRequestParameter", input)
	return &ApiGatewayV2DeleteRouteRequestParameterFuture{Future: future}
}

func (a *stub) DeleteRouteResponse(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	var output apigatewayv2.DeleteRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteResponseInput) *ApiGatewayV2DeleteRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteResponse", input)
	return &ApiGatewayV2DeleteRouteResponseFuture{Future: future}
}

func (a *stub) DeleteRouteSettings(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	var output apigatewayv2.DeleteRouteSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteSettingsAsync(ctx workflow.Context, input *apigatewayv2.DeleteRouteSettingsInput) *ApiGatewayV2DeleteRouteSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteRouteSettings", input)
	return &ApiGatewayV2DeleteRouteSettingsFuture{Future: future}
}

func (a *stub) DeleteStage(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error) {
	var output apigatewayv2.DeleteStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteStageAsync(ctx workflow.Context, input *apigatewayv2.DeleteStageInput) *ApiGatewayV2DeleteStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteStage", input)
	return &ApiGatewayV2DeleteStageFuture{Future: future}
}

func (a *stub) DeleteVpcLink(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	var output apigatewayv2.DeleteVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.DeleteVpcLinkInput) *ApiGatewayV2DeleteVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-DeleteVpcLink", input)
	return &ApiGatewayV2DeleteVpcLinkFuture{Future: future}
}

func (a *stub) ExportApi(ctx workflow.Context, input *apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error) {
	var output apigatewayv2.ExportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ExportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportApiAsync(ctx workflow.Context, input *apigatewayv2.ExportApiInput) *ApiGatewayV2ExportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ExportApi", input)
	return &ApiGatewayV2ExportApiFuture{Future: future}
}

func (a *stub) GetApi(ctx workflow.Context, input *apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error) {
	var output apigatewayv2.GetApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiAsync(ctx workflow.Context, input *apigatewayv2.GetApiInput) *ApiGatewayV2GetApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApi", input)
	return &ApiGatewayV2GetApiFuture{Future: future}
}

func (a *stub) GetApiMapping(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error) {
	var output apigatewayv2.GetApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiMappingAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingInput) *ApiGatewayV2GetApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApiMapping", input)
	return &ApiGatewayV2GetApiMappingFuture{Future: future}
}

func (a *stub) GetApiMappings(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error) {
	var output apigatewayv2.GetApiMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApiMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApiMappingsAsync(ctx workflow.Context, input *apigatewayv2.GetApiMappingsInput) *ApiGatewayV2GetApiMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApiMappings", input)
	return &ApiGatewayV2GetApiMappingsFuture{Future: future}
}

func (a *stub) GetApis(ctx workflow.Context, input *apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error) {
	var output apigatewayv2.GetApisOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApis", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetApisAsync(ctx workflow.Context, input *apigatewayv2.GetApisInput) *ApiGatewayV2GetApisFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetApis", input)
	return &ApiGatewayV2GetApisFuture{Future: future}
}

func (a *stub) GetAuthorizer(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error) {
	var output apigatewayv2.GetAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizerInput) *ApiGatewayV2GetAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetAuthorizer", input)
	return &ApiGatewayV2GetAuthorizerFuture{Future: future}
}

func (a *stub) GetAuthorizers(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error) {
	var output apigatewayv2.GetAuthorizersOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetAuthorizers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAuthorizersAsync(ctx workflow.Context, input *apigatewayv2.GetAuthorizersInput) *ApiGatewayV2GetAuthorizersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetAuthorizers", input)
	return &ApiGatewayV2GetAuthorizersFuture{Future: future}
}

func (a *stub) GetDeployment(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error) {
	var output apigatewayv2.GetDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentInput) *ApiGatewayV2GetDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDeployment", input)
	return &ApiGatewayV2GetDeploymentFuture{Future: future}
}

func (a *stub) GetDeployments(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error) {
	var output apigatewayv2.GetDeploymentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDeployments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDeploymentsAsync(ctx workflow.Context, input *apigatewayv2.GetDeploymentsInput) *ApiGatewayV2GetDeploymentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDeployments", input)
	return &ApiGatewayV2GetDeploymentsFuture{Future: future}
}

func (a *stub) GetDomainName(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error) {
	var output apigatewayv2.GetDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNameAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNameInput) *ApiGatewayV2GetDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDomainName", input)
	return &ApiGatewayV2GetDomainNameFuture{Future: future}
}

func (a *stub) GetDomainNames(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error) {
	var output apigatewayv2.GetDomainNamesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDomainNames", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDomainNamesAsync(ctx workflow.Context, input *apigatewayv2.GetDomainNamesInput) *ApiGatewayV2GetDomainNamesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetDomainNames", input)
	return &ApiGatewayV2GetDomainNamesFuture{Future: future}
}

func (a *stub) GetIntegration(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error) {
	var output apigatewayv2.GetIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationInput) *ApiGatewayV2GetIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegration", input)
	return &ApiGatewayV2GetIntegrationFuture{Future: future}
}

func (a *stub) GetIntegrationResponse(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	var output apigatewayv2.GetIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponseInput) *ApiGatewayV2GetIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrationResponse", input)
	return &ApiGatewayV2GetIntegrationResponseFuture{Future: future}
}

func (a *stub) GetIntegrationResponses(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	var output apigatewayv2.GetIntegrationResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrationResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationResponsesInput) *ApiGatewayV2GetIntegrationResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrationResponses", input)
	return &ApiGatewayV2GetIntegrationResponsesFuture{Future: future}
}

func (a *stub) GetIntegrations(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error) {
	var output apigatewayv2.GetIntegrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetIntegrationsAsync(ctx workflow.Context, input *apigatewayv2.GetIntegrationsInput) *ApiGatewayV2GetIntegrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetIntegrations", input)
	return &ApiGatewayV2GetIntegrationsFuture{Future: future}
}

func (a *stub) GetModel(ctx workflow.Context, input *apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error) {
	var output apigatewayv2.GetModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelAsync(ctx workflow.Context, input *apigatewayv2.GetModelInput) *ApiGatewayV2GetModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModel", input)
	return &ApiGatewayV2GetModelFuture{Future: future}
}

func (a *stub) GetModelTemplate(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error) {
	var output apigatewayv2.GetModelTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModelTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelTemplateAsync(ctx workflow.Context, input *apigatewayv2.GetModelTemplateInput) *ApiGatewayV2GetModelTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModelTemplate", input)
	return &ApiGatewayV2GetModelTemplateFuture{Future: future}
}

func (a *stub) GetModels(ctx workflow.Context, input *apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error) {
	var output apigatewayv2.GetModelsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModels", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetModelsAsync(ctx workflow.Context, input *apigatewayv2.GetModelsInput) *ApiGatewayV2GetModelsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetModels", input)
	return &ApiGatewayV2GetModelsFuture{Future: future}
}

func (a *stub) GetRoute(ctx workflow.Context, input *apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error) {
	var output apigatewayv2.GetRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRouteAsync(ctx workflow.Context, input *apigatewayv2.GetRouteInput) *ApiGatewayV2GetRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRoute", input)
	return &ApiGatewayV2GetRouteFuture{Future: future}
}

func (a *stub) GetRouteResponse(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error) {
	var output apigatewayv2.GetRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponseInput) *ApiGatewayV2GetRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRouteResponse", input)
	return &ApiGatewayV2GetRouteResponseFuture{Future: future}
}

func (a *stub) GetRouteResponses(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error) {
	var output apigatewayv2.GetRouteResponsesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRouteResponses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRouteResponsesAsync(ctx workflow.Context, input *apigatewayv2.GetRouteResponsesInput) *ApiGatewayV2GetRouteResponsesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRouteResponses", input)
	return &ApiGatewayV2GetRouteResponsesFuture{Future: future}
}

func (a *stub) GetRoutes(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error) {
	var output apigatewayv2.GetRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetRoutesAsync(ctx workflow.Context, input *apigatewayv2.GetRoutesInput) *ApiGatewayV2GetRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetRoutes", input)
	return &ApiGatewayV2GetRoutesFuture{Future: future}
}

func (a *stub) GetStage(ctx workflow.Context, input *apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error) {
	var output apigatewayv2.GetStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStageAsync(ctx workflow.Context, input *apigatewayv2.GetStageInput) *ApiGatewayV2GetStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetStage", input)
	return &ApiGatewayV2GetStageFuture{Future: future}
}

func (a *stub) GetStages(ctx workflow.Context, input *apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error) {
	var output apigatewayv2.GetStagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetStages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetStagesAsync(ctx workflow.Context, input *apigatewayv2.GetStagesInput) *ApiGatewayV2GetStagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetStages", input)
	return &ApiGatewayV2GetStagesFuture{Future: future}
}

func (a *stub) GetTags(ctx workflow.Context, input *apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error) {
	var output apigatewayv2.GetTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTagsAsync(ctx workflow.Context, input *apigatewayv2.GetTagsInput) *ApiGatewayV2GetTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetTags", input)
	return &ApiGatewayV2GetTagsFuture{Future: future}
}

func (a *stub) GetVpcLink(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error) {
	var output apigatewayv2.GetVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinkInput) *ApiGatewayV2GetVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetVpcLink", input)
	return &ApiGatewayV2GetVpcLinkFuture{Future: future}
}

func (a *stub) GetVpcLinks(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error) {
	var output apigatewayv2.GetVpcLinksOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetVpcLinks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetVpcLinksAsync(ctx workflow.Context, input *apigatewayv2.GetVpcLinksInput) *ApiGatewayV2GetVpcLinksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-GetVpcLinks", input)
	return &ApiGatewayV2GetVpcLinksFuture{Future: future}
}

func (a *stub) ImportApi(ctx workflow.Context, input *apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error) {
	var output apigatewayv2.ImportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ImportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportApiAsync(ctx workflow.Context, input *apigatewayv2.ImportApiInput) *ApiGatewayV2ImportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ImportApi", input)
	return &ApiGatewayV2ImportApiFuture{Future: future}
}

func (a *stub) ReimportApi(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error) {
	var output apigatewayv2.ReimportApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ReimportApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReimportApiAsync(ctx workflow.Context, input *apigatewayv2.ReimportApiInput) *ApiGatewayV2ReimportApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ReimportApi", input)
	return &ApiGatewayV2ReimportApiFuture{Future: future}
}

func (a *stub) ResetAuthorizersCache(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	var output apigatewayv2.ResetAuthorizersCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ResetAuthorizersCache", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetAuthorizersCacheAsync(ctx workflow.Context, input *apigatewayv2.ResetAuthorizersCacheInput) *ApiGatewayV2ResetAuthorizersCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-ResetAuthorizersCache", input)
	return &ApiGatewayV2ResetAuthorizersCacheFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error) {
	var output apigatewayv2.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *apigatewayv2.TagResourceInput) *ApiGatewayV2TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-TagResource", input)
	return &ApiGatewayV2TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error) {
	var output apigatewayv2.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *apigatewayv2.UntagResourceInput) *ApiGatewayV2UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UntagResource", input)
	return &ApiGatewayV2UntagResourceFuture{Future: future}
}

func (a *stub) UpdateApi(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error) {
	var output apigatewayv2.UpdateApiOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateApi", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiInput) *ApiGatewayV2UpdateApiFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateApi", input)
	return &ApiGatewayV2UpdateApiFuture{Future: future}
}

func (a *stub) UpdateApiMapping(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error) {
	var output apigatewayv2.UpdateApiMappingOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateApiMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateApiMappingAsync(ctx workflow.Context, input *apigatewayv2.UpdateApiMappingInput) *ApiGatewayV2UpdateApiMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateApiMapping", input)
	return &ApiGatewayV2UpdateApiMappingFuture{Future: future}
}

func (a *stub) UpdateAuthorizer(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	var output apigatewayv2.UpdateAuthorizerOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateAuthorizer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateAuthorizerAsync(ctx workflow.Context, input *apigatewayv2.UpdateAuthorizerInput) *ApiGatewayV2UpdateAuthorizerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateAuthorizer", input)
	return &ApiGatewayV2UpdateAuthorizerFuture{Future: future}
}

func (a *stub) UpdateDeployment(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error) {
	var output apigatewayv2.UpdateDeploymentOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateDeployment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDeploymentAsync(ctx workflow.Context, input *apigatewayv2.UpdateDeploymentInput) *ApiGatewayV2UpdateDeploymentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateDeployment", input)
	return &ApiGatewayV2UpdateDeploymentFuture{Future: future}
}

func (a *stub) UpdateDomainName(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error) {
	var output apigatewayv2.UpdateDomainNameOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateDomainName", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateDomainNameAsync(ctx workflow.Context, input *apigatewayv2.UpdateDomainNameInput) *ApiGatewayV2UpdateDomainNameFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateDomainName", input)
	return &ApiGatewayV2UpdateDomainNameFuture{Future: future}
}

func (a *stub) UpdateIntegration(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error) {
	var output apigatewayv2.UpdateIntegrationOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateIntegration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationInput) *ApiGatewayV2UpdateIntegrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateIntegration", input)
	return &ApiGatewayV2UpdateIntegrationFuture{Future: future}
}

func (a *stub) UpdateIntegrationResponse(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	var output apigatewayv2.UpdateIntegrationResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateIntegrationResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateIntegrationResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateIntegrationResponseInput) *ApiGatewayV2UpdateIntegrationResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateIntegrationResponse", input)
	return &ApiGatewayV2UpdateIntegrationResponseFuture{Future: future}
}

func (a *stub) UpdateModel(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error) {
	var output apigatewayv2.UpdateModelOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateModel", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateModelAsync(ctx workflow.Context, input *apigatewayv2.UpdateModelInput) *ApiGatewayV2UpdateModelFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateModel", input)
	return &ApiGatewayV2UpdateModelFuture{Future: future}
}

func (a *stub) UpdateRoute(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error) {
	var output apigatewayv2.UpdateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRouteAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteInput) *ApiGatewayV2UpdateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateRoute", input)
	return &ApiGatewayV2UpdateRouteFuture{Future: future}
}

func (a *stub) UpdateRouteResponse(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	var output apigatewayv2.UpdateRouteResponseOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateRouteResponse", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRouteResponseAsync(ctx workflow.Context, input *apigatewayv2.UpdateRouteResponseInput) *ApiGatewayV2UpdateRouteResponseFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateRouteResponse", input)
	return &ApiGatewayV2UpdateRouteResponseFuture{Future: future}
}

func (a *stub) UpdateStage(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error) {
	var output apigatewayv2.UpdateStageOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateStage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateStageAsync(ctx workflow.Context, input *apigatewayv2.UpdateStageInput) *ApiGatewayV2UpdateStageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateStage", input)
	return &ApiGatewayV2UpdateStageFuture{Future: future}
}

func (a *stub) UpdateVpcLink(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	var output apigatewayv2.UpdateVpcLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateVpcLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateVpcLinkAsync(ctx workflow.Context, input *apigatewayv2.UpdateVpcLinkInput) *ApiGatewayV2UpdateVpcLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-apigatewayv2-UpdateVpcLink", input)
	return &ApiGatewayV2UpdateVpcLinkFuture{Future: future}
}
