// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package directoryservicestub

import (
	"github.com/aws/aws-sdk-go/service/directoryservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptSharedDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddRegionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddRegionFuture) Get(ctx workflow.Context) (*directoryservice.AddRegionOutput, error) {
	var output directoryservice.AddRegionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AddTagsToResourceFuture) Get(ctx workflow.Context) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelSchemaExtensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConnectDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConnectDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateAliasFuture) Get(ctx workflow.Context) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateComputerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateComputerFuture) Get(ctx workflow.Context) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLogSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateMicrosoftADFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateMicrosoftADFuture) Get(ctx workflow.Context) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrustFuture) Get(ctx workflow.Context) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLogSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrustFuture) Get(ctx workflow.Context) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterEventTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConditionalForwardersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConditionalForwardersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDomainControllersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEventTopicsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEventTopicsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLDAPSSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLDAPSSettingsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRegionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRegionsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeRegionsOutput, error) {
	var output directoryservice.DescribeRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSharedDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSharedDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrustsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrustsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableClientAuthenticationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableClientAuthenticationFuture) Get(ctx workflow.Context) (*directoryservice.DisableClientAuthenticationOutput, error) {
	var output directoryservice.DisableClientAuthenticationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableLDAPSFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableSsoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableSsoFuture) Get(ctx workflow.Context) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableClientAuthenticationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableClientAuthenticationFuture) Get(ctx workflow.Context) (*directoryservice.EnableClientAuthenticationOutput, error) {
	var output directoryservice.EnableClientAuthenticationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableLDAPSFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableSsoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableSsoFuture) Get(ctx workflow.Context) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDirectoryLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDirectoryLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetSnapshotLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetSnapshotLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListCertificatesFuture) Get(ctx workflow.Context) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListLogSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListLogSubscriptionsFuture) Get(ctx workflow.Context) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListSchemaExtensionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListSchemaExtensionsFuture) Get(ctx workflow.Context) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterEventTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectSharedDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveRegionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveRegionFuture) Get(ctx workflow.Context) (*directoryservice.RemoveRegionOutput, error) {
	var output directoryservice.RemoveRegionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetUserPasswordFuture) Get(ctx workflow.Context) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreFromSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ShareDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ShareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartSchemaExtensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnshareDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnshareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateNumberOfDomainControllersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateNumberOfDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateRadiusFuture) Get(ctx workflow.Context) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateTrustFuture) Get(ctx workflow.Context) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type VerifyTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *VerifyTrustFuture) Get(ctx workflow.Context) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptSharedDirectory(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AcceptSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) *AcceptSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AcceptSharedDirectory", input)
	return &AcceptSharedDirectoryFuture{Future: future}
}

func (a *stub) AddIpRoutes(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddIpRoutesAsync(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) *AddIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddIpRoutes", input)
	return &AddIpRoutesFuture{Future: future}
}

func (a *stub) AddRegion(ctx workflow.Context, input *directoryservice.AddRegionInput) (*directoryservice.AddRegionOutput, error) {
	var output directoryservice.AddRegionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddRegion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddRegionAsync(ctx workflow.Context, input *directoryservice.AddRegionInput) *AddRegionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddRegion", input)
	return &AddRegionFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) *AddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddTagsToResource", input)
	return &AddTagsToResourceFuture{Future: future}
}

func (a *stub) CancelSchemaExtension(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CancelSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) *CancelSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CancelSchemaExtension", input)
	return &CancelSchemaExtensionFuture{Future: future}
}

func (a *stub) ConnectDirectory(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ConnectDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConnectDirectoryAsync(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) *ConnectDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ConnectDirectory", input)
	return &ConnectDirectoryFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *directoryservice.CreateAliasInput) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *directoryservice.CreateAliasInput) *CreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateAlias", input)
	return &CreateAliasFuture{Future: future}
}

func (a *stub) CreateComputer(ctx workflow.Context, input *directoryservice.CreateComputerInput) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateComputer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateComputerAsync(ctx workflow.Context, input *directoryservice.CreateComputerInput) *CreateComputerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateComputer", input)
	return &CreateComputerFuture{Future: future}
}

func (a *stub) CreateConditionalForwarder(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) *CreateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateConditionalForwarder", input)
	return &CreateConditionalForwarderFuture{Future: future}
}

func (a *stub) CreateDirectory(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectoryAsync(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) *CreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateDirectory", input)
	return &CreateDirectoryFuture{Future: future}
}

func (a *stub) CreateLogSubscription(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) *CreateLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateLogSubscription", input)
	return &CreateLogSubscriptionFuture{Future: future}
}

func (a *stub) CreateMicrosoftAD(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateMicrosoftAD", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMicrosoftADAsync(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) *CreateMicrosoftADFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateMicrosoftAD", input)
	return &CreateMicrosoftADFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) *CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateSnapshot", input)
	return &CreateSnapshotFuture{Future: future}
}

func (a *stub) CreateTrust(ctx workflow.Context, input *directoryservice.CreateTrustInput) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrustAsync(ctx workflow.Context, input *directoryservice.CreateTrustInput) *CreateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateTrust", input)
	return &CreateTrustFuture{Future: future}
}

func (a *stub) DeleteConditionalForwarder(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) *DeleteConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteConditionalForwarder", input)
	return &DeleteConditionalForwarderFuture{Future: future}
}

func (a *stub) DeleteDirectory(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectoryAsync(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) *DeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteDirectory", input)
	return &DeleteDirectoryFuture{Future: future}
}

func (a *stub) DeleteLogSubscription(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) *DeleteLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteLogSubscription", input)
	return &DeleteLogSubscriptionFuture{Future: future}
}

func (a *stub) DeleteSnapshot(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotAsync(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) *DeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteSnapshot", input)
	return &DeleteSnapshotFuture{Future: future}
}

func (a *stub) DeleteTrust(ctx workflow.Context, input *directoryservice.DeleteTrustInput) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrustAsync(ctx workflow.Context, input *directoryservice.DeleteTrustInput) *DeleteTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteTrust", input)
	return &DeleteTrustFuture{Future: future}
}

func (a *stub) DeregisterCertificate(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterCertificateAsync(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) *DeregisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterCertificate", input)
	return &DeregisterCertificateFuture{Future: future}
}

func (a *stub) DeregisterEventTopic(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterEventTopicAsync(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) *DeregisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterEventTopic", input)
	return &DeregisterEventTopicFuture{Future: future}
}

func (a *stub) DescribeCertificate(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAsync(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) *DescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeCertificate", input)
	return &DescribeCertificateFuture{Future: future}
}

func (a *stub) DescribeConditionalForwarders(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeConditionalForwarders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConditionalForwardersAsync(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) *DescribeConditionalForwardersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeConditionalForwarders", input)
	return &DescribeConditionalForwardersFuture{Future: future}
}

func (a *stub) DescribeDirectories(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) *DescribeDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDirectories", input)
	return &DescribeDirectoriesFuture{Future: future}
}

func (a *stub) DescribeDomainControllers(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainControllersAsync(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) *DescribeDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDomainControllers", input)
	return &DescribeDomainControllersFuture{Future: future}
}

func (a *stub) DescribeEventTopics(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeEventTopics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventTopicsAsync(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) *DescribeEventTopicsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeEventTopics", input)
	return &DescribeEventTopicsFuture{Future: future}
}

func (a *stub) DescribeLDAPSSettings(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeLDAPSSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLDAPSSettingsAsync(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) *DescribeLDAPSSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeLDAPSSettings", input)
	return &DescribeLDAPSSettingsFuture{Future: future}
}

func (a *stub) DescribeRegions(ctx workflow.Context, input *directoryservice.DescribeRegionsInput) (*directoryservice.DescribeRegionsOutput, error) {
	var output directoryservice.DescribeRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegionsAsync(ctx workflow.Context, input *directoryservice.DescribeRegionsInput) *DescribeRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeRegions", input)
	return &DescribeRegionsFuture{Future: future}
}

func (a *stub) DescribeSharedDirectories(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSharedDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSharedDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) *DescribeSharedDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSharedDirectories", input)
	return &DescribeSharedDirectoriesFuture{Future: future}
}

func (a *stub) DescribeSnapshots(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotsAsync(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) *DescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSnapshots", input)
	return &DescribeSnapshotsFuture{Future: future}
}

func (a *stub) DescribeTrusts(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeTrusts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustsAsync(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) *DescribeTrustsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeTrusts", input)
	return &DescribeTrustsFuture{Future: future}
}

func (a *stub) DisableClientAuthentication(ctx workflow.Context, input *directoryservice.DisableClientAuthenticationInput) (*directoryservice.DisableClientAuthenticationOutput, error) {
	var output directoryservice.DisableClientAuthenticationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableClientAuthentication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableClientAuthenticationAsync(ctx workflow.Context, input *directoryservice.DisableClientAuthenticationInput) *DisableClientAuthenticationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableClientAuthentication", input)
	return &DisableClientAuthenticationFuture{Future: future}
}

func (a *stub) DisableLDAPS(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableLDAPSAsync(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) *DisableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableLDAPS", input)
	return &DisableLDAPSFuture{Future: future}
}

func (a *stub) DisableRadius(ctx workflow.Context, input *directoryservice.DisableRadiusInput) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableRadiusAsync(ctx workflow.Context, input *directoryservice.DisableRadiusInput) *DisableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableRadius", input)
	return &DisableRadiusFuture{Future: future}
}

func (a *stub) DisableSso(ctx workflow.Context, input *directoryservice.DisableSsoInput) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableSsoAsync(ctx workflow.Context, input *directoryservice.DisableSsoInput) *DisableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableSso", input)
	return &DisableSsoFuture{Future: future}
}

func (a *stub) EnableClientAuthentication(ctx workflow.Context, input *directoryservice.EnableClientAuthenticationInput) (*directoryservice.EnableClientAuthenticationOutput, error) {
	var output directoryservice.EnableClientAuthenticationOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableClientAuthentication", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableClientAuthenticationAsync(ctx workflow.Context, input *directoryservice.EnableClientAuthenticationInput) *EnableClientAuthenticationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableClientAuthentication", input)
	return &EnableClientAuthenticationFuture{Future: future}
}

func (a *stub) EnableLDAPS(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableLDAPSAsync(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) *EnableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableLDAPS", input)
	return &EnableLDAPSFuture{Future: future}
}

func (a *stub) EnableRadius(ctx workflow.Context, input *directoryservice.EnableRadiusInput) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableRadiusAsync(ctx workflow.Context, input *directoryservice.EnableRadiusInput) *EnableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableRadius", input)
	return &EnableRadiusFuture{Future: future}
}

func (a *stub) EnableSso(ctx workflow.Context, input *directoryservice.EnableSsoInput) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSsoAsync(ctx workflow.Context, input *directoryservice.EnableSsoInput) *EnableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableSso", input)
	return &EnableSsoFuture{Future: future}
}

func (a *stub) GetDirectoryLimits(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetDirectoryLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDirectoryLimitsAsync(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) *GetDirectoryLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetDirectoryLimits", input)
	return &GetDirectoryLimitsFuture{Future: future}
}

func (a *stub) GetSnapshotLimits(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetSnapshotLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSnapshotLimitsAsync(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) *GetSnapshotLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetSnapshotLimits", input)
	return &GetSnapshotLimitsFuture{Future: future}
}

func (a *stub) ListCertificates(ctx workflow.Context, input *directoryservice.ListCertificatesInput) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificatesAsync(ctx workflow.Context, input *directoryservice.ListCertificatesInput) *ListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListCertificates", input)
	return &ListCertificatesFuture{Future: future}
}

func (a *stub) ListIpRoutes(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIpRoutesAsync(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) *ListIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListIpRoutes", input)
	return &ListIpRoutesFuture{Future: future}
}

func (a *stub) ListLogSubscriptions(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListLogSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLogSubscriptionsAsync(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) *ListLogSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListLogSubscriptions", input)
	return &ListLogSubscriptionsFuture{Future: future}
}

func (a *stub) ListSchemaExtensions(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListSchemaExtensions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemaExtensionsAsync(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) *ListSchemaExtensionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListSchemaExtensions", input)
	return &ListSchemaExtensionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterCertificate(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCertificateAsync(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) *RegisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterCertificate", input)
	return &RegisterCertificateFuture{Future: future}
}

func (a *stub) RegisterEventTopic(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterEventTopicAsync(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) *RegisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterEventTopic", input)
	return &RegisterEventTopicFuture{Future: future}
}

func (a *stub) RejectSharedDirectory(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RejectSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) *RejectSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RejectSharedDirectory", input)
	return &RejectSharedDirectoryFuture{Future: future}
}

func (a *stub) RemoveIpRoutes(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveIpRoutesAsync(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) *RemoveIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveIpRoutes", input)
	return &RemoveIpRoutesFuture{Future: future}
}

func (a *stub) RemoveRegion(ctx workflow.Context, input *directoryservice.RemoveRegionInput) (*directoryservice.RemoveRegionOutput, error) {
	var output directoryservice.RemoveRegionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveRegion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveRegionAsync(ctx workflow.Context, input *directoryservice.RemoveRegionInput) *RemoveRegionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveRegion", input)
	return &RemoveRegionFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) *RemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveTagsFromResource", input)
	return &RemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetUserPassword(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetUserPasswordAsync(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) *ResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ResetUserPassword", input)
	return &ResetUserPasswordFuture{Future: future}
}

func (a *stub) RestoreFromSnapshot(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RestoreFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreFromSnapshotAsync(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) *RestoreFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RestoreFromSnapshot", input)
	return &RestoreFromSnapshotFuture{Future: future}
}

func (a *stub) ShareDirectory(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ShareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ShareDirectoryAsync(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) *ShareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ShareDirectory", input)
	return &ShareDirectoryFuture{Future: future}
}

func (a *stub) StartSchemaExtension(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-StartSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) *StartSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-StartSchemaExtension", input)
	return &StartSchemaExtensionFuture{Future: future}
}

func (a *stub) UnshareDirectory(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UnshareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnshareDirectoryAsync(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) *UnshareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UnshareDirectory", input)
	return &UnshareDirectoryFuture{Future: future}
}

func (a *stub) UpdateConditionalForwarder(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) *UpdateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateConditionalForwarder", input)
	return &UpdateConditionalForwarderFuture{Future: future}
}

func (a *stub) UpdateNumberOfDomainControllers(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateNumberOfDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNumberOfDomainControllersAsync(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) *UpdateNumberOfDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateNumberOfDomainControllers", input)
	return &UpdateNumberOfDomainControllersFuture{Future: future}
}

func (a *stub) UpdateRadius(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRadiusAsync(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) *UpdateRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateRadius", input)
	return &UpdateRadiusFuture{Future: future}
}

func (a *stub) UpdateTrust(ctx workflow.Context, input *directoryservice.UpdateTrustInput) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrustAsync(ctx workflow.Context, input *directoryservice.UpdateTrustInput) *UpdateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateTrust", input)
	return &UpdateTrustFuture{Future: future}
}

func (a *stub) VerifyTrust(ctx workflow.Context, input *directoryservice.VerifyTrustInput) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-VerifyTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyTrustAsync(ctx workflow.Context, input *directoryservice.VerifyTrustInput) *VerifyTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-VerifyTrust", input)
	return &VerifyTrustFuture{Future: future}
}
