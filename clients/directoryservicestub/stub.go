// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package directoryservicestub

import (
	"github.com/aws/aws-sdk-go/service/directoryservice"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type DirectoryServiceAcceptSharedDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceAcceptSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceAddIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceAddIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceAddTagsToResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceAddTagsToResourceFuture) Get(ctx workflow.Context) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCancelSchemaExtensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCancelSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceConnectDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceConnectDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateAliasFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateAliasFuture) Get(ctx workflow.Context) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateComputerFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateComputerFuture) Get(ctx workflow.Context) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateLogSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateMicrosoftADFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateMicrosoftADFuture) Get(ctx workflow.Context) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceCreateTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceCreateTrustFuture) Get(ctx workflow.Context) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeleteConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeleteConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeleteDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeleteDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeleteLogSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeleteLogSubscriptionFuture) Get(ctx workflow.Context) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeleteSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeleteSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeleteTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeleteTrustFuture) Get(ctx workflow.Context) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeregisterCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeregisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDeregisterEventTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDeregisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeCertificateFuture) Get(ctx workflow.Context) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeConditionalForwardersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeConditionalForwardersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeDomainControllersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeEventTopicsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeEventTopicsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeLDAPSSettingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeLDAPSSettingsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeSharedDirectoriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeSharedDirectoriesFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeSnapshotsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDescribeTrustsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDescribeTrustsFuture) Get(ctx workflow.Context) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDisableLDAPSFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDisableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDisableRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDisableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceDisableSsoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceDisableSsoFuture) Get(ctx workflow.Context) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceEnableLDAPSFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceEnableLDAPSFuture) Get(ctx workflow.Context) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceEnableRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceEnableRadiusFuture) Get(ctx workflow.Context) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceEnableSsoFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceEnableSsoFuture) Get(ctx workflow.Context) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceGetDirectoryLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceGetDirectoryLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceGetSnapshotLimitsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceGetSnapshotLimitsFuture) Get(ctx workflow.Context) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceListCertificatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceListCertificatesFuture) Get(ctx workflow.Context) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceListIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceListIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceListLogSubscriptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceListLogSubscriptionsFuture) Get(ctx workflow.Context) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceListSchemaExtensionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceListSchemaExtensionsFuture) Get(ctx workflow.Context) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceListTagsForResourceFuture) Get(ctx workflow.Context) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRegisterCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRegisterCertificateFuture) Get(ctx workflow.Context) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRegisterEventTopicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRegisterEventTopicFuture) Get(ctx workflow.Context) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRejectSharedDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRejectSharedDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRemoveIpRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRemoveIpRoutesFuture) Get(ctx workflow.Context) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRemoveTagsFromResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceResetUserPasswordFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceResetUserPasswordFuture) Get(ctx workflow.Context) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceRestoreFromSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceRestoreFromSnapshotFuture) Get(ctx workflow.Context) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceShareDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceShareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceStartSchemaExtensionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceStartSchemaExtensionFuture) Get(ctx workflow.Context) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceUnshareDirectoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceUnshareDirectoryFuture) Get(ctx workflow.Context) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceUpdateConditionalForwarderFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceUpdateConditionalForwarderFuture) Get(ctx workflow.Context) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceUpdateNumberOfDomainControllersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceUpdateNumberOfDomainControllersFuture) Get(ctx workflow.Context) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceUpdateRadiusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceUpdateRadiusFuture) Get(ctx workflow.Context) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceUpdateTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceUpdateTrustFuture) Get(ctx workflow.Context) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DirectoryServiceVerifyTrustFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DirectoryServiceVerifyTrustFuture) Get(ctx workflow.Context) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptSharedDirectory(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	var output directoryservice.AcceptSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AcceptSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.AcceptSharedDirectoryInput) *DirectoryServiceAcceptSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AcceptSharedDirectory", input)
	return &DirectoryServiceAcceptSharedDirectoryFuture{Future: future}
}

func (a *stub) AddIpRoutes(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) (*directoryservice.AddIpRoutesOutput, error) {
	var output directoryservice.AddIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddIpRoutesAsync(ctx workflow.Context, input *directoryservice.AddIpRoutesInput) *DirectoryServiceAddIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddIpRoutes", input)
	return &DirectoryServiceAddIpRoutesFuture{Future: future}
}

func (a *stub) AddTagsToResource(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) (*directoryservice.AddTagsToResourceOutput, error) {
	var output directoryservice.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AddTagsToResourceAsync(ctx workflow.Context, input *directoryservice.AddTagsToResourceInput) *DirectoryServiceAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-AddTagsToResource", input)
	return &DirectoryServiceAddTagsToResourceFuture{Future: future}
}

func (a *stub) CancelSchemaExtension(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) (*directoryservice.CancelSchemaExtensionOutput, error) {
	var output directoryservice.CancelSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CancelSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.CancelSchemaExtensionInput) *DirectoryServiceCancelSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CancelSchemaExtension", input)
	return &DirectoryServiceCancelSchemaExtensionFuture{Future: future}
}

func (a *stub) ConnectDirectory(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) (*directoryservice.ConnectDirectoryOutput, error) {
	var output directoryservice.ConnectDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ConnectDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConnectDirectoryAsync(ctx workflow.Context, input *directoryservice.ConnectDirectoryInput) *DirectoryServiceConnectDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ConnectDirectory", input)
	return &DirectoryServiceConnectDirectoryFuture{Future: future}
}

func (a *stub) CreateAlias(ctx workflow.Context, input *directoryservice.CreateAliasInput) (*directoryservice.CreateAliasOutput, error) {
	var output directoryservice.CreateAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateAliasAsync(ctx workflow.Context, input *directoryservice.CreateAliasInput) *DirectoryServiceCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateAlias", input)
	return &DirectoryServiceCreateAliasFuture{Future: future}
}

func (a *stub) CreateComputer(ctx workflow.Context, input *directoryservice.CreateComputerInput) (*directoryservice.CreateComputerOutput, error) {
	var output directoryservice.CreateComputerOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateComputer", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateComputerAsync(ctx workflow.Context, input *directoryservice.CreateComputerInput) *DirectoryServiceCreateComputerFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateComputer", input)
	return &DirectoryServiceCreateComputerFuture{Future: future}
}

func (a *stub) CreateConditionalForwarder(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) (*directoryservice.CreateConditionalForwarderOutput, error) {
	var output directoryservice.CreateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.CreateConditionalForwarderInput) *DirectoryServiceCreateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateConditionalForwarder", input)
	return &DirectoryServiceCreateConditionalForwarderFuture{Future: future}
}

func (a *stub) CreateDirectory(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) (*directoryservice.CreateDirectoryOutput, error) {
	var output directoryservice.CreateDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDirectoryAsync(ctx workflow.Context, input *directoryservice.CreateDirectoryInput) *DirectoryServiceCreateDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateDirectory", input)
	return &DirectoryServiceCreateDirectoryFuture{Future: future}
}

func (a *stub) CreateLogSubscription(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) (*directoryservice.CreateLogSubscriptionOutput, error) {
	var output directoryservice.CreateLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.CreateLogSubscriptionInput) *DirectoryServiceCreateLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateLogSubscription", input)
	return &DirectoryServiceCreateLogSubscriptionFuture{Future: future}
}

func (a *stub) CreateMicrosoftAD(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) (*directoryservice.CreateMicrosoftADOutput, error) {
	var output directoryservice.CreateMicrosoftADOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateMicrosoftAD", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateMicrosoftADAsync(ctx workflow.Context, input *directoryservice.CreateMicrosoftADInput) *DirectoryServiceCreateMicrosoftADFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateMicrosoftAD", input)
	return &DirectoryServiceCreateMicrosoftADFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) (*directoryservice.CreateSnapshotOutput, error) {
	var output directoryservice.CreateSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *directoryservice.CreateSnapshotInput) *DirectoryServiceCreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateSnapshot", input)
	return &DirectoryServiceCreateSnapshotFuture{Future: future}
}

func (a *stub) CreateTrust(ctx workflow.Context, input *directoryservice.CreateTrustInput) (*directoryservice.CreateTrustOutput, error) {
	var output directoryservice.CreateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrustAsync(ctx workflow.Context, input *directoryservice.CreateTrustInput) *DirectoryServiceCreateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-CreateTrust", input)
	return &DirectoryServiceCreateTrustFuture{Future: future}
}

func (a *stub) DeleteConditionalForwarder(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	var output directoryservice.DeleteConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.DeleteConditionalForwarderInput) *DirectoryServiceDeleteConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteConditionalForwarder", input)
	return &DirectoryServiceDeleteConditionalForwarderFuture{Future: future}
}

func (a *stub) DeleteDirectory(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) (*directoryservice.DeleteDirectoryOutput, error) {
	var output directoryservice.DeleteDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDirectoryAsync(ctx workflow.Context, input *directoryservice.DeleteDirectoryInput) *DirectoryServiceDeleteDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteDirectory", input)
	return &DirectoryServiceDeleteDirectoryFuture{Future: future}
}

func (a *stub) DeleteLogSubscription(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	var output directoryservice.DeleteLogSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteLogSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLogSubscriptionAsync(ctx workflow.Context, input *directoryservice.DeleteLogSubscriptionInput) *DirectoryServiceDeleteLogSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteLogSubscription", input)
	return &DirectoryServiceDeleteLogSubscriptionFuture{Future: future}
}

func (a *stub) DeleteSnapshot(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) (*directoryservice.DeleteSnapshotOutput, error) {
	var output directoryservice.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotAsync(ctx workflow.Context, input *directoryservice.DeleteSnapshotInput) *DirectoryServiceDeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteSnapshot", input)
	return &DirectoryServiceDeleteSnapshotFuture{Future: future}
}

func (a *stub) DeleteTrust(ctx workflow.Context, input *directoryservice.DeleteTrustInput) (*directoryservice.DeleteTrustOutput, error) {
	var output directoryservice.DeleteTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrustAsync(ctx workflow.Context, input *directoryservice.DeleteTrustInput) *DirectoryServiceDeleteTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeleteTrust", input)
	return &DirectoryServiceDeleteTrustFuture{Future: future}
}

func (a *stub) DeregisterCertificate(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) (*directoryservice.DeregisterCertificateOutput, error) {
	var output directoryservice.DeregisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterCertificateAsync(ctx workflow.Context, input *directoryservice.DeregisterCertificateInput) *DirectoryServiceDeregisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterCertificate", input)
	return &DirectoryServiceDeregisterCertificateFuture{Future: future}
}

func (a *stub) DeregisterEventTopic(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) (*directoryservice.DeregisterEventTopicOutput, error) {
	var output directoryservice.DeregisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterEventTopicAsync(ctx workflow.Context, input *directoryservice.DeregisterEventTopicInput) *DirectoryServiceDeregisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DeregisterEventTopic", input)
	return &DirectoryServiceDeregisterEventTopicFuture{Future: future}
}

func (a *stub) DescribeCertificate(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) (*directoryservice.DescribeCertificateOutput, error) {
	var output directoryservice.DescribeCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCertificateAsync(ctx workflow.Context, input *directoryservice.DescribeCertificateInput) *DirectoryServiceDescribeCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeCertificate", input)
	return &DirectoryServiceDescribeCertificateFuture{Future: future}
}

func (a *stub) DescribeConditionalForwarders(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	var output directoryservice.DescribeConditionalForwardersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeConditionalForwarders", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConditionalForwardersAsync(ctx workflow.Context, input *directoryservice.DescribeConditionalForwardersInput) *DirectoryServiceDescribeConditionalForwardersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeConditionalForwarders", input)
	return &DirectoryServiceDescribeConditionalForwardersFuture{Future: future}
}

func (a *stub) DescribeDirectories(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) (*directoryservice.DescribeDirectoriesOutput, error) {
	var output directoryservice.DescribeDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeDirectoriesInput) *DirectoryServiceDescribeDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDirectories", input)
	return &DirectoryServiceDescribeDirectoriesFuture{Future: future}
}

func (a *stub) DescribeDomainControllers(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) (*directoryservice.DescribeDomainControllersOutput, error) {
	var output directoryservice.DescribeDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDomainControllersAsync(ctx workflow.Context, input *directoryservice.DescribeDomainControllersInput) *DirectoryServiceDescribeDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeDomainControllers", input)
	return &DirectoryServiceDescribeDomainControllersFuture{Future: future}
}

func (a *stub) DescribeEventTopics(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) (*directoryservice.DescribeEventTopicsOutput, error) {
	var output directoryservice.DescribeEventTopicsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeEventTopics", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEventTopicsAsync(ctx workflow.Context, input *directoryservice.DescribeEventTopicsInput) *DirectoryServiceDescribeEventTopicsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeEventTopics", input)
	return &DirectoryServiceDescribeEventTopicsFuture{Future: future}
}

func (a *stub) DescribeLDAPSSettings(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	var output directoryservice.DescribeLDAPSSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeLDAPSSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLDAPSSettingsAsync(ctx workflow.Context, input *directoryservice.DescribeLDAPSSettingsInput) *DirectoryServiceDescribeLDAPSSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeLDAPSSettings", input)
	return &DirectoryServiceDescribeLDAPSSettingsFuture{Future: future}
}

func (a *stub) DescribeSharedDirectories(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	var output directoryservice.DescribeSharedDirectoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSharedDirectories", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSharedDirectoriesAsync(ctx workflow.Context, input *directoryservice.DescribeSharedDirectoriesInput) *DirectoryServiceDescribeSharedDirectoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSharedDirectories", input)
	return &DirectoryServiceDescribeSharedDirectoriesFuture{Future: future}
}

func (a *stub) DescribeSnapshots(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) (*directoryservice.DescribeSnapshotsOutput, error) {
	var output directoryservice.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotsAsync(ctx workflow.Context, input *directoryservice.DescribeSnapshotsInput) *DirectoryServiceDescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeSnapshots", input)
	return &DirectoryServiceDescribeSnapshotsFuture{Future: future}
}

func (a *stub) DescribeTrusts(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) (*directoryservice.DescribeTrustsOutput, error) {
	var output directoryservice.DescribeTrustsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeTrusts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrustsAsync(ctx workflow.Context, input *directoryservice.DescribeTrustsInput) *DirectoryServiceDescribeTrustsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DescribeTrusts", input)
	return &DirectoryServiceDescribeTrustsFuture{Future: future}
}

func (a *stub) DisableLDAPS(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) (*directoryservice.DisableLDAPSOutput, error) {
	var output directoryservice.DisableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableLDAPSAsync(ctx workflow.Context, input *directoryservice.DisableLDAPSInput) *DirectoryServiceDisableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableLDAPS", input)
	return &DirectoryServiceDisableLDAPSFuture{Future: future}
}

func (a *stub) DisableRadius(ctx workflow.Context, input *directoryservice.DisableRadiusInput) (*directoryservice.DisableRadiusOutput, error) {
	var output directoryservice.DisableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableRadiusAsync(ctx workflow.Context, input *directoryservice.DisableRadiusInput) *DirectoryServiceDisableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableRadius", input)
	return &DirectoryServiceDisableRadiusFuture{Future: future}
}

func (a *stub) DisableSso(ctx workflow.Context, input *directoryservice.DisableSsoInput) (*directoryservice.DisableSsoOutput, error) {
	var output directoryservice.DisableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableSsoAsync(ctx workflow.Context, input *directoryservice.DisableSsoInput) *DirectoryServiceDisableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-DisableSso", input)
	return &DirectoryServiceDisableSsoFuture{Future: future}
}

func (a *stub) EnableLDAPS(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) (*directoryservice.EnableLDAPSOutput, error) {
	var output directoryservice.EnableLDAPSOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableLDAPS", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableLDAPSAsync(ctx workflow.Context, input *directoryservice.EnableLDAPSInput) *DirectoryServiceEnableLDAPSFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableLDAPS", input)
	return &DirectoryServiceEnableLDAPSFuture{Future: future}
}

func (a *stub) EnableRadius(ctx workflow.Context, input *directoryservice.EnableRadiusInput) (*directoryservice.EnableRadiusOutput, error) {
	var output directoryservice.EnableRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableRadiusAsync(ctx workflow.Context, input *directoryservice.EnableRadiusInput) *DirectoryServiceEnableRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableRadius", input)
	return &DirectoryServiceEnableRadiusFuture{Future: future}
}

func (a *stub) EnableSso(ctx workflow.Context, input *directoryservice.EnableSsoInput) (*directoryservice.EnableSsoOutput, error) {
	var output directoryservice.EnableSsoOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableSso", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableSsoAsync(ctx workflow.Context, input *directoryservice.EnableSsoInput) *DirectoryServiceEnableSsoFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-EnableSso", input)
	return &DirectoryServiceEnableSsoFuture{Future: future}
}

func (a *stub) GetDirectoryLimits(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) (*directoryservice.GetDirectoryLimitsOutput, error) {
	var output directoryservice.GetDirectoryLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetDirectoryLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDirectoryLimitsAsync(ctx workflow.Context, input *directoryservice.GetDirectoryLimitsInput) *DirectoryServiceGetDirectoryLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetDirectoryLimits", input)
	return &DirectoryServiceGetDirectoryLimitsFuture{Future: future}
}

func (a *stub) GetSnapshotLimits(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) (*directoryservice.GetSnapshotLimitsOutput, error) {
	var output directoryservice.GetSnapshotLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetSnapshotLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetSnapshotLimitsAsync(ctx workflow.Context, input *directoryservice.GetSnapshotLimitsInput) *DirectoryServiceGetSnapshotLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-GetSnapshotLimits", input)
	return &DirectoryServiceGetSnapshotLimitsFuture{Future: future}
}

func (a *stub) ListCertificates(ctx workflow.Context, input *directoryservice.ListCertificatesInput) (*directoryservice.ListCertificatesOutput, error) {
	var output directoryservice.ListCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListCertificatesAsync(ctx workflow.Context, input *directoryservice.ListCertificatesInput) *DirectoryServiceListCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListCertificates", input)
	return &DirectoryServiceListCertificatesFuture{Future: future}
}

func (a *stub) ListIpRoutes(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) (*directoryservice.ListIpRoutesOutput, error) {
	var output directoryservice.ListIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListIpRoutesAsync(ctx workflow.Context, input *directoryservice.ListIpRoutesInput) *DirectoryServiceListIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListIpRoutes", input)
	return &DirectoryServiceListIpRoutesFuture{Future: future}
}

func (a *stub) ListLogSubscriptions(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) (*directoryservice.ListLogSubscriptionsOutput, error) {
	var output directoryservice.ListLogSubscriptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListLogSubscriptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListLogSubscriptionsAsync(ctx workflow.Context, input *directoryservice.ListLogSubscriptionsInput) *DirectoryServiceListLogSubscriptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListLogSubscriptions", input)
	return &DirectoryServiceListLogSubscriptionsFuture{Future: future}
}

func (a *stub) ListSchemaExtensions(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) (*directoryservice.ListSchemaExtensionsOutput, error) {
	var output directoryservice.ListSchemaExtensionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListSchemaExtensions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListSchemaExtensionsAsync(ctx workflow.Context, input *directoryservice.ListSchemaExtensionsInput) *DirectoryServiceListSchemaExtensionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListSchemaExtensions", input)
	return &DirectoryServiceListSchemaExtensionsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) (*directoryservice.ListTagsForResourceOutput, error) {
	var output directoryservice.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *directoryservice.ListTagsForResourceInput) *DirectoryServiceListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ListTagsForResource", input)
	return &DirectoryServiceListTagsForResourceFuture{Future: future}
}

func (a *stub) RegisterCertificate(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) (*directoryservice.RegisterCertificateOutput, error) {
	var output directoryservice.RegisterCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterCertificateAsync(ctx workflow.Context, input *directoryservice.RegisterCertificateInput) *DirectoryServiceRegisterCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterCertificate", input)
	return &DirectoryServiceRegisterCertificateFuture{Future: future}
}

func (a *stub) RegisterEventTopic(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) (*directoryservice.RegisterEventTopicOutput, error) {
	var output directoryservice.RegisterEventTopicOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterEventTopic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterEventTopicAsync(ctx workflow.Context, input *directoryservice.RegisterEventTopicInput) *DirectoryServiceRegisterEventTopicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RegisterEventTopic", input)
	return &DirectoryServiceRegisterEventTopicFuture{Future: future}
}

func (a *stub) RejectSharedDirectory(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) (*directoryservice.RejectSharedDirectoryOutput, error) {
	var output directoryservice.RejectSharedDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RejectSharedDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectSharedDirectoryAsync(ctx workflow.Context, input *directoryservice.RejectSharedDirectoryInput) *DirectoryServiceRejectSharedDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RejectSharedDirectory", input)
	return &DirectoryServiceRejectSharedDirectoryFuture{Future: future}
}

func (a *stub) RemoveIpRoutes(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) (*directoryservice.RemoveIpRoutesOutput, error) {
	var output directoryservice.RemoveIpRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveIpRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveIpRoutesAsync(ctx workflow.Context, input *directoryservice.RemoveIpRoutesInput) *DirectoryServiceRemoveIpRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveIpRoutes", input)
	return &DirectoryServiceRemoveIpRoutesFuture{Future: future}
}

func (a *stub) RemoveTagsFromResource(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	var output directoryservice.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *directoryservice.RemoveTagsFromResourceInput) *DirectoryServiceRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RemoveTagsFromResource", input)
	return &DirectoryServiceRemoveTagsFromResourceFuture{Future: future}
}

func (a *stub) ResetUserPassword(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) (*directoryservice.ResetUserPasswordOutput, error) {
	var output directoryservice.ResetUserPasswordOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ResetUserPassword", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetUserPasswordAsync(ctx workflow.Context, input *directoryservice.ResetUserPasswordInput) *DirectoryServiceResetUserPasswordFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ResetUserPassword", input)
	return &DirectoryServiceResetUserPasswordFuture{Future: future}
}

func (a *stub) RestoreFromSnapshot(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) (*directoryservice.RestoreFromSnapshotOutput, error) {
	var output directoryservice.RestoreFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-RestoreFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreFromSnapshotAsync(ctx workflow.Context, input *directoryservice.RestoreFromSnapshotInput) *DirectoryServiceRestoreFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-RestoreFromSnapshot", input)
	return &DirectoryServiceRestoreFromSnapshotFuture{Future: future}
}

func (a *stub) ShareDirectory(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) (*directoryservice.ShareDirectoryOutput, error) {
	var output directoryservice.ShareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-ShareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ShareDirectoryAsync(ctx workflow.Context, input *directoryservice.ShareDirectoryInput) *DirectoryServiceShareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-ShareDirectory", input)
	return &DirectoryServiceShareDirectoryFuture{Future: future}
}

func (a *stub) StartSchemaExtension(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) (*directoryservice.StartSchemaExtensionOutput, error) {
	var output directoryservice.StartSchemaExtensionOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-StartSchemaExtension", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartSchemaExtensionAsync(ctx workflow.Context, input *directoryservice.StartSchemaExtensionInput) *DirectoryServiceStartSchemaExtensionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-StartSchemaExtension", input)
	return &DirectoryServiceStartSchemaExtensionFuture{Future: future}
}

func (a *stub) UnshareDirectory(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) (*directoryservice.UnshareDirectoryOutput, error) {
	var output directoryservice.UnshareDirectoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UnshareDirectory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnshareDirectoryAsync(ctx workflow.Context, input *directoryservice.UnshareDirectoryInput) *DirectoryServiceUnshareDirectoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UnshareDirectory", input)
	return &DirectoryServiceUnshareDirectoryFuture{Future: future}
}

func (a *stub) UpdateConditionalForwarder(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	var output directoryservice.UpdateConditionalForwarderOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateConditionalForwarder", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateConditionalForwarderAsync(ctx workflow.Context, input *directoryservice.UpdateConditionalForwarderInput) *DirectoryServiceUpdateConditionalForwarderFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateConditionalForwarder", input)
	return &DirectoryServiceUpdateConditionalForwarderFuture{Future: future}
}

func (a *stub) UpdateNumberOfDomainControllers(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	var output directoryservice.UpdateNumberOfDomainControllersOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateNumberOfDomainControllers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateNumberOfDomainControllersAsync(ctx workflow.Context, input *directoryservice.UpdateNumberOfDomainControllersInput) *DirectoryServiceUpdateNumberOfDomainControllersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateNumberOfDomainControllers", input)
	return &DirectoryServiceUpdateNumberOfDomainControllersFuture{Future: future}
}

func (a *stub) UpdateRadius(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) (*directoryservice.UpdateRadiusOutput, error) {
	var output directoryservice.UpdateRadiusOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateRadius", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateRadiusAsync(ctx workflow.Context, input *directoryservice.UpdateRadiusInput) *DirectoryServiceUpdateRadiusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateRadius", input)
	return &DirectoryServiceUpdateRadiusFuture{Future: future}
}

func (a *stub) UpdateTrust(ctx workflow.Context, input *directoryservice.UpdateTrustInput) (*directoryservice.UpdateTrustOutput, error) {
	var output directoryservice.UpdateTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateTrustAsync(ctx workflow.Context, input *directoryservice.UpdateTrustInput) *DirectoryServiceUpdateTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-UpdateTrust", input)
	return &DirectoryServiceUpdateTrustFuture{Future: future}
}

func (a *stub) VerifyTrust(ctx workflow.Context, input *directoryservice.VerifyTrustInput) (*directoryservice.VerifyTrustOutput, error) {
	var output directoryservice.VerifyTrustOutput
	err := workflow.ExecuteActivity(ctx, "aws-directoryservice-VerifyTrust", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) VerifyTrustAsync(ctx workflow.Context, input *directoryservice.VerifyTrustInput) *DirectoryServiceVerifyTrustFuture {
	future := workflow.ExecuteActivity(ctx, "aws-directoryservice-VerifyTrust", input)
	return &DirectoryServiceVerifyTrustFuture{Future: future}
}
