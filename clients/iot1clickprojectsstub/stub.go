// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iot1clickprojectsstub

import (
	"github.com/aws/aws-sdk-go/service/iot1clickprojects"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type IoT1ClickProjectsAssociateDeviceWithPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsAssociateDeviceWithPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.AssociateDeviceWithPlacementOutput, error) {
	var output iot1clickprojects.AssociateDeviceWithPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsCreatePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsCreatePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.CreatePlacementOutput, error) {
	var output iot1clickprojects.CreatePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsCreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsCreateProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.CreateProjectOutput, error) {
	var output iot1clickprojects.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsDeletePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsDeletePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DeletePlacementOutput, error) {
	var output iot1clickprojects.DeletePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsDeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsDeleteProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.DeleteProjectOutput, error) {
	var output iot1clickprojects.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsDescribePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsDescribePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DescribePlacementOutput, error) {
	var output iot1clickprojects.DescribePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsDescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsDescribeProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.DescribeProjectOutput, error) {
	var output iot1clickprojects.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsDisassociateDeviceFromPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsDisassociateDeviceFromPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DisassociateDeviceFromPlacementOutput, error) {
	var output iot1clickprojects.DisassociateDeviceFromPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsGetDevicesInPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsGetDevicesInPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.GetDevicesInPlacementOutput, error) {
	var output iot1clickprojects.GetDevicesInPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsListPlacementsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsListPlacementsFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListPlacementsOutput, error) {
	var output iot1clickprojects.ListPlacementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsListProjectsFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListProjectsOutput, error) {
	var output iot1clickprojects.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsListTagsForResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListTagsForResourceOutput, error) {
	var output iot1clickprojects.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsTagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsTagResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.TagResourceOutput, error) {
	var output iot1clickprojects.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsUntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsUntagResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.UntagResourceOutput, error) {
	var output iot1clickprojects.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsUpdatePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsUpdatePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.UpdatePlacementOutput, error) {
	var output iot1clickprojects.UpdatePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type IoT1ClickProjectsUpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *IoT1ClickProjectsUpdateProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.UpdateProjectOutput, error) {
	var output iot1clickprojects.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithPlacement(ctx workflow.Context, input *iot1clickprojects.AssociateDeviceWithPlacementInput) (*iot1clickprojects.AssociateDeviceWithPlacementOutput, error) {
	var output iot1clickprojects.AssociateDeviceWithPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-AssociateDeviceWithPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithPlacementAsync(ctx workflow.Context, input *iot1clickprojects.AssociateDeviceWithPlacementInput) *IoT1ClickProjectsAssociateDeviceWithPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-AssociateDeviceWithPlacement", input)
	return &IoT1ClickProjectsAssociateDeviceWithPlacementFuture{Future: future}
}

func (a *stub) CreatePlacement(ctx workflow.Context, input *iot1clickprojects.CreatePlacementInput) (*iot1clickprojects.CreatePlacementOutput, error) {
	var output iot1clickprojects.CreatePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreatePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlacementAsync(ctx workflow.Context, input *iot1clickprojects.CreatePlacementInput) *IoT1ClickProjectsCreatePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreatePlacement", input)
	return &IoT1ClickProjectsCreatePlacementFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *iot1clickprojects.CreateProjectInput) (*iot1clickprojects.CreateProjectOutput, error) {
	var output iot1clickprojects.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *iot1clickprojects.CreateProjectInput) *IoT1ClickProjectsCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreateProject", input)
	return &IoT1ClickProjectsCreateProjectFuture{Future: future}
}

func (a *stub) DeletePlacement(ctx workflow.Context, input *iot1clickprojects.DeletePlacementInput) (*iot1clickprojects.DeletePlacementOutput, error) {
	var output iot1clickprojects.DeletePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeletePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlacementAsync(ctx workflow.Context, input *iot1clickprojects.DeletePlacementInput) *IoT1ClickProjectsDeletePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeletePlacement", input)
	return &IoT1ClickProjectsDeletePlacementFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *iot1clickprojects.DeleteProjectInput) (*iot1clickprojects.DeleteProjectOutput, error) {
	var output iot1clickprojects.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *iot1clickprojects.DeleteProjectInput) *IoT1ClickProjectsDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeleteProject", input)
	return &IoT1ClickProjectsDeleteProjectFuture{Future: future}
}

func (a *stub) DescribePlacement(ctx workflow.Context, input *iot1clickprojects.DescribePlacementInput) (*iot1clickprojects.DescribePlacementOutput, error) {
	var output iot1clickprojects.DescribePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlacementAsync(ctx workflow.Context, input *iot1clickprojects.DescribePlacementInput) *IoT1ClickProjectsDescribePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribePlacement", input)
	return &IoT1ClickProjectsDescribePlacementFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *iot1clickprojects.DescribeProjectInput) (*iot1clickprojects.DescribeProjectOutput, error) {
	var output iot1clickprojects.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *iot1clickprojects.DescribeProjectInput) *IoT1ClickProjectsDescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribeProject", input)
	return &IoT1ClickProjectsDescribeProjectFuture{Future: future}
}

func (a *stub) DisassociateDeviceFromPlacement(ctx workflow.Context, input *iot1clickprojects.DisassociateDeviceFromPlacementInput) (*iot1clickprojects.DisassociateDeviceFromPlacementOutput, error) {
	var output iot1clickprojects.DisassociateDeviceFromPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DisassociateDeviceFromPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDeviceFromPlacementAsync(ctx workflow.Context, input *iot1clickprojects.DisassociateDeviceFromPlacementInput) *IoT1ClickProjectsDisassociateDeviceFromPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DisassociateDeviceFromPlacement", input)
	return &IoT1ClickProjectsDisassociateDeviceFromPlacementFuture{Future: future}
}

func (a *stub) GetDevicesInPlacement(ctx workflow.Context, input *iot1clickprojects.GetDevicesInPlacementInput) (*iot1clickprojects.GetDevicesInPlacementOutput, error) {
	var output iot1clickprojects.GetDevicesInPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-GetDevicesInPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicesInPlacementAsync(ctx workflow.Context, input *iot1clickprojects.GetDevicesInPlacementInput) *IoT1ClickProjectsGetDevicesInPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-GetDevicesInPlacement", input)
	return &IoT1ClickProjectsGetDevicesInPlacementFuture{Future: future}
}

func (a *stub) ListPlacements(ctx workflow.Context, input *iot1clickprojects.ListPlacementsInput) (*iot1clickprojects.ListPlacementsOutput, error) {
	var output iot1clickprojects.ListPlacementsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListPlacements", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlacementsAsync(ctx workflow.Context, input *iot1clickprojects.ListPlacementsInput) *IoT1ClickProjectsListPlacementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListPlacements", input)
	return &IoT1ClickProjectsListPlacementsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *iot1clickprojects.ListProjectsInput) (*iot1clickprojects.ListProjectsOutput, error) {
	var output iot1clickprojects.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *iot1clickprojects.ListProjectsInput) *IoT1ClickProjectsListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListProjects", input)
	return &IoT1ClickProjectsListProjectsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iot1clickprojects.ListTagsForResourceInput) (*iot1clickprojects.ListTagsForResourceOutput, error) {
	var output iot1clickprojects.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iot1clickprojects.ListTagsForResourceInput) *IoT1ClickProjectsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListTagsForResource", input)
	return &IoT1ClickProjectsListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iot1clickprojects.TagResourceInput) (*iot1clickprojects.TagResourceOutput, error) {
	var output iot1clickprojects.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iot1clickprojects.TagResourceInput) *IoT1ClickProjectsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-TagResource", input)
	return &IoT1ClickProjectsTagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iot1clickprojects.UntagResourceInput) (*iot1clickprojects.UntagResourceOutput, error) {
	var output iot1clickprojects.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iot1clickprojects.UntagResourceInput) *IoT1ClickProjectsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UntagResource", input)
	return &IoT1ClickProjectsUntagResourceFuture{Future: future}
}

func (a *stub) UpdatePlacement(ctx workflow.Context, input *iot1clickprojects.UpdatePlacementInput) (*iot1clickprojects.UpdatePlacementOutput, error) {
	var output iot1clickprojects.UpdatePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdatePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePlacementAsync(ctx workflow.Context, input *iot1clickprojects.UpdatePlacementInput) *IoT1ClickProjectsUpdatePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdatePlacement", input)
	return &IoT1ClickProjectsUpdatePlacementFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *iot1clickprojects.UpdateProjectInput) (*iot1clickprojects.UpdateProjectOutput, error) {
	var output iot1clickprojects.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *iot1clickprojects.UpdateProjectInput) *IoT1ClickProjectsUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdateProject", input)
	return &IoT1ClickProjectsUpdateProjectFuture{Future: future}
}
