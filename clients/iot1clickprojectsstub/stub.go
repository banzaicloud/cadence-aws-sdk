// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package iot1clickprojectsstub

import (
	"github.com/aws/aws-sdk-go/service/iot1clickprojects"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AssociateDeviceWithPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDeviceWithPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.AssociateDeviceWithPlacementOutput, error) {
	var output iot1clickprojects.AssociateDeviceWithPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.CreatePlacementOutput, error) {
	var output iot1clickprojects.CreatePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.CreateProjectOutput, error) {
	var output iot1clickprojects.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DeletePlacementOutput, error) {
	var output iot1clickprojects.DeletePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.DeleteProjectOutput, error) {
	var output iot1clickprojects.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DescribePlacementOutput, error) {
	var output iot1clickprojects.DescribePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.DescribeProjectOutput, error) {
	var output iot1clickprojects.DescribeProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateDeviceFromPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateDeviceFromPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.DisassociateDeviceFromPlacementOutput, error) {
	var output iot1clickprojects.DisassociateDeviceFromPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDevicesInPlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDevicesInPlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.GetDevicesInPlacementOutput, error) {
	var output iot1clickprojects.GetDevicesInPlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListPlacementsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListPlacementsFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListPlacementsOutput, error) {
	var output iot1clickprojects.ListPlacementsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListProjectsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListProjectsFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListProjectsOutput, error) {
	var output iot1clickprojects.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ListTagsForResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ListTagsForResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.ListTagsForResourceOutput, error) {
	var output iot1clickprojects.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TagResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.TagResourceOutput, error) {
	var output iot1clickprojects.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UntagResourceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UntagResourceFuture) Get(ctx workflow.Context) (*iot1clickprojects.UntagResourceOutput, error) {
	var output iot1clickprojects.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdatePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdatePlacementFuture) Get(ctx workflow.Context) (*iot1clickprojects.UpdatePlacementOutput, error) {
	var output iot1clickprojects.UpdatePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateProjectFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateProjectFuture) Get(ctx workflow.Context) (*iot1clickprojects.UpdateProjectOutput, error) {
	var output iot1clickprojects.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithPlacement(ctx workflow.Context, input *iot1clickprojects.AssociateDeviceWithPlacementInput) (*iot1clickprojects.AssociateDeviceWithPlacementOutput, error) {
	var output iot1clickprojects.AssociateDeviceWithPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-AssociateDeviceWithPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDeviceWithPlacementAsync(ctx workflow.Context, input *iot1clickprojects.AssociateDeviceWithPlacementInput) *AssociateDeviceWithPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-AssociateDeviceWithPlacement", input)
	return &AssociateDeviceWithPlacementFuture{Future: future}
}

func (a *stub) CreatePlacement(ctx workflow.Context, input *iot1clickprojects.CreatePlacementInput) (*iot1clickprojects.CreatePlacementOutput, error) {
	var output iot1clickprojects.CreatePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreatePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlacementAsync(ctx workflow.Context, input *iot1clickprojects.CreatePlacementInput) *CreatePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreatePlacement", input)
	return &CreatePlacementFuture{Future: future}
}

func (a *stub) CreateProject(ctx workflow.Context, input *iot1clickprojects.CreateProjectInput) (*iot1clickprojects.CreateProjectOutput, error) {
	var output iot1clickprojects.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateProjectAsync(ctx workflow.Context, input *iot1clickprojects.CreateProjectInput) *CreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-CreateProject", input)
	return &CreateProjectFuture{Future: future}
}

func (a *stub) DeletePlacement(ctx workflow.Context, input *iot1clickprojects.DeletePlacementInput) (*iot1clickprojects.DeletePlacementOutput, error) {
	var output iot1clickprojects.DeletePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeletePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlacementAsync(ctx workflow.Context, input *iot1clickprojects.DeletePlacementInput) *DeletePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeletePlacement", input)
	return &DeletePlacementFuture{Future: future}
}

func (a *stub) DeleteProject(ctx workflow.Context, input *iot1clickprojects.DeleteProjectInput) (*iot1clickprojects.DeleteProjectOutput, error) {
	var output iot1clickprojects.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteProjectAsync(ctx workflow.Context, input *iot1clickprojects.DeleteProjectInput) *DeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DeleteProject", input)
	return &DeleteProjectFuture{Future: future}
}

func (a *stub) DescribePlacement(ctx workflow.Context, input *iot1clickprojects.DescribePlacementInput) (*iot1clickprojects.DescribePlacementOutput, error) {
	var output iot1clickprojects.DescribePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlacementAsync(ctx workflow.Context, input *iot1clickprojects.DescribePlacementInput) *DescribePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribePlacement", input)
	return &DescribePlacementFuture{Future: future}
}

func (a *stub) DescribeProject(ctx workflow.Context, input *iot1clickprojects.DescribeProjectInput) (*iot1clickprojects.DescribeProjectOutput, error) {
	var output iot1clickprojects.DescribeProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribeProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeProjectAsync(ctx workflow.Context, input *iot1clickprojects.DescribeProjectInput) *DescribeProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DescribeProject", input)
	return &DescribeProjectFuture{Future: future}
}

func (a *stub) DisassociateDeviceFromPlacement(ctx workflow.Context, input *iot1clickprojects.DisassociateDeviceFromPlacementInput) (*iot1clickprojects.DisassociateDeviceFromPlacementOutput, error) {
	var output iot1clickprojects.DisassociateDeviceFromPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DisassociateDeviceFromPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateDeviceFromPlacementAsync(ctx workflow.Context, input *iot1clickprojects.DisassociateDeviceFromPlacementInput) *DisassociateDeviceFromPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-DisassociateDeviceFromPlacement", input)
	return &DisassociateDeviceFromPlacementFuture{Future: future}
}

func (a *stub) GetDevicesInPlacement(ctx workflow.Context, input *iot1clickprojects.GetDevicesInPlacementInput) (*iot1clickprojects.GetDevicesInPlacementOutput, error) {
	var output iot1clickprojects.GetDevicesInPlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-GetDevicesInPlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDevicesInPlacementAsync(ctx workflow.Context, input *iot1clickprojects.GetDevicesInPlacementInput) *GetDevicesInPlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-GetDevicesInPlacement", input)
	return &GetDevicesInPlacementFuture{Future: future}
}

func (a *stub) ListPlacements(ctx workflow.Context, input *iot1clickprojects.ListPlacementsInput) (*iot1clickprojects.ListPlacementsOutput, error) {
	var output iot1clickprojects.ListPlacementsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListPlacements", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListPlacementsAsync(ctx workflow.Context, input *iot1clickprojects.ListPlacementsInput) *ListPlacementsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListPlacements", input)
	return &ListPlacementsFuture{Future: future}
}

func (a *stub) ListProjects(ctx workflow.Context, input *iot1clickprojects.ListProjectsInput) (*iot1clickprojects.ListProjectsOutput, error) {
	var output iot1clickprojects.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListProjectsAsync(ctx workflow.Context, input *iot1clickprojects.ListProjectsInput) *ListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListProjects", input)
	return &ListProjectsFuture{Future: future}
}

func (a *stub) ListTagsForResource(ctx workflow.Context, input *iot1clickprojects.ListTagsForResourceInput) (*iot1clickprojects.ListTagsForResourceOutput, error) {
	var output iot1clickprojects.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ListTagsForResourceAsync(ctx workflow.Context, input *iot1clickprojects.ListTagsForResourceInput) *ListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-ListTagsForResource", input)
	return &ListTagsForResourceFuture{Future: future}
}

func (a *stub) TagResource(ctx workflow.Context, input *iot1clickprojects.TagResourceInput) (*iot1clickprojects.TagResourceOutput, error) {
	var output iot1clickprojects.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TagResourceAsync(ctx workflow.Context, input *iot1clickprojects.TagResourceInput) *TagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-TagResource", input)
	return &TagResourceFuture{Future: future}
}

func (a *stub) UntagResource(ctx workflow.Context, input *iot1clickprojects.UntagResourceInput) (*iot1clickprojects.UntagResourceOutput, error) {
	var output iot1clickprojects.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UntagResourceAsync(ctx workflow.Context, input *iot1clickprojects.UntagResourceInput) *UntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UntagResource", input)
	return &UntagResourceFuture{Future: future}
}

func (a *stub) UpdatePlacement(ctx workflow.Context, input *iot1clickprojects.UpdatePlacementInput) (*iot1clickprojects.UpdatePlacementOutput, error) {
	var output iot1clickprojects.UpdatePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdatePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdatePlacementAsync(ctx workflow.Context, input *iot1clickprojects.UpdatePlacementInput) *UpdatePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdatePlacement", input)
	return &UpdatePlacementFuture{Future: future}
}

func (a *stub) UpdateProject(ctx workflow.Context, input *iot1clickprojects.UpdateProjectInput) (*iot1clickprojects.UpdateProjectOutput, error) {
	var output iot1clickprojects.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateProjectAsync(ctx workflow.Context, input *iot1clickprojects.UpdateProjectInput) *UpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws-iot1clickprojects-UpdateProject", input)
	return &UpdateProjectFuture{Future: future}
}
