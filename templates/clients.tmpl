{{- $services := .Services -}}
{{- $sdkVersion := .Version -}}

{{- range $services -}}
{{ $id := .ID -}}
{{ $name := .Name -}}
{{ $lowerName := .Name |ToLower -}}
{{ SetFileName ( print "clients/" $lowerName  "stub/interface.go") -}}
// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version {{ $sdkVersion }}

package {{ $lowerName }}stub

import (
{{- range .Imports }}
	"github.com/aws/aws-sdk-go/service/{{ . }}"
{{- end }}
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type Client interface {
{{- range $i, $method := .Methods }}
{{- if HasPrefix $method.Name "Wait" }}
{{"	"}}{{ $method.Name }}(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) error
{{"	"}}{{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) *clients.VoidFuture
{{ else }}
{{- $prefix := CapitalizeFirstLetter $method.Output.Package }}
{{ "	"}}{{ $method.Name }}(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) (*{{ $method.Output.Package }}.{{ $method.Output.Name }}, error)
{{ "	"}}{{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) *{{ $method.Name }}Future
{{ end }}
{{- end -}}
}

func NewClient() Client {
	return &stub{}
}
{{ SetFileName ( print "clients/" $lowerName  "stub/stub.go") -}}
// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version {{ $sdkVersion }}

package {{ $lowerName }}stub

import (
{{- range .Imports }}
	"github.com/aws/aws-sdk-go/service/{{ . }}"
{{- end }}
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

{{- range $i, $method := .Methods }}
{{- if not (IsNil $method.Output) }}
{{ $prefix := CapitalizeFirstLetter $method.Output.Package }}
type {{ $method.Name }}Future struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *{{ $method.Name }}Future) Get(ctx workflow.Context) (*{{ $method.Output.Package }}.{{ $method.Output.Name }}, error) {
	var output {{ $method.Output.Package }}.{{ $method.Output.Name }}
	err := r.Future.Get(ctx, &output)
	return &output, err
}
{{- end }}
{{- end }}
{{ range $i, $method := .Methods }}
{{- if HasPrefix $method.Name "Wait" }}
func (a *stub) {{ $method.Name }}(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) error {
	return workflow.ExecuteActivity(ctx, "aws-{{ $id }}-{{$method.Name}}", input).Get(ctx, nil)
}

func (a *stub) {{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-{{ $id }}-{{$method.Name}}", input)
	return clients.NewVoidFuture(future)
}
{{ else }}
{{- $prefix := CapitalizeFirstLetter $method.Output.Package }}
func (a *stub) {{ $method.Name }}(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) (*{{ $method.Output.Package }}.{{ $method.Output.Name }}, error) {
	var output {{ $method.Output.Package }}.{{ $method.Output.Name }}
	err := workflow.ExecuteActivity(ctx, "aws-{{ $id }}-{{$method.Name}}", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) {{ $method.Name }}Async(ctx workflow.Context, input *{{ $method.Input.Package }}.{{ $method.Input.Name }}) *{{ $method.Name }}Future {
	future := workflow.ExecuteActivity(ctx, "aws-{{ $id }}-{{$method.Name}}", input)
	return &{{ $method.Name }}Future{Future: future}
}
{{ end -}}
{{- end -}}
{{- end -}}
