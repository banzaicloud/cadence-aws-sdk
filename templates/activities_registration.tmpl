{{- SetFileName "activities/activities.go" -}}
{{- $services := .Services -}}
// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version {{ .Version }}

package activities

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	{{- range $services }}
	{{- $name := .Name }}
    {{- $lowerName := .Name |ToLower }}
	"github.com/banzaicloud/cadence-aws-sdk/activities/{{ $lowerName }}"
    {{- end }}
	"go.uber.org/cadence/activity"
	"go.uber.org/cadence/worker"
)

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

// RegisterAwsActivities registers AWS activities with a single session.
// Use this registration method if your worker will only use a single set of credentials for authentication.
func RegisterAwsActivities(worker worker.Worker, sess *session.Session, config ...*aws.Config) {
{{- range $services }}
{{- $name := .Name }}
{{- $lowerName := .Name |ToLower }}
	worker.RegisterActivityWithOptions({{ $lowerName }}.NewActivities(sess, config...), activity.RegisterOptions{Name: "aws-{{.ID}}-"})
{{- end }}
}

// RegisterAwsActivitiesWithSessionFactory registers AWS activities with a session factory that creates a session for every activity execution.
// Use this registration method if your activities will receive credentials in the context for each activity execution.
func RegisterAwsActivitiesWithSessionFactory(worker worker.Worker, sessionFactory SessionFactory) {
{{- range $services }}
{{- $name := .Name }}
{{- $lowerName := .Name |ToLower }}
	worker.RegisterActivityWithOptions({{ $lowerName }}.NewActivitiesWithSessionFactory(sessionFactory), activity.RegisterOptions{Name: "aws-{{.ID}}-"})
{{- end }}
}
