// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package wellarchitected

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/wellarchitected"
	"github.com/aws/aws-sdk-go/service/wellarchitected/wellarchitectediface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client wellarchitectediface.WellArchitectedAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := wellarchitected.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (wellarchitectediface.WellArchitectedAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return wellarchitected.New(sess), nil
}

func (a *Activities) AssociateLenses(ctx context.Context, input *wellarchitected.AssociateLensesInput) (*wellarchitected.AssociateLensesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateLensesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateMilestone(ctx context.Context, input *wellarchitected.CreateMilestoneInput) (*wellarchitected.CreateMilestoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateMilestoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateWorkload(ctx context.Context, input *wellarchitected.CreateWorkloadInput) (*wellarchitected.CreateWorkloadOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateWorkloadWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateWorkloadShare(ctx context.Context, input *wellarchitected.CreateWorkloadShareInput) (*wellarchitected.CreateWorkloadShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateWorkloadShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteWorkload(ctx context.Context, input *wellarchitected.DeleteWorkloadInput) (*wellarchitected.DeleteWorkloadOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteWorkloadWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteWorkloadShare(ctx context.Context, input *wellarchitected.DeleteWorkloadShareInput) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteWorkloadShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateLenses(ctx context.Context, input *wellarchitected.DisassociateLensesInput) (*wellarchitected.DisassociateLensesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateLensesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAnswer(ctx context.Context, input *wellarchitected.GetAnswerInput) (*wellarchitected.GetAnswerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAnswerWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLensReview(ctx context.Context, input *wellarchitected.GetLensReviewInput) (*wellarchitected.GetLensReviewOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLensReviewWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLensReviewReport(ctx context.Context, input *wellarchitected.GetLensReviewReportInput) (*wellarchitected.GetLensReviewReportOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLensReviewReportWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLensVersionDifference(ctx context.Context, input *wellarchitected.GetLensVersionDifferenceInput) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLensVersionDifferenceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetMilestone(ctx context.Context, input *wellarchitected.GetMilestoneInput) (*wellarchitected.GetMilestoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetMilestoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetWorkload(ctx context.Context, input *wellarchitected.GetWorkloadInput) (*wellarchitected.GetWorkloadOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetWorkloadWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAnswers(ctx context.Context, input *wellarchitected.ListAnswersInput) (*wellarchitected.ListAnswersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAnswersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLensReviewImprovements(ctx context.Context, input *wellarchitected.ListLensReviewImprovementsInput) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLensReviewImprovementsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLensReviews(ctx context.Context, input *wellarchitected.ListLensReviewsInput) (*wellarchitected.ListLensReviewsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLensReviewsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLenses(ctx context.Context, input *wellarchitected.ListLensesInput) (*wellarchitected.ListLensesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLensesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListMilestones(ctx context.Context, input *wellarchitected.ListMilestonesInput) (*wellarchitected.ListMilestonesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListMilestonesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListNotifications(ctx context.Context, input *wellarchitected.ListNotificationsInput) (*wellarchitected.ListNotificationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListNotificationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListShareInvitations(ctx context.Context, input *wellarchitected.ListShareInvitationsInput) (*wellarchitected.ListShareInvitationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListShareInvitationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListWorkloadShares(ctx context.Context, input *wellarchitected.ListWorkloadSharesInput) (*wellarchitected.ListWorkloadSharesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListWorkloadSharesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListWorkloads(ctx context.Context, input *wellarchitected.ListWorkloadsInput) (*wellarchitected.ListWorkloadsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListWorkloadsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAnswer(ctx context.Context, input *wellarchitected.UpdateAnswerInput) (*wellarchitected.UpdateAnswerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAnswerWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateLensReview(ctx context.Context, input *wellarchitected.UpdateLensReviewInput) (*wellarchitected.UpdateLensReviewOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateLensReviewWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateShareInvitation(ctx context.Context, input *wellarchitected.UpdateShareInvitationInput) (*wellarchitected.UpdateShareInvitationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateShareInvitationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateWorkload(ctx context.Context, input *wellarchitected.UpdateWorkloadInput) (*wellarchitected.UpdateWorkloadOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateWorkloadWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateWorkloadShare(ctx context.Context, input *wellarchitected.UpdateWorkloadShareInput) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateWorkloadShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpgradeLensReview(ctx context.Context, input *wellarchitected.UpgradeLensReviewInput) (*wellarchitected.UpgradeLensReviewOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpgradeLensReviewWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
