// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package gluedatabrew

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/gluedatabrew"
	"github.com/aws/aws-sdk-go/service/gluedatabrew/gluedatabrewiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client gluedatabrewiface.GlueDataBrewAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := gluedatabrew.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (gluedatabrewiface.GlueDataBrewAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return gluedatabrew.New(sess), nil
}

func (a *Activities) BatchDeleteRecipeVersion(ctx context.Context, input *gluedatabrew.BatchDeleteRecipeVersionInput) (*gluedatabrew.BatchDeleteRecipeVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDeleteRecipeVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDataset(ctx context.Context, input *gluedatabrew.CreateDatasetInput) (*gluedatabrew.CreateDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProfileJob(ctx context.Context, input *gluedatabrew.CreateProfileJobInput) (*gluedatabrew.CreateProfileJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProfileJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProject(ctx context.Context, input *gluedatabrew.CreateProjectInput) (*gluedatabrew.CreateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateRecipe(ctx context.Context, input *gluedatabrew.CreateRecipeInput) (*gluedatabrew.CreateRecipeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateRecipeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateRecipeJob(ctx context.Context, input *gluedatabrew.CreateRecipeJobInput) (*gluedatabrew.CreateRecipeJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateRecipeJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateSchedule(ctx context.Context, input *gluedatabrew.CreateScheduleInput) (*gluedatabrew.CreateScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDataset(ctx context.Context, input *gluedatabrew.DeleteDatasetInput) (*gluedatabrew.DeleteDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteJob(ctx context.Context, input *gluedatabrew.DeleteJobInput) (*gluedatabrew.DeleteJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProject(ctx context.Context, input *gluedatabrew.DeleteProjectInput) (*gluedatabrew.DeleteProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteRecipeVersion(ctx context.Context, input *gluedatabrew.DeleteRecipeVersionInput) (*gluedatabrew.DeleteRecipeVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteRecipeVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteSchedule(ctx context.Context, input *gluedatabrew.DeleteScheduleInput) (*gluedatabrew.DeleteScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDataset(ctx context.Context, input *gluedatabrew.DescribeDatasetInput) (*gluedatabrew.DescribeDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeJob(ctx context.Context, input *gluedatabrew.DescribeJobInput) (*gluedatabrew.DescribeJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProject(ctx context.Context, input *gluedatabrew.DescribeProjectInput) (*gluedatabrew.DescribeProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeRecipe(ctx context.Context, input *gluedatabrew.DescribeRecipeInput) (*gluedatabrew.DescribeRecipeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeRecipeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeSchedule(ctx context.Context, input *gluedatabrew.DescribeScheduleInput) (*gluedatabrew.DescribeScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDatasets(ctx context.Context, input *gluedatabrew.ListDatasetsInput) (*gluedatabrew.ListDatasetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDatasetsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListJobRuns(ctx context.Context, input *gluedatabrew.ListJobRunsInput) (*gluedatabrew.ListJobRunsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListJobRunsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListJobs(ctx context.Context, input *gluedatabrew.ListJobsInput) (*gluedatabrew.ListJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProjects(ctx context.Context, input *gluedatabrew.ListProjectsInput) (*gluedatabrew.ListProjectsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProjectsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListRecipeVersions(ctx context.Context, input *gluedatabrew.ListRecipeVersionsInput) (*gluedatabrew.ListRecipeVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListRecipeVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListRecipes(ctx context.Context, input *gluedatabrew.ListRecipesInput) (*gluedatabrew.ListRecipesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListRecipesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSchedules(ctx context.Context, input *gluedatabrew.ListSchedulesInput) (*gluedatabrew.ListSchedulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSchedulesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *gluedatabrew.ListTagsForResourceInput) (*gluedatabrew.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PublishRecipe(ctx context.Context, input *gluedatabrew.PublishRecipeInput) (*gluedatabrew.PublishRecipeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PublishRecipeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) SendProjectSessionAction(ctx context.Context, input *gluedatabrew.SendProjectSessionActionInput) (*gluedatabrew.SendProjectSessionActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SendProjectSessionActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartJobRun(ctx context.Context, input *gluedatabrew.StartJobRunInput) (*gluedatabrew.StartJobRunOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartJobRunWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartProjectSession(ctx context.Context, input *gluedatabrew.StartProjectSessionInput) (*gluedatabrew.StartProjectSessionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartProjectSessionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopJobRun(ctx context.Context, input *gluedatabrew.StopJobRunInput) (*gluedatabrew.StopJobRunOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopJobRunWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *gluedatabrew.TagResourceInput) (*gluedatabrew.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *gluedatabrew.UntagResourceInput) (*gluedatabrew.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDataset(ctx context.Context, input *gluedatabrew.UpdateDatasetInput) (*gluedatabrew.UpdateDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProfileJob(ctx context.Context, input *gluedatabrew.UpdateProfileJobInput) (*gluedatabrew.UpdateProfileJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProfileJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProject(ctx context.Context, input *gluedatabrew.UpdateProjectInput) (*gluedatabrew.UpdateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateRecipe(ctx context.Context, input *gluedatabrew.UpdateRecipeInput) (*gluedatabrew.UpdateRecipeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateRecipeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateRecipeJob(ctx context.Context, input *gluedatabrew.UpdateRecipeJobInput) (*gluedatabrew.UpdateRecipeJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateRecipeJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateSchedule(ctx context.Context, input *gluedatabrew.UpdateScheduleInput) (*gluedatabrew.UpdateScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
