// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package servicecatalog

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"github.com/aws/aws-sdk-go/service/servicecatalog/servicecatalogiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client servicecatalogiface.ServiceCatalogAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := servicecatalog.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (servicecatalogiface.ServiceCatalogAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return servicecatalog.New(sess), nil
}

func (a *Activities) AcceptPortfolioShare(ctx context.Context, input *servicecatalog.AcceptPortfolioShareInput) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AcceptPortfolioShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateBudgetWithResource(ctx context.Context, input *servicecatalog.AssociateBudgetWithResourceInput) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateBudgetWithResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociatePrincipalWithPortfolio(ctx context.Context, input *servicecatalog.AssociatePrincipalWithPortfolioInput) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociatePrincipalWithPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateProductWithPortfolio(ctx context.Context, input *servicecatalog.AssociateProductWithPortfolioInput) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateProductWithPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateServiceActionWithProvisioningArtifact(ctx context.Context, input *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateServiceActionWithProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateTagOptionWithResource(ctx context.Context, input *servicecatalog.AssociateTagOptionWithResourceInput) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateTagOptionWithResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchAssociateServiceActionWithProvisioningArtifact(ctx context.Context, input *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchAssociateServiceActionWithProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchDisassociateServiceActionFromProvisioningArtifact(ctx context.Context, input *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDisassociateServiceActionFromProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CopyProduct(ctx context.Context, input *servicecatalog.CopyProductInput) (*servicecatalog.CopyProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CopyProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateConstraint(ctx context.Context, input *servicecatalog.CreateConstraintInput) (*servicecatalog.CreateConstraintOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateConstraintWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreatePortfolio(ctx context.Context, input *servicecatalog.CreatePortfolioInput) (*servicecatalog.CreatePortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreatePortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreatePortfolioShare(ctx context.Context, input *servicecatalog.CreatePortfolioShareInput) (*servicecatalog.CreatePortfolioShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreatePortfolioShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProduct(ctx context.Context, input *servicecatalog.CreateProductInput) (*servicecatalog.CreateProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProvisionedProductPlan(ctx context.Context, input *servicecatalog.CreateProvisionedProductPlanInput) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProvisionedProductPlanWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProvisioningArtifact(ctx context.Context, input *servicecatalog.CreateProvisioningArtifactInput) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateServiceAction(ctx context.Context, input *servicecatalog.CreateServiceActionInput) (*servicecatalog.CreateServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTagOption(ctx context.Context, input *servicecatalog.CreateTagOptionInput) (*servicecatalog.CreateTagOptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTagOptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteConstraint(ctx context.Context, input *servicecatalog.DeleteConstraintInput) (*servicecatalog.DeleteConstraintOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteConstraintWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeletePortfolio(ctx context.Context, input *servicecatalog.DeletePortfolioInput) (*servicecatalog.DeletePortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeletePortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeletePortfolioShare(ctx context.Context, input *servicecatalog.DeletePortfolioShareInput) (*servicecatalog.DeletePortfolioShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeletePortfolioShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProduct(ctx context.Context, input *servicecatalog.DeleteProductInput) (*servicecatalog.DeleteProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProvisionedProductPlan(ctx context.Context, input *servicecatalog.DeleteProvisionedProductPlanInput) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteProvisionedProductPlanWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProvisioningArtifact(ctx context.Context, input *servicecatalog.DeleteProvisioningArtifactInput) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteServiceAction(ctx context.Context, input *servicecatalog.DeleteServiceActionInput) (*servicecatalog.DeleteServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTagOption(ctx context.Context, input *servicecatalog.DeleteTagOptionInput) (*servicecatalog.DeleteTagOptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTagOptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeConstraint(ctx context.Context, input *servicecatalog.DescribeConstraintInput) (*servicecatalog.DescribeConstraintOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeConstraintWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeCopyProductStatus(ctx context.Context, input *servicecatalog.DescribeCopyProductStatusInput) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeCopyProductStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePortfolio(ctx context.Context, input *servicecatalog.DescribePortfolioInput) (*servicecatalog.DescribePortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePortfolioShareStatus(ctx context.Context, input *servicecatalog.DescribePortfolioShareStatusInput) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePortfolioShareStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePortfolioShares(ctx context.Context, input *servicecatalog.DescribePortfolioSharesInput) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePortfolioSharesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProduct(ctx context.Context, input *servicecatalog.DescribeProductInput) (*servicecatalog.DescribeProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProductAsAdmin(ctx context.Context, input *servicecatalog.DescribeProductAsAdminInput) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProductAsAdminWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProductView(ctx context.Context, input *servicecatalog.DescribeProductViewInput) (*servicecatalog.DescribeProductViewOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProductViewWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProvisionedProduct(ctx context.Context, input *servicecatalog.DescribeProvisionedProductInput) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProvisionedProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProvisionedProductPlan(ctx context.Context, input *servicecatalog.DescribeProvisionedProductPlanInput) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProvisionedProductPlanWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProvisioningArtifact(ctx context.Context, input *servicecatalog.DescribeProvisioningArtifactInput) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProvisioningParameters(ctx context.Context, input *servicecatalog.DescribeProvisioningParametersInput) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProvisioningParametersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeRecord(ctx context.Context, input *servicecatalog.DescribeRecordInput) (*servicecatalog.DescribeRecordOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeRecordWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeServiceAction(ctx context.Context, input *servicecatalog.DescribeServiceActionInput) (*servicecatalog.DescribeServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeServiceActionExecutionParameters(ctx context.Context, input *servicecatalog.DescribeServiceActionExecutionParametersInput) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeServiceActionExecutionParametersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTagOption(ctx context.Context, input *servicecatalog.DescribeTagOptionInput) (*servicecatalog.DescribeTagOptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTagOptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisableAWSOrganizationsAccess(ctx context.Context, input *servicecatalog.DisableAWSOrganizationsAccessInput) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisableAWSOrganizationsAccessWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateBudgetFromResource(ctx context.Context, input *servicecatalog.DisassociateBudgetFromResourceInput) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateBudgetFromResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociatePrincipalFromPortfolio(ctx context.Context, input *servicecatalog.DisassociatePrincipalFromPortfolioInput) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociatePrincipalFromPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateProductFromPortfolio(ctx context.Context, input *servicecatalog.DisassociateProductFromPortfolioInput) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateProductFromPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateServiceActionFromProvisioningArtifact(ctx context.Context, input *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateServiceActionFromProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateTagOptionFromResource(ctx context.Context, input *servicecatalog.DisassociateTagOptionFromResourceInput) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateTagOptionFromResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) EnableAWSOrganizationsAccess(ctx context.Context, input *servicecatalog.EnableAWSOrganizationsAccessInput) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EnableAWSOrganizationsAccessWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ExecuteProvisionedProductPlan(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductPlanInput) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ExecuteProvisionedProductPlanWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ExecuteProvisionedProductServiceAction(ctx context.Context, input *servicecatalog.ExecuteProvisionedProductServiceActionInput) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ExecuteProvisionedProductServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAWSOrganizationsAccessStatus(ctx context.Context, input *servicecatalog.GetAWSOrganizationsAccessStatusInput) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAWSOrganizationsAccessStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetProvisionedProductOutputs(ctx context.Context, input *servicecatalog.GetProvisionedProductOutputsInput) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetProvisionedProductOutputsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ImportAsProvisionedProduct(ctx context.Context, input *servicecatalog.ImportAsProvisionedProductInput) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ImportAsProvisionedProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAcceptedPortfolioShares(ctx context.Context, input *servicecatalog.ListAcceptedPortfolioSharesInput) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAcceptedPortfolioSharesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBudgetsForResource(ctx context.Context, input *servicecatalog.ListBudgetsForResourceInput) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBudgetsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListConstraintsForPortfolio(ctx context.Context, input *servicecatalog.ListConstraintsForPortfolioInput) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListConstraintsForPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLaunchPaths(ctx context.Context, input *servicecatalog.ListLaunchPathsInput) (*servicecatalog.ListLaunchPathsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLaunchPathsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListOrganizationPortfolioAccess(ctx context.Context, input *servicecatalog.ListOrganizationPortfolioAccessInput) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListOrganizationPortfolioAccessWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPortfolioAccess(ctx context.Context, input *servicecatalog.ListPortfolioAccessInput) (*servicecatalog.ListPortfolioAccessOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPortfolioAccessWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPortfolios(ctx context.Context, input *servicecatalog.ListPortfoliosInput) (*servicecatalog.ListPortfoliosOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPortfoliosWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPortfoliosForProduct(ctx context.Context, input *servicecatalog.ListPortfoliosForProductInput) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPortfoliosForProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPrincipalsForPortfolio(ctx context.Context, input *servicecatalog.ListPrincipalsForPortfolioInput) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPrincipalsForPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProvisionedProductPlans(ctx context.Context, input *servicecatalog.ListProvisionedProductPlansInput) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProvisionedProductPlansWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProvisioningArtifacts(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsInput) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProvisioningArtifactsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProvisioningArtifactsForServiceAction(ctx context.Context, input *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProvisioningArtifactsForServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListRecordHistory(ctx context.Context, input *servicecatalog.ListRecordHistoryInput) (*servicecatalog.ListRecordHistoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListRecordHistoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResourcesForTagOption(ctx context.Context, input *servicecatalog.ListResourcesForTagOptionInput) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourcesForTagOptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListServiceActions(ctx context.Context, input *servicecatalog.ListServiceActionsInput) (*servicecatalog.ListServiceActionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListServiceActionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListServiceActionsForProvisioningArtifact(ctx context.Context, input *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListServiceActionsForProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListStackInstancesForProvisionedProduct(ctx context.Context, input *servicecatalog.ListStackInstancesForProvisionedProductInput) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListStackInstancesForProvisionedProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagOptions(ctx context.Context, input *servicecatalog.ListTagOptionsInput) (*servicecatalog.ListTagOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagOptionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ProvisionProduct(ctx context.Context, input *servicecatalog.ProvisionProductInput) (*servicecatalog.ProvisionProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ProvisionProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RejectPortfolioShare(ctx context.Context, input *servicecatalog.RejectPortfolioShareInput) (*servicecatalog.RejectPortfolioShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RejectPortfolioShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ScanProvisionedProducts(ctx context.Context, input *servicecatalog.ScanProvisionedProductsInput) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ScanProvisionedProductsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) SearchProducts(ctx context.Context, input *servicecatalog.SearchProductsInput) (*servicecatalog.SearchProductsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SearchProductsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) SearchProductsAsAdmin(ctx context.Context, input *servicecatalog.SearchProductsAsAdminInput) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SearchProductsAsAdminWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) SearchProvisionedProducts(ctx context.Context, input *servicecatalog.SearchProvisionedProductsInput) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SearchProvisionedProductsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TerminateProvisionedProduct(ctx context.Context, input *servicecatalog.TerminateProvisionedProductInput) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TerminateProvisionedProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateConstraint(ctx context.Context, input *servicecatalog.UpdateConstraintInput) (*servicecatalog.UpdateConstraintOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateConstraintWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdatePortfolio(ctx context.Context, input *servicecatalog.UpdatePortfolioInput) (*servicecatalog.UpdatePortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdatePortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdatePortfolioShare(ctx context.Context, input *servicecatalog.UpdatePortfolioShareInput) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdatePortfolioShareWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProduct(ctx context.Context, input *servicecatalog.UpdateProductInput) (*servicecatalog.UpdateProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProvisionedProduct(ctx context.Context, input *servicecatalog.UpdateProvisionedProductInput) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProvisionedProductWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProvisionedProductProperties(ctx context.Context, input *servicecatalog.UpdateProvisionedProductPropertiesInput) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProvisionedProductPropertiesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateProvisioningArtifact(ctx context.Context, input *servicecatalog.UpdateProvisioningArtifactInput) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateProvisioningArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateServiceAction(ctx context.Context, input *servicecatalog.UpdateServiceActionInput) (*servicecatalog.UpdateServiceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateServiceActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTagOption(ctx context.Context, input *servicecatalog.UpdateTagOptionInput) (*servicecatalog.UpdateTagOptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTagOptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
