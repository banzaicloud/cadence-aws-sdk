// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/route53"
	"github.com/aws/aws-sdk-go/service/route53/route53iface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client route53iface.Route53API

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := route53.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (route53iface.Route53API, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return route53.New(sess), nil
}

func (a *Activities) ActivateKeySigningKey(ctx context.Context, input *route53.ActivateKeySigningKeyInput) (*route53.ActivateKeySigningKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ActivateKeySigningKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateVPCWithHostedZone(ctx context.Context, input *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateVPCWithHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ChangeResourceRecordSets(ctx context.Context, input *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ChangeResourceRecordSetsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ChangeTagsForResource(ctx context.Context, input *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ChangeTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateHealthCheck(ctx context.Context, input *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateHealthCheckWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateHostedZone(ctx context.Context, input *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateKeySigningKey(ctx context.Context, input *route53.CreateKeySigningKeyInput) (*route53.CreateKeySigningKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateKeySigningKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateQueryLoggingConfig(ctx context.Context, input *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateQueryLoggingConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateReusableDelegationSet(ctx context.Context, input *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateReusableDelegationSetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrafficPolicy(ctx context.Context, input *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrafficPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrafficPolicyInstance(ctx context.Context, input *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrafficPolicyInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrafficPolicyVersion(ctx context.Context, input *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrafficPolicyVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateVPCAssociationAuthorization(ctx context.Context, input *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateVPCAssociationAuthorizationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeactivateKeySigningKey(ctx context.Context, input *route53.DeactivateKeySigningKeyInput) (*route53.DeactivateKeySigningKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeactivateKeySigningKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteHealthCheck(ctx context.Context, input *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteHealthCheckWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteHostedZone(ctx context.Context, input *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteKeySigningKey(ctx context.Context, input *route53.DeleteKeySigningKeyInput) (*route53.DeleteKeySigningKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteKeySigningKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteQueryLoggingConfig(ctx context.Context, input *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteQueryLoggingConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteReusableDelegationSet(ctx context.Context, input *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteReusableDelegationSetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTrafficPolicy(ctx context.Context, input *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTrafficPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTrafficPolicyInstance(ctx context.Context, input *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTrafficPolicyInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteVPCAssociationAuthorization(ctx context.Context, input *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteVPCAssociationAuthorizationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisableHostedZoneDNSSEC(ctx context.Context, input *route53.DisableHostedZoneDNSSECInput) (*route53.DisableHostedZoneDNSSECOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisableHostedZoneDNSSECWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateVPCFromHostedZone(ctx context.Context, input *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateVPCFromHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) EnableHostedZoneDNSSEC(ctx context.Context, input *route53.EnableHostedZoneDNSSECInput) (*route53.EnableHostedZoneDNSSECOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EnableHostedZoneDNSSECWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAccountLimit(ctx context.Context, input *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAccountLimitWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetChange(ctx context.Context, input *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetChangeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetCheckerIpRanges(ctx context.Context, input *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetCheckerIpRangesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDNSSEC(ctx context.Context, input *route53.GetDNSSECInput) (*route53.GetDNSSECOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDNSSECWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetGeoLocation(ctx context.Context, input *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetGeoLocationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHealthCheck(ctx context.Context, input *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHealthCheckWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHealthCheckCount(ctx context.Context, input *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHealthCheckCountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHealthCheckLastFailureReason(ctx context.Context, input *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHealthCheckLastFailureReasonWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHealthCheckStatus(ctx context.Context, input *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHealthCheckStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHostedZone(ctx context.Context, input *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHostedZoneCount(ctx context.Context, input *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHostedZoneCountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetHostedZoneLimit(ctx context.Context, input *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetHostedZoneLimitWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetQueryLoggingConfig(ctx context.Context, input *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetQueryLoggingConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetReusableDelegationSet(ctx context.Context, input *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetReusableDelegationSetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetReusableDelegationSetLimit(ctx context.Context, input *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetReusableDelegationSetLimitWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetTrafficPolicy(ctx context.Context, input *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetTrafficPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetTrafficPolicyInstance(ctx context.Context, input *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetTrafficPolicyInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetTrafficPolicyInstanceCount(ctx context.Context, input *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetTrafficPolicyInstanceCountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListGeoLocations(ctx context.Context, input *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListGeoLocationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHealthChecks(ctx context.Context, input *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHealthChecksWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHostedZones(ctx context.Context, input *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHostedZonesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHostedZonesByName(ctx context.Context, input *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHostedZonesByNameWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHostedZonesByVPC(ctx context.Context, input *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHostedZonesByVPCWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListQueryLoggingConfigs(ctx context.Context, input *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListQueryLoggingConfigsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResourceRecordSets(ctx context.Context, input *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourceRecordSetsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListReusableDelegationSets(ctx context.Context, input *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListReusableDelegationSetsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResources(ctx context.Context, input *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourcesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrafficPolicies(ctx context.Context, input *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrafficPoliciesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrafficPolicyInstances(ctx context.Context, input *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrafficPolicyInstancesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrafficPolicyInstancesByHostedZone(ctx context.Context, input *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrafficPolicyInstancesByHostedZoneWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrafficPolicyInstancesByPolicy(ctx context.Context, input *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrafficPolicyInstancesByPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrafficPolicyVersions(ctx context.Context, input *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrafficPolicyVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListVPCAssociationAuthorizations(ctx context.Context, input *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListVPCAssociationAuthorizationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TestDNSAnswer(ctx context.Context, input *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TestDNSAnswerWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateHealthCheck(ctx context.Context, input *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateHealthCheckWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateHostedZoneComment(ctx context.Context, input *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateHostedZoneCommentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTrafficPolicyComment(ctx context.Context, input *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTrafficPolicyCommentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTrafficPolicyInstance(ctx context.Context, input *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTrafficPolicyInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) WaitUntilResourceRecordSetsChanged(ctx context.Context, input *route53.GetChangeInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilResourceRecordSetsChangedWithContext(ctx, input, options...))
	})
}
