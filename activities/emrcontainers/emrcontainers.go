// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package emrcontainers

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/emrcontainers"
	"github.com/aws/aws-sdk-go/service/emrcontainers/emrcontainersiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client emrcontainersiface.EMRContainersAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := emrcontainers.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (emrcontainersiface.EMRContainersAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return emrcontainers.New(sess), nil
}

func (a *Activities) CancelJobRun(ctx context.Context, input *emrcontainers.CancelJobRunInput) (*emrcontainers.CancelJobRunOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CancelJobRunWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateManagedEndpoint(ctx context.Context, input *emrcontainers.CreateManagedEndpointInput) (*emrcontainers.CreateManagedEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateManagedEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateVirtualCluster(ctx context.Context, input *emrcontainers.CreateVirtualClusterInput) (*emrcontainers.CreateVirtualClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateVirtualClusterWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteManagedEndpoint(ctx context.Context, input *emrcontainers.DeleteManagedEndpointInput) (*emrcontainers.DeleteManagedEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteManagedEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteVirtualCluster(ctx context.Context, input *emrcontainers.DeleteVirtualClusterInput) (*emrcontainers.DeleteVirtualClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteVirtualClusterWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeJobRun(ctx context.Context, input *emrcontainers.DescribeJobRunInput) (*emrcontainers.DescribeJobRunOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeJobRunWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeManagedEndpoint(ctx context.Context, input *emrcontainers.DescribeManagedEndpointInput) (*emrcontainers.DescribeManagedEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeManagedEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeVirtualCluster(ctx context.Context, input *emrcontainers.DescribeVirtualClusterInput) (*emrcontainers.DescribeVirtualClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeVirtualClusterWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListJobRuns(ctx context.Context, input *emrcontainers.ListJobRunsInput) (*emrcontainers.ListJobRunsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListJobRunsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListManagedEndpoints(ctx context.Context, input *emrcontainers.ListManagedEndpointsInput) (*emrcontainers.ListManagedEndpointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListManagedEndpointsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *emrcontainers.ListTagsForResourceInput) (*emrcontainers.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListVirtualClusters(ctx context.Context, input *emrcontainers.ListVirtualClustersInput) (*emrcontainers.ListVirtualClustersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListVirtualClustersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartJobRun(ctx context.Context, input *emrcontainers.StartJobRunInput) (*emrcontainers.StartJobRunOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StartJobRunWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *emrcontainers.TagResourceInput) (*emrcontainers.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *emrcontainers.UntagResourceInput) (*emrcontainers.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
