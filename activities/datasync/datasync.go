// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package datasync

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/datasync"
	"github.com/aws/aws-sdk-go/service/datasync/datasynciface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client datasynciface.DataSyncAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := datasync.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (datasynciface.DataSyncAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return datasync.New(sess), nil
}

func (a *Activities) CancelTaskExecution(ctx context.Context, input *datasync.CancelTaskExecutionInput) (*datasync.CancelTaskExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CancelTaskExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAgent(ctx context.Context, input *datasync.CreateAgentInput) (*datasync.CreateAgentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAgentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationEfs(ctx context.Context, input *datasync.CreateLocationEfsInput) (*datasync.CreateLocationEfsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationEfsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationFsxWindows(ctx context.Context, input *datasync.CreateLocationFsxWindowsInput) (*datasync.CreateLocationFsxWindowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationFsxWindowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationNfs(ctx context.Context, input *datasync.CreateLocationNfsInput) (*datasync.CreateLocationNfsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationNfsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationObjectStorage(ctx context.Context, input *datasync.CreateLocationObjectStorageInput) (*datasync.CreateLocationObjectStorageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationObjectStorageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationS3(ctx context.Context, input *datasync.CreateLocationS3Input) (*datasync.CreateLocationS3Output, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationS3WithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLocationSmb(ctx context.Context, input *datasync.CreateLocationSmbInput) (*datasync.CreateLocationSmbOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLocationSmbWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTask(ctx context.Context, input *datasync.CreateTaskInput) (*datasync.CreateTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTaskWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAgent(ctx context.Context, input *datasync.DeleteAgentInput) (*datasync.DeleteAgentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAgentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteLocation(ctx context.Context, input *datasync.DeleteLocationInput) (*datasync.DeleteLocationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteLocationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTask(ctx context.Context, input *datasync.DeleteTaskInput) (*datasync.DeleteTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTaskWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeAgent(ctx context.Context, input *datasync.DescribeAgentInput) (*datasync.DescribeAgentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeAgentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationEfs(ctx context.Context, input *datasync.DescribeLocationEfsInput) (*datasync.DescribeLocationEfsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationEfsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationFsxWindows(ctx context.Context, input *datasync.DescribeLocationFsxWindowsInput) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationFsxWindowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationNfs(ctx context.Context, input *datasync.DescribeLocationNfsInput) (*datasync.DescribeLocationNfsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationNfsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationObjectStorage(ctx context.Context, input *datasync.DescribeLocationObjectStorageInput) (*datasync.DescribeLocationObjectStorageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationObjectStorageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationS3(ctx context.Context, input *datasync.DescribeLocationS3Input) (*datasync.DescribeLocationS3Output, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationS3WithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLocationSmb(ctx context.Context, input *datasync.DescribeLocationSmbInput) (*datasync.DescribeLocationSmbOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLocationSmbWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTask(ctx context.Context, input *datasync.DescribeTaskInput) (*datasync.DescribeTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTaskWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTaskExecution(ctx context.Context, input *datasync.DescribeTaskExecutionInput) (*datasync.DescribeTaskExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTaskExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAgents(ctx context.Context, input *datasync.ListAgentsInput) (*datasync.ListAgentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAgentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLocations(ctx context.Context, input *datasync.ListLocationsInput) (*datasync.ListLocationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLocationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *datasync.ListTagsForResourceInput) (*datasync.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTaskExecutions(ctx context.Context, input *datasync.ListTaskExecutionsInput) (*datasync.ListTaskExecutionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTaskExecutionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTasks(ctx context.Context, input *datasync.ListTasksInput) (*datasync.ListTasksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTasksWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartTaskExecution(ctx context.Context, input *datasync.StartTaskExecutionInput) (*datasync.StartTaskExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartTaskExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *datasync.TagResourceInput) (*datasync.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *datasync.UntagResourceInput) (*datasync.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAgent(ctx context.Context, input *datasync.UpdateAgentInput) (*datasync.UpdateAgentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAgentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTask(ctx context.Context, input *datasync.UpdateTaskInput) (*datasync.UpdateTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTaskWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTaskExecution(ctx context.Context, input *datasync.UpdateTaskExecutionInput) (*datasync.UpdateTaskExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTaskExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
