// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package amplifybackend

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/amplifybackend"
	"github.com/aws/aws-sdk-go/service/amplifybackend/amplifybackendiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client amplifybackendiface.AmplifyBackendAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := amplifybackend.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (amplifybackendiface.AmplifyBackendAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return amplifybackend.New(sess), nil
}

func (a *Activities) CloneBackend(ctx context.Context, input *amplifybackend.CloneBackendInput) (*amplifybackend.CloneBackendOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CloneBackendWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBackend(ctx context.Context, input *amplifybackend.CreateBackendInput) (*amplifybackend.CreateBackendOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBackendWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBackendAPI(ctx context.Context, input *amplifybackend.CreateBackendAPIInput) (*amplifybackend.CreateBackendAPIOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBackendAPIWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBackendAuth(ctx context.Context, input *amplifybackend.CreateBackendAuthInput) (*amplifybackend.CreateBackendAuthOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBackendAuthWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBackendConfig(ctx context.Context, input *amplifybackend.CreateBackendConfigInput) (*amplifybackend.CreateBackendConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBackendConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateToken(ctx context.Context, input *amplifybackend.CreateTokenInput) (*amplifybackend.CreateTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBackend(ctx context.Context, input *amplifybackend.DeleteBackendInput) (*amplifybackend.DeleteBackendOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBackendWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBackendAPI(ctx context.Context, input *amplifybackend.DeleteBackendAPIInput) (*amplifybackend.DeleteBackendAPIOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBackendAPIWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBackendAuth(ctx context.Context, input *amplifybackend.DeleteBackendAuthInput) (*amplifybackend.DeleteBackendAuthOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBackendAuthWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteToken(ctx context.Context, input *amplifybackend.DeleteTokenInput) (*amplifybackend.DeleteTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateBackendAPIModels(ctx context.Context, input *amplifybackend.GenerateBackendAPIModelsInput) (*amplifybackend.GenerateBackendAPIModelsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateBackendAPIModelsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetBackend(ctx context.Context, input *amplifybackend.GetBackendInput) (*amplifybackend.GetBackendOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetBackendWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetBackendAPI(ctx context.Context, input *amplifybackend.GetBackendAPIInput) (*amplifybackend.GetBackendAPIOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetBackendAPIWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetBackendAPIModels(ctx context.Context, input *amplifybackend.GetBackendAPIModelsInput) (*amplifybackend.GetBackendAPIModelsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetBackendAPIModelsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetBackendAuth(ctx context.Context, input *amplifybackend.GetBackendAuthInput) (*amplifybackend.GetBackendAuthOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetBackendAuthWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetBackendJob(ctx context.Context, input *amplifybackend.GetBackendJobInput) (*amplifybackend.GetBackendJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetBackendJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetToken(ctx context.Context, input *amplifybackend.GetTokenInput) (*amplifybackend.GetTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBackendJobs(ctx context.Context, input *amplifybackend.ListBackendJobsInput) (*amplifybackend.ListBackendJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBackendJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RemoveAllBackends(ctx context.Context, input *amplifybackend.RemoveAllBackendsInput) (*amplifybackend.RemoveAllBackendsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RemoveAllBackendsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RemoveBackendConfig(ctx context.Context, input *amplifybackend.RemoveBackendConfigInput) (*amplifybackend.RemoveBackendConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RemoveBackendConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBackendAPI(ctx context.Context, input *amplifybackend.UpdateBackendAPIInput) (*amplifybackend.UpdateBackendAPIOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBackendAPIWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBackendAuth(ctx context.Context, input *amplifybackend.UpdateBackendAuthInput) (*amplifybackend.UpdateBackendAuthOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBackendAuthWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBackendConfig(ctx context.Context, input *amplifybackend.UpdateBackendConfigInput) (*amplifybackend.UpdateBackendConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBackendConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBackendJob(ctx context.Context, input *amplifybackend.UpdateBackendJobInput) (*amplifybackend.UpdateBackendJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBackendJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
