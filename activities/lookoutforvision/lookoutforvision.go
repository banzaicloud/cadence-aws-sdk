// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lookoutforvision

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/lookoutforvision"
	"github.com/aws/aws-sdk-go/service/lookoutforvision/lookoutforvisioniface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client lookoutforvisioniface.LookoutForVisionAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := lookoutforvision.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (lookoutforvisioniface.LookoutForVisionAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return lookoutforvision.New(sess), nil
}

func (a *Activities) CreateDataset(ctx context.Context, input *lookoutforvision.CreateDatasetInput) (*lookoutforvision.CreateDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModel(ctx context.Context, input *lookoutforvision.CreateModelInput) (*lookoutforvision.CreateModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProject(ctx context.Context, input *lookoutforvision.CreateProjectInput) (*lookoutforvision.CreateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDataset(ctx context.Context, input *lookoutforvision.DeleteDatasetInput) (*lookoutforvision.DeleteDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.DeleteDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModel(ctx context.Context, input *lookoutforvision.DeleteModelInput) (*lookoutforvision.DeleteModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.DeleteModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProject(ctx context.Context, input *lookoutforvision.DeleteProjectInput) (*lookoutforvision.DeleteProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.DeleteProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDataset(ctx context.Context, input *lookoutforvision.DescribeDatasetInput) (*lookoutforvision.DescribeDatasetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDatasetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModel(ctx context.Context, input *lookoutforvision.DescribeModelInput) (*lookoutforvision.DescribeModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProject(ctx context.Context, input *lookoutforvision.DescribeProjectInput) (*lookoutforvision.DescribeProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DetectAnomalies(ctx context.Context, input *lookoutforvision.DetectAnomaliesInput) (*lookoutforvision.DetectAnomaliesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DetectAnomaliesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDatasetEntries(ctx context.Context, input *lookoutforvision.ListDatasetEntriesInput) (*lookoutforvision.ListDatasetEntriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDatasetEntriesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModels(ctx context.Context, input *lookoutforvision.ListModelsInput) (*lookoutforvision.ListModelsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProjects(ctx context.Context, input *lookoutforvision.ListProjectsInput) (*lookoutforvision.ListProjectsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProjectsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartModel(ctx context.Context, input *lookoutforvision.StartModelInput) (*lookoutforvision.StartModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StartModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopModel(ctx context.Context, input *lookoutforvision.StopModelInput) (*lookoutforvision.StopModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StopModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDatasetEntries(ctx context.Context, input *lookoutforvision.UpdateDatasetEntriesInput) (*lookoutforvision.UpdateDatasetEntriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.UpdateDatasetEntriesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
