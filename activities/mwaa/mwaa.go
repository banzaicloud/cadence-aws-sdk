// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package mwaa

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/mwaa"
	"github.com/aws/aws-sdk-go/service/mwaa/mwaaiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client mwaaiface.MWAAAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := mwaa.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (mwaaiface.MWAAAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return mwaa.New(sess), nil
}

func (a *Activities) CreateCliToken(ctx context.Context, input *mwaa.CreateCliTokenInput) (*mwaa.CreateCliTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateCliTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateEnvironment(ctx context.Context, input *mwaa.CreateEnvironmentInput) (*mwaa.CreateEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateEnvironmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateWebLoginToken(ctx context.Context, input *mwaa.CreateWebLoginTokenInput) (*mwaa.CreateWebLoginTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateWebLoginTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteEnvironment(ctx context.Context, input *mwaa.DeleteEnvironmentInput) (*mwaa.DeleteEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteEnvironmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEnvironment(ctx context.Context, input *mwaa.GetEnvironmentInput) (*mwaa.GetEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEnvironmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListEnvironments(ctx context.Context, input *mwaa.ListEnvironmentsInput) (*mwaa.ListEnvironmentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListEnvironmentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *mwaa.ListTagsForResourceInput) (*mwaa.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PublishMetrics(ctx context.Context, input *mwaa.PublishMetricsInput) (*mwaa.PublishMetricsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PublishMetricsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *mwaa.TagResourceInput) (*mwaa.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *mwaa.UntagResourceInput) (*mwaa.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateEnvironment(ctx context.Context, input *mwaa.UpdateEnvironmentInput) (*mwaa.UpdateEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateEnvironmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
