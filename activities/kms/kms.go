// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kms

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/kms"
	"github.com/aws/aws-sdk-go/service/kms/kmsiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client kmsiface.KMSAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := kms.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (kmsiface.KMSAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return kms.New(sess), nil
}

func (a *Activities) CancelKeyDeletion(ctx context.Context, input *kms.CancelKeyDeletionInput) (*kms.CancelKeyDeletionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CancelKeyDeletionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ConnectCustomKeyStore(ctx context.Context, input *kms.ConnectCustomKeyStoreInput) (*kms.ConnectCustomKeyStoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ConnectCustomKeyStoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAlias(ctx context.Context, input *kms.CreateAliasInput) (*kms.CreateAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateCustomKeyStore(ctx context.Context, input *kms.CreateCustomKeyStoreInput) (*kms.CreateCustomKeyStoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateCustomKeyStoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateGrant(ctx context.Context, input *kms.CreateGrantInput) (*kms.CreateGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateKey(ctx context.Context, input *kms.CreateKeyInput) (*kms.CreateKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Decrypt(ctx context.Context, input *kms.DecryptInput) (*kms.DecryptOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DecryptWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAlias(ctx context.Context, input *kms.DeleteAliasInput) (*kms.DeleteAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteCustomKeyStore(ctx context.Context, input *kms.DeleteCustomKeyStoreInput) (*kms.DeleteCustomKeyStoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteCustomKeyStoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteImportedKeyMaterial(ctx context.Context, input *kms.DeleteImportedKeyMaterialInput) (*kms.DeleteImportedKeyMaterialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteImportedKeyMaterialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeCustomKeyStores(ctx context.Context, input *kms.DescribeCustomKeyStoresInput) (*kms.DescribeCustomKeyStoresOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeCustomKeyStoresWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeKey(ctx context.Context, input *kms.DescribeKeyInput) (*kms.DescribeKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisableKey(ctx context.Context, input *kms.DisableKeyInput) (*kms.DisableKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisableKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisableKeyRotation(ctx context.Context, input *kms.DisableKeyRotationInput) (*kms.DisableKeyRotationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisableKeyRotationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisconnectCustomKeyStore(ctx context.Context, input *kms.DisconnectCustomKeyStoreInput) (*kms.DisconnectCustomKeyStoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisconnectCustomKeyStoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) EnableKey(ctx context.Context, input *kms.EnableKeyInput) (*kms.EnableKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EnableKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) EnableKeyRotation(ctx context.Context, input *kms.EnableKeyRotationInput) (*kms.EnableKeyRotationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EnableKeyRotationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Encrypt(ctx context.Context, input *kms.EncryptInput) (*kms.EncryptOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EncryptWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateDataKey(ctx context.Context, input *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateDataKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateDataKeyPair(ctx context.Context, input *kms.GenerateDataKeyPairInput) (*kms.GenerateDataKeyPairOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateDataKeyPairWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateDataKeyPairWithoutPlaintext(ctx context.Context, input *kms.GenerateDataKeyPairWithoutPlaintextInput) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateDataKeyPairWithoutPlaintextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateDataKeyWithoutPlaintext(ctx context.Context, input *kms.GenerateDataKeyWithoutPlaintextInput) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateDataKeyWithoutPlaintextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GenerateRandom(ctx context.Context, input *kms.GenerateRandomInput) (*kms.GenerateRandomOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GenerateRandomWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetKeyPolicy(ctx context.Context, input *kms.GetKeyPolicyInput) (*kms.GetKeyPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetKeyPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetKeyRotationStatus(ctx context.Context, input *kms.GetKeyRotationStatusInput) (*kms.GetKeyRotationStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetKeyRotationStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetParametersForImport(ctx context.Context, input *kms.GetParametersForImportInput) (*kms.GetParametersForImportOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetParametersForImportWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetPublicKey(ctx context.Context, input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetPublicKeyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ImportKeyMaterial(ctx context.Context, input *kms.ImportKeyMaterialInput) (*kms.ImportKeyMaterialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ImportKeyMaterialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAliases(ctx context.Context, input *kms.ListAliasesInput) (*kms.ListAliasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAliasesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListGrants(ctx context.Context, input *kms.ListGrantsInput) (*kms.ListGrantsResponse, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListGrantsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListKeyPolicies(ctx context.Context, input *kms.ListKeyPoliciesInput) (*kms.ListKeyPoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListKeyPoliciesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListKeys(ctx context.Context, input *kms.ListKeysInput) (*kms.ListKeysOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListKeysWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResourceTags(ctx context.Context, input *kms.ListResourceTagsInput) (*kms.ListResourceTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourceTagsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListRetirableGrants(ctx context.Context, input *kms.ListRetirableGrantsInput) (*kms.ListGrantsResponse, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListRetirableGrantsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutKeyPolicy(ctx context.Context, input *kms.PutKeyPolicyInput) (*kms.PutKeyPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutKeyPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ReEncrypt(ctx context.Context, input *kms.ReEncryptInput) (*kms.ReEncryptOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ReEncryptWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RetireGrant(ctx context.Context, input *kms.RetireGrantInput) (*kms.RetireGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RetireGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RevokeGrant(ctx context.Context, input *kms.RevokeGrantInput) (*kms.RevokeGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RevokeGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ScheduleKeyDeletion(ctx context.Context, input *kms.ScheduleKeyDeletionInput) (*kms.ScheduleKeyDeletionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ScheduleKeyDeletionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Sign(ctx context.Context, input *kms.SignInput) (*kms.SignOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SignWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *kms.TagResourceInput) (*kms.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *kms.UntagResourceInput) (*kms.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAlias(ctx context.Context, input *kms.UpdateAliasInput) (*kms.UpdateAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateCustomKeyStore(ctx context.Context, input *kms.UpdateCustomKeyStoreInput) (*kms.UpdateCustomKeyStoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateCustomKeyStoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateKeyDescription(ctx context.Context, input *kms.UpdateKeyDescriptionInput) (*kms.UpdateKeyDescriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateKeyDescriptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Verify(ctx context.Context, input *kms.VerifyInput) (*kms.VerifyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.VerifyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
