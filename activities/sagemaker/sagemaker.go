// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package sagemaker

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"github.com/aws/aws-sdk-go/service/sagemaker/sagemakeriface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client sagemakeriface.SageMakerAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := sagemaker.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (sagemakeriface.SageMakerAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return sagemaker.New(sess), nil
}

func (a *Activities) AddAssociation(ctx context.Context, input *sagemaker.AddAssociationInput) (*sagemaker.AddAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AddAssociationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AddTags(ctx context.Context, input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AddTagsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateTrialComponent(ctx context.Context, input *sagemaker.AssociateTrialComponentInput) (*sagemaker.AssociateTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAction(ctx context.Context, input *sagemaker.CreateActionInput) (*sagemaker.CreateActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAlgorithm(ctx context.Context, input *sagemaker.CreateAlgorithmInput) (*sagemaker.CreateAlgorithmOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAlgorithmWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateApp(ctx context.Context, input *sagemaker.CreateAppInput) (*sagemaker.CreateAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAppWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAppImageConfig(ctx context.Context, input *sagemaker.CreateAppImageConfigInput) (*sagemaker.CreateAppImageConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAppImageConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateArtifact(ctx context.Context, input *sagemaker.CreateArtifactInput) (*sagemaker.CreateArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAutoMLJob(ctx context.Context, input *sagemaker.CreateAutoMLJobInput) (*sagemaker.CreateAutoMLJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAutoMLJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateCodeRepository(ctx context.Context, input *sagemaker.CreateCodeRepositoryInput) (*sagemaker.CreateCodeRepositoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateCodeRepositoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateCompilationJob(ctx context.Context, input *sagemaker.CreateCompilationJobInput) (*sagemaker.CreateCompilationJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateCompilationJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateContext(ctx context.Context, input *sagemaker.CreateContextInput) (*sagemaker.CreateContextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateContextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDataQualityJobDefinition(ctx context.Context, input *sagemaker.CreateDataQualityJobDefinitionInput) (*sagemaker.CreateDataQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateDataQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDeviceFleet(ctx context.Context, input *sagemaker.CreateDeviceFleetInput) (*sagemaker.CreateDeviceFleetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateDeviceFleetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDomain(ctx context.Context, input *sagemaker.CreateDomainInput) (*sagemaker.CreateDomainOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateDomainWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateEdgePackagingJob(ctx context.Context, input *sagemaker.CreateEdgePackagingJobInput) (*sagemaker.CreateEdgePackagingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateEdgePackagingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateEndpoint(ctx context.Context, input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateEndpointConfig(ctx context.Context, input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateEndpointConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateExperiment(ctx context.Context, input *sagemaker.CreateExperimentInput) (*sagemaker.CreateExperimentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateExperimentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateFeatureGroup(ctx context.Context, input *sagemaker.CreateFeatureGroupInput) (*sagemaker.CreateFeatureGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateFeatureGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateFlowDefinition(ctx context.Context, input *sagemaker.CreateFlowDefinitionInput) (*sagemaker.CreateFlowDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateFlowDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateHumanTaskUi(ctx context.Context, input *sagemaker.CreateHumanTaskUiInput) (*sagemaker.CreateHumanTaskUiOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateHumanTaskUiWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateHyperParameterTuningJob(ctx context.Context, input *sagemaker.CreateHyperParameterTuningJobInput) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateHyperParameterTuningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateImage(ctx context.Context, input *sagemaker.CreateImageInput) (*sagemaker.CreateImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateImageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateImageVersion(ctx context.Context, input *sagemaker.CreateImageVersionInput) (*sagemaker.CreateImageVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateImageVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLabelingJob(ctx context.Context, input *sagemaker.CreateLabelingJobInput) (*sagemaker.CreateLabelingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLabelingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModel(ctx context.Context, input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModelBiasJobDefinition(ctx context.Context, input *sagemaker.CreateModelBiasJobDefinitionInput) (*sagemaker.CreateModelBiasJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateModelBiasJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModelExplainabilityJobDefinition(ctx context.Context, input *sagemaker.CreateModelExplainabilityJobDefinitionInput) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateModelExplainabilityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModelPackage(ctx context.Context, input *sagemaker.CreateModelPackageInput) (*sagemaker.CreateModelPackageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateModelPackageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModelPackageGroup(ctx context.Context, input *sagemaker.CreateModelPackageGroupInput) (*sagemaker.CreateModelPackageGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateModelPackageGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateModelQualityJobDefinition(ctx context.Context, input *sagemaker.CreateModelQualityJobDefinitionInput) (*sagemaker.CreateModelQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateModelQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateMonitoringSchedule(ctx context.Context, input *sagemaker.CreateMonitoringScheduleInput) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateNotebookInstance(ctx context.Context, input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateNotebookInstanceLifecycleConfig(ctx context.Context, input *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateNotebookInstanceLifecycleConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreatePipeline(ctx context.Context, input *sagemaker.CreatePipelineInput) (*sagemaker.CreatePipelineOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreatePipelineWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreatePresignedDomainUrl(ctx context.Context, input *sagemaker.CreatePresignedDomainUrlInput) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreatePresignedDomainUrlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreatePresignedNotebookInstanceUrl(ctx context.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreatePresignedNotebookInstanceUrlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProcessingJob(ctx context.Context, input *sagemaker.CreateProcessingJobInput) (*sagemaker.CreateProcessingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProcessingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateProject(ctx context.Context, input *sagemaker.CreateProjectInput) (*sagemaker.CreateProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrainingJob(ctx context.Context, input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrainingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTransformJob(ctx context.Context, input *sagemaker.CreateTransformJobInput) (*sagemaker.CreateTransformJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTransformJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrial(ctx context.Context, input *sagemaker.CreateTrialInput) (*sagemaker.CreateTrialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateTrialComponent(ctx context.Context, input *sagemaker.CreateTrialComponentInput) (*sagemaker.CreateTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateUserProfile(ctx context.Context, input *sagemaker.CreateUserProfileInput) (*sagemaker.CreateUserProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateUserProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateWorkforce(ctx context.Context, input *sagemaker.CreateWorkforceInput) (*sagemaker.CreateWorkforceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateWorkforceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateWorkteam(ctx context.Context, input *sagemaker.CreateWorkteamInput) (*sagemaker.CreateWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAction(ctx context.Context, input *sagemaker.DeleteActionInput) (*sagemaker.DeleteActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAlgorithm(ctx context.Context, input *sagemaker.DeleteAlgorithmInput) (*sagemaker.DeleteAlgorithmOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAlgorithmWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteApp(ctx context.Context, input *sagemaker.DeleteAppInput) (*sagemaker.DeleteAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAppWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAppImageConfig(ctx context.Context, input *sagemaker.DeleteAppImageConfigInput) (*sagemaker.DeleteAppImageConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAppImageConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteArtifact(ctx context.Context, input *sagemaker.DeleteArtifactInput) (*sagemaker.DeleteArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAssociation(ctx context.Context, input *sagemaker.DeleteAssociationInput) (*sagemaker.DeleteAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAssociationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteCodeRepository(ctx context.Context, input *sagemaker.DeleteCodeRepositoryInput) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteCodeRepositoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteContext(ctx context.Context, input *sagemaker.DeleteContextInput) (*sagemaker.DeleteContextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteContextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDataQualityJobDefinition(ctx context.Context, input *sagemaker.DeleteDataQualityJobDefinitionInput) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteDataQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDeviceFleet(ctx context.Context, input *sagemaker.DeleteDeviceFleetInput) (*sagemaker.DeleteDeviceFleetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteDeviceFleetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDomain(ctx context.Context, input *sagemaker.DeleteDomainInput) (*sagemaker.DeleteDomainOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteDomainWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteEndpoint(ctx context.Context, input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteEndpointConfig(ctx context.Context, input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteEndpointConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteExperiment(ctx context.Context, input *sagemaker.DeleteExperimentInput) (*sagemaker.DeleteExperimentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteExperimentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteFeatureGroup(ctx context.Context, input *sagemaker.DeleteFeatureGroupInput) (*sagemaker.DeleteFeatureGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteFeatureGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteFlowDefinition(ctx context.Context, input *sagemaker.DeleteFlowDefinitionInput) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteFlowDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteHumanTaskUi(ctx context.Context, input *sagemaker.DeleteHumanTaskUiInput) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteHumanTaskUiWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteImage(ctx context.Context, input *sagemaker.DeleteImageInput) (*sagemaker.DeleteImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteImageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteImageVersion(ctx context.Context, input *sagemaker.DeleteImageVersionInput) (*sagemaker.DeleteImageVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteImageVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModel(ctx context.Context, input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelBiasJobDefinition(ctx context.Context, input *sagemaker.DeleteModelBiasJobDefinitionInput) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelBiasJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelExplainabilityJobDefinition(ctx context.Context, input *sagemaker.DeleteModelExplainabilityJobDefinitionInput) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelExplainabilityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelPackage(ctx context.Context, input *sagemaker.DeleteModelPackageInput) (*sagemaker.DeleteModelPackageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelPackageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelPackageGroup(ctx context.Context, input *sagemaker.DeleteModelPackageGroupInput) (*sagemaker.DeleteModelPackageGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelPackageGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelPackageGroupPolicy(ctx context.Context, input *sagemaker.DeleteModelPackageGroupPolicyInput) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelPackageGroupPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteModelQualityJobDefinition(ctx context.Context, input *sagemaker.DeleteModelQualityJobDefinitionInput) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteModelQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteMonitoringSchedule(ctx context.Context, input *sagemaker.DeleteMonitoringScheduleInput) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteNotebookInstance(ctx context.Context, input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteNotebookInstanceLifecycleConfig(ctx context.Context, input *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteNotebookInstanceLifecycleConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeletePipeline(ctx context.Context, input *sagemaker.DeletePipelineInput) (*sagemaker.DeletePipelineOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeletePipelineWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteProject(ctx context.Context, input *sagemaker.DeleteProjectInput) (*sagemaker.DeleteProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTags(ctx context.Context, input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTagsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTrial(ctx context.Context, input *sagemaker.DeleteTrialInput) (*sagemaker.DeleteTrialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTrialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteTrialComponent(ctx context.Context, input *sagemaker.DeleteTrialComponentInput) (*sagemaker.DeleteTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteUserProfile(ctx context.Context, input *sagemaker.DeleteUserProfileInput) (*sagemaker.DeleteUserProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteUserProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteWorkforce(ctx context.Context, input *sagemaker.DeleteWorkforceInput) (*sagemaker.DeleteWorkforceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteWorkforceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteWorkteam(ctx context.Context, input *sagemaker.DeleteWorkteamInput) (*sagemaker.DeleteWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeregisterDevices(ctx context.Context, input *sagemaker.DeregisterDevicesInput) (*sagemaker.DeregisterDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeregisterDevicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeAction(ctx context.Context, input *sagemaker.DescribeActionInput) (*sagemaker.DescribeActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeAlgorithm(ctx context.Context, input *sagemaker.DescribeAlgorithmInput) (*sagemaker.DescribeAlgorithmOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeAlgorithmWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeApp(ctx context.Context, input *sagemaker.DescribeAppInput) (*sagemaker.DescribeAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeAppWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeAppImageConfig(ctx context.Context, input *sagemaker.DescribeAppImageConfigInput) (*sagemaker.DescribeAppImageConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeAppImageConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeArtifact(ctx context.Context, input *sagemaker.DescribeArtifactInput) (*sagemaker.DescribeArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeAutoMLJob(ctx context.Context, input *sagemaker.DescribeAutoMLJobInput) (*sagemaker.DescribeAutoMLJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeAutoMLJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeCodeRepository(ctx context.Context, input *sagemaker.DescribeCodeRepositoryInput) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeCodeRepositoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeCompilationJob(ctx context.Context, input *sagemaker.DescribeCompilationJobInput) (*sagemaker.DescribeCompilationJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeCompilationJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeContext(ctx context.Context, input *sagemaker.DescribeContextInput) (*sagemaker.DescribeContextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeContextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDataQualityJobDefinition(ctx context.Context, input *sagemaker.DescribeDataQualityJobDefinitionInput) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDataQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDevice(ctx context.Context, input *sagemaker.DescribeDeviceInput) (*sagemaker.DescribeDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDeviceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDeviceFleet(ctx context.Context, input *sagemaker.DescribeDeviceFleetInput) (*sagemaker.DescribeDeviceFleetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDeviceFleetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDomain(ctx context.Context, input *sagemaker.DescribeDomainInput) (*sagemaker.DescribeDomainOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDomainWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeEdgePackagingJob(ctx context.Context, input *sagemaker.DescribeEdgePackagingJobInput) (*sagemaker.DescribeEdgePackagingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeEdgePackagingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeEndpoint(ctx context.Context, input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeEndpointConfig(ctx context.Context, input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeEndpointConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeExperiment(ctx context.Context, input *sagemaker.DescribeExperimentInput) (*sagemaker.DescribeExperimentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeExperimentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFeatureGroup(ctx context.Context, input *sagemaker.DescribeFeatureGroupInput) (*sagemaker.DescribeFeatureGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFeatureGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFlowDefinition(ctx context.Context, input *sagemaker.DescribeFlowDefinitionInput) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFlowDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeHumanTaskUi(ctx context.Context, input *sagemaker.DescribeHumanTaskUiInput) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeHumanTaskUiWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeHyperParameterTuningJob(ctx context.Context, input *sagemaker.DescribeHyperParameterTuningJobInput) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeHyperParameterTuningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeImage(ctx context.Context, input *sagemaker.DescribeImageInput) (*sagemaker.DescribeImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeImageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeImageVersion(ctx context.Context, input *sagemaker.DescribeImageVersionInput) (*sagemaker.DescribeImageVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeImageVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeLabelingJob(ctx context.Context, input *sagemaker.DescribeLabelingJobInput) (*sagemaker.DescribeLabelingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeLabelingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModel(ctx context.Context, input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModelBiasJobDefinition(ctx context.Context, input *sagemaker.DescribeModelBiasJobDefinitionInput) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelBiasJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModelExplainabilityJobDefinition(ctx context.Context, input *sagemaker.DescribeModelExplainabilityJobDefinitionInput) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelExplainabilityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModelPackage(ctx context.Context, input *sagemaker.DescribeModelPackageInput) (*sagemaker.DescribeModelPackageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelPackageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModelPackageGroup(ctx context.Context, input *sagemaker.DescribeModelPackageGroupInput) (*sagemaker.DescribeModelPackageGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelPackageGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeModelQualityJobDefinition(ctx context.Context, input *sagemaker.DescribeModelQualityJobDefinitionInput) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeModelQualityJobDefinitionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeMonitoringSchedule(ctx context.Context, input *sagemaker.DescribeMonitoringScheduleInput) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeNotebookInstance(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeNotebookInstanceLifecycleConfig(ctx context.Context, input *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeNotebookInstanceLifecycleConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePipeline(ctx context.Context, input *sagemaker.DescribePipelineInput) (*sagemaker.DescribePipelineOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePipelineWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePipelineDefinitionForExecution(ctx context.Context, input *sagemaker.DescribePipelineDefinitionForExecutionInput) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePipelineDefinitionForExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribePipelineExecution(ctx context.Context, input *sagemaker.DescribePipelineExecutionInput) (*sagemaker.DescribePipelineExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribePipelineExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProcessingJob(ctx context.Context, input *sagemaker.DescribeProcessingJobInput) (*sagemaker.DescribeProcessingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProcessingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeProject(ctx context.Context, input *sagemaker.DescribeProjectInput) (*sagemaker.DescribeProjectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeProjectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeSubscribedWorkteam(ctx context.Context, input *sagemaker.DescribeSubscribedWorkteamInput) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeSubscribedWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTrainingJob(ctx context.Context, input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTrainingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTransformJob(ctx context.Context, input *sagemaker.DescribeTransformJobInput) (*sagemaker.DescribeTransformJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTransformJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTrial(ctx context.Context, input *sagemaker.DescribeTrialInput) (*sagemaker.DescribeTrialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTrialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTrialComponent(ctx context.Context, input *sagemaker.DescribeTrialComponentInput) (*sagemaker.DescribeTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeUserProfile(ctx context.Context, input *sagemaker.DescribeUserProfileInput) (*sagemaker.DescribeUserProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeUserProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeWorkforce(ctx context.Context, input *sagemaker.DescribeWorkforceInput) (*sagemaker.DescribeWorkforceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeWorkforceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeWorkteam(ctx context.Context, input *sagemaker.DescribeWorkteamInput) (*sagemaker.DescribeWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisableSagemakerServicecatalogPortfolio(ctx context.Context, input *sagemaker.DisableSagemakerServicecatalogPortfolioInput) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisableSagemakerServicecatalogPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateTrialComponent(ctx context.Context, input *sagemaker.DisassociateTrialComponentInput) (*sagemaker.DisassociateTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) EnableSagemakerServicecatalogPortfolio(ctx context.Context, input *sagemaker.EnableSagemakerServicecatalogPortfolioInput) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.EnableSagemakerServicecatalogPortfolioWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDeviceFleetReport(ctx context.Context, input *sagemaker.GetDeviceFleetReportInput) (*sagemaker.GetDeviceFleetReportOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDeviceFleetReportWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetModelPackageGroupPolicy(ctx context.Context, input *sagemaker.GetModelPackageGroupPolicyInput) (*sagemaker.GetModelPackageGroupPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetModelPackageGroupPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetSagemakerServicecatalogPortfolioStatus(ctx context.Context, input *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetSagemakerServicecatalogPortfolioStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetSearchSuggestions(ctx context.Context, input *sagemaker.GetSearchSuggestionsInput) (*sagemaker.GetSearchSuggestionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetSearchSuggestionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListActions(ctx context.Context, input *sagemaker.ListActionsInput) (*sagemaker.ListActionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListActionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAlgorithms(ctx context.Context, input *sagemaker.ListAlgorithmsInput) (*sagemaker.ListAlgorithmsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAlgorithmsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAppImageConfigs(ctx context.Context, input *sagemaker.ListAppImageConfigsInput) (*sagemaker.ListAppImageConfigsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAppImageConfigsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListApps(ctx context.Context, input *sagemaker.ListAppsInput) (*sagemaker.ListAppsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAppsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListArtifacts(ctx context.Context, input *sagemaker.ListArtifactsInput) (*sagemaker.ListArtifactsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListArtifactsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAssociations(ctx context.Context, input *sagemaker.ListAssociationsInput) (*sagemaker.ListAssociationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAssociationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAutoMLJobs(ctx context.Context, input *sagemaker.ListAutoMLJobsInput) (*sagemaker.ListAutoMLJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAutoMLJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListCandidatesForAutoMLJob(ctx context.Context, input *sagemaker.ListCandidatesForAutoMLJobInput) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListCandidatesForAutoMLJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListCodeRepositories(ctx context.Context, input *sagemaker.ListCodeRepositoriesInput) (*sagemaker.ListCodeRepositoriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListCodeRepositoriesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListCompilationJobs(ctx context.Context, input *sagemaker.ListCompilationJobsInput) (*sagemaker.ListCompilationJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListCompilationJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListContexts(ctx context.Context, input *sagemaker.ListContextsInput) (*sagemaker.ListContextsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListContextsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDataQualityJobDefinitions(ctx context.Context, input *sagemaker.ListDataQualityJobDefinitionsInput) (*sagemaker.ListDataQualityJobDefinitionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDataQualityJobDefinitionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDeviceFleets(ctx context.Context, input *sagemaker.ListDeviceFleetsInput) (*sagemaker.ListDeviceFleetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDeviceFleetsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDevices(ctx context.Context, input *sagemaker.ListDevicesInput) (*sagemaker.ListDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDevicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDomains(ctx context.Context, input *sagemaker.ListDomainsInput) (*sagemaker.ListDomainsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDomainsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListEdgePackagingJobs(ctx context.Context, input *sagemaker.ListEdgePackagingJobsInput) (*sagemaker.ListEdgePackagingJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListEdgePackagingJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListEndpointConfigs(ctx context.Context, input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListEndpointConfigsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListEndpoints(ctx context.Context, input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListEndpointsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListExperiments(ctx context.Context, input *sagemaker.ListExperimentsInput) (*sagemaker.ListExperimentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListExperimentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListFeatureGroups(ctx context.Context, input *sagemaker.ListFeatureGroupsInput) (*sagemaker.ListFeatureGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListFeatureGroupsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListFlowDefinitions(ctx context.Context, input *sagemaker.ListFlowDefinitionsInput) (*sagemaker.ListFlowDefinitionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListFlowDefinitionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHumanTaskUis(ctx context.Context, input *sagemaker.ListHumanTaskUisInput) (*sagemaker.ListHumanTaskUisOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHumanTaskUisWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListHyperParameterTuningJobs(ctx context.Context, input *sagemaker.ListHyperParameterTuningJobsInput) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListHyperParameterTuningJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListImageVersions(ctx context.Context, input *sagemaker.ListImageVersionsInput) (*sagemaker.ListImageVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListImageVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListImages(ctx context.Context, input *sagemaker.ListImagesInput) (*sagemaker.ListImagesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListImagesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLabelingJobs(ctx context.Context, input *sagemaker.ListLabelingJobsInput) (*sagemaker.ListLabelingJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLabelingJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLabelingJobsForWorkteam(ctx context.Context, input *sagemaker.ListLabelingJobsForWorkteamInput) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLabelingJobsForWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModelBiasJobDefinitions(ctx context.Context, input *sagemaker.ListModelBiasJobDefinitionsInput) (*sagemaker.ListModelBiasJobDefinitionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelBiasJobDefinitionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModelExplainabilityJobDefinitions(ctx context.Context, input *sagemaker.ListModelExplainabilityJobDefinitionsInput) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelExplainabilityJobDefinitionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModelPackageGroups(ctx context.Context, input *sagemaker.ListModelPackageGroupsInput) (*sagemaker.ListModelPackageGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelPackageGroupsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModelPackages(ctx context.Context, input *sagemaker.ListModelPackagesInput) (*sagemaker.ListModelPackagesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelPackagesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModelQualityJobDefinitions(ctx context.Context, input *sagemaker.ListModelQualityJobDefinitionsInput) (*sagemaker.ListModelQualityJobDefinitionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelQualityJobDefinitionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListModels(ctx context.Context, input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListModelsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListMonitoringExecutions(ctx context.Context, input *sagemaker.ListMonitoringExecutionsInput) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListMonitoringExecutionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListMonitoringSchedules(ctx context.Context, input *sagemaker.ListMonitoringSchedulesInput) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListMonitoringSchedulesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListNotebookInstanceLifecycleConfigs(ctx context.Context, input *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListNotebookInstanceLifecycleConfigsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListNotebookInstances(ctx context.Context, input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListNotebookInstancesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPipelineExecutionSteps(ctx context.Context, input *sagemaker.ListPipelineExecutionStepsInput) (*sagemaker.ListPipelineExecutionStepsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPipelineExecutionStepsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPipelineExecutions(ctx context.Context, input *sagemaker.ListPipelineExecutionsInput) (*sagemaker.ListPipelineExecutionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPipelineExecutionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPipelineParametersForExecution(ctx context.Context, input *sagemaker.ListPipelineParametersForExecutionInput) (*sagemaker.ListPipelineParametersForExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPipelineParametersForExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPipelines(ctx context.Context, input *sagemaker.ListPipelinesInput) (*sagemaker.ListPipelinesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPipelinesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProcessingJobs(ctx context.Context, input *sagemaker.ListProcessingJobsInput) (*sagemaker.ListProcessingJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProcessingJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProjects(ctx context.Context, input *sagemaker.ListProjectsInput) (*sagemaker.ListProjectsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProjectsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSubscribedWorkteams(ctx context.Context, input *sagemaker.ListSubscribedWorkteamsInput) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSubscribedWorkteamsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTags(ctx context.Context, input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrainingJobs(ctx context.Context, input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrainingJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrainingJobsForHyperParameterTuningJob(ctx context.Context, input *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrainingJobsForHyperParameterTuningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTransformJobs(ctx context.Context, input *sagemaker.ListTransformJobsInput) (*sagemaker.ListTransformJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTransformJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrialComponents(ctx context.Context, input *sagemaker.ListTrialComponentsInput) (*sagemaker.ListTrialComponentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrialComponentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTrials(ctx context.Context, input *sagemaker.ListTrialsInput) (*sagemaker.ListTrialsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTrialsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListUserProfiles(ctx context.Context, input *sagemaker.ListUserProfilesInput) (*sagemaker.ListUserProfilesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListUserProfilesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListWorkforces(ctx context.Context, input *sagemaker.ListWorkforcesInput) (*sagemaker.ListWorkforcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListWorkforcesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListWorkteams(ctx context.Context, input *sagemaker.ListWorkteamsInput) (*sagemaker.ListWorkteamsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListWorkteamsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutModelPackageGroupPolicy(ctx context.Context, input *sagemaker.PutModelPackageGroupPolicyInput) (*sagemaker.PutModelPackageGroupPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutModelPackageGroupPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RegisterDevices(ctx context.Context, input *sagemaker.RegisterDevicesInput) (*sagemaker.RegisterDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RegisterDevicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RenderUiTemplate(ctx context.Context, input *sagemaker.RenderUiTemplateInput) (*sagemaker.RenderUiTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RenderUiTemplateWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Search(ctx context.Context, input *sagemaker.SearchInput) (*sagemaker.SearchOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SearchWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartMonitoringSchedule(ctx context.Context, input *sagemaker.StartMonitoringScheduleInput) (*sagemaker.StartMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartNotebookInstance(ctx context.Context, input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartPipelineExecution(ctx context.Context, input *sagemaker.StartPipelineExecutionInput) (*sagemaker.StartPipelineExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartPipelineExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopAutoMLJob(ctx context.Context, input *sagemaker.StopAutoMLJobInput) (*sagemaker.StopAutoMLJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopAutoMLJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopCompilationJob(ctx context.Context, input *sagemaker.StopCompilationJobInput) (*sagemaker.StopCompilationJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopCompilationJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopEdgePackagingJob(ctx context.Context, input *sagemaker.StopEdgePackagingJobInput) (*sagemaker.StopEdgePackagingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopEdgePackagingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopHyperParameterTuningJob(ctx context.Context, input *sagemaker.StopHyperParameterTuningJobInput) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopHyperParameterTuningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopLabelingJob(ctx context.Context, input *sagemaker.StopLabelingJobInput) (*sagemaker.StopLabelingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopLabelingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopMonitoringSchedule(ctx context.Context, input *sagemaker.StopMonitoringScheduleInput) (*sagemaker.StopMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopNotebookInstance(ctx context.Context, input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopPipelineExecution(ctx context.Context, input *sagemaker.StopPipelineExecutionInput) (*sagemaker.StopPipelineExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopPipelineExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopProcessingJob(ctx context.Context, input *sagemaker.StopProcessingJobInput) (*sagemaker.StopProcessingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopProcessingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopTrainingJob(ctx context.Context, input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopTrainingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopTransformJob(ctx context.Context, input *sagemaker.StopTransformJobInput) (*sagemaker.StopTransformJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopTransformJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAction(ctx context.Context, input *sagemaker.UpdateActionInput) (*sagemaker.UpdateActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateActionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAppImageConfig(ctx context.Context, input *sagemaker.UpdateAppImageConfigInput) (*sagemaker.UpdateAppImageConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAppImageConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateArtifact(ctx context.Context, input *sagemaker.UpdateArtifactInput) (*sagemaker.UpdateArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateCodeRepository(ctx context.Context, input *sagemaker.UpdateCodeRepositoryInput) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateCodeRepositoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateContext(ctx context.Context, input *sagemaker.UpdateContextInput) (*sagemaker.UpdateContextOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateContextWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDeviceFleet(ctx context.Context, input *sagemaker.UpdateDeviceFleetInput) (*sagemaker.UpdateDeviceFleetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateDeviceFleetWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDevices(ctx context.Context, input *sagemaker.UpdateDevicesInput) (*sagemaker.UpdateDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateDevicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDomain(ctx context.Context, input *sagemaker.UpdateDomainInput) (*sagemaker.UpdateDomainOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateDomainWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateEndpoint(ctx context.Context, input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateEndpointWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateEndpointWeightsAndCapacities(ctx context.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateEndpointWeightsAndCapacitiesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateExperiment(ctx context.Context, input *sagemaker.UpdateExperimentInput) (*sagemaker.UpdateExperimentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateExperimentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateImage(ctx context.Context, input *sagemaker.UpdateImageInput) (*sagemaker.UpdateImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateImageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateModelPackage(ctx context.Context, input *sagemaker.UpdateModelPackageInput) (*sagemaker.UpdateModelPackageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateModelPackageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateMonitoringSchedule(ctx context.Context, input *sagemaker.UpdateMonitoringScheduleInput) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateMonitoringScheduleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateNotebookInstance(ctx context.Context, input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateNotebookInstanceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateNotebookInstanceLifecycleConfig(ctx context.Context, input *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateNotebookInstanceLifecycleConfigWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdatePipeline(ctx context.Context, input *sagemaker.UpdatePipelineInput) (*sagemaker.UpdatePipelineOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdatePipelineWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdatePipelineExecution(ctx context.Context, input *sagemaker.UpdatePipelineExecutionInput) (*sagemaker.UpdatePipelineExecutionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdatePipelineExecutionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTrainingJob(ctx context.Context, input *sagemaker.UpdateTrainingJobInput) (*sagemaker.UpdateTrainingJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTrainingJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTrial(ctx context.Context, input *sagemaker.UpdateTrialInput) (*sagemaker.UpdateTrialOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTrialWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateTrialComponent(ctx context.Context, input *sagemaker.UpdateTrialComponentInput) (*sagemaker.UpdateTrialComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateTrialComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateUserProfile(ctx context.Context, input *sagemaker.UpdateUserProfileInput) (*sagemaker.UpdateUserProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateUserProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateWorkforce(ctx context.Context, input *sagemaker.UpdateWorkforceInput) (*sagemaker.UpdateWorkforceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateWorkforceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateWorkteam(ctx context.Context, input *sagemaker.UpdateWorkteamInput) (*sagemaker.UpdateWorkteamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateWorkteamWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) WaitUntilEndpointDeleted(ctx context.Context, input *sagemaker.DescribeEndpointInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilEndpointDeletedWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilEndpointInService(ctx context.Context, input *sagemaker.DescribeEndpointInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilEndpointInServiceWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilNotebookInstanceDeleted(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilNotebookInstanceDeletedWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilNotebookInstanceInService(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilNotebookInstanceInServiceWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilNotebookInstanceStopped(ctx context.Context, input *sagemaker.DescribeNotebookInstanceInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilNotebookInstanceStoppedWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilProcessingJobCompletedOrStopped(ctx context.Context, input *sagemaker.DescribeProcessingJobInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilProcessingJobCompletedOrStoppedWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilTrainingJobCompletedOrStopped(ctx context.Context, input *sagemaker.DescribeTrainingJobInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilTrainingJobCompletedOrStoppedWithContext(ctx, input, options...))
	})
}

func (a *Activities) WaitUntilTransformJobCompletedOrStopped(ctx context.Context, input *sagemaker.DescribeTransformJobInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilTransformJobCompletedOrStoppedWithContext(ctx, input, options...))
	})
}
