// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package signer

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/signer"
	"github.com/aws/aws-sdk-go/service/signer/signeriface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client signeriface.SignerAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := signer.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (signeriface.SignerAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return signer.New(sess), nil
}

func (a *Activities) AddProfilePermission(ctx context.Context, input *signer.AddProfilePermissionInput) (*signer.AddProfilePermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AddProfilePermissionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CancelSigningProfile(ctx context.Context, input *signer.CancelSigningProfileInput) (*signer.CancelSigningProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CancelSigningProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeSigningJob(ctx context.Context, input *signer.DescribeSigningJobInput) (*signer.DescribeSigningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeSigningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetSigningPlatform(ctx context.Context, input *signer.GetSigningPlatformInput) (*signer.GetSigningPlatformOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetSigningPlatformWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetSigningProfile(ctx context.Context, input *signer.GetSigningProfileInput) (*signer.GetSigningProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetSigningProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListProfilePermissions(ctx context.Context, input *signer.ListProfilePermissionsInput) (*signer.ListProfilePermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListProfilePermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSigningJobs(ctx context.Context, input *signer.ListSigningJobsInput) (*signer.ListSigningJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSigningJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSigningPlatforms(ctx context.Context, input *signer.ListSigningPlatformsInput) (*signer.ListSigningPlatformsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSigningPlatformsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSigningProfiles(ctx context.Context, input *signer.ListSigningProfilesInput) (*signer.ListSigningProfilesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSigningProfilesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *signer.ListTagsForResourceInput) (*signer.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutSigningProfile(ctx context.Context, input *signer.PutSigningProfileInput) (*signer.PutSigningProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutSigningProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RemoveProfilePermission(ctx context.Context, input *signer.RemoveProfilePermissionInput) (*signer.RemoveProfilePermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RemoveProfilePermissionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RevokeSignature(ctx context.Context, input *signer.RevokeSignatureInput) (*signer.RevokeSignatureOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RevokeSignatureWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RevokeSigningProfile(ctx context.Context, input *signer.RevokeSigningProfileInput) (*signer.RevokeSigningProfileOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RevokeSigningProfileWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartSigningJob(ctx context.Context, input *signer.StartSigningJobInput) (*signer.StartSigningJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartSigningJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *signer.TagResourceInput) (*signer.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *signer.UntagResourceInput) (*signer.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) WaitUntilSuccessfulSigningJob(ctx context.Context, input *signer.DescribeSigningJobInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return internal.EncodeError(err)
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return internal.EncodeError(client.WaitUntilSuccessfulSigningJobWithContext(ctx, input, options...))
	})
}
