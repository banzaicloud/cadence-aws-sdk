// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package healthlake

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/healthlake"
	"github.com/aws/aws-sdk-go/service/healthlake/healthlakeiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client healthlakeiface.HealthLakeAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := healthlake.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (healthlakeiface.HealthLakeAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return healthlake.New(sess), nil
}

func (a *Activities) CreateFHIRDatastore(ctx context.Context, input *healthlake.CreateFHIRDatastoreInput) (*healthlake.CreateFHIRDatastoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateFHIRDatastoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteFHIRDatastore(ctx context.Context, input *healthlake.DeleteFHIRDatastoreInput) (*healthlake.DeleteFHIRDatastoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteFHIRDatastoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFHIRDatastore(ctx context.Context, input *healthlake.DescribeFHIRDatastoreInput) (*healthlake.DescribeFHIRDatastoreOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFHIRDatastoreWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFHIRExportJob(ctx context.Context, input *healthlake.DescribeFHIRExportJobInput) (*healthlake.DescribeFHIRExportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFHIRExportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFHIRImportJob(ctx context.Context, input *healthlake.DescribeFHIRImportJobInput) (*healthlake.DescribeFHIRImportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFHIRImportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListFHIRDatastores(ctx context.Context, input *healthlake.ListFHIRDatastoresInput) (*healthlake.ListFHIRDatastoresOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListFHIRDatastoresWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartFHIRExportJob(ctx context.Context, input *healthlake.StartFHIRExportJobInput) (*healthlake.StartFHIRExportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StartFHIRExportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartFHIRImportJob(ctx context.Context, input *healthlake.StartFHIRImportJobInput) (*healthlake.StartFHIRImportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StartFHIRImportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
