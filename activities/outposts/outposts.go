// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package outposts

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/outposts"
	"github.com/aws/aws-sdk-go/service/outposts/outpostsiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client outpostsiface.OutpostsAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := outposts.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (outpostsiface.OutpostsAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return outposts.New(sess), nil
}

func (a *Activities) CreateOutpost(ctx context.Context, input *outposts.CreateOutpostInput) (*outposts.CreateOutpostOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateOutpostWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteOutpost(ctx context.Context, input *outposts.DeleteOutpostInput) (*outposts.DeleteOutpostOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteOutpostWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteSite(ctx context.Context, input *outposts.DeleteSiteInput) (*outposts.DeleteSiteOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteSiteWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetOutpost(ctx context.Context, input *outposts.GetOutpostInput) (*outposts.GetOutpostOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetOutpostWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetOutpostInstanceTypes(ctx context.Context, input *outposts.GetOutpostInstanceTypesInput) (*outposts.GetOutpostInstanceTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetOutpostInstanceTypesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListOutposts(ctx context.Context, input *outposts.ListOutpostsInput) (*outposts.ListOutpostsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListOutpostsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSites(ctx context.Context, input *outposts.ListSitesInput) (*outposts.ListSitesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSitesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *outposts.ListTagsForResourceInput) (*outposts.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *outposts.TagResourceInput) (*outposts.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *outposts.UntagResourceInput) (*outposts.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
