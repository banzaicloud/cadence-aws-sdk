// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package kendra

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/kendra"
	"github.com/aws/aws-sdk-go/service/kendra/kendraiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client kendraiface.KendraAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := kendra.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (kendraiface.KendraAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return kendra.New(sess), nil
}

func (a *Activities) BatchDeleteDocument(ctx context.Context, input *kendra.BatchDeleteDocumentInput) (*kendra.BatchDeleteDocumentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDeleteDocumentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchPutDocument(ctx context.Context, input *kendra.BatchPutDocumentInput) (*kendra.BatchPutDocumentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchPutDocumentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDataSource(ctx context.Context, input *kendra.CreateDataSourceInput) (*kendra.CreateDataSourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateDataSourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateFaq(ctx context.Context, input *kendra.CreateFaqInput) (*kendra.CreateFaqOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateFaqWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateIndex(ctx context.Context, input *kendra.CreateIndexInput) (*kendra.CreateIndexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateIndexWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateThesaurus(ctx context.Context, input *kendra.CreateThesaurusInput) (*kendra.CreateThesaurusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateThesaurusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteDataSource(ctx context.Context, input *kendra.DeleteDataSourceInput) (*kendra.DeleteDataSourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteDataSourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteFaq(ctx context.Context, input *kendra.DeleteFaqInput) (*kendra.DeleteFaqOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteFaqWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteIndex(ctx context.Context, input *kendra.DeleteIndexInput) (*kendra.DeleteIndexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteIndexWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteThesaurus(ctx context.Context, input *kendra.DeleteThesaurusInput) (*kendra.DeleteThesaurusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteThesaurusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeDataSource(ctx context.Context, input *kendra.DescribeDataSourceInput) (*kendra.DescribeDataSourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeDataSourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeFaq(ctx context.Context, input *kendra.DescribeFaqInput) (*kendra.DescribeFaqOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeFaqWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeIndex(ctx context.Context, input *kendra.DescribeIndexInput) (*kendra.DescribeIndexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeIndexWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeThesaurus(ctx context.Context, input *kendra.DescribeThesaurusInput) (*kendra.DescribeThesaurusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeThesaurusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDataSourceSyncJobs(ctx context.Context, input *kendra.ListDataSourceSyncJobsInput) (*kendra.ListDataSourceSyncJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDataSourceSyncJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDataSources(ctx context.Context, input *kendra.ListDataSourcesInput) (*kendra.ListDataSourcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDataSourcesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListFaqs(ctx context.Context, input *kendra.ListFaqsInput) (*kendra.ListFaqsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListFaqsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListIndices(ctx context.Context, input *kendra.ListIndicesInput) (*kendra.ListIndicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListIndicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *kendra.ListTagsForResourceInput) (*kendra.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListThesauri(ctx context.Context, input *kendra.ListThesauriInput) (*kendra.ListThesauriOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListThesauriWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) Query(ctx context.Context, input *kendra.QueryInput) (*kendra.QueryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.QueryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartDataSourceSyncJob(ctx context.Context, input *kendra.StartDataSourceSyncJobInput) (*kendra.StartDataSourceSyncJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartDataSourceSyncJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StopDataSourceSyncJob(ctx context.Context, input *kendra.StopDataSourceSyncJobInput) (*kendra.StopDataSourceSyncJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StopDataSourceSyncJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) SubmitFeedback(ctx context.Context, input *kendra.SubmitFeedbackInput) (*kendra.SubmitFeedbackOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.SubmitFeedbackWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *kendra.TagResourceInput) (*kendra.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *kendra.UntagResourceInput) (*kendra.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateDataSource(ctx context.Context, input *kendra.UpdateDataSourceInput) (*kendra.UpdateDataSourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateDataSourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateIndex(ctx context.Context, input *kendra.UpdateIndexInput) (*kendra.UpdateIndexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateIndexWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateThesaurus(ctx context.Context, input *kendra.UpdateThesaurusInput) (*kendra.UpdateThesaurusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateThesaurusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
