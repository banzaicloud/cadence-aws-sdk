// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lexmodelsv2

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/lexmodelsv2"
	"github.com/aws/aws-sdk-go/service/lexmodelsv2/lexmodelsv2iface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client lexmodelsv2iface.LexModelsV2API

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := lexmodelsv2.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (lexmodelsv2iface.LexModelsV2API, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return lexmodelsv2.New(sess), nil
}

func (a *Activities) BuildBotLocale(ctx context.Context, input *lexmodelsv2.BuildBotLocaleInput) (*lexmodelsv2.BuildBotLocaleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BuildBotLocaleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBot(ctx context.Context, input *lexmodelsv2.CreateBotInput) (*lexmodelsv2.CreateBotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBotAlias(ctx context.Context, input *lexmodelsv2.CreateBotAliasInput) (*lexmodelsv2.CreateBotAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBotAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBotLocale(ctx context.Context, input *lexmodelsv2.CreateBotLocaleInput) (*lexmodelsv2.CreateBotLocaleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBotLocaleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateBotVersion(ctx context.Context, input *lexmodelsv2.CreateBotVersionInput) (*lexmodelsv2.CreateBotVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateBotVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateIntent(ctx context.Context, input *lexmodelsv2.CreateIntentInput) (*lexmodelsv2.CreateIntentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateIntentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateSlot(ctx context.Context, input *lexmodelsv2.CreateSlotInput) (*lexmodelsv2.CreateSlotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateSlotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateSlotType(ctx context.Context, input *lexmodelsv2.CreateSlotTypeInput) (*lexmodelsv2.CreateSlotTypeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateSlotTypeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBot(ctx context.Context, input *lexmodelsv2.DeleteBotInput) (*lexmodelsv2.DeleteBotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBotAlias(ctx context.Context, input *lexmodelsv2.DeleteBotAliasInput) (*lexmodelsv2.DeleteBotAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBotAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBotLocale(ctx context.Context, input *lexmodelsv2.DeleteBotLocaleInput) (*lexmodelsv2.DeleteBotLocaleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBotLocaleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteBotVersion(ctx context.Context, input *lexmodelsv2.DeleteBotVersionInput) (*lexmodelsv2.DeleteBotVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteBotVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteIntent(ctx context.Context, input *lexmodelsv2.DeleteIntentInput) (*lexmodelsv2.DeleteIntentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteIntentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteSlot(ctx context.Context, input *lexmodelsv2.DeleteSlotInput) (*lexmodelsv2.DeleteSlotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteSlotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteSlotType(ctx context.Context, input *lexmodelsv2.DeleteSlotTypeInput) (*lexmodelsv2.DeleteSlotTypeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteSlotTypeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeBot(ctx context.Context, input *lexmodelsv2.DescribeBotInput) (*lexmodelsv2.DescribeBotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeBotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeBotAlias(ctx context.Context, input *lexmodelsv2.DescribeBotAliasInput) (*lexmodelsv2.DescribeBotAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeBotAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeBotLocale(ctx context.Context, input *lexmodelsv2.DescribeBotLocaleInput) (*lexmodelsv2.DescribeBotLocaleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeBotLocaleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeBotVersion(ctx context.Context, input *lexmodelsv2.DescribeBotVersionInput) (*lexmodelsv2.DescribeBotVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeBotVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeIntent(ctx context.Context, input *lexmodelsv2.DescribeIntentInput) (*lexmodelsv2.DescribeIntentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeIntentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeSlot(ctx context.Context, input *lexmodelsv2.DescribeSlotInput) (*lexmodelsv2.DescribeSlotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeSlotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeSlotType(ctx context.Context, input *lexmodelsv2.DescribeSlotTypeInput) (*lexmodelsv2.DescribeSlotTypeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeSlotTypeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBotAliases(ctx context.Context, input *lexmodelsv2.ListBotAliasesInput) (*lexmodelsv2.ListBotAliasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBotAliasesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBotLocales(ctx context.Context, input *lexmodelsv2.ListBotLocalesInput) (*lexmodelsv2.ListBotLocalesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBotLocalesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBotVersions(ctx context.Context, input *lexmodelsv2.ListBotVersionsInput) (*lexmodelsv2.ListBotVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBotVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBots(ctx context.Context, input *lexmodelsv2.ListBotsInput) (*lexmodelsv2.ListBotsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBotsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBuiltInIntents(ctx context.Context, input *lexmodelsv2.ListBuiltInIntentsInput) (*lexmodelsv2.ListBuiltInIntentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBuiltInIntentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListBuiltInSlotTypes(ctx context.Context, input *lexmodelsv2.ListBuiltInSlotTypesInput) (*lexmodelsv2.ListBuiltInSlotTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListBuiltInSlotTypesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListIntents(ctx context.Context, input *lexmodelsv2.ListIntentsInput) (*lexmodelsv2.ListIntentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListIntentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSlotTypes(ctx context.Context, input *lexmodelsv2.ListSlotTypesInput) (*lexmodelsv2.ListSlotTypesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSlotTypesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListSlots(ctx context.Context, input *lexmodelsv2.ListSlotsInput) (*lexmodelsv2.ListSlotsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListSlotsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *lexmodelsv2.ListTagsForResourceInput) (*lexmodelsv2.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *lexmodelsv2.TagResourceInput) (*lexmodelsv2.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *lexmodelsv2.UntagResourceInput) (*lexmodelsv2.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBot(ctx context.Context, input *lexmodelsv2.UpdateBotInput) (*lexmodelsv2.UpdateBotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBotAlias(ctx context.Context, input *lexmodelsv2.UpdateBotAliasInput) (*lexmodelsv2.UpdateBotAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBotAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateBotLocale(ctx context.Context, input *lexmodelsv2.UpdateBotLocaleInput) (*lexmodelsv2.UpdateBotLocaleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateBotLocaleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateIntent(ctx context.Context, input *lexmodelsv2.UpdateIntentInput) (*lexmodelsv2.UpdateIntentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateIntentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateSlot(ctx context.Context, input *lexmodelsv2.UpdateSlotInput) (*lexmodelsv2.UpdateSlotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateSlotWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateSlotType(ctx context.Context, input *lexmodelsv2.UpdateSlotTypeInput) (*lexmodelsv2.UpdateSlotTypeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateSlotTypeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
