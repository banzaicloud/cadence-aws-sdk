// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package honeycode

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/honeycode"
	"github.com/aws/aws-sdk-go/service/honeycode/honeycodeiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client honeycodeiface.HoneycodeAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := honeycode.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (honeycodeiface.HoneycodeAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return honeycode.New(sess), nil
}

func (a *Activities) BatchCreateTableRows(ctx context.Context, input *honeycode.BatchCreateTableRowsInput) (*honeycode.BatchCreateTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchCreateTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchDeleteTableRows(ctx context.Context, input *honeycode.BatchDeleteTableRowsInput) (*honeycode.BatchDeleteTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDeleteTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchUpdateTableRows(ctx context.Context, input *honeycode.BatchUpdateTableRowsInput) (*honeycode.BatchUpdateTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchUpdateTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchUpsertTableRows(ctx context.Context, input *honeycode.BatchUpsertTableRowsInput) (*honeycode.BatchUpsertTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchUpsertTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeTableDataImportJob(ctx context.Context, input *honeycode.DescribeTableDataImportJobInput) (*honeycode.DescribeTableDataImportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeTableDataImportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetScreenData(ctx context.Context, input *honeycode.GetScreenDataInput) (*honeycode.GetScreenDataOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetScreenDataWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) InvokeScreenAutomation(ctx context.Context, input *honeycode.InvokeScreenAutomationInput) (*honeycode.InvokeScreenAutomationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.InvokeScreenAutomationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTableColumns(ctx context.Context, input *honeycode.ListTableColumnsInput) (*honeycode.ListTableColumnsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTableColumnsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTableRows(ctx context.Context, input *honeycode.ListTableRowsInput) (*honeycode.ListTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTables(ctx context.Context, input *honeycode.ListTablesInput) (*honeycode.ListTablesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTablesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) QueryTableRows(ctx context.Context, input *honeycode.QueryTableRowsInput) (*honeycode.QueryTableRowsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.QueryTableRowsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartTableDataImportJob(ctx context.Context, input *honeycode.StartTableDataImportJobInput) (*honeycode.StartTableDataImportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.StartTableDataImportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
