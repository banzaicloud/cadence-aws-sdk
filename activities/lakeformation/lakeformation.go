// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package lakeformation

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/lakeformation"
	"github.com/aws/aws-sdk-go/service/lakeformation/lakeformationiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client lakeformationiface.LakeFormationAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := lakeformation.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (lakeformationiface.LakeFormationAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return lakeformation.New(sess), nil
}

func (a *Activities) BatchGrantPermissions(ctx context.Context, input *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchGrantPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchRevokePermissions(ctx context.Context, input *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchRevokePermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeregisterResource(ctx context.Context, input *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeregisterResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeResource(ctx context.Context, input *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDataLakeSettings(ctx context.Context, input *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDataLakeSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEffectivePermissionsForPath(ctx context.Context, input *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEffectivePermissionsForPathWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GrantPermissions(ctx context.Context, input *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GrantPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListPermissions(ctx context.Context, input *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResources(ctx context.Context, input *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourcesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutDataLakeSettings(ctx context.Context, input *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutDataLakeSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RegisterResource(ctx context.Context, input *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RegisterResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RevokePermissions(ctx context.Context, input *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RevokePermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateResource(ctx context.Context, input *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
