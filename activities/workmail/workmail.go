// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package workmail

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/workmail"
	"github.com/aws/aws-sdk-go/service/workmail/workmailiface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client workmailiface.WorkMailAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := workmail.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (workmailiface.WorkMailAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return workmail.New(sess), nil
}

func (a *Activities) AssociateDelegateToResource(ctx context.Context, input *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateDelegateToResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) AssociateMemberToGroup(ctx context.Context, input *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateMemberToGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CancelMailboxExportJob(ctx context.Context, input *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CancelMailboxExportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAlias(ctx context.Context, input *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateGroup(ctx context.Context, input *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateOrganization(ctx context.Context, input *workmail.CreateOrganizationInput) (*workmail.CreateOrganizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateOrganizationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateResource(ctx context.Context, input *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateUser(ctx context.Context, input *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateUserWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAccessControlRule(ctx context.Context, input *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAccessControlRuleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAlias(ctx context.Context, input *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAliasWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteGroup(ctx context.Context, input *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteMailboxPermissions(ctx context.Context, input *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteMailboxPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteOrganization(ctx context.Context, input *workmail.DeleteOrganizationInput) (*workmail.DeleteOrganizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.DeleteOrganizationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteResource(ctx context.Context, input *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteRetentionPolicy(ctx context.Context, input *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteRetentionPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteUser(ctx context.Context, input *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteUserWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeregisterFromWorkMail(ctx context.Context, input *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeregisterFromWorkMailWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeGroup(ctx context.Context, input *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeMailboxExportJob(ctx context.Context, input *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeMailboxExportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeOrganization(ctx context.Context, input *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeOrganizationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeResource(ctx context.Context, input *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeUser(ctx context.Context, input *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeUserWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateDelegateFromResource(ctx context.Context, input *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateDelegateFromResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateMemberFromGroup(ctx context.Context, input *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateMemberFromGroupWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAccessControlEffect(ctx context.Context, input *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAccessControlEffectWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDefaultRetentionPolicy(ctx context.Context, input *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDefaultRetentionPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetMailboxDetails(ctx context.Context, input *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetMailboxDetailsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAccessControlRules(ctx context.Context, input *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAccessControlRulesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAliases(ctx context.Context, input *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAliasesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListGroupMembers(ctx context.Context, input *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListGroupMembersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListGroups(ctx context.Context, input *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListGroupsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListMailboxExportJobs(ctx context.Context, input *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListMailboxExportJobsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListMailboxPermissions(ctx context.Context, input *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListMailboxPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListOrganizations(ctx context.Context, input *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListOrganizationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResourceDelegates(ctx context.Context, input *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourceDelegatesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResources(ctx context.Context, input *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourcesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListUsers(ctx context.Context, input *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListUsersWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutAccessControlRule(ctx context.Context, input *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutAccessControlRuleWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutMailboxPermissions(ctx context.Context, input *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutMailboxPermissionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) PutRetentionPolicy(ctx context.Context, input *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.PutRetentionPolicyWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RegisterToWorkMail(ctx context.Context, input *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RegisterToWorkMailWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ResetPassword(ctx context.Context, input *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ResetPasswordWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) StartMailboxExportJob(ctx context.Context, input *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.StartMailboxExportJobWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateMailboxQuota(ctx context.Context, input *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateMailboxQuotaWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdatePrimaryEmailAddress(ctx context.Context, input *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdatePrimaryEmailAddressWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateResource(ctx context.Context, input *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
