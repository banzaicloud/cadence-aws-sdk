// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package licensemanager

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"github.com/aws/aws-sdk-go/service/licensemanager/licensemanageriface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client licensemanageriface.LicenseManagerAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := licensemanager.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (licensemanageriface.LicenseManagerAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return licensemanager.New(sess), nil
}

func (a *Activities) AcceptGrant(ctx context.Context, input *licensemanager.AcceptGrantInput) (*licensemanager.AcceptGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AcceptGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CheckInLicense(ctx context.Context, input *licensemanager.CheckInLicenseInput) (*licensemanager.CheckInLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CheckInLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CheckoutBorrowLicense(ctx context.Context, input *licensemanager.CheckoutBorrowLicenseInput) (*licensemanager.CheckoutBorrowLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CheckoutBorrowLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CheckoutLicense(ctx context.Context, input *licensemanager.CheckoutLicenseInput) (*licensemanager.CheckoutLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CheckoutLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateGrant(ctx context.Context, input *licensemanager.CreateGrantInput) (*licensemanager.CreateGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateGrantVersion(ctx context.Context, input *licensemanager.CreateGrantVersionInput) (*licensemanager.CreateGrantVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateGrantVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLicense(ctx context.Context, input *licensemanager.CreateLicenseInput) (*licensemanager.CreateLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLicenseConfiguration(ctx context.Context, input *licensemanager.CreateLicenseConfigurationInput) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateLicenseVersion(ctx context.Context, input *licensemanager.CreateLicenseVersionInput) (*licensemanager.CreateLicenseVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateLicenseVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateToken(ctx context.Context, input *licensemanager.CreateTokenInput) (*licensemanager.CreateTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	internal.SetClientToken(ctx, &input.ClientToken)
	output, err := client.CreateTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteGrant(ctx context.Context, input *licensemanager.DeleteGrantInput) (*licensemanager.DeleteGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteLicense(ctx context.Context, input *licensemanager.DeleteLicenseInput) (*licensemanager.DeleteLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteLicenseConfiguration(ctx context.Context, input *licensemanager.DeleteLicenseConfigurationInput) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteToken(ctx context.Context, input *licensemanager.DeleteTokenInput) (*licensemanager.DeleteTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ExtendLicenseConsumption(ctx context.Context, input *licensemanager.ExtendLicenseConsumptionInput) (*licensemanager.ExtendLicenseConsumptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ExtendLicenseConsumptionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAccessToken(ctx context.Context, input *licensemanager.GetAccessTokenInput) (*licensemanager.GetAccessTokenOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAccessTokenWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetGrant(ctx context.Context, input *licensemanager.GetGrantInput) (*licensemanager.GetGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLicense(ctx context.Context, input *licensemanager.GetLicenseInput) (*licensemanager.GetLicenseOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLicenseWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLicenseConfiguration(ctx context.Context, input *licensemanager.GetLicenseConfigurationInput) (*licensemanager.GetLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetLicenseUsage(ctx context.Context, input *licensemanager.GetLicenseUsageInput) (*licensemanager.GetLicenseUsageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetLicenseUsageWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetServiceSettings(ctx context.Context, input *licensemanager.GetServiceSettingsInput) (*licensemanager.GetServiceSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetServiceSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAssociationsForLicenseConfiguration(ctx context.Context, input *licensemanager.ListAssociationsForLicenseConfigurationInput) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAssociationsForLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDistributedGrants(ctx context.Context, input *licensemanager.ListDistributedGrantsInput) (*licensemanager.ListDistributedGrantsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDistributedGrantsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListFailuresForLicenseConfigurationOperations(ctx context.Context, input *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListFailuresForLicenseConfigurationOperationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLicenseConfigurations(ctx context.Context, input *licensemanager.ListLicenseConfigurationsInput) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLicenseConfigurationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLicenseSpecificationsForResource(ctx context.Context, input *licensemanager.ListLicenseSpecificationsForResourceInput) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLicenseSpecificationsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLicenseVersions(ctx context.Context, input *licensemanager.ListLicenseVersionsInput) (*licensemanager.ListLicenseVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLicenseVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListLicenses(ctx context.Context, input *licensemanager.ListLicensesInput) (*licensemanager.ListLicensesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListLicensesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListReceivedGrants(ctx context.Context, input *licensemanager.ListReceivedGrantsInput) (*licensemanager.ListReceivedGrantsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListReceivedGrantsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListReceivedLicenses(ctx context.Context, input *licensemanager.ListReceivedLicensesInput) (*licensemanager.ListReceivedLicensesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListReceivedLicensesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListResourceInventory(ctx context.Context, input *licensemanager.ListResourceInventoryInput) (*licensemanager.ListResourceInventoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListResourceInventoryWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *licensemanager.ListTagsForResourceInput) (*licensemanager.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTokens(ctx context.Context, input *licensemanager.ListTokensInput) (*licensemanager.ListTokensOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTokensWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListUsageForLicenseConfiguration(ctx context.Context, input *licensemanager.ListUsageForLicenseConfigurationInput) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListUsageForLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RejectGrant(ctx context.Context, input *licensemanager.RejectGrantInput) (*licensemanager.RejectGrantOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RejectGrantWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *licensemanager.TagResourceInput) (*licensemanager.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *licensemanager.UntagResourceInput) (*licensemanager.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateLicenseConfiguration(ctx context.Context, input *licensemanager.UpdateLicenseConfigurationInput) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateLicenseConfigurationWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateLicenseSpecificationsForResource(ctx context.Context, input *licensemanager.UpdateLicenseSpecificationsForResourceInput) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateLicenseSpecificationsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateServiceSettings(ctx context.Context, input *licensemanager.UpdateServiceSettingsInput) (*licensemanager.UpdateServiceSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateServiceSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
