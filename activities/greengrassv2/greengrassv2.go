// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package greengrassv2

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/greengrassv2"
	"github.com/aws/aws-sdk-go/service/greengrassv2/greengrassv2iface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client greengrassv2iface.GreengrassV2API

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := greengrassv2.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (greengrassv2iface.GreengrassV2API, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return greengrassv2.New(sess), nil
}

func (a *Activities) CancelDeployment(ctx context.Context, input *greengrassv2.CancelDeploymentInput) (*greengrassv2.CancelDeploymentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CancelDeploymentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateComponentVersion(ctx context.Context, input *greengrassv2.CreateComponentVersionInput) (*greengrassv2.CreateComponentVersionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateComponentVersionWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateDeployment(ctx context.Context, input *greengrassv2.CreateDeploymentInput) (*greengrassv2.CreateDeploymentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateDeploymentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteComponent(ctx context.Context, input *greengrassv2.DeleteComponentInput) (*greengrassv2.DeleteComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteCoreDevice(ctx context.Context, input *greengrassv2.DeleteCoreDeviceInput) (*greengrassv2.DeleteCoreDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteCoreDeviceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DescribeComponent(ctx context.Context, input *greengrassv2.DescribeComponentInput) (*greengrassv2.DescribeComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DescribeComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetComponent(ctx context.Context, input *greengrassv2.GetComponentInput) (*greengrassv2.GetComponentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetComponentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetComponentVersionArtifact(ctx context.Context, input *greengrassv2.GetComponentVersionArtifactInput) (*greengrassv2.GetComponentVersionArtifactOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetComponentVersionArtifactWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetCoreDevice(ctx context.Context, input *greengrassv2.GetCoreDeviceInput) (*greengrassv2.GetCoreDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetCoreDeviceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDeployment(ctx context.Context, input *greengrassv2.GetDeploymentInput) (*greengrassv2.GetDeploymentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDeploymentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListComponentVersions(ctx context.Context, input *greengrassv2.ListComponentVersionsInput) (*greengrassv2.ListComponentVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListComponentVersionsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListComponents(ctx context.Context, input *greengrassv2.ListComponentsInput) (*greengrassv2.ListComponentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListComponentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListCoreDevices(ctx context.Context, input *greengrassv2.ListCoreDevicesInput) (*greengrassv2.ListCoreDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListCoreDevicesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListDeployments(ctx context.Context, input *greengrassv2.ListDeploymentsInput) (*greengrassv2.ListDeploymentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListDeploymentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListEffectiveDeployments(ctx context.Context, input *greengrassv2.ListEffectiveDeploymentsInput) (*greengrassv2.ListEffectiveDeploymentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListEffectiveDeploymentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListInstalledComponents(ctx context.Context, input *greengrassv2.ListInstalledComponentsInput) (*greengrassv2.ListInstalledComponentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListInstalledComponentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *greengrassv2.ListTagsForResourceInput) (*greengrassv2.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ResolveComponentCandidates(ctx context.Context, input *greengrassv2.ResolveComponentCandidatesInput) (*greengrassv2.ResolveComponentCandidatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ResolveComponentCandidatesWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *greengrassv2.TagResourceInput) (*greengrassv2.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *greengrassv2.UntagResourceInput) (*greengrassv2.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
