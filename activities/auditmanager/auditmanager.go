// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package auditmanager

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/auditmanager"
	"github.com/aws/aws-sdk-go/service/auditmanager/auditmanageriface"

	"github.com/banzaicloud/cadence-aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client auditmanageriface.AuditManagerAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := auditmanager.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (auditmanageriface.AuditManagerAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}

	return auditmanager.New(sess), nil
}

func (a *Activities) AssociateAssessmentReportEvidenceFolder(ctx context.Context, input *auditmanager.AssociateAssessmentReportEvidenceFolderInput) (*auditmanager.AssociateAssessmentReportEvidenceFolderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.AssociateAssessmentReportEvidenceFolderWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchAssociateAssessmentReportEvidence(ctx context.Context, input *auditmanager.BatchAssociateAssessmentReportEvidenceInput) (*auditmanager.BatchAssociateAssessmentReportEvidenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchAssociateAssessmentReportEvidenceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchCreateDelegationByAssessment(ctx context.Context, input *auditmanager.BatchCreateDelegationByAssessmentInput) (*auditmanager.BatchCreateDelegationByAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchCreateDelegationByAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchDeleteDelegationByAssessment(ctx context.Context, input *auditmanager.BatchDeleteDelegationByAssessmentInput) (*auditmanager.BatchDeleteDelegationByAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDeleteDelegationByAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchDisassociateAssessmentReportEvidence(ctx context.Context, input *auditmanager.BatchDisassociateAssessmentReportEvidenceInput) (*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchDisassociateAssessmentReportEvidenceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) BatchImportEvidenceToAssessmentControl(ctx context.Context, input *auditmanager.BatchImportEvidenceToAssessmentControlInput) (*auditmanager.BatchImportEvidenceToAssessmentControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.BatchImportEvidenceToAssessmentControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAssessment(ctx context.Context, input *auditmanager.CreateAssessmentInput) (*auditmanager.CreateAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAssessmentFramework(ctx context.Context, input *auditmanager.CreateAssessmentFrameworkInput) (*auditmanager.CreateAssessmentFrameworkOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAssessmentFrameworkWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateAssessmentReport(ctx context.Context, input *auditmanager.CreateAssessmentReportInput) (*auditmanager.CreateAssessmentReportOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateAssessmentReportWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) CreateControl(ctx context.Context, input *auditmanager.CreateControlInput) (*auditmanager.CreateControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.CreateControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAssessment(ctx context.Context, input *auditmanager.DeleteAssessmentInput) (*auditmanager.DeleteAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAssessmentFramework(ctx context.Context, input *auditmanager.DeleteAssessmentFrameworkInput) (*auditmanager.DeleteAssessmentFrameworkOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAssessmentFrameworkWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteAssessmentReport(ctx context.Context, input *auditmanager.DeleteAssessmentReportInput) (*auditmanager.DeleteAssessmentReportOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteAssessmentReportWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeleteControl(ctx context.Context, input *auditmanager.DeleteControlInput) (*auditmanager.DeleteControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeleteControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeregisterAccount(ctx context.Context, input *auditmanager.DeregisterAccountInput) (*auditmanager.DeregisterAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeregisterAccountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DeregisterOrganizationAdminAccount(ctx context.Context, input *auditmanager.DeregisterOrganizationAdminAccountInput) (*auditmanager.DeregisterOrganizationAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DeregisterOrganizationAdminAccountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) DisassociateAssessmentReportEvidenceFolder(ctx context.Context, input *auditmanager.DisassociateAssessmentReportEvidenceFolderInput) (*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.DisassociateAssessmentReportEvidenceFolderWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAccountStatus(ctx context.Context, input *auditmanager.GetAccountStatusInput) (*auditmanager.GetAccountStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAccountStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAssessment(ctx context.Context, input *auditmanager.GetAssessmentInput) (*auditmanager.GetAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAssessmentFramework(ctx context.Context, input *auditmanager.GetAssessmentFrameworkInput) (*auditmanager.GetAssessmentFrameworkOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAssessmentFrameworkWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetAssessmentReportUrl(ctx context.Context, input *auditmanager.GetAssessmentReportUrlInput) (*auditmanager.GetAssessmentReportUrlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetAssessmentReportUrlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetChangeLogs(ctx context.Context, input *auditmanager.GetChangeLogsInput) (*auditmanager.GetChangeLogsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetChangeLogsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetControl(ctx context.Context, input *auditmanager.GetControlInput) (*auditmanager.GetControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetDelegations(ctx context.Context, input *auditmanager.GetDelegationsInput) (*auditmanager.GetDelegationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetDelegationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEvidence(ctx context.Context, input *auditmanager.GetEvidenceInput) (*auditmanager.GetEvidenceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEvidenceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEvidenceByEvidenceFolder(ctx context.Context, input *auditmanager.GetEvidenceByEvidenceFolderInput) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEvidenceByEvidenceFolderWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEvidenceFolder(ctx context.Context, input *auditmanager.GetEvidenceFolderInput) (*auditmanager.GetEvidenceFolderOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEvidenceFolderWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEvidenceFoldersByAssessment(ctx context.Context, input *auditmanager.GetEvidenceFoldersByAssessmentInput) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEvidenceFoldersByAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetEvidenceFoldersByAssessmentControl(ctx context.Context, input *auditmanager.GetEvidenceFoldersByAssessmentControlInput) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetEvidenceFoldersByAssessmentControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetOrganizationAdminAccount(ctx context.Context, input *auditmanager.GetOrganizationAdminAccountInput) (*auditmanager.GetOrganizationAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetOrganizationAdminAccountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetServicesInScope(ctx context.Context, input *auditmanager.GetServicesInScopeInput) (*auditmanager.GetServicesInScopeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetServicesInScopeWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) GetSettings(ctx context.Context, input *auditmanager.GetSettingsInput) (*auditmanager.GetSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.GetSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAssessmentFrameworks(ctx context.Context, input *auditmanager.ListAssessmentFrameworksInput) (*auditmanager.ListAssessmentFrameworksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAssessmentFrameworksWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAssessmentReports(ctx context.Context, input *auditmanager.ListAssessmentReportsInput) (*auditmanager.ListAssessmentReportsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAssessmentReportsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListAssessments(ctx context.Context, input *auditmanager.ListAssessmentsInput) (*auditmanager.ListAssessmentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListAssessmentsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListControls(ctx context.Context, input *auditmanager.ListControlsInput) (*auditmanager.ListControlsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListControlsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListKeywordsForDataSource(ctx context.Context, input *auditmanager.ListKeywordsForDataSourceInput) (*auditmanager.ListKeywordsForDataSourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListKeywordsForDataSourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListNotifications(ctx context.Context, input *auditmanager.ListNotificationsInput) (*auditmanager.ListNotificationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListNotificationsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *auditmanager.ListTagsForResourceInput) (*auditmanager.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ListTagsForResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RegisterAccount(ctx context.Context, input *auditmanager.RegisterAccountInput) (*auditmanager.RegisterAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RegisterAccountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) RegisterOrganizationAdminAccount(ctx context.Context, input *auditmanager.RegisterOrganizationAdminAccountInput) (*auditmanager.RegisterOrganizationAdminAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.RegisterOrganizationAdminAccountWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) TagResource(ctx context.Context, input *auditmanager.TagResourceInput) (*auditmanager.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.TagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UntagResource(ctx context.Context, input *auditmanager.UntagResourceInput) (*auditmanager.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UntagResourceWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAssessment(ctx context.Context, input *auditmanager.UpdateAssessmentInput) (*auditmanager.UpdateAssessmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAssessmentWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAssessmentControl(ctx context.Context, input *auditmanager.UpdateAssessmentControlInput) (*auditmanager.UpdateAssessmentControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAssessmentControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAssessmentControlSetStatus(ctx context.Context, input *auditmanager.UpdateAssessmentControlSetStatusInput) (*auditmanager.UpdateAssessmentControlSetStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAssessmentControlSetStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAssessmentFramework(ctx context.Context, input *auditmanager.UpdateAssessmentFrameworkInput) (*auditmanager.UpdateAssessmentFrameworkOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAssessmentFrameworkWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateAssessmentStatus(ctx context.Context, input *auditmanager.UpdateAssessmentStatusInput) (*auditmanager.UpdateAssessmentStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateAssessmentStatusWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateControl(ctx context.Context, input *auditmanager.UpdateControlInput) (*auditmanager.UpdateControlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateControlWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) UpdateSettings(ctx context.Context, input *auditmanager.UpdateSettingsInput) (*auditmanager.UpdateSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.UpdateSettingsWithContext(ctx, input)

	return output, internal.EncodeError(err)
}

func (a *Activities) ValidateAssessmentReportIntegrity(ctx context.Context, input *auditmanager.ValidateAssessmentReportIntegrityInput) (*auditmanager.ValidateAssessmentReportIntegrityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, internal.EncodeError(err)
	}
	output, err := client.ValidateAssessmentReportIntegrityWithContext(ctx, input)

	return output, internal.EncodeError(err)
}
